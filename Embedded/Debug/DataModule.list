
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c34  080101a8  080101a8  000201a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ddc  08010ddc  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010ddc  08010ddc  00020ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010de4  08010de4  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010de4  08010de4  00020de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010de8  08010de8  00020de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010dec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000096d0  200001f8  08010fe4  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200098c8  08010fe4  000398c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021824  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005966  00000000  00000000  00051a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c08  00000000  00000000  000573f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159c  00000000  00000000  00059000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a770  00000000  00000000  0005a59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028948  00000000  00000000  00084d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec52f  00000000  00000000  000ad654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008410  00000000  00000000  00199b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001a1f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801018c 	.word	0x0801018c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0801018c 	.word	0x0801018c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <setPath>:
/**** capacity related *****/
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char* dir, char *frontSensor, char* rearSensor, uint8_t path){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	70fb      	strb	r3, [r7, #3]
	sprintf(dir,"Data%d",path);
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	461a      	mov	r2, r3
 8000f16:	490a      	ldr	r1, [pc, #40]	; (8000f40 <setPath+0x3c>)
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00c ff73 	bl	800de04 <siprintf>
	sprintf(frontSensor,"Data%d/FRONT%d.txt",path,path);
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <setPath+0x40>)
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f00c ff6d 	bl	800de04 <siprintf>
	sprintf(rearSensor,"Data%d/Rear%d.txt",path,path);
 8000f2a:	78fa      	ldrb	r2, [r7, #3]
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	4906      	ldr	r1, [pc, #24]	; (8000f48 <setPath+0x44>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f00c ff67 	bl	800de04 <siprintf>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080101a8 	.word	0x080101a8
 8000f44:	080101b0 	.word	0x080101b0
 8000f48:	080101c4 	.word	0x080101c4

08000f4c <createNewFile>:
void createNewFile(char* dir, char* frontSensor, char* rearSensor, uint8_t* pathPtr){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
	uint8_t path = *pathPtr;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 8000f60:	480e      	ldr	r0, [pc, #56]	; (8000f9c <createNewFile+0x50>)
 8000f62:	f000 f833 	bl	8000fcc <Mount_SD>
	Format_SD(path);
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f875 	bl	8001058 <Format_SD>
	Create_Dir(dir);
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f000 fa64 	bl	800143c <Create_Dir>
	Create_File(frontSensor);
 8000f74:	68b8      	ldr	r0, [r7, #8]
 8000f76:	f000 f90b 	bl	8001190 <Create_File>
	Create_File(rearSensor);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f908 	bl	8001190 <Create_File>
	Unmount_SD("/");
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <createNewFile+0x50>)
 8000f82:	f000 f847 	bl	8001014 <Unmount_SD>
	(*pathPtr)++;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	080101d8 	.word	0x080101d8

08000fa0 <Send_Uart>:

void Send_Uart (char *string)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff f991 	bl	80002d0 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <Send_Uart+0x28>)
 8000fba:	f006 fae4 	bl	8007586 <HAL_UART_Transmit>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20005964 	.word	0x20005964

08000fcc <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <Mount_SD+0x38>)
 8000fda:	f008 fd1b 	bl	8009a14 <f_mount>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <Mount_SD+0x3c>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <Mount_SD+0x3c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <Mount_SD+0x2a>
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <Mount_SD+0x40>)
 8000ff0:	f7ff ffd6 	bl	8000fa0 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000ff4:	e002      	b.n	8000ffc <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <Mount_SD+0x44>)
 8000ff8:	f7ff ffd2 	bl	8000fa0 <Send_Uart>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000214 	.word	0x20000214
 8001008:	20000690 	.word	0x20000690
 800100c:	080101dc 	.word	0x080101dc
 8001010:	08010200 	.word	0x08010200

08001014 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	2000      	movs	r0, #0
 8001022:	f008 fcf7 	bl	8009a14 <f_mount>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <Unmount_SD+0x38>)
 800102c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <Unmount_SD+0x38>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <Unmount_SD+0x2a>
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <Unmount_SD+0x3c>)
 8001038:	f7ff ffb2 	bl	8000fa0 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800103c:	e002      	b.n	8001044 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <Unmount_SD+0x40>)
 8001040:	f7ff ffae 	bl	8000fa0 <Send_Uart>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000690 	.word	0x20000690
 8001050:	08010224 	.word	0x08010224
 8001054:	0801024c 	.word	0x0801024c

08001058 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b096      	sub	sp, #88	; 0x58
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
    DIR dir;
    FILINFO fno;
    char *path = pvPortMalloc(20 * sizeof(char));
 8001062:	2014      	movs	r0, #20
 8001064:	f00b ff60 	bl	800cf28 <pvPortMalloc>
 8001068:	6578      	str	r0, [r7, #84]	; 0x54
    sprintf(path, "/Data%d", dirNumber);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	461a      	mov	r2, r3
 800106e:	4943      	ldr	r1, [pc, #268]	; (800117c <Format_SD+0x124>)
 8001070:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001072:	f00c fec7 	bl	800de04 <siprintf>
    fresult = f_opendir(&dir, path);
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800107c:	4618      	mov	r0, r3
 800107e:	f009 f94e 	bl	800a31e <f_opendir>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <Format_SD+0x128>)
 8001088:	701a      	strb	r2, [r3, #0]

    if (fresult == FR_OK)
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <Format_SD+0x128>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d154      	bne.n	800113c <Format_SD+0xe4>
    {
        while (1)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001092:	f107 020c 	add.w	r2, r7, #12
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f009 f9e2 	bl	800a466 <f_readdir>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <Format_SD+0x128>)
 80010a8:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <Format_SD+0x128>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d13f      	bne.n	8001132 <Format_SD+0xda>
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d03c      	beq.n	8001132 <Format_SD+0xda>
            if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	3309      	adds	r3, #9
 80010be:	4619      	mov	r1, r3
 80010c0:	4830      	ldr	r0, [pc, #192]	; (8001184 <Format_SD+0x12c>)
 80010c2:	f7ff f8a5 	bl	8000210 <strcmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d02f      	beq.n	800112c <Format_SD+0xd4>
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	3309      	adds	r3, #9
 80010d2:	4619      	mov	r1, r3
 80010d4:	482c      	ldr	r0, [pc, #176]	; (8001188 <Format_SD+0x130>)
 80010d6:	f7ff f89b 	bl	8000210 <strcmp>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d025      	beq.n	800112c <Format_SD+0xd4>
            {
                continue;
            }

            sprintf(path, "/Data%d/%s",dirNumber, fno.fname);
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	3309      	adds	r3, #9
 80010e8:	4928      	ldr	r1, [pc, #160]	; (800118c <Format_SD+0x134>)
 80010ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80010ec:	f00c fe8a 	bl	800de04 <siprintf>
            if (fno.fattrib & AM_DIR) /* It is a directory */
 80010f0:	7d3b      	ldrb	r3, [r7, #20]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00c      	beq.n	8001114 <Format_SD+0xbc>
            {

                fresult = Format_SD(dirNumber);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffab 	bl	8001058 <Format_SD>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <Format_SD+0x128>)
 8001108:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <Format_SD+0x128>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0bf      	beq.n	8001092 <Format_SD+0x3a>
 8001112:	e00e      	b.n	8001132 <Format_SD+0xda>
            }
            else
            {
                fresult = f_unlink(path);
 8001114:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001116:	f009 fa29 	bl	800a56c <f_unlink>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <Format_SD+0x128>)
 8001120:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <Format_SD+0x128>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <Format_SD+0xd8>
 800112a:	e7b2      	b.n	8001092 <Format_SD+0x3a>
                continue;
 800112c:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800112e:	e7b0      	b.n	8001092 <Format_SD+0x3a>
                if (fresult != FR_OK) break;
 8001130:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4618      	mov	r0, r3
 8001138:	f009 f96a 	bl	800a410 <f_closedir>
    }


    if (fresult == FR_OK)
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <Format_SD+0x128>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d111      	bne.n	8001168 <Format_SD+0x110>
    {
    	memset(path, 0, 20);
 8001144:	2214      	movs	r2, #20
 8001146:	2100      	movs	r1, #0
 8001148:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800114a:	f00c ff53 	bl	800dff4 <memset>
    	sprintf(path, "/Data%d", dirNumber);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	461a      	mov	r2, r3
 8001152:	490a      	ldr	r1, [pc, #40]	; (800117c <Format_SD+0x124>)
 8001154:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001156:	f00c fe55 	bl	800de04 <siprintf>
        fresult = f_unlink(path);
 800115a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800115c:	f009 fa06 	bl	800a56c <f_unlink>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <Format_SD+0x128>)
 8001166:	701a      	strb	r2, [r3, #0]
    }

    vPortFree(path);
 8001168:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800116a:	f00b ffa9 	bl	800d0c0 <vPortFree>
    return (fresult);
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <Format_SD+0x128>)
 8001170:	781b      	ldrb	r3, [r3, #0]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3758      	adds	r7, #88	; 0x58
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	080102a0 	.word	0x080102a0
 8001180:	20000690 	.word	0x20000690
 8001184:	080102a8 	.word	0x080102a8
 8001188:	080102ac 	.word	0x080102ac
 800118c:	080102b0 	.word	0x080102b0

08001190 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001198:	4940      	ldr	r1, [pc, #256]	; (800129c <Create_File+0x10c>)
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f009 f9a6 	bl	800a4ec <f_stat>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <Create_File+0x110>)
 80011a6:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <Create_File+0x110>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d111      	bne.n	80011d4 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f00b feb9 	bl	800cf28 <pvPortMalloc>
 80011b6:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	493a      	ldr	r1, [pc, #232]	; (80012a4 <Create_File+0x114>)
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f00c fe21 	bl	800de04 <siprintf>
		Send_Uart(buf);
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff feec 	bl	8000fa0 <Send_Uart>
		vPortFree(buf);
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f00b ff79 	bl	800d0c0 <vPortFree>
	    return fresult;
 80011ce:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <Create_File+0x110>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	e05f      	b.n	8001294 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011d4:	220b      	movs	r2, #11
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4833      	ldr	r0, [pc, #204]	; (80012a8 <Create_File+0x118>)
 80011da:	f008 fc7f 	bl	8009adc <f_open>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <Create_File+0x110>)
 80011e4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <Create_File+0x110>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d014      	beq.n	8001218 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f00b fe9a 	bl	800cf28 <pvPortMalloc>
 80011f4:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80011f6:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <Create_File+0x110>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	492b      	ldr	r1, [pc, #172]	; (80012ac <Create_File+0x11c>)
 8001200:	6938      	ldr	r0, [r7, #16]
 8001202:	f00c fdff 	bl	800de04 <siprintf>
			Send_Uart(buf);
 8001206:	6938      	ldr	r0, [r7, #16]
 8001208:	f7ff feca 	bl	8000fa0 <Send_Uart>
			vPortFree(buf);
 800120c:	6938      	ldr	r0, [r7, #16]
 800120e:	f00b ff57 	bl	800d0c0 <vPortFree>
		    return fresult;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <Create_File+0x110>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	e03d      	b.n	8001294 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001218:	2064      	movs	r0, #100	; 0x64
 800121a:	f00b fe85 	bl	800cf28 <pvPortMalloc>
 800121e:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4923      	ldr	r1, [pc, #140]	; (80012b0 <Create_File+0x120>)
 8001224:	69f8      	ldr	r0, [r7, #28]
 8001226:	f00c fded 	bl	800de04 <siprintf>
			Send_Uart(buf);
 800122a:	69f8      	ldr	r0, [r7, #28]
 800122c:	f7ff feb8 	bl	8000fa0 <Send_Uart>
			vPortFree(buf);
 8001230:	69f8      	ldr	r0, [r7, #28]
 8001232:	f00b ff45 	bl	800d0c0 <vPortFree>
		}

		fresult = f_close(&fil);
 8001236:	481c      	ldr	r0, [pc, #112]	; (80012a8 <Create_File+0x118>)
 8001238:	f009 f842 	bl	800a2c0 <f_close>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <Create_File+0x110>)
 8001242:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <Create_File+0x110>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d012      	beq.n	8001272 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f00b fe6b 	bl	800cf28 <pvPortMalloc>
 8001252:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <Create_File+0x110>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4915      	ldr	r1, [pc, #84]	; (80012b4 <Create_File+0x124>)
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f00c fdd0 	bl	800de04 <siprintf>
			Send_Uart(buf);
 8001264:	6978      	ldr	r0, [r7, #20]
 8001266:	f7ff fe9b 	bl	8000fa0 <Send_Uart>
			vPortFree(buf);
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f00b ff28 	bl	800d0c0 <vPortFree>
 8001270:	e00e      	b.n	8001290 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001272:	2064      	movs	r0, #100	; 0x64
 8001274:	f00b fe58 	bl	800cf28 <pvPortMalloc>
 8001278:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	490e      	ldr	r1, [pc, #56]	; (80012b8 <Create_File+0x128>)
 800127e:	69b8      	ldr	r0, [r7, #24]
 8001280:	f00c fdc0 	bl	800de04 <siprintf>
			Send_Uart(buf);
 8001284:	69b8      	ldr	r0, [r7, #24]
 8001286:	f7ff fe8b 	bl	8000fa0 <Send_Uart>
			vPortFree(buf);
 800128a:	69b8      	ldr	r0, [r7, #24]
 800128c:	f00b ff18 	bl	800d0c0 <vPortFree>
		}
	}
    return fresult;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <Create_File+0x110>)
 8001292:	781b      	ldrb	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000678 	.word	0x20000678
 80012a0:	20000690 	.word	0x20000690
 80012a4:	08010434 	.word	0x08010434
 80012a8:	20000448 	.word	0x20000448
 80012ac:	0801046c 	.word	0x0801046c
 80012b0:	08010494 	.word	0x08010494
 80012b4:	080104d4 	.word	0x080104d4
 80012b8:	08010414 	.word	0x08010414

080012bc <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80012c6:	4953      	ldr	r1, [pc, #332]	; (8001414 <Update_File+0x158>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f009 f90f 	bl	800a4ec <f_stat>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b51      	ldr	r3, [pc, #324]	; (8001418 <Update_File+0x15c>)
 80012d4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012d6:	4b50      	ldr	r3, [pc, #320]	; (8001418 <Update_File+0x15c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d011      	beq.n	8001302 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 80012de:	2064      	movs	r0, #100	; 0x64
 80012e0:	f00b fe22 	bl	800cf28 <pvPortMalloc>
 80012e4:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	494c      	ldr	r1, [pc, #304]	; (800141c <Update_File+0x160>)
 80012ea:	68b8      	ldr	r0, [r7, #8]
 80012ec:	f00c fd8a 	bl	800de04 <siprintf>
		Send_Uart (buf);
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f7ff fe55 	bl	8000fa0 <Send_Uart>
		vPortFree(buf);
 80012f6:	68b8      	ldr	r0, [r7, #8]
 80012f8:	f00b fee2 	bl	800d0c0 <vPortFree>
	    return fresult;
 80012fc:	4b46      	ldr	r3, [pc, #280]	; (8001418 <Update_File+0x15c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	e083      	b.n	800140a <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001302:	2232      	movs	r2, #50	; 0x32
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4846      	ldr	r0, [pc, #280]	; (8001420 <Update_File+0x164>)
 8001308:	f008 fbe8 	bl	8009adc <f_open>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b41      	ldr	r3, [pc, #260]	; (8001418 <Update_File+0x15c>)
 8001312:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001314:	4b40      	ldr	r3, [pc, #256]	; (8001418 <Update_File+0x15c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d014      	beq.n	8001346 <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f00b fe03 	bl	800cf28 <pvPortMalloc>
 8001322:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001324:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <Update_File+0x15c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	493d      	ldr	r1, [pc, #244]	; (8001424 <Update_File+0x168>)
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f00c fd68 	bl	800de04 <siprintf>
	    	Send_Uart(buf);
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff fe33 	bl	8000fa0 <Send_Uart>
	        vPortFree(buf);
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f00b fec0 	bl	800d0c0 <vPortFree>
	        return fresult;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <Update_File+0x15c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	e061      	b.n	800140a <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f7fe ffc2 	bl	80002d0 <strlen>
 800134c:	4602      	mov	r2, r0
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <Update_File+0x16c>)
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	4833      	ldr	r0, [pc, #204]	; (8001420 <Update_File+0x164>)
 8001354:	f008 fd87 	bl	8009e66 <f_write>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <Update_File+0x15c>)
 800135e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <Update_File+0x15c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d012      	beq.n	800138e <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001368:	2064      	movs	r0, #100	; 0x64
 800136a:	f00b fddd 	bl	800cf28 <pvPortMalloc>
 800136e:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <Update_File+0x15c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	492c      	ldr	r1, [pc, #176]	; (800142c <Update_File+0x170>)
 800137a:	69b8      	ldr	r0, [r7, #24]
 800137c:	f00c fd42 	bl	800de04 <siprintf>
	    	Send_Uart(buf);
 8001380:	69b8      	ldr	r0, [r7, #24]
 8001382:	f7ff fe0d 	bl	8000fa0 <Send_Uart>
	    	vPortFree(buf);
 8001386:	69b8      	ldr	r0, [r7, #24]
 8001388:	f00b fe9a 	bl	800d0c0 <vPortFree>
 800138c:	e00e      	b.n	80013ac <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800138e:	2064      	movs	r0, #100	; 0x64
 8001390:	f00b fdca 	bl	800cf28 <pvPortMalloc>
 8001394:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4925      	ldr	r1, [pc, #148]	; (8001430 <Update_File+0x174>)
 800139a:	69f8      	ldr	r0, [r7, #28]
 800139c:	f00c fd32 	bl	800de04 <siprintf>
	    	Send_Uart(buf);
 80013a0:	69f8      	ldr	r0, [r7, #28]
 80013a2:	f7ff fdfd 	bl	8000fa0 <Send_Uart>
	    	vPortFree(buf);
 80013a6:	69f8      	ldr	r0, [r7, #28]
 80013a8:	f00b fe8a 	bl	800d0c0 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80013ac:	481c      	ldr	r0, [pc, #112]	; (8001420 <Update_File+0x164>)
 80013ae:	f008 ff87 	bl	800a2c0 <f_close>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <Update_File+0x15c>)
 80013b8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <Update_File+0x15c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d012      	beq.n	80013e8 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80013c2:	2064      	movs	r0, #100	; 0x64
 80013c4:	f00b fdb0 	bl	800cf28 <pvPortMalloc>
 80013c8:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <Update_File+0x15c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4918      	ldr	r1, [pc, #96]	; (8001434 <Update_File+0x178>)
 80013d4:	6938      	ldr	r0, [r7, #16]
 80013d6:	f00c fd15 	bl	800de04 <siprintf>
	    	Send_Uart(buf);
 80013da:	6938      	ldr	r0, [r7, #16]
 80013dc:	f7ff fde0 	bl	8000fa0 <Send_Uart>
	    	vPortFree(buf);
 80013e0:	6938      	ldr	r0, [r7, #16]
 80013e2:	f00b fe6d 	bl	800d0c0 <vPortFree>
 80013e6:	e00e      	b.n	8001406 <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80013e8:	2064      	movs	r0, #100	; 0x64
 80013ea:	f00b fd9d 	bl	800cf28 <pvPortMalloc>
 80013ee:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4911      	ldr	r1, [pc, #68]	; (8001438 <Update_File+0x17c>)
 80013f4:	6978      	ldr	r0, [r7, #20]
 80013f6:	f00c fd05 	bl	800de04 <siprintf>
	    	Send_Uart(buf);
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff fdd0 	bl	8000fa0 <Send_Uart>
	    	vPortFree(buf);
 8001400:	6978      	ldr	r0, [r7, #20]
 8001402:	f00b fe5d 	bl	800d0c0 <vPortFree>
	     }
	}
    return fresult;
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <Update_File+0x15c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000678 	.word	0x20000678
 8001418:	20000690 	.word	0x20000690
 800141c:	080102bc 	.word	0x080102bc
 8001420:	20000448 	.word	0x20000448
 8001424:	080102dc 	.word	0x080102dc
 8001428:	20000694 	.word	0x20000694
 800142c:	080104f8 	.word	0x080104f8
 8001430:	08010520 	.word	0x08010520
 8001434:	080103ec 	.word	0x080103ec
 8001438:	08010414 	.word	0x08010414

0800143c <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f009 f943 	bl	800a6d0 <f_mkdir>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <Create_Dir+0x70>)
 8001450:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <Create_Dir+0x70>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f00b fd64 	bl	800cf28 <pvPortMalloc>
 8001460:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4912      	ldr	r1, [pc, #72]	; (80014b0 <Create_Dir+0x74>)
 8001466:	68b8      	ldr	r0, [r7, #8]
 8001468:	f00c fccc 	bl	800de04 <siprintf>
    	Send_Uart (buf);
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f7ff fd97 	bl	8000fa0 <Send_Uart>
    	vPortFree(buf);
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	f00b fe24 	bl	800d0c0 <vPortFree>
 8001478:	e011      	b.n	800149e <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 800147a:	2064      	movs	r0, #100	; 0x64
 800147c:	f00b fd54 	bl	800cf28 <pvPortMalloc>
 8001480:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <Create_Dir+0x70>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	490a      	ldr	r1, [pc, #40]	; (80014b4 <Create_Dir+0x78>)
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f00c fcb9 	bl	800de04 <siprintf>
    	Send_Uart(buf);
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff fd84 	bl	8000fa0 <Send_Uart>
    	vPortFree(buf);
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f00b fe11 	bl	800d0c0 <vPortFree>
    }
    return fresult;
 800149e:	4b03      	ldr	r3, [pc, #12]	; (80014ac <Create_Dir+0x70>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000690 	.word	0x20000690
 80014b0:	08010580 	.word	0x08010580
 80014b4:	080105a4 	.word	0x080105a4

080014b8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_ADC2_Init+0xb8>)
 80014cc:	4a29      	ldr	r2, [pc, #164]	; (8001574 <MX_ADC2_Init+0xbc>)
 80014ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_ADC2_Init+0xb8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_ADC2_Init+0xb8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_ADC2_Init+0xb8>)
 80014de:	2201      	movs	r2, #1
 80014e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_ADC2_Init+0xb8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_ADC2_Init+0xb8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_ADC2_Init+0xb8>)
 80014f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_ADC2_Init+0xb8>)
 80014fa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_ADC2_Init+0xb8>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_ADC2_Init+0xb8>)
 8001508:	2202      	movs	r2, #2
 800150a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_ADC2_Init+0xb8>)
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_ADC2_Init+0xb8>)
 8001516:	2201      	movs	r2, #1
 8001518:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800151a:	4815      	ldr	r0, [pc, #84]	; (8001570 <MX_ADC2_Init+0xb8>)
 800151c:	f002 f8e6 	bl	80036ec <HAL_ADC_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001526:	f001 f8eb 	bl	8002700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800152a:	230f      	movs	r3, #15
 800152c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800152e:	2301      	movs	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001532:	2301      	movs	r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_ADC2_Init+0xb8>)
 800153c:	f002 fc2c 	bl	8003d98 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001546:	f001 f8db 	bl	8002700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800154a:	230e      	movs	r3, #14
 800154c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800154e:	2302      	movs	r3, #2
 8001550:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_ADC2_Init+0xb8>)
 8001558:	f002 fc1e 	bl	8003d98 <HAL_ADC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8001562:	f001 f8cd 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000698 	.word	0x20000698
 8001574:	40012100 	.word	0x40012100

08001578 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157e:	463b      	mov	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <MX_ADC3_Init+0x98>)
 800158c:	4a21      	ldr	r2, [pc, #132]	; (8001614 <MX_ADC3_Init+0x9c>)
 800158e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_ADC3_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <MX_ADC3_Init+0x98>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_ADC3_Init+0x98>)
 800159e:	2201      	movs	r2, #1
 80015a0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_ADC3_Init+0x98>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_ADC3_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_ADC3_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_ADC3_Init+0x98>)
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <MX_ADC3_Init+0xa0>)
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_ADC3_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MX_ADC3_Init+0x98>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_ADC3_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_ADC3_Init+0x98>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <MX_ADC3_Init+0x98>)
 80015d8:	f002 f888 	bl	80036ec <HAL_ADC_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f001 f88d 	bl	8002700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_ADC3_Init+0x98>)
 80015f8:	f002 fbce 	bl	8003d98 <HAL_ADC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001602:	f001 f87d 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200006e0 	.word	0x200006e0
 8001614:	40012200 	.word	0x40012200
 8001618:	0f000001 	.word	0x0f000001

0800161c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a46      	ldr	r2, [pc, #280]	; (8001754 <HAL_ADC_MspInit+0x138>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d159      	bne.n	80016f2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	4b45      	ldr	r3, [pc, #276]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a44      	ldr	r2, [pc, #272]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 8001648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b42      	ldr	r3, [pc, #264]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a3d      	ldr	r2, [pc, #244]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN14
    PC5     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001676:	2330      	movs	r3, #48	; 0x30
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167a:	2303      	movs	r3, #3
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	4834      	ldr	r0, [pc, #208]	; (800175c <HAL_ADC_MspInit+0x140>)
 800168a:	f003 faf7 	bl	8004c7c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_ADC_MspInit+0x144>)
 8001690:	4a34      	ldr	r2, [pc, #208]	; (8001764 <HAL_ADC_MspInit+0x148>)
 8001692:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_ADC_MspInit+0x144>)
 8001696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800169a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_ADC_MspInit+0x144>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b8:	4b29      	ldr	r3, [pc, #164]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016be:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80016d4:	4822      	ldr	r0, [pc, #136]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016d6:	f002 fef1 	bl	80044bc <HAL_DMA_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80016e0:	f001 f80e 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
 80016ea:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_ADC_MspInit+0x144>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80016f0:	e02c      	b.n	800174c <HAL_ADC_MspInit+0x130>
  else if(adcHandle->Instance==ADC3)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_ADC_MspInit+0x14c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d127      	bne.n	800174c <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6453      	str	r3, [r2, #68]	; 0x44
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6313      	str	r3, [r2, #48]	; 0x30
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_ADC_MspInit+0x13c>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <HAL_ADC_MspInit+0x150>)
 8001748:	f003 fa98 	bl	8004c7c <HAL_GPIO_Init>
}
 800174c:	bf00      	nop
 800174e:	3730      	adds	r7, #48	; 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40012100 	.word	0x40012100
 8001758:	40023800 	.word	0x40023800
 800175c:	40020800 	.word	0x40020800
 8001760:	20000728 	.word	0x20000728
 8001764:	40026440 	.word	0x40026440
 8001768:	40012200 	.word	0x40012200
 800176c:	40020000 	.word	0x40020000

08001770 <readButton>:

/******************************************************************************
* Function Definitions
*******************************************************************************/

button_t readButton(void){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	button_t button;
	static uint8_t buttonLock;
	uint16_t buttonAdcValue = BUTTON_NO_BUTTON_ADC_VAL;
 8001776:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800177a:	80bb      	strh	r3, [r7, #4]
	HAL_ADC_Start(BUTTON_ADC_CHANNEL);
 800177c:	4830      	ldr	r0, [pc, #192]	; (8001840 <readButton+0xd0>)
 800177e:	f001 fff9 	bl	8003774 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(BUTTON_ADC_CHANNEL, 10);
 8001782:	210a      	movs	r1, #10
 8001784:	482e      	ldr	r0, [pc, #184]	; (8001840 <readButton+0xd0>)
 8001786:	f002 f8fa 	bl	800397e <HAL_ADC_PollForConversion>
	buttonAdcValue = HAL_ADC_GetValue(BUTTON_ADC_CHANNEL);
 800178a:	482d      	ldr	r0, [pc, #180]	; (8001840 <readButton+0xd0>)
 800178c:	f002 faec 	bl	8003d68 <HAL_ADC_GetValue>
 8001790:	4603      	mov	r3, r0
 8001792:	80bb      	strh	r3, [r7, #4]
	HAL_ADC_Stop(BUTTON_ADC_CHANNEL);
 8001794:	482a      	ldr	r0, [pc, #168]	; (8001840 <readButton+0xd0>)
 8001796:	f002 f8bf 	bl	8003918 <HAL_ADC_Stop>
	if (0 == buttonLock){
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <readButton+0xd4>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d13b      	bne.n	800181a <readButton+0xaa>
		if ( BUTTON_RANGE(buttonAdcValue, BUTTON_SELECT_ADC_VAL)){
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	f640 320e 	movw	r2, #2830	; 0xb0e
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d907      	bls.n	80017bc <readButton+0x4c>
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	f640 3271 	movw	r2, #2929	; 0xb71
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d802      	bhi.n	80017bc <readButton+0x4c>
			button = BUTTON_SELECT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	e02a      	b.n	8001812 <readButton+0xa2>
		}
		else if ( BUTTON_RANGE(buttonAdcValue, BUTTON_UP_ADC_VAL)){
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017c2:	d906      	bls.n	80017d2 <readButton+0x62>
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80017ca:	d202      	bcs.n	80017d2 <readButton+0x62>
			button = BUTTON_UP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	e01f      	b.n	8001812 <readButton+0xa2>
		}
		else if ( BUTTON_RANGE(buttonAdcValue, BUTTON_DOWN_ADC_VAL)){
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80017d8:	d907      	bls.n	80017ea <readButton+0x7a>
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	f240 5213 	movw	r2, #1299	; 0x513
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d802      	bhi.n	80017ea <readButton+0x7a>
			button = BUTTON_DOWN;
 80017e4:	2302      	movs	r3, #2
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	e013      	b.n	8001812 <readButton+0xa2>
		}
		else if ( BUTTON_RANGE(buttonAdcValue, BUTTON_LEFT_ADC_VAL)){
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	f5b3 6feb 	cmp.w	r3, #1880	; 0x758
 80017f0:	d907      	bls.n	8001802 <readButton+0x92>
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	f240 72bb 	movw	r2, #1979	; 0x7bb
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d802      	bhi.n	8001802 <readButton+0x92>
			button = BUTTON_LEFT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	e007      	b.n	8001812 <readButton+0xa2>
		}
		else if ( BUTTON_RANGE(buttonAdcValue, BUTTON_RIGHT_ADC_VAL)){
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	2b31      	cmp	r3, #49	; 0x31
 8001806:	d802      	bhi.n	800180e <readButton+0x9e>
			button = BUTTON_RIGHT;
 8001808:	2304      	movs	r3, #4
 800180a:	71fb      	strb	r3, [r7, #7]
 800180c:	e001      	b.n	8001812 <readButton+0xa2>
		}
		else{
			button = BUTTON_SNA;
 800180e:	2305      	movs	r3, #5
 8001810:	71fb      	strb	r3, [r7, #7]
		}
		buttonLock = 1;
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <readButton+0xd4>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e001      	b.n	800181e <readButton+0xae>
	}
	else{
		button = BUTTON_SNA;
 800181a:	2305      	movs	r3, #5
 800181c:	71fb      	strb	r3, [r7, #7]
	}
	buttonLock = (buttonAdcValue < BUTTON_NO_BUTTON_ADC_VAL)?(1):(0);
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <readButton+0xd4>)
 8001832:	701a      	strb	r2, [r3, #0]

	return (button);
 8001834:	79fb      	ldrb	r3, [r7, #7]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200006e0 	.word	0x200006e0
 8001844:	20000788 	.word	0x20000788

08001848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_DMA_Init+0x3c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <MX_DMA_Init+0x3c>)
 8001858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_DMA_Init+0x3c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	203a      	movs	r0, #58	; 0x3a
 8001870:	f002 fdfa 	bl	8004468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001874:	203a      	movs	r0, #58	; 0x3a
 8001876:	f002 fe13 	bl	80044a0 <HAL_NVIC_EnableIRQ>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	2101      	movs	r1, #1
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <SELECT+0x14>)
 8001892:	f003 fb87 	bl	8004fa4 <HAL_GPIO_WritePin>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020400 	.word	0x40020400

080018a0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2101      	movs	r1, #1
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <DESELECT+0x14>)
 80018aa:	f003 fb7b 	bl	8004fa4 <HAL_GPIO_WritePin>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40020400 	.word	0x40020400

080018b8 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80018c2:	bf00      	nop
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <SPI_TxByte+0x30>)
 80018c6:	f004 fd08 	bl	80062da <HAL_SPI_GetState>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d1f9      	bne.n	80018c4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80018d0:	1df9      	adds	r1, r7, #7
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	2201      	movs	r2, #1
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <SPI_TxByte+0x30>)
 80018da:	f004 fa20 	bl	8005d1e <HAL_SPI_Transmit>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200053e0 	.word	0x200053e0

080018ec <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80018f2:	23ff      	movs	r3, #255	; 0xff
 80018f4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80018fa:	bf00      	nop
 80018fc:	4809      	ldr	r0, [pc, #36]	; (8001924 <SPI_RxByte+0x38>)
 80018fe:	f004 fcec 	bl	80062da <HAL_SPI_GetState>
 8001902:	4603      	mov	r3, r0
 8001904:	2b01      	cmp	r3, #1
 8001906:	d1f9      	bne.n	80018fc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001908:	1dba      	adds	r2, r7, #6
 800190a:	1df9      	adds	r1, r7, #7
 800190c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2301      	movs	r3, #1
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <SPI_RxByte+0x38>)
 8001916:	f004 fb3e 	bl	8005f96 <HAL_SPI_TransmitReceive>
  
  return data;
 800191a:	79bb      	ldrb	r3, [r7, #6]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200053e0 	.word	0x200053e0

08001928 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001930:	f7ff ffdc 	bl	80018ec <SPI_RxByte>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <SD_ReadyWait+0x34>)
 800194c:	2232      	movs	r2, #50	; 0x32
 800194e:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001950:	f7ff ffcc 	bl	80018ec <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001954:	f7ff ffca 	bl	80018ec <SPI_RxByte>
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2bff      	cmp	r3, #255	; 0xff
 8001960:	d004      	beq.n	800196c <SD_ReadyWait+0x28>
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SD_ReadyWait+0x34>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f3      	bne.n	8001954 <SD_ReadyWait+0x10>
  
  return res;
 800196c:	79fb      	ldrb	r3, [r7, #7]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20005482 	.word	0x20005482

0800197c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001982:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001986:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8001988:	f7ff ff8a 	bl	80018a0 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e005      	b.n	800199e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001992:	20ff      	movs	r0, #255	; 0xff
 8001994:	f7ff ff90 	bl	80018b8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	3301      	adds	r3, #1
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	ddf6      	ble.n	8001992 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80019a4:	f7ff ff70 	bl	8001888 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80019a8:	2340      	movs	r3, #64	; 0x40
 80019aa:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80019bc:	2395      	movs	r3, #149	; 0x95
 80019be:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e009      	b.n	80019da <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80019c6:	1d3a      	adds	r2, r7, #4
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff72 	bl	80018b8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	ddf2      	ble.n	80019c6 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80019e0:	e002      	b.n	80019e8 <SD_PowerOn+0x6c>
  {
    Count--;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80019e8:	f7ff ff80 	bl	80018ec <SPI_RxByte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d002      	beq.n	80019f8 <SD_PowerOn+0x7c>
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f4      	bne.n	80019e2 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80019f8:	f7ff ff52 	bl	80018a0 <DESELECT>
  SPI_TxByte(0XFF);
 80019fc:	20ff      	movs	r0, #255	; 0xff
 80019fe:	f7ff ff5b 	bl	80018b8 <SPI_TxByte>
  
  PowerFlag = 1;
 8001a02:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <SD_PowerOn+0x94>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000078a 	.word	0x2000078a

08001a14 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <SD_PowerOff+0x14>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	2000078a 	.word	0x2000078a

08001a2c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <SD_CheckPower+0x14>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000078a 	.word	0x2000078a

08001a44 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <SD_RxDataBlock+0x68>)
 8001a50:	220a      	movs	r2, #10
 8001a52:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001a54:	f7ff ff4a 	bl	80018ec <SPI_RxByte>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2bff      	cmp	r3, #255	; 0xff
 8001a60:	d104      	bne.n	8001a6c <SD_RxDataBlock+0x28>
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <SD_RxDataBlock+0x68>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f3      	bne.n	8001a54 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	2bfe      	cmp	r3, #254	; 0xfe
 8001a70:	d001      	beq.n	8001a76 <SD_RxDataBlock+0x32>
    return FALSE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e016      	b.n	8001aa4 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff53 	bl	8001928 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff4d 	bl	8001928 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	3b02      	subs	r3, #2
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ed      	bne.n	8001a76 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001a9a:	f7ff ff27 	bl	80018ec <SPI_RxByte>
  SPI_RxByte();
 8001a9e:	f7ff ff25 	bl	80018ec <SPI_RxByte>
  
  return TRUE;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20005481 	.word	0x20005481

08001ab0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001ac0:	f7ff ff40 	bl	8001944 <SD_ReadyWait>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	d001      	beq.n	8001ace <SD_TxDataBlock+0x1e>
    return FALSE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e040      	b.n	8001b50 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fef1 	bl	80018b8 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	2bfd      	cmp	r3, #253	; 0xfd
 8001ada:	d031      	beq.n	8001b40 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fee5 	bl	80018b8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fede 	bl	80018b8 <SPI_TxByte>
    } while (--wc);
 8001afc:	7bbb      	ldrb	r3, [r7, #14]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	73bb      	strb	r3, [r7, #14]
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1eb      	bne.n	8001ae0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001b08:	f7ff fef0 	bl	80018ec <SPI_RxByte>
    SPI_RxByte();
 8001b0c:	f7ff feee 	bl	80018ec <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001b10:	e00b      	b.n	8001b2a <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001b12:	f7ff feeb 	bl	80018ec <SPI_RxByte>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d006      	beq.n	8001b32 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001b24:	7b7b      	ldrb	r3, [r7, #13]
 8001b26:	3301      	adds	r3, #1
 8001b28:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001b2a:	7b7b      	ldrb	r3, [r7, #13]
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d9f0      	bls.n	8001b12 <SD_TxDataBlock+0x62>
 8001b30:	e000      	b.n	8001b34 <SD_TxDataBlock+0x84>
        break;
 8001b32:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001b34:	bf00      	nop
 8001b36:	f7ff fed9 	bl	80018ec <SPI_RxByte>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0fa      	beq.n	8001b36 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d101      	bne.n	8001b4e <SD_TxDataBlock+0x9e>
    return TRUE;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001b64:	f7ff feee 	bl	8001944 <SD_ReadyWait>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2bff      	cmp	r3, #255	; 0xff
 8001b6c:	d001      	beq.n	8001b72 <SD_SendCmd+0x1a>
    return 0xFF;
 8001b6e:	23ff      	movs	r3, #255	; 0xff
 8001b70:	e040      	b.n	8001bf4 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe9f 	bl	80018b8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	0e1b      	lsrs	r3, r3, #24
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fe99 	bl	80018b8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fe93 	bl	80018b8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fe8d 	bl	80018b8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fe88 	bl	80018b8 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b40      	cmp	r3, #64	; 0x40
 8001bb0:	d101      	bne.n	8001bb6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001bb2:	2395      	movs	r3, #149	; 0x95
 8001bb4:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	2b48      	cmp	r3, #72	; 0x48
 8001bba:	d101      	bne.n	8001bc0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001bbc:	2387      	movs	r3, #135	; 0x87
 8001bbe:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fe78 	bl	80018b8 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2b4c      	cmp	r3, #76	; 0x4c
 8001bcc:	d101      	bne.n	8001bd2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001bce:	f7ff fe8d 	bl	80018ec <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001bd6:	f7ff fe89 	bl	80018ec <SPI_RxByte>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001bde:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da05      	bge.n	8001bf2 <SD_SendCmd+0x9a>
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	73bb      	strb	r3, [r7, #14]
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f1      	bne.n	8001bd6 <SD_SendCmd+0x7e>
  
  return res;
 8001bf2:	7b7b      	ldrb	r3, [r7, #13]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d5      	b.n	8001dbc <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001c10:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <SD_disk_initialize+0x1c8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <SD_disk_initialize+0x2a>
    return Stat;        
 8001c1e:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <SD_disk_initialize+0x1c8>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	e0ca      	b.n	8001dbc <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001c26:	f7ff fea9 	bl	800197c <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001c2a:	f7ff fe2d 	bl	8001888 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001c32:	2100      	movs	r1, #0
 8001c34:	2040      	movs	r0, #64	; 0x40
 8001c36:	f7ff ff8f 	bl	8001b58 <SD_SendCmd>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	f040 80a5 	bne.w	8001d8c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <SD_disk_initialize+0x1cc>)
 8001c44:	2264      	movs	r2, #100	; 0x64
 8001c46:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001c48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001c4c:	2048      	movs	r0, #72	; 0x48
 8001c4e:	f7ff ff83 	bl	8001b58 <SD_SendCmd>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d158      	bne.n	8001d0a <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e00c      	b.n	8001c78 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001c5e:	7bfc      	ldrb	r4, [r7, #15]
 8001c60:	f7ff fe44 	bl	80018ec <SPI_RxByte>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	f104 0310 	add.w	r3, r4, #16
 8001c6c:	443b      	add	r3, r7
 8001c6e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	3301      	adds	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d9ef      	bls.n	8001c5e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001c7e:	7abb      	ldrb	r3, [r7, #10]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	f040 8083 	bne.w	8001d8c <SD_disk_initialize+0x190>
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	2baa      	cmp	r3, #170	; 0xaa
 8001c8a:	d17f      	bne.n	8001d8c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2077      	movs	r0, #119	; 0x77
 8001c90:	f7ff ff62 	bl	8001b58 <SD_SendCmd>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d807      	bhi.n	8001caa <SD_disk_initialize+0xae>
 8001c9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c9e:	2069      	movs	r0, #105	; 0x69
 8001ca0:	f7ff ff5a 	bl	8001b58 <SD_SendCmd>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <SD_disk_initialize+0x1cc>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1eb      	bne.n	8001c8c <SD_disk_initialize+0x90>
 8001cb4:	e000      	b.n	8001cb8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001cb6:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001cb8:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <SD_disk_initialize+0x1cc>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d064      	beq.n	8001d8c <SD_disk_initialize+0x190>
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	207a      	movs	r0, #122	; 0x7a
 8001cc6:	f7ff ff47 	bl	8001b58 <SD_SendCmd>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d15d      	bne.n	8001d8c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e00c      	b.n	8001cf0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001cd6:	7bfc      	ldrb	r4, [r7, #15]
 8001cd8:	f7ff fe08 	bl	80018ec <SPI_RxByte>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f104 0310 	add.w	r3, r4, #16
 8001ce4:	443b      	add	r3, r7
 8001ce6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	3301      	adds	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d9ef      	bls.n	8001cd6 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001cf6:	7a3b      	ldrb	r3, [r7, #8]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SD_disk_initialize+0x108>
 8001d00:	2306      	movs	r3, #6
 8001d02:	e000      	b.n	8001d06 <SD_disk_initialize+0x10a>
 8001d04:	2302      	movs	r3, #2
 8001d06:	73bb      	strb	r3, [r7, #14]
 8001d08:	e040      	b.n	8001d8c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2077      	movs	r0, #119	; 0x77
 8001d0e:	f7ff ff23 	bl	8001b58 <SD_SendCmd>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d808      	bhi.n	8001d2a <SD_disk_initialize+0x12e>
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2069      	movs	r0, #105	; 0x69
 8001d1c:	f7ff ff1c 	bl	8001b58 <SD_SendCmd>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d801      	bhi.n	8001d2a <SD_disk_initialize+0x12e>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e000      	b.n	8001d2c <SD_disk_initialize+0x130>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d10e      	bne.n	8001d52 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001d34:	2100      	movs	r1, #0
 8001d36:	2077      	movs	r0, #119	; 0x77
 8001d38:	f7ff ff0e 	bl	8001b58 <SD_SendCmd>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d80e      	bhi.n	8001d60 <SD_disk_initialize+0x164>
 8001d42:	2100      	movs	r1, #0
 8001d44:	2069      	movs	r0, #105	; 0x69
 8001d46:	f7ff ff07 	bl	8001b58 <SD_SendCmd>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001d50:	e00d      	b.n	8001d6e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001d52:	2100      	movs	r1, #0
 8001d54:	2041      	movs	r0, #65	; 0x41
 8001d56:	f7ff feff 	bl	8001b58 <SD_SendCmd>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <SD_disk_initialize+0x1cc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1e1      	bne.n	8001d2e <SD_disk_initialize+0x132>
 8001d6a:	e000      	b.n	8001d6e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001d6c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <SD_disk_initialize+0x1cc>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <SD_disk_initialize+0x18c>
 8001d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d7c:	2050      	movs	r0, #80	; 0x50
 8001d7e:	f7ff feeb 	bl	8001b58 <SD_SendCmd>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <SD_disk_initialize+0x1d0>)
 8001d8e:	7bbb      	ldrb	r3, [r7, #14]
 8001d90:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001d92:	f7ff fd85 	bl	80018a0 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001d96:	f7ff fda9 	bl	80018ec <SPI_RxByte>
  
  if (type) 
 8001d9a:	7bbb      	ldrb	r3, [r7, #14]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <SD_disk_initialize+0x1c8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SD_disk_initialize+0x1c8>)
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e001      	b.n	8001db6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001db2:	f7ff fe2f 	bl	8001a14 <SD_PowerOff>
  }
  
  return Stat;
 8001db6:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <SD_disk_initialize+0x1c8>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b2db      	uxtb	r3, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20005481 	.word	0x20005481
 8001dcc:	20000789 	.word	0x20000789

08001dd0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001de0:	2301      	movs	r3, #1
 8001de2:	e002      	b.n	8001dea <SD_disk_status+0x1a>
  
  return Stat;
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SD_disk_status+0x28>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000

08001dfc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	4603      	mov	r3, r0
 8001e0a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <SD_disk_read+0x1c>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <SD_disk_read+0x20>
    return RES_PARERR;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e051      	b.n	8001ec0 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <SD_disk_read+0xcc>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e048      	b.n	8001ec0 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <SD_disk_read+0xd0>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	025b      	lsls	r3, r3, #9
 8001e3e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001e40:	f7ff fd22 	bl	8001888 <SELECT>
  
  if (count == 1) 
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d111      	bne.n	8001e6e <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	2051      	movs	r0, #81	; 0x51
 8001e4e:	f7ff fe83 	bl	8001b58 <SD_SendCmd>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d129      	bne.n	8001eac <SD_disk_read+0xb0>
 8001e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5c:	68b8      	ldr	r0, [r7, #8]
 8001e5e:	f7ff fdf1 	bl	8001a44 <SD_RxDataBlock>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d021      	beq.n	8001eac <SD_disk_read+0xb0>
      count = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	e01e      	b.n	8001eac <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	2052      	movs	r0, #82	; 0x52
 8001e72:	f7ff fe71 	bl	8001b58 <SD_SendCmd>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d117      	bne.n	8001eac <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e80:	68b8      	ldr	r0, [r7, #8]
 8001e82:	f7ff fddf 	bl	8001a44 <SD_RxDataBlock>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e92:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ed      	bne.n	8001e7c <SD_disk_read+0x80>
 8001ea0:	e000      	b.n	8001ea4 <SD_disk_read+0xa8>
          break;
 8001ea2:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	204c      	movs	r0, #76	; 0x4c
 8001ea8:	f7ff fe56 	bl	8001b58 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001eac:	f7ff fcf8 	bl	80018a0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001eb0:	f7ff fd1c 	bl	80018ec <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000789 	.word	0x20000789

08001ed0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4603      	mov	r3, r0
 8001ede:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <SD_disk_write+0x1c>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <SD_disk_write+0x20>
    return RES_PARERR;
 8001eec:	2304      	movs	r3, #4
 8001eee:	e06b      	b.n	8001fc8 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <SD_disk_write+0x100>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e062      	b.n	8001fc8 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <SD_disk_write+0x100>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001f10:	2302      	movs	r3, #2
 8001f12:	e059      	b.n	8001fc8 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <SD_disk_write+0x104>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	025b      	lsls	r3, r3, #9
 8001f24:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001f26:	f7ff fcaf 	bl	8001888 <SELECT>
  
  if (count == 1) 
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d110      	bne.n	8001f52 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	2058      	movs	r0, #88	; 0x58
 8001f34:	f7ff fe10 	bl	8001b58 <SD_SendCmd>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d13a      	bne.n	8001fb4 <SD_disk_write+0xe4>
 8001f3e:	21fe      	movs	r1, #254	; 0xfe
 8001f40:	68b8      	ldr	r0, [r7, #8]
 8001f42:	f7ff fdb5 	bl	8001ab0 <SD_TxDataBlock>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d033      	beq.n	8001fb4 <SD_disk_write+0xe4>
      count = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	e030      	b.n	8001fb4 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <SD_disk_write+0x104>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2077      	movs	r0, #119	; 0x77
 8001f62:	f7ff fdf9 	bl	8001b58 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	2057      	movs	r0, #87	; 0x57
 8001f6a:	f7ff fdf5 	bl	8001b58 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	2059      	movs	r0, #89	; 0x59
 8001f72:	f7ff fdf1 	bl	8001b58 <SD_SendCmd>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d11b      	bne.n	8001fb4 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001f7c:	21fc      	movs	r1, #252	; 0xfc
 8001f7e:	68b8      	ldr	r0, [r7, #8]
 8001f80:	f7ff fd96 	bl	8001ab0 <SD_TxDataBlock>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f90:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ee      	bne.n	8001f7c <SD_disk_write+0xac>
 8001f9e:	e000      	b.n	8001fa2 <SD_disk_write+0xd2>
          break;
 8001fa0:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001fa2:	21fd      	movs	r1, #253	; 0xfd
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fd83 	bl	8001ab0 <SD_TxDataBlock>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001fb4:	f7ff fc74 	bl	80018a0 <DESELECT>
  SPI_RxByte();
 8001fb8:	f7ff fc98 	bl	80018ec <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf14      	ite	ne
 8001fc2:	2301      	movne	r3, #1
 8001fc4:	2300      	moveq	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000789 	.word	0x20000789

08001fd8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b08b      	sub	sp, #44	; 0x2c
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	603a      	str	r2, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e11b      	b.n	800222e <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001ffc:	79bb      	ldrb	r3, [r7, #6]
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d129      	bne.n	8002056 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d017      	beq.n	800203a <SD_disk_ioctl+0x62>
 800200a:	2b02      	cmp	r3, #2
 800200c:	dc1f      	bgt.n	800204e <SD_disk_ioctl+0x76>
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <SD_disk_ioctl+0x40>
 8002012:	2b01      	cmp	r3, #1
 8002014:	d00b      	beq.n	800202e <SD_disk_ioctl+0x56>
 8002016:	e01a      	b.n	800204e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002018:	f7ff fd08 	bl	8001a2c <SD_CheckPower>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002022:	f7ff fcf7 	bl	8001a14 <SD_PowerOff>
      res = RES_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800202c:	e0fd      	b.n	800222a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800202e:	f7ff fca5 	bl	800197c <SD_PowerOn>
      res = RES_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002038:	e0f7      	b.n	800222a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	1c5c      	adds	r4, r3, #1
 800203e:	f7ff fcf5 	bl	8001a2c <SD_CheckPower>
 8002042:	4603      	mov	r3, r0
 8002044:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002046:	2300      	movs	r3, #0
 8002048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800204c:	e0ed      	b.n	800222a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800204e:	2304      	movs	r3, #4
 8002050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002054:	e0e9      	b.n	800222a <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002056:	4b78      	ldr	r3, [pc, #480]	; (8002238 <SD_disk_ioctl+0x260>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002064:	2303      	movs	r3, #3
 8002066:	e0e2      	b.n	800222e <SD_disk_ioctl+0x256>
    
    SELECT();
 8002068:	f7ff fc0e 	bl	8001888 <SELECT>
    
    switch (ctrl) 
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	2b0d      	cmp	r3, #13
 8002070:	f200 80cc 	bhi.w	800220c <SD_disk_ioctl+0x234>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <SD_disk_ioctl+0xa4>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	08002177 	.word	0x08002177
 8002080:	080020b5 	.word	0x080020b5
 8002084:	08002167 	.word	0x08002167
 8002088:	0800220d 	.word	0x0800220d
 800208c:	0800220d 	.word	0x0800220d
 8002090:	0800220d 	.word	0x0800220d
 8002094:	0800220d 	.word	0x0800220d
 8002098:	0800220d 	.word	0x0800220d
 800209c:	0800220d 	.word	0x0800220d
 80020a0:	0800220d 	.word	0x0800220d
 80020a4:	0800220d 	.word	0x0800220d
 80020a8:	08002189 	.word	0x08002189
 80020ac:	080021ad 	.word	0x080021ad
 80020b0:	080021d1 	.word	0x080021d1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80020b4:	2100      	movs	r1, #0
 80020b6:	2049      	movs	r0, #73	; 0x49
 80020b8:	f7ff fd4e 	bl	8001b58 <SD_SendCmd>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 80a8 	bne.w	8002214 <SD_disk_ioctl+0x23c>
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	2110      	movs	r1, #16
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fcba 	bl	8001a44 <SD_RxDataBlock>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 809e 	beq.w	8002214 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80020d8:	7b3b      	ldrb	r3, [r7, #12]
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10e      	bne.n	8002100 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80020e2:	7d7b      	ldrb	r3, [r7, #21]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	7d3b      	ldrb	r3, [r7, #20]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80020f6:	8bfb      	ldrh	r3, [r7, #30]
 80020f8:	029a      	lsls	r2, r3, #10
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e02e      	b.n	800215e <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002100:	7c7b      	ldrb	r3, [r7, #17]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	b2da      	uxtb	r2, r3
 8002108:	7dbb      	ldrb	r3, [r7, #22]
 800210a:	09db      	lsrs	r3, r3, #7
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4413      	add	r3, r2
 8002110:	b2da      	uxtb	r2, r3
 8002112:	7d7b      	ldrb	r3, [r7, #21]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f003 0306 	and.w	r3, r3, #6
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4413      	add	r3, r2
 8002120:	b2db      	uxtb	r3, r3
 8002122:	3302      	adds	r3, #2
 8002124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002128:	7d3b      	ldrb	r3, [r7, #20]
 800212a:	099b      	lsrs	r3, r3, #6
 800212c:	b2db      	uxtb	r3, r3
 800212e:	b29a      	uxth	r2, r3
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	b29b      	uxth	r3, r3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	b29b      	uxth	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b29a      	uxth	r2, r3
 800213c:	7cbb      	ldrb	r3, [r7, #18]
 800213e:	029b      	lsls	r3, r3, #10
 8002140:	b29b      	uxth	r3, r3
 8002142:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002146:	b29b      	uxth	r3, r3
 8002148:	4413      	add	r3, r2
 800214a:	b29b      	uxth	r3, r3
 800214c:	3301      	adds	r3, #1
 800214e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002150:	8bfa      	ldrh	r2, [r7, #30]
 8002152:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002156:	3b09      	subs	r3, #9
 8002158:	409a      	lsls	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002164:	e056      	b.n	8002214 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002174:	e055      	b.n	8002222 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002176:	f7ff fbe5 	bl	8001944 <SD_ReadyWait>
 800217a:	4603      	mov	r3, r0
 800217c:	2bff      	cmp	r3, #255	; 0xff
 800217e:	d14b      	bne.n	8002218 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002186:	e047      	b.n	8002218 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002188:	2100      	movs	r1, #0
 800218a:	2049      	movs	r0, #73	; 0x49
 800218c:	f7ff fce4 	bl	8001b58 <SD_SendCmd>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d142      	bne.n	800221c <SD_disk_ioctl+0x244>
 8002196:	2110      	movs	r1, #16
 8002198:	6a38      	ldr	r0, [r7, #32]
 800219a:	f7ff fc53 	bl	8001a44 <SD_RxDataBlock>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d03b      	beq.n	800221c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021aa:	e037      	b.n	800221c <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80021ac:	2100      	movs	r1, #0
 80021ae:	204a      	movs	r0, #74	; 0x4a
 80021b0:	f7ff fcd2 	bl	8001b58 <SD_SendCmd>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d132      	bne.n	8002220 <SD_disk_ioctl+0x248>
 80021ba:	2110      	movs	r1, #16
 80021bc:	6a38      	ldr	r0, [r7, #32]
 80021be:	f7ff fc41 	bl	8001a44 <SD_RxDataBlock>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02b      	beq.n	8002220 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021ce:	e027      	b.n	8002220 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80021d0:	2100      	movs	r1, #0
 80021d2:	207a      	movs	r0, #122	; 0x7a
 80021d4:	f7ff fcc0 	bl	8001b58 <SD_SendCmd>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021e4:	e00b      	b.n	80021fe <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80021e6:	6a3c      	ldr	r4, [r7, #32]
 80021e8:	1c63      	adds	r3, r4, #1
 80021ea:	623b      	str	r3, [r7, #32]
 80021ec:	f7ff fb7e 	bl	80018ec <SPI_RxByte>
 80021f0:	4603      	mov	r3, r0
 80021f2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80021f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021f8:	3301      	adds	r3, #1
 80021fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002202:	2b03      	cmp	r3, #3
 8002204:	d9ef      	bls.n	80021e6 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 800220c:	2304      	movs	r3, #4
 800220e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002212:	e006      	b.n	8002222 <SD_disk_ioctl+0x24a>
      break;
 8002214:	bf00      	nop
 8002216:	e004      	b.n	8002222 <SD_disk_ioctl+0x24a>
      break;
 8002218:	bf00      	nop
 800221a:	e002      	b.n	8002222 <SD_disk_ioctl+0x24a>
      break;
 800221c:	bf00      	nop
 800221e:	e000      	b.n	8002222 <SD_disk_ioctl+0x24a>
      break;
 8002220:	bf00      	nop
    }
    
    DESELECT();
 8002222:	f7ff fb3d 	bl	80018a0 <DESELECT>
    SPI_RxByte();
 8002226:	f7ff fb61 	bl	80018ec <SPI_RxByte>
  }
  
  return res;
 800222a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800222e:	4618      	mov	r0, r3
 8002230:	372c      	adds	r7, #44	; 0x2c
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <vApplicationGetIdleTaskMemory+0x2c>)
 800224c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <vApplicationGetIdleTaskMemory+0x30>)
 8002252:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20005100 	.word	0x20005100
 800226c:	200051a0 	.word	0x200051a0

08002270 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b0a2      	sub	sp, #136	; 0x88
 8002274:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <MX_FREERTOS_Init+0xf4>)
 800227e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8002282:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f008 fc77 	bl	800ab7c <osSemaphoreCreate>
 800228e:	4603      	mov	r3, r0
 8002290:	4a35      	ldr	r2, [pc, #212]	; (8002368 <MX_FREERTOS_Init+0xf8>)
 8002292:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8002294:	2300      	movs	r3, #0
 8002296:	67bb      	str	r3, [r7, #120]	; 0x78
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <MX_FREERTOS_Init+0xfc>)
 800229a:	67fb      	str	r3, [r7, #124]	; 0x7c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 800229c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022a0:	2101      	movs	r1, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	f008 fc6a 	bl	800ab7c <osSemaphoreCreate>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a31      	ldr	r2, [pc, #196]	; (8002370 <MX_FREERTOS_Init+0x100>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonSem */
  osSemaphoreStaticDef(buttonSem, &buttonSemControlBlock);
 80022ae:	2300      	movs	r3, #0
 80022b0:	673b      	str	r3, [r7, #112]	; 0x70
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <MX_FREERTOS_Init+0x104>)
 80022b4:	677b      	str	r3, [r7, #116]	; 0x74
  buttonSemHandle = osSemaphoreCreate(osSemaphore(buttonSem), 1);
 80022b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f008 fc5d 	bl	800ab7c <osSemaphoreCreate>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <MX_FREERTOS_Init+0x108>)
 80022c6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTask */
  osThreadStaticDef(buttonTask, buttonTaskInit, osPriorityNormal, 0, 128, buttonTaskBuffer, &buttonTaskControlBlock);
 80022c8:	4b2c      	ldr	r3, [pc, #176]	; (800237c <MX_FREERTOS_Init+0x10c>)
 80022ca:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80022ce:	461d      	mov	r5, r3
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 80022dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f008 fbea 	bl	800aabc <osThreadCreate>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4a25      	ldr	r2, [pc, #148]	; (8002380 <MX_FREERTOS_Init+0x110>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, initSensorRead, osPriorityNormal, 0, 2048, sensorReadBuffer, &sensorReadControlBlock);
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <MX_FREERTOS_Init+0x114>)
 80022f0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80022f4:	461d      	mov	r5, r3
 80022f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 8002302:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f008 fbd7 	bl	800aabc <osThreadCreate>
 800230e:	4603      	mov	r3, r0
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <MX_FREERTOS_Init+0x118>)
 8002312:	6013      	str	r3, [r2, #0]

  /* definition and creation of SdCard */
  osThreadStaticDef(SdCard, SdCardInit, osPriorityHigh, 0, 256, SdCardBuffer, &SdCardControlBlock);
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <MX_FREERTOS_Init+0x11c>)
 8002316:	f107 041c 	add.w	r4, r7, #28
 800231a:	461d      	mov	r5, r3
 800231c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800231e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f008 fbc4 	bl	800aabc <osThreadCreate>
 8002334:	4603      	mov	r3, r0
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <MX_FREERTOS_Init+0x120>)
 8002338:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 2048, menuProcessDataBuffer, &menuProcessDataControlBlock);
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <MX_FREERTOS_Init+0x124>)
 800233c:	463c      	mov	r4, r7
 800233e:	461d      	mov	r5, r3
 8002340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 800234c:	463b      	mov	r3, r7
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f008 fbb3 	bl	800aabc <osThreadCreate>
 8002356:	4603      	mov	r3, r0
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <MX_FREERTOS_Init+0x128>)
 800235a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800235c:	bf00      	nop
 800235e:	3788      	adds	r7, #136	; 0x88
 8002360:	46bd      	mov	sp, r7
 8002362:	bdb0      	pop	{r4, r5, r7, pc}
 8002364:	20005020 	.word	0x20005020
 8002368:	2000501c 	.word	0x2000501c
 800236c:	2000506c 	.word	0x2000506c
 8002370:	20005068 	.word	0x20005068
 8002374:	200050b8 	.word	0x200050b8
 8002378:	200050b4 	.word	0x200050b4
 800237c:	08010618 	.word	0x08010618
 8002380:	2000078c 	.word	0x2000078c
 8002384:	08010640 	.word	0x08010640
 8002388:	20000a30 	.word	0x20000a30
 800238c:	08010664 	.word	0x08010664
 8002390:	20002ad4 	.word	0x20002ad4
 8002394:	08010690 	.word	0x08010690
 8002398:	20002f78 	.word	0x20002f78

0800239c <buttonTaskInit>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_buttonTaskInit */
void buttonTaskInit(void const * argument)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonTaskInit */
  /* Infinite loop */
  for(;;)
  {
	buttonMenu = readButton();
 80023a4:	f7ff f9e4 	bl	8001770 <readButton>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <buttonTaskInit+0x30>)
 80023ae:	701a      	strb	r2, [r3, #0]
	if ( MAX_ACTIVE_BUTTON >= buttonMenu ){
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <buttonTaskInit+0x30>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d804      	bhi.n	80023c2 <buttonTaskInit+0x26>
	osSemaphoreRelease(buttonSemHandle);
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <buttonTaskInit+0x34>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f008 fc5d 	bl	800ac7c <osSemaphoreRelease>
	}
    osDelay(30);
 80023c2:	201e      	movs	r0, #30
 80023c4:	f008 fbc6 	bl	800ab54 <osDelay>
	buttonMenu = readButton();
 80023c8:	e7ec      	b.n	80023a4 <buttonTaskInit+0x8>
 80023ca:	bf00      	nop
 80023cc:	20000001 	.word	0x20000001
 80023d0:	200050b4 	.word	0x200050b4

080023d4 <initSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_initSensorRead */
void initSensorRead(void const * argument)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


    osDelay(30);
 80023dc:	201e      	movs	r0, #30
 80023de:	f008 fbb9 	bl	800ab54 <osDelay>
 80023e2:	e7fb      	b.n	80023dc <initSensorRead+0x8>

080023e4 <SdCardInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SdCardInit */
puts("jestes w menu start, kliknij:\n1.Pomiar Sagu\n2.Rozpocznij pomiary pracy zawieszenia\n");
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <SdCardInit+0x38>)
 80023ee:	f00b fd01 	bl	800ddf4 <puts>
/* Infinite loop */
  for(;;)
  {

	  if (MAX_ACTIVE_BUTTON >= buttonMenu){
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <SdCardInit+0x3c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d804      	bhi.n	8002404 <SdCardInit+0x20>
		  menuSelector(buttonMenu);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <SdCardInit+0x3c>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f984 	bl	800270c <menuSelector>
	  }
	  osSemaphoreWait(buttonSemHandle, osWaitForever);
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <SdCardInit+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	4618      	mov	r0, r3
 800240e:	f008 fbe7 	bl	800abe0 <osSemaphoreWait>
	  osDelay(20);
 8002412:	2014      	movs	r0, #20
 8002414:	f008 fb9e 	bl	800ab54 <osDelay>
	  if (MAX_ACTIVE_BUTTON >= buttonMenu){
 8002418:	e7eb      	b.n	80023f2 <SdCardInit+0xe>
 800241a:	bf00      	nop
 800241c:	080106ac 	.word	0x080106ac
 8002420:	20000001 	.word	0x20000001
 8002424:	200050b4 	.word	0x200050b4

08002428 <menuProcessDataInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
  /* Infinite loop */
  for(;;)
  {
	menuCalculateBlock();
 8002430:	f000 fa06 	bl	8002840 <menuCalculateBlock>
    osDelay(10);
 8002434:	200a      	movs	r0, #10
 8002436:	f008 fb8d 	bl	800ab54 <osDelay>
	menuCalculateBlock();
 800243a:	e7f9      	b.n	8002430 <menuProcessDataInit+0x8>

0800243c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC5   ------> ADCx_IN15
*/
void MX_GPIO_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <MX_GPIO_Init+0x110>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a3c      	ldr	r2, [pc, #240]	; (800254c <MX_GPIO_Init+0x110>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b3a      	ldr	r3, [pc, #232]	; (800254c <MX_GPIO_Init+0x110>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <MX_GPIO_Init+0x110>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a35      	ldr	r2, [pc, #212]	; (800254c <MX_GPIO_Init+0x110>)
 8002478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <MX_GPIO_Init+0x110>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <MX_GPIO_Init+0x110>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a2e      	ldr	r2, [pc, #184]	; (800254c <MX_GPIO_Init+0x110>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <MX_GPIO_Init+0x110>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	4b28      	ldr	r3, [pc, #160]	; (800254c <MX_GPIO_Init+0x110>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a27      	ldr	r2, [pc, #156]	; (800254c <MX_GPIO_Init+0x110>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <MX_GPIO_Init+0x110>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2120      	movs	r1, #32
 80024c6:	4822      	ldr	r0, [pc, #136]	; (8002550 <MX_GPIO_Init+0x114>)
 80024c8:	f002 fd6c 	bl	8004fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2101      	movs	r1, #1
 80024d0:	4820      	ldr	r0, [pc, #128]	; (8002554 <MX_GPIO_Init+0x118>)
 80024d2:	f002 fd67 	bl	8004fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	481a      	ldr	r0, [pc, #104]	; (8002558 <MX_GPIO_Init+0x11c>)
 80024ee:	f002 fbc5 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80024f2:	2320      	movs	r3, #32
 80024f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	4619      	mov	r1, r3
 8002508:	4811      	ldr	r0, [pc, #68]	; (8002550 <MX_GPIO_Init+0x114>)
 800250a:	f002 fbb7 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800250e:	2320      	movs	r3, #32
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002512:	2303      	movs	r3, #3
 8002514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <MX_GPIO_Init+0x11c>)
 8002522:	f002 fbab 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002526:	2301      	movs	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252a:	2301      	movs	r3, #1
 800252c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_GPIO_Init+0x118>)
 800253e:	f002 fb9d 	bl	8004c7c <HAL_GPIO_Init>

}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800

0800255c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002564:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002568:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002574:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002578:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800257c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002584:	e000      	b.n	8002588 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002586:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f9      	beq.n	8002586 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002592:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ffd1 	bl	800255c <ITM_SendChar>
	return (ch);
 80025ba:	687b      	ldr	r3, [r7, #4]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c8:	f001 f84e 	bl	8003668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025cc:	f000 f81a 	bl	8002604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d0:	f7ff ff34 	bl	800243c <MX_GPIO_Init>
  MX_DMA_Init();
 80025d4:	f7ff f938 	bl	8001848 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80025d8:	f000 ffaa 	bl	8003530 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80025dc:	f000 f95a 	bl	8002894 <MX_SPI2_Init>
  MX_FATFS_Init();
 80025e0:	f005 fb46 	bl	8007c70 <MX_FATFS_Init>
  MX_TIM6_Init();
 80025e4:	f000 fc56 	bl	8002e94 <MX_TIM6_Init>
  MX_TIM8_Init();
 80025e8:	f000 fc8a 	bl	8002f00 <MX_TIM8_Init>
  MX_TIM2_Init();
 80025ec:	f000 fbe0 	bl	8002db0 <MX_TIM2_Init>
  MX_ADC2_Init();
 80025f0:	f7fe ff62 	bl	80014b8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80025f4:	f7fe ffc0 	bl	8001578 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80025f8:	f7ff fe3a 	bl	8002270 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80025fc:	f008 fa47 	bl	800aa8e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002600:	e7fe      	b.n	8002600 <main+0x3c>
	...

08002604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b094      	sub	sp, #80	; 0x50
 8002608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800260a:	f107 031c 	add.w	r3, r7, #28
 800260e:	2234      	movs	r2, #52	; 0x34
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f00b fcee 	bl	800dff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <SystemClock_Config+0xd0>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <SystemClock_Config+0xd0>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <SystemClock_Config+0xd0>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	2300      	movs	r3, #0
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <SystemClock_Config+0xd4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <SystemClock_Config+0xd4>)
 800264e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <SystemClock_Config+0xd4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002660:	2302      	movs	r3, #2
 8002662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002664:	2301      	movs	r3, #1
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002668:	2310      	movs	r3, #16
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266c:	2302      	movs	r3, #2
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002670:	2300      	movs	r3, #0
 8002672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002674:	2308      	movs	r3, #8
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002678:	2390      	movs	r3, #144	; 0x90
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800267c:	2302      	movs	r3, #2
 800267e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002680:	2302      	movs	r3, #2
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002684:	2302      	movs	r3, #2
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f81f 	bl	80056d0 <HAL_RCC_OscConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002698:	f000 f832 	bl	8002700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269c:	230f      	movs	r3, #15
 800269e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a0:	2302      	movs	r3, #2
 80026a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	2104      	movs	r1, #4
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 fc8c 	bl	8004fd8 <HAL_RCC_ClockConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80026c6:	f000 f81b 	bl	8002700 <Error_Handler>
  }
}
 80026ca:	bf00      	nop
 80026cc:	3750      	adds	r7, #80	; 0x50
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40007000 	.word	0x40007000

080026dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026ee:	f000 ffdd 	bl	80036ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40000400 	.word	0x40000400

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002708:	e7fe      	b.n	8002708 <Error_Handler+0x8>
	...

0800270c <menuSelector>:
*******************************************************************************/

/******************************************************************************
* Function Definitions
*******************************************************************************/
void menuSelector(button_t button){
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]

	switch(selector){
 8002716:	4b3c      	ldr	r3, [pc, #240]	; (8002808 <menuSelector+0xfc>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d86f      	bhi.n	80027fe <menuSelector+0xf2>
 800271e:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <menuSelector+0x18>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002739 	.word	0x08002739
 8002728:	0800276d 	.word	0x0800276d
 800272c:	0800278d 	.word	0x0800278d
 8002730:	080027a9 	.word	0x080027a9
 8002734:	080027e3 	.word	0x080027e3
		case(MENU_START):
			if(BUTTON_LEFT == button){
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d106      	bne.n	800274c <menuSelector+0x40>
				selector = MENU_SAG;
 800273e:	4b32      	ldr	r3, [pc, #200]	; (8002808 <menuSelector+0xfc>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
				puts("jestes w menu sag, kliknij select aby rozpoczac pomiar\n");
 8002744:	4831      	ldr	r0, [pc, #196]	; (800280c <menuSelector+0x100>)
 8002746:	f00b fb55 	bl	800ddf4 <puts>
 800274a:	e00c      	b.n	8002766 <menuSelector+0x5a>
			}
			else if(BUTTON_RIGHT == button){
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d106      	bne.n	8002760 <menuSelector+0x54>
				selector = MENU_MEASURMENT;
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <menuSelector+0xfc>)
 8002754:	2203      	movs	r2, #3
 8002756:	701a      	strb	r2, [r3, #0]
				puts("jestes w menu measurment, kliknij select aby rozpoczac pomiar\n");
 8002758:	482d      	ldr	r0, [pc, #180]	; (8002810 <menuSelector+0x104>)
 800275a:	f00b fb4b 	bl	800ddf4 <puts>
 800275e:	e002      	b.n	8002766 <menuSelector+0x5a>
			}
			else {
				puts("jestes w menu start, kliknij:\n1.Pomiar Sagu\n2.Rozpocznij pomiary pracy zawieszenia\n");
 8002760:	482c      	ldr	r0, [pc, #176]	; (8002814 <menuSelector+0x108>)
 8002762:	f00b fb47 	bl	800ddf4 <puts>
			}
			stopAdcDma();
 8002766:	f000 fcd5 	bl	8003114 <stopAdcDma>
			break;
 800276a:	e048      	b.n	80027fe <menuSelector+0xf2>
		case(MENU_SAG):
			if(BUTTON_SELECT == button){
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <menuSelector+0x78>
				startAdcDma();
 8002772:	f000 fcaf 	bl	80030d4 <startAdcDma>
				selector = MENU_SAG_START;
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <menuSelector+0xfc>)
 8002778:	2202      	movs	r2, #2
 800277a:	701a      	strb	r2, [r3, #0]
				puts("pomiar rozpoczety, kliknij select aby zakonczyc\n");
 800277c:	4826      	ldr	r0, [pc, #152]	; (8002818 <menuSelector+0x10c>)
 800277e:	f00b fb39 	bl	800ddf4 <puts>
			}
			else{
				puts("nacisnij select aby rozpoczac pomiar\n");
			}
			break;
 8002782:	e03c      	b.n	80027fe <menuSelector+0xf2>
				puts("nacisnij select aby rozpoczac pomiar\n");
 8002784:	4825      	ldr	r0, [pc, #148]	; (800281c <menuSelector+0x110>)
 8002786:	f00b fb35 	bl	800ddf4 <puts>
			break;
 800278a:	e038      	b.n	80027fe <menuSelector+0xf2>
		case(MENU_SAG_START):
			if(BUTTON_SELECT == button){
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <menuSelector+0x94>

				selector = MENU_START;
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <menuSelector+0xfc>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
				puts("pomiar zakonczony\njestes w menu start, kliknij:\n1.Pomiar Sagu\n2.Rozpocznij pomiary pracy zawieszenia\n");
 8002798:	4821      	ldr	r0, [pc, #132]	; (8002820 <menuSelector+0x114>)
 800279a:	f00b fb2b 	bl	800ddf4 <puts>
			}
			else{
				puts("nacisnij select aby wrocic do menu start");
			}
			break;
 800279e:	e02e      	b.n	80027fe <menuSelector+0xf2>
				puts("nacisnij select aby wrocic do menu start");
 80027a0:	4820      	ldr	r0, [pc, #128]	; (8002824 <menuSelector+0x118>)
 80027a2:	f00b fb27 	bl	800ddf4 <puts>
			break;
 80027a6:	e02a      	b.n	80027fe <menuSelector+0xf2>
		case(MENU_MEASURMENT):
			if(BUTTON_SELECT == button){
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <menuSelector+0xce>
				setPath(dir, frontSensor, rearSensor, path);
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <menuSelector+0x11c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <menuSelector+0x120>)
 80027b4:	491e      	ldr	r1, [pc, #120]	; (8002830 <menuSelector+0x124>)
 80027b6:	481f      	ldr	r0, [pc, #124]	; (8002834 <menuSelector+0x128>)
 80027b8:	f7fe fba4 	bl	8000f04 <setPath>
				createNewFile(dir, frontSensor, rearSensor, &path);
 80027bc:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <menuSelector+0x11c>)
 80027be:	4a1b      	ldr	r2, [pc, #108]	; (800282c <menuSelector+0x120>)
 80027c0:	491b      	ldr	r1, [pc, #108]	; (8002830 <menuSelector+0x124>)
 80027c2:	481c      	ldr	r0, [pc, #112]	; (8002834 <menuSelector+0x128>)
 80027c4:	f7fe fbc2 	bl	8000f4c <createNewFile>
				startAdcDma();
 80027c8:	f000 fc84 	bl	80030d4 <startAdcDma>
				selector = MENU_MEASURMENT_START;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <menuSelector+0xfc>)
 80027ce:	2204      	movs	r2, #4
 80027d0:	701a      	strb	r2, [r3, #0]
				puts("pomiar ciagly rozpoczety, kliknij select aby zakonczyc\n");
 80027d2:	4819      	ldr	r0, [pc, #100]	; (8002838 <menuSelector+0x12c>)
 80027d4:	f00b fb0e 	bl	800ddf4 <puts>
			}
			else{
				puts("nacisnij select aby rozpoczac pomiar\n");
				}
			break;
 80027d8:	e011      	b.n	80027fe <menuSelector+0xf2>
				puts("nacisnij select aby rozpoczac pomiar\n");
 80027da:	4810      	ldr	r0, [pc, #64]	; (800281c <menuSelector+0x110>)
 80027dc:	f00b fb0a 	bl	800ddf4 <puts>
			break;
 80027e0:	e00d      	b.n	80027fe <menuSelector+0xf2>
		case(MENU_MEASURMENT_START):
			if(BUTTON_SELECT == button){
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <menuSelector+0xea>
				selector = MENU_START;
 80027e8:	4b07      	ldr	r3, [pc, #28]	; (8002808 <menuSelector+0xfc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
				puts("pomiar ciagly zakonczony\njestes w menu start, kliknij:\n1.Pomiar Sagu\n2.Rozpocznij pomiary pracy zawieszenia\n");
 80027ee:	4813      	ldr	r0, [pc, #76]	; (800283c <menuSelector+0x130>)
 80027f0:	f00b fb00 	bl	800ddf4 <puts>
			}
			else{
				puts("nacisnij select aby wrocic do menu start");
			}
			break;
 80027f4:	e002      	b.n	80027fc <menuSelector+0xf0>
				puts("nacisnij select aby wrocic do menu start");
 80027f6:	480b      	ldr	r0, [pc, #44]	; (8002824 <menuSelector+0x118>)
 80027f8:	f00b fafc 	bl	800ddf4 <puts>
			break;
 80027fc:	bf00      	nop
		default:
	}


}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200053a0 	.word	0x200053a0
 800280c:	08010700 	.word	0x08010700
 8002810:	08010738 	.word	0x08010738
 8002814:	08010778 	.word	0x08010778
 8002818:	080107cc 	.word	0x080107cc
 800281c:	08010800 	.word	0x08010800
 8002820:	08010828 	.word	0x08010828
 8002824:	08010890 	.word	0x08010890
 8002828:	200053a1 	.word	0x200053a1
 800282c:	200053cc 	.word	0x200053cc
 8002830:	200053b8 	.word	0x200053b8
 8002834:	200053a4 	.word	0x200053a4
 8002838:	080108bc 	.word	0x080108bc
 800283c:	080108f4 	.word	0x080108f4

08002840 <menuCalculateBlock>:
void menuCalculateBlock(void){
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
	switch(selector){
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <menuCalculateBlock+0x44>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d002      	beq.n	8002854 <menuCalculateBlock+0x14>
 800284e:	2b04      	cmp	r3, #4
 8002850:	d00e      	beq.n	8002870 <menuCalculateBlock+0x30>
				processData(frontSensor,rearSensor);
				break;
			default:
		}

}
 8002852:	e012      	b.n	800287a <menuCalculateBlock+0x3a>
				uint16_t result[2] = {0};
 8002854:	2300      	movs	r3, #0
 8002856:	607b      	str	r3, [r7, #4]
				processDataSag(result);
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fc90 	bl	8003180 <processDataSag>
				printf("REAR: %d\nFRONT: %d\n",result[0], result[1]);
 8002860:	88bb      	ldrh	r3, [r7, #4]
 8002862:	4619      	mov	r1, r3
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	461a      	mov	r2, r3
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <menuCalculateBlock+0x48>)
 800286a:	f00b fa5d 	bl	800dd28 <iprintf>
				break;
 800286e:	e004      	b.n	800287a <menuCalculateBlock+0x3a>
				processData(frontSensor,rearSensor);
 8002870:	4906      	ldr	r1, [pc, #24]	; (800288c <menuCalculateBlock+0x4c>)
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <menuCalculateBlock+0x50>)
 8002874:	f000 fc62 	bl	800313c <processData>
				break;
 8002878:	bf00      	nop
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200053a0 	.word	0x200053a0
 8002888:	08010964 	.word	0x08010964
 800288c:	200053cc 	.word	0x200053cc
 8002890:	200053b8 	.word	0x200053b8

08002894 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <MX_SPI2_Init+0x64>)
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <MX_SPI2_Init+0x68>)
 800289c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028c8:	2218      	movs	r2, #24
 80028ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028e0:	220a      	movs	r2, #10
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <MX_SPI2_Init+0x64>)
 80028e6:	f003 f991 	bl	8005c0c <HAL_SPI_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028f0:	f7ff ff06 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200053e0 	.word	0x200053e0
 80028fc:	40003800 	.word	0x40003800

08002900 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <HAL_SPI_MspInit+0xe0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d15a      	bne.n	80029d8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b2f      	ldr	r3, [pc, #188]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a2e      	ldr	r2, [pc, #184]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 800292c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_SPI_MspInit+0xe4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002976:	2302      	movs	r3, #2
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002986:	2307      	movs	r3, #7
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4815      	ldr	r0, [pc, #84]	; (80029e8 <HAL_SPI_MspInit+0xe8>)
 8002992:	f002 f973 	bl	8004c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002996:	2304      	movs	r3, #4
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029a6:	2305      	movs	r3, #5
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <HAL_SPI_MspInit+0xe8>)
 80029b2:	f002 f963 	bl	8004c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c8:	2305      	movs	r3, #5
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	4806      	ldr	r0, [pc, #24]	; (80029ec <HAL_SPI_MspInit+0xec>)
 80029d4:	f002 f952 	bl	8004c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029d8:	bf00      	nop
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40003800 	.word	0x40003800
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020400 	.word	0x40020400

080029f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_MspInit+0x54>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <HAL_MspInit+0x54>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_MspInit+0x54>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_MspInit+0x54>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_MspInit+0x54>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_MspInit+0x54>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	210f      	movs	r1, #15
 8002a32:	f06f 0001 	mvn.w	r0, #1
 8002a36:	f001 fd17 	bl	8004468 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08e      	sub	sp, #56	; 0x38
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_InitTick+0xe4>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4a32      	ldr	r2, [pc, #200]	; (8002b2c <HAL_InitTick+0xe4>)
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	6413      	str	r3, [r2, #64]	; 0x40
 8002a68:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_InitTick+0xe4>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a74:	f107 0210 	add.w	r2, r7, #16
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fbc4 	bl	800520c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a8e:	f002 fb95 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8002a92:	6378      	str	r0, [r7, #52]	; 0x34
 8002a94:	e004      	b.n	8002aa0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a96:	f002 fb91 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa2:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <HAL_InitTick+0xe8>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_InitTick+0xec>)
 8002ab0:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <HAL_InitTick+0xf0>)
 8002ab2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <HAL_InitTick+0xec>)
 8002ab6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aba:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002abc:	4a1d      	ldr	r2, [pc, #116]	; (8002b34 <HAL_InitTick+0xec>)
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <HAL_InitTick+0xec>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_InitTick+0xec>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_InitTick+0xec>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002ad4:	4817      	ldr	r0, [pc, #92]	; (8002b34 <HAL_InitTick+0xec>)
 8002ad6:	f003 fcd9 	bl	800648c <HAL_TIM_Base_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11b      	bne.n	8002b20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002ae8:	4812      	ldr	r0, [pc, #72]	; (8002b34 <HAL_InitTick+0xec>)
 8002aea:	f003 fdaf 	bl	800664c <HAL_TIM_Base_Start_IT>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002af4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d111      	bne.n	8002b20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002afc:	201d      	movs	r0, #29
 8002afe:	f001 fccf 	bl	80044a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b0f      	cmp	r3, #15
 8002b06:	d808      	bhi.n	8002b1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	201d      	movs	r0, #29
 8002b0e:	f001 fcab 	bl	8004468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_InitTick+0xf4>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e002      	b.n	8002b20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3738      	adds	r7, #56	; 0x38
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	431bde83 	.word	0x431bde83
 8002b34:	20005438 	.word	0x20005438
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	20000010 	.word	0x20000010

08002b40 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <SDTimer_Handler+0x40>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <SDTimer_Handler+0x1c>
    Timer1--;
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <SDTimer_Handler+0x40>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <SDTimer_Handler+0x40>)
 8002b5a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <SDTimer_Handler+0x44>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <SDTimer_Handler+0x34>
    Timer2--;
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <SDTimer_Handler+0x44>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SDTimer_Handler+0x44>)
 8002b72:	701a      	strb	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20005481 	.word	0x20005481
 8002b84:	20005482 	.word	0x20005482

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <NMI_Handler+0x4>

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <TIM3_IRQHandler+0x30>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <TIM3_IRQHandler+0x30>)
 8002bc4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <TIM3_IRQHandler+0x30>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d904      	bls.n	8002bda <TIM3_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <TIM3_IRQHandler+0x30>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8002bd6:	f7ff ffb3 	bl	8002b40 <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bda:	4803      	ldr	r0, [pc, #12]	; (8002be8 <TIM3_IRQHandler+0x34>)
 8002bdc:	f003 fdff 	bl	80067de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20005480 	.word	0x20005480
 8002be8:	20005438 	.word	0x20005438

08002bec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA2_Stream2_IRQHandler+0x10>)
 8002bf2:	f001 fdd9 	bl	80047a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000728 	.word	0x20000728

08002c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return 1;
 8002c04:	2301      	movs	r3, #1
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_kill>:

int _kill(int pid, int sig)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c1a:	f00b faa7 	bl	800e16c <__errno>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2216      	movs	r2, #22
 8002c22:	601a      	str	r2, [r3, #0]
  return -1;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_exit>:

void _exit (int status)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffe7 	bl	8002c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c42:	e7fe      	b.n	8002c42 <_exit+0x12>

08002c44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e00a      	b.n	8002c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c56:	f3af 8000 	nop.w
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	60ba      	str	r2, [r7, #8]
 8002c62:	b2ca      	uxtb	r2, r1
 8002c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	dbf0      	blt.n	8002c56 <_read+0x12>
  }

  return len;
 8002c74:	687b      	ldr	r3, [r7, #4]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e009      	b.n	8002ca4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	60ba      	str	r2, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fc86 	bl	80025aa <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	dbf1      	blt.n	8002c90 <_write+0x12>
  }
  return len;
 8002cac:	687b      	ldr	r3, [r7, #4]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <_close>:

int _close(int file)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cde:	605a      	str	r2, [r3, #4]
  return 0;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_isatty>:

int _isatty(int file)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f00b fa0c 	bl	800e16c <__errno>
 8002d54:	4603      	mov	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <_sbrk+0x64>)
 8002d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20020000 	.word	0x20020000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	20005484 	.word	0x20005484
 8002d88:	200098c8 	.word	0x200098c8

08002d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <SystemInit+0x20>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <SystemInit+0x20>)
 8002d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc4:	f107 0320 	add.w	r3, r7, #32
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
 8002ddc:	615a      	str	r2, [r3, #20]
 8002dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002de0:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 8002de8:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002dea:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002dee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002df8:	2263      	movs	r2, #99	; 0x63
 8002dfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e08:	4821      	ldr	r0, [pc, #132]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002e0a:	f003 fb3f 	bl	800648c <HAL_TIM_Base_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002e14:	f7ff fc74 	bl	8002700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e22:	4619      	mov	r1, r3
 8002e24:	481a      	ldr	r0, [pc, #104]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002e26:	f003 fea5 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002e30:	f7ff fc66 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e34:	4816      	ldr	r0, [pc, #88]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002e36:	f003 fc79 	bl	800672c <HAL_TIM_PWM_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e40:	f7ff fc5e 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e44:	2320      	movs	r3, #32
 8002e46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e4c:	f107 0320 	add.w	r3, r7, #32
 8002e50:	4619      	mov	r1, r3
 8002e52:	480f      	ldr	r0, [pc, #60]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002e54:	f004 fa68 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e5e:	f7ff fc4f 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e62:	2360      	movs	r3, #96	; 0x60
 8002e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	2200      	movs	r2, #0
 8002e76:	4619      	mov	r1, r3
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_TIM2_Init+0xe0>)
 8002e7a:	f003 fdb9 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e84:	f7ff fc3c 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e88:	bf00      	nop
 8002e8a:	3738      	adds	r7, #56	; 0x38
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20005488 	.word	0x20005488

08002e94 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <MX_TIM6_Init+0x64>)
 8002ea4:	4a15      	ldr	r2, [pc, #84]	; (8002efc <MX_TIM6_Init+0x68>)
 8002ea6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <MX_TIM6_Init+0x64>)
 8002eaa:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002eae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <MX_TIM6_Init+0x64>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <MX_TIM6_Init+0x64>)
 8002eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ebc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <MX_TIM6_Init+0x64>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ec4:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <MX_TIM6_Init+0x64>)
 8002ec6:	f003 fae1 	bl	800648c <HAL_TIM_Base_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002ed0:	f7ff fc16 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002edc:	463b      	mov	r3, r7
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <MX_TIM6_Init+0x64>)
 8002ee2:	f004 fa21 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002eec:	f7ff fc08 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	200054d0 	.word	0x200054d0
 8002efc:	40001000 	.word	0x40001000

08002f00 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b096      	sub	sp, #88	; 0x58
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	611a      	str	r2, [r3, #16]
 8002f2e:	615a      	str	r2, [r3, #20]
 8002f30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2220      	movs	r2, #32
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00b f85b 	bl	800dff4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f40:	4a3d      	ldr	r2, [pc, #244]	; (8003038 <MX_TIM8_Init+0x138>)
 8002f42:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 8002f44:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f46:	f240 7207 	movw	r2, #1799	; 0x707
 8002f4a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f4c:	4b39      	ldr	r3, [pc, #228]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f54:	f240 120d 	movw	r2, #269	; 0x10d
 8002f58:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f5a:	4b36      	ldr	r3, [pc, #216]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f60:	4b34      	ldr	r3, [pc, #208]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f66:	4b33      	ldr	r3, [pc, #204]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f6c:	4831      	ldr	r0, [pc, #196]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f6e:	f003 fa8d 	bl	800648c <HAL_TIM_Base_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002f78:	f7ff fbc2 	bl	8002700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f86:	4619      	mov	r1, r3
 8002f88:	482a      	ldr	r0, [pc, #168]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f8a:	f003 fdf3 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002f94:	f7ff fbb4 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f98:	4826      	ldr	r0, [pc, #152]	; (8003034 <MX_TIM8_Init+0x134>)
 8002f9a:	f003 fbc7 	bl	800672c <HAL_TIM_PWM_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002fa4:	f7ff fbac 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	481f      	ldr	r0, [pc, #124]	; (8003034 <MX_TIM8_Init+0x134>)
 8002fb8:	f004 f9b6 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8002fc2:	f7ff fb9d 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fc6:	2360      	movs	r3, #96	; 0x60
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4812      	ldr	r0, [pc, #72]	; (8003034 <MX_TIM8_Init+0x134>)
 8002fec:	f003 fd00 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002ff6:	f7ff fb83 	bl	8002700 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800300e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003012:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4805      	ldr	r0, [pc, #20]	; (8003034 <MX_TIM8_Init+0x134>)
 800301e:	f004 f9ff 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8003028:	f7ff fb6a 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800302c:	bf00      	nop
 800302e:	3758      	adds	r7, #88	; 0x58
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20005518 	.word	0x20005518
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d10e      	bne.n	800306c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800306a:	e026      	b.n	80030ba <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_TIM_Base_MspInit+0x90>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
}
 8003092:	e012      	b.n	80030ba <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_TIM_Base_MspInit+0x94>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10d      	bne.n	80030ba <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	6453      	str	r3, [r2, #68]	; 0x44
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_TIM_Base_MspInit+0x8c>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40001000 	.word	0x40001000
 80030d0:	40010400 	.word	0x40010400

080030d4 <startAdcDma>:
 */
static void  sendDataSD(char *file,volatile int16_t * sensor);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void startAdcDma (void){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*)osKernelSysTick(), SD_INIT_TIME);
 80030d8:	f007 fce0 	bl	800aa9c <osKernelSysTick>
 80030dc:	4603      	mov	r3, r0
 80030de:	210a      	movs	r1, #10
 80030e0:	4618      	mov	r0, r3
 80030e2:	f007 fe14 	bl	800ad0e <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*)adcDataWrite, BUFFER_SIZE);
 80030e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ea:	4906      	ldr	r1, [pc, #24]	; (8003104 <startAdcDma+0x30>)
 80030ec:	4806      	ldr	r0, [pc, #24]	; (8003108 <startAdcDma+0x34>)
 80030ee:	f000 fcd1 	bl	8003a94 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 80030f2:	4806      	ldr	r0, [pc, #24]	; (800310c <startAdcDma+0x38>)
 80030f4:	f003 fa1a 	bl	800652c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <startAdcDma+0x3c>)
 80030fa:	f003 fa17 	bl	800652c <HAL_TIM_Base_Start>
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20005560 	.word	0x20005560
 8003108:	20000698 	.word	0x20000698
 800310c:	200054d0 	.word	0x200054d0
 8003110:	20005488 	.word	0x20005488

08003114 <stopAdcDma>:
void stopAdcDma (void){
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 8003118:	4805      	ldr	r0, [pc, #20]	; (8003130 <stopAdcDma+0x1c>)
 800311a:	f000 fdcb 	bl	8003cb4 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <stopAdcDma+0x20>)
 8003120:	f003 fa6c 	bl	80065fc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8003124:	4804      	ldr	r0, [pc, #16]	; (8003138 <stopAdcDma+0x24>)
 8003126:	f003 fa69 	bl	80065fc <HAL_TIM_Base_Stop>
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000698 	.word	0x20000698
 8003134:	200054d0 	.word	0x200054d0
 8003138:	20005488 	.word	0x20005488

0800313c <processData>:

void processData(char *sensorFront, char *sensorRear){
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <processData+0x38>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f04f 31ff 	mov.w	r1, #4294967295
 800314e:	4618      	mov	r0, r3
 8003150:	f007 fd46 	bl	800abe0 <osSemaphoreWait>
#endif
	sendDataSD(sensorRear,outRearBufPtr);
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <processData+0x3c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f000 f94a 	bl	80033f4 <sendDataSD>
	sendDataSD(sensorFront,outFrontBufPtr);
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <processData+0x40>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f944 	bl	80033f4 <sendDataSD>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	2000501c 	.word	0x2000501c
 8003178:	20000008 	.word	0x20000008
 800317c:	2000000c 	.word	0x2000000c

08003180 <processDataSag>:
void processDataSag(uint16_t* sagRearFront){
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003188:	4b35      	ldr	r3, [pc, #212]	; (8003260 <processDataSag+0xe0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f04f 31ff 	mov.w	r1, #4294967295
 8003190:	4618      	mov	r0, r3
 8003192:	f007 fd25 	bl	800abe0 <osSemaphoreWait>
#endif
	(uint32_t*)sagRearFront;
	for(int i = 0; i < BUFFER_SIZE/4; i++){
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e020      	b.n	80031de <processDataSag+0x5e>
		sagRearFront[0] += outRearBufPtr[i];
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <processDataSag+0xe4>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b219      	sxth	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	b28b      	uxth	r3, r1
 80031b0:	4413      	add	r3, r2
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	801a      	strh	r2, [r3, #0]
		sagRearFront[1] += outFrontBufPtr[i];
 80031b8:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <processDataSag+0xe8>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b21a      	sxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3302      	adds	r3, #2
 80031ca:	8819      	ldrh	r1, [r3, #0]
 80031cc:	b292      	uxth	r2, r2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3302      	adds	r3, #2
 80031d2:	440a      	add	r2, r1
 80031d4:	b292      	uxth	r2, r2
 80031d6:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE/4; i++){
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3301      	adds	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b3f      	cmp	r3, #63	; 0x3f
 80031e2:	d9db      	bls.n	800319c <processDataSag+0x1c>
	}
	sagRearFront[0] = sagRearFront[0]/(BUFFER_SIZE/4);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = sagRearFront[1]/(BUFFER_SIZE/4);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3302      	adds	r3, #2
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3302      	adds	r3, #2
 80031fa:	0992      	lsrs	r2, r2, #6
 80031fc:	b292      	uxth	r2, r2
 80031fe:	801a      	strh	r2, [r3, #0]

	sagRearFront[0] = 100*(sagRearFront[0]/(float)REAR_SUSPENSION_TRAVEL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800320c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800326c <processDataSag+0xec>
 8003210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003214:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003270 <processDataSag+0xf0>
 8003218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800321c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003220:	ee17 3a90 	vmov	r3, s15
 8003224:	b29a      	uxth	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = 100*(sagRearFront[1]/(float)FRONT_SUSPENSION_TRAVEL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3302      	adds	r3, #2
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003238:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003274 <processDataSag+0xf4>
 800323c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003240:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003270 <processDataSag+0xf0>
 8003244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3302      	adds	r3, #2
 800324c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003250:	ee17 2a90 	vmov	r2, s15
 8003254:	b292      	uxth	r2, r2
 8003256:	801a      	strh	r2, [r3, #0]
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	2000501c 	.word	0x2000501c
 8003264:	20000008 	.word	0x20000008
 8003268:	2000000c 	.word	0x2000000c
 800326c:	42fa0000 	.word	0x42fa0000
 8003270:	42c80000 	.word	0x42c80000
 8003274:	43960000 	.word	0x43960000

08003278 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 8003280:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8003284:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[0];
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8003288:	4a21      	ldr	r2, [pc, #132]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 800328a:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[0];
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 800328e:	4a22      	ldr	r2, [pc, #136]	; (8003318 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8003290:	601a      	str	r2, [r3, #0]
		for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n+=2){
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e028      	b.n	80032ea <HAL_ADC_ConvHalfCpltCallback+0x72>
		outRearBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n], REAR_SENSOR_TRAVEL);
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	18d0      	adds	r0, r2, r3
 80032a2:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_ADC_ConvHalfCpltCallback+0x94>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0fd9      	lsrs	r1, r3, #31
 80032aa:	440b      	add	r3, r1
 80032ac:	105b      	asrs	r3, r3, #1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	18d4      	adds	r4, r2, r3
 80032b2:	217d      	movs	r1, #125	; 0x7d
 80032b4:	f000 f888 	bl	80033c8 <convertAdcToTravel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	8023      	strh	r3, [r4, #0]
		outFrontBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n + 1], FRONT_SENSOR_TRAVEL);
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	18d0      	adds	r0, r2, r3
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	0fd9      	lsrs	r1, r3, #31
 80032d0:	440b      	add	r3, r1
 80032d2:	105b      	asrs	r3, r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	18d4      	adds	r4, r2, r3
 80032d8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80032dc:	f000 f874 	bl	80033c8 <convertAdcToTravel>
 80032e0:	4603      	mov	r3, r0
 80032e2:	8023      	strh	r3, [r4, #0]
		for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n+=2){
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3302      	adds	r3, #2
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b7e      	cmp	r3, #126	; 0x7e
 80032ee:	d9d3      	bls.n	8003298 <HAL_ADC_ConvHalfCpltCallback+0x20>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f007 fcc1 	bl	800ac7c <osSemaphoreRelease>
#endif
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}
 8003302:	bf00      	nop
 8003304:	20005960 	.word	0x20005960
 8003308:	20005560 	.word	0x20005560
 800330c:	20000008 	.word	0x20000008
 8003310:	20005760 	.word	0x20005760
 8003314:	2000000c 	.word	0x2000000c
 8003318:	20005860 	.word	0x20005860
 800331c:	2000501c 	.word	0x2000501c

08003320 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	previousTime = time_end;
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
	sample_time = ((time_end - previousTime)/2)/(float)(BUFFER_SIZE/2);
	printf("semFullTime: %f\n", sample_time);
#endif
	inBufPtr = &adcDataWrite[BUFFER_SIZE/2];
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_ADC_ConvCpltCallback+0x8c>)
 800332a:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <HAL_ADC_ConvCpltCallback+0x90>)
 800332c:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[BUFFER_SIZE/4];
 800332e:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <HAL_ADC_ConvCpltCallback+0x94>)
 8003330:	4a21      	ldr	r2, [pc, #132]	; (80033b8 <HAL_ADC_ConvCpltCallback+0x98>)
 8003332:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[BUFFER_SIZE/4];
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_ADC_ConvCpltCallback+0x9c>)
 8003336:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8003338:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n+=2){
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e028      	b.n	8003392 <HAL_ADC_ConvCpltCallback+0x72>
		outRearBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n], REAR_SENSOR_TRAVEL);
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_ADC_ConvCpltCallback+0x8c>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	18d0      	adds	r0, r2, r3
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_ADC_ConvCpltCallback+0x94>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	0fd9      	lsrs	r1, r3, #31
 8003352:	440b      	add	r3, r1
 8003354:	105b      	asrs	r3, r3, #1
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	18d4      	adds	r4, r2, r3
 800335a:	217d      	movs	r1, #125	; 0x7d
 800335c:	f000 f834 	bl	80033c8 <convertAdcToTravel>
 8003360:	4603      	mov	r3, r0
 8003362:	8023      	strh	r3, [r4, #0]
		outFrontBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n + 1], FRONT_SENSOR_TRAVEL);
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_ADC_ConvCpltCallback+0x8c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	18d0      	adds	r0, r2, r3
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_ADC_ConvCpltCallback+0x9c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	0fd9      	lsrs	r1, r3, #31
 8003378:	440b      	add	r3, r1
 800337a:	105b      	asrs	r3, r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	18d4      	adds	r4, r2, r3
 8003380:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003384:	f000 f820 	bl	80033c8 <convertAdcToTravel>
 8003388:	4603      	mov	r3, r0
 800338a:	8023      	strh	r3, [r4, #0]
	for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n+=2){
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3302      	adds	r3, #2
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b7e      	cmp	r3, #126	; 0x7e
 8003396:	d9d3      	bls.n	8003340 <HAL_ADC_ConvCpltCallback+0x20>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_ADC_ConvCpltCallback+0xa4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f007 fc6d 	bl	800ac7c <osSemaphoreRelease>
#endif
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20005960 	.word	0x20005960
 80033b0:	20005660 	.word	0x20005660
 80033b4:	20000008 	.word	0x20000008
 80033b8:	200057e0 	.word	0x200057e0
 80033bc:	2000000c 	.word	0x2000000c
 80033c0:	200058e0 	.word	0x200058e0
 80033c4:	2000501c 	.word	0x2000501c

080033c8 <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite, int16_t sensorTravel){
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite*sensorTravel/ADC_RESOLUTION);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b21b      	sxth	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	0b1b      	lsrs	r3, r3, #12
 80033e6:	b21b      	sxth	r3, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <sendDataSD>:

static void sendDataSD(char *file,volatile int16_t * sensor){
 80033f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f8:	b0c8      	sub	sp, #288	; 0x120
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003400:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003404:	6018      	str	r0, [r3, #0]
 8003406:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800340a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800340e:	6019      	str	r1, [r3, #0]
 8003410:	466b      	mov	r3, sp
 8003412:	469a      	mov	sl, r3
	char buffer[BUFFER_SIZE+1];
	memset(buffer,0,BUFFER_SIZE+1);
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	f240 1201 	movw	r2, #257	; 0x101
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f00a fde8 	bl	800dff4 <memset>
	int i;
	for (i = 0; i < (BUFFER_SIZE)/4; i++){
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800342a:	e01c      	b.n	8003466 <sendDataSD+0x72>
		sprintf(buffer + strlen(buffer), "%d ", sensor[i]);
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	4618      	mov	r0, r3
 8003432:	f7fc ff4d 	bl	80002d0 <strlen>
 8003436:	4602      	mov	r2, r0
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	1898      	adds	r0, r3, r2
 800343e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003448:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b21b      	sxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	4934      	ldr	r1, [pc, #208]	; (8003528 <sendDataSD+0x134>)
 8003458:	f00a fcd4 	bl	800de04 <siprintf>
	for (i = 0; i < (BUFFER_SIZE)/4; i++){
 800345c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003460:	3301      	adds	r3, #1
 8003462:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003466:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800346a:	2b3f      	cmp	r3, #63	; 0x3f
 800346c:	d9de      	bls.n	800342c <sendDataSD+0x38>
	}
	size_t size = strlen(buffer)+1;
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	4618      	mov	r0, r3
 8003474:	f7fc ff2c 	bl	80002d0 <strlen>
 8003478:	4603      	mov	r3, r0
 800347a:	3301      	adds	r3, #1
 800347c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	char newBuff[size];
 8003480:	f8d7 6118 	ldr.w	r6, [r7, #280]	; 0x118
 8003484:	4633      	mov	r3, r6
 8003486:	3b01      	subs	r3, #1
 8003488:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800348c:	2300      	movs	r3, #0
 800348e:	46b0      	mov	r8, r6
 8003490:	4699      	mov	r9, r3
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800349e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a6:	2300      	movs	r3, #0
 80034a8:	4634      	mov	r4, r6
 80034aa:	461d      	mov	r5, r3
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	00eb      	lsls	r3, r5, #3
 80034b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ba:	00e2      	lsls	r2, r4, #3
 80034bc:	1df3      	adds	r3, r6, #7
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	ebad 0d03 	sub.w	sp, sp, r3
 80034c6:	466b      	mov	r3, sp
 80034c8:	3300      	adds	r3, #0
 80034ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	memset(newBuff,0,size);
 80034ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034d2:	2100      	movs	r1, #0
 80034d4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80034d8:	f00a fd8c 	bl	800dff4 <memset>
	strncpy(newBuff, buffer,sizeof(newBuff));
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	4632      	mov	r2, r6
 80034e2:	4619      	mov	r1, r3
 80034e4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80034e8:	f00a fd8c 	bl	800e004 <strncpy>
	newBuff[size] = '\0';
 80034ec:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80034f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80034f4:	4413      	add	r3, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
	Mount_SD("/");
 80034fa:	480c      	ldr	r0, [pc, #48]	; (800352c <sendDataSD+0x138>)
 80034fc:	f7fd fd66 	bl	8000fcc <Mount_SD>
	Update_File(file, newBuff);
 8003500:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003504:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003508:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	f7fd fed5 	bl	80012bc <Update_File>
	Unmount_SD("/");
 8003512:	4806      	ldr	r0, [pc, #24]	; (800352c <sendDataSD+0x138>)
 8003514:	f7fd fd7e 	bl	8001014 <Unmount_SD>
 8003518:	46d5      	mov	sp, sl
}
 800351a:	bf00      	nop
 800351c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003520:	46bd      	mov	sp, r7
 8003522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003526:	bf00      	nop
 8003528:	08010978 	.word	0x08010978
 800352c:	0801097c 	.word	0x0801097c

08003530 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <MX_USART2_UART_Init+0x4c>)
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <MX_USART2_UART_Init+0x50>)
 8003538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <MX_USART2_UART_Init+0x4c>)
 800353c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_USART2_UART_Init+0x4c>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <MX_USART2_UART_Init+0x4c>)
 800354a:	2200      	movs	r2, #0
 800354c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <MX_USART2_UART_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <MX_USART2_UART_Init+0x4c>)
 8003556:	220c      	movs	r2, #12
 8003558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <MX_USART2_UART_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <MX_USART2_UART_Init+0x4c>)
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <MX_USART2_UART_Init+0x4c>)
 8003568:	f003 ffc0 	bl	80074ec <HAL_UART_Init>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003572:	f7ff f8c5 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20005964 	.word	0x20005964
 8003580:	40004400 	.word	0x40004400

08003584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_UART_MspInit+0x84>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d12b      	bne.n	80035fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <HAL_UART_MspInit+0x88>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_UART_MspInit+0x88>)
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b4:	6413      	str	r3, [r2, #64]	; 0x40
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_UART_MspInit+0x88>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_UART_MspInit+0x88>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a10      	ldr	r2, [pc, #64]	; (800360c <HAL_UART_MspInit+0x88>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <HAL_UART_MspInit+0x88>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035de:	230c      	movs	r3, #12
 80035e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035ee:	2307      	movs	r3, #7
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4805      	ldr	r0, [pc, #20]	; (8003610 <HAL_UART_MspInit+0x8c>)
 80035fa:	f001 fb3f 	bl	8004c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035fe:	bf00      	nop
 8003600:	3728      	adds	r7, #40	; 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40004400 	.word	0x40004400
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000

08003614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800364c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003618:	480d      	ldr	r0, [pc, #52]	; (8003650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800361a:	490e      	ldr	r1, [pc, #56]	; (8003654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800361c:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800361e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003620:	e002      	b.n	8003628 <LoopCopyDataInit>

08003622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003626:	3304      	adds	r3, #4

08003628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800362c:	d3f9      	bcc.n	8003622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003630:	4c0b      	ldr	r4, [pc, #44]	; (8003660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003634:	e001      	b.n	800363a <LoopFillZerobss>

08003636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003638:	3204      	adds	r2, #4

0800363a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800363c:	d3fb      	bcc.n	8003636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800363e:	f7ff fba5 	bl	8002d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003642:	f00a fd99 	bl	800e178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003646:	f7fe ffbd 	bl	80025c4 <main>
  bx  lr    
 800364a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800364c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003654:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003658:	08010dec 	.word	0x08010dec
  ldr r2, =_sbss
 800365c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003660:	200098c8 	.word	0x200098c8

08003664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC_IRQHandler>
	...

08003668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_Init+0x40>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <HAL_Init+0x40>)
 8003672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_Init+0x40>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_Init+0x40>)
 800367e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_Init+0x40>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <HAL_Init+0x40>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003690:	2003      	movs	r0, #3
 8003692:	f000 fede 	bl	8004452 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003696:	200f      	movs	r0, #15
 8003698:	f7ff f9d6 	bl	8002a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800369c:	f7ff f9a8 	bl	80029f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023c00 	.word	0x40023c00

080036ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_IncTick+0x20>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_IncTick+0x24>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4413      	add	r3, r2
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <HAL_IncTick+0x24>)
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000014 	.word	0x20000014
 80036d0:	200059a8 	.word	0x200059a8

080036d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return uwTick;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_GetTick+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200059a8 	.word	0x200059a8

080036ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e033      	b.n	800376a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd ff86 	bl	800161c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003732:	f023 0302 	bic.w	r3, r3, #2
 8003736:	f043 0202 	orr.w	r2, r3, #2
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fc5c 	bl	8003ffc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
 800375a:	e001      	b.n	8003760 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003768:	7bfb      	ldrb	r3, [r7, #15]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_ADC_Start+0x1a>
 800378a:	2302      	movs	r3, #2
 800378c:	e0b2      	b.n	80038f4 <HAL_ADC_Start+0x180>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d018      	beq.n	80037d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037b4:	4b52      	ldr	r3, [pc, #328]	; (8003900 <HAL_ADC_Start+0x18c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_ADC_Start+0x190>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0c9a      	lsrs	r2, r3, #18
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037c8:	e002      	b.n	80037d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f9      	bne.n	80037ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d17a      	bne.n	80038da <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800380e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d106      	bne.n	8003832 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f023 0206 	bic.w	r2, r3, #6
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
 8003830:	e002      	b.n	8003838 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003840:	4b31      	ldr	r3, [pc, #196]	; (8003908 <HAL_ADC_Start+0x194>)
 8003842:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800384c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2b00      	cmp	r3, #0
 8003858:	d12a      	bne.n	80038b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2b      	ldr	r2, [pc, #172]	; (800390c <HAL_ADC_Start+0x198>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d015      	beq.n	8003890 <HAL_ADC_Start+0x11c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a29      	ldr	r2, [pc, #164]	; (8003910 <HAL_ADC_Start+0x19c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d105      	bne.n	800387a <HAL_ADC_Start+0x106>
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <HAL_ADC_Start+0x194>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_ADC_Start+0x1a0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d136      	bne.n	80038f2 <HAL_ADC_Start+0x17e>
 8003884:	4b20      	ldr	r3, [pc, #128]	; (8003908 <HAL_ADC_Start+0x194>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d130      	bne.n	80038f2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d129      	bne.n	80038f2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	e020      	b.n	80038f2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_ADC_Start+0x198>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d11b      	bne.n	80038f2 <HAL_ADC_Start+0x17e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d114      	bne.n	80038f2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	e00b      	b.n	80038f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	20000004 	.word	0x20000004
 8003904:	431bde83 	.word	0x431bde83
 8003908:	40012300 	.word	0x40012300
 800390c:	40012000 	.word	0x40012000
 8003910:	40012100 	.word	0x40012100
 8003914:	40012200 	.word	0x40012200

08003918 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_ADC_Stop+0x16>
 800392a:	2302      	movs	r3, #2
 800392c:	e021      	b.n	8003972 <HAL_ADC_Stop+0x5a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399a:	d113      	bne.n	80039c4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	d10b      	bne.n	80039c4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e063      	b.n	8003a8c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80039c4:	f7ff fe86 	bl	80036d4 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039ca:	e021      	b.n	8003a10 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d01d      	beq.n	8003a10 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_ADC_PollForConversion+0x6c>
 80039da:	f7ff fe7b 	bl	80036d4 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d212      	bcs.n	8003a10 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d00b      	beq.n	8003a10 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e03d      	b.n	8003a8c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d1d6      	bne.n	80039cc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0212 	mvn.w	r2, #18
 8003a26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d123      	bne.n	8003a8a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d11f      	bne.n	8003a8a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d006      	beq.n	8003a66 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d111      	bne.n	8003a8a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_Start_DMA+0x1e>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0e9      	b.n	8003c86 <HAL_ADC_Start_DMA+0x1f2>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d018      	beq.n	8003afa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ad8:	4b6d      	ldr	r3, [pc, #436]	; (8003c90 <HAL_ADC_Start_DMA+0x1fc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a6d      	ldr	r2, [pc, #436]	; (8003c94 <HAL_ADC_Start_DMA+0x200>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0c9a      	lsrs	r2, r3, #18
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4413      	add	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003aec:	e002      	b.n	8003af4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f9      	bne.n	8003aee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b08:	d107      	bne.n	8003b1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f040 80a1 	bne.w	8003c6c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b68:	d106      	bne.n	8003b78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f023 0206 	bic.w	r2, r3, #6
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
 8003b76:	e002      	b.n	8003b7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b86:	4b44      	ldr	r3, [pc, #272]	; (8003c98 <HAL_ADC_Start_DMA+0x204>)
 8003b88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	4a43      	ldr	r2, [pc, #268]	; (8003c9c <HAL_ADC_Start_DMA+0x208>)
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	4a42      	ldr	r2, [pc, #264]	; (8003ca0 <HAL_ADC_Start_DMA+0x20c>)
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	4a41      	ldr	r2, [pc, #260]	; (8003ca4 <HAL_ADC_Start_DMA+0x210>)
 8003ba0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003baa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003bba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	334c      	adds	r3, #76	; 0x4c
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f000 fd1c 	bl	8004618 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d12a      	bne.n	8003c42 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <HAL_ADC_Start_DMA+0x214>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d015      	beq.n	8003c22 <HAL_ADC_Start_DMA+0x18e>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <HAL_ADC_Start_DMA+0x218>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d105      	bne.n	8003c0c <HAL_ADC_Start_DMA+0x178>
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_ADC_Start_DMA+0x204>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a27      	ldr	r2, [pc, #156]	; (8003cb0 <HAL_ADC_Start_DMA+0x21c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d136      	bne.n	8003c84 <HAL_ADC_Start_DMA+0x1f0>
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_ADC_Start_DMA+0x204>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d130      	bne.n	8003c84 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d129      	bne.n	8003c84 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	e020      	b.n	8003c84 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_ADC_Start_DMA+0x214>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d11b      	bne.n	8003c84 <HAL_ADC_Start_DMA+0x1f0>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d114      	bne.n	8003c84 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	e00b      	b.n	8003c84 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000004 	.word	0x20000004
 8003c94:	431bde83 	.word	0x431bde83
 8003c98:	40012300 	.word	0x40012300
 8003c9c:	080041f5 	.word	0x080041f5
 8003ca0:	080042af 	.word	0x080042af
 8003ca4:	080042cb 	.word	0x080042cb
 8003ca8:	40012000 	.word	0x40012000
 8003cac:	40012100 	.word	0x40012100
 8003cb0:	40012200 	.word	0x40012200

08003cb4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_Stop_DMA+0x1a>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e048      	b.n	8003d60 <HAL_ADC_Stop_DMA+0xac>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d130      	bne.n	8003d56 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d02:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d10f      	bne.n	8003d32 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fcd6 	bl	80046c8 <HAL_DMA_Abort>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003d40:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	f043 0201 	orr.w	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1c>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e113      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x244>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b09      	cmp	r3, #9
 8003dc2:	d925      	bls.n	8003e10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68d9      	ldr	r1, [r3, #12]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3b1e      	subs	r3, #30
 8003dda:	2207      	movs	r2, #7
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43da      	mvns	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	400a      	ands	r2, r1
 8003de8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4403      	add	r3, r0
 8003e02:	3b1e      	subs	r3, #30
 8003e04:	409a      	lsls	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	e022      	b.n	8003e56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6919      	ldr	r1, [r3, #16]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	2207      	movs	r2, #7
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	400a      	ands	r2, r1
 8003e32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6919      	ldr	r1, [r3, #16]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4618      	mov	r0, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4403      	add	r3, r0
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d824      	bhi.n	8003ea8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3b05      	subs	r3, #5
 8003e70:	221f      	movs	r2, #31
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	3b05      	subs	r3, #5
 8003e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea6:	e04c      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d824      	bhi.n	8003efa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3b23      	subs	r3, #35	; 0x23
 8003ec2:	221f      	movs	r2, #31
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43da      	mvns	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	400a      	ands	r2, r1
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	3b23      	subs	r3, #35	; 0x23
 8003eec:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef8:	e023      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b41      	subs	r3, #65	; 0x41
 8003f0c:	221f      	movs	r2, #31
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	400a      	ands	r2, r1
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	4618      	mov	r0, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b41      	subs	r3, #65	; 0x41
 8003f36:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <HAL_ADC_ConfigChannel+0x250>)
 8003f44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a28      	ldr	r2, [pc, #160]	; (8003fec <HAL_ADC_ConfigChannel+0x254>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10f      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x1d8>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b12      	cmp	r3, #18
 8003f56:	d10b      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <HAL_ADC_ConfigChannel+0x254>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d12b      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x23a>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_ADC_ConfigChannel+0x258>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0x1f4>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b11      	cmp	r3, #17
 8003f8a:	d122      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <HAL_ADC_ConfigChannel+0x258>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d111      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_ADC_ConfigChannel+0x25c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a11      	ldr	r2, [pc, #68]	; (8003ff8 <HAL_ADC_ConfigChannel+0x260>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	0c9a      	lsrs	r2, r3, #18
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fc4:	e002      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f9      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40012300 	.word	0x40012300
 8003fec:	40012000 	.word	0x40012000
 8003ff0:	10000012 	.word	0x10000012
 8003ff4:	20000004 	.word	0x20000004
 8003ff8:	431bde83 	.word	0x431bde83

08003ffc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004004:	4b79      	ldr	r3, [pc, #484]	; (80041ec <ADC_Init+0x1f0>)
 8004006:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	021a      	lsls	r2, r3, #8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	4a58      	ldr	r2, [pc, #352]	; (80041f0 <ADC_Init+0x1f4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	e00f      	b.n	80040fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0202 	bic.w	r2, r2, #2
 8004108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6899      	ldr	r1, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	7e1b      	ldrb	r3, [r3, #24]
 8004114:	005a      	lsls	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004136:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	3b01      	subs	r3, #1
 8004154:	035a      	lsls	r2, r3, #13
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	e007      	b.n	8004170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	3b01      	subs	r3, #1
 800418c:	051a      	lsls	r2, r3, #20
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041b2:	025a      	lsls	r2, r3, #9
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6899      	ldr	r1, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	029a      	lsls	r2, r3, #10
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40012300 	.word	0x40012300
 80041f0:	0f000001 	.word	0x0f000001

080041f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800420a:	2b00      	cmp	r3, #0
 800420c:	d13c      	bne.n	8004288 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d12b      	bne.n	8004280 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800422c:	2b00      	cmp	r3, #0
 800422e:	d127      	bne.n	8004280 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800423a:	2b00      	cmp	r3, #0
 800423c:	d006      	beq.n	800424c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004248:	2b00      	cmp	r3, #0
 800424a:	d119      	bne.n	8004280 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0220 	bic.w	r2, r2, #32
 800425a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0201 	orr.w	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff f84d 	bl	8003320 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004286:	e00e      	b.n	80042a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff fd74 	bl	8003d82 <HAL_ADC_ErrorCallback>
}
 800429a:	e004      	b.n	80042a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7fe ffdb 	bl	8003278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2240      	movs	r2, #64	; 0x40
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f043 0204 	orr.w	r2, r3, #4
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff fd49 	bl	8003d82 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <__NVIC_SetPriorityGrouping>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <__NVIC_SetPriorityGrouping+0x44>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004314:	4013      	ands	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800432a:	4a04      	ldr	r2, [pc, #16]	; (800433c <__NVIC_SetPriorityGrouping+0x44>)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	60d3      	str	r3, [r2, #12]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <__NVIC_GetPriorityGrouping>:
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <__NVIC_GetPriorityGrouping+0x18>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	0a1b      	lsrs	r3, r3, #8
 800434a:	f003 0307 	and.w	r3, r3, #7
}
 800434e:	4618      	mov	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <__NVIC_EnableIRQ>:
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	2b00      	cmp	r3, #0
 800436c:	db0b      	blt.n	8004386 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4907      	ldr	r1, [pc, #28]	; (8004394 <__NVIC_EnableIRQ+0x38>)
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2001      	movs	r0, #1
 800437e:	fa00 f202 	lsl.w	r2, r0, r2
 8004382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	e000e100 	.word	0xe000e100

08004398 <__NVIC_SetPriority>:
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	db0a      	blt.n	80043c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	490c      	ldr	r1, [pc, #48]	; (80043e4 <__NVIC_SetPriority+0x4c>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	0112      	lsls	r2, r2, #4
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	440b      	add	r3, r1
 80043bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043c0:	e00a      	b.n	80043d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4908      	ldr	r1, [pc, #32]	; (80043e8 <__NVIC_SetPriority+0x50>)
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	3b04      	subs	r3, #4
 80043d0:	0112      	lsls	r2, r2, #4
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	440b      	add	r3, r1
 80043d6:	761a      	strb	r2, [r3, #24]
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	e000e100 	.word	0xe000e100
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <NVIC_EncodePriority>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b089      	sub	sp, #36	; 0x24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f1c3 0307 	rsb	r3, r3, #7
 8004406:	2b04      	cmp	r3, #4
 8004408:	bf28      	it	cs
 800440a:	2304      	movcs	r3, #4
 800440c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3304      	adds	r3, #4
 8004412:	2b06      	cmp	r3, #6
 8004414:	d902      	bls.n	800441c <NVIC_EncodePriority+0x30>
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3b03      	subs	r3, #3
 800441a:	e000      	b.n	800441e <NVIC_EncodePriority+0x32>
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004420:	f04f 32ff 	mov.w	r2, #4294967295
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	401a      	ands	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004434:	f04f 31ff 	mov.w	r1, #4294967295
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	fa01 f303 	lsl.w	r3, r1, r3
 800443e:	43d9      	mvns	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004444:	4313      	orrs	r3, r2
}
 8004446:	4618      	mov	r0, r3
 8004448:	3724      	adds	r7, #36	; 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ff4c 	bl	80042f8 <__NVIC_SetPriorityGrouping>
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800447a:	f7ff ff61 	bl	8004340 <__NVIC_GetPriorityGrouping>
 800447e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	6978      	ldr	r0, [r7, #20]
 8004486:	f7ff ffb1 	bl	80043ec <NVIC_EncodePriority>
 800448a:	4602      	mov	r2, r0
 800448c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ff80 	bl	8004398 <__NVIC_SetPriority>
}
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff ff54 	bl	800435c <__NVIC_EnableIRQ>
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044c8:	f7ff f904 	bl	80036d4 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e099      	b.n	800460c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044f8:	e00f      	b.n	800451a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044fa:	f7ff f8eb 	bl	80036d4 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b05      	cmp	r3, #5
 8004506:	d908      	bls.n	800451a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2203      	movs	r2, #3
 8004512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e078      	b.n	800460c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e8      	bne.n	80044fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4b38      	ldr	r3, [pc, #224]	; (8004614 <HAL_DMA_Init+0x158>)
 8004534:	4013      	ands	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b04      	cmp	r3, #4
 8004572:	d107      	bne.n	8004584 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	4313      	orrs	r3, r2
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d117      	bne.n	80045de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fadf 	bl	8004b84 <DMA_CheckFifoParam>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2240      	movs	r2, #64	; 0x40
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045da:	2301      	movs	r3, #1
 80045dc:	e016      	b.n	800460c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fa96 	bl	8004b18 <DMA_CalcBaseAndBitshift>
 80045ec:	4603      	mov	r3, r0
 80045ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	223f      	movs	r2, #63	; 0x3f
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	f010803f 	.word	0xf010803f

08004618 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_DMA_Start_IT+0x26>
 800463a:	2302      	movs	r3, #2
 800463c:	e040      	b.n	80046c0 <HAL_DMA_Start_IT+0xa8>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d12f      	bne.n	80046b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fa28 	bl	8004abc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	223f      	movs	r2, #63	; 0x3f
 8004672:	409a      	lsls	r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0216 	orr.w	r2, r2, #22
 8004686:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0208 	orr.w	r2, r2, #8
 800469e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e005      	b.n	80046be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
 80046bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046be:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046d6:	f7fe fffd 	bl	80036d4 <HAL_GetTick>
 80046da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d008      	beq.n	80046fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e052      	b.n	80047a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0216 	bic.w	r2, r2, #22
 8004708:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695a      	ldr	r2, [r3, #20]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004718:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <HAL_DMA_Abort+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0208 	bic.w	r2, r2, #8
 8004738:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474a:	e013      	b.n	8004774 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800474c:	f7fe ffc2 	bl	80036d4 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b05      	cmp	r3, #5
 8004758:	d90c      	bls.n	8004774 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2203      	movs	r2, #3
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e015      	b.n	80047a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e4      	bne.n	800474c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004786:	223f      	movs	r2, #63	; 0x3f
 8004788:	409a      	lsls	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047b4:	4b8e      	ldr	r3, [pc, #568]	; (80049f0 <HAL_DMA_IRQHandler+0x248>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a8e      	ldr	r2, [pc, #568]	; (80049f4 <HAL_DMA_IRQHandler+0x24c>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	2208      	movs	r2, #8
 80047d4:	409a      	lsls	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01a      	beq.n	8004814 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	2208      	movs	r2, #8
 8004802:	409a      	lsls	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	2201      	movs	r2, #1
 800481a:	409a      	lsls	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d012      	beq.n	800484a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	2201      	movs	r2, #1
 8004838:	409a      	lsls	r2, r3
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f043 0202 	orr.w	r2, r3, #2
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	2204      	movs	r2, #4
 8004850:	409a      	lsls	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d012      	beq.n	8004880 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00b      	beq.n	8004880 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	2204      	movs	r2, #4
 800486e:	409a      	lsls	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f043 0204 	orr.w	r2, r3, #4
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	2210      	movs	r2, #16
 8004886:	409a      	lsls	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d043      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d03c      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a2:	2210      	movs	r2, #16
 80048a4:	409a      	lsls	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d018      	beq.n	80048ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d024      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
 80048d6:	e01f      	b.n	8004918 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01b      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
 80048e8:	e016      	b.n	8004918 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0208 	bic.w	r2, r2, #8
 8004906:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	2220      	movs	r2, #32
 800491e:	409a      	lsls	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 808f 	beq.w	8004a48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8087 	beq.w	8004a48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	2220      	movs	r2, #32
 8004940:	409a      	lsls	r2, r3
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b05      	cmp	r3, #5
 8004950:	d136      	bne.n	80049c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0216 	bic.w	r2, r2, #22
 8004960:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004970:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <HAL_DMA_IRQHandler+0x1da>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0208 	bic.w	r2, r2, #8
 8004990:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	223f      	movs	r2, #63	; 0x3f
 8004998:	409a      	lsls	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d07e      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
        }
        return;
 80049be:	e079      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10d      	bne.n	80049f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d031      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
 80049ec:	e02c      	b.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
 80049ee:	bf00      	nop
 80049f0:	20000004 	.word	0x20000004
 80049f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
 8004a08:	e01e      	b.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10f      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0210 	bic.w	r2, r2, #16
 8004a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d032      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d022      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2205      	movs	r2, #5
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	3301      	adds	r3, #1
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d307      	bcc.n	8004a90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f2      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x2cc>
 8004a8e:	e000      	b.n	8004a92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
 8004ab2:	e000      	b.n	8004ab6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ab4:	bf00      	nop
    }
  }
}
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d108      	bne.n	8004afc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004afa:	e007      	b.n	8004b0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	3b10      	subs	r3, #16
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <DMA_CalcBaseAndBitshift+0x64>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b32:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <DMA_CalcBaseAndBitshift+0x68>)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d909      	bls.n	8004b5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	1d1a      	adds	r2, r3, #4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	659a      	str	r2, [r3, #88]	; 0x58
 8004b58:	e007      	b.n	8004b6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	aaaaaaab 	.word	0xaaaaaaab
 8004b80:	080109e4 	.word	0x080109e4

08004b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d11f      	bne.n	8004bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d856      	bhi.n	8004c52 <DMA_CheckFifoParam+0xce>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <DMA_CheckFifoParam+0x28>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bcf 	.word	0x08004bcf
 8004bb4:	08004bbd 	.word	0x08004bbd
 8004bb8:	08004c53 	.word	0x08004c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d046      	beq.n	8004c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bcc:	e043      	b.n	8004c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bd6:	d140      	bne.n	8004c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bdc:	e03d      	b.n	8004c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be6:	d121      	bne.n	8004c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d837      	bhi.n	8004c5e <DMA_CheckFifoParam+0xda>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <DMA_CheckFifoParam+0x70>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c0b 	.word	0x08004c0b
 8004bfc:	08004c05 	.word	0x08004c05
 8004c00:	08004c1d 	.word	0x08004c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	e030      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d025      	beq.n	8004c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1a:	e022      	b.n	8004c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c24:	d11f      	bne.n	8004c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c2a:	e01c      	b.n	8004c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d903      	bls.n	8004c3a <DMA_CheckFifoParam+0xb6>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d003      	beq.n	8004c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c38:	e018      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3e:	e015      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	e00b      	b.n	8004c6a <DMA_CheckFifoParam+0xe6>
      break;
 8004c52:	bf00      	nop
 8004c54:	e00a      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c56:	bf00      	nop
 8004c58:	e008      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e006      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e004      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop

08004c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b089      	sub	sp, #36	; 0x24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	e165      	b.n	8004f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c98:	2201      	movs	r2, #1
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	f040 8154 	bne.w	8004f5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d005      	beq.n	8004cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d130      	bne.n	8004d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	2203      	movs	r2, #3
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d04:	2201      	movs	r2, #1
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f003 0201 	and.w	r2, r3, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d017      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	2203      	movs	r2, #3
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d123      	bne.n	8004dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	08da      	lsrs	r2, r3, #3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3208      	adds	r2, #8
 8004d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	220f      	movs	r2, #15
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	08da      	lsrs	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3208      	adds	r2, #8
 8004dba:	69b9      	ldr	r1, [r7, #24]
 8004dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0203 	and.w	r2, r3, #3
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80ae 	beq.w	8004f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	4b5d      	ldr	r3, [pc, #372]	; (8004f7c <HAL_GPIO_Init+0x300>)
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	4a5c      	ldr	r2, [pc, #368]	; (8004f7c <HAL_GPIO_Init+0x300>)
 8004e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e10:	6453      	str	r3, [r2, #68]	; 0x44
 8004e12:	4b5a      	ldr	r3, [pc, #360]	; (8004f7c <HAL_GPIO_Init+0x300>)
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e1e:	4a58      	ldr	r2, [pc, #352]	; (8004f80 <HAL_GPIO_Init+0x304>)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	3302      	adds	r3, #2
 8004e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	220f      	movs	r2, #15
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a4f      	ldr	r2, [pc, #316]	; (8004f84 <HAL_GPIO_Init+0x308>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d025      	beq.n	8004e96 <HAL_GPIO_Init+0x21a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a4e      	ldr	r2, [pc, #312]	; (8004f88 <HAL_GPIO_Init+0x30c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01f      	beq.n	8004e92 <HAL_GPIO_Init+0x216>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a4d      	ldr	r2, [pc, #308]	; (8004f8c <HAL_GPIO_Init+0x310>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d019      	beq.n	8004e8e <HAL_GPIO_Init+0x212>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a4c      	ldr	r2, [pc, #304]	; (8004f90 <HAL_GPIO_Init+0x314>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_GPIO_Init+0x20e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a4b      	ldr	r2, [pc, #300]	; (8004f94 <HAL_GPIO_Init+0x318>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00d      	beq.n	8004e86 <HAL_GPIO_Init+0x20a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a4a      	ldr	r2, [pc, #296]	; (8004f98 <HAL_GPIO_Init+0x31c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <HAL_GPIO_Init+0x206>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a49      	ldr	r2, [pc, #292]	; (8004f9c <HAL_GPIO_Init+0x320>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_GPIO_Init+0x202>
 8004e7a:	2306      	movs	r3, #6
 8004e7c:	e00c      	b.n	8004e98 <HAL_GPIO_Init+0x21c>
 8004e7e:	2307      	movs	r3, #7
 8004e80:	e00a      	b.n	8004e98 <HAL_GPIO_Init+0x21c>
 8004e82:	2305      	movs	r3, #5
 8004e84:	e008      	b.n	8004e98 <HAL_GPIO_Init+0x21c>
 8004e86:	2304      	movs	r3, #4
 8004e88:	e006      	b.n	8004e98 <HAL_GPIO_Init+0x21c>
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e004      	b.n	8004e98 <HAL_GPIO_Init+0x21c>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e002      	b.n	8004e98 <HAL_GPIO_Init+0x21c>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_GPIO_Init+0x21c>
 8004e96:	2300      	movs	r3, #0
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	f002 0203 	and.w	r2, r2, #3
 8004e9e:	0092      	lsls	r2, r2, #2
 8004ea0:	4093      	lsls	r3, r2
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ea8:	4935      	ldr	r1, [pc, #212]	; (8004f80 <HAL_GPIO_Init+0x304>)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	089b      	lsrs	r3, r3, #2
 8004eae:	3302      	adds	r3, #2
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eb6:	4b3a      	ldr	r3, [pc, #232]	; (8004fa0 <HAL_GPIO_Init+0x324>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eda:	4a31      	ldr	r2, [pc, #196]	; (8004fa0 <HAL_GPIO_Init+0x324>)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ee0:	4b2f      	ldr	r3, [pc, #188]	; (8004fa0 <HAL_GPIO_Init+0x324>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f04:	4a26      	ldr	r2, [pc, #152]	; (8004fa0 <HAL_GPIO_Init+0x324>)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f0a:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <HAL_GPIO_Init+0x324>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f2e:	4a1c      	ldr	r2, [pc, #112]	; (8004fa0 <HAL_GPIO_Init+0x324>)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <HAL_GPIO_Init+0x324>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f58:	4a11      	ldr	r2, [pc, #68]	; (8004fa0 <HAL_GPIO_Init+0x324>)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3301      	adds	r3, #1
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	f67f ae96 	bls.w	8004c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	40013800 	.word	0x40013800
 8004f84:	40020000 	.word	0x40020000
 8004f88:	40020400 	.word	0x40020400
 8004f8c:	40020800 	.word	0x40020800
 8004f90:	40020c00 	.word	0x40020c00
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40021400 	.word	0x40021400
 8004f9c:	40021800 	.word	0x40021800
 8004fa0:	40013c00 	.word	0x40013c00

08004fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	807b      	strh	r3, [r7, #2]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fb4:	787b      	ldrb	r3, [r7, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fc0:	e003      	b.n	8004fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fc2:	887b      	ldrh	r3, [r7, #2]
 8004fc4:	041a      	lsls	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	619a      	str	r2, [r3, #24]
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0cc      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fec:	4b68      	ldr	r3, [pc, #416]	; (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d90c      	bls.n	8005014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b65      	ldr	r3, [pc, #404]	; (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b63      	ldr	r3, [pc, #396]	; (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d001      	beq.n	8005014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0b8      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800502c:	4b59      	ldr	r3, [pc, #356]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4a58      	ldr	r2, [pc, #352]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005044:	4b53      	ldr	r3, [pc, #332]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a52      	ldr	r2, [pc, #328]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800504e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005050:	4b50      	ldr	r3, [pc, #320]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	494d      	ldr	r1, [pc, #308]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d044      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	4b47      	ldr	r3, [pc, #284]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d119      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e07f      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d003      	beq.n	8005096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005092:	2b03      	cmp	r3, #3
 8005094:	d107      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005096:	4b3f      	ldr	r3, [pc, #252]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e06f      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a6:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e067      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b6:	4b37      	ldr	r3, [pc, #220]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f023 0203 	bic.w	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4934      	ldr	r1, [pc, #208]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c8:	f7fe fb04 	bl	80036d4 <HAL_GetTick>
 80050cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d0:	f7fe fb00 	bl	80036d4 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	; 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e04f      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 020c 	and.w	r2, r3, #12
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d1eb      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f8:	4b25      	ldr	r3, [pc, #148]	; (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d20c      	bcs.n	8005120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005106:	4b22      	ldr	r3, [pc, #136]	; (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b20      	ldr	r3, [pc, #128]	; (8005190 <HAL_RCC_ClockConfig+0x1b8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e032      	b.n	8005186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800512c:	4b19      	ldr	r3, [pc, #100]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4916      	ldr	r1, [pc, #88]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800514a:	4b12      	ldr	r3, [pc, #72]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	490e      	ldr	r1, [pc, #56]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800515e:	f000 f887 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8005162:	4602      	mov	r2, r0
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	490a      	ldr	r1, [pc, #40]	; (8005198 <HAL_RCC_ClockConfig+0x1c0>)
 8005170:	5ccb      	ldrb	r3, [r1, r3]
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x1c4>)
 8005178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_RCC_ClockConfig+0x1c8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fd fc62 	bl	8002a48 <HAL_InitTick>

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40023c00 	.word	0x40023c00
 8005194:	40023800 	.word	0x40023800
 8005198:	080109cc 	.word	0x080109cc
 800519c:	20000004 	.word	0x20000004
 80051a0:	20000010 	.word	0x20000010

080051a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000004 	.word	0x20000004

080051bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051c0:	f7ff fff0 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	0a9b      	lsrs	r3, r3, #10
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	4903      	ldr	r1, [pc, #12]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d2:	5ccb      	ldrb	r3, [r1, r3]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40023800 	.word	0x40023800
 80051e0:	080109dc 	.word	0x080109dc

080051e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051e8:	f7ff ffdc 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	0b5b      	lsrs	r3, r3, #13
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	4903      	ldr	r1, [pc, #12]	; (8005208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40023800 	.word	0x40023800
 8005208:	080109dc 	.word	0x080109dc

0800520c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	220f      	movs	r2, #15
 800521a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <HAL_RCC_GetClockConfig+0x5c>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0203 	and.w	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <HAL_RCC_GetClockConfig+0x5c>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <HAL_RCC_GetClockConfig+0x5c>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005240:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_GetClockConfig+0x5c>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	08db      	lsrs	r3, r3, #3
 8005246:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <HAL_RCC_GetClockConfig+0x60>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 020f 	and.w	r2, r3, #15
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	601a      	str	r2, [r3, #0]
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40023c00 	.word	0x40023c00

08005270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005274:	b0ae      	sub	sp, #184	; 0xb8
 8005276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005296:	4bcb      	ldr	r3, [pc, #812]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	f200 8206 	bhi.w	80056b0 <HAL_RCC_GetSysClockFreq+0x440>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052e1 	.word	0x080052e1
 80052b0:	080056b1 	.word	0x080056b1
 80052b4:	080056b1 	.word	0x080056b1
 80052b8:	080056b1 	.word	0x080056b1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080056b1 	.word	0x080056b1
 80052c4:	080056b1 	.word	0x080056b1
 80052c8:	080056b1 	.word	0x080056b1
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	080056b1 	.word	0x080056b1
 80052d4:	080056b1 	.word	0x080056b1
 80052d8:	080056b1 	.word	0x080056b1
 80052dc:	080054e1 	.word	0x080054e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052e0:	4bb9      	ldr	r3, [pc, #740]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80052e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80052e6:	e1e7      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052e8:	4bb8      	ldr	r3, [pc, #736]	; (80055cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80052ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80052ee:	e1e3      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052f0:	4bb4      	ldr	r3, [pc, #720]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052fc:	4bb1      	ldr	r3, [pc, #708]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d071      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005308:	4bae      	ldr	r3, [pc, #696]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	099b      	lsrs	r3, r3, #6
 800530e:	2200      	movs	r2, #0
 8005310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005314:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800531c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800532a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800532e:	4622      	mov	r2, r4
 8005330:	462b      	mov	r3, r5
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f04f 0100 	mov.w	r1, #0
 800533a:	0159      	lsls	r1, r3, #5
 800533c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005340:	0150      	lsls	r0, r2, #5
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4621      	mov	r1, r4
 8005348:	1a51      	subs	r1, r2, r1
 800534a:	6439      	str	r1, [r7, #64]	; 0x40
 800534c:	4629      	mov	r1, r5
 800534e:	eb63 0301 	sbc.w	r3, r3, r1
 8005352:	647b      	str	r3, [r7, #68]	; 0x44
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005360:	4649      	mov	r1, r9
 8005362:	018b      	lsls	r3, r1, #6
 8005364:	4641      	mov	r1, r8
 8005366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800536a:	4641      	mov	r1, r8
 800536c:	018a      	lsls	r2, r1, #6
 800536e:	4641      	mov	r1, r8
 8005370:	1a51      	subs	r1, r2, r1
 8005372:	63b9      	str	r1, [r7, #56]	; 0x38
 8005374:	4649      	mov	r1, r9
 8005376:	eb63 0301 	sbc.w	r3, r3, r1
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005388:	4649      	mov	r1, r9
 800538a:	00cb      	lsls	r3, r1, #3
 800538c:	4641      	mov	r1, r8
 800538e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005392:	4641      	mov	r1, r8
 8005394:	00ca      	lsls	r2, r1, #3
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	4603      	mov	r3, r0
 800539c:	4622      	mov	r2, r4
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	633b      	str	r3, [r7, #48]	; 0x30
 80053a2:	462b      	mov	r3, r5
 80053a4:	460a      	mov	r2, r1
 80053a6:	eb42 0303 	adc.w	r3, r2, r3
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053b8:	4629      	mov	r1, r5
 80053ba:	024b      	lsls	r3, r1, #9
 80053bc:	4621      	mov	r1, r4
 80053be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053c2:	4621      	mov	r1, r4
 80053c4:	024a      	lsls	r2, r1, #9
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80053dc:	f7fb fc14 	bl	8000c08 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4613      	mov	r3, r2
 80053e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053ea:	e067      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ec:	4b75      	ldr	r3, [pc, #468]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	099b      	lsrs	r3, r3, #6
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053f8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80053fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005404:	67bb      	str	r3, [r7, #120]	; 0x78
 8005406:	2300      	movs	r3, #0
 8005408:	67fb      	str	r3, [r7, #124]	; 0x7c
 800540a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	0159      	lsls	r1, r3, #5
 800541c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005420:	0150      	lsls	r0, r2, #5
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4621      	mov	r1, r4
 8005428:	1a51      	subs	r1, r2, r1
 800542a:	62b9      	str	r1, [r7, #40]	; 0x28
 800542c:	4629      	mov	r1, r5
 800542e:	eb63 0301 	sbc.w	r3, r3, r1
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005440:	4649      	mov	r1, r9
 8005442:	018b      	lsls	r3, r1, #6
 8005444:	4641      	mov	r1, r8
 8005446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800544a:	4641      	mov	r1, r8
 800544c:	018a      	lsls	r2, r1, #6
 800544e:	4641      	mov	r1, r8
 8005450:	ebb2 0a01 	subs.w	sl, r2, r1
 8005454:	4649      	mov	r1, r9
 8005456:	eb63 0b01 	sbc.w	fp, r3, r1
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005466:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800546a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800546e:	4692      	mov	sl, r2
 8005470:	469b      	mov	fp, r3
 8005472:	4623      	mov	r3, r4
 8005474:	eb1a 0303 	adds.w	r3, sl, r3
 8005478:	623b      	str	r3, [r7, #32]
 800547a:	462b      	mov	r3, r5
 800547c:	eb4b 0303 	adc.w	r3, fp, r3
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800548e:	4629      	mov	r1, r5
 8005490:	028b      	lsls	r3, r1, #10
 8005492:	4621      	mov	r1, r4
 8005494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005498:	4621      	mov	r1, r4
 800549a:	028a      	lsls	r2, r1, #10
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a4:	2200      	movs	r2, #0
 80054a6:	673b      	str	r3, [r7, #112]	; 0x70
 80054a8:	677a      	str	r2, [r7, #116]	; 0x74
 80054aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80054ae:	f7fb fbab 	bl	8000c08 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4613      	mov	r3, r2
 80054b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054bc:	4b41      	ldr	r3, [pc, #260]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	0c1b      	lsrs	r3, r3, #16
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	3301      	adds	r3, #1
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80054ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80054de:	e0eb      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e0:	4b38      	ldr	r3, [pc, #224]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ec:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d06b      	beq.n	80055d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f8:	4b32      	ldr	r3, [pc, #200]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	2200      	movs	r2, #0
 8005500:	66bb      	str	r3, [r7, #104]	; 0x68
 8005502:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	663b      	str	r3, [r7, #96]	; 0x60
 800550c:	2300      	movs	r3, #0
 800550e:	667b      	str	r3, [r7, #100]	; 0x64
 8005510:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005514:	4622      	mov	r2, r4
 8005516:	462b      	mov	r3, r5
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	0159      	lsls	r1, r3, #5
 8005522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005526:	0150      	lsls	r0, r2, #5
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4621      	mov	r1, r4
 800552e:	1a51      	subs	r1, r2, r1
 8005530:	61b9      	str	r1, [r7, #24]
 8005532:	4629      	mov	r1, r5
 8005534:	eb63 0301 	sbc.w	r3, r3, r1
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005546:	4659      	mov	r1, fp
 8005548:	018b      	lsls	r3, r1, #6
 800554a:	4651      	mov	r1, sl
 800554c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005550:	4651      	mov	r1, sl
 8005552:	018a      	lsls	r2, r1, #6
 8005554:	4651      	mov	r1, sl
 8005556:	ebb2 0801 	subs.w	r8, r2, r1
 800555a:	4659      	mov	r1, fp
 800555c:	eb63 0901 	sbc.w	r9, r3, r1
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800556c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005570:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005574:	4690      	mov	r8, r2
 8005576:	4699      	mov	r9, r3
 8005578:	4623      	mov	r3, r4
 800557a:	eb18 0303 	adds.w	r3, r8, r3
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	462b      	mov	r3, r5
 8005582:	eb49 0303 	adc.w	r3, r9, r3
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005594:	4629      	mov	r1, r5
 8005596:	024b      	lsls	r3, r1, #9
 8005598:	4621      	mov	r1, r4
 800559a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800559e:	4621      	mov	r1, r4
 80055a0:	024a      	lsls	r2, r1, #9
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055aa:	2200      	movs	r2, #0
 80055ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055b4:	f7fb fb28 	bl	8000c08 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4613      	mov	r3, r2
 80055be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055c2:	e065      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x420>
 80055c4:	40023800 	.word	0x40023800
 80055c8:	00f42400 	.word	0x00f42400
 80055cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d0:	4b3d      	ldr	r3, [pc, #244]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	099b      	lsrs	r3, r3, #6
 80055d6:	2200      	movs	r2, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	4611      	mov	r1, r2
 80055dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055e0:	653b      	str	r3, [r7, #80]	; 0x50
 80055e2:	2300      	movs	r3, #0
 80055e4:	657b      	str	r3, [r7, #84]	; 0x54
 80055e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80055ea:	4642      	mov	r2, r8
 80055ec:	464b      	mov	r3, r9
 80055ee:	f04f 0000 	mov.w	r0, #0
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	0159      	lsls	r1, r3, #5
 80055f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055fc:	0150      	lsls	r0, r2, #5
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4641      	mov	r1, r8
 8005604:	1a51      	subs	r1, r2, r1
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	4649      	mov	r1, r9
 800560a:	eb63 0301 	sbc.w	r3, r3, r1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800561c:	4659      	mov	r1, fp
 800561e:	018b      	lsls	r3, r1, #6
 8005620:	4651      	mov	r1, sl
 8005622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005626:	4651      	mov	r1, sl
 8005628:	018a      	lsls	r2, r1, #6
 800562a:	4651      	mov	r1, sl
 800562c:	1a54      	subs	r4, r2, r1
 800562e:	4659      	mov	r1, fp
 8005630:	eb63 0501 	sbc.w	r5, r3, r1
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	00eb      	lsls	r3, r5, #3
 800563e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005642:	00e2      	lsls	r2, r4, #3
 8005644:	4614      	mov	r4, r2
 8005646:	461d      	mov	r5, r3
 8005648:	4643      	mov	r3, r8
 800564a:	18e3      	adds	r3, r4, r3
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	464b      	mov	r3, r9
 8005650:	eb45 0303 	adc.w	r3, r5, r3
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005662:	4629      	mov	r1, r5
 8005664:	028b      	lsls	r3, r1, #10
 8005666:	4621      	mov	r1, r4
 8005668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800566c:	4621      	mov	r1, r4
 800566e:	028a      	lsls	r2, r1, #10
 8005670:	4610      	mov	r0, r2
 8005672:	4619      	mov	r1, r3
 8005674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005678:	2200      	movs	r2, #0
 800567a:	64bb      	str	r3, [r7, #72]	; 0x48
 800567c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800567e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005682:	f7fb fac1 	bl	8000c08 <__aeabi_uldivmod>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4613      	mov	r3, r2
 800568c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	0f1b      	lsrs	r3, r3, #28
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800569e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056ae:	e003      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80056b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	37b8      	adds	r7, #184	; 0xb8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	00f42400 	.word	0x00f42400

080056d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e28d      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8083 	beq.w	80057f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056f0:	4b94      	ldr	r3, [pc, #592]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d019      	beq.n	8005730 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056fc:	4b91      	ldr	r3, [pc, #580]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005704:	2b08      	cmp	r3, #8
 8005706:	d106      	bne.n	8005716 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005708:	4b8e      	ldr	r3, [pc, #568]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005714:	d00c      	beq.n	8005730 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005716:	4b8b      	ldr	r3, [pc, #556]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800571e:	2b0c      	cmp	r3, #12
 8005720:	d112      	bne.n	8005748 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005722:	4b88      	ldr	r3, [pc, #544]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572e:	d10b      	bne.n	8005748 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005730:	4b84      	ldr	r3, [pc, #528]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d05b      	beq.n	80057f4 <HAL_RCC_OscConfig+0x124>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d157      	bne.n	80057f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e25a      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005750:	d106      	bne.n	8005760 <HAL_RCC_OscConfig+0x90>
 8005752:	4b7c      	ldr	r3, [pc, #496]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a7b      	ldr	r2, [pc, #492]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e01d      	b.n	800579c <HAL_RCC_OscConfig+0xcc>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005768:	d10c      	bne.n	8005784 <HAL_RCC_OscConfig+0xb4>
 800576a:	4b76      	ldr	r3, [pc, #472]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a75      	ldr	r2, [pc, #468]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	4b73      	ldr	r3, [pc, #460]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a72      	ldr	r2, [pc, #456]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e00b      	b.n	800579c <HAL_RCC_OscConfig+0xcc>
 8005784:	4b6f      	ldr	r3, [pc, #444]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a6e      	ldr	r2, [pc, #440]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 800578a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4b6c      	ldr	r3, [pc, #432]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a6b      	ldr	r2, [pc, #428]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d013      	beq.n	80057cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fd ff96 	bl	80036d4 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fd ff92 	bl	80036d4 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e21f      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	4b61      	ldr	r3, [pc, #388]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0xdc>
 80057ca:	e014      	b.n	80057f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fd ff82 	bl	80036d4 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d4:	f7fd ff7e 	bl	80036d4 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b64      	cmp	r3, #100	; 0x64
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e20b      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e6:	4b57      	ldr	r3, [pc, #348]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x104>
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d06f      	beq.n	80058e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005802:	4b50      	ldr	r3, [pc, #320]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b00      	cmp	r3, #0
 800580c:	d017      	beq.n	800583e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800580e:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005816:	2b08      	cmp	r3, #8
 8005818:	d105      	bne.n	8005826 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800581a:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005826:	4b47      	ldr	r3, [pc, #284]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d11c      	bne.n	800586c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005832:	4b44      	ldr	r3, [pc, #272]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d116      	bne.n	800586c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583e:	4b41      	ldr	r3, [pc, #260]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_RCC_OscConfig+0x186>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d001      	beq.n	8005856 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e1d3      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005856:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4937      	ldr	r1, [pc, #220]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005866:	4313      	orrs	r3, r2
 8005868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800586a:	e03a      	b.n	80058e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d020      	beq.n	80058b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005874:	4b34      	ldr	r3, [pc, #208]	; (8005948 <HAL_RCC_OscConfig+0x278>)
 8005876:	2201      	movs	r2, #1
 8005878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587a:	f7fd ff2b 	bl	80036d4 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005882:	f7fd ff27 	bl	80036d4 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e1b4      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a0:	4b28      	ldr	r3, [pc, #160]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4925      	ldr	r1, [pc, #148]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	600b      	str	r3, [r1, #0]
 80058b4:	e015      	b.n	80058e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <HAL_RCC_OscConfig+0x278>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058bc:	f7fd ff0a 	bl	80036d4 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058c4:	f7fd ff06 	bl	80036d4 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e193      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d6:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f0      	bne.n	80058c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d036      	beq.n	800595c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d016      	beq.n	8005924 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <HAL_RCC_OscConfig+0x27c>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fd feea 	bl	80036d4 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005904:	f7fd fee6 	bl	80036d4 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e173      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <HAL_RCC_OscConfig+0x274>)
 8005918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0x234>
 8005922:	e01b      	b.n	800595c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005924:	4b09      	ldr	r3, [pc, #36]	; (800594c <HAL_RCC_OscConfig+0x27c>)
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fd fed3 	bl	80036d4 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005930:	e00e      	b.n	8005950 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005932:	f7fd fecf 	bl	80036d4 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d907      	bls.n	8005950 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e15c      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
 8005944:	40023800 	.word	0x40023800
 8005948:	42470000 	.word	0x42470000
 800594c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005950:	4b8a      	ldr	r3, [pc, #552]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1ea      	bne.n	8005932 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8097 	beq.w	8005a98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800596e:	4b83      	ldr	r3, [pc, #524]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	4b7f      	ldr	r3, [pc, #508]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	4a7e      	ldr	r2, [pc, #504]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005988:	6413      	str	r3, [r2, #64]	; 0x40
 800598a:	4b7c      	ldr	r3, [pc, #496]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005996:	2301      	movs	r3, #1
 8005998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599a:	4b79      	ldr	r3, [pc, #484]	; (8005b80 <HAL_RCC_OscConfig+0x4b0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d118      	bne.n	80059d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059a6:	4b76      	ldr	r3, [pc, #472]	; (8005b80 <HAL_RCC_OscConfig+0x4b0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a75      	ldr	r2, [pc, #468]	; (8005b80 <HAL_RCC_OscConfig+0x4b0>)
 80059ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059b2:	f7fd fe8f 	bl	80036d4 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ba:	f7fd fe8b 	bl	80036d4 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e118      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059cc:	4b6c      	ldr	r3, [pc, #432]	; (8005b80 <HAL_RCC_OscConfig+0x4b0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d106      	bne.n	80059ee <HAL_RCC_OscConfig+0x31e>
 80059e0:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	6713      	str	r3, [r2, #112]	; 0x70
 80059ec:	e01c      	b.n	8005a28 <HAL_RCC_OscConfig+0x358>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b05      	cmp	r3, #5
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCC_OscConfig+0x340>
 80059f6:	4b61      	ldr	r3, [pc, #388]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	4a60      	ldr	r2, [pc, #384]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 80059fc:	f043 0304 	orr.w	r3, r3, #4
 8005a00:	6713      	str	r3, [r2, #112]	; 0x70
 8005a02:	4b5e      	ldr	r3, [pc, #376]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4a5d      	ldr	r2, [pc, #372]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCC_OscConfig+0x358>
 8005a10:	4b5a      	ldr	r3, [pc, #360]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a14:	4a59      	ldr	r2, [pc, #356]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1c:	4b57      	ldr	r3, [pc, #348]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	4a56      	ldr	r2, [pc, #344]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a22:	f023 0304 	bic.w	r3, r3, #4
 8005a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d015      	beq.n	8005a5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a30:	f7fd fe50 	bl	80036d4 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a36:	e00a      	b.n	8005a4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a38:	f7fd fe4c 	bl	80036d4 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e0d7      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4e:	4b4b      	ldr	r3, [pc, #300]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0ee      	beq.n	8005a38 <HAL_RCC_OscConfig+0x368>
 8005a5a:	e014      	b.n	8005a86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5c:	f7fd fe3a 	bl	80036d4 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a64:	f7fd fe36 	bl	80036d4 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e0c1      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a7a:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1ee      	bne.n	8005a64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a8c:	4b3b      	ldr	r3, [pc, #236]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	4a3a      	ldr	r2, [pc, #232]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80ad 	beq.w	8005bfc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aa2:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d060      	beq.n	8005b70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d145      	bne.n	8005b42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab6:	4b33      	ldr	r3, [pc, #204]	; (8005b84 <HAL_RCC_OscConfig+0x4b4>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fd fe0a 	bl	80036d4 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fd fe06 	bl	80036d4 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e093      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69da      	ldr	r2, [r3, #28]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	019b      	lsls	r3, r3, #6
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	3b01      	subs	r3, #1
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	061b      	lsls	r3, r3, #24
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	071b      	lsls	r3, r3, #28
 8005b0e:	491b      	ldr	r1, [pc, #108]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <HAL_RCC_OscConfig+0x4b4>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fd fddb 	bl	80036d4 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fd fdd7 	bl	80036d4 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e064      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x452>
 8005b40:	e05c      	b.n	8005bfc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b42:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <HAL_RCC_OscConfig+0x4b4>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fd fdc4 	bl	80036d4 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fd fdc0 	bl	80036d4 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e04d      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b62:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <HAL_RCC_OscConfig+0x4ac>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x480>
 8005b6e:	e045      	b.n	8005bfc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d107      	bne.n	8005b88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e040      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	40007000 	.word	0x40007000
 8005b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <HAL_RCC_OscConfig+0x538>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d030      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d129      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d122      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bb8:	4013      	ands	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d119      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d10f      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40023800 	.word	0x40023800

08005c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e07b      	b.n	8005d16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d108      	bne.n	8005c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2e:	d009      	beq.n	8005c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	61da      	str	r2, [r3, #28]
 8005c36:	e005      	b.n	8005c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fe4e 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	ea42 0103 	orr.w	r1, r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	f003 0104 	and.w	r1, r3, #4
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	f003 0210 	and.w	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b088      	sub	sp, #32
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_SPI_Transmit+0x22>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e126      	b.n	8005f8e <HAL_SPI_Transmit+0x270>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d48:	f7fd fcc4 	bl	80036d4 <HAL_GetTick>
 8005d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d002      	beq.n	8005d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d62:	e10b      	b.n	8005f7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_Transmit+0x52>
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d74:	e102      	b.n	8005f7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	88fa      	ldrh	r2, [r7, #6]
 8005d8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dbc:	d10f      	bne.n	8005dde <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d007      	beq.n	8005dfc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e04:	d14b      	bne.n	8005e9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0xf6>
 8005e0e:	8afb      	ldrh	r3, [r7, #22]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d13e      	bne.n	8005e92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	881a      	ldrh	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	1c9a      	adds	r2, r3, #2
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e38:	e02b      	b.n	8005e92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d112      	bne.n	8005e6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	881a      	ldrh	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	1c9a      	adds	r2, r3, #2
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e6c:	e011      	b.n	8005e92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e6e:	f7fd fc31 	bl	80036d4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d803      	bhi.n	8005e86 <HAL_SPI_Transmit+0x168>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d102      	bne.n	8005e8c <HAL_SPI_Transmit+0x16e>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e90:	e074      	b.n	8005f7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1ce      	bne.n	8005e3a <HAL_SPI_Transmit+0x11c>
 8005e9c:	e04c      	b.n	8005f38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_SPI_Transmit+0x18e>
 8005ea6:	8afb      	ldrh	r3, [r7, #22]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d140      	bne.n	8005f2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ed2:	e02c      	b.n	8005f2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d113      	bne.n	8005f0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f08:	e011      	b.n	8005f2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f0a:	f7fd fbe3 	bl	80036d4 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d803      	bhi.n	8005f22 <HAL_SPI_Transmit+0x204>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d102      	bne.n	8005f28 <HAL_SPI_Transmit+0x20a>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f2c:	e026      	b.n	8005f7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1cd      	bne.n	8005ed4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fa63 	bl	8006408 <SPI_EndRxTxTransaction>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f56:	2300      	movs	r3, #0
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e000      	b.n	8005f7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b08c      	sub	sp, #48	; 0x30
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x26>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e18a      	b.n	80062d2 <HAL_SPI_TransmitReceive+0x33c>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fc4:	f7fd fb86 	bl	80036d4 <HAL_GetTick>
 8005fc8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005fda:	887b      	ldrh	r3, [r7, #2]
 8005fdc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d00f      	beq.n	8006006 <HAL_SPI_TransmitReceive+0x70>
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fec:	d107      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x68>
 8005ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d003      	beq.n	8006006 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
 8006000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006004:	e15b      	b.n	80062be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x82>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x82>
 8006012:	887b      	ldrh	r3, [r7, #2]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800601e:	e14e      	b.n	80062be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b04      	cmp	r3, #4
 800602a:	d003      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2205      	movs	r2, #5
 8006030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	887a      	ldrh	r2, [r7, #2]
 8006044:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	887a      	ldrh	r2, [r7, #2]
 800604a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	887a      	ldrh	r2, [r7, #2]
 8006056:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	887a      	ldrh	r2, [r7, #2]
 800605c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d007      	beq.n	8006088 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006086:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006090:	d178      	bne.n	8006184 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_SPI_TransmitReceive+0x10a>
 800609a:	8b7b      	ldrh	r3, [r7, #26]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d166      	bne.n	800616e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	881a      	ldrh	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060c4:	e053      	b.n	800616e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d11b      	bne.n	800610c <HAL_SPI_TransmitReceive+0x176>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d016      	beq.n	800610c <HAL_SPI_TransmitReceive+0x176>
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d113      	bne.n	800610c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	881a      	ldrh	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b01      	cmp	r3, #1
 8006118:	d119      	bne.n	800614e <HAL_SPI_TransmitReceive+0x1b8>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d014      	beq.n	800614e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	b292      	uxth	r2, r2
 8006130:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800614a:	2301      	movs	r3, #1
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800614e:	f7fd fac1 	bl	80036d4 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800615a:	429a      	cmp	r2, r3
 800615c:	d807      	bhi.n	800616e <HAL_SPI_TransmitReceive+0x1d8>
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d003      	beq.n	800616e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800616c:	e0a7      	b.n	80062be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1a6      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x130>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1a1      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x130>
 8006182:	e07c      	b.n	800627e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x1fc>
 800618c:	8b7b      	ldrh	r3, [r7, #26]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d16b      	bne.n	800626a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	7812      	ldrb	r2, [r2, #0]
 800619e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b8:	e057      	b.n	800626a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d11c      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x26c>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d017      	beq.n	8006202 <HAL_SPI_TransmitReceive+0x26c>
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d114      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	7812      	ldrb	r2, [r2, #0]
 80061e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d119      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x2ae>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d014      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006240:	2301      	movs	r3, #1
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006244:	f7fd fa46 	bl	80036d4 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006250:	429a      	cmp	r2, r3
 8006252:	d803      	bhi.n	800625c <HAL_SPI_TransmitReceive+0x2c6>
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d102      	bne.n	8006262 <HAL_SPI_TransmitReceive+0x2cc>
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006268:	e029      	b.n	80062be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1a2      	bne.n	80061ba <HAL_SPI_TransmitReceive+0x224>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d19d      	bne.n	80061ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800627e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006280:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f8c0 	bl	8006408 <SPI_EndRxTxTransaction>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d006      	beq.n	800629c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800629a:	e010      	b.n	80062be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	e000      	b.n	80062be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80062bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3730      	adds	r7, #48	; 0x30
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e8:	b2db      	uxtb	r3, r3
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
	...

080062f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006308:	f7fd f9e4 	bl	80036d4 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	4413      	add	r3, r2
 8006316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006318:	f7fd f9dc 	bl	80036d4 <HAL_GetTick>
 800631c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800631e:	4b39      	ldr	r3, [pc, #228]	; (8006404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	015b      	lsls	r3, r3, #5
 8006324:	0d1b      	lsrs	r3, r3, #20
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	fb02 f303 	mul.w	r3, r2, r3
 800632c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632e:	e054      	b.n	80063da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d050      	beq.n	80063da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006338:	f7fd f9cc 	bl	80036d4 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	429a      	cmp	r2, r3
 8006346:	d902      	bls.n	800634e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d13d      	bne.n	80063ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800635c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006366:	d111      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006370:	d004      	beq.n	800637c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637a:	d107      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006394:	d10f      	bne.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e017      	b.n	80063fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d19b      	bne.n	8006330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000004 	.word	0x20000004

08006408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006414:	4b1b      	ldr	r3, [pc, #108]	; (8006484 <SPI_EndRxTxTransaction+0x7c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1b      	ldr	r2, [pc, #108]	; (8006488 <SPI_EndRxTxTransaction+0x80>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	0d5b      	lsrs	r3, r3, #21
 8006420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006424:	fb02 f303 	mul.w	r3, r2, r3
 8006428:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006432:	d112      	bne.n	800645a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff ff5a 	bl	80062f8 <SPI_WaitFlagStateUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e00f      	b.n	800647a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	3b01      	subs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006470:	2b80      	cmp	r3, #128	; 0x80
 8006472:	d0f2      	beq.n	800645a <SPI_EndRxTxTransaction+0x52>
 8006474:	e000      	b.n	8006478 <SPI_EndRxTxTransaction+0x70>
        break;
 8006476:	bf00      	nop
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000004 	.word	0x20000004
 8006488:	165e9f81 	.word	0x165e9f81

0800648c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e041      	b.n	8006522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc fdc2 	bl	800303c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f000 fc42 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	d001      	beq.n	8006544 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e046      	b.n	80065d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a23      	ldr	r2, [pc, #140]	; (80065e0 <HAL_TIM_Base_Start+0xb4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d022      	beq.n	800659c <HAL_TIM_Base_Start+0x70>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655e:	d01d      	beq.n	800659c <HAL_TIM_Base_Start+0x70>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1f      	ldr	r2, [pc, #124]	; (80065e4 <HAL_TIM_Base_Start+0xb8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d018      	beq.n	800659c <HAL_TIM_Base_Start+0x70>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1e      	ldr	r2, [pc, #120]	; (80065e8 <HAL_TIM_Base_Start+0xbc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d013      	beq.n	800659c <HAL_TIM_Base_Start+0x70>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <HAL_TIM_Base_Start+0xc0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00e      	beq.n	800659c <HAL_TIM_Base_Start+0x70>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1b      	ldr	r2, [pc, #108]	; (80065f0 <HAL_TIM_Base_Start+0xc4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d009      	beq.n	800659c <HAL_TIM_Base_Start+0x70>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a19      	ldr	r2, [pc, #100]	; (80065f4 <HAL_TIM_Base_Start+0xc8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d004      	beq.n	800659c <HAL_TIM_Base_Start+0x70>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <HAL_TIM_Base_Start+0xcc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d111      	bne.n	80065c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b06      	cmp	r3, #6
 80065ac:	d010      	beq.n	80065d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0201 	orr.w	r2, r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065be:	e007      	b.n	80065d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40001800 	.word	0x40001800

080065fc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a1a      	ldr	r2, [r3, #32]
 800660a:	f241 1311 	movw	r3, #4369	; 0x1111
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10f      	bne.n	8006634 <HAL_TIM_Base_Stop+0x38>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6a1a      	ldr	r2, [r3, #32]
 800661a:	f240 4344 	movw	r3, #1092	; 0x444
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d107      	bne.n	8006634 <HAL_TIM_Base_Stop+0x38>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e04e      	b.n	8006702 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a23      	ldr	r2, [pc, #140]	; (8006710 <HAL_TIM_Base_Start_IT+0xc4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d01d      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_TIM_Base_Start_IT+0xc8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_TIM_Base_Start_IT+0xcc>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_TIM_Base_Start_IT+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_TIM_Base_Start_IT+0xd4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_TIM_Base_Start_IT+0xd8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <HAL_TIM_Base_Start_IT+0xdc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d111      	bne.n	80066f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d010      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ee:	e007      	b.n	8006700 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40010400 	.word	0x40010400
 8006724:	40014000 	.word	0x40014000
 8006728:	40001800 	.word	0x40001800

0800672c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e041      	b.n	80067c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f839 	bl	80067ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f000 faf2 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d122      	bne.n	800683a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d11b      	bne.n	800683a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f06f 0202 	mvn.w	r2, #2
 800680a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa78 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006826:	e005      	b.n	8006834 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa6a 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa7b 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b04      	cmp	r3, #4
 8006846:	d122      	bne.n	800688e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d11b      	bne.n	800688e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f06f 0204 	mvn.w	r2, #4
 800685e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa4e 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 800687a:	e005      	b.n	8006888 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa40 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa51 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d122      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d11b      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f06f 0208 	mvn.w	r2, #8
 80068b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2204      	movs	r2, #4
 80068b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fa24 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 80068ce:	e005      	b.n	80068dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fa16 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa27 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d122      	bne.n	8006936 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d11b      	bne.n	8006936 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f06f 0210 	mvn.w	r2, #16
 8006906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2208      	movs	r2, #8
 800690c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f9fa 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006922:	e005      	b.n	8006930 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9ec 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f9fd 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d10e      	bne.n	8006962 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d107      	bne.n	8006962 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f06f 0201 	mvn.w	r2, #1
 800695a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fb febd 	bl	80026dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696c:	2b80      	cmp	r3, #128	; 0x80
 800696e:	d10e      	bne.n	800698e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d107      	bne.n	800698e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fda5 	bl	80074d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	d10e      	bne.n	80069ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d107      	bne.n	80069ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f9c2 	bl	8006d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d10e      	bne.n	80069e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d107      	bne.n	80069e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f06f 0220 	mvn.w	r2, #32
 80069de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fd6f 	bl	80074c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0ae      	b.n	8006b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b0c      	cmp	r3, #12
 8006a1a:	f200 809f 	bhi.w	8006b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a59 	.word	0x08006a59
 8006a28:	08006b5d 	.word	0x08006b5d
 8006a2c:	08006b5d 	.word	0x08006b5d
 8006a30:	08006b5d 	.word	0x08006b5d
 8006a34:	08006a99 	.word	0x08006a99
 8006a38:	08006b5d 	.word	0x08006b5d
 8006a3c:	08006b5d 	.word	0x08006b5d
 8006a40:	08006b5d 	.word	0x08006b5d
 8006a44:	08006adb 	.word	0x08006adb
 8006a48:	08006b5d 	.word	0x08006b5d
 8006a4c:	08006b5d 	.word	0x08006b5d
 8006a50:	08006b5d 	.word	0x08006b5d
 8006a54:	08006b1b 	.word	0x08006b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fa18 	bl	8006e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0208 	orr.w	r2, r2, #8
 8006a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0204 	bic.w	r2, r2, #4
 8006a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6999      	ldr	r1, [r3, #24]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	619a      	str	r2, [r3, #24]
      break;
 8006a96:	e064      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fa68 	bl	8006f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6999      	ldr	r1, [r3, #24]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	021a      	lsls	r2, r3, #8
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	619a      	str	r2, [r3, #24]
      break;
 8006ad8:	e043      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fabd 	bl	8007060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0208 	orr.w	r2, r2, #8
 8006af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0204 	bic.w	r2, r2, #4
 8006b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69d9      	ldr	r1, [r3, #28]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	61da      	str	r2, [r3, #28]
      break;
 8006b18:	e023      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fb11 	bl	8007148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69d9      	ldr	r1, [r3, #28]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	021a      	lsls	r2, r3, #8
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	61da      	str	r2, [r3, #28]
      break;
 8006b5a:	e002      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIM_ConfigClockSource+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e0b4      	b.n	8006cfa <HAL_TIM_ConfigClockSource+0x186>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc8:	d03e      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0xd4>
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bce:	f200 8087 	bhi.w	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	f000 8086 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x172>
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d87f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b70      	cmp	r3, #112	; 0x70
 8006be2:	d01a      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0xa6>
 8006be4:	2b70      	cmp	r3, #112	; 0x70
 8006be6:	d87b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d050      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x11a>
 8006bec:	2b60      	cmp	r3, #96	; 0x60
 8006bee:	d877      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b50      	cmp	r3, #80	; 0x50
 8006bf2:	d03c      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0xfa>
 8006bf4:	2b50      	cmp	r3, #80	; 0x50
 8006bf6:	d873      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d058      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x13a>
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d86f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d064      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d86b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d060      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d867      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d05c      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d05a      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c18:	e062      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6899      	ldr	r1, [r3, #8]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f000 fb5d 	bl	80072e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	609a      	str	r2, [r3, #8]
      break;
 8006c46:	e04f      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6899      	ldr	r1, [r3, #8]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f000 fb46 	bl	80072e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6a:	609a      	str	r2, [r3, #8]
      break;
 8006c6c:	e03c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 faba 	bl	80071f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2150      	movs	r1, #80	; 0x50
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fb13 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e02c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 fad9 	bl	8007252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2160      	movs	r1, #96	; 0x60
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fb03 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e01c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f000 fa9a 	bl	80071f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2140      	movs	r1, #64	; 0x40
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 faf3 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006ccc:	e00c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f000 faea 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006cde:	e003      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce4:	e000      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3b      	ldr	r2, [pc, #236]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3a      	ldr	r2, [pc, #232]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d027      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d023      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a29      	ldr	r2, [pc, #164]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <TIM_Base_SetConfig+0x128>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a27      	ldr	r2, [pc, #156]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a26      	ldr	r2, [pc, #152]	; (8006e84 <TIM_Base_SetConfig+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <TIM_Base_SetConfig+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <TIM_Base_SetConfig+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0xf8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800
 8006e88:	40001800 	.word	0x40001800
 8006e8c:	40001c00 	.word	0x40001c00
 8006e90:	40002000 	.word	0x40002000

08006e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_OC1_SetConfig+0x64>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10c      	bne.n	8006f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f023 0308 	bic.w	r3, r3, #8
 8006efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0304 	bic.w	r3, r3, #4
 8006f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC1_SetConfig+0x8e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a14      	ldr	r2, [pc, #80]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d111      	bne.n	8006f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40010400 	.word	0x40010400

08006f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0210 	bic.w	r2, r3, #16
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0320 	bic.w	r3, r3, #32
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a22      	ldr	r2, [pc, #136]	; (8007058 <TIM_OC2_SetConfig+0xe4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_OC2_SetConfig+0x68>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a21      	ldr	r2, [pc, #132]	; (800705c <TIM_OC2_SetConfig+0xe8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10d      	bne.n	8006ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <TIM_OC2_SetConfig+0xe4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC2_SetConfig+0x94>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <TIM_OC2_SetConfig+0xe8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d113      	bne.n	8007030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40010000 	.word	0x40010000
 800705c:	40010400 	.word	0x40010400

08007060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <TIM_OC3_SetConfig+0xe0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_OC3_SetConfig+0x66>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a20      	ldr	r2, [pc, #128]	; (8007144 <TIM_OC3_SetConfig+0xe4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10d      	bne.n	80070e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a16      	ldr	r2, [pc, #88]	; (8007140 <TIM_OC3_SetConfig+0xe0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC3_SetConfig+0x92>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a15      	ldr	r2, [pc, #84]	; (8007144 <TIM_OC3_SetConfig+0xe4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d113      	bne.n	800711a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40010000 	.word	0x40010000
 8007144:	40010400 	.word	0x40010400

08007148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a12      	ldr	r2, [pc, #72]	; (80071ec <TIM_OC4_SetConfig+0xa4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_OC4_SetConfig+0x68>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <TIM_OC4_SetConfig+0xa8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d109      	bne.n	80071c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40010400 	.word	0x40010400

080071f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0201 	bic.w	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 030a 	bic.w	r3, r3, #10
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0210 	bic.w	r2, r3, #16
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800727c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f043 0307 	orr.w	r3, r3, #7
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	431a      	orrs	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	609a      	str	r2, [r3, #8]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800733c:	2302      	movs	r3, #2
 800733e:	e05a      	b.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a21      	ldr	r2, [pc, #132]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d022      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738c:	d01d      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d018      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1a      	ldr	r2, [pc, #104]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a17      	ldr	r2, [pc, #92]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d10c      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	40010000 	.word	0x40010000
 8007408:	40000400 	.word	0x40000400
 800740c:	40000800 	.word	0x40000800
 8007410:	40000c00 	.word	0x40000c00
 8007414:	40010400 	.word	0x40010400
 8007418:	40014000 	.word	0x40014000
 800741c:	40001800 	.word	0x40001800

08007420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007438:	2302      	movs	r3, #2
 800743a:	e03d      	b.n	80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e03f      	b.n	800757e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fc f836 	bl	8003584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2224      	movs	r2, #36	; 0x24
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800752e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f929 	bl	8007788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b08a      	sub	sp, #40	; 0x28
 800758a:	af02      	add	r7, sp, #8
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	603b      	str	r3, [r7, #0]
 8007592:	4613      	mov	r3, r2
 8007594:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d17c      	bne.n	80076a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_UART_Transmit+0x2c>
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e075      	b.n	80076a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_UART_Transmit+0x3e>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e06e      	b.n	80076a2 <HAL_UART_Transmit+0x11c>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2221      	movs	r2, #33	; 0x21
 80075d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075da:	f7fc f87b 	bl	80036d4 <HAL_GetTick>
 80075de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	88fa      	ldrh	r2, [r7, #6]
 80075ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f4:	d108      	bne.n	8007608 <HAL_UART_Transmit+0x82>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d104      	bne.n	8007608 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e003      	b.n	8007610 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800760c:	2300      	movs	r3, #0
 800760e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007618:	e02a      	b.n	8007670 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2200      	movs	r2, #0
 8007622:	2180      	movs	r1, #128	; 0x80
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f840 	bl	80076aa <UART_WaitOnFlagUntilTimeout>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e036      	b.n	80076a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007648:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	3302      	adds	r3, #2
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	e007      	b.n	8007662 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	3301      	adds	r3, #1
 8007660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1cf      	bne.n	800761a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2200      	movs	r2, #0
 8007682:	2140      	movs	r1, #64	; 0x40
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f810 	bl	80076aa <UART_WaitOnFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e006      	b.n	80076a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	e000      	b.n	80076a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076a0:	2302      	movs	r3, #2
  }
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b090      	sub	sp, #64	; 0x40
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	603b      	str	r3, [r7, #0]
 80076b6:	4613      	mov	r3, r2
 80076b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ba:	e050      	b.n	800775e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d04c      	beq.n	800775e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0x30>
 80076ca:	f7fc f803 	bl	80036d4 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d241      	bcs.n	800775e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	330c      	adds	r3, #12
 80076e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	330c      	adds	r3, #12
 80076f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076fa:	637a      	str	r2, [r7, #52]	; 0x34
 80076fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3314      	adds	r3, #20
 8007714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	613b      	str	r3, [r7, #16]
   return(result);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f023 0301 	bic.w	r3, r3, #1
 8007724:	63bb      	str	r3, [r7, #56]	; 0x38
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3314      	adds	r3, #20
 800772c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800772e:	623a      	str	r2, [r7, #32]
 8007730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	69f9      	ldr	r1, [r7, #28]
 8007734:	6a3a      	ldr	r2, [r7, #32]
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	61bb      	str	r3, [r7, #24]
   return(result);
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e5      	bne.n	800770e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e00f      	b.n	800777e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4013      	ands	r3, r2
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	429a      	cmp	r2, r3
 800776c:	bf0c      	ite	eq
 800776e:	2301      	moveq	r3, #1
 8007770:	2300      	movne	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	429a      	cmp	r2, r3
 800777a:	d09f      	beq.n	80076bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3740      	adds	r7, #64	; 0x40
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800778c:	b0c0      	sub	sp, #256	; 0x100
 800778e:	af00      	add	r7, sp, #0
 8007790:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a4:	68d9      	ldr	r1, [r3, #12]
 80077a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	ea40 0301 	orr.w	r3, r0, r1
 80077b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	431a      	orrs	r2, r3
 80077c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077e0:	f021 010c 	bic.w	r1, r1, #12
 80077e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077ee:	430b      	orrs	r3, r1
 80077f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007802:	6999      	ldr	r1, [r3, #24]
 8007804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	ea40 0301 	orr.w	r3, r0, r1
 800780e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4b8f      	ldr	r3, [pc, #572]	; (8007a54 <UART_SetConfig+0x2cc>)
 8007818:	429a      	cmp	r2, r3
 800781a:	d005      	beq.n	8007828 <UART_SetConfig+0xa0>
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4b8d      	ldr	r3, [pc, #564]	; (8007a58 <UART_SetConfig+0x2d0>)
 8007824:	429a      	cmp	r2, r3
 8007826:	d104      	bne.n	8007832 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007828:	f7fd fcdc 	bl	80051e4 <HAL_RCC_GetPCLK2Freq>
 800782c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007830:	e003      	b.n	800783a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007832:	f7fd fcc3 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8007836:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800783a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007844:	f040 810c 	bne.w	8007a60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800784c:	2200      	movs	r2, #0
 800784e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007852:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007856:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800785a:	4622      	mov	r2, r4
 800785c:	462b      	mov	r3, r5
 800785e:	1891      	adds	r1, r2, r2
 8007860:	65b9      	str	r1, [r7, #88]	; 0x58
 8007862:	415b      	adcs	r3, r3
 8007864:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007866:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800786a:	4621      	mov	r1, r4
 800786c:	eb12 0801 	adds.w	r8, r2, r1
 8007870:	4629      	mov	r1, r5
 8007872:	eb43 0901 	adc.w	r9, r3, r1
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800788a:	4690      	mov	r8, r2
 800788c:	4699      	mov	r9, r3
 800788e:	4623      	mov	r3, r4
 8007890:	eb18 0303 	adds.w	r3, r8, r3
 8007894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007898:	462b      	mov	r3, r5
 800789a:	eb49 0303 	adc.w	r3, r9, r3
 800789e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80078b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80078b6:	460b      	mov	r3, r1
 80078b8:	18db      	adds	r3, r3, r3
 80078ba:	653b      	str	r3, [r7, #80]	; 0x50
 80078bc:	4613      	mov	r3, r2
 80078be:	eb42 0303 	adc.w	r3, r2, r3
 80078c2:	657b      	str	r3, [r7, #84]	; 0x54
 80078c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80078cc:	f7f9 f99c 	bl	8000c08 <__aeabi_uldivmod>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4b61      	ldr	r3, [pc, #388]	; (8007a5c <UART_SetConfig+0x2d4>)
 80078d6:	fba3 2302 	umull	r2, r3, r3, r2
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	011c      	lsls	r4, r3, #4
 80078de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80078ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	1891      	adds	r1, r2, r2
 80078f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80078f8:	415b      	adcs	r3, r3
 80078fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007900:	4641      	mov	r1, r8
 8007902:	eb12 0a01 	adds.w	sl, r2, r1
 8007906:	4649      	mov	r1, r9
 8007908:	eb43 0b01 	adc.w	fp, r3, r1
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007918:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800791c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007920:	4692      	mov	sl, r2
 8007922:	469b      	mov	fp, r3
 8007924:	4643      	mov	r3, r8
 8007926:	eb1a 0303 	adds.w	r3, sl, r3
 800792a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800792e:	464b      	mov	r3, r9
 8007930:	eb4b 0303 	adc.w	r3, fp, r3
 8007934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007944:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007948:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800794c:	460b      	mov	r3, r1
 800794e:	18db      	adds	r3, r3, r3
 8007950:	643b      	str	r3, [r7, #64]	; 0x40
 8007952:	4613      	mov	r3, r2
 8007954:	eb42 0303 	adc.w	r3, r2, r3
 8007958:	647b      	str	r3, [r7, #68]	; 0x44
 800795a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800795e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007962:	f7f9 f951 	bl	8000c08 <__aeabi_uldivmod>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4611      	mov	r1, r2
 800796c:	4b3b      	ldr	r3, [pc, #236]	; (8007a5c <UART_SetConfig+0x2d4>)
 800796e:	fba3 2301 	umull	r2, r3, r3, r1
 8007972:	095b      	lsrs	r3, r3, #5
 8007974:	2264      	movs	r2, #100	; 0x64
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	1acb      	subs	r3, r1, r3
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007982:	4b36      	ldr	r3, [pc, #216]	; (8007a5c <UART_SetConfig+0x2d4>)
 8007984:	fba3 2302 	umull	r2, r3, r3, r2
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007990:	441c      	add	r4, r3
 8007992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007996:	2200      	movs	r2, #0
 8007998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800799c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	1891      	adds	r1, r2, r2
 80079aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80079ac:	415b      	adcs	r3, r3
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079b4:	4641      	mov	r1, r8
 80079b6:	1851      	adds	r1, r2, r1
 80079b8:	6339      	str	r1, [r7, #48]	; 0x30
 80079ba:	4649      	mov	r1, r9
 80079bc:	414b      	adcs	r3, r1
 80079be:	637b      	str	r3, [r7, #52]	; 0x34
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80079cc:	4659      	mov	r1, fp
 80079ce:	00cb      	lsls	r3, r1, #3
 80079d0:	4651      	mov	r1, sl
 80079d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079d6:	4651      	mov	r1, sl
 80079d8:	00ca      	lsls	r2, r1, #3
 80079da:	4610      	mov	r0, r2
 80079dc:	4619      	mov	r1, r3
 80079de:	4603      	mov	r3, r0
 80079e0:	4642      	mov	r2, r8
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079e8:	464b      	mov	r3, r9
 80079ea:	460a      	mov	r2, r1
 80079ec:	eb42 0303 	adc.w	r3, r2, r3
 80079f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a08:	460b      	mov	r3, r1
 8007a0a:	18db      	adds	r3, r3, r3
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0e:	4613      	mov	r3, r2
 8007a10:	eb42 0303 	adc.w	r3, r2, r3
 8007a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a1e:	f7f9 f8f3 	bl	8000c08 <__aeabi_uldivmod>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4b0d      	ldr	r3, [pc, #52]	; (8007a5c <UART_SetConfig+0x2d4>)
 8007a28:	fba3 1302 	umull	r1, r3, r3, r2
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	2164      	movs	r1, #100	; 0x64
 8007a30:	fb01 f303 	mul.w	r3, r1, r3
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	3332      	adds	r3, #50	; 0x32
 8007a3a:	4a08      	ldr	r2, [pc, #32]	; (8007a5c <UART_SetConfig+0x2d4>)
 8007a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	f003 0207 	and.w	r2, r3, #7
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4422      	add	r2, r4
 8007a4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a50:	e106      	b.n	8007c60 <UART_SetConfig+0x4d8>
 8007a52:	bf00      	nop
 8007a54:	40011000 	.word	0x40011000
 8007a58:	40011400 	.word	0x40011400
 8007a5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a64:	2200      	movs	r2, #0
 8007a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a72:	4642      	mov	r2, r8
 8007a74:	464b      	mov	r3, r9
 8007a76:	1891      	adds	r1, r2, r2
 8007a78:	6239      	str	r1, [r7, #32]
 8007a7a:	415b      	adcs	r3, r3
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a82:	4641      	mov	r1, r8
 8007a84:	1854      	adds	r4, r2, r1
 8007a86:	4649      	mov	r1, r9
 8007a88:	eb43 0501 	adc.w	r5, r3, r1
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	00eb      	lsls	r3, r5, #3
 8007a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a9a:	00e2      	lsls	r2, r4, #3
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	461d      	mov	r5, r3
 8007aa0:	4643      	mov	r3, r8
 8007aa2:	18e3      	adds	r3, r4, r3
 8007aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	eb45 0303 	adc.w	r3, r5, r3
 8007aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007abe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ac2:	f04f 0200 	mov.w	r2, #0
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ace:	4629      	mov	r1, r5
 8007ad0:	008b      	lsls	r3, r1, #2
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ad8:	4621      	mov	r1, r4
 8007ada:	008a      	lsls	r2, r1, #2
 8007adc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ae0:	f7f9 f892 	bl	8000c08 <__aeabi_uldivmod>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4b60      	ldr	r3, [pc, #384]	; (8007c6c <UART_SetConfig+0x4e4>)
 8007aea:	fba3 2302 	umull	r2, r3, r3, r2
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	011c      	lsls	r4, r3, #4
 8007af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007afc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b04:	4642      	mov	r2, r8
 8007b06:	464b      	mov	r3, r9
 8007b08:	1891      	adds	r1, r2, r2
 8007b0a:	61b9      	str	r1, [r7, #24]
 8007b0c:	415b      	adcs	r3, r3
 8007b0e:	61fb      	str	r3, [r7, #28]
 8007b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b14:	4641      	mov	r1, r8
 8007b16:	1851      	adds	r1, r2, r1
 8007b18:	6139      	str	r1, [r7, #16]
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	414b      	adcs	r3, r1
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	00cb      	lsls	r3, r1, #3
 8007b30:	4651      	mov	r1, sl
 8007b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b36:	4651      	mov	r1, sl
 8007b38:	00ca      	lsls	r2, r1, #3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	4642      	mov	r2, r8
 8007b42:	189b      	adds	r3, r3, r2
 8007b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b48:	464b      	mov	r3, r9
 8007b4a:	460a      	mov	r2, r1
 8007b4c:	eb42 0303 	adc.w	r3, r2, r3
 8007b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	008b      	lsls	r3, r1, #2
 8007b70:	4641      	mov	r1, r8
 8007b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b76:	4641      	mov	r1, r8
 8007b78:	008a      	lsls	r2, r1, #2
 8007b7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b7e:	f7f9 f843 	bl	8000c08 <__aeabi_uldivmod>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <UART_SetConfig+0x4e4>)
 8007b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	2264      	movs	r2, #100	; 0x64
 8007b92:	fb02 f303 	mul.w	r3, r2, r3
 8007b96:	1acb      	subs	r3, r1, r3
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	3332      	adds	r3, #50	; 0x32
 8007b9c:	4a33      	ldr	r2, [pc, #204]	; (8007c6c <UART_SetConfig+0x4e4>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ba8:	441c      	add	r4, r3
 8007baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bae:	2200      	movs	r2, #0
 8007bb0:	673b      	str	r3, [r7, #112]	; 0x70
 8007bb2:	677a      	str	r2, [r7, #116]	; 0x74
 8007bb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007bb8:	4642      	mov	r2, r8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	1891      	adds	r1, r2, r2
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	415b      	adcs	r3, r3
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bc8:	4641      	mov	r1, r8
 8007bca:	1851      	adds	r1, r2, r1
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	4649      	mov	r1, r9
 8007bd0:	414b      	adcs	r3, r1
 8007bd2:	607b      	str	r3, [r7, #4]
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007be0:	4659      	mov	r1, fp
 8007be2:	00cb      	lsls	r3, r1, #3
 8007be4:	4651      	mov	r1, sl
 8007be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bea:	4651      	mov	r1, sl
 8007bec:	00ca      	lsls	r2, r1, #3
 8007bee:	4610      	mov	r0, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	189b      	adds	r3, r3, r2
 8007bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	460a      	mov	r2, r1
 8007bfe:	eb42 0303 	adc.w	r3, r2, r3
 8007c02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	663b      	str	r3, [r7, #96]	; 0x60
 8007c0e:	667a      	str	r2, [r7, #100]	; 0x64
 8007c10:	f04f 0200 	mov.w	r2, #0
 8007c14:	f04f 0300 	mov.w	r3, #0
 8007c18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	008b      	lsls	r3, r1, #2
 8007c20:	4641      	mov	r1, r8
 8007c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c26:	4641      	mov	r1, r8
 8007c28:	008a      	lsls	r2, r1, #2
 8007c2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c2e:	f7f8 ffeb 	bl	8000c08 <__aeabi_uldivmod>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4b0d      	ldr	r3, [pc, #52]	; (8007c6c <UART_SetConfig+0x4e4>)
 8007c38:	fba3 1302 	umull	r1, r3, r3, r2
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	2164      	movs	r1, #100	; 0x64
 8007c40:	fb01 f303 	mul.w	r3, r1, r3
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	3332      	adds	r3, #50	; 0x32
 8007c4a:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <UART_SetConfig+0x4e4>)
 8007c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	f003 020f 	and.w	r2, r3, #15
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4422      	add	r2, r4
 8007c5e:	609a      	str	r2, [r3, #8]
}
 8007c60:	bf00      	nop
 8007c62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c66:	46bd      	mov	sp, r7
 8007c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c6c:	51eb851f 	.word	0x51eb851f

08007c70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007c74:	4904      	ldr	r1, [pc, #16]	; (8007c88 <MX_FATFS_Init+0x18>)
 8007c76:	4805      	ldr	r0, [pc, #20]	; (8007c8c <MX_FATFS_Init+0x1c>)
 8007c78:	f002 fe84 	bl	800a984 <FATFS_LinkDriver>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <MX_FATFS_Init+0x20>)
 8007c82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007c84:	bf00      	nop
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	200059b0 	.word	0x200059b0
 8007c8c:	20000018 	.word	0x20000018
 8007c90:	200059ac 	.word	0x200059ac

08007c94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007c94:	b480      	push	{r7}
 8007c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007c98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (SD_disk_initialize(pdrv));
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7f9 ffa3 	bl	8001bfc <SD_disk_initialize>
 8007cb6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return (SD_disk_status(pdrv));
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fa f87f 	bl	8001dd0 <SD_disk_status>
 8007cd2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (SD_disk_read(pdrv,buff, sector, count));
 8007cec:	7bf8      	ldrb	r0, [r7, #15]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	f7fa f882 	bl	8001dfc <SD_disk_read>
 8007cf8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return (SD_disk_write(pdrv, buff, sector, count));
 8007d12:	7bf8      	ldrb	r0, [r7, #15]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	f7fa f8d9 	bl	8001ed0 <SD_disk_write>
 8007d1e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	603a      	str	r2, [r7, #0]
 8007d32:	71fb      	strb	r3, [r7, #7]
 8007d34:	460b      	mov	r3, r1
 8007d36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return (SD_disk_ioctl(pdrv, cmd, buff));
 8007d38:	79b9      	ldrb	r1, [r7, #6]
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fa f94a 	bl	8001fd8 <SD_disk_ioctl>
 8007d44:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	4a08      	ldr	r2, [pc, #32]	; (8007d80 <disk_status+0x30>)
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	79fa      	ldrb	r2, [r7, #7]
 8007d68:	4905      	ldr	r1, [pc, #20]	; (8007d80 <disk_status+0x30>)
 8007d6a:	440a      	add	r2, r1
 8007d6c:	7a12      	ldrb	r2, [r2, #8]
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4798      	blx	r3
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	200059dc 	.word	0x200059dc

08007d84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	4a0d      	ldr	r2, [pc, #52]	; (8007dcc <disk_initialize+0x48>)
 8007d96:	5cd3      	ldrb	r3, [r2, r3]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d111      	bne.n	8007dc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	4a0b      	ldr	r2, [pc, #44]	; (8007dcc <disk_initialize+0x48>)
 8007da0:	2101      	movs	r1, #1
 8007da2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	4a09      	ldr	r2, [pc, #36]	; (8007dcc <disk_initialize+0x48>)
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	79fa      	ldrb	r2, [r7, #7]
 8007db2:	4906      	ldr	r1, [pc, #24]	; (8007dcc <disk_initialize+0x48>)
 8007db4:	440a      	add	r2, r1
 8007db6:	7a12      	ldrb	r2, [r2, #8]
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200059dc 	.word	0x200059dc

08007dd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	4a0a      	ldr	r2, [pc, #40]	; (8007e0c <disk_read+0x3c>)
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	689c      	ldr	r4, [r3, #8]
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	4a07      	ldr	r2, [pc, #28]	; (8007e0c <disk_read+0x3c>)
 8007df0:	4413      	add	r3, r2
 8007df2:	7a18      	ldrb	r0, [r3, #8]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	47a0      	blx	r4
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	371c      	adds	r7, #28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd90      	pop	{r4, r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200059dc 	.word	0x200059dc

08007e10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	603b      	str	r3, [r7, #0]
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <disk_write+0x3c>)
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68dc      	ldr	r4, [r3, #12]
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <disk_write+0x3c>)
 8007e30:	4413      	add	r3, r2
 8007e32:	7a18      	ldrb	r0, [r3, #8]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	47a0      	blx	r4
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd90      	pop	{r4, r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	200059dc 	.word	0x200059dc

08007e50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	603a      	str	r2, [r7, #0]
 8007e5a:	71fb      	strb	r3, [r7, #7]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	4a09      	ldr	r2, [pc, #36]	; (8007e88 <disk_ioctl+0x38>)
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	79fa      	ldrb	r2, [r7, #7]
 8007e6e:	4906      	ldr	r1, [pc, #24]	; (8007e88 <disk_ioctl+0x38>)
 8007e70:	440a      	add	r2, r1
 8007e72:	7a10      	ldrb	r0, [r2, #8]
 8007e74:	79b9      	ldrb	r1, [r7, #6]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	200059dc 	.word	0x200059dc

08007e8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3301      	adds	r3, #1
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e9c:	89fb      	ldrh	r3, [r7, #14]
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	b21a      	sxth	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b21b      	sxth	r3, r3
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	b21b      	sxth	r3, r3
 8007eac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007eae:	89fb      	ldrh	r3, [r7, #14]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3303      	adds	r3, #3
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	3202      	adds	r2, #2
 8007ed4:	7812      	ldrb	r2, [r2, #0]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	3201      	adds	r2, #1
 8007ee2:	7812      	ldrb	r2, [r2, #0]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	021b      	lsls	r3, r3, #8
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
	return rv;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	887a      	ldrh	r2, [r7, #2]
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	887b      	ldrh	r3, [r7, #2]
 8007f1c:	0a1b      	lsrs	r3, r3, #8
 8007f1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	887a      	ldrh	r2, [r7, #2]
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	701a      	strb	r2, [r3, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	b2d2      	uxtb	r2, r2
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	0a1b      	lsrs	r3, r3, #8
 8007f52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	607a      	str	r2, [r7, #4]
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	0a1b      	lsrs	r3, r3, #8
 8007f76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	701a      	strb	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00d      	beq.n	8007fc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	1c53      	adds	r3, r2, #1
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	1c59      	adds	r1, r3, #1
 8007fb4:	6179      	str	r1, [r7, #20]
 8007fb6:	7812      	ldrb	r2, [r2, #0]
 8007fb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	607b      	str	r3, [r7, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f1      	bne.n	8007faa <mem_cpy+0x1a>
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007fd2:	b480      	push	{r7}
 8007fd4:	b087      	sub	sp, #28
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	617a      	str	r2, [r7, #20]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	607b      	str	r3, [r7, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f3      	bne.n	8007fe2 <mem_set+0x10>
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	371c      	adds	r7, #28
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	; 0x24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	61fa      	str	r2, [r7, #28]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	4619      	mov	r1, r3
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	61ba      	str	r2, [r7, #24]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	1acb      	subs	r3, r1, r3
 8008034:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3b01      	subs	r3, #1
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <mem_cmp+0x40>
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0eb      	beq.n	8008020 <mem_cmp+0x18>

	return r;
 8008048:	697b      	ldr	r3, [r7, #20]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3724      	adds	r7, #36	; 0x24
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008060:	e002      	b.n	8008068 <chk_chr+0x12>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3301      	adds	r3, #1
 8008066:	607b      	str	r3, [r7, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <chk_chr+0x26>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	4293      	cmp	r3, r2
 800807a:	d1f2      	bne.n	8008062 <chk_chr+0xc>
	return *str;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	781b      	ldrb	r3, [r3, #0]
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <lock_fs+0x22>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	4618      	mov	r0, r3
 80080a0:	f002 fcab 	bl	800a9fa <ff_req_grant>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <lock_fs+0x22>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e000      	b.n	80080b0 <lock_fs+0x24>
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00d      	beq.n	80080e6 <unlock_fs+0x2e>
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	2b0c      	cmp	r3, #12
 80080ce:	d00a      	beq.n	80080e6 <unlock_fs+0x2e>
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	2b0b      	cmp	r3, #11
 80080d4:	d007      	beq.n	80080e6 <unlock_fs+0x2e>
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	2b0f      	cmp	r3, #15
 80080da:	d004      	beq.n	80080e6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f002 fc9f 	bl	800aa24 <ff_rel_grant>
	}
}
 80080e6:	bf00      	nop
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80080fa:	2300      	movs	r3, #0
 80080fc:	60bb      	str	r3, [r7, #8]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	e029      	b.n	8008158 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008104:	4a27      	ldr	r2, [pc, #156]	; (80081a4 <chk_lock+0xb4>)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	4413      	add	r3, r2
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01d      	beq.n	800814e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008112:	4a24      	ldr	r2, [pc, #144]	; (80081a4 <chk_lock+0xb4>)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	011b      	lsls	r3, r3, #4
 8008118:	4413      	add	r3, r2
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d116      	bne.n	8008152 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008124:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <chk_lock+0xb4>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	4413      	add	r3, r2
 800812c:	3304      	adds	r3, #4
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008134:	429a      	cmp	r2, r3
 8008136:	d10c      	bne.n	8008152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008138:	4a1a      	ldr	r2, [pc, #104]	; (80081a4 <chk_lock+0xb4>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	4413      	add	r3, r2
 8008140:	3308      	adds	r3, #8
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008148:	429a      	cmp	r2, r3
 800814a:	d102      	bne.n	8008152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800814c:	e007      	b.n	800815e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800814e:	2301      	movs	r3, #1
 8008150:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3301      	adds	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d9d2      	bls.n	8008104 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d109      	bne.n	8008178 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d102      	bne.n	8008170 <chk_lock+0x80>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b02      	cmp	r3, #2
 800816e:	d101      	bne.n	8008174 <chk_lock+0x84>
 8008170:	2300      	movs	r3, #0
 8008172:	e010      	b.n	8008196 <chk_lock+0xa6>
 8008174:	2312      	movs	r3, #18
 8008176:	e00e      	b.n	8008196 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d108      	bne.n	8008190 <chk_lock+0xa0>
 800817e:	4a09      	ldr	r2, [pc, #36]	; (80081a4 <chk_lock+0xb4>)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	4413      	add	r3, r2
 8008186:	330c      	adds	r3, #12
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818e:	d101      	bne.n	8008194 <chk_lock+0xa4>
 8008190:	2310      	movs	r3, #16
 8008192:	e000      	b.n	8008196 <chk_lock+0xa6>
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	200059bc 	.word	0x200059bc

080081a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081ae:	2300      	movs	r3, #0
 80081b0:	607b      	str	r3, [r7, #4]
 80081b2:	e002      	b.n	80081ba <enq_lock+0x12>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3301      	adds	r3, #1
 80081b8:	607b      	str	r3, [r7, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d806      	bhi.n	80081ce <enq_lock+0x26>
 80081c0:	4a09      	ldr	r2, [pc, #36]	; (80081e8 <enq_lock+0x40>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	4413      	add	r3, r2
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f2      	bne.n	80081b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	bf14      	ite	ne
 80081d4:	2301      	movne	r3, #1
 80081d6:	2300      	moveq	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	200059bc 	.word	0x200059bc

080081ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
 80081fa:	e01f      	b.n	800823c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80081fc:	4a41      	ldr	r2, [pc, #260]	; (8008304 <inc_lock+0x118>)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	4413      	add	r3, r2
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d113      	bne.n	8008236 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800820e:	4a3d      	ldr	r2, [pc, #244]	; (8008304 <inc_lock+0x118>)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	4413      	add	r3, r2
 8008216:	3304      	adds	r3, #4
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800821e:	429a      	cmp	r2, r3
 8008220:	d109      	bne.n	8008236 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008222:	4a38      	ldr	r2, [pc, #224]	; (8008304 <inc_lock+0x118>)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	4413      	add	r3, r2
 800822a:	3308      	adds	r3, #8
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008232:	429a      	cmp	r2, r3
 8008234:	d006      	beq.n	8008244 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3301      	adds	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d9dc      	bls.n	80081fc <inc_lock+0x10>
 8008242:	e000      	b.n	8008246 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008244:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d132      	bne.n	80082b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e002      	b.n	8008258 <inc_lock+0x6c>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d806      	bhi.n	800826c <inc_lock+0x80>
 800825e:	4a29      	ldr	r2, [pc, #164]	; (8008304 <inc_lock+0x118>)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	4413      	add	r3, r2
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1f2      	bne.n	8008252 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d101      	bne.n	8008276 <inc_lock+0x8a>
 8008272:	2300      	movs	r3, #0
 8008274:	e040      	b.n	80082f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4922      	ldr	r1, [pc, #136]	; (8008304 <inc_lock+0x118>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	440b      	add	r3, r1
 8008282:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	491e      	ldr	r1, [pc, #120]	; (8008304 <inc_lock+0x118>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	440b      	add	r3, r1
 8008290:	3304      	adds	r3, #4
 8008292:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	695a      	ldr	r2, [r3, #20]
 8008298:	491a      	ldr	r1, [pc, #104]	; (8008304 <inc_lock+0x118>)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	440b      	add	r3, r1
 80082a0:	3308      	adds	r3, #8
 80082a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80082a4:	4a17      	ldr	r2, [pc, #92]	; (8008304 <inc_lock+0x118>)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	011b      	lsls	r3, r3, #4
 80082aa:	4413      	add	r3, r2
 80082ac:	330c      	adds	r3, #12
 80082ae:	2200      	movs	r2, #0
 80082b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d009      	beq.n	80082cc <inc_lock+0xe0>
 80082b8:	4a12      	ldr	r2, [pc, #72]	; (8008304 <inc_lock+0x118>)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	4413      	add	r3, r2
 80082c0:	330c      	adds	r3, #12
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <inc_lock+0xe0>
 80082c8:	2300      	movs	r3, #0
 80082ca:	e015      	b.n	80082f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d108      	bne.n	80082e4 <inc_lock+0xf8>
 80082d2:	4a0c      	ldr	r2, [pc, #48]	; (8008304 <inc_lock+0x118>)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	4413      	add	r3, r2
 80082da:	330c      	adds	r3, #12
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	3301      	adds	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	e001      	b.n	80082e8 <inc_lock+0xfc>
 80082e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082e8:	4906      	ldr	r1, [pc, #24]	; (8008304 <inc_lock+0x118>)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	440b      	add	r3, r1
 80082f0:	330c      	adds	r3, #12
 80082f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	200059bc 	.word	0x200059bc

08008308 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3b01      	subs	r3, #1
 8008314:	607b      	str	r3, [r7, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d825      	bhi.n	8008368 <dec_lock+0x60>
		n = Files[i].ctr;
 800831c:	4a17      	ldr	r2, [pc, #92]	; (800837c <dec_lock+0x74>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	011b      	lsls	r3, r3, #4
 8008322:	4413      	add	r3, r2
 8008324:	330c      	adds	r3, #12
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800832a:	89fb      	ldrh	r3, [r7, #14]
 800832c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008330:	d101      	bne.n	8008336 <dec_lock+0x2e>
 8008332:	2300      	movs	r3, #0
 8008334:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008336:	89fb      	ldrh	r3, [r7, #14]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <dec_lock+0x3a>
 800833c:	89fb      	ldrh	r3, [r7, #14]
 800833e:	3b01      	subs	r3, #1
 8008340:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008342:	4a0e      	ldr	r2, [pc, #56]	; (800837c <dec_lock+0x74>)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	4413      	add	r3, r2
 800834a:	330c      	adds	r3, #12
 800834c:	89fa      	ldrh	r2, [r7, #14]
 800834e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d105      	bne.n	8008362 <dec_lock+0x5a>
 8008356:	4a09      	ldr	r2, [pc, #36]	; (800837c <dec_lock+0x74>)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	011b      	lsls	r3, r3, #4
 800835c:	4413      	add	r3, r2
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	737b      	strb	r3, [r7, #13]
 8008366:	e001      	b.n	800836c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008368:	2302      	movs	r3, #2
 800836a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800836c:	7b7b      	ldrb	r3, [r7, #13]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	200059bc 	.word	0x200059bc

08008380 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	e010      	b.n	80083b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800838e:	4a0d      	ldr	r2, [pc, #52]	; (80083c4 <clear_lock+0x44>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	4413      	add	r3, r2
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	429a      	cmp	r2, r3
 800839c:	d105      	bne.n	80083aa <clear_lock+0x2a>
 800839e:	4a09      	ldr	r2, [pc, #36]	; (80083c4 <clear_lock+0x44>)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	4413      	add	r3, r2
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3301      	adds	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d9eb      	bls.n	800838e <clear_lock+0xe>
	}
}
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	200059bc 	.word	0x200059bc

080083c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	78db      	ldrb	r3, [r3, #3]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d034      	beq.n	8008446 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7858      	ldrb	r0, [r3, #1]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083ec:	2301      	movs	r3, #1
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	f7ff fd0e 	bl	8007e10 <disk_write>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <sync_window+0x38>
			res = FR_DISK_ERR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]
 80083fe:	e022      	b.n	8008446 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	1ad2      	subs	r2, r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	429a      	cmp	r2, r3
 8008414:	d217      	bcs.n	8008446 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	789b      	ldrb	r3, [r3, #2]
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	e010      	b.n	8008440 <sync_window+0x78>
					wsect += fs->fsize;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4413      	add	r3, r2
 8008426:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7858      	ldrb	r0, [r3, #1]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008432:	2301      	movs	r3, #1
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	f7ff fceb 	bl	8007e10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	3b01      	subs	r3, #1
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d8eb      	bhi.n	800841e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d01b      	beq.n	80084a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff ffad 	bl	80083c8 <sync_window>
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7858      	ldrb	r0, [r3, #1]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008482:	2301      	movs	r3, #1
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	f7ff fca3 	bl	8007dd0 <disk_read>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008490:	f04f 33ff 	mov.w	r3, #4294967295
 8008494:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008496:	2301      	movs	r3, #1
 8008498:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ff87 	bl	80083c8 <sync_window>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d158      	bne.n	8008576 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d148      	bne.n	800855e <sync_fs+0xb2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	791b      	ldrb	r3, [r3, #4]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d144      	bne.n	800855e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3334      	adds	r3, #52	; 0x34
 80084d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084dc:	2100      	movs	r1, #0
 80084de:	4618      	mov	r0, r3
 80084e0:	f7ff fd77 	bl	8007fd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3334      	adds	r3, #52	; 0x34
 80084e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff fd06 	bl	8007f02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3334      	adds	r3, #52	; 0x34
 80084fa:	4921      	ldr	r1, [pc, #132]	; (8008580 <sync_fs+0xd4>)
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff fd1b 	bl	8007f38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3334      	adds	r3, #52	; 0x34
 8008506:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800850a:	491e      	ldr	r1, [pc, #120]	; (8008584 <sync_fs+0xd8>)
 800850c:	4618      	mov	r0, r3
 800850e:	f7ff fd13 	bl	8007f38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3334      	adds	r3, #52	; 0x34
 8008516:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	4619      	mov	r1, r3
 8008520:	4610      	mov	r0, r2
 8008522:	f7ff fd09 	bl	8007f38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3334      	adds	r3, #52	; 0x34
 800852a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f7ff fcff 	bl	8007f38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7858      	ldrb	r0, [r3, #1]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008552:	2301      	movs	r3, #1
 8008554:	f7ff fc5c 	bl	8007e10 <disk_write>
			fs->fsi_flag = 0;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fc72 	bl	8007e50 <disk_ioctl>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <sync_fs+0xca>
 8008572:	2301      	movs	r3, #1
 8008574:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	41615252 	.word	0x41615252
 8008584:	61417272 	.word	0x61417272

08008588 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	3b02      	subs	r3, #2
 8008596:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	3b02      	subs	r3, #2
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d301      	bcc.n	80085a8 <clust2sect+0x20>
 80085a4:	2300      	movs	r3, #0
 80085a6:	e008      	b.n	80085ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	895b      	ldrh	r3, [r3, #10]
 80085ac:	461a      	mov	r2, r3
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	fb03 f202 	mul.w	r2, r3, r2
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	4413      	add	r3, r2
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b086      	sub	sp, #24
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d904      	bls.n	80085e6 <get_fat+0x20>
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d302      	bcc.n	80085ec <get_fat+0x26>
		val = 1;	/* Internal error */
 80085e6:	2301      	movs	r3, #1
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e08f      	b.n	800870c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80085ec:	f04f 33ff 	mov.w	r3, #4294967295
 80085f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d062      	beq.n	80086c0 <get_fat+0xfa>
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	dc7c      	bgt.n	80086f8 <get_fat+0x132>
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d002      	beq.n	8008608 <get_fat+0x42>
 8008602:	2b02      	cmp	r3, #2
 8008604:	d042      	beq.n	800868c <get_fat+0xc6>
 8008606:	e077      	b.n	80086f8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	0a5b      	lsrs	r3, r3, #9
 800861e:	4413      	add	r3, r2
 8008620:	4619      	mov	r1, r3
 8008622:	6938      	ldr	r0, [r7, #16]
 8008624:	f7ff ff14 	bl	8008450 <move_window>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d167      	bne.n	80086fe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	60fa      	str	r2, [r7, #12]
 8008634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4413      	add	r3, r2
 800863c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008640:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	0a5b      	lsrs	r3, r3, #9
 800864a:	4413      	add	r3, r2
 800864c:	4619      	mov	r1, r3
 800864e:	6938      	ldr	r0, [r7, #16]
 8008650:	f7ff fefe 	bl	8008450 <move_window>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d153      	bne.n	8008702 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4413      	add	r3, r2
 8008664:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008668:	021b      	lsls	r3, r3, #8
 800866a:	461a      	mov	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4313      	orrs	r3, r2
 8008670:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <get_fat+0xbc>
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	091b      	lsrs	r3, r3, #4
 8008680:	e002      	b.n	8008688 <get_fat+0xc2>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008688:	617b      	str	r3, [r7, #20]
			break;
 800868a:	e03f      	b.n	800870c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	4413      	add	r3, r2
 8008696:	4619      	mov	r1, r3
 8008698:	6938      	ldr	r0, [r7, #16]
 800869a:	f7ff fed9 	bl	8008450 <move_window>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d130      	bne.n	8008706 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80086b2:	4413      	add	r3, r2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fbe9 	bl	8007e8c <ld_word>
 80086ba:	4603      	mov	r3, r0
 80086bc:	617b      	str	r3, [r7, #20]
			break;
 80086be:	e025      	b.n	800870c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	09db      	lsrs	r3, r3, #7
 80086c8:	4413      	add	r3, r2
 80086ca:	4619      	mov	r1, r3
 80086cc:	6938      	ldr	r0, [r7, #16]
 80086ce:	f7ff febf 	bl	8008450 <move_window>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d118      	bne.n	800870a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086e6:	4413      	add	r3, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff fbe7 	bl	8007ebc <ld_dword>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80086f4:	617b      	str	r3, [r7, #20]
			break;
 80086f6:	e009      	b.n	800870c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80086f8:	2301      	movs	r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e006      	b.n	800870c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086fe:	bf00      	nop
 8008700:	e004      	b.n	800870c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008702:	bf00      	nop
 8008704:	e002      	b.n	800870c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800870a:	bf00      	nop
		}
	}

	return val;
 800870c:	697b      	ldr	r3, [r7, #20]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008716:	b590      	push	{r4, r7, lr}
 8008718:	b089      	sub	sp, #36	; 0x24
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008722:	2302      	movs	r3, #2
 8008724:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b01      	cmp	r3, #1
 800872a:	f240 80d9 	bls.w	80088e0 <put_fat+0x1ca>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	f080 80d3 	bcs.w	80088e0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b03      	cmp	r3, #3
 8008740:	f000 8096 	beq.w	8008870 <put_fat+0x15a>
 8008744:	2b03      	cmp	r3, #3
 8008746:	f300 80cb 	bgt.w	80088e0 <put_fat+0x1ca>
 800874a:	2b01      	cmp	r3, #1
 800874c:	d002      	beq.n	8008754 <put_fat+0x3e>
 800874e:	2b02      	cmp	r3, #2
 8008750:	d06e      	beq.n	8008830 <put_fat+0x11a>
 8008752:	e0c5      	b.n	80088e0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	4413      	add	r3, r2
 8008760:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	0a5b      	lsrs	r3, r3, #9
 800876a:	4413      	add	r3, r2
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fe6e 	bl	8008450 <move_window>
 8008774:	4603      	mov	r3, r0
 8008776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008778:	7ffb      	ldrb	r3, [r7, #31]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f040 80a9 	bne.w	80088d2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	1c59      	adds	r1, r3, #1
 800878a:	61b9      	str	r1, [r7, #24]
 800878c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008790:	4413      	add	r3, r2
 8008792:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00d      	beq.n	80087ba <put_fat+0xa4>
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	b25b      	sxtb	r3, r3
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	b25a      	sxtb	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	b25b      	sxtb	r3, r3
 80087b2:	4313      	orrs	r3, r2
 80087b4:	b25b      	sxtb	r3, r3
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	e001      	b.n	80087be <put_fat+0xa8>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	0a5b      	lsrs	r3, r3, #9
 80087d0:	4413      	add	r3, r2
 80087d2:	4619      	mov	r1, r3
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff fe3b 	bl	8008450 <move_window>
 80087da:	4603      	mov	r3, r0
 80087dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087de:	7ffb      	ldrb	r3, [r7, #31]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d178      	bne.n	80088d6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f0:	4413      	add	r3, r2
 80087f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <put_fat+0xf0>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	091b      	lsrs	r3, r3, #4
 8008802:	b2db      	uxtb	r3, r3
 8008804:	e00e      	b.n	8008824 <put_fat+0x10e>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	b25b      	sxtb	r3, r3
 800880c:	f023 030f 	bic.w	r3, r3, #15
 8008810:	b25a      	sxtb	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	0a1b      	lsrs	r3, r3, #8
 8008816:	b25b      	sxtb	r3, r3
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	b25b      	sxtb	r3, r3
 800881e:	4313      	orrs	r3, r2
 8008820:	b25b      	sxtb	r3, r3
 8008822:	b2db      	uxtb	r3, r3
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2201      	movs	r2, #1
 800882c:	70da      	strb	r2, [r3, #3]
			break;
 800882e:	e057      	b.n	80088e0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	4413      	add	r3, r2
 800883a:	4619      	mov	r1, r3
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fe07 	bl	8008450 <move_window>
 8008842:	4603      	mov	r3, r0
 8008844:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008846:	7ffb      	ldrb	r3, [r7, #31]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d146      	bne.n	80088da <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800885a:	4413      	add	r3, r2
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	b292      	uxth	r2, r2
 8008860:	4611      	mov	r1, r2
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fb4d 	bl	8007f02 <st_word>
			fs->wflag = 1;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2201      	movs	r2, #1
 800886c:	70da      	strb	r2, [r3, #3]
			break;
 800886e:	e037      	b.n	80088e0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	09db      	lsrs	r3, r3, #7
 8008878:	4413      	add	r3, r2
 800887a:	4619      	mov	r1, r3
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7ff fde7 	bl	8008450 <move_window>
 8008882:	4603      	mov	r3, r0
 8008884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008886:	7ffb      	ldrb	r3, [r7, #31]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d128      	bne.n	80088de <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80088a0:	4413      	add	r3, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff fb0a 	bl	8007ebc <ld_dword>
 80088a8:	4603      	mov	r3, r0
 80088aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80088ae:	4323      	orrs	r3, r4
 80088b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80088c0:	4413      	add	r3, r2
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff fb37 	bl	8007f38 <st_dword>
			fs->wflag = 1;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	70da      	strb	r2, [r3, #3]
			break;
 80088d0:	e006      	b.n	80088e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80088d2:	bf00      	nop
 80088d4:	e004      	b.n	80088e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80088d6:	bf00      	nop
 80088d8:	e002      	b.n	80088e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80088da:	bf00      	nop
 80088dc:	e000      	b.n	80088e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80088de:	bf00      	nop
		}
	}
	return res;
 80088e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3724      	adds	r7, #36	; 0x24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd90      	pop	{r4, r7, pc}

080088ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b088      	sub	sp, #32
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d904      	bls.n	8008910 <remove_chain+0x26>
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	429a      	cmp	r2, r3
 800890e:	d301      	bcc.n	8008914 <remove_chain+0x2a>
 8008910:	2302      	movs	r3, #2
 8008912:	e04b      	b.n	80089ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00c      	beq.n	8008934 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800891a:	f04f 32ff 	mov.w	r2, #4294967295
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	69b8      	ldr	r0, [r7, #24]
 8008922:	f7ff fef8 	bl	8008716 <put_fat>
 8008926:	4603      	mov	r3, r0
 8008928:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800892a:	7ffb      	ldrb	r3, [r7, #31]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <remove_chain+0x4a>
 8008930:	7ffb      	ldrb	r3, [r7, #31]
 8008932:	e03b      	b.n	80089ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7ff fe45 	bl	80085c6 <get_fat>
 800893c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d031      	beq.n	80089a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d101      	bne.n	800894e <remove_chain+0x64>
 800894a:	2302      	movs	r3, #2
 800894c:	e02e      	b.n	80089ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d101      	bne.n	800895a <remove_chain+0x70>
 8008956:	2301      	movs	r3, #1
 8008958:	e028      	b.n	80089ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800895a:	2200      	movs	r2, #0
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	69b8      	ldr	r0, [r7, #24]
 8008960:	f7ff fed9 	bl	8008716 <put_fat>
 8008964:	4603      	mov	r3, r0
 8008966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008968:	7ffb      	ldrb	r3, [r7, #31]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <remove_chain+0x88>
 800896e:	7ffb      	ldrb	r3, [r7, #31]
 8008970:	e01c      	b.n	80089ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	695a      	ldr	r2, [r3, #20]
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	3b02      	subs	r3, #2
 800897c:	429a      	cmp	r2, r3
 800897e:	d20b      	bcs.n	8008998 <remove_chain+0xae>
			fs->free_clst++;
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	791b      	ldrb	r3, [r3, #4]
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d3c6      	bcc.n	8008934 <remove_chain+0x4a>
 80089a6:	e000      	b.n	80089aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80089a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3720      	adds	r7, #32
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10d      	bne.n	80089e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d004      	beq.n	80089e0 <create_chain+0x2c>
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d31b      	bcc.n	8008a18 <create_chain+0x64>
 80089e0:	2301      	movs	r3, #1
 80089e2:	61bb      	str	r3, [r7, #24]
 80089e4:	e018      	b.n	8008a18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff fdec 	bl	80085c6 <get_fat>
 80089ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d801      	bhi.n	80089fa <create_chain+0x46>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e070      	b.n	8008adc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d101      	bne.n	8008a06 <create_chain+0x52>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	e06a      	b.n	8008adc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d201      	bcs.n	8008a14 <create_chain+0x60>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	e063      	b.n	8008adc <create_chain+0x128>
		scl = clst;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d307      	bcc.n	8008a3c <create_chain+0x88>
				ncl = 2;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a30:	69fa      	ldr	r2, [r7, #28]
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d901      	bls.n	8008a3c <create_chain+0x88>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e04f      	b.n	8008adc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a3c:	69f9      	ldr	r1, [r7, #28]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff fdc1 	bl	80085c6 <get_fat>
 8008a44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00e      	beq.n	8008a6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d003      	beq.n	8008a5a <create_chain+0xa6>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a58:	d101      	bne.n	8008a5e <create_chain+0xaa>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	e03e      	b.n	8008adc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d1da      	bne.n	8008a1c <create_chain+0x68>
 8008a66:	2300      	movs	r3, #0
 8008a68:	e038      	b.n	8008adc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008a6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a70:	69f9      	ldr	r1, [r7, #28]
 8008a72:	6938      	ldr	r0, [r7, #16]
 8008a74:	f7ff fe4f 	bl	8008716 <put_fat>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <create_chain+0xe2>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d006      	beq.n	8008a96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6938      	ldr	r0, [r7, #16]
 8008a8e:	f7ff fe42 	bl	8008716 <put_fat>
 8008a92:	4603      	mov	r3, r0
 8008a94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d116      	bne.n	8008aca <create_chain+0x116>
		fs->last_clst = ncl;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	69fa      	ldr	r2, [r7, #28]
 8008aa0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	695a      	ldr	r2, [r3, #20]
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	3b02      	subs	r3, #2
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d804      	bhi.n	8008aba <create_chain+0x106>
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	1e5a      	subs	r2, r3, #1
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	791b      	ldrb	r3, [r3, #4]
 8008abe:	f043 0301 	orr.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	711a      	strb	r2, [r3, #4]
 8008ac8:	e007      	b.n	8008ada <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d102      	bne.n	8008ad6 <create_chain+0x122>
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad4:	e000      	b.n	8008ad8 <create_chain+0x124>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ada:	69fb      	ldr	r3, [r7, #28]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3720      	adds	r7, #32
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	3304      	adds	r3, #4
 8008afa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	0a5b      	lsrs	r3, r3, #9
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	8952      	ldrh	r2, [r2, #10]
 8008b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	1d1a      	adds	r2, r3, #4
 8008b0e:	613a      	str	r2, [r7, #16]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <clmt_clust+0x3a>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e010      	b.n	8008b40 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d307      	bcc.n	8008b36 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	3304      	adds	r3, #4
 8008b32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b34:	e7e9      	b.n	8008b0a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008b36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	4413      	add	r3, r2
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	371c      	adds	r7, #28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b62:	d204      	bcs.n	8008b6e <dir_sdi+0x22>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	f003 031f 	and.w	r3, r3, #31
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e063      	b.n	8008c3a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d106      	bne.n	8008b92 <dir_sdi+0x46>
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d902      	bls.n	8008b92 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10c      	bne.n	8008bb2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	8912      	ldrh	r2, [r2, #8]
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d301      	bcc.n	8008ba8 <dir_sdi+0x5c>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	e048      	b.n	8008c3a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	61da      	str	r2, [r3, #28]
 8008bb0:	e029      	b.n	8008c06 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	895b      	ldrh	r3, [r3, #10]
 8008bb6:	025b      	lsls	r3, r3, #9
 8008bb8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bba:	e019      	b.n	8008bf0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6979      	ldr	r1, [r7, #20]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff fd00 	bl	80085c6 <get_fat>
 8008bc6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d101      	bne.n	8008bd4 <dir_sdi+0x88>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e032      	b.n	8008c3a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d904      	bls.n	8008be4 <dir_sdi+0x98>
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d301      	bcc.n	8008be8 <dir_sdi+0x9c>
 8008be4:	2302      	movs	r3, #2
 8008be6:	e028      	b.n	8008c3a <dir_sdi+0xee>
			ofs -= csz;
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d2e1      	bcs.n	8008bbc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008bf8:	6979      	ldr	r1, [r7, #20]
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f7ff fcc4 	bl	8008588 <clust2sect>
 8008c00:	4602      	mov	r2, r0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <dir_sdi+0xcc>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e010      	b.n	8008c3a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	69da      	ldr	r2, [r3, #28]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	0a5b      	lsrs	r3, r3, #9
 8008c20:	441a      	add	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c32:	441a      	add	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	3320      	adds	r3, #32
 8008c58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <dir_next+0x28>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c68:	d301      	bcc.n	8008c6e <dir_next+0x2c>
 8008c6a:	2304      	movs	r3, #4
 8008c6c:	e0aa      	b.n	8008dc4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 8098 	bne.w	8008daa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	8912      	ldrh	r2, [r2, #8]
 8008c94:	4293      	cmp	r3, r2
 8008c96:	f0c0 8088 	bcc.w	8008daa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	61da      	str	r2, [r3, #28]
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	e08f      	b.n	8008dc4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	0a5b      	lsrs	r3, r3, #9
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	8952      	ldrh	r2, [r2, #10]
 8008cac:	3a01      	subs	r2, #1
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d17a      	bne.n	8008daa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7ff fc82 	bl	80085c6 <get_fat>
 8008cc2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d801      	bhi.n	8008cce <dir_next+0x8c>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e07a      	b.n	8008dc4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d101      	bne.n	8008cda <dir_next+0x98>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e074      	b.n	8008dc4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d358      	bcc.n	8008d96 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d104      	bne.n	8008cf4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	61da      	str	r2, [r3, #28]
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	e067      	b.n	8008dc4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	f7ff fe59 	bl	80089b4 <create_chain>
 8008d02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <dir_next+0xcc>
 8008d0a:	2307      	movs	r3, #7
 8008d0c:	e05a      	b.n	8008dc4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d101      	bne.n	8008d18 <dir_next+0xd6>
 8008d14:	2302      	movs	r3, #2
 8008d16:	e055      	b.n	8008dc4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1e:	d101      	bne.n	8008d24 <dir_next+0xe2>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e04f      	b.n	8008dc4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff fb4f 	bl	80083c8 <sync_window>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <dir_next+0xf2>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e047      	b.n	8008dc4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3334      	adds	r3, #52	; 0x34
 8008d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff f947 	bl	8007fd2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d44:	2300      	movs	r3, #0
 8008d46:	613b      	str	r3, [r7, #16]
 8008d48:	6979      	ldr	r1, [r7, #20]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff fc1c 	bl	8008588 <clust2sect>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	631a      	str	r2, [r3, #48]	; 0x30
 8008d56:	e012      	b.n	8008d7e <dir_next+0x13c>
						fs->wflag = 1;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7ff fb32 	bl	80083c8 <sync_window>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <dir_next+0x12c>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e02a      	b.n	8008dc4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	3301      	adds	r3, #1
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	895b      	ldrh	r3, [r3, #10]
 8008d82:	461a      	mov	r2, r3
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d3e6      	bcc.n	8008d58 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad2      	subs	r2, r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008d9c:	6979      	ldr	r1, [r7, #20]
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f7ff fbf2 	bl	8008588 <clust2sect>
 8008da4:	4602      	mov	r2, r0
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	441a      	add	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008ddc:	2100      	movs	r1, #0
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff feb4 	bl	8008b4c <dir_sdi>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d12b      	bne.n	8008e46 <dir_alloc+0x7a>
		n = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	4619      	mov	r1, r3
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff fb29 	bl	8008450 <move_window>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11d      	bne.n	8008e44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2be5      	cmp	r3, #229	; 0xe5
 8008e10:	d004      	beq.n	8008e1c <dir_alloc+0x50>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d107      	bne.n	8008e2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d102      	bne.n	8008e30 <dir_alloc+0x64>
 8008e2a:	e00c      	b.n	8008e46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008e30:	2101      	movs	r1, #1
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ff05 	bl	8008c42 <dir_next>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0d7      	beq.n	8008df2 <dir_alloc+0x26>
 8008e42:	e000      	b.n	8008e46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008e44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d101      	bne.n	8008e50 <dir_alloc+0x84>
 8008e4c:	2307      	movs	r3, #7
 8008e4e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	331a      	adds	r3, #26
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff f80f 	bl	8007e8c <ld_word>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d109      	bne.n	8008e8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff f804 	bl	8007e8c <ld_word>
 8008e84:	4603      	mov	r3, r0
 8008e86:	041b      	lsls	r3, r3, #16
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	331a      	adds	r3, #26
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	b292      	uxth	r2, r2
 8008eac:	4611      	mov	r1, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff f827 	bl	8007f02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d109      	bne.n	8008ed0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f103 0214 	add.w	r2, r3, #20
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	0c1b      	lsrs	r3, r3, #16
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	f7ff f819 	bl	8007f02 <st_word>
	}
}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008ee2:	2304      	movs	r3, #4
 8008ee4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008eec:	e03c      	b.n	8008f68 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6938      	ldr	r0, [r7, #16]
 8008ef6:	f7ff faab 	bl	8008450 <move_window>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d136      	bne.n	8008f72 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008f12:	2304      	movs	r3, #4
 8008f14:	75fb      	strb	r3, [r7, #23]
 8008f16:	e031      	b.n	8008f7c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	330b      	adds	r3, #11
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f24:	73bb      	strb	r3, [r7, #14]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7bba      	ldrb	r2, [r7, #14]
 8008f2a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	2be5      	cmp	r3, #229	; 0xe5
 8008f30:	d011      	beq.n	8008f56 <dir_read+0x7e>
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b2e      	cmp	r3, #46	; 0x2e
 8008f36:	d00e      	beq.n	8008f56 <dir_read+0x7e>
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2b0f      	cmp	r3, #15
 8008f3c:	d00b      	beq.n	8008f56 <dir_read+0x7e>
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	f023 0320 	bic.w	r3, r3, #32
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	bf0c      	ite	eq
 8008f48:	2301      	moveq	r3, #1
 8008f4a:	2300      	movne	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00f      	beq.n	8008f76 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008f56:	2100      	movs	r1, #0
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff fe72 	bl	8008c42 <dir_next>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d108      	bne.n	8008f7a <dir_read+0xa2>
	while (dp->sect) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1be      	bne.n	8008eee <dir_read+0x16>
 8008f70:	e004      	b.n	8008f7c <dir_read+0xa4>
		if (res != FR_OK) break;
 8008f72:	bf00      	nop
 8008f74:	e002      	b.n	8008f7c <dir_read+0xa4>
				break;
 8008f76:	bf00      	nop
 8008f78:	e000      	b.n	8008f7c <dir_read+0xa4>
		if (res != FR_OK) break;
 8008f7a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <dir_read+0xb0>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	61da      	str	r2, [r3, #28]
	return res;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff fdd2 	bl	8008b4c <dir_sdi>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <dir_find+0x24>
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	e03e      	b.n	8009034 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6938      	ldr	r0, [r7, #16]
 8008fbe:	f7ff fa47 	bl	8008450 <move_window>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d12f      	bne.n	800902c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <dir_find+0x4e>
 8008fda:	2304      	movs	r3, #4
 8008fdc:	75fb      	strb	r3, [r7, #23]
 8008fde:	e028      	b.n	8009032 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	330b      	adds	r3, #11
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	330b      	adds	r3, #11
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <dir_find+0x86>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a18      	ldr	r0, [r3, #32]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3324      	adds	r3, #36	; 0x24
 800900a:	220b      	movs	r2, #11
 800900c:	4619      	mov	r1, r3
 800900e:	f7fe fffb 	bl	8008008 <mem_cmp>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009018:	2100      	movs	r1, #0
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff fe11 	bl	8008c42 <dir_next>
 8009020:	4603      	mov	r3, r0
 8009022:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0c5      	beq.n	8008fb6 <dir_find+0x24>
 800902a:	e002      	b.n	8009032 <dir_find+0xa0>
		if (res != FR_OK) break;
 800902c:	bf00      	nop
 800902e:	e000      	b.n	8009032 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009030:	bf00      	nop

	return res;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800904a:	2101      	movs	r1, #1
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff febd 	bl	8008dcc <dir_alloc>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d11c      	bne.n	8009096 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	4619      	mov	r1, r3
 8009062:	68b8      	ldr	r0, [r7, #8]
 8009064:	f7ff f9f4 	bl	8008450 <move_window>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d111      	bne.n	8009096 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	2220      	movs	r2, #32
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe ffa9 	bl	8007fd2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a18      	ldr	r0, [r3, #32]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3324      	adds	r3, #36	; 0x24
 8009088:	220b      	movs	r2, #11
 800908a:	4619      	mov	r1, r3
 800908c:	f7fe ff80 	bl	8007f90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2201      	movs	r2, #1
 8009094:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009096:	7bfb      	ldrb	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	4619      	mov	r1, r3
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7ff f9cb 	bl	8008450 <move_window>
 80090ba:	4603      	mov	r3, r0
 80090bc:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d106      	bne.n	80090d2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	22e5      	movs	r2, #229	; 0xe5
 80090ca:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80090d2:	7afb      	ldrb	r3, [r7, #11]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2200      	movs	r2, #0
 80090ea:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d04e      	beq.n	8009192 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	613b      	str	r3, [r7, #16]
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80090fc:	e021      	b.n	8009142 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1a      	ldr	r2, [r3, #32]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	1c59      	adds	r1, r3, #1
 8009106:	6179      	str	r1, [r7, #20]
 8009108:	4413      	add	r3, r2
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	2b20      	cmp	r3, #32
 8009112:	d100      	bne.n	8009116 <get_fileinfo+0x3a>
 8009114:	e015      	b.n	8009142 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	2b05      	cmp	r3, #5
 800911a:	d101      	bne.n	8009120 <get_fileinfo+0x44>
 800911c:	23e5      	movs	r3, #229	; 0xe5
 800911e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2b09      	cmp	r3, #9
 8009124:	d106      	bne.n	8009134 <get_fileinfo+0x58>
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	613a      	str	r2, [r7, #16]
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	4413      	add	r3, r2
 8009130:	222e      	movs	r2, #46	; 0x2e
 8009132:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	613a      	str	r2, [r7, #16]
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	4413      	add	r3, r2
 800913e:	7bfa      	ldrb	r2, [r7, #15]
 8009140:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b0a      	cmp	r3, #10
 8009146:	d9da      	bls.n	80090fe <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	4413      	add	r3, r2
 800914e:	3309      	adds	r3, #9
 8009150:	2200      	movs	r2, #0
 8009152:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	7ada      	ldrb	r2, [r3, #11]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	331c      	adds	r3, #28
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fea9 	bl	8007ebc <ld_dword>
 800916a:	4602      	mov	r2, r0
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	3316      	adds	r3, #22
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe fea0 	bl	8007ebc <ld_dword>
 800917c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	b29a      	uxth	r2, r3
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	80da      	strh	r2, [r3, #6]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	b29a      	uxth	r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	809a      	strh	r2, [r3, #4]
 8009190:	e000      	b.n	8009194 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009192:	bf00      	nop
}
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3324      	adds	r3, #36	; 0x24
 80091b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80091b2:	220b      	movs	r2, #11
 80091b4:	2120      	movs	r1, #32
 80091b6:	68b8      	ldr	r0, [r7, #8]
 80091b8:	f7fe ff0b 	bl	8007fd2 <mem_set>
	si = i = 0; ni = 8;
 80091bc:	2300      	movs	r3, #0
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	61fb      	str	r3, [r7, #28]
 80091c4:	2308      	movs	r3, #8
 80091c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	61fa      	str	r2, [r7, #28]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4413      	add	r3, r2
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80091d6:	7efb      	ldrb	r3, [r7, #27]
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d94e      	bls.n	800927a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80091dc:	7efb      	ldrb	r3, [r7, #27]
 80091de:	2b2f      	cmp	r3, #47	; 0x2f
 80091e0:	d006      	beq.n	80091f0 <create_name+0x54>
 80091e2:	7efb      	ldrb	r3, [r7, #27]
 80091e4:	2b5c      	cmp	r3, #92	; 0x5c
 80091e6:	d110      	bne.n	800920a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80091e8:	e002      	b.n	80091f0 <create_name+0x54>
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3301      	adds	r3, #1
 80091ee:	61fb      	str	r3, [r7, #28]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	4413      	add	r3, r2
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b2f      	cmp	r3, #47	; 0x2f
 80091fa:	d0f6      	beq.n	80091ea <create_name+0x4e>
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b5c      	cmp	r3, #92	; 0x5c
 8009206:	d0f0      	beq.n	80091ea <create_name+0x4e>
			break;
 8009208:	e038      	b.n	800927c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800920a:	7efb      	ldrb	r3, [r7, #27]
 800920c:	2b2e      	cmp	r3, #46	; 0x2e
 800920e:	d003      	beq.n	8009218 <create_name+0x7c>
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	429a      	cmp	r2, r3
 8009216:	d30c      	bcc.n	8009232 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b0b      	cmp	r3, #11
 800921c:	d002      	beq.n	8009224 <create_name+0x88>
 800921e:	7efb      	ldrb	r3, [r7, #27]
 8009220:	2b2e      	cmp	r3, #46	; 0x2e
 8009222:	d001      	beq.n	8009228 <create_name+0x8c>
 8009224:	2306      	movs	r3, #6
 8009226:	e044      	b.n	80092b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009228:	2308      	movs	r3, #8
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	230b      	movs	r3, #11
 800922e:	617b      	str	r3, [r7, #20]
			continue;
 8009230:	e022      	b.n	8009278 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009232:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009236:	2b00      	cmp	r3, #0
 8009238:	da04      	bge.n	8009244 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800923a:	7efb      	ldrb	r3, [r7, #27]
 800923c:	3b80      	subs	r3, #128	; 0x80
 800923e:	4a1f      	ldr	r2, [pc, #124]	; (80092bc <create_name+0x120>)
 8009240:	5cd3      	ldrb	r3, [r2, r3]
 8009242:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009244:	7efb      	ldrb	r3, [r7, #27]
 8009246:	4619      	mov	r1, r3
 8009248:	481d      	ldr	r0, [pc, #116]	; (80092c0 <create_name+0x124>)
 800924a:	f7fe ff04 	bl	8008056 <chk_chr>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <create_name+0xbc>
 8009254:	2306      	movs	r3, #6
 8009256:	e02c      	b.n	80092b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009258:	7efb      	ldrb	r3, [r7, #27]
 800925a:	2b60      	cmp	r3, #96	; 0x60
 800925c:	d905      	bls.n	800926a <create_name+0xce>
 800925e:	7efb      	ldrb	r3, [r7, #27]
 8009260:	2b7a      	cmp	r3, #122	; 0x7a
 8009262:	d802      	bhi.n	800926a <create_name+0xce>
 8009264:	7efb      	ldrb	r3, [r7, #27]
 8009266:	3b20      	subs	r3, #32
 8009268:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	613a      	str	r2, [r7, #16]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	4413      	add	r3, r2
 8009274:	7efa      	ldrb	r2, [r7, #27]
 8009276:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009278:	e7a6      	b.n	80091c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800927a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	441a      	add	r2, r3
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <create_name+0xf4>
 800928c:	2306      	movs	r3, #6
 800928e:	e010      	b.n	80092b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2be5      	cmp	r3, #229	; 0xe5
 8009296:	d102      	bne.n	800929e <create_name+0x102>
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2205      	movs	r2, #5
 800929c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800929e:	7efb      	ldrb	r3, [r7, #27]
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d801      	bhi.n	80092a8 <create_name+0x10c>
 80092a4:	2204      	movs	r2, #4
 80092a6:	e000      	b.n	80092aa <create_name+0x10e>
 80092a8:	2200      	movs	r2, #0
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	330b      	adds	r3, #11
 80092ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80092b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3720      	adds	r7, #32
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	080109ec 	.word	0x080109ec
 80092c0:	08010980 	.word	0x08010980

080092c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80092d8:	e002      	b.n	80092e0 <follow_path+0x1c>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b2f      	cmp	r3, #47	; 0x2f
 80092e6:	d0f8      	beq.n	80092da <follow_path+0x16>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b5c      	cmp	r3, #92	; 0x5c
 80092ee:	d0f4      	beq.n	80092da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2200      	movs	r2, #0
 80092f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b1f      	cmp	r3, #31
 80092fc:	d80a      	bhi.n	8009314 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2280      	movs	r2, #128	; 0x80
 8009302:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009306:	2100      	movs	r1, #0
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff fc1f 	bl	8008b4c <dir_sdi>
 800930e:	4603      	mov	r3, r0
 8009310:	75fb      	strb	r3, [r7, #23]
 8009312:	e043      	b.n	800939c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009314:	463b      	mov	r3, r7
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff ff3f 	bl	800919c <create_name>
 800931e:	4603      	mov	r3, r0
 8009320:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d134      	bne.n	8009392 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff fe32 	bl	8008f92 <dir_find>
 800932e:	4603      	mov	r3, r0
 8009330:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009338:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	2b04      	cmp	r3, #4
 8009344:	d127      	bne.n	8009396 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009346:	7afb      	ldrb	r3, [r7, #11]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d122      	bne.n	8009396 <follow_path+0xd2>
 8009350:	2305      	movs	r3, #5
 8009352:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009354:	e01f      	b.n	8009396 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	d11c      	bne.n	800939a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	799b      	ldrb	r3, [r3, #6]
 8009364:	f003 0310 	and.w	r3, r3, #16
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800936c:	2305      	movs	r3, #5
 800936e:	75fb      	strb	r3, [r7, #23]
 8009370:	e014      	b.n	800939c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009380:	4413      	add	r3, r2
 8009382:	4619      	mov	r1, r3
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f7ff fd68 	bl	8008e5a <ld_clust>
 800938a:	4602      	mov	r2, r0
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009390:	e7c0      	b.n	8009314 <follow_path+0x50>
			if (res != FR_OK) break;
 8009392:	bf00      	nop
 8009394:	e002      	b.n	800939c <follow_path+0xd8>
				break;
 8009396:	bf00      	nop
 8009398:	e000      	b.n	800939c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800939a:	bf00      	nop
			}
		}
	}

	return res;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b087      	sub	sp, #28
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80093ae:	f04f 33ff 	mov.w	r3, #4294967295
 80093b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d031      	beq.n	8009420 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	617b      	str	r3, [r7, #20]
 80093c2:	e002      	b.n	80093ca <get_ldnumber+0x24>
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	3301      	adds	r3, #1
 80093c8:	617b      	str	r3, [r7, #20]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d903      	bls.n	80093da <get_ldnumber+0x34>
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b3a      	cmp	r3, #58	; 0x3a
 80093d8:	d1f4      	bne.n	80093c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b3a      	cmp	r3, #58	; 0x3a
 80093e0:	d11c      	bne.n	800941c <get_ldnumber+0x76>
			tp = *path;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	60fa      	str	r2, [r7, #12]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	3b30      	subs	r3, #48	; 0x30
 80093f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	d80e      	bhi.n	8009418 <get_ldnumber+0x72>
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d10a      	bne.n	8009418 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d107      	bne.n	8009418 <get_ldnumber+0x72>
					vol = (int)i;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	3301      	adds	r3, #1
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	e002      	b.n	8009422 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800941c:	2300      	movs	r3, #0
 800941e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009420:	693b      	ldr	r3, [r7, #16]
}
 8009422:	4618      	mov	r0, r3
 8009424:	371c      	adds	r7, #28
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
	...

08009430 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	70da      	strb	r2, [r3, #3]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff f800 	bl	8008450 <move_window>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <check_fs+0x2a>
 8009456:	2304      	movs	r3, #4
 8009458:	e038      	b.n	80094cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3334      	adds	r3, #52	; 0x34
 800945e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fd12 	bl	8007e8c <ld_word>
 8009468:	4603      	mov	r3, r0
 800946a:	461a      	mov	r2, r3
 800946c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009470:	429a      	cmp	r2, r3
 8009472:	d001      	beq.n	8009478 <check_fs+0x48>
 8009474:	2303      	movs	r3, #3
 8009476:	e029      	b.n	80094cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800947e:	2be9      	cmp	r3, #233	; 0xe9
 8009480:	d009      	beq.n	8009496 <check_fs+0x66>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009488:	2beb      	cmp	r3, #235	; 0xeb
 800948a:	d11e      	bne.n	80094ca <check_fs+0x9a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009492:	2b90      	cmp	r3, #144	; 0x90
 8009494:	d119      	bne.n	80094ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3334      	adds	r3, #52	; 0x34
 800949a:	3336      	adds	r3, #54	; 0x36
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fd0d 	bl	8007ebc <ld_dword>
 80094a2:	4603      	mov	r3, r0
 80094a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094a8:	4a0a      	ldr	r2, [pc, #40]	; (80094d4 <check_fs+0xa4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d101      	bne.n	80094b2 <check_fs+0x82>
 80094ae:	2300      	movs	r3, #0
 80094b0:	e00c      	b.n	80094cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3334      	adds	r3, #52	; 0x34
 80094b6:	3352      	adds	r3, #82	; 0x52
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe fcff 	bl	8007ebc <ld_dword>
 80094be:	4603      	mov	r3, r0
 80094c0:	4a05      	ldr	r2, [pc, #20]	; (80094d8 <check_fs+0xa8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d101      	bne.n	80094ca <check_fs+0x9a>
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80094ca:	2302      	movs	r3, #2
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	00544146 	.word	0x00544146
 80094d8:	33544146 	.word	0x33544146

080094dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b096      	sub	sp, #88	; 0x58
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2200      	movs	r2, #0
 80094ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff ff58 	bl	80093a6 <get_ldnumber>
 80094f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80094f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	da01      	bge.n	8009502 <find_volume+0x26>
 80094fe:	230b      	movs	r3, #11
 8009500:	e235      	b.n	800996e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009502:	4aa5      	ldr	r2, [pc, #660]	; (8009798 <find_volume+0x2bc>)
 8009504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800950a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <find_volume+0x3a>
 8009512:	230c      	movs	r3, #12
 8009514:	e22b      	b.n	800996e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009516:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009518:	f7fe fdb8 	bl	800808c <lock_fs>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <find_volume+0x4a>
 8009522:	230f      	movs	r3, #15
 8009524:	e223      	b.n	800996e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800952a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	f023 0301 	bic.w	r3, r3, #1
 8009532:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01a      	beq.n	8009572 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fc05 	bl	8007d50 <disk_status>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800954c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10c      	bne.n	8009572 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d007      	beq.n	800956e <find_volume+0x92>
 800955e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800956a:	230a      	movs	r3, #10
 800956c:	e1ff      	b.n	800996e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800956e:	2300      	movs	r3, #0
 8009570:	e1fd      	b.n	800996e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957a:	b2da      	uxtb	r2, r3
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	785b      	ldrb	r3, [r3, #1]
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe fbfd 	bl	8007d84 <disk_initialize>
 800958a:	4603      	mov	r3, r0
 800958c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800959c:	2303      	movs	r3, #3
 800959e:	e1e6      	b.n	800996e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <find_volume+0xda>
 80095a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80095b2:	230a      	movs	r3, #10
 80095b4:	e1db      	b.n	800996e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80095ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095be:	f7ff ff37 	bl	8009430 <check_fs>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80095c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d149      	bne.n	8009664 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80095d0:	2300      	movs	r3, #0
 80095d2:	643b      	str	r3, [r7, #64]	; 0x40
 80095d4:	e01e      	b.n	8009614 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80095d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80095e4:	4413      	add	r3, r2
 80095e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	3304      	adds	r3, #4
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d006      	beq.n	8009600 <find_volume+0x124>
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	3308      	adds	r3, #8
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fc60 	bl	8007ebc <ld_dword>
 80095fc:	4602      	mov	r2, r0
 80095fe:	e000      	b.n	8009602 <find_volume+0x126>
 8009600:	2200      	movs	r2, #0
 8009602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	3358      	adds	r3, #88	; 0x58
 8009608:	443b      	add	r3, r7
 800960a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800960e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009610:	3301      	adds	r3, #1
 8009612:	643b      	str	r3, [r7, #64]	; 0x40
 8009614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009616:	2b03      	cmp	r3, #3
 8009618:	d9dd      	bls.n	80095d6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800961a:	2300      	movs	r3, #0
 800961c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800961e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <find_volume+0x14e>
 8009624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009626:	3b01      	subs	r3, #1
 8009628:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800962a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	3358      	adds	r3, #88	; 0x58
 8009630:	443b      	add	r3, r7
 8009632:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009636:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <find_volume+0x16e>
 800963e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009640:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009642:	f7ff fef5 	bl	8009430 <check_fs>
 8009646:	4603      	mov	r3, r0
 8009648:	e000      	b.n	800964c <find_volume+0x170>
 800964a:	2303      	movs	r3, #3
 800964c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009654:	2b01      	cmp	r3, #1
 8009656:	d905      	bls.n	8009664 <find_volume+0x188>
 8009658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800965a:	3301      	adds	r3, #1
 800965c:	643b      	str	r3, [r7, #64]	; 0x40
 800965e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009660:	2b03      	cmp	r3, #3
 8009662:	d9e2      	bls.n	800962a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009668:	2b04      	cmp	r3, #4
 800966a:	d101      	bne.n	8009670 <find_volume+0x194>
 800966c:	2301      	movs	r3, #1
 800966e:	e17e      	b.n	800996e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009674:	2b01      	cmp	r3, #1
 8009676:	d901      	bls.n	800967c <find_volume+0x1a0>
 8009678:	230d      	movs	r3, #13
 800967a:	e178      	b.n	800996e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800967c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967e:	3334      	adds	r3, #52	; 0x34
 8009680:	330b      	adds	r3, #11
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fc02 	bl	8007e8c <ld_word>
 8009688:	4603      	mov	r3, r0
 800968a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800968e:	d001      	beq.n	8009694 <find_volume+0x1b8>
 8009690:	230d      	movs	r3, #13
 8009692:	e16c      	b.n	800996e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	3334      	adds	r3, #52	; 0x34
 8009698:	3316      	adds	r3, #22
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fbf6 	bl	8007e8c <ld_word>
 80096a0:	4603      	mov	r3, r0
 80096a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80096a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <find_volume+0x1dc>
 80096aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ac:	3334      	adds	r3, #52	; 0x34
 80096ae:	3324      	adds	r3, #36	; 0x24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fe fc03 	bl	8007ebc <ld_dword>
 80096b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096bc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	789b      	ldrb	r3, [r3, #2]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d005      	beq.n	80096dc <find_volume+0x200>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	789b      	ldrb	r3, [r3, #2]
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d001      	beq.n	80096dc <find_volume+0x200>
 80096d8:	230d      	movs	r3, #13
 80096da:	e148      	b.n	800996e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	789b      	ldrb	r3, [r3, #2]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e4:	fb02 f303 	mul.w	r3, r2, r3
 80096e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80096ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	895b      	ldrh	r3, [r3, #10]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d008      	beq.n	8009710 <find_volume+0x234>
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	895b      	ldrh	r3, [r3, #10]
 8009702:	461a      	mov	r2, r3
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	895b      	ldrh	r3, [r3, #10]
 8009708:	3b01      	subs	r3, #1
 800970a:	4013      	ands	r3, r2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <find_volume+0x238>
 8009710:	230d      	movs	r3, #13
 8009712:	e12c      	b.n	800996e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	3334      	adds	r3, #52	; 0x34
 8009718:	3311      	adds	r3, #17
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fbb6 	bl	8007e8c <ld_word>
 8009720:	4603      	mov	r3, r0
 8009722:	461a      	mov	r2, r3
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	891b      	ldrh	r3, [r3, #8]
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	b29b      	uxth	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <find_volume+0x25e>
 8009736:	230d      	movs	r3, #13
 8009738:	e119      	b.n	800996e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	3334      	adds	r3, #52	; 0x34
 800973e:	3313      	adds	r3, #19
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fba3 	bl	8007e8c <ld_word>
 8009746:	4603      	mov	r3, r0
 8009748:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800974a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974c:	2b00      	cmp	r3, #0
 800974e:	d106      	bne.n	800975e <find_volume+0x282>
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	3334      	adds	r3, #52	; 0x34
 8009754:	3320      	adds	r3, #32
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe fbb0 	bl	8007ebc <ld_dword>
 800975c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	3334      	adds	r3, #52	; 0x34
 8009762:	330e      	adds	r3, #14
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe fb91 	bl	8007e8c <ld_word>
 800976a:	4603      	mov	r3, r0
 800976c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800976e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <find_volume+0x29c>
 8009774:	230d      	movs	r3, #13
 8009776:	e0fa      	b.n	800996e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009778:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800977a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977c:	4413      	add	r3, r2
 800977e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009780:	8912      	ldrh	r2, [r2, #8]
 8009782:	0912      	lsrs	r2, r2, #4
 8009784:	b292      	uxth	r2, r2
 8009786:	4413      	add	r3, r2
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800978a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	429a      	cmp	r2, r3
 8009790:	d204      	bcs.n	800979c <find_volume+0x2c0>
 8009792:	230d      	movs	r3, #13
 8009794:	e0eb      	b.n	800996e <find_volume+0x492>
 8009796:	bf00      	nop
 8009798:	200059b4 	.word	0x200059b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800979c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a4:	8952      	ldrh	r2, [r2, #10]
 80097a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80097aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <find_volume+0x2da>
 80097b2:	230d      	movs	r3, #13
 80097b4:	e0db      	b.n	800996e <find_volume+0x492>
		fmt = FS_FAT32;
 80097b6:	2303      	movs	r3, #3
 80097b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d802      	bhi.n	80097cc <find_volume+0x2f0>
 80097c6:	2302      	movs	r3, #2
 80097c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d802      	bhi.n	80097dc <find_volume+0x300>
 80097d6:	2301      	movs	r3, #1
 80097d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	1c9a      	adds	r2, r3, #2
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097e8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80097ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80097ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ee:	441a      	add	r2, r3
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80097f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	441a      	add	r2, r3
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80097fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009802:	2b03      	cmp	r3, #3
 8009804:	d11e      	bne.n	8009844 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	3334      	adds	r3, #52	; 0x34
 800980a:	332a      	adds	r3, #42	; 0x2a
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fb3d 	bl	8007e8c <ld_word>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <find_volume+0x340>
 8009818:	230d      	movs	r3, #13
 800981a:	e0a8      	b.n	800996e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	891b      	ldrh	r3, [r3, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <find_volume+0x34c>
 8009824:	230d      	movs	r3, #13
 8009826:	e0a2      	b.n	800996e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	3334      	adds	r3, #52	; 0x34
 800982c:	332c      	adds	r3, #44	; 0x2c
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe fb44 	bl	8007ebc <ld_dword>
 8009834:	4602      	mov	r2, r0
 8009836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009838:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	647b      	str	r3, [r7, #68]	; 0x44
 8009842:	e01f      	b.n	8009884 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <find_volume+0x374>
 800984c:	230d      	movs	r3, #13
 800984e:	e08e      	b.n	800996e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009856:	441a      	add	r2, r3
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800985c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009860:	2b02      	cmp	r3, #2
 8009862:	d103      	bne.n	800986c <find_volume+0x390>
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	e00a      	b.n	8009882 <find_volume+0x3a6>
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	699a      	ldr	r2, [r3, #24]
 8009870:	4613      	mov	r3, r2
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	4413      	add	r3, r2
 8009876:	085a      	lsrs	r2, r3, #1
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009882:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	69da      	ldr	r2, [r3, #28]
 8009888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800988a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800988e:	0a5b      	lsrs	r3, r3, #9
 8009890:	429a      	cmp	r2, r3
 8009892:	d201      	bcs.n	8009898 <find_volume+0x3bc>
 8009894:	230d      	movs	r3, #13
 8009896:	e06a      	b.n	800996e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	f04f 32ff 	mov.w	r2, #4294967295
 800989e:	615a      	str	r2, [r3, #20]
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	695a      	ldr	r2, [r3, #20]
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	2280      	movs	r2, #128	; 0x80
 80098ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80098ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d149      	bne.n	800994a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80098b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b8:	3334      	adds	r3, #52	; 0x34
 80098ba:	3330      	adds	r3, #48	; 0x30
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe fae5 	bl	8007e8c <ld_word>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d140      	bne.n	800994a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80098c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ca:	3301      	adds	r3, #1
 80098cc:	4619      	mov	r1, r3
 80098ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098d0:	f7fe fdbe 	bl	8008450 <move_window>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d137      	bne.n	800994a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	2200      	movs	r2, #0
 80098de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	3334      	adds	r3, #52	; 0x34
 80098e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe facf 	bl	8007e8c <ld_word>
 80098ee:	4603      	mov	r3, r0
 80098f0:	461a      	mov	r2, r3
 80098f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d127      	bne.n	800994a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	3334      	adds	r3, #52	; 0x34
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fe fadc 	bl	8007ebc <ld_dword>
 8009904:	4603      	mov	r3, r0
 8009906:	4a1c      	ldr	r2, [pc, #112]	; (8009978 <find_volume+0x49c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d11e      	bne.n	800994a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800990c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990e:	3334      	adds	r3, #52	; 0x34
 8009910:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009914:	4618      	mov	r0, r3
 8009916:	f7fe fad1 	bl	8007ebc <ld_dword>
 800991a:	4603      	mov	r3, r0
 800991c:	4a17      	ldr	r2, [pc, #92]	; (800997c <find_volume+0x4a0>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d113      	bne.n	800994a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009924:	3334      	adds	r3, #52	; 0x34
 8009926:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fac6 	bl	8007ebc <ld_dword>
 8009930:	4602      	mov	r2, r0
 8009932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009934:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	3334      	adds	r3, #52	; 0x34
 800993a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe fabc 	bl	8007ebc <ld_dword>
 8009944:	4602      	mov	r2, r0
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009950:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009952:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <find_volume+0x4a4>)
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	3301      	adds	r3, #1
 8009958:	b29a      	uxth	r2, r3
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <find_volume+0x4a4>)
 800995c:	801a      	strh	r2, [r3, #0]
 800995e:	4b08      	ldr	r3, [pc, #32]	; (8009980 <find_volume+0x4a4>)
 8009960:	881a      	ldrh	r2, [r3, #0]
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009966:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009968:	f7fe fd0a 	bl	8008380 <clear_lock>
#endif
	return FR_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3758      	adds	r7, #88	; 0x58
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	41615252 	.word	0x41615252
 800997c:	61417272 	.word	0x61417272
 8009980:	200059b8 	.word	0x200059b8

08009984 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800998e:	2309      	movs	r3, #9
 8009990:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d02e      	beq.n	80099f6 <validate+0x72>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d02a      	beq.n	80099f6 <validate+0x72>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d025      	beq.n	80099f6 <validate+0x72>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	889a      	ldrh	r2, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	88db      	ldrh	r3, [r3, #6]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d11e      	bne.n	80099f6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe fb65 	bl	800808c <lock_fs>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d014      	beq.n	80099f2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe f9be 	bl	8007d50 <disk_status>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d102      	bne.n	80099e4 <validate+0x60>
				res = FR_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
 80099e2:	e008      	b.n	80099f6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe fb64 	bl	80080b8 <unlock_fs>
 80099f0:	e001      	b.n	80099f6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80099f2:	230f      	movs	r3, #15
 80099f4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <validate+0x7e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	e000      	b.n	8009a04 <validate+0x80>
 8009a02:	2300      	movs	r3, #0
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	6013      	str	r3, [r2, #0]
	return res;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a26:	f107 0310 	add.w	r3, r7, #16
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fcbb 	bl	80093a6 <get_ldnumber>
 8009a30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	da01      	bge.n	8009a3c <f_mount+0x28>
 8009a38:	230b      	movs	r3, #11
 8009a3a:	e048      	b.n	8009ace <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a3c:	4a26      	ldr	r2, [pc, #152]	; (8009ad8 <f_mount+0xc4>)
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00f      	beq.n	8009a6c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a4c:	69b8      	ldr	r0, [r7, #24]
 8009a4e:	f7fe fc97 	bl	8008380 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 ffc3 	bl	800a9e2 <ff_del_syncobj>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <f_mount+0x52>
 8009a62:	2302      	movs	r3, #2
 8009a64:	e033      	b.n	8009ace <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00f      	beq.n	8009a92 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	330c      	adds	r3, #12
 8009a80:	4619      	mov	r1, r3
 8009a82:	4610      	mov	r0, r2
 8009a84:	f000 ff8d 	bl	800a9a2 <ff_cre_syncobj>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <f_mount+0x7e>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	e01d      	b.n	8009ace <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4910      	ldr	r1, [pc, #64]	; (8009ad8 <f_mount+0xc4>)
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <f_mount+0x94>
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d001      	beq.n	8009aac <f_mount+0x98>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e010      	b.n	8009ace <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009aac:	f107 010c 	add.w	r1, r7, #12
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fd10 	bl	80094dc <find_volume>
 8009abc:	4603      	mov	r3, r0
 8009abe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	7dfa      	ldrb	r2, [r7, #23]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe faf6 	bl	80080b8 <unlock_fs>
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	200059b4 	.word	0x200059b4

08009adc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b098      	sub	sp, #96	; 0x60
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <f_open+0x18>
 8009af0:	2309      	movs	r3, #9
 8009af2:	e1b4      	b.n	8009e5e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009afa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009afc:	79fa      	ldrb	r2, [r7, #7]
 8009afe:	f107 0110 	add.w	r1, r7, #16
 8009b02:	f107 0308 	add.w	r3, r7, #8
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff fce8 	bl	80094dc <find_volume>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009b12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f040 8191 	bne.w	8009e3e <f_open+0x362>
		dj.obj.fs = fs;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	f107 0314 	add.w	r3, r7, #20
 8009b26:	4611      	mov	r1, r2
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff fbcb 	bl	80092c4 <follow_path>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d11a      	bne.n	8009b72 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b40:	b25b      	sxtb	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	da03      	bge.n	8009b4e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009b46:	2306      	movs	r3, #6
 8009b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b4c:	e011      	b.n	8009b72 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bf14      	ite	ne
 8009b58:	2301      	movne	r3, #1
 8009b5a:	2300      	moveq	r3, #0
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f107 0314 	add.w	r3, r7, #20
 8009b64:	4611      	mov	r1, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fac2 	bl	80080f0 <chk_lock>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	f003 031c 	and.w	r3, r3, #28
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d07f      	beq.n	8009c7c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d017      	beq.n	8009bb4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009b84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d10e      	bne.n	8009baa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009b8c:	f7fe fb0c 	bl	80081a8 <enq_lock>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d006      	beq.n	8009ba4 <f_open+0xc8>
 8009b96:	f107 0314 	add.w	r3, r7, #20
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff fa4e 	bl	800903c <dir_register>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	e000      	b.n	8009ba6 <f_open+0xca>
 8009ba4:	2312      	movs	r3, #18
 8009ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009baa:	79fb      	ldrb	r3, [r7, #7]
 8009bac:	f043 0308 	orr.w	r3, r3, #8
 8009bb0:	71fb      	strb	r3, [r7, #7]
 8009bb2:	e010      	b.n	8009bd6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009bb4:	7ebb      	ldrb	r3, [r7, #26]
 8009bb6:	f003 0311 	and.w	r3, r3, #17
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <f_open+0xea>
					res = FR_DENIED;
 8009bbe:	2307      	movs	r3, #7
 8009bc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009bc4:	e007      	b.n	8009bd6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <f_open+0xfa>
 8009bd0:	2308      	movs	r3, #8
 8009bd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d168      	bne.n	8009cb0 <f_open+0x1d4>
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d063      	beq.n	8009cb0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009be8:	f7fe f854 	bl	8007c94 <get_fattime>
 8009bec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	330e      	adds	r3, #14
 8009bf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe f99f 	bl	8007f38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfc:	3316      	adds	r3, #22
 8009bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe f999 	bl	8007f38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c08:	330b      	adds	r3, #11
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c12:	4611      	mov	r1, r2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff f920 	bl	8008e5a <ld_clust>
 8009c1a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c20:	2200      	movs	r2, #0
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff f938 	bl	8008e98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2a:	331c      	adds	r3, #28
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe f982 	bl	8007f38 <st_dword>
					fs->wflag = 1;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	2201      	movs	r2, #1
 8009c38:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d037      	beq.n	8009cb0 <f_open+0x1d4>
						dw = fs->winsect;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c44:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009c46:	f107 0314 	add.w	r3, r7, #20
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fe4b 	bl	80088ea <remove_chain>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d126      	bne.n	8009cb0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe fbf2 	bl	8008450 <move_window>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c76:	3a01      	subs	r2, #1
 8009c78:	611a      	str	r2, [r3, #16]
 8009c7a:	e019      	b.n	8009cb0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d115      	bne.n	8009cb0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009c84:	7ebb      	ldrb	r3, [r7, #26]
 8009c86:	f003 0310 	and.w	r3, r3, #16
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009c8e:	2304      	movs	r3, #4
 8009c90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c94:	e00c      	b.n	8009cb0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d007      	beq.n	8009cb0 <f_open+0x1d4>
 8009ca0:	7ebb      	ldrb	r3, [r7, #26]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <f_open+0x1d4>
						res = FR_DENIED;
 8009caa:	2307      	movs	r3, #7
 8009cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d128      	bne.n	8009d0a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	f003 0308 	and.w	r3, r3, #8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	f023 0301 	bic.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bf14      	ite	ne
 8009ce2:	2301      	movne	r3, #1
 8009ce4:	2300      	moveq	r3, #0
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f107 0314 	add.w	r3, r7, #20
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe fa7b 	bl	80081ec <inc_lock>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <f_open+0x22e>
 8009d04:	2302      	movs	r3, #2
 8009d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f040 8095 	bne.w	8009e3e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d18:	4611      	mov	r1, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff f89d 	bl	8008e5a <ld_clust>
 8009d20:	4602      	mov	r2, r0
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d28:	331c      	adds	r3, #28
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe f8c6 	bl	8007ebc <ld_dword>
 8009d30:	4602      	mov	r2, r0
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	88da      	ldrh	r2, [r3, #6]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	79fa      	ldrb	r2, [r7, #7]
 8009d4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3330      	adds	r3, #48	; 0x30
 8009d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe f930 	bl	8007fd2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	f003 0320 	and.w	r3, r3, #32
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d060      	beq.n	8009e3e <f_open+0x362>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d05c      	beq.n	8009e3e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	895b      	ldrh	r3, [r3, #10]
 8009d90:	025b      	lsls	r3, r3, #9
 8009d92:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8009da0:	e016      	b.n	8009dd0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe fc0d 	bl	80085c6 <get_fat>
 8009dac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d802      	bhi.n	8009dba <f_open+0x2de>
 8009db4:	2302      	movs	r3, #2
 8009db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc0:	d102      	bne.n	8009dc8 <f_open+0x2ec>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	657b      	str	r3, [r7, #84]	; 0x54
 8009dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d103      	bne.n	8009de0 <f_open+0x304>
 8009dd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d8e0      	bhi.n	8009da2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009de4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d127      	bne.n	8009e3e <f_open+0x362>
 8009dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d022      	beq.n	8009e3e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe fbc3 	bl	8008588 <clust2sect>
 8009e02:	6478      	str	r0, [r7, #68]	; 0x44
 8009e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d103      	bne.n	8009e12 <f_open+0x336>
						res = FR_INT_ERR;
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009e10:	e015      	b.n	8009e3e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e14:	0a5a      	lsrs	r2, r3, #9
 8009e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e18:	441a      	add	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	7858      	ldrb	r0, [r3, #1]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1a      	ldr	r2, [r3, #32]
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	f7fd ffcf 	bl	8007dd0 <disk_read>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <f_open+0x362>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <f_open+0x370>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fe f92f 	bl	80080b8 <unlock_fs>
 8009e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3760      	adds	r7, #96	; 0x60
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b08c      	sub	sp, #48	; 0x30
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	60f8      	str	r0, [r7, #12]
 8009e6e:	60b9      	str	r1, [r7, #8]
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f107 0210 	add.w	r2, r7, #16
 8009e84:	4611      	mov	r1, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff fd7c 	bl	8009984 <validate>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d107      	bne.n	8009eaa <f_write+0x44>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	7d5b      	ldrb	r3, [r3, #21]
 8009e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d009      	beq.n	8009ebe <f_write+0x58>
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe f900 	bl	80080b8 <unlock_fs>
 8009eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ebc:	e173      	b.n	800a1a6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	7d1b      	ldrb	r3, [r3, #20]
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d106      	bne.n	8009ed8 <f_write+0x72>
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2107      	movs	r1, #7
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe f8f2 	bl	80080b8 <unlock_fs>
 8009ed4:	2307      	movs	r3, #7
 8009ed6:	e166      	b.n	800a1a6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	699a      	ldr	r2, [r3, #24]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	441a      	add	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	f080 814b 	bcs.w	800a180 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	43db      	mvns	r3, r3
 8009ef0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009ef2:	e145      	b.n	800a180 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f040 8101 	bne.w	800a104 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	0a5b      	lsrs	r3, r3, #9
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	8952      	ldrh	r2, [r2, #10]
 8009f0c:	3a01      	subs	r2, #1
 8009f0e:	4013      	ands	r3, r2
 8009f10:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d14d      	bne.n	8009fb4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10c      	bne.n	8009f3a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d11a      	bne.n	8009f62 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe fd3f 	bl	80089b4 <create_chain>
 8009f36:	62b8      	str	r0, [r7, #40]	; 0x28
 8009f38:	e013      	b.n	8009f62 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	4619      	mov	r1, r3
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f7fe fdcb 	bl	8008ae4 <clmt_clust>
 8009f4e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009f50:	e007      	b.n	8009f62 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f7fe fd2a 	bl	80089b4 <create_chain>
 8009f60:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 8110 	beq.w	800a18a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d109      	bne.n	8009f84 <f_write+0x11e>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2202      	movs	r2, #2
 8009f74:	755a      	strb	r2, [r3, #21]
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2102      	movs	r1, #2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe f89c 	bl	80080b8 <unlock_fs>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e110      	b.n	800a1a6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8a:	d109      	bne.n	8009fa0 <f_write+0x13a>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	755a      	strb	r2, [r3, #21]
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2101      	movs	r1, #1
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe f88e 	bl	80080b8 <unlock_fs>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e102      	b.n	800a1a6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fa4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <f_write+0x14e>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7d1b      	ldrb	r3, [r3, #20]
 8009fb8:	b25b      	sxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	da1d      	bge.n	8009ffa <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	7858      	ldrb	r0, [r3, #1]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a1a      	ldr	r2, [r3, #32]
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f7fd ff1f 	bl	8007e10 <disk_write>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d009      	beq.n	8009fec <f_write+0x186>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	755a      	strb	r2, [r3, #21]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe f868 	bl	80080b8 <unlock_fs>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e0dc      	b.n	800a1a6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	7d1b      	ldrb	r3, [r3, #20]
 8009ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f7fe fac0 	bl	8008588 <clust2sect>
 800a008:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d109      	bne.n	800a024 <f_write+0x1be>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2202      	movs	r2, #2
 800a014:	755a      	strb	r2, [r3, #21]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	2102      	movs	r1, #2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fe f84c 	bl	80080b8 <unlock_fs>
 800a020:	2302      	movs	r3, #2
 800a022:	e0c0      	b.n	800a1a6 <f_write+0x340>
			sect += csect;
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	4413      	add	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	0a5b      	lsrs	r3, r3, #9
 800a030:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d041      	beq.n	800a0bc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	4413      	add	r3, r2
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	8952      	ldrh	r2, [r2, #10]
 800a042:	4293      	cmp	r3, r2
 800a044:	d905      	bls.n	800a052 <f_write+0x1ec>
					cc = fs->csize - csect;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	895b      	ldrh	r3, [r3, #10]
 800a04a:	461a      	mov	r2, r3
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	7858      	ldrb	r0, [r3, #1]
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	69f9      	ldr	r1, [r7, #28]
 800a05c:	f7fd fed8 	bl	8007e10 <disk_write>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d009      	beq.n	800a07a <f_write+0x214>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	755a      	strb	r2, [r3, #21]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2101      	movs	r1, #1
 800a070:	4618      	mov	r0, r3
 800a072:	f7fe f821 	bl	80080b8 <unlock_fs>
 800a076:	2301      	movs	r3, #1
 800a078:	e095      	b.n	800a1a6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1a      	ldr	r2, [r3, #32]
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	6a3a      	ldr	r2, [r7, #32]
 800a084:	429a      	cmp	r2, r3
 800a086:	d915      	bls.n	800a0b4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a1a      	ldr	r2, [r3, #32]
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	025b      	lsls	r3, r3, #9
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	4413      	add	r3, r2
 800a09c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	f7fd ff75 	bl	8007f90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	7d1b      	ldrb	r3, [r3, #20]
 800a0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	025b      	lsls	r3, r3, #9
 800a0b8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a0ba:	e044      	b.n	800a146 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d01b      	beq.n	800a0fe <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d215      	bcs.n	800a0fe <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	7858      	ldrb	r0, [r3, #1]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0dc:	2301      	movs	r3, #1
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	f7fd fe76 	bl	8007dd0 <disk_read>
 800a0e4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d009      	beq.n	800a0fe <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	755a      	strb	r2, [r3, #21]
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fd ffdf 	bl	80080b8 <unlock_fs>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e053      	b.n	800a1a6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a110:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	429a      	cmp	r2, r3
 800a118:	d901      	bls.n	800a11e <f_write+0x2b8>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12c:	4413      	add	r3, r2
 800a12e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a130:	69f9      	ldr	r1, [r7, #28]
 800a132:	4618      	mov	r0, r3
 800a134:	f7fd ff2c 	bl	8007f90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	7d1b      	ldrb	r3, [r3, #20]
 800a13c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a140:	b2da      	uxtb	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a146:	69fa      	ldr	r2, [r7, #28]
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	4413      	add	r3, r2
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	699a      	ldr	r2, [r3, #24]
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	441a      	add	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	619a      	str	r2, [r3, #24]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	429a      	cmp	r2, r3
 800a164:	bf38      	it	cc
 800a166:	461a      	movcc	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	60da      	str	r2, [r3, #12]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	441a      	add	r2, r3
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	f47f aeb6 	bne.w	8009ef4 <f_write+0x8e>
 800a188:	e000      	b.n	800a18c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a18a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	7d1b      	ldrb	r3, [r3, #20]
 800a190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a194:	b2da      	uxtb	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2100      	movs	r1, #0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fd ff8a 	bl	80080b8 <unlock_fs>
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3730      	adds	r7, #48	; 0x30
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b086      	sub	sp, #24
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f107 0208 	add.w	r2, r7, #8
 800a1bc:	4611      	mov	r1, r2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff fbe0 	bl	8009984 <validate>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d16d      	bne.n	800a2aa <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7d1b      	ldrb	r3, [r3, #20]
 800a1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d067      	beq.n	800a2aa <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	7d1b      	ldrb	r3, [r3, #20]
 800a1de:	b25b      	sxtb	r3, r3
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	da1a      	bge.n	800a21a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	7858      	ldrb	r0, [r3, #1]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1a      	ldr	r2, [r3, #32]
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	f7fd fe0c 	bl	8007e10 <disk_write>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d006      	beq.n	800a20c <f_sync+0x5e>
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2101      	movs	r1, #1
 800a202:	4618      	mov	r0, r3
 800a204:	f7fd ff58 	bl	80080b8 <unlock_fs>
 800a208:	2301      	movs	r3, #1
 800a20a:	e055      	b.n	800a2b8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	7d1b      	ldrb	r3, [r3, #20]
 800a210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a214:	b2da      	uxtb	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a21a:	f7fd fd3b 	bl	8007c94 <get_fattime>
 800a21e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	4619      	mov	r1, r3
 800a228:	4610      	mov	r0, r2
 800a22a:	f7fe f911 	bl	8008450 <move_window>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d138      	bne.n	800a2aa <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	330b      	adds	r3, #11
 800a242:	781a      	ldrb	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	330b      	adds	r3, #11
 800a248:	f042 0220 	orr.w	r2, r2, #32
 800a24c:	b2d2      	uxtb	r2, r2
 800a24e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	461a      	mov	r2, r3
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	f7fe fe1c 	bl	8008e98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f103 021c 	add.w	r2, r3, #28
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	4619      	mov	r1, r3
 800a26c:	4610      	mov	r0, r2
 800a26e:	f7fd fe63 	bl	8007f38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3316      	adds	r3, #22
 800a276:	6939      	ldr	r1, [r7, #16]
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fd fe5d 	bl	8007f38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3312      	adds	r3, #18
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f7fd fe3c 	bl	8007f02 <st_word>
					fs->wflag = 1;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2201      	movs	r2, #1
 800a28e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe f90a 	bl	80084ac <sync_fs>
 800a298:	4603      	mov	r3, r0
 800a29a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	7d1b      	ldrb	r3, [r3, #20]
 800a2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	7dfa      	ldrb	r2, [r7, #23]
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fd ff01 	bl	80080b8 <unlock_fs>
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff ff70 	bl	800a1ae <f_sync>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d11d      	bne.n	800a314 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f107 0208 	add.w	r2, r7, #8
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff fb4f 	bl	8009984 <validate>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d111      	bne.n	800a314 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe f807 	bl	8008308 <dec_lock>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d102      	bne.n	800a30a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2100      	movs	r1, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fd fed2 	bl	80080b8 <unlock_fs>
#endif
		}
	}
	return res;
 800a314:	7bfb      	ldrb	r3, [r7, #15]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b086      	sub	sp, #24
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <f_opendir+0x14>
 800a32e:	2309      	movs	r3, #9
 800a330:	e06a      	b.n	800a408 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a336:	f107 010c 	add.w	r1, r7, #12
 800a33a:	463b      	mov	r3, r7
 800a33c:	2200      	movs	r2, #0
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff f8cc 	bl	80094dc <find_volume>
 800a344:	4603      	mov	r3, r0
 800a346:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d14f      	bne.n	800a3ee <f_opendir+0xd0>
		obj->fs = fs;
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7fe ffb3 	bl	80092c4 <follow_path>
 800a35e:	4603      	mov	r3, r0
 800a360:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d13d      	bne.n	800a3e4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a36e:	b25b      	sxtb	r3, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	db12      	blt.n	800a39a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	799b      	ldrb	r3, [r3, #6]
 800a378:	f003 0310 	and.w	r3, r3, #16
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00a      	beq.n	800a396 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	4619      	mov	r1, r3
 800a388:	4610      	mov	r0, r2
 800a38a:	f7fe fd66 	bl	8008e5a <ld_clust>
 800a38e:	4602      	mov	r2, r0
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	609a      	str	r2, [r3, #8]
 800a394:	e001      	b.n	800a39a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a396:	2305      	movs	r3, #5
 800a398:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d121      	bne.n	800a3e4 <f_opendir+0xc6>
				obj->id = fs->id;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	88da      	ldrh	r2, [r3, #6]
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7fe fbce 	bl	8008b4c <dir_sdi>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d114      	bne.n	800a3e4 <f_opendir+0xc6>
					if (obj->sclust) {
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00d      	beq.n	800a3de <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7fd ff11 	bl	80081ec <inc_lock>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d105      	bne.n	800a3e4 <f_opendir+0xc6>
 800a3d8:	2312      	movs	r3, #18
 800a3da:	75fb      	strb	r3, [r7, #23]
 800a3dc:	e002      	b.n	800a3e4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	2b04      	cmp	r3, #4
 800a3e8:	d101      	bne.n	800a3ee <f_opendir+0xd0>
 800a3ea:	2305      	movs	r3, #5
 800a3ec:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <f_opendir+0xdc>
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	7dfa      	ldrb	r2, [r7, #23]
 800a3fe:	4611      	mov	r1, r2
 800a400:	4618      	mov	r0, r3
 800a402:	f7fd fe59 	bl	80080b8 <unlock_fs>
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f107 0208 	add.w	r2, r7, #8
 800a41e:	4611      	mov	r1, r2
 800a420:	4618      	mov	r0, r3
 800a422:	f7ff faaf 	bl	8009984 <validate>
 800a426:	4603      	mov	r3, r0
 800a428:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d115      	bne.n	800a45c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fd ff63 	bl	8008308 <dec_lock>
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2100      	movs	r1, #0
 800a456:	4618      	mov	r0, r3
 800a458:	f7fd fe2e 	bl	80080b8 <unlock_fs>
#endif
	}
	return res;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b084      	sub	sp, #16
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f107 0208 	add.w	r2, r7, #8
 800a476:	4611      	mov	r1, r2
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff fa83 	bl	8009984 <validate>
 800a47e:	4603      	mov	r3, r0
 800a480:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a482:	7bfb      	ldrb	r3, [r7, #15]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d126      	bne.n	800a4d6 <f_readdir+0x70>
		if (!fno) {
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a48e:	2100      	movs	r1, #0
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7fe fb5b 	bl	8008b4c <dir_sdi>
 800a496:	4603      	mov	r3, r0
 800a498:	73fb      	strb	r3, [r7, #15]
 800a49a:	e01c      	b.n	800a4d6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a49c:	2100      	movs	r1, #0
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7fe fd1a 	bl	8008ed8 <dir_read>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d101      	bne.n	800a4b2 <f_readdir+0x4c>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10e      	bne.n	800a4d6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7fe fe0e 	bl	80090dc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7fe fbbd 	bl	8008c42 <dir_next>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d101      	bne.n	800a4d6 <f_readdir+0x70>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	7bfa      	ldrb	r2, [r7, #15]
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fd fdeb 	bl	80080b8 <unlock_fs>
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b090      	sub	sp, #64	; 0x40
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800a4f6:	f107 010c 	add.w	r1, r7, #12
 800a4fa:	1d3b      	adds	r3, r7, #4
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe ffec 	bl	80094dc <find_volume>
 800a504:	4603      	mov	r3, r0
 800a506:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800a50a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d11f      	bne.n	800a552 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	f107 030c 	add.w	r3, r7, #12
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe fed2 	bl	80092c4 <follow_path>
 800a520:	4603      	mov	r3, r0
 800a522:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800a526:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d111      	bne.n	800a552 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800a52e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a532:	b25b      	sxtb	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	da03      	bge.n	800a540 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800a538:	2306      	movs	r3, #6
 800a53a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a53e:	e008      	b.n	800a552 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d005      	beq.n	800a552 <f_stat+0x66>
 800a546:	f107 030c 	add.w	r3, r7, #12
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fdc5 	bl	80090dc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a558:	4611      	mov	r1, r2
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fd fdac 	bl	80080b8 <unlock_fs>
 800a560:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a564:	4618      	mov	r0, r3
 800a566:	3740      	adds	r7, #64	; 0x40
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b09e      	sub	sp, #120	; 0x78
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a578:	f107 010c 	add.w	r1, r7, #12
 800a57c:	1d3b      	adds	r3, r7, #4
 800a57e:	2202      	movs	r2, #2
 800a580:	4618      	mov	r0, r3
 800a582:	f7fe ffab 	bl	80094dc <find_volume>
 800a586:	4603      	mov	r3, r0
 800a588:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800a590:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a594:	2b00      	cmp	r3, #0
 800a596:	f040 808e 	bne.w	800a6b6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe fe8e 	bl	80092c4 <follow_path>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a5ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d108      	bne.n	800a5c8 <f_unlink+0x5c>
 800a5b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a5ba:	2102      	movs	r1, #2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fd fd97 	bl	80080f0 <chk_lock>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a5c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d172      	bne.n	800a6b6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a5d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a5d4:	b25b      	sxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	da03      	bge.n	800a5e2 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a5da:	2306      	movs	r3, #6
 800a5dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800a5e0:	e008      	b.n	800a5f4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a5e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a5ee:	2307      	movs	r3, #7
 800a5f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800a5f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d134      	bne.n	800a666 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe fc29 	bl	8008e5a <ld_clust>
 800a608:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a60a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a60e:	f003 0310 	and.w	r3, r3, #16
 800a612:	2b00      	cmp	r3, #0
 800a614:	d027      	beq.n	800a666 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a61a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a61c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a61e:	f107 0310 	add.w	r3, r7, #16
 800a622:	2100      	movs	r1, #0
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe fa91 	bl	8008b4c <dir_sdi>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800a630:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a634:	2b00      	cmp	r3, #0
 800a636:	d116      	bne.n	800a666 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a638:	f107 0310 	add.w	r3, r7, #16
 800a63c:	2100      	movs	r1, #0
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe fc4a 	bl	8008ed8 <dir_read>
 800a644:	4603      	mov	r3, r0
 800a646:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a64a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <f_unlink+0xec>
 800a652:	2307      	movs	r3, #7
 800a654:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a658:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a65c:	2b04      	cmp	r3, #4
 800a65e:	d102      	bne.n	800a666 <f_unlink+0xfa>
 800a660:	2300      	movs	r3, #0
 800a662:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800a666:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d123      	bne.n	800a6b6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a66e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fd14 	bl	80090a0 <dir_remove>
 800a678:	4603      	mov	r3, r0
 800a67a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a67e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10c      	bne.n	800a6a0 <f_unlink+0x134>
 800a686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d009      	beq.n	800a6a0 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a68c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a690:	2200      	movs	r2, #0
 800a692:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe f928 	bl	80088ea <remove_chain>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a6a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <f_unlink+0x14a>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fd fefe 	bl	80084ac <sync_fs>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800a6bc:	4611      	mov	r1, r2
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fd fcfa 	bl	80080b8 <unlock_fs>
 800a6c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3778      	adds	r7, #120	; 0x78
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b096      	sub	sp, #88	; 0x58
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a6d8:	f107 0108 	add.w	r1, r7, #8
 800a6dc:	1d3b      	adds	r3, r7, #4
 800a6de:	2202      	movs	r2, #2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fefb 	bl	80094dc <find_volume>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800a6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 80ec 	bne.w	800a8d2 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	f107 030c 	add.w	r3, r7, #12
 800a700:	4611      	mov	r1, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fdde 	bl	80092c4 <follow_path>
 800a708:	4603      	mov	r3, r0
 800a70a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800a70e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <f_mkdir+0x4c>
 800a716:	2308      	movs	r3, #8
 800a718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800a71c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a720:	2b04      	cmp	r3, #4
 800a722:	f040 80d6 	bne.w	800a8d2 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800a726:	f107 030c 	add.w	r3, r7, #12
 800a72a:	2100      	movs	r1, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe f941 	bl	80089b4 <create_chain>
 800a732:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	895b      	ldrh	r3, [r3, #10]
 800a738:	025b      	lsls	r3, r3, #9
 800a73a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800a742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a744:	2b00      	cmp	r3, #0
 800a746:	d102      	bne.n	800a74e <f_mkdir+0x7e>
 800a748:	2307      	movs	r3, #7
 800a74a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800a74e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a750:	2b01      	cmp	r3, #1
 800a752:	d102      	bne.n	800a75a <f_mkdir+0x8a>
 800a754:	2302      	movs	r3, #2
 800a756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a760:	d102      	bne.n	800a768 <f_mkdir+0x98>
 800a762:	2301      	movs	r3, #1
 800a764:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800a768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d106      	bne.n	800a77e <f_mkdir+0xae>
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4618      	mov	r0, r3
 800a774:	f7fd fe28 	bl	80083c8 <sync_window>
 800a778:	4603      	mov	r3, r0
 800a77a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800a77e:	f7fd fa89 	bl	8007c94 <get_fattime>
 800a782:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800a784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d16a      	bne.n	800a862 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a790:	4618      	mov	r0, r3
 800a792:	f7fd fef9 	bl	8008588 <clust2sect>
 800a796:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	3334      	adds	r3, #52	; 0x34
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800a79e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a7a6:	f7fd fc14 	bl	8007fd2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800a7aa:	220b      	movs	r2, #11
 800a7ac:	2120      	movs	r1, #32
 800a7ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a7b0:	f7fd fc0f 	bl	8007fd2 <mem_set>
					dir[DIR_Name] = '.';
 800a7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b6:	222e      	movs	r2, #46	; 0x2e
 800a7b8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800a7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7bc:	330b      	adds	r3, #11
 800a7be:	2210      	movs	r2, #16
 800a7c0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800a7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c4:	3316      	adds	r3, #22
 800a7c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fd fbb5 	bl	8007f38 <st_dword>
					st_clust(fs, dir, dcl);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fe fb5f 	bl	8008e98 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800a7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7dc:	3320      	adds	r3, #32
 800a7de:	2220      	movs	r2, #32
 800a7e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fd fbd4 	bl	8007f90 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800a7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ea:	3321      	adds	r3, #33	; 0x21
 800a7ec:	222e      	movs	r2, #46	; 0x2e
 800a7ee:	701a      	strb	r2, [r3, #0]
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d106      	bne.n	800a80a <f_mkdir+0x13a>
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a802:	429a      	cmp	r2, r3
 800a804:	d101      	bne.n	800a80a <f_mkdir+0x13a>
 800a806:	2300      	movs	r3, #0
 800a808:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800a80a:	68b8      	ldr	r0, [r7, #8]
 800a80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80e:	3320      	adds	r3, #32
 800a810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a812:	4619      	mov	r1, r3
 800a814:	f7fe fb40 	bl	8008e98 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	895b      	ldrh	r3, [r3, #10]
 800a81c:	653b      	str	r3, [r7, #80]	; 0x50
 800a81e:	e01b      	b.n	800a858 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800a820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2201      	movs	r2, #1
 800a82e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	4618      	mov	r0, r3
 800a834:	f7fd fdc8 	bl	80083c8 <sync_window>
 800a838:	4603      	mov	r3, r0
 800a83a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800a83e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10c      	bne.n	800a860 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800a846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a84a:	2100      	movs	r1, #0
 800a84c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a84e:	f7fd fbc0 	bl	8007fd2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a854:	3b01      	subs	r3, #1
 800a856:	653b      	str	r3, [r7, #80]	; 0x50
 800a858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1e0      	bne.n	800a820 <f_mkdir+0x150>
 800a85e:	e000      	b.n	800a862 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800a860:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800a862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a866:	2b00      	cmp	r3, #0
 800a868:	d107      	bne.n	800a87a <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800a86a:	f107 030c 	add.w	r3, r7, #12
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fe fbe4 	bl	800903c <dir_register>
 800a874:	4603      	mov	r3, r0
 800a876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800a87a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d120      	bne.n	800a8c4 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800a886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a888:	3316      	adds	r3, #22
 800a88a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fd fb53 	bl	8007f38 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe fafd 	bl	8008e98 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800a89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a0:	330b      	adds	r3, #11
 800a8a2:	2210      	movs	r2, #16
 800a8a4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800a8ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10e      	bne.n	800a8d2 <f_mkdir+0x202>
					res = sync_fs(fs);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fd fdf8 	bl	80084ac <sync_fs>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a8c2:	e006      	b.n	800a8d2 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800a8c4:	f107 030c 	add.w	r3, r7, #12
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe f80c 	bl	80088ea <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fd fbec 	bl	80080b8 <unlock_fs>
 800a8e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3758      	adds	r7, #88	; 0x58
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a902:	4b1f      	ldr	r3, [pc, #124]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a904:	7a5b      	ldrb	r3, [r3, #9]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d131      	bne.n	800a970 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a90c:	4b1c      	ldr	r3, [pc, #112]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a90e:	7a5b      	ldrb	r3, [r3, #9]
 800a910:	b2db      	uxtb	r3, r3
 800a912:	461a      	mov	r2, r3
 800a914:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a916:	2100      	movs	r1, #0
 800a918:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a91a:	4b19      	ldr	r3, [pc, #100]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a91c:	7a5b      	ldrb	r3, [r3, #9]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	4a17      	ldr	r2, [pc, #92]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a92a:	4b15      	ldr	r3, [pc, #84]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a92c:	7a5b      	ldrb	r3, [r3, #9]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	461a      	mov	r2, r3
 800a932:	4b13      	ldr	r3, [pc, #76]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a934:	4413      	add	r3, r2
 800a936:	79fa      	ldrb	r2, [r7, #7]
 800a938:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a93a:	4b11      	ldr	r3, [pc, #68]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a93c:	7a5b      	ldrb	r3, [r3, #9]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	b2d1      	uxtb	r1, r2
 800a944:	4a0e      	ldr	r2, [pc, #56]	; (800a980 <FATFS_LinkDriverEx+0x94>)
 800a946:	7251      	strb	r1, [r2, #9]
 800a948:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a94a:	7dbb      	ldrb	r3, [r7, #22]
 800a94c:	3330      	adds	r3, #48	; 0x30
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3301      	adds	r3, #1
 800a958:	223a      	movs	r2, #58	; 0x3a
 800a95a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	3302      	adds	r3, #2
 800a960:	222f      	movs	r2, #47	; 0x2f
 800a962:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	3303      	adds	r3, #3
 800a968:	2200      	movs	r2, #0
 800a96a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a970:	7dfb      	ldrb	r3, [r7, #23]
}
 800a972:	4618      	mov	r0, r3
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	200059dc 	.word	0x200059dc

0800a984 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a98e:	2200      	movs	r2, #0
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7ff ffaa 	bl	800a8ec <FATFS_LinkDriverEx>
 800a998:	4603      	mov	r3, r0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b086      	sub	sp, #24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	6039      	str	r1, [r7, #0]
 800a9ac:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f8dd 	bl	800ab7c <osSemaphoreCreate>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bf14      	ite	ne
 800a9d0:	2301      	movne	r3, #1
 800a9d2:	2300      	moveq	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	617b      	str	r3, [r7, #20]

    return ret;
 800a9d8:	697b      	ldr	r3, [r7, #20]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b082      	sub	sp, #8
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f97c 	bl	800ace8 <osSemaphoreDelete>
#endif
    return 1;
 800a9f0:	2301      	movs	r3, #1
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800aa06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f8e8 	bl	800abe0 <osSemaphoreWait>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800aa16:	2301      	movs	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f925 	bl	800ac7c <osSemaphoreRelease>
#endif
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b085      	sub	sp, #20
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	4603      	mov	r3, r0
 800aa42:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aa44:	2300      	movs	r3, #0
 800aa46:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800aa48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa4c:	2b84      	cmp	r3, #132	; 0x84
 800aa4e:	d005      	beq.n	800aa5c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aa50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	3303      	adds	r3, #3
 800aa5a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa70:	f3ef 8305 	mrs	r3, IPSR
 800aa74:	607b      	str	r3, [r7, #4]
  return(result);
 800aa76:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bf14      	ite	ne
 800aa7c:	2301      	movne	r3, #1
 800aa7e:	2300      	moveq	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800aa92:	f001 f9a3 	bl	800bddc <vTaskStartScheduler>
  
  return osOK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800aaa0:	f7ff ffe3 	bl	800aa6a <inHandlerMode>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d003      	beq.n	800aab2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800aaaa:	f001 fabb 	bl	800c024 <xTaskGetTickCountFromISR>
 800aaae:	4603      	mov	r3, r0
 800aab0:	e002      	b.n	800aab8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800aab2:	f001 faa7 	bl	800c004 <xTaskGetTickCount>
 800aab6:	4603      	mov	r3, r0
  }
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aabe:	b089      	sub	sp, #36	; 0x24
 800aac0:	af04      	add	r7, sp, #16
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d020      	beq.n	800ab10 <osThreadCreate+0x54>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d01c      	beq.n	800ab10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685c      	ldr	r4, [r3, #4]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	691e      	ldr	r6, [r3, #16]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff ffa6 	bl	800aa3a <makeFreeRtosPriority>
 800aaee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aaf8:	9202      	str	r2, [sp, #8]
 800aafa:	9301      	str	r3, [sp, #4]
 800aafc:	9100      	str	r1, [sp, #0]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	4632      	mov	r2, r6
 800ab02:	4629      	mov	r1, r5
 800ab04:	4620      	mov	r0, r4
 800ab06:	f000 ff8b 	bl	800ba20 <xTaskCreateStatic>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	e01c      	b.n	800ab4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685c      	ldr	r4, [r3, #4]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab1c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff ff88 	bl	800aa3a <makeFreeRtosPriority>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	f107 030c 	add.w	r3, r7, #12
 800ab30:	9301      	str	r3, [sp, #4]
 800ab32:	9200      	str	r2, [sp, #0]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	4632      	mov	r2, r6
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 ffcd 	bl	800bada <xTaskCreate>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d001      	beq.n	800ab4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e000      	b.n	800ab4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <osDelay+0x16>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	e000      	b.n	800ab6c <osDelay+0x18>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f001 f901 	bl	800bd74 <vTaskDelay>
  
  return osOK;
 800ab72:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af02      	add	r7, sp, #8
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00f      	beq.n	800abae <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d10a      	bne.n	800abaa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	2203      	movs	r2, #3
 800ab9a:	9200      	str	r2, [sp, #0]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2100      	movs	r1, #0
 800aba0:	2001      	movs	r0, #1
 800aba2:	f000 f9dd 	bl	800af60 <xQueueGenericCreateStatic>
 800aba6:	4603      	mov	r3, r0
 800aba8:	e016      	b.n	800abd8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	e014      	b.n	800abd8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d110      	bne.n	800abd6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800abb4:	2203      	movs	r2, #3
 800abb6:	2100      	movs	r1, #0
 800abb8:	2001      	movs	r0, #1
 800abba:	f000 fa49 	bl	800b050 <xQueueGenericCreate>
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d005      	beq.n	800abd2 <osSemaphoreCreate+0x56>
 800abc6:	2300      	movs	r3, #0
 800abc8:	2200      	movs	r2, #0
 800abca:	2100      	movs	r1, #0
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 fa99 	bl	800b104 <xQueueGenericSend>
      return sema;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	e000      	b.n	800abd8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800abd6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800abea:	2300      	movs	r3, #0
 800abec:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800abf4:	2380      	movs	r3, #128	; 0x80
 800abf6:	e03a      	b.n	800ac6e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac02:	d103      	bne.n	800ac0c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ac04:	f04f 33ff 	mov.w	r3, #4294967295
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	e009      	b.n	800ac20 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d006      	beq.n	800ac20 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <osSemaphoreWait+0x40>
      ticks = 1;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ac20:	f7ff ff23 	bl	800aa6a <inHandlerMode>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d017      	beq.n	800ac5a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ac2a:	f107 0308 	add.w	r3, r7, #8
 800ac2e:	461a      	mov	r2, r3
 800ac30:	2100      	movs	r1, #0
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fcfe 	bl	800b634 <xQueueReceiveFromISR>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d001      	beq.n	800ac42 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ac3e:	23ff      	movs	r3, #255	; 0xff
 800ac40:	e015      	b.n	800ac6e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d011      	beq.n	800ac6c <osSemaphoreWait+0x8c>
 800ac48:	4b0b      	ldr	r3, [pc, #44]	; (800ac78 <osSemaphoreWait+0x98>)
 800ac4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	e008      	b.n	800ac6c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ac5a:	68f9      	ldr	r1, [r7, #12]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fbdd 	bl	800b41c <xQueueSemaphoreTake>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d001      	beq.n	800ac6c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ac68:	23ff      	movs	r3, #255	; 0xff
 800ac6a:	e000      	b.n	800ac6e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	e000ed04 	.word	0xe000ed04

0800ac7c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ac8c:	f7ff feed 	bl	800aa6a <inHandlerMode>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d016      	beq.n	800acc4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ac96:	f107 0308 	add.w	r3, r7, #8
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fb2f 	bl	800b300 <xQueueGiveFromISR>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d001      	beq.n	800acac <osSemaphoreRelease+0x30>
      return osErrorOS;
 800aca8:	23ff      	movs	r3, #255	; 0xff
 800acaa:	e017      	b.n	800acdc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d013      	beq.n	800acda <osSemaphoreRelease+0x5e>
 800acb2:	4b0c      	ldr	r3, [pc, #48]	; (800ace4 <osSemaphoreRelease+0x68>)
 800acb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	e00a      	b.n	800acda <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800acc4:	2300      	movs	r3, #0
 800acc6:	2200      	movs	r2, #0
 800acc8:	2100      	movs	r1, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa1a 	bl	800b104 <xQueueGenericSend>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d001      	beq.n	800acda <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800acd6:	23ff      	movs	r3, #255	; 0xff
 800acd8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800acda:	68fb      	ldr	r3, [r7, #12]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	e000ed04 	.word	0xe000ed04

0800ace8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800acf0:	f7ff febb 	bl	800aa6a <inHandlerMode>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <osSemaphoreDelete+0x16>
    return osErrorISR;
 800acfa:	2382      	movs	r3, #130	; 0x82
 800acfc:	e003      	b.n	800ad06 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fd18 	bl	800b734 <vQueueDelete>

  return osOK; 
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b083      	sub	sp, #12
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800ad18:	2381      	movs	r3, #129	; 0x81
#endif
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad26:	b480      	push	{r7}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f103 0208 	add.w	r2, r3, #8
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f103 0208 	add.w	r2, r3, #8
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f103 0208 	add.w	r2, r3, #8
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	689a      	ldr	r2, [r3, #8]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	683a      	ldr	r2, [r7, #0]
 800ada4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	1c5a      	adds	r2, r3, #1
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	601a      	str	r2, [r3, #0]
}
 800adbc:	bf00      	nop
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adde:	d103      	bne.n	800ade8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	60fb      	str	r3, [r7, #12]
 800ade6:	e00c      	b.n	800ae02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3308      	adds	r3, #8
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	e002      	b.n	800adf6 <vListInsert+0x2e>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d2f6      	bcs.n	800adf0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	685a      	ldr	r2, [r3, #4]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
}
 800ae2e:	bf00      	nop
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b085      	sub	sp, #20
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	6892      	ldr	r2, [r2, #8]
 800ae50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	6852      	ldr	r2, [r2, #4]
 800ae5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d103      	bne.n	800ae6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	689a      	ldr	r2, [r3, #8]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	1e5a      	subs	r2, r3, #1
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
	...

0800ae90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10a      	bne.n	800aeba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aeb6:	bf00      	nop
 800aeb8:	e7fe      	b.n	800aeb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aeba:	f001 ff13 	bl	800cce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aeca:	fb01 f303 	mul.w	r3, r1, r3
 800aece:	441a      	add	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeea:	3b01      	subs	r3, #1
 800aeec:	68f9      	ldr	r1, [r7, #12]
 800aeee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aef0:	fb01 f303 	mul.w	r3, r1, r3
 800aef4:	441a      	add	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	22ff      	movs	r2, #255	; 0xff
 800aefe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	22ff      	movs	r2, #255	; 0xff
 800af06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d114      	bne.n	800af3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d01a      	beq.n	800af4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3310      	adds	r3, #16
 800af1c:	4618      	mov	r0, r3
 800af1e:	f001 f9d1 	bl	800c2c4 <xTaskRemoveFromEventList>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d012      	beq.n	800af4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af28:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <xQueueGenericReset+0xcc>)
 800af2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	e009      	b.n	800af4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3310      	adds	r3, #16
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff fef1 	bl	800ad26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3324      	adds	r3, #36	; 0x24
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff feec 	bl	800ad26 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af4e:	f001 fef9 	bl	800cd44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af52:	2301      	movs	r3, #1
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08e      	sub	sp, #56	; 0x38
 800af64:	af02      	add	r7, sp, #8
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
 800af6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <xQueueGenericCreateStatic+0x52>
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <xQueueGenericCreateStatic+0x56>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e000      	b.n	800afb8 <xQueueGenericCreateStatic+0x58>
 800afb6:	2300      	movs	r3, #0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	623b      	str	r3, [r7, #32]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <xQueueGenericCreateStatic+0x7e>
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <xQueueGenericCreateStatic+0x82>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <xQueueGenericCreateStatic+0x84>
 800afe2:	2300      	movs	r3, #0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	61fb      	str	r3, [r7, #28]
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800affe:	2348      	movs	r3, #72	; 0x48
 800b000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2b48      	cmp	r3, #72	; 0x48
 800b006:	d00a      	beq.n	800b01e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	61bb      	str	r3, [r7, #24]
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b01e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00d      	beq.n	800b046 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b032:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	4613      	mov	r3, r2
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 f83f 	bl	800b0c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b048:	4618      	mov	r0, r3
 800b04a:	3730      	adds	r7, #48	; 0x30
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08a      	sub	sp, #40	; 0x28
 800b054:	af02      	add	r7, sp, #8
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	4613      	mov	r3, r2
 800b05c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	613b      	str	r3, [r7, #16]
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	fb02 f303 	mul.w	r3, r2, r3
 800b082:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	3348      	adds	r3, #72	; 0x48
 800b088:	4618      	mov	r0, r3
 800b08a:	f001 ff4d 	bl	800cf28 <pvPortMalloc>
 800b08e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d011      	beq.n	800b0ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	3348      	adds	r3, #72	; 0x48
 800b09e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0a8:	79fa      	ldrb	r2, [r7, #7]
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 f805 	bl	800b0c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0ba:	69bb      	ldr	r3, [r7, #24]
	}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3720      	adds	r7, #32
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d103      	bne.n	800b0e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e002      	b.n	800b0e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	69b8      	ldr	r0, [r7, #24]
 800b0f6:	f7ff fecb 	bl	800ae90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08e      	sub	sp, #56	; 0x38
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
 800b110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b112:	2300      	movs	r3, #0
 800b114:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10a      	bne.n	800b136 <xQueueGenericSend+0x32>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d103      	bne.n	800b144 <xQueueGenericSend+0x40>
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <xQueueGenericSend+0x44>
 800b144:	2301      	movs	r3, #1
 800b146:	e000      	b.n	800b14a <xQueueGenericSend+0x46>
 800b148:	2300      	movs	r3, #0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <xQueueGenericSend+0x60>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d103      	bne.n	800b172 <xQueueGenericSend+0x6e>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d101      	bne.n	800b176 <xQueueGenericSend+0x72>
 800b172:	2301      	movs	r3, #1
 800b174:	e000      	b.n	800b178 <xQueueGenericSend+0x74>
 800b176:	2300      	movs	r3, #0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10a      	bne.n	800b192 <xQueueGenericSend+0x8e>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	623b      	str	r3, [r7, #32]
}
 800b18e:	bf00      	nop
 800b190:	e7fe      	b.n	800b190 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b192:	f001 fa57 	bl	800c644 <xTaskGetSchedulerState>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <xQueueGenericSend+0x9e>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <xQueueGenericSend+0xa2>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e000      	b.n	800b1a8 <xQueueGenericSend+0xa4>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	61fb      	str	r3, [r7, #28]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1c2:	f001 fd8f 	bl	800cce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d302      	bcc.n	800b1d8 <xQueueGenericSend+0xd4>
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d129      	bne.n	800b22c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	68b9      	ldr	r1, [r7, #8]
 800b1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1de:	f000 fae4 	bl	800b7aa <prvCopyDataToQueue>
 800b1e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d010      	beq.n	800b20e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	3324      	adds	r3, #36	; 0x24
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f001 f867 	bl	800c2c4 <xTaskRemoveFromEventList>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d013      	beq.n	800b224 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1fc:	4b3f      	ldr	r3, [pc, #252]	; (800b2fc <xQueueGenericSend+0x1f8>)
 800b1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	e00a      	b.n	800b224 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d007      	beq.n	800b224 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b214:	4b39      	ldr	r3, [pc, #228]	; (800b2fc <xQueueGenericSend+0x1f8>)
 800b216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b21a:	601a      	str	r2, [r3, #0]
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b224:	f001 fd8e 	bl	800cd44 <vPortExitCritical>
				return pdPASS;
 800b228:	2301      	movs	r3, #1
 800b22a:	e063      	b.n	800b2f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d103      	bne.n	800b23a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b232:	f001 fd87 	bl	800cd44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b236:	2300      	movs	r3, #0
 800b238:	e05c      	b.n	800b2f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d106      	bne.n	800b24e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b240:	f107 0314 	add.w	r3, r7, #20
 800b244:	4618      	mov	r0, r3
 800b246:	f001 f89f 	bl	800c388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b24a:	2301      	movs	r3, #1
 800b24c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b24e:	f001 fd79 	bl	800cd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b252:	f000 fe2d 	bl	800beb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b256:	f001 fd45 	bl	800cce4 <vPortEnterCritical>
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b260:	b25b      	sxtb	r3, r3
 800b262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b266:	d103      	bne.n	800b270 <xQueueGenericSend+0x16c>
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b276:	b25b      	sxtb	r3, r3
 800b278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27c:	d103      	bne.n	800b286 <xQueueGenericSend+0x182>
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b286:	f001 fd5d 	bl	800cd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b28a:	1d3a      	adds	r2, r7, #4
 800b28c:	f107 0314 	add.w	r3, r7, #20
 800b290:	4611      	mov	r1, r2
 800b292:	4618      	mov	r0, r3
 800b294:	f001 f88e 	bl	800c3b4 <xTaskCheckForTimeOut>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d124      	bne.n	800b2e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b29e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2a0:	f000 fb7b 	bl	800b99a <prvIsQueueFull>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d018      	beq.n	800b2dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	3310      	adds	r3, #16
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f000 ffe2 	bl	800c27c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2ba:	f000 fb06 	bl	800b8ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2be:	f000 fe05 	bl	800becc <xTaskResumeAll>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f47f af7c 	bne.w	800b1c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b2ca:	4b0c      	ldr	r3, [pc, #48]	; (800b2fc <xQueueGenericSend+0x1f8>)
 800b2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	e772      	b.n	800b1c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2de:	f000 faf4 	bl	800b8ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2e2:	f000 fdf3 	bl	800becc <xTaskResumeAll>
 800b2e6:	e76c      	b.n	800b1c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2ea:	f000 faee 	bl	800b8ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2ee:	f000 fded 	bl	800becc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3738      	adds	r7, #56	; 0x38
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	e000ed04 	.word	0xe000ed04

0800b300 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08e      	sub	sp, #56	; 0x38
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	623b      	str	r3, [r7, #32]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00a      	beq.n	800b348 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	61fb      	str	r3, [r7, #28]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d103      	bne.n	800b358 <xQueueGiveFromISR+0x58>
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <xQueueGiveFromISR+0x5c>
 800b358:	2301      	movs	r3, #1
 800b35a:	e000      	b.n	800b35e <xQueueGiveFromISR+0x5e>
 800b35c:	2300      	movs	r3, #0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10a      	bne.n	800b378 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	61bb      	str	r3, [r7, #24]
}
 800b374:	bf00      	nop
 800b376:	e7fe      	b.n	800b376 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b378:	f001 fd96 	bl	800cea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b37c:	f3ef 8211 	mrs	r2, BASEPRI
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	617a      	str	r2, [r7, #20]
 800b392:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b394:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b396:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d22b      	bcs.n	800b400 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c2:	d112      	bne.n	800b3ea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d016      	beq.n	800b3fa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	3324      	adds	r3, #36	; 0x24
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 ff77 	bl	800c2c4 <xTaskRemoveFromEventList>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00e      	beq.n	800b3fa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00b      	beq.n	800b3fa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	e007      	b.n	800b3fa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	b25a      	sxtb	r2, r3
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b3fe:	e001      	b.n	800b404 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b400:	2300      	movs	r3, #0
 800b402:	637b      	str	r3, [r7, #52]	; 0x34
 800b404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b406:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b40e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b412:	4618      	mov	r0, r3
 800b414:	3738      	adds	r7, #56	; 0x38
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08e      	sub	sp, #56	; 0x38
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b426:	2300      	movs	r3, #0
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b42e:	2300      	movs	r3, #0
 800b430:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	623b      	str	r3, [r7, #32]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00a      	beq.n	800b46c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	61fb      	str	r3, [r7, #28]
}
 800b468:	bf00      	nop
 800b46a:	e7fe      	b.n	800b46a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b46c:	f001 f8ea 	bl	800c644 <xTaskGetSchedulerState>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d102      	bne.n	800b47c <xQueueSemaphoreTake+0x60>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <xQueueSemaphoreTake+0x64>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e000      	b.n	800b482 <xQueueSemaphoreTake+0x66>
 800b480:	2300      	movs	r3, #0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10a      	bne.n	800b49c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	61bb      	str	r3, [r7, #24]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b49c:	f001 fc22 	bl	800cce4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d024      	beq.n	800b4f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	1e5a      	subs	r2, r3, #1
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d104      	bne.n	800b4c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b4bc:	f001 fa6a 	bl	800c994 <pvTaskIncrementMutexHeldCount>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00f      	beq.n	800b4ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	3310      	adds	r3, #16
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 fef6 	bl	800c2c4 <xTaskRemoveFromEventList>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d007      	beq.n	800b4ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4de:	4b54      	ldr	r3, [pc, #336]	; (800b630 <xQueueSemaphoreTake+0x214>)
 800b4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4ee:	f001 fc29 	bl	800cd44 <vPortExitCritical>
				return pdPASS;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e097      	b.n	800b626 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d111      	bne.n	800b520 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	617b      	str	r3, [r7, #20]
}
 800b514:	bf00      	nop
 800b516:	e7fe      	b.n	800b516 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b518:	f001 fc14 	bl	800cd44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b51c:	2300      	movs	r3, #0
 800b51e:	e082      	b.n	800b626 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b522:	2b00      	cmp	r3, #0
 800b524:	d106      	bne.n	800b534 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b526:	f107 030c 	add.w	r3, r7, #12
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 ff2c 	bl	800c388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b530:	2301      	movs	r3, #1
 800b532:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b534:	f001 fc06 	bl	800cd44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b538:	f000 fcba 	bl	800beb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b53c:	f001 fbd2 	bl	800cce4 <vPortEnterCritical>
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b546:	b25b      	sxtb	r3, r3
 800b548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54c:	d103      	bne.n	800b556 <xQueueSemaphoreTake+0x13a>
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b55c:	b25b      	sxtb	r3, r3
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b562:	d103      	bne.n	800b56c <xQueueSemaphoreTake+0x150>
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	2200      	movs	r2, #0
 800b568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b56c:	f001 fbea 	bl	800cd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b570:	463a      	mov	r2, r7
 800b572:	f107 030c 	add.w	r3, r7, #12
 800b576:	4611      	mov	r1, r2
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 ff1b 	bl	800c3b4 <xTaskCheckForTimeOut>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d132      	bne.n	800b5ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b586:	f000 f9f2 	bl	800b96e <prvIsQueueEmpty>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d026      	beq.n	800b5de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d109      	bne.n	800b5ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b598:	f001 fba4 	bl	800cce4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f001 f86d 	bl	800c680 <xTaskPriorityInherit>
 800b5a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b5a8:	f001 fbcc 	bl	800cd44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ae:	3324      	adds	r3, #36	; 0x24
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 fe61 	bl	800c27c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5bc:	f000 f985 	bl	800b8ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5c0:	f000 fc84 	bl	800becc <xTaskResumeAll>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f47f af68 	bne.w	800b49c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b5cc:	4b18      	ldr	r3, [pc, #96]	; (800b630 <xQueueSemaphoreTake+0x214>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	e75e      	b.n	800b49c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b5de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5e0:	f000 f973 	bl	800b8ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5e4:	f000 fc72 	bl	800becc <xTaskResumeAll>
 800b5e8:	e758      	b.n	800b49c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5ec:	f000 f96d 	bl	800b8ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5f0:	f000 fc6c 	bl	800becc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5f6:	f000 f9ba 	bl	800b96e <prvIsQueueEmpty>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f43f af4d 	beq.w	800b49c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00d      	beq.n	800b624 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b608:	f001 fb6c 	bl	800cce4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b60c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b60e:	f000 f8b4 	bl	800b77a <prvGetDisinheritPriorityAfterTimeout>
 800b612:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 f92c 	bl	800c878 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b620:	f001 fb90 	bl	800cd44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b624:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b626:	4618      	mov	r0, r3
 800b628:	3738      	adds	r7, #56	; 0x38
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08e      	sub	sp, #56	; 0x38
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10a      	bne.n	800b660 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	623b      	str	r3, [r7, #32]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d103      	bne.n	800b66e <xQueueReceiveFromISR+0x3a>
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <xQueueReceiveFromISR+0x3e>
 800b66e:	2301      	movs	r3, #1
 800b670:	e000      	b.n	800b674 <xQueueReceiveFromISR+0x40>
 800b672:	2300      	movs	r3, #0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10a      	bne.n	800b68e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	61fb      	str	r3, [r7, #28]
}
 800b68a:	bf00      	nop
 800b68c:	e7fe      	b.n	800b68c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b68e:	f001 fc0b 	bl	800cea8 <vPortValidateInterruptPriority>
	__asm volatile
 800b692:	f3ef 8211 	mrs	r2, BASEPRI
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	61ba      	str	r2, [r7, #24]
 800b6a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b6aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d02f      	beq.n	800b71a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6c4:	68b9      	ldr	r1, [r7, #8]
 800b6c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6c8:	f000 f8d9 	bl	800b87e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	1e5a      	subs	r2, r3, #1
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b6d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6dc:	d112      	bne.n	800b704 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d016      	beq.n	800b714 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	3310      	adds	r3, #16
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 fdea 	bl	800c2c4 <xTaskRemoveFromEventList>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00e      	beq.n	800b714 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00b      	beq.n	800b714 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	e007      	b.n	800b714 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b708:	3301      	adds	r3, #1
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	b25a      	sxtb	r2, r3
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b714:	2301      	movs	r3, #1
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
 800b718:	e001      	b.n	800b71e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	637b      	str	r3, [r7, #52]	; 0x34
 800b71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b720:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	f383 8811 	msr	BASEPRI, r3
}
 800b728:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3738      	adds	r7, #56	; 0x38
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10a      	bne.n	800b75c <vQueueDelete+0x28>
	__asm volatile
 800b746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74a:	f383 8811 	msr	BASEPRI, r3
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f3bf 8f4f 	dsb	sy
 800b756:	60bb      	str	r3, [r7, #8]
}
 800b758:	bf00      	nop
 800b75a:	e7fe      	b.n	800b75a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 f935 	bl	800b9cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d102      	bne.n	800b772 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f001 fca7 	bl	800d0c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b77a:	b480      	push	{r7}
 800b77c:	b085      	sub	sp, #20
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b786:	2b00      	cmp	r3, #0
 800b788:	d006      	beq.n	800b798 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f1c3 0307 	rsb	r3, r3, #7
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	e001      	b.n	800b79c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b79c:	68fb      	ldr	r3, [r7, #12]
	}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b086      	sub	sp, #24
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10d      	bne.n	800b7e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d14d      	bne.n	800b86c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 ffc9 	bl	800c76c <xTaskPriorityDisinherit>
 800b7da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	609a      	str	r2, [r3, #8]
 800b7e2:	e043      	b.n	800b86c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d119      	bne.n	800b81e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6858      	ldr	r0, [r3, #4]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	68b9      	ldr	r1, [r7, #8]
 800b7f6:	f002 fce5 	bl	800e1c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b802:	441a      	add	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	429a      	cmp	r2, r3
 800b812:	d32b      	bcc.n	800b86c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	605a      	str	r2, [r3, #4]
 800b81c:	e026      	b.n	800b86c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	68d8      	ldr	r0, [r3, #12]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b826:	461a      	mov	r2, r3
 800b828:	68b9      	ldr	r1, [r7, #8]
 800b82a:	f002 fccb 	bl	800e1c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	68da      	ldr	r2, [r3, #12]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b836:	425b      	negs	r3, r3
 800b838:	441a      	add	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	68da      	ldr	r2, [r3, #12]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d207      	bcs.n	800b85a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	689a      	ldr	r2, [r3, #8]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b852:	425b      	negs	r3, r3
 800b854:	441a      	add	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d105      	bne.n	800b86c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d002      	beq.n	800b86c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	3b01      	subs	r3, #1
 800b86a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b874:	697b      	ldr	r3, [r7, #20]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3718      	adds	r7, #24
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d018      	beq.n	800b8c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68da      	ldr	r2, [r3, #12]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b898:	441a      	add	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d303      	bcc.n	800b8b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68d9      	ldr	r1, [r3, #12]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	6838      	ldr	r0, [r7, #0]
 800b8be:	f002 fc81 	bl	800e1c4 <memcpy>
	}
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b8d2:	f001 fa07 	bl	800cce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8de:	e011      	b.n	800b904 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d012      	beq.n	800b90e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3324      	adds	r3, #36	; 0x24
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 fce9 	bl	800c2c4 <xTaskRemoveFromEventList>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b8f8:	f000 fdbe 	bl	800c478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	b2db      	uxtb	r3, r3
 800b902:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dce9      	bgt.n	800b8e0 <prvUnlockQueue+0x16>
 800b90c:	e000      	b.n	800b910 <prvUnlockQueue+0x46>
					break;
 800b90e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	22ff      	movs	r2, #255	; 0xff
 800b914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b918:	f001 fa14 	bl	800cd44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b91c:	f001 f9e2 	bl	800cce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b926:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b928:	e011      	b.n	800b94e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d012      	beq.n	800b958 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3310      	adds	r3, #16
 800b936:	4618      	mov	r0, r3
 800b938:	f000 fcc4 	bl	800c2c4 <xTaskRemoveFromEventList>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b942:	f000 fd99 	bl	800c478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b946:	7bbb      	ldrb	r3, [r7, #14]
 800b948:	3b01      	subs	r3, #1
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b94e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b952:	2b00      	cmp	r3, #0
 800b954:	dce9      	bgt.n	800b92a <prvUnlockQueue+0x60>
 800b956:	e000      	b.n	800b95a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b958:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	22ff      	movs	r2, #255	; 0xff
 800b95e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b962:	f001 f9ef 	bl	800cd44 <vPortExitCritical>
}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b976:	f001 f9b5 	bl	800cce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d102      	bne.n	800b988 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	60fb      	str	r3, [r7, #12]
 800b986:	e001      	b.n	800b98c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b98c:	f001 f9da 	bl	800cd44 <vPortExitCritical>

	return xReturn;
 800b990:	68fb      	ldr	r3, [r7, #12]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9a2:	f001 f99f 	bl	800cce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d102      	bne.n	800b9b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	60fb      	str	r3, [r7, #12]
 800b9b6:	e001      	b.n	800b9bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9bc:	f001 f9c2 	bl	800cd44 <vPortExitCritical>

	return xReturn;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
	...

0800b9cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	60fb      	str	r3, [r7, #12]
 800b9d8:	e016      	b.n	800ba08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b9da:	4a10      	ldr	r2, [pc, #64]	; (800ba1c <vQueueUnregisterQueue+0x50>)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	4413      	add	r3, r2
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d10b      	bne.n	800ba02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b9ea:	4a0c      	ldr	r2, [pc, #48]	; (800ba1c <vQueueUnregisterQueue+0x50>)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b9f4:	4a09      	ldr	r2, [pc, #36]	; (800ba1c <vQueueUnregisterQueue+0x50>)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	00db      	lsls	r3, r3, #3
 800b9fa:	4413      	add	r3, r2
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	605a      	str	r2, [r3, #4]
				break;
 800ba00:	e006      	b.n	800ba10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3301      	adds	r3, #1
 800ba06:	60fb      	str	r3, [r7, #12]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b07      	cmp	r3, #7
 800ba0c:	d9e5      	bls.n	800b9da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ba0e:	bf00      	nop
 800ba10:	bf00      	nop
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	200059e8 	.word	0x200059e8

0800ba20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08e      	sub	sp, #56	; 0x38
 800ba24:	af04      	add	r7, sp, #16
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
 800ba2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ba34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba38:	f383 8811 	msr	BASEPRI, r3
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	623b      	str	r3, [r7, #32]
}
 800ba46:	bf00      	nop
 800ba48:	e7fe      	b.n	800ba48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <xTaskCreateStatic+0x46>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	61fb      	str	r3, [r7, #28]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba66:	23a0      	movs	r3, #160	; 0xa0
 800ba68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	2ba0      	cmp	r3, #160	; 0xa0
 800ba6e:	d00a      	beq.n	800ba86 <xTaskCreateStatic+0x66>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	61bb      	str	r3, [r7, #24]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d01e      	beq.n	800bacc <xTaskCreateStatic+0xac>
 800ba8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d01b      	beq.n	800bacc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa0:	2202      	movs	r2, #2
 800baa2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800baa6:	2300      	movs	r3, #0
 800baa8:	9303      	str	r3, [sp, #12]
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	9302      	str	r3, [sp, #8]
 800baae:	f107 0314 	add.w	r3, r7, #20
 800bab2:	9301      	str	r3, [sp, #4]
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 f850 	bl	800bb64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bac6:	f000 f8eb 	bl	800bca0 <prvAddNewTaskToReadyList>
 800baca:	e001      	b.n	800bad0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bacc:	2300      	movs	r3, #0
 800bace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bad0:	697b      	ldr	r3, [r7, #20]
	}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3728      	adds	r7, #40	; 0x28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bada:	b580      	push	{r7, lr}
 800badc:	b08c      	sub	sp, #48	; 0x30
 800bade:	af04      	add	r7, sp, #16
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	603b      	str	r3, [r7, #0]
 800bae6:	4613      	mov	r3, r2
 800bae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800baea:	88fb      	ldrh	r3, [r7, #6]
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4618      	mov	r0, r3
 800baf0:	f001 fa1a 	bl	800cf28 <pvPortMalloc>
 800baf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00e      	beq.n	800bb1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bafc:	20a0      	movs	r0, #160	; 0xa0
 800bafe:	f001 fa13 	bl	800cf28 <pvPortMalloc>
 800bb02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	631a      	str	r2, [r3, #48]	; 0x30
 800bb10:	e005      	b.n	800bb1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bb12:	6978      	ldr	r0, [r7, #20]
 800bb14:	f001 fad4 	bl	800d0c0 <vPortFree>
 800bb18:	e001      	b.n	800bb1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d017      	beq.n	800bb54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bb2c:	88fa      	ldrh	r2, [r7, #6]
 800bb2e:	2300      	movs	r3, #0
 800bb30:	9303      	str	r3, [sp, #12]
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	9302      	str	r3, [sp, #8]
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	68b9      	ldr	r1, [r7, #8]
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f000 f80e 	bl	800bb64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb48:	69f8      	ldr	r0, [r7, #28]
 800bb4a:	f000 f8a9 	bl	800bca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	61bb      	str	r3, [r7, #24]
 800bb52:	e002      	b.n	800bb5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb54:	f04f 33ff 	mov.w	r3, #4294967295
 800bb58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb5a:	69bb      	ldr	r3, [r7, #24]
	}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3720      	adds	r7, #32
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	f023 0307 	bic.w	r3, r3, #7
 800bb8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	f003 0307 	and.w	r3, r3, #7
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00a      	beq.n	800bbac <prvInitialiseNewTask+0x48>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	617b      	str	r3, [r7, #20]
}
 800bba8:	bf00      	nop
 800bbaa:	e7fe      	b.n	800bbaa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d01f      	beq.n	800bbf2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	61fb      	str	r3, [r7, #28]
 800bbb6:	e012      	b.n	800bbde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	7819      	ldrb	r1, [r3, #0]
 800bbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	3334      	adds	r3, #52	; 0x34
 800bbc8:	460a      	mov	r2, r1
 800bbca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d006      	beq.n	800bbe6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	61fb      	str	r3, [r7, #28]
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	2b0f      	cmp	r3, #15
 800bbe2:	d9e9      	bls.n	800bbb8 <prvInitialiseNewTask+0x54>
 800bbe4:	e000      	b.n	800bbe8 <prvInitialiseNewTask+0x84>
			{
				break;
 800bbe6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bbf0:	e003      	b.n	800bbfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	2b06      	cmp	r3, #6
 800bbfe:	d901      	bls.n	800bc04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bc00:	2306      	movs	r3, #6
 800bc02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc12:	2200      	movs	r2, #0
 800bc14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	3304      	adds	r3, #4
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7ff f8a3 	bl	800ad66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	3318      	adds	r3, #24
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff f89e 	bl	800ad66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	f1c3 0207 	rsb	r2, r3, #7
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	2200      	movs	r2, #0
 800bc44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	334c      	adds	r3, #76	; 0x4c
 800bc54:	224c      	movs	r2, #76	; 0x4c
 800bc56:	2100      	movs	r1, #0
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f002 f9cb 	bl	800dff4 <memset>
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	4a0c      	ldr	r2, [pc, #48]	; (800bc94 <prvInitialiseNewTask+0x130>)
 800bc62:	651a      	str	r2, [r3, #80]	; 0x50
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	4a0c      	ldr	r2, [pc, #48]	; (800bc98 <prvInitialiseNewTask+0x134>)
 800bc68:	655a      	str	r2, [r3, #84]	; 0x54
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	4a0b      	ldr	r2, [pc, #44]	; (800bc9c <prvInitialiseNewTask+0x138>)
 800bc6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc70:	683a      	ldr	r2, [r7, #0]
 800bc72:	68f9      	ldr	r1, [r7, #12]
 800bc74:	69b8      	ldr	r0, [r7, #24]
 800bc76:	f000 ff07 	bl	800ca88 <pxPortInitialiseStack>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d002      	beq.n	800bc8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc8c:	bf00      	nop
 800bc8e:	3720      	adds	r7, #32
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	2000977c 	.word	0x2000977c
 800bc98:	200097e4 	.word	0x200097e4
 800bc9c:	2000984c 	.word	0x2000984c

0800bca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bca8:	f001 f81c 	bl	800cce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bcac:	4b2a      	ldr	r3, [pc, #168]	; (800bd58 <prvAddNewTaskToReadyList+0xb8>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	4a29      	ldr	r2, [pc, #164]	; (800bd58 <prvAddNewTaskToReadyList+0xb8>)
 800bcb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bcb6:	4b29      	ldr	r3, [pc, #164]	; (800bd5c <prvAddNewTaskToReadyList+0xbc>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d109      	bne.n	800bcd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bcbe:	4a27      	ldr	r2, [pc, #156]	; (800bd5c <prvAddNewTaskToReadyList+0xbc>)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bcc4:	4b24      	ldr	r3, [pc, #144]	; (800bd58 <prvAddNewTaskToReadyList+0xb8>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d110      	bne.n	800bcee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bccc:	f000 fbf8 	bl	800c4c0 <prvInitialiseTaskLists>
 800bcd0:	e00d      	b.n	800bcee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bcd2:	4b23      	ldr	r3, [pc, #140]	; (800bd60 <prvAddNewTaskToReadyList+0xc0>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d109      	bne.n	800bcee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bcda:	4b20      	ldr	r3, [pc, #128]	; (800bd5c <prvAddNewTaskToReadyList+0xbc>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d802      	bhi.n	800bcee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bce8:	4a1c      	ldr	r2, [pc, #112]	; (800bd5c <prvAddNewTaskToReadyList+0xbc>)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bcee:	4b1d      	ldr	r3, [pc, #116]	; (800bd64 <prvAddNewTaskToReadyList+0xc4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	4a1b      	ldr	r2, [pc, #108]	; (800bd64 <prvAddNewTaskToReadyList+0xc4>)
 800bcf6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	409a      	lsls	r2, r3
 800bd00:	4b19      	ldr	r3, [pc, #100]	; (800bd68 <prvAddNewTaskToReadyList+0xc8>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	4a18      	ldr	r2, [pc, #96]	; (800bd68 <prvAddNewTaskToReadyList+0xc8>)
 800bd08:	6013      	str	r3, [r2, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4a15      	ldr	r2, [pc, #84]	; (800bd6c <prvAddNewTaskToReadyList+0xcc>)
 800bd18:	441a      	add	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4610      	mov	r0, r2
 800bd22:	f7ff f82d 	bl	800ad80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd26:	f001 f80d 	bl	800cd44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd2a:	4b0d      	ldr	r3, [pc, #52]	; (800bd60 <prvAddNewTaskToReadyList+0xc0>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00e      	beq.n	800bd50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd32:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <prvAddNewTaskToReadyList+0xbc>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d207      	bcs.n	800bd50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bd40:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <prvAddNewTaskToReadyList+0xd0>)
 800bd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd46:	601a      	str	r2, [r3, #0]
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20005b28 	.word	0x20005b28
 800bd5c:	20005a28 	.word	0x20005a28
 800bd60:	20005b34 	.word	0x20005b34
 800bd64:	20005b44 	.word	0x20005b44
 800bd68:	20005b30 	.word	0x20005b30
 800bd6c:	20005a2c 	.word	0x20005a2c
 800bd70:	e000ed04 	.word	0xe000ed04

0800bd74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d017      	beq.n	800bdb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd86:	4b13      	ldr	r3, [pc, #76]	; (800bdd4 <vTaskDelay+0x60>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <vTaskDelay+0x30>
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	60bb      	str	r3, [r7, #8]
}
 800bda0:	bf00      	nop
 800bda2:	e7fe      	b.n	800bda2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bda4:	f000 f884 	bl	800beb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bda8:	2100      	movs	r1, #0
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fe06 	bl	800c9bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bdb0:	f000 f88c 	bl	800becc <xTaskResumeAll>
 800bdb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d107      	bne.n	800bdcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bdbc:	4b06      	ldr	r3, [pc, #24]	; (800bdd8 <vTaskDelay+0x64>)
 800bdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdcc:	bf00      	nop
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20005b50 	.word	0x20005b50
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08a      	sub	sp, #40	; 0x28
 800bde0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bdea:	463a      	mov	r2, r7
 800bdec:	1d39      	adds	r1, r7, #4
 800bdee:	f107 0308 	add.w	r3, r7, #8
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7f6 fa22 	bl	800223c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	9202      	str	r2, [sp, #8]
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	2300      	movs	r3, #0
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	2300      	movs	r3, #0
 800be08:	460a      	mov	r2, r1
 800be0a:	4921      	ldr	r1, [pc, #132]	; (800be90 <vTaskStartScheduler+0xb4>)
 800be0c:	4821      	ldr	r0, [pc, #132]	; (800be94 <vTaskStartScheduler+0xb8>)
 800be0e:	f7ff fe07 	bl	800ba20 <xTaskCreateStatic>
 800be12:	4603      	mov	r3, r0
 800be14:	4a20      	ldr	r2, [pc, #128]	; (800be98 <vTaskStartScheduler+0xbc>)
 800be16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be18:	4b1f      	ldr	r3, [pc, #124]	; (800be98 <vTaskStartScheduler+0xbc>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be20:	2301      	movs	r3, #1
 800be22:	617b      	str	r3, [r7, #20]
 800be24:	e001      	b.n	800be2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be26:	2300      	movs	r3, #0
 800be28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d11b      	bne.n	800be68 <vTaskStartScheduler+0x8c>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	613b      	str	r3, [r7, #16]
}
 800be42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be44:	4b15      	ldr	r3, [pc, #84]	; (800be9c <vTaskStartScheduler+0xc0>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	334c      	adds	r3, #76	; 0x4c
 800be4a:	4a15      	ldr	r2, [pc, #84]	; (800bea0 <vTaskStartScheduler+0xc4>)
 800be4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be4e:	4b15      	ldr	r3, [pc, #84]	; (800bea4 <vTaskStartScheduler+0xc8>)
 800be50:	f04f 32ff 	mov.w	r2, #4294967295
 800be54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be56:	4b14      	ldr	r3, [pc, #80]	; (800bea8 <vTaskStartScheduler+0xcc>)
 800be58:	2201      	movs	r2, #1
 800be5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be5c:	4b13      	ldr	r3, [pc, #76]	; (800beac <vTaskStartScheduler+0xd0>)
 800be5e:	2200      	movs	r2, #0
 800be60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be62:	f000 fe9d 	bl	800cba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be66:	e00e      	b.n	800be86 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	d10a      	bne.n	800be86 <vTaskStartScheduler+0xaa>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	60fb      	str	r3, [r7, #12]
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <vTaskStartScheduler+0xa8>
}
 800be86:	bf00      	nop
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	080109c4 	.word	0x080109c4
 800be94:	0800c491 	.word	0x0800c491
 800be98:	20005b4c 	.word	0x20005b4c
 800be9c:	20005a28 	.word	0x20005a28
 800bea0:	20000088 	.word	0x20000088
 800bea4:	20005b48 	.word	0x20005b48
 800bea8:	20005b34 	.word	0x20005b34
 800beac:	20005b2c 	.word	0x20005b2c

0800beb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800beb0:	b480      	push	{r7}
 800beb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800beb4:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <vTaskSuspendAll+0x18>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	3301      	adds	r3, #1
 800beba:	4a03      	ldr	r2, [pc, #12]	; (800bec8 <vTaskSuspendAll+0x18>)
 800bebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bebe:	bf00      	nop
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	20005b50 	.word	0x20005b50

0800becc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bed2:	2300      	movs	r3, #0
 800bed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bed6:	2300      	movs	r3, #0
 800bed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800beda:	4b41      	ldr	r3, [pc, #260]	; (800bfe0 <xTaskResumeAll+0x114>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10a      	bne.n	800bef8 <xTaskResumeAll+0x2c>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	603b      	str	r3, [r7, #0]
}
 800bef4:	bf00      	nop
 800bef6:	e7fe      	b.n	800bef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bef8:	f000 fef4 	bl	800cce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800befc:	4b38      	ldr	r3, [pc, #224]	; (800bfe0 <xTaskResumeAll+0x114>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3b01      	subs	r3, #1
 800bf02:	4a37      	ldr	r2, [pc, #220]	; (800bfe0 <xTaskResumeAll+0x114>)
 800bf04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf06:	4b36      	ldr	r3, [pc, #216]	; (800bfe0 <xTaskResumeAll+0x114>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d161      	bne.n	800bfd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf0e:	4b35      	ldr	r3, [pc, #212]	; (800bfe4 <xTaskResumeAll+0x118>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d05d      	beq.n	800bfd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf16:	e02e      	b.n	800bf76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf18:	4b33      	ldr	r3, [pc, #204]	; (800bfe8 <xTaskResumeAll+0x11c>)
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	3318      	adds	r3, #24
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe ff88 	bl	800ae3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe ff83 	bl	800ae3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	2201      	movs	r2, #1
 800bf3a:	409a      	lsls	r2, r3
 800bf3c:	4b2b      	ldr	r3, [pc, #172]	; (800bfec <xTaskResumeAll+0x120>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	4a2a      	ldr	r2, [pc, #168]	; (800bfec <xTaskResumeAll+0x120>)
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4a27      	ldr	r2, [pc, #156]	; (800bff0 <xTaskResumeAll+0x124>)
 800bf54:	441a      	add	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3304      	adds	r3, #4
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	f7fe ff0f 	bl	800ad80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf66:	4b23      	ldr	r3, [pc, #140]	; (800bff4 <xTaskResumeAll+0x128>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d302      	bcc.n	800bf76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bf70:	4b21      	ldr	r3, [pc, #132]	; (800bff8 <xTaskResumeAll+0x12c>)
 800bf72:	2201      	movs	r2, #1
 800bf74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf76:	4b1c      	ldr	r3, [pc, #112]	; (800bfe8 <xTaskResumeAll+0x11c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1cc      	bne.n	800bf18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf84:	f000 fb3e 	bl	800c604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bf88:	4b1c      	ldr	r3, [pc, #112]	; (800bffc <xTaskResumeAll+0x130>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d010      	beq.n	800bfb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf94:	f000 f858 	bl	800c048 <xTaskIncrementTick>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bf9e:	4b16      	ldr	r3, [pc, #88]	; (800bff8 <xTaskResumeAll+0x12c>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1f1      	bne.n	800bf94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bfb0:	4b12      	ldr	r3, [pc, #72]	; (800bffc <xTaskResumeAll+0x130>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bfb6:	4b10      	ldr	r3, [pc, #64]	; (800bff8 <xTaskResumeAll+0x12c>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d009      	beq.n	800bfd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bfc2:	4b0f      	ldr	r3, [pc, #60]	; (800c000 <xTaskResumeAll+0x134>)
 800bfc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfd2:	f000 feb7 	bl	800cd44 <vPortExitCritical>

	return xAlreadyYielded;
 800bfd6:	68bb      	ldr	r3, [r7, #8]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	20005b50 	.word	0x20005b50
 800bfe4:	20005b28 	.word	0x20005b28
 800bfe8:	20005ae8 	.word	0x20005ae8
 800bfec:	20005b30 	.word	0x20005b30
 800bff0:	20005a2c 	.word	0x20005a2c
 800bff4:	20005a28 	.word	0x20005a28
 800bff8:	20005b3c 	.word	0x20005b3c
 800bffc:	20005b38 	.word	0x20005b38
 800c000:	e000ed04 	.word	0xe000ed04

0800c004 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c00a:	4b05      	ldr	r3, [pc, #20]	; (800c020 <xTaskGetTickCount+0x1c>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c010:	687b      	ldr	r3, [r7, #4]
}
 800c012:	4618      	mov	r0, r3
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	20005b2c 	.word	0x20005b2c

0800c024 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c02a:	f000 ff3d 	bl	800cea8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c02e:	2300      	movs	r3, #0
 800c030:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c032:	4b04      	ldr	r3, [pc, #16]	; (800c044 <xTaskGetTickCountFromISR+0x20>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c038:	683b      	ldr	r3, [r7, #0]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20005b2c 	.word	0x20005b2c

0800c048 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c04e:	2300      	movs	r3, #0
 800c050:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c052:	4b4e      	ldr	r3, [pc, #312]	; (800c18c <xTaskIncrementTick+0x144>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	f040 808e 	bne.w	800c178 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c05c:	4b4c      	ldr	r3, [pc, #304]	; (800c190 <xTaskIncrementTick+0x148>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	3301      	adds	r3, #1
 800c062:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c064:	4a4a      	ldr	r2, [pc, #296]	; (800c190 <xTaskIncrementTick+0x148>)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d120      	bne.n	800c0b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c070:	4b48      	ldr	r3, [pc, #288]	; (800c194 <xTaskIncrementTick+0x14c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <xTaskIncrementTick+0x48>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	603b      	str	r3, [r7, #0]
}
 800c08c:	bf00      	nop
 800c08e:	e7fe      	b.n	800c08e <xTaskIncrementTick+0x46>
 800c090:	4b40      	ldr	r3, [pc, #256]	; (800c194 <xTaskIncrementTick+0x14c>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	4b40      	ldr	r3, [pc, #256]	; (800c198 <xTaskIncrementTick+0x150>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a3e      	ldr	r2, [pc, #248]	; (800c194 <xTaskIncrementTick+0x14c>)
 800c09c:	6013      	str	r3, [r2, #0]
 800c09e:	4a3e      	ldr	r2, [pc, #248]	; (800c198 <xTaskIncrementTick+0x150>)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6013      	str	r3, [r2, #0]
 800c0a4:	4b3d      	ldr	r3, [pc, #244]	; (800c19c <xTaskIncrementTick+0x154>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	4a3c      	ldr	r2, [pc, #240]	; (800c19c <xTaskIncrementTick+0x154>)
 800c0ac:	6013      	str	r3, [r2, #0]
 800c0ae:	f000 faa9 	bl	800c604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c0b2:	4b3b      	ldr	r3, [pc, #236]	; (800c1a0 <xTaskIncrementTick+0x158>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	693a      	ldr	r2, [r7, #16]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d348      	bcc.n	800c14e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0bc:	4b35      	ldr	r3, [pc, #212]	; (800c194 <xTaskIncrementTick+0x14c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d104      	bne.n	800c0d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0c6:	4b36      	ldr	r3, [pc, #216]	; (800c1a0 <xTaskIncrementTick+0x158>)
 800c0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0cc:	601a      	str	r2, [r3, #0]
					break;
 800c0ce:	e03e      	b.n	800c14e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0d0:	4b30      	ldr	r3, [pc, #192]	; (800c194 <xTaskIncrementTick+0x14c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d203      	bcs.n	800c0f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c0e8:	4a2d      	ldr	r2, [pc, #180]	; (800c1a0 <xTaskIncrementTick+0x158>)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c0ee:	e02e      	b.n	800c14e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fe fea0 	bl	800ae3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d004      	beq.n	800c10c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	3318      	adds	r3, #24
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe fe97 	bl	800ae3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c110:	2201      	movs	r2, #1
 800c112:	409a      	lsls	r2, r3
 800c114:	4b23      	ldr	r3, [pc, #140]	; (800c1a4 <xTaskIncrementTick+0x15c>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4313      	orrs	r3, r2
 800c11a:	4a22      	ldr	r2, [pc, #136]	; (800c1a4 <xTaskIncrementTick+0x15c>)
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c122:	4613      	mov	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4a1f      	ldr	r2, [pc, #124]	; (800c1a8 <xTaskIncrementTick+0x160>)
 800c12c:	441a      	add	r2, r3
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	3304      	adds	r3, #4
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7fe fe23 	bl	800ad80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13e:	4b1b      	ldr	r3, [pc, #108]	; (800c1ac <xTaskIncrementTick+0x164>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	429a      	cmp	r2, r3
 800c146:	d3b9      	bcc.n	800c0bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c148:	2301      	movs	r3, #1
 800c14a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c14c:	e7b6      	b.n	800c0bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c14e:	4b17      	ldr	r3, [pc, #92]	; (800c1ac <xTaskIncrementTick+0x164>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c154:	4914      	ldr	r1, [pc, #80]	; (800c1a8 <xTaskIncrementTick+0x160>)
 800c156:	4613      	mov	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	440b      	add	r3, r1
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d901      	bls.n	800c16a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c166:	2301      	movs	r3, #1
 800c168:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c16a:	4b11      	ldr	r3, [pc, #68]	; (800c1b0 <xTaskIncrementTick+0x168>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d007      	beq.n	800c182 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c172:	2301      	movs	r3, #1
 800c174:	617b      	str	r3, [r7, #20]
 800c176:	e004      	b.n	800c182 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c178:	4b0e      	ldr	r3, [pc, #56]	; (800c1b4 <xTaskIncrementTick+0x16c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3301      	adds	r3, #1
 800c17e:	4a0d      	ldr	r2, [pc, #52]	; (800c1b4 <xTaskIncrementTick+0x16c>)
 800c180:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c182:	697b      	ldr	r3, [r7, #20]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3718      	adds	r7, #24
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	20005b50 	.word	0x20005b50
 800c190:	20005b2c 	.word	0x20005b2c
 800c194:	20005ae0 	.word	0x20005ae0
 800c198:	20005ae4 	.word	0x20005ae4
 800c19c:	20005b40 	.word	0x20005b40
 800c1a0:	20005b48 	.word	0x20005b48
 800c1a4:	20005b30 	.word	0x20005b30
 800c1a8:	20005a2c 	.word	0x20005a2c
 800c1ac:	20005a28 	.word	0x20005a28
 800c1b0:	20005b3c 	.word	0x20005b3c
 800c1b4:	20005b38 	.word	0x20005b38

0800c1b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b087      	sub	sp, #28
 800c1bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c1be:	4b29      	ldr	r3, [pc, #164]	; (800c264 <vTaskSwitchContext+0xac>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c1c6:	4b28      	ldr	r3, [pc, #160]	; (800c268 <vTaskSwitchContext+0xb0>)
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c1cc:	e044      	b.n	800c258 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c1ce:	4b26      	ldr	r3, [pc, #152]	; (800c268 <vTaskSwitchContext+0xb0>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d4:	4b25      	ldr	r3, [pc, #148]	; (800c26c <vTaskSwitchContext+0xb4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	fab3 f383 	clz	r3, r3
 800c1e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c1e2:	7afb      	ldrb	r3, [r7, #11]
 800c1e4:	f1c3 031f 	rsb	r3, r3, #31
 800c1e8:	617b      	str	r3, [r7, #20]
 800c1ea:	4921      	ldr	r1, [pc, #132]	; (800c270 <vTaskSwitchContext+0xb8>)
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	440b      	add	r3, r1
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10a      	bne.n	800c214 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	607b      	str	r3, [r7, #4]
}
 800c210:	bf00      	nop
 800c212:	e7fe      	b.n	800c212 <vTaskSwitchContext+0x5a>
 800c214:	697a      	ldr	r2, [r7, #20]
 800c216:	4613      	mov	r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4a14      	ldr	r2, [pc, #80]	; (800c270 <vTaskSwitchContext+0xb8>)
 800c220:	4413      	add	r3, r2
 800c222:	613b      	str	r3, [r7, #16]
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	685a      	ldr	r2, [r3, #4]
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	605a      	str	r2, [r3, #4]
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	3308      	adds	r3, #8
 800c236:	429a      	cmp	r2, r3
 800c238:	d104      	bne.n	800c244 <vTaskSwitchContext+0x8c>
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	605a      	str	r2, [r3, #4]
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	4a0a      	ldr	r2, [pc, #40]	; (800c274 <vTaskSwitchContext+0xbc>)
 800c24c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c24e:	4b09      	ldr	r3, [pc, #36]	; (800c274 <vTaskSwitchContext+0xbc>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	334c      	adds	r3, #76	; 0x4c
 800c254:	4a08      	ldr	r2, [pc, #32]	; (800c278 <vTaskSwitchContext+0xc0>)
 800c256:	6013      	str	r3, [r2, #0]
}
 800c258:	bf00      	nop
 800c25a:	371c      	adds	r7, #28
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	20005b50 	.word	0x20005b50
 800c268:	20005b3c 	.word	0x20005b3c
 800c26c:	20005b30 	.word	0x20005b30
 800c270:	20005a2c 	.word	0x20005a2c
 800c274:	20005a28 	.word	0x20005a28
 800c278:	20000088 	.word	0x20000088

0800c27c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10a      	bne.n	800c2a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	60fb      	str	r3, [r7, #12]
}
 800c29e:	bf00      	nop
 800c2a0:	e7fe      	b.n	800c2a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2a2:	4b07      	ldr	r3, [pc, #28]	; (800c2c0 <vTaskPlaceOnEventList+0x44>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3318      	adds	r3, #24
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7fe fd8c 	bl	800adc8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	6838      	ldr	r0, [r7, #0]
 800c2b4:	f000 fb82 	bl	800c9bc <prvAddCurrentTaskToDelayedList>
}
 800c2b8:	bf00      	nop
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	20005a28 	.word	0x20005a28

0800c2c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10a      	bne.n	800c2f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	60fb      	str	r3, [r7, #12]
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	3318      	adds	r3, #24
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fe fda0 	bl	800ae3a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2fa:	4b1d      	ldr	r3, [pc, #116]	; (800c370 <xTaskRemoveFromEventList+0xac>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d11c      	bne.n	800c33c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	3304      	adds	r3, #4
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe fd97 	bl	800ae3a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c310:	2201      	movs	r2, #1
 800c312:	409a      	lsls	r2, r3
 800c314:	4b17      	ldr	r3, [pc, #92]	; (800c374 <xTaskRemoveFromEventList+0xb0>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4313      	orrs	r3, r2
 800c31a:	4a16      	ldr	r2, [pc, #88]	; (800c374 <xTaskRemoveFromEventList+0xb0>)
 800c31c:	6013      	str	r3, [r2, #0]
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c322:	4613      	mov	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4a13      	ldr	r2, [pc, #76]	; (800c378 <xTaskRemoveFromEventList+0xb4>)
 800c32c:	441a      	add	r2, r3
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	3304      	adds	r3, #4
 800c332:	4619      	mov	r1, r3
 800c334:	4610      	mov	r0, r2
 800c336:	f7fe fd23 	bl	800ad80 <vListInsertEnd>
 800c33a:	e005      	b.n	800c348 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	3318      	adds	r3, #24
 800c340:	4619      	mov	r1, r3
 800c342:	480e      	ldr	r0, [pc, #56]	; (800c37c <xTaskRemoveFromEventList+0xb8>)
 800c344:	f7fe fd1c 	bl	800ad80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34c:	4b0c      	ldr	r3, [pc, #48]	; (800c380 <xTaskRemoveFromEventList+0xbc>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c352:	429a      	cmp	r2, r3
 800c354:	d905      	bls.n	800c362 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c356:	2301      	movs	r3, #1
 800c358:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c35a:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <xTaskRemoveFromEventList+0xc0>)
 800c35c:	2201      	movs	r2, #1
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	e001      	b.n	800c366 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c366:	697b      	ldr	r3, [r7, #20]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20005b50 	.word	0x20005b50
 800c374:	20005b30 	.word	0x20005b30
 800c378:	20005a2c 	.word	0x20005a2c
 800c37c:	20005ae8 	.word	0x20005ae8
 800c380:	20005a28 	.word	0x20005a28
 800c384:	20005b3c 	.word	0x20005b3c

0800c388 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c390:	4b06      	ldr	r3, [pc, #24]	; (800c3ac <vTaskInternalSetTimeOutState+0x24>)
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c398:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <vTaskInternalSetTimeOutState+0x28>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	605a      	str	r2, [r3, #4]
}
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr
 800c3ac:	20005b40 	.word	0x20005b40
 800c3b0:	20005b2c 	.word	0x20005b2c

0800c3b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10a      	bne.n	800c3da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	613b      	str	r3, [r7, #16]
}
 800c3d6:	bf00      	nop
 800c3d8:	e7fe      	b.n	800c3d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10a      	bne.n	800c3f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	60fb      	str	r3, [r7, #12]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c3f6:	f000 fc75 	bl	800cce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c3fa:	4b1d      	ldr	r3, [pc, #116]	; (800c470 <xTaskCheckForTimeOut+0xbc>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	69ba      	ldr	r2, [r7, #24]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c412:	d102      	bne.n	800c41a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c414:	2300      	movs	r3, #0
 800c416:	61fb      	str	r3, [r7, #28]
 800c418:	e023      	b.n	800c462 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	4b15      	ldr	r3, [pc, #84]	; (800c474 <xTaskCheckForTimeOut+0xc0>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	429a      	cmp	r2, r3
 800c424:	d007      	beq.n	800c436 <xTaskCheckForTimeOut+0x82>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d302      	bcc.n	800c436 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c430:	2301      	movs	r3, #1
 800c432:	61fb      	str	r3, [r7, #28]
 800c434:	e015      	b.n	800c462 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	697a      	ldr	r2, [r7, #20]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d20b      	bcs.n	800c458 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	1ad2      	subs	r2, r2, r3
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff ff9b 	bl	800c388 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c452:	2300      	movs	r3, #0
 800c454:	61fb      	str	r3, [r7, #28]
 800c456:	e004      	b.n	800c462 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c45e:	2301      	movs	r3, #1
 800c460:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c462:	f000 fc6f 	bl	800cd44 <vPortExitCritical>

	return xReturn;
 800c466:	69fb      	ldr	r3, [r7, #28]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3720      	adds	r7, #32
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	20005b2c 	.word	0x20005b2c
 800c474:	20005b40 	.word	0x20005b40

0800c478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c478:	b480      	push	{r7}
 800c47a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c47c:	4b03      	ldr	r3, [pc, #12]	; (800c48c <vTaskMissedYield+0x14>)
 800c47e:	2201      	movs	r2, #1
 800c480:	601a      	str	r2, [r3, #0]
}
 800c482:	bf00      	nop
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	20005b3c 	.word	0x20005b3c

0800c490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c498:	f000 f852 	bl	800c540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c49c:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <prvIdleTask+0x28>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d9f9      	bls.n	800c498 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c4a4:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <prvIdleTask+0x2c>)
 800c4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c4b4:	e7f0      	b.n	800c498 <prvIdleTask+0x8>
 800c4b6:	bf00      	nop
 800c4b8:	20005a2c 	.word	0x20005a2c
 800c4bc:	e000ed04 	.word	0xe000ed04

0800c4c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	607b      	str	r3, [r7, #4]
 800c4ca:	e00c      	b.n	800c4e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4413      	add	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4a12      	ldr	r2, [pc, #72]	; (800c520 <prvInitialiseTaskLists+0x60>)
 800c4d8:	4413      	add	r3, r2
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fe fc23 	bl	800ad26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	607b      	str	r3, [r7, #4]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b06      	cmp	r3, #6
 800c4ea:	d9ef      	bls.n	800c4cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c4ec:	480d      	ldr	r0, [pc, #52]	; (800c524 <prvInitialiseTaskLists+0x64>)
 800c4ee:	f7fe fc1a 	bl	800ad26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c4f2:	480d      	ldr	r0, [pc, #52]	; (800c528 <prvInitialiseTaskLists+0x68>)
 800c4f4:	f7fe fc17 	bl	800ad26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4f8:	480c      	ldr	r0, [pc, #48]	; (800c52c <prvInitialiseTaskLists+0x6c>)
 800c4fa:	f7fe fc14 	bl	800ad26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4fe:	480c      	ldr	r0, [pc, #48]	; (800c530 <prvInitialiseTaskLists+0x70>)
 800c500:	f7fe fc11 	bl	800ad26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c504:	480b      	ldr	r0, [pc, #44]	; (800c534 <prvInitialiseTaskLists+0x74>)
 800c506:	f7fe fc0e 	bl	800ad26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c50a:	4b0b      	ldr	r3, [pc, #44]	; (800c538 <prvInitialiseTaskLists+0x78>)
 800c50c:	4a05      	ldr	r2, [pc, #20]	; (800c524 <prvInitialiseTaskLists+0x64>)
 800c50e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c510:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <prvInitialiseTaskLists+0x7c>)
 800c512:	4a05      	ldr	r2, [pc, #20]	; (800c528 <prvInitialiseTaskLists+0x68>)
 800c514:	601a      	str	r2, [r3, #0]
}
 800c516:	bf00      	nop
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	20005a2c 	.word	0x20005a2c
 800c524:	20005ab8 	.word	0x20005ab8
 800c528:	20005acc 	.word	0x20005acc
 800c52c:	20005ae8 	.word	0x20005ae8
 800c530:	20005afc 	.word	0x20005afc
 800c534:	20005b14 	.word	0x20005b14
 800c538:	20005ae0 	.word	0x20005ae0
 800c53c:	20005ae4 	.word	0x20005ae4

0800c540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c546:	e019      	b.n	800c57c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c548:	f000 fbcc 	bl	800cce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c54c:	4b10      	ldr	r3, [pc, #64]	; (800c590 <prvCheckTasksWaitingTermination+0x50>)
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3304      	adds	r3, #4
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fe fc6e 	bl	800ae3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c55e:	4b0d      	ldr	r3, [pc, #52]	; (800c594 <prvCheckTasksWaitingTermination+0x54>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3b01      	subs	r3, #1
 800c564:	4a0b      	ldr	r2, [pc, #44]	; (800c594 <prvCheckTasksWaitingTermination+0x54>)
 800c566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c568:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <prvCheckTasksWaitingTermination+0x58>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	4a0a      	ldr	r2, [pc, #40]	; (800c598 <prvCheckTasksWaitingTermination+0x58>)
 800c570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c572:	f000 fbe7 	bl	800cd44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f810 	bl	800c59c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c57c:	4b06      	ldr	r3, [pc, #24]	; (800c598 <prvCheckTasksWaitingTermination+0x58>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1e1      	bne.n	800c548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20005afc 	.word	0x20005afc
 800c594:	20005b28 	.word	0x20005b28
 800c598:	20005b10 	.word	0x20005b10

0800c59c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	334c      	adds	r3, #76	; 0x4c
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f001 fd53 	bl	800e054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d108      	bne.n	800c5ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f000 fd7f 	bl	800d0c0 <vPortFree>
				vPortFree( pxTCB );
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fd7c 	bl	800d0c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c5c8:	e018      	b.n	800c5fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d103      	bne.n	800c5dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fd73 	bl	800d0c0 <vPortFree>
	}
 800c5da:	e00f      	b.n	800c5fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d00a      	beq.n	800c5fc <prvDeleteTCB+0x60>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	60fb      	str	r3, [r7, #12]
}
 800c5f8:	bf00      	nop
 800c5fa:	e7fe      	b.n	800c5fa <prvDeleteTCB+0x5e>
	}
 800c5fc:	bf00      	nop
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c60a:	4b0c      	ldr	r3, [pc, #48]	; (800c63c <prvResetNextTaskUnblockTime+0x38>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d104      	bne.n	800c61e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c614:	4b0a      	ldr	r3, [pc, #40]	; (800c640 <prvResetNextTaskUnblockTime+0x3c>)
 800c616:	f04f 32ff 	mov.w	r2, #4294967295
 800c61a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c61c:	e008      	b.n	800c630 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c61e:	4b07      	ldr	r3, [pc, #28]	; (800c63c <prvResetNextTaskUnblockTime+0x38>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	4a04      	ldr	r2, [pc, #16]	; (800c640 <prvResetNextTaskUnblockTime+0x3c>)
 800c62e:	6013      	str	r3, [r2, #0]
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr
 800c63c:	20005ae0 	.word	0x20005ae0
 800c640:	20005b48 	.word	0x20005b48

0800c644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c64a:	4b0b      	ldr	r3, [pc, #44]	; (800c678 <xTaskGetSchedulerState+0x34>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d102      	bne.n	800c658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c652:	2301      	movs	r3, #1
 800c654:	607b      	str	r3, [r7, #4]
 800c656:	e008      	b.n	800c66a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c658:	4b08      	ldr	r3, [pc, #32]	; (800c67c <xTaskGetSchedulerState+0x38>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d102      	bne.n	800c666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c660:	2302      	movs	r3, #2
 800c662:	607b      	str	r3, [r7, #4]
 800c664:	e001      	b.n	800c66a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c666:	2300      	movs	r3, #0
 800c668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c66a:	687b      	ldr	r3, [r7, #4]
	}
 800c66c:	4618      	mov	r0, r3
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	20005b34 	.word	0x20005b34
 800c67c:	20005b50 	.word	0x20005b50

0800c680 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d05e      	beq.n	800c754 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c69a:	4b31      	ldr	r3, [pc, #196]	; (800c760 <xTaskPriorityInherit+0xe0>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d24e      	bcs.n	800c742 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	db06      	blt.n	800c6ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6ac:	4b2c      	ldr	r3, [pc, #176]	; (800c760 <xTaskPriorityInherit+0xe0>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b2:	f1c3 0207 	rsb	r2, r3, #7
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	6959      	ldr	r1, [r3, #20]
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4a26      	ldr	r2, [pc, #152]	; (800c764 <xTaskPriorityInherit+0xe4>)
 800c6cc:	4413      	add	r3, r2
 800c6ce:	4299      	cmp	r1, r3
 800c6d0:	d12f      	bne.n	800c732 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fe fbaf 	bl	800ae3a <uxListRemove>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10a      	bne.n	800c6f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ec:	43da      	mvns	r2, r3
 800c6ee:	4b1e      	ldr	r3, [pc, #120]	; (800c768 <xTaskPriorityInherit+0xe8>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	4a1c      	ldr	r2, [pc, #112]	; (800c768 <xTaskPriorityInherit+0xe8>)
 800c6f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c6f8:	4b19      	ldr	r3, [pc, #100]	; (800c760 <xTaskPriorityInherit+0xe0>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c706:	2201      	movs	r2, #1
 800c708:	409a      	lsls	r2, r3
 800c70a:	4b17      	ldr	r3, [pc, #92]	; (800c768 <xTaskPriorityInherit+0xe8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4313      	orrs	r3, r2
 800c710:	4a15      	ldr	r2, [pc, #84]	; (800c768 <xTaskPriorityInherit+0xe8>)
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c718:	4613      	mov	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	4a10      	ldr	r2, [pc, #64]	; (800c764 <xTaskPriorityInherit+0xe4>)
 800c722:	441a      	add	r2, r3
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	3304      	adds	r3, #4
 800c728:	4619      	mov	r1, r3
 800c72a:	4610      	mov	r0, r2
 800c72c:	f7fe fb28 	bl	800ad80 <vListInsertEnd>
 800c730:	e004      	b.n	800c73c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c732:	4b0b      	ldr	r3, [pc, #44]	; (800c760 <xTaskPriorityInherit+0xe0>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c73c:	2301      	movs	r3, #1
 800c73e:	60fb      	str	r3, [r7, #12]
 800c740:	e008      	b.n	800c754 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c746:	4b06      	ldr	r3, [pc, #24]	; (800c760 <xTaskPriorityInherit+0xe0>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d201      	bcs.n	800c754 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c750:	2301      	movs	r3, #1
 800c752:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c754:	68fb      	ldr	r3, [r7, #12]
	}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20005a28 	.word	0x20005a28
 800c764:	20005a2c 	.word	0x20005a2c
 800c768:	20005b30 	.word	0x20005b30

0800c76c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c778:	2300      	movs	r3, #0
 800c77a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d06e      	beq.n	800c860 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c782:	4b3a      	ldr	r3, [pc, #232]	; (800c86c <xTaskPriorityDisinherit+0x100>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d00a      	beq.n	800c7a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	60fb      	str	r3, [r7, #12]
}
 800c79e:	bf00      	nop
 800c7a0:	e7fe      	b.n	800c7a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10a      	bne.n	800c7c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	60bb      	str	r3, [r7, #8]
}
 800c7bc:	bf00      	nop
 800c7be:	e7fe      	b.n	800c7be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7c4:	1e5a      	subs	r2, r3, #1
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d044      	beq.n	800c860 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d140      	bne.n	800c860 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe fb29 	bl	800ae3a <uxListRemove>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d115      	bne.n	800c81a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f2:	491f      	ldr	r1, [pc, #124]	; (800c870 <xTaskPriorityDisinherit+0x104>)
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4413      	add	r3, r2
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	440b      	add	r3, r1
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10a      	bne.n	800c81a <xTaskPriorityDisinherit+0xae>
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c808:	2201      	movs	r2, #1
 800c80a:	fa02 f303 	lsl.w	r3, r2, r3
 800c80e:	43da      	mvns	r2, r3
 800c810:	4b18      	ldr	r3, [pc, #96]	; (800c874 <xTaskPriorityDisinherit+0x108>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4013      	ands	r3, r2
 800c816:	4a17      	ldr	r2, [pc, #92]	; (800c874 <xTaskPriorityDisinherit+0x108>)
 800c818:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c826:	f1c3 0207 	rsb	r2, r3, #7
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c832:	2201      	movs	r2, #1
 800c834:	409a      	lsls	r2, r3
 800c836:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <xTaskPriorityDisinherit+0x108>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	4a0d      	ldr	r2, [pc, #52]	; (800c874 <xTaskPriorityDisinherit+0x108>)
 800c83e:	6013      	str	r3, [r2, #0]
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c844:	4613      	mov	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	4413      	add	r3, r2
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4a08      	ldr	r2, [pc, #32]	; (800c870 <xTaskPriorityDisinherit+0x104>)
 800c84e:	441a      	add	r2, r3
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	3304      	adds	r3, #4
 800c854:	4619      	mov	r1, r3
 800c856:	4610      	mov	r0, r2
 800c858:	f7fe fa92 	bl	800ad80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c85c:	2301      	movs	r3, #1
 800c85e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c860:	697b      	ldr	r3, [r7, #20]
	}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20005a28 	.word	0x20005a28
 800c870:	20005a2c 	.word	0x20005a2c
 800c874:	20005b30 	.word	0x20005b30

0800c878 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b088      	sub	sp, #32
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c886:	2301      	movs	r3, #1
 800c888:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d077      	beq.n	800c980 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	60fb      	str	r3, [r7, #12]
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d902      	bls.n	800c8be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	e002      	b.n	800c8c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c8:	69fa      	ldr	r2, [r7, #28]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d058      	beq.n	800c980 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d153      	bne.n	800c980 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c8d8:	4b2b      	ldr	r3, [pc, #172]	; (800c988 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	69ba      	ldr	r2, [r7, #24]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d10a      	bne.n	800c8f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	60bb      	str	r3, [r7, #8]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	69fa      	ldr	r2, [r7, #28]
 800c902:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	db04      	blt.n	800c916 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	f1c3 0207 	rsb	r2, r3, #7
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	6959      	ldr	r1, [r3, #20]
 800c91a:	693a      	ldr	r2, [r7, #16]
 800c91c:	4613      	mov	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	4a19      	ldr	r2, [pc, #100]	; (800c98c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c926:	4413      	add	r3, r2
 800c928:	4299      	cmp	r1, r3
 800c92a:	d129      	bne.n	800c980 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	3304      	adds	r3, #4
 800c930:	4618      	mov	r0, r3
 800c932:	f7fe fa82 	bl	800ae3a <uxListRemove>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	2201      	movs	r2, #1
 800c942:	fa02 f303 	lsl.w	r3, r2, r3
 800c946:	43da      	mvns	r2, r3
 800c948:	4b11      	ldr	r3, [pc, #68]	; (800c990 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4013      	ands	r3, r2
 800c94e:	4a10      	ldr	r2, [pc, #64]	; (800c990 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c950:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c956:	2201      	movs	r2, #1
 800c958:	409a      	lsls	r2, r3
 800c95a:	4b0d      	ldr	r3, [pc, #52]	; (800c990 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4313      	orrs	r3, r2
 800c960:	4a0b      	ldr	r2, [pc, #44]	; (800c990 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c962:	6013      	str	r3, [r2, #0]
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c968:	4613      	mov	r3, r2
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	4413      	add	r3, r2
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4a06      	ldr	r2, [pc, #24]	; (800c98c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c972:	441a      	add	r2, r3
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	3304      	adds	r3, #4
 800c978:	4619      	mov	r1, r3
 800c97a:	4610      	mov	r0, r2
 800c97c:	f7fe fa00 	bl	800ad80 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c980:	bf00      	nop
 800c982:	3720      	adds	r7, #32
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	20005a28 	.word	0x20005a28
 800c98c:	20005a2c 	.word	0x20005a2c
 800c990:	20005b30 	.word	0x20005b30

0800c994 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c994:	b480      	push	{r7}
 800c996:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c998:	4b07      	ldr	r3, [pc, #28]	; (800c9b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d004      	beq.n	800c9aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c9a0:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9a6:	3201      	adds	r2, #1
 800c9a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c9aa:	4b03      	ldr	r3, [pc, #12]	; (800c9b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
	}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr
 800c9b8:	20005a28 	.word	0x20005a28

0800c9bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c9c6:	4b29      	ldr	r3, [pc, #164]	; (800ca6c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9cc:	4b28      	ldr	r3, [pc, #160]	; (800ca70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe fa31 	bl	800ae3a <uxListRemove>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10b      	bne.n	800c9f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c9de:	4b24      	ldr	r3, [pc, #144]	; (800ca70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ea:	43da      	mvns	r2, r3
 800c9ec:	4b21      	ldr	r3, [pc, #132]	; (800ca74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	4a20      	ldr	r2, [pc, #128]	; (800ca74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c9f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9fc:	d10a      	bne.n	800ca14 <prvAddCurrentTaskToDelayedList+0x58>
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d007      	beq.n	800ca14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca04:	4b1a      	ldr	r3, [pc, #104]	; (800ca70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	481a      	ldr	r0, [pc, #104]	; (800ca78 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ca0e:	f7fe f9b7 	bl	800ad80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca12:	e026      	b.n	800ca62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4413      	add	r3, r2
 800ca1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca1c:	4b14      	ldr	r3, [pc, #80]	; (800ca70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d209      	bcs.n	800ca40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca2c:	4b13      	ldr	r3, [pc, #76]	; (800ca7c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	4b0f      	ldr	r3, [pc, #60]	; (800ca70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	3304      	adds	r3, #4
 800ca36:	4619      	mov	r1, r3
 800ca38:	4610      	mov	r0, r2
 800ca3a:	f7fe f9c5 	bl	800adc8 <vListInsert>
}
 800ca3e:	e010      	b.n	800ca62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca40:	4b0f      	ldr	r3, [pc, #60]	; (800ca80 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	f7fe f9bb 	bl	800adc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca52:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d202      	bcs.n	800ca62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ca5c:	4a09      	ldr	r2, [pc, #36]	; (800ca84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	6013      	str	r3, [r2, #0]
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20005b2c 	.word	0x20005b2c
 800ca70:	20005a28 	.word	0x20005a28
 800ca74:	20005b30 	.word	0x20005b30
 800ca78:	20005b14 	.word	0x20005b14
 800ca7c:	20005ae4 	.word	0x20005ae4
 800ca80:	20005ae0 	.word	0x20005ae0
 800ca84:	20005b48 	.word	0x20005b48

0800ca88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	3b04      	subs	r3, #4
 800ca98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800caa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3b04      	subs	r3, #4
 800caa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	f023 0201 	bic.w	r2, r3, #1
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3b04      	subs	r3, #4
 800cab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cab8:	4a0c      	ldr	r2, [pc, #48]	; (800caec <pxPortInitialiseStack+0x64>)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3b14      	subs	r3, #20
 800cac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	3b04      	subs	r3, #4
 800cace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f06f 0202 	mvn.w	r2, #2
 800cad6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3b20      	subs	r3, #32
 800cadc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cade:	68fb      	ldr	r3, [r7, #12]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3714      	adds	r7, #20
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	0800caf1 	.word	0x0800caf1

0800caf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cafa:	4b12      	ldr	r3, [pc, #72]	; (800cb44 <prvTaskExitError+0x54>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb02:	d00a      	beq.n	800cb1a <prvTaskExitError+0x2a>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	60fb      	str	r3, [r7, #12]
}
 800cb16:	bf00      	nop
 800cb18:	e7fe      	b.n	800cb18 <prvTaskExitError+0x28>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	60bb      	str	r3, [r7, #8]
}
 800cb2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb2e:	bf00      	nop
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0fc      	beq.n	800cb30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb36:	bf00      	nop
 800cb38:	bf00      	nop
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	2000002c 	.word	0x2000002c
	...

0800cb50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb50:	4b07      	ldr	r3, [pc, #28]	; (800cb70 <pxCurrentTCBConst2>)
 800cb52:	6819      	ldr	r1, [r3, #0]
 800cb54:	6808      	ldr	r0, [r1, #0]
 800cb56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5a:	f380 8809 	msr	PSP, r0
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f04f 0000 	mov.w	r0, #0
 800cb66:	f380 8811 	msr	BASEPRI, r0
 800cb6a:	4770      	bx	lr
 800cb6c:	f3af 8000 	nop.w

0800cb70 <pxCurrentTCBConst2>:
 800cb70:	20005a28 	.word	0x20005a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop

0800cb78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb78:	4808      	ldr	r0, [pc, #32]	; (800cb9c <prvPortStartFirstTask+0x24>)
 800cb7a:	6800      	ldr	r0, [r0, #0]
 800cb7c:	6800      	ldr	r0, [r0, #0]
 800cb7e:	f380 8808 	msr	MSP, r0
 800cb82:	f04f 0000 	mov.w	r0, #0
 800cb86:	f380 8814 	msr	CONTROL, r0
 800cb8a:	b662      	cpsie	i
 800cb8c:	b661      	cpsie	f
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	df00      	svc	0
 800cb98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb9a:	bf00      	nop
 800cb9c:	e000ed08 	.word	0xe000ed08

0800cba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cba6:	4b46      	ldr	r3, [pc, #280]	; (800ccc0 <xPortStartScheduler+0x120>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a46      	ldr	r2, [pc, #280]	; (800ccc4 <xPortStartScheduler+0x124>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d10a      	bne.n	800cbc6 <xPortStartScheduler+0x26>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	613b      	str	r3, [r7, #16]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cbc6:	4b3e      	ldr	r3, [pc, #248]	; (800ccc0 <xPortStartScheduler+0x120>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a3f      	ldr	r2, [pc, #252]	; (800ccc8 <xPortStartScheduler+0x128>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d10a      	bne.n	800cbe6 <xPortStartScheduler+0x46>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	60fb      	str	r3, [r7, #12]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cbe6:	4b39      	ldr	r3, [pc, #228]	; (800cccc <xPortStartScheduler+0x12c>)
 800cbe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	22ff      	movs	r2, #255	; 0xff
 800cbf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc00:	78fb      	ldrb	r3, [r7, #3]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	4b31      	ldr	r3, [pc, #196]	; (800ccd0 <xPortStartScheduler+0x130>)
 800cc0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc0e:	4b31      	ldr	r3, [pc, #196]	; (800ccd4 <xPortStartScheduler+0x134>)
 800cc10:	2207      	movs	r2, #7
 800cc12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc14:	e009      	b.n	800cc2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc16:	4b2f      	ldr	r3, [pc, #188]	; (800ccd4 <xPortStartScheduler+0x134>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	4a2d      	ldr	r2, [pc, #180]	; (800ccd4 <xPortStartScheduler+0x134>)
 800cc1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc20:	78fb      	ldrb	r3, [r7, #3]
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc2a:	78fb      	ldrb	r3, [r7, #3]
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc32:	2b80      	cmp	r3, #128	; 0x80
 800cc34:	d0ef      	beq.n	800cc16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc36:	4b27      	ldr	r3, [pc, #156]	; (800ccd4 <xPortStartScheduler+0x134>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f1c3 0307 	rsb	r3, r3, #7
 800cc3e:	2b04      	cmp	r3, #4
 800cc40:	d00a      	beq.n	800cc58 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	60bb      	str	r3, [r7, #8]
}
 800cc54:	bf00      	nop
 800cc56:	e7fe      	b.n	800cc56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc58:	4b1e      	ldr	r3, [pc, #120]	; (800ccd4 <xPortStartScheduler+0x134>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	021b      	lsls	r3, r3, #8
 800cc5e:	4a1d      	ldr	r2, [pc, #116]	; (800ccd4 <xPortStartScheduler+0x134>)
 800cc60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc62:	4b1c      	ldr	r3, [pc, #112]	; (800ccd4 <xPortStartScheduler+0x134>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc6a:	4a1a      	ldr	r2, [pc, #104]	; (800ccd4 <xPortStartScheduler+0x134>)
 800cc6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc76:	4b18      	ldr	r3, [pc, #96]	; (800ccd8 <xPortStartScheduler+0x138>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a17      	ldr	r2, [pc, #92]	; (800ccd8 <xPortStartScheduler+0x138>)
 800cc7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc82:	4b15      	ldr	r3, [pc, #84]	; (800ccd8 <xPortStartScheduler+0x138>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a14      	ldr	r2, [pc, #80]	; (800ccd8 <xPortStartScheduler+0x138>)
 800cc88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc8e:	f000 f8dd 	bl	800ce4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc92:	4b12      	ldr	r3, [pc, #72]	; (800ccdc <xPortStartScheduler+0x13c>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc98:	f000 f8fc 	bl	800ce94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc9c:	4b10      	ldr	r3, [pc, #64]	; (800cce0 <xPortStartScheduler+0x140>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a0f      	ldr	r2, [pc, #60]	; (800cce0 <xPortStartScheduler+0x140>)
 800cca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cca8:	f7ff ff66 	bl	800cb78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ccac:	f7ff fa84 	bl	800c1b8 <vTaskSwitchContext>
	prvTaskExitError();
 800ccb0:	f7ff ff1e 	bl	800caf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	e000ed00 	.word	0xe000ed00
 800ccc4:	410fc271 	.word	0x410fc271
 800ccc8:	410fc270 	.word	0x410fc270
 800cccc:	e000e400 	.word	0xe000e400
 800ccd0:	20005b54 	.word	0x20005b54
 800ccd4:	20005b58 	.word	0x20005b58
 800ccd8:	e000ed20 	.word	0xe000ed20
 800ccdc:	2000002c 	.word	0x2000002c
 800cce0:	e000ef34 	.word	0xe000ef34

0800cce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	f383 8811 	msr	BASEPRI, r3
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	607b      	str	r3, [r7, #4]
}
 800ccfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ccfe:	4b0f      	ldr	r3, [pc, #60]	; (800cd3c <vPortEnterCritical+0x58>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	3301      	adds	r3, #1
 800cd04:	4a0d      	ldr	r2, [pc, #52]	; (800cd3c <vPortEnterCritical+0x58>)
 800cd06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd08:	4b0c      	ldr	r3, [pc, #48]	; (800cd3c <vPortEnterCritical+0x58>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d10f      	bne.n	800cd30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd10:	4b0b      	ldr	r3, [pc, #44]	; (800cd40 <vPortEnterCritical+0x5c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00a      	beq.n	800cd30 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	603b      	str	r3, [r7, #0]
}
 800cd2c:	bf00      	nop
 800cd2e:	e7fe      	b.n	800cd2e <vPortEnterCritical+0x4a>
	}
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	2000002c 	.word	0x2000002c
 800cd40:	e000ed04 	.word	0xe000ed04

0800cd44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd4a:	4b12      	ldr	r3, [pc, #72]	; (800cd94 <vPortExitCritical+0x50>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10a      	bne.n	800cd68 <vPortExitCritical+0x24>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	607b      	str	r3, [r7, #4]
}
 800cd64:	bf00      	nop
 800cd66:	e7fe      	b.n	800cd66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd68:	4b0a      	ldr	r3, [pc, #40]	; (800cd94 <vPortExitCritical+0x50>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	4a09      	ldr	r2, [pc, #36]	; (800cd94 <vPortExitCritical+0x50>)
 800cd70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd72:	4b08      	ldr	r3, [pc, #32]	; (800cd94 <vPortExitCritical+0x50>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d105      	bne.n	800cd86 <vPortExitCritical+0x42>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	f383 8811 	msr	BASEPRI, r3
}
 800cd84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd86:	bf00      	nop
 800cd88:	370c      	adds	r7, #12
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	2000002c 	.word	0x2000002c
	...

0800cda0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cda0:	f3ef 8009 	mrs	r0, PSP
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	4b15      	ldr	r3, [pc, #84]	; (800ce00 <pxCurrentTCBConst>)
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	f01e 0f10 	tst.w	lr, #16
 800cdb0:	bf08      	it	eq
 800cdb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cdb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdba:	6010      	str	r0, [r2, #0]
 800cdbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cdc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cdc4:	f380 8811 	msr	BASEPRI, r0
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f7ff f9f2 	bl	800c1b8 <vTaskSwitchContext>
 800cdd4:	f04f 0000 	mov.w	r0, #0
 800cdd8:	f380 8811 	msr	BASEPRI, r0
 800cddc:	bc09      	pop	{r0, r3}
 800cdde:	6819      	ldr	r1, [r3, #0]
 800cde0:	6808      	ldr	r0, [r1, #0]
 800cde2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde6:	f01e 0f10 	tst.w	lr, #16
 800cdea:	bf08      	it	eq
 800cdec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdf0:	f380 8809 	msr	PSP, r0
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	f3af 8000 	nop.w

0800ce00 <pxCurrentTCBConst>:
 800ce00:	20005a28 	.word	0x20005a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce04:	bf00      	nop
 800ce06:	bf00      	nop

0800ce08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	607b      	str	r3, [r7, #4]
}
 800ce20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce22:	f7ff f911 	bl	800c048 <xTaskIncrementTick>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d003      	beq.n	800ce34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce2c:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <SysTick_Handler+0x40>)
 800ce2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	2300      	movs	r3, #0
 800ce36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	f383 8811 	msr	BASEPRI, r3
}
 800ce3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	e000ed04 	.word	0xe000ed04

0800ce4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce50:	4b0b      	ldr	r3, [pc, #44]	; (800ce80 <vPortSetupTimerInterrupt+0x34>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <vPortSetupTimerInterrupt+0x38>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce5c:	4b0a      	ldr	r3, [pc, #40]	; (800ce88 <vPortSetupTimerInterrupt+0x3c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a0a      	ldr	r2, [pc, #40]	; (800ce8c <vPortSetupTimerInterrupt+0x40>)
 800ce62:	fba2 2303 	umull	r2, r3, r2, r3
 800ce66:	099b      	lsrs	r3, r3, #6
 800ce68:	4a09      	ldr	r2, [pc, #36]	; (800ce90 <vPortSetupTimerInterrupt+0x44>)
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce6e:	4b04      	ldr	r3, [pc, #16]	; (800ce80 <vPortSetupTimerInterrupt+0x34>)
 800ce70:	2207      	movs	r2, #7
 800ce72:	601a      	str	r2, [r3, #0]
}
 800ce74:	bf00      	nop
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	e000e010 	.word	0xe000e010
 800ce84:	e000e018 	.word	0xe000e018
 800ce88:	20000004 	.word	0x20000004
 800ce8c:	10624dd3 	.word	0x10624dd3
 800ce90:	e000e014 	.word	0xe000e014

0800ce94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cea4 <vPortEnableVFP+0x10>
 800ce98:	6801      	ldr	r1, [r0, #0]
 800ce9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce9e:	6001      	str	r1, [r0, #0]
 800cea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cea2:	bf00      	nop
 800cea4:	e000ed88 	.word	0xe000ed88

0800cea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ceae:	f3ef 8305 	mrs	r3, IPSR
 800ceb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b0f      	cmp	r3, #15
 800ceb8:	d914      	bls.n	800cee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ceba:	4a17      	ldr	r2, [pc, #92]	; (800cf18 <vPortValidateInterruptPriority+0x70>)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	4413      	add	r3, r2
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cec4:	4b15      	ldr	r3, [pc, #84]	; (800cf1c <vPortValidateInterruptPriority+0x74>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	7afa      	ldrb	r2, [r7, #11]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d20a      	bcs.n	800cee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	607b      	str	r3, [r7, #4]
}
 800cee0:	bf00      	nop
 800cee2:	e7fe      	b.n	800cee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cee4:	4b0e      	ldr	r3, [pc, #56]	; (800cf20 <vPortValidateInterruptPriority+0x78>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ceec:	4b0d      	ldr	r3, [pc, #52]	; (800cf24 <vPortValidateInterruptPriority+0x7c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d90a      	bls.n	800cf0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	603b      	str	r3, [r7, #0]
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <vPortValidateInterruptPriority+0x60>
	}
 800cf0a:	bf00      	nop
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	e000e3f0 	.word	0xe000e3f0
 800cf1c:	20005b54 	.word	0x20005b54
 800cf20:	e000ed0c 	.word	0xe000ed0c
 800cf24:	20005b58 	.word	0x20005b58

0800cf28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b08a      	sub	sp, #40	; 0x28
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf34:	f7fe ffbc 	bl	800beb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf38:	4b5b      	ldr	r3, [pc, #364]	; (800d0a8 <pvPortMalloc+0x180>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d101      	bne.n	800cf44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf40:	f000 f920 	bl	800d184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf44:	4b59      	ldr	r3, [pc, #356]	; (800d0ac <pvPortMalloc+0x184>)
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4013      	ands	r3, r2
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f040 8093 	bne.w	800d078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d01d      	beq.n	800cf94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf58:	2208      	movs	r2, #8
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f003 0307 	and.w	r3, r3, #7
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d014      	beq.n	800cf94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f023 0307 	bic.w	r3, r3, #7
 800cf70:	3308      	adds	r3, #8
 800cf72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f003 0307 	and.w	r3, r3, #7
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00a      	beq.n	800cf94 <pvPortMalloc+0x6c>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	617b      	str	r3, [r7, #20]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d06e      	beq.n	800d078 <pvPortMalloc+0x150>
 800cf9a:	4b45      	ldr	r3, [pc, #276]	; (800d0b0 <pvPortMalloc+0x188>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d869      	bhi.n	800d078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfa4:	4b43      	ldr	r3, [pc, #268]	; (800d0b4 <pvPortMalloc+0x18c>)
 800cfa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfa8:	4b42      	ldr	r3, [pc, #264]	; (800d0b4 <pvPortMalloc+0x18c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfae:	e004      	b.n	800cfba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d903      	bls.n	800cfcc <pvPortMalloc+0xa4>
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1f1      	bne.n	800cfb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cfcc:	4b36      	ldr	r3, [pc, #216]	; (800d0a8 <pvPortMalloc+0x180>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d050      	beq.n	800d078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2208      	movs	r2, #8
 800cfdc:	4413      	add	r3, r2
 800cfde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	6a3b      	ldr	r3, [r7, #32]
 800cfe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	1ad2      	subs	r2, r2, r3
 800cff0:	2308      	movs	r3, #8
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d91f      	bls.n	800d038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4413      	add	r3, r2
 800cffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	f003 0307 	and.w	r3, r3, #7
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00a      	beq.n	800d020 <pvPortMalloc+0xf8>
	__asm volatile
 800d00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	613b      	str	r3, [r7, #16]
}
 800d01c:	bf00      	nop
 800d01e:	e7fe      	b.n	800d01e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d022:	685a      	ldr	r2, [r3, #4]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	1ad2      	subs	r2, r2, r3
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d032:	69b8      	ldr	r0, [r7, #24]
 800d034:	f000 f908 	bl	800d248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d038:	4b1d      	ldr	r3, [pc, #116]	; (800d0b0 <pvPortMalloc+0x188>)
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	4a1b      	ldr	r2, [pc, #108]	; (800d0b0 <pvPortMalloc+0x188>)
 800d044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d046:	4b1a      	ldr	r3, [pc, #104]	; (800d0b0 <pvPortMalloc+0x188>)
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	4b1b      	ldr	r3, [pc, #108]	; (800d0b8 <pvPortMalloc+0x190>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d203      	bcs.n	800d05a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d052:	4b17      	ldr	r3, [pc, #92]	; (800d0b0 <pvPortMalloc+0x188>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a18      	ldr	r2, [pc, #96]	; (800d0b8 <pvPortMalloc+0x190>)
 800d058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	685a      	ldr	r2, [r3, #4]
 800d05e:	4b13      	ldr	r3, [pc, #76]	; (800d0ac <pvPortMalloc+0x184>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	431a      	orrs	r2, r3
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	2200      	movs	r2, #0
 800d06c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d06e:	4b13      	ldr	r3, [pc, #76]	; (800d0bc <pvPortMalloc+0x194>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	4a11      	ldr	r2, [pc, #68]	; (800d0bc <pvPortMalloc+0x194>)
 800d076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d078:	f7fe ff28 	bl	800becc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	f003 0307 	and.w	r3, r3, #7
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00a      	beq.n	800d09c <pvPortMalloc+0x174>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	60fb      	str	r3, [r7, #12]
}
 800d098:	bf00      	nop
 800d09a:	e7fe      	b.n	800d09a <pvPortMalloc+0x172>
	return pvReturn;
 800d09c:	69fb      	ldr	r3, [r7, #28]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3728      	adds	r7, #40	; 0x28
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20009764 	.word	0x20009764
 800d0ac:	20009778 	.word	0x20009778
 800d0b0:	20009768 	.word	0x20009768
 800d0b4:	2000975c 	.word	0x2000975c
 800d0b8:	2000976c 	.word	0x2000976c
 800d0bc:	20009770 	.word	0x20009770

0800d0c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d04d      	beq.n	800d16e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d0d2:	2308      	movs	r3, #8
 800d0d4:	425b      	negs	r3, r3
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	4413      	add	r3, r2
 800d0da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	685a      	ldr	r2, [r3, #4]
 800d0e4:	4b24      	ldr	r3, [pc, #144]	; (800d178 <vPortFree+0xb8>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4013      	ands	r3, r2
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10a      	bne.n	800d104 <vPortFree+0x44>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	60fb      	str	r3, [r7, #12]
}
 800d100:	bf00      	nop
 800d102:	e7fe      	b.n	800d102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00a      	beq.n	800d122 <vPortFree+0x62>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	60bb      	str	r3, [r7, #8]
}
 800d11e:	bf00      	nop
 800d120:	e7fe      	b.n	800d120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	4b14      	ldr	r3, [pc, #80]	; (800d178 <vPortFree+0xb8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4013      	ands	r3, r2
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01e      	beq.n	800d16e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d11a      	bne.n	800d16e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	4b0e      	ldr	r3, [pc, #56]	; (800d178 <vPortFree+0xb8>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	43db      	mvns	r3, r3
 800d142:	401a      	ands	r2, r3
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d148:	f7fe feb2 	bl	800beb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	685a      	ldr	r2, [r3, #4]
 800d150:	4b0a      	ldr	r3, [pc, #40]	; (800d17c <vPortFree+0xbc>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4413      	add	r3, r2
 800d156:	4a09      	ldr	r2, [pc, #36]	; (800d17c <vPortFree+0xbc>)
 800d158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d15a:	6938      	ldr	r0, [r7, #16]
 800d15c:	f000 f874 	bl	800d248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d160:	4b07      	ldr	r3, [pc, #28]	; (800d180 <vPortFree+0xc0>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3301      	adds	r3, #1
 800d166:	4a06      	ldr	r2, [pc, #24]	; (800d180 <vPortFree+0xc0>)
 800d168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d16a:	f7fe feaf 	bl	800becc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d16e:	bf00      	nop
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20009778 	.word	0x20009778
 800d17c:	20009768 	.word	0x20009768
 800d180:	20009774 	.word	0x20009774

0800d184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d18a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d190:	4b27      	ldr	r3, [pc, #156]	; (800d230 <prvHeapInit+0xac>)
 800d192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00c      	beq.n	800d1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3307      	adds	r3, #7
 800d1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f023 0307 	bic.w	r3, r3, #7
 800d1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	4a1f      	ldr	r2, [pc, #124]	; (800d230 <prvHeapInit+0xac>)
 800d1b4:	4413      	add	r3, r2
 800d1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1bc:	4a1d      	ldr	r2, [pc, #116]	; (800d234 <prvHeapInit+0xb0>)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1c2:	4b1c      	ldr	r3, [pc, #112]	; (800d234 <prvHeapInit+0xb0>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	68ba      	ldr	r2, [r7, #8]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1d0:	2208      	movs	r2, #8
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	1a9b      	subs	r3, r3, r2
 800d1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f023 0307 	bic.w	r3, r3, #7
 800d1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	4a15      	ldr	r2, [pc, #84]	; (800d238 <prvHeapInit+0xb4>)
 800d1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1e6:	4b14      	ldr	r3, [pc, #80]	; (800d238 <prvHeapInit+0xb4>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d1ee:	4b12      	ldr	r3, [pc, #72]	; (800d238 <prvHeapInit+0xb4>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	1ad2      	subs	r2, r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d204:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <prvHeapInit+0xb4>)
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	4a0a      	ldr	r2, [pc, #40]	; (800d23c <prvHeapInit+0xb8>)
 800d212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	4a09      	ldr	r2, [pc, #36]	; (800d240 <prvHeapInit+0xbc>)
 800d21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d21c:	4b09      	ldr	r3, [pc, #36]	; (800d244 <prvHeapInit+0xc0>)
 800d21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d222:	601a      	str	r2, [r3, #0]
}
 800d224:	bf00      	nop
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	20005b5c 	.word	0x20005b5c
 800d234:	2000975c 	.word	0x2000975c
 800d238:	20009764 	.word	0x20009764
 800d23c:	2000976c 	.word	0x2000976c
 800d240:	20009768 	.word	0x20009768
 800d244:	20009778 	.word	0x20009778

0800d248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d250:	4b28      	ldr	r3, [pc, #160]	; (800d2f4 <prvInsertBlockIntoFreeList+0xac>)
 800d252:	60fb      	str	r3, [r7, #12]
 800d254:	e002      	b.n	800d25c <prvInsertBlockIntoFreeList+0x14>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	60fb      	str	r3, [r7, #12]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	429a      	cmp	r2, r3
 800d264:	d8f7      	bhi.n	800d256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	4413      	add	r3, r2
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	429a      	cmp	r2, r3
 800d276:	d108      	bne.n	800d28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	441a      	add	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	441a      	add	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d118      	bne.n	800d2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	4b15      	ldr	r3, [pc, #84]	; (800d2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d00d      	beq.n	800d2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	441a      	add	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	e008      	b.n	800d2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2c6:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	e003      	b.n	800d2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d002      	beq.n	800d2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2e6:	bf00      	nop
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	2000975c 	.word	0x2000975c
 800d2f8:	20009764 	.word	0x20009764

0800d2fc <__cvt>:
 800d2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d300:	ec55 4b10 	vmov	r4, r5, d0
 800d304:	2d00      	cmp	r5, #0
 800d306:	460e      	mov	r6, r1
 800d308:	4619      	mov	r1, r3
 800d30a:	462b      	mov	r3, r5
 800d30c:	bfbb      	ittet	lt
 800d30e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d312:	461d      	movlt	r5, r3
 800d314:	2300      	movge	r3, #0
 800d316:	232d      	movlt	r3, #45	; 0x2d
 800d318:	700b      	strb	r3, [r1, #0]
 800d31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d31c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d320:	4691      	mov	r9, r2
 800d322:	f023 0820 	bic.w	r8, r3, #32
 800d326:	bfbc      	itt	lt
 800d328:	4622      	movlt	r2, r4
 800d32a:	4614      	movlt	r4, r2
 800d32c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d330:	d005      	beq.n	800d33e <__cvt+0x42>
 800d332:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d336:	d100      	bne.n	800d33a <__cvt+0x3e>
 800d338:	3601      	adds	r6, #1
 800d33a:	2102      	movs	r1, #2
 800d33c:	e000      	b.n	800d340 <__cvt+0x44>
 800d33e:	2103      	movs	r1, #3
 800d340:	ab03      	add	r3, sp, #12
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	ab02      	add	r3, sp, #8
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	ec45 4b10 	vmov	d0, r4, r5
 800d34c:	4653      	mov	r3, sl
 800d34e:	4632      	mov	r2, r6
 800d350:	f000 ffce 	bl	800e2f0 <_dtoa_r>
 800d354:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d358:	4607      	mov	r7, r0
 800d35a:	d102      	bne.n	800d362 <__cvt+0x66>
 800d35c:	f019 0f01 	tst.w	r9, #1
 800d360:	d022      	beq.n	800d3a8 <__cvt+0xac>
 800d362:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d366:	eb07 0906 	add.w	r9, r7, r6
 800d36a:	d110      	bne.n	800d38e <__cvt+0x92>
 800d36c:	783b      	ldrb	r3, [r7, #0]
 800d36e:	2b30      	cmp	r3, #48	; 0x30
 800d370:	d10a      	bne.n	800d388 <__cvt+0x8c>
 800d372:	2200      	movs	r2, #0
 800d374:	2300      	movs	r3, #0
 800d376:	4620      	mov	r0, r4
 800d378:	4629      	mov	r1, r5
 800d37a:	f7f3 fbd5 	bl	8000b28 <__aeabi_dcmpeq>
 800d37e:	b918      	cbnz	r0, 800d388 <__cvt+0x8c>
 800d380:	f1c6 0601 	rsb	r6, r6, #1
 800d384:	f8ca 6000 	str.w	r6, [sl]
 800d388:	f8da 3000 	ldr.w	r3, [sl]
 800d38c:	4499      	add	r9, r3
 800d38e:	2200      	movs	r2, #0
 800d390:	2300      	movs	r3, #0
 800d392:	4620      	mov	r0, r4
 800d394:	4629      	mov	r1, r5
 800d396:	f7f3 fbc7 	bl	8000b28 <__aeabi_dcmpeq>
 800d39a:	b108      	cbz	r0, 800d3a0 <__cvt+0xa4>
 800d39c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d3a0:	2230      	movs	r2, #48	; 0x30
 800d3a2:	9b03      	ldr	r3, [sp, #12]
 800d3a4:	454b      	cmp	r3, r9
 800d3a6:	d307      	bcc.n	800d3b8 <__cvt+0xbc>
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3ac:	1bdb      	subs	r3, r3, r7
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	b004      	add	sp, #16
 800d3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b8:	1c59      	adds	r1, r3, #1
 800d3ba:	9103      	str	r1, [sp, #12]
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e7f0      	b.n	800d3a2 <__cvt+0xa6>

0800d3c0 <__exponent>:
 800d3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	bfb8      	it	lt
 800d3c8:	4249      	neglt	r1, r1
 800d3ca:	f803 2b02 	strb.w	r2, [r3], #2
 800d3ce:	bfb4      	ite	lt
 800d3d0:	222d      	movlt	r2, #45	; 0x2d
 800d3d2:	222b      	movge	r2, #43	; 0x2b
 800d3d4:	2909      	cmp	r1, #9
 800d3d6:	7042      	strb	r2, [r0, #1]
 800d3d8:	dd2a      	ble.n	800d430 <__exponent+0x70>
 800d3da:	f10d 0207 	add.w	r2, sp, #7
 800d3de:	4617      	mov	r7, r2
 800d3e0:	260a      	movs	r6, #10
 800d3e2:	4694      	mov	ip, r2
 800d3e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800d3e8:	fb06 1415 	mls	r4, r6, r5, r1
 800d3ec:	3430      	adds	r4, #48	; 0x30
 800d3ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d3f2:	460c      	mov	r4, r1
 800d3f4:	2c63      	cmp	r4, #99	; 0x63
 800d3f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	dcf1      	bgt.n	800d3e2 <__exponent+0x22>
 800d3fe:	3130      	adds	r1, #48	; 0x30
 800d400:	f1ac 0402 	sub.w	r4, ip, #2
 800d404:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d408:	1c41      	adds	r1, r0, #1
 800d40a:	4622      	mov	r2, r4
 800d40c:	42ba      	cmp	r2, r7
 800d40e:	d30a      	bcc.n	800d426 <__exponent+0x66>
 800d410:	f10d 0209 	add.w	r2, sp, #9
 800d414:	eba2 020c 	sub.w	r2, r2, ip
 800d418:	42bc      	cmp	r4, r7
 800d41a:	bf88      	it	hi
 800d41c:	2200      	movhi	r2, #0
 800d41e:	4413      	add	r3, r2
 800d420:	1a18      	subs	r0, r3, r0
 800d422:	b003      	add	sp, #12
 800d424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d426:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d42a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d42e:	e7ed      	b.n	800d40c <__exponent+0x4c>
 800d430:	2330      	movs	r3, #48	; 0x30
 800d432:	3130      	adds	r1, #48	; 0x30
 800d434:	7083      	strb	r3, [r0, #2]
 800d436:	70c1      	strb	r1, [r0, #3]
 800d438:	1d03      	adds	r3, r0, #4
 800d43a:	e7f1      	b.n	800d420 <__exponent+0x60>

0800d43c <_printf_float>:
 800d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	ed2d 8b02 	vpush	{d8}
 800d444:	b08d      	sub	sp, #52	; 0x34
 800d446:	460c      	mov	r4, r1
 800d448:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d44c:	4616      	mov	r6, r2
 800d44e:	461f      	mov	r7, r3
 800d450:	4605      	mov	r5, r0
 800d452:	f000 fdeb 	bl	800e02c <_localeconv_r>
 800d456:	f8d0 a000 	ldr.w	sl, [r0]
 800d45a:	4650      	mov	r0, sl
 800d45c:	f7f2 ff38 	bl	80002d0 <strlen>
 800d460:	2300      	movs	r3, #0
 800d462:	930a      	str	r3, [sp, #40]	; 0x28
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	9305      	str	r3, [sp, #20]
 800d468:	f8d8 3000 	ldr.w	r3, [r8]
 800d46c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d470:	3307      	adds	r3, #7
 800d472:	f023 0307 	bic.w	r3, r3, #7
 800d476:	f103 0208 	add.w	r2, r3, #8
 800d47a:	f8c8 2000 	str.w	r2, [r8]
 800d47e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d482:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d486:	9307      	str	r3, [sp, #28]
 800d488:	f8cd 8018 	str.w	r8, [sp, #24]
 800d48c:	ee08 0a10 	vmov	s16, r0
 800d490:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d498:	4b9e      	ldr	r3, [pc, #632]	; (800d714 <_printf_float+0x2d8>)
 800d49a:	f04f 32ff 	mov.w	r2, #4294967295
 800d49e:	f7f3 fb75 	bl	8000b8c <__aeabi_dcmpun>
 800d4a2:	bb88      	cbnz	r0, 800d508 <_printf_float+0xcc>
 800d4a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4a8:	4b9a      	ldr	r3, [pc, #616]	; (800d714 <_printf_float+0x2d8>)
 800d4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ae:	f7f3 fb4f 	bl	8000b50 <__aeabi_dcmple>
 800d4b2:	bb48      	cbnz	r0, 800d508 <_printf_float+0xcc>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	4649      	mov	r1, r9
 800d4bc:	f7f3 fb3e 	bl	8000b3c <__aeabi_dcmplt>
 800d4c0:	b110      	cbz	r0, 800d4c8 <_printf_float+0x8c>
 800d4c2:	232d      	movs	r3, #45	; 0x2d
 800d4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4c8:	4a93      	ldr	r2, [pc, #588]	; (800d718 <_printf_float+0x2dc>)
 800d4ca:	4b94      	ldr	r3, [pc, #592]	; (800d71c <_printf_float+0x2e0>)
 800d4cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d4d0:	bf94      	ite	ls
 800d4d2:	4690      	movls	r8, r2
 800d4d4:	4698      	movhi	r8, r3
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	6123      	str	r3, [r4, #16]
 800d4da:	9b05      	ldr	r3, [sp, #20]
 800d4dc:	f023 0304 	bic.w	r3, r3, #4
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	f04f 0900 	mov.w	r9, #0
 800d4e6:	9700      	str	r7, [sp, #0]
 800d4e8:	4633      	mov	r3, r6
 800d4ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f000 f9da 	bl	800d8a8 <_printf_common>
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	f040 8090 	bne.w	800d61a <_printf_float+0x1de>
 800d4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fe:	b00d      	add	sp, #52	; 0x34
 800d500:	ecbd 8b02 	vpop	{d8}
 800d504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d508:	4642      	mov	r2, r8
 800d50a:	464b      	mov	r3, r9
 800d50c:	4640      	mov	r0, r8
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f3 fb3c 	bl	8000b8c <__aeabi_dcmpun>
 800d514:	b140      	cbz	r0, 800d528 <_printf_float+0xec>
 800d516:	464b      	mov	r3, r9
 800d518:	2b00      	cmp	r3, #0
 800d51a:	bfbc      	itt	lt
 800d51c:	232d      	movlt	r3, #45	; 0x2d
 800d51e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d522:	4a7f      	ldr	r2, [pc, #508]	; (800d720 <_printf_float+0x2e4>)
 800d524:	4b7f      	ldr	r3, [pc, #508]	; (800d724 <_printf_float+0x2e8>)
 800d526:	e7d1      	b.n	800d4cc <_printf_float+0x90>
 800d528:	6863      	ldr	r3, [r4, #4]
 800d52a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d52e:	9206      	str	r2, [sp, #24]
 800d530:	1c5a      	adds	r2, r3, #1
 800d532:	d13f      	bne.n	800d5b4 <_printf_float+0x178>
 800d534:	2306      	movs	r3, #6
 800d536:	6063      	str	r3, [r4, #4]
 800d538:	9b05      	ldr	r3, [sp, #20]
 800d53a:	6861      	ldr	r1, [r4, #4]
 800d53c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d540:	2300      	movs	r3, #0
 800d542:	9303      	str	r3, [sp, #12]
 800d544:	ab0a      	add	r3, sp, #40	; 0x28
 800d546:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d54a:	ab09      	add	r3, sp, #36	; 0x24
 800d54c:	ec49 8b10 	vmov	d0, r8, r9
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	6022      	str	r2, [r4, #0]
 800d554:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d558:	4628      	mov	r0, r5
 800d55a:	f7ff fecf 	bl	800d2fc <__cvt>
 800d55e:	9b06      	ldr	r3, [sp, #24]
 800d560:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d562:	2b47      	cmp	r3, #71	; 0x47
 800d564:	4680      	mov	r8, r0
 800d566:	d108      	bne.n	800d57a <_printf_float+0x13e>
 800d568:	1cc8      	adds	r0, r1, #3
 800d56a:	db02      	blt.n	800d572 <_printf_float+0x136>
 800d56c:	6863      	ldr	r3, [r4, #4]
 800d56e:	4299      	cmp	r1, r3
 800d570:	dd41      	ble.n	800d5f6 <_printf_float+0x1ba>
 800d572:	f1ab 0302 	sub.w	r3, fp, #2
 800d576:	fa5f fb83 	uxtb.w	fp, r3
 800d57a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d57e:	d820      	bhi.n	800d5c2 <_printf_float+0x186>
 800d580:	3901      	subs	r1, #1
 800d582:	465a      	mov	r2, fp
 800d584:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d588:	9109      	str	r1, [sp, #36]	; 0x24
 800d58a:	f7ff ff19 	bl	800d3c0 <__exponent>
 800d58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d590:	1813      	adds	r3, r2, r0
 800d592:	2a01      	cmp	r2, #1
 800d594:	4681      	mov	r9, r0
 800d596:	6123      	str	r3, [r4, #16]
 800d598:	dc02      	bgt.n	800d5a0 <_printf_float+0x164>
 800d59a:	6822      	ldr	r2, [r4, #0]
 800d59c:	07d2      	lsls	r2, r2, #31
 800d59e:	d501      	bpl.n	800d5a4 <_printf_float+0x168>
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	6123      	str	r3, [r4, #16]
 800d5a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d09c      	beq.n	800d4e6 <_printf_float+0xaa>
 800d5ac:	232d      	movs	r3, #45	; 0x2d
 800d5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5b2:	e798      	b.n	800d4e6 <_printf_float+0xaa>
 800d5b4:	9a06      	ldr	r2, [sp, #24]
 800d5b6:	2a47      	cmp	r2, #71	; 0x47
 800d5b8:	d1be      	bne.n	800d538 <_printf_float+0xfc>
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1bc      	bne.n	800d538 <_printf_float+0xfc>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e7b9      	b.n	800d536 <_printf_float+0xfa>
 800d5c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d5c6:	d118      	bne.n	800d5fa <_printf_float+0x1be>
 800d5c8:	2900      	cmp	r1, #0
 800d5ca:	6863      	ldr	r3, [r4, #4]
 800d5cc:	dd0b      	ble.n	800d5e6 <_printf_float+0x1aa>
 800d5ce:	6121      	str	r1, [r4, #16]
 800d5d0:	b913      	cbnz	r3, 800d5d8 <_printf_float+0x19c>
 800d5d2:	6822      	ldr	r2, [r4, #0]
 800d5d4:	07d0      	lsls	r0, r2, #31
 800d5d6:	d502      	bpl.n	800d5de <_printf_float+0x1a2>
 800d5d8:	3301      	adds	r3, #1
 800d5da:	440b      	add	r3, r1
 800d5dc:	6123      	str	r3, [r4, #16]
 800d5de:	65a1      	str	r1, [r4, #88]	; 0x58
 800d5e0:	f04f 0900 	mov.w	r9, #0
 800d5e4:	e7de      	b.n	800d5a4 <_printf_float+0x168>
 800d5e6:	b913      	cbnz	r3, 800d5ee <_printf_float+0x1b2>
 800d5e8:	6822      	ldr	r2, [r4, #0]
 800d5ea:	07d2      	lsls	r2, r2, #31
 800d5ec:	d501      	bpl.n	800d5f2 <_printf_float+0x1b6>
 800d5ee:	3302      	adds	r3, #2
 800d5f0:	e7f4      	b.n	800d5dc <_printf_float+0x1a0>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e7f2      	b.n	800d5dc <_printf_float+0x1a0>
 800d5f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d5fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5fc:	4299      	cmp	r1, r3
 800d5fe:	db05      	blt.n	800d60c <_printf_float+0x1d0>
 800d600:	6823      	ldr	r3, [r4, #0]
 800d602:	6121      	str	r1, [r4, #16]
 800d604:	07d8      	lsls	r0, r3, #31
 800d606:	d5ea      	bpl.n	800d5de <_printf_float+0x1a2>
 800d608:	1c4b      	adds	r3, r1, #1
 800d60a:	e7e7      	b.n	800d5dc <_printf_float+0x1a0>
 800d60c:	2900      	cmp	r1, #0
 800d60e:	bfd4      	ite	le
 800d610:	f1c1 0202 	rsble	r2, r1, #2
 800d614:	2201      	movgt	r2, #1
 800d616:	4413      	add	r3, r2
 800d618:	e7e0      	b.n	800d5dc <_printf_float+0x1a0>
 800d61a:	6823      	ldr	r3, [r4, #0]
 800d61c:	055a      	lsls	r2, r3, #21
 800d61e:	d407      	bmi.n	800d630 <_printf_float+0x1f4>
 800d620:	6923      	ldr	r3, [r4, #16]
 800d622:	4642      	mov	r2, r8
 800d624:	4631      	mov	r1, r6
 800d626:	4628      	mov	r0, r5
 800d628:	47b8      	blx	r7
 800d62a:	3001      	adds	r0, #1
 800d62c:	d12c      	bne.n	800d688 <_printf_float+0x24c>
 800d62e:	e764      	b.n	800d4fa <_printf_float+0xbe>
 800d630:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d634:	f240 80e0 	bls.w	800d7f8 <_printf_float+0x3bc>
 800d638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d63c:	2200      	movs	r2, #0
 800d63e:	2300      	movs	r3, #0
 800d640:	f7f3 fa72 	bl	8000b28 <__aeabi_dcmpeq>
 800d644:	2800      	cmp	r0, #0
 800d646:	d034      	beq.n	800d6b2 <_printf_float+0x276>
 800d648:	4a37      	ldr	r2, [pc, #220]	; (800d728 <_printf_float+0x2ec>)
 800d64a:	2301      	movs	r3, #1
 800d64c:	4631      	mov	r1, r6
 800d64e:	4628      	mov	r0, r5
 800d650:	47b8      	blx	r7
 800d652:	3001      	adds	r0, #1
 800d654:	f43f af51 	beq.w	800d4fa <_printf_float+0xbe>
 800d658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d65c:	429a      	cmp	r2, r3
 800d65e:	db02      	blt.n	800d666 <_printf_float+0x22a>
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	07d8      	lsls	r0, r3, #31
 800d664:	d510      	bpl.n	800d688 <_printf_float+0x24c>
 800d666:	ee18 3a10 	vmov	r3, s16
 800d66a:	4652      	mov	r2, sl
 800d66c:	4631      	mov	r1, r6
 800d66e:	4628      	mov	r0, r5
 800d670:	47b8      	blx	r7
 800d672:	3001      	adds	r0, #1
 800d674:	f43f af41 	beq.w	800d4fa <_printf_float+0xbe>
 800d678:	f04f 0800 	mov.w	r8, #0
 800d67c:	f104 091a 	add.w	r9, r4, #26
 800d680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d682:	3b01      	subs	r3, #1
 800d684:	4543      	cmp	r3, r8
 800d686:	dc09      	bgt.n	800d69c <_printf_float+0x260>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	079b      	lsls	r3, r3, #30
 800d68c:	f100 8107 	bmi.w	800d89e <_printf_float+0x462>
 800d690:	68e0      	ldr	r0, [r4, #12]
 800d692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d694:	4298      	cmp	r0, r3
 800d696:	bfb8      	it	lt
 800d698:	4618      	movlt	r0, r3
 800d69a:	e730      	b.n	800d4fe <_printf_float+0xc2>
 800d69c:	2301      	movs	r3, #1
 800d69e:	464a      	mov	r2, r9
 800d6a0:	4631      	mov	r1, r6
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	47b8      	blx	r7
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f43f af27 	beq.w	800d4fa <_printf_float+0xbe>
 800d6ac:	f108 0801 	add.w	r8, r8, #1
 800d6b0:	e7e6      	b.n	800d680 <_printf_float+0x244>
 800d6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	dc39      	bgt.n	800d72c <_printf_float+0x2f0>
 800d6b8:	4a1b      	ldr	r2, [pc, #108]	; (800d728 <_printf_float+0x2ec>)
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	4631      	mov	r1, r6
 800d6be:	4628      	mov	r0, r5
 800d6c0:	47b8      	blx	r7
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	f43f af19 	beq.w	800d4fa <_printf_float+0xbe>
 800d6c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	d102      	bne.n	800d6d6 <_printf_float+0x29a>
 800d6d0:	6823      	ldr	r3, [r4, #0]
 800d6d2:	07d9      	lsls	r1, r3, #31
 800d6d4:	d5d8      	bpl.n	800d688 <_printf_float+0x24c>
 800d6d6:	ee18 3a10 	vmov	r3, s16
 800d6da:	4652      	mov	r2, sl
 800d6dc:	4631      	mov	r1, r6
 800d6de:	4628      	mov	r0, r5
 800d6e0:	47b8      	blx	r7
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	f43f af09 	beq.w	800d4fa <_printf_float+0xbe>
 800d6e8:	f04f 0900 	mov.w	r9, #0
 800d6ec:	f104 0a1a 	add.w	sl, r4, #26
 800d6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f2:	425b      	negs	r3, r3
 800d6f4:	454b      	cmp	r3, r9
 800d6f6:	dc01      	bgt.n	800d6fc <_printf_float+0x2c0>
 800d6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6fa:	e792      	b.n	800d622 <_printf_float+0x1e6>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	4652      	mov	r2, sl
 800d700:	4631      	mov	r1, r6
 800d702:	4628      	mov	r0, r5
 800d704:	47b8      	blx	r7
 800d706:	3001      	adds	r0, #1
 800d708:	f43f aef7 	beq.w	800d4fa <_printf_float+0xbe>
 800d70c:	f109 0901 	add.w	r9, r9, #1
 800d710:	e7ee      	b.n	800d6f0 <_printf_float+0x2b4>
 800d712:	bf00      	nop
 800d714:	7fefffff 	.word	0x7fefffff
 800d718:	08010a6c 	.word	0x08010a6c
 800d71c:	08010a70 	.word	0x08010a70
 800d720:	08010a74 	.word	0x08010a74
 800d724:	08010a78 	.word	0x08010a78
 800d728:	08010a7c 	.word	0x08010a7c
 800d72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d72e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d730:	429a      	cmp	r2, r3
 800d732:	bfa8      	it	ge
 800d734:	461a      	movge	r2, r3
 800d736:	2a00      	cmp	r2, #0
 800d738:	4691      	mov	r9, r2
 800d73a:	dc37      	bgt.n	800d7ac <_printf_float+0x370>
 800d73c:	f04f 0b00 	mov.w	fp, #0
 800d740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d744:	f104 021a 	add.w	r2, r4, #26
 800d748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d74a:	9305      	str	r3, [sp, #20]
 800d74c:	eba3 0309 	sub.w	r3, r3, r9
 800d750:	455b      	cmp	r3, fp
 800d752:	dc33      	bgt.n	800d7bc <_printf_float+0x380>
 800d754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d758:	429a      	cmp	r2, r3
 800d75a:	db3b      	blt.n	800d7d4 <_printf_float+0x398>
 800d75c:	6823      	ldr	r3, [r4, #0]
 800d75e:	07da      	lsls	r2, r3, #31
 800d760:	d438      	bmi.n	800d7d4 <_printf_float+0x398>
 800d762:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d766:	eba2 0903 	sub.w	r9, r2, r3
 800d76a:	9b05      	ldr	r3, [sp, #20]
 800d76c:	1ad2      	subs	r2, r2, r3
 800d76e:	4591      	cmp	r9, r2
 800d770:	bfa8      	it	ge
 800d772:	4691      	movge	r9, r2
 800d774:	f1b9 0f00 	cmp.w	r9, #0
 800d778:	dc35      	bgt.n	800d7e6 <_printf_float+0x3aa>
 800d77a:	f04f 0800 	mov.w	r8, #0
 800d77e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d782:	f104 0a1a 	add.w	sl, r4, #26
 800d786:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d78a:	1a9b      	subs	r3, r3, r2
 800d78c:	eba3 0309 	sub.w	r3, r3, r9
 800d790:	4543      	cmp	r3, r8
 800d792:	f77f af79 	ble.w	800d688 <_printf_float+0x24c>
 800d796:	2301      	movs	r3, #1
 800d798:	4652      	mov	r2, sl
 800d79a:	4631      	mov	r1, r6
 800d79c:	4628      	mov	r0, r5
 800d79e:	47b8      	blx	r7
 800d7a0:	3001      	adds	r0, #1
 800d7a2:	f43f aeaa 	beq.w	800d4fa <_printf_float+0xbe>
 800d7a6:	f108 0801 	add.w	r8, r8, #1
 800d7aa:	e7ec      	b.n	800d786 <_printf_float+0x34a>
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	4642      	mov	r2, r8
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	47b8      	blx	r7
 800d7b6:	3001      	adds	r0, #1
 800d7b8:	d1c0      	bne.n	800d73c <_printf_float+0x300>
 800d7ba:	e69e      	b.n	800d4fa <_printf_float+0xbe>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	4631      	mov	r1, r6
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	9205      	str	r2, [sp, #20]
 800d7c4:	47b8      	blx	r7
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	f43f ae97 	beq.w	800d4fa <_printf_float+0xbe>
 800d7cc:	9a05      	ldr	r2, [sp, #20]
 800d7ce:	f10b 0b01 	add.w	fp, fp, #1
 800d7d2:	e7b9      	b.n	800d748 <_printf_float+0x30c>
 800d7d4:	ee18 3a10 	vmov	r3, s16
 800d7d8:	4652      	mov	r2, sl
 800d7da:	4631      	mov	r1, r6
 800d7dc:	4628      	mov	r0, r5
 800d7de:	47b8      	blx	r7
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	d1be      	bne.n	800d762 <_printf_float+0x326>
 800d7e4:	e689      	b.n	800d4fa <_printf_float+0xbe>
 800d7e6:	9a05      	ldr	r2, [sp, #20]
 800d7e8:	464b      	mov	r3, r9
 800d7ea:	4442      	add	r2, r8
 800d7ec:	4631      	mov	r1, r6
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	47b8      	blx	r7
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	d1c1      	bne.n	800d77a <_printf_float+0x33e>
 800d7f6:	e680      	b.n	800d4fa <_printf_float+0xbe>
 800d7f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7fa:	2a01      	cmp	r2, #1
 800d7fc:	dc01      	bgt.n	800d802 <_printf_float+0x3c6>
 800d7fe:	07db      	lsls	r3, r3, #31
 800d800:	d53a      	bpl.n	800d878 <_printf_float+0x43c>
 800d802:	2301      	movs	r3, #1
 800d804:	4642      	mov	r2, r8
 800d806:	4631      	mov	r1, r6
 800d808:	4628      	mov	r0, r5
 800d80a:	47b8      	blx	r7
 800d80c:	3001      	adds	r0, #1
 800d80e:	f43f ae74 	beq.w	800d4fa <_printf_float+0xbe>
 800d812:	ee18 3a10 	vmov	r3, s16
 800d816:	4652      	mov	r2, sl
 800d818:	4631      	mov	r1, r6
 800d81a:	4628      	mov	r0, r5
 800d81c:	47b8      	blx	r7
 800d81e:	3001      	adds	r0, #1
 800d820:	f43f ae6b 	beq.w	800d4fa <_printf_float+0xbe>
 800d824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d828:	2200      	movs	r2, #0
 800d82a:	2300      	movs	r3, #0
 800d82c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d830:	f7f3 f97a 	bl	8000b28 <__aeabi_dcmpeq>
 800d834:	b9d8      	cbnz	r0, 800d86e <_printf_float+0x432>
 800d836:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d83a:	f108 0201 	add.w	r2, r8, #1
 800d83e:	4631      	mov	r1, r6
 800d840:	4628      	mov	r0, r5
 800d842:	47b8      	blx	r7
 800d844:	3001      	adds	r0, #1
 800d846:	d10e      	bne.n	800d866 <_printf_float+0x42a>
 800d848:	e657      	b.n	800d4fa <_printf_float+0xbe>
 800d84a:	2301      	movs	r3, #1
 800d84c:	4652      	mov	r2, sl
 800d84e:	4631      	mov	r1, r6
 800d850:	4628      	mov	r0, r5
 800d852:	47b8      	blx	r7
 800d854:	3001      	adds	r0, #1
 800d856:	f43f ae50 	beq.w	800d4fa <_printf_float+0xbe>
 800d85a:	f108 0801 	add.w	r8, r8, #1
 800d85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d860:	3b01      	subs	r3, #1
 800d862:	4543      	cmp	r3, r8
 800d864:	dcf1      	bgt.n	800d84a <_printf_float+0x40e>
 800d866:	464b      	mov	r3, r9
 800d868:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d86c:	e6da      	b.n	800d624 <_printf_float+0x1e8>
 800d86e:	f04f 0800 	mov.w	r8, #0
 800d872:	f104 0a1a 	add.w	sl, r4, #26
 800d876:	e7f2      	b.n	800d85e <_printf_float+0x422>
 800d878:	2301      	movs	r3, #1
 800d87a:	4642      	mov	r2, r8
 800d87c:	e7df      	b.n	800d83e <_printf_float+0x402>
 800d87e:	2301      	movs	r3, #1
 800d880:	464a      	mov	r2, r9
 800d882:	4631      	mov	r1, r6
 800d884:	4628      	mov	r0, r5
 800d886:	47b8      	blx	r7
 800d888:	3001      	adds	r0, #1
 800d88a:	f43f ae36 	beq.w	800d4fa <_printf_float+0xbe>
 800d88e:	f108 0801 	add.w	r8, r8, #1
 800d892:	68e3      	ldr	r3, [r4, #12]
 800d894:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d896:	1a5b      	subs	r3, r3, r1
 800d898:	4543      	cmp	r3, r8
 800d89a:	dcf0      	bgt.n	800d87e <_printf_float+0x442>
 800d89c:	e6f8      	b.n	800d690 <_printf_float+0x254>
 800d89e:	f04f 0800 	mov.w	r8, #0
 800d8a2:	f104 0919 	add.w	r9, r4, #25
 800d8a6:	e7f4      	b.n	800d892 <_printf_float+0x456>

0800d8a8 <_printf_common>:
 800d8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ac:	4616      	mov	r6, r2
 800d8ae:	4699      	mov	r9, r3
 800d8b0:	688a      	ldr	r2, [r1, #8]
 800d8b2:	690b      	ldr	r3, [r1, #16]
 800d8b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	bfb8      	it	lt
 800d8bc:	4613      	movlt	r3, r2
 800d8be:	6033      	str	r3, [r6, #0]
 800d8c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8c4:	4607      	mov	r7, r0
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	b10a      	cbz	r2, 800d8ce <_printf_common+0x26>
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	6033      	str	r3, [r6, #0]
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	0699      	lsls	r1, r3, #26
 800d8d2:	bf42      	ittt	mi
 800d8d4:	6833      	ldrmi	r3, [r6, #0]
 800d8d6:	3302      	addmi	r3, #2
 800d8d8:	6033      	strmi	r3, [r6, #0]
 800d8da:	6825      	ldr	r5, [r4, #0]
 800d8dc:	f015 0506 	ands.w	r5, r5, #6
 800d8e0:	d106      	bne.n	800d8f0 <_printf_common+0x48>
 800d8e2:	f104 0a19 	add.w	sl, r4, #25
 800d8e6:	68e3      	ldr	r3, [r4, #12]
 800d8e8:	6832      	ldr	r2, [r6, #0]
 800d8ea:	1a9b      	subs	r3, r3, r2
 800d8ec:	42ab      	cmp	r3, r5
 800d8ee:	dc26      	bgt.n	800d93e <_printf_common+0x96>
 800d8f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8f4:	1e13      	subs	r3, r2, #0
 800d8f6:	6822      	ldr	r2, [r4, #0]
 800d8f8:	bf18      	it	ne
 800d8fa:	2301      	movne	r3, #1
 800d8fc:	0692      	lsls	r2, r2, #26
 800d8fe:	d42b      	bmi.n	800d958 <_printf_common+0xb0>
 800d900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d904:	4649      	mov	r1, r9
 800d906:	4638      	mov	r0, r7
 800d908:	47c0      	blx	r8
 800d90a:	3001      	adds	r0, #1
 800d90c:	d01e      	beq.n	800d94c <_printf_common+0xa4>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	6922      	ldr	r2, [r4, #16]
 800d912:	f003 0306 	and.w	r3, r3, #6
 800d916:	2b04      	cmp	r3, #4
 800d918:	bf02      	ittt	eq
 800d91a:	68e5      	ldreq	r5, [r4, #12]
 800d91c:	6833      	ldreq	r3, [r6, #0]
 800d91e:	1aed      	subeq	r5, r5, r3
 800d920:	68a3      	ldr	r3, [r4, #8]
 800d922:	bf0c      	ite	eq
 800d924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d928:	2500      	movne	r5, #0
 800d92a:	4293      	cmp	r3, r2
 800d92c:	bfc4      	itt	gt
 800d92e:	1a9b      	subgt	r3, r3, r2
 800d930:	18ed      	addgt	r5, r5, r3
 800d932:	2600      	movs	r6, #0
 800d934:	341a      	adds	r4, #26
 800d936:	42b5      	cmp	r5, r6
 800d938:	d11a      	bne.n	800d970 <_printf_common+0xc8>
 800d93a:	2000      	movs	r0, #0
 800d93c:	e008      	b.n	800d950 <_printf_common+0xa8>
 800d93e:	2301      	movs	r3, #1
 800d940:	4652      	mov	r2, sl
 800d942:	4649      	mov	r1, r9
 800d944:	4638      	mov	r0, r7
 800d946:	47c0      	blx	r8
 800d948:	3001      	adds	r0, #1
 800d94a:	d103      	bne.n	800d954 <_printf_common+0xac>
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295
 800d950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d954:	3501      	adds	r5, #1
 800d956:	e7c6      	b.n	800d8e6 <_printf_common+0x3e>
 800d958:	18e1      	adds	r1, r4, r3
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	2030      	movs	r0, #48	; 0x30
 800d95e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d962:	4422      	add	r2, r4
 800d964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d96c:	3302      	adds	r3, #2
 800d96e:	e7c7      	b.n	800d900 <_printf_common+0x58>
 800d970:	2301      	movs	r3, #1
 800d972:	4622      	mov	r2, r4
 800d974:	4649      	mov	r1, r9
 800d976:	4638      	mov	r0, r7
 800d978:	47c0      	blx	r8
 800d97a:	3001      	adds	r0, #1
 800d97c:	d0e6      	beq.n	800d94c <_printf_common+0xa4>
 800d97e:	3601      	adds	r6, #1
 800d980:	e7d9      	b.n	800d936 <_printf_common+0x8e>
	...

0800d984 <_printf_i>:
 800d984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d988:	7e0f      	ldrb	r7, [r1, #24]
 800d98a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d98c:	2f78      	cmp	r7, #120	; 0x78
 800d98e:	4691      	mov	r9, r2
 800d990:	4680      	mov	r8, r0
 800d992:	460c      	mov	r4, r1
 800d994:	469a      	mov	sl, r3
 800d996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d99a:	d807      	bhi.n	800d9ac <_printf_i+0x28>
 800d99c:	2f62      	cmp	r7, #98	; 0x62
 800d99e:	d80a      	bhi.n	800d9b6 <_printf_i+0x32>
 800d9a0:	2f00      	cmp	r7, #0
 800d9a2:	f000 80d4 	beq.w	800db4e <_printf_i+0x1ca>
 800d9a6:	2f58      	cmp	r7, #88	; 0x58
 800d9a8:	f000 80c0 	beq.w	800db2c <_printf_i+0x1a8>
 800d9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9b4:	e03a      	b.n	800da2c <_printf_i+0xa8>
 800d9b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9ba:	2b15      	cmp	r3, #21
 800d9bc:	d8f6      	bhi.n	800d9ac <_printf_i+0x28>
 800d9be:	a101      	add	r1, pc, #4	; (adr r1, 800d9c4 <_printf_i+0x40>)
 800d9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9c4:	0800da1d 	.word	0x0800da1d
 800d9c8:	0800da31 	.word	0x0800da31
 800d9cc:	0800d9ad 	.word	0x0800d9ad
 800d9d0:	0800d9ad 	.word	0x0800d9ad
 800d9d4:	0800d9ad 	.word	0x0800d9ad
 800d9d8:	0800d9ad 	.word	0x0800d9ad
 800d9dc:	0800da31 	.word	0x0800da31
 800d9e0:	0800d9ad 	.word	0x0800d9ad
 800d9e4:	0800d9ad 	.word	0x0800d9ad
 800d9e8:	0800d9ad 	.word	0x0800d9ad
 800d9ec:	0800d9ad 	.word	0x0800d9ad
 800d9f0:	0800db35 	.word	0x0800db35
 800d9f4:	0800da5d 	.word	0x0800da5d
 800d9f8:	0800daef 	.word	0x0800daef
 800d9fc:	0800d9ad 	.word	0x0800d9ad
 800da00:	0800d9ad 	.word	0x0800d9ad
 800da04:	0800db57 	.word	0x0800db57
 800da08:	0800d9ad 	.word	0x0800d9ad
 800da0c:	0800da5d 	.word	0x0800da5d
 800da10:	0800d9ad 	.word	0x0800d9ad
 800da14:	0800d9ad 	.word	0x0800d9ad
 800da18:	0800daf7 	.word	0x0800daf7
 800da1c:	682b      	ldr	r3, [r5, #0]
 800da1e:	1d1a      	adds	r2, r3, #4
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	602a      	str	r2, [r5, #0]
 800da24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da2c:	2301      	movs	r3, #1
 800da2e:	e09f      	b.n	800db70 <_printf_i+0x1ec>
 800da30:	6820      	ldr	r0, [r4, #0]
 800da32:	682b      	ldr	r3, [r5, #0]
 800da34:	0607      	lsls	r7, r0, #24
 800da36:	f103 0104 	add.w	r1, r3, #4
 800da3a:	6029      	str	r1, [r5, #0]
 800da3c:	d501      	bpl.n	800da42 <_printf_i+0xbe>
 800da3e:	681e      	ldr	r6, [r3, #0]
 800da40:	e003      	b.n	800da4a <_printf_i+0xc6>
 800da42:	0646      	lsls	r6, r0, #25
 800da44:	d5fb      	bpl.n	800da3e <_printf_i+0xba>
 800da46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800da4a:	2e00      	cmp	r6, #0
 800da4c:	da03      	bge.n	800da56 <_printf_i+0xd2>
 800da4e:	232d      	movs	r3, #45	; 0x2d
 800da50:	4276      	negs	r6, r6
 800da52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da56:	485a      	ldr	r0, [pc, #360]	; (800dbc0 <_printf_i+0x23c>)
 800da58:	230a      	movs	r3, #10
 800da5a:	e012      	b.n	800da82 <_printf_i+0xfe>
 800da5c:	682b      	ldr	r3, [r5, #0]
 800da5e:	6820      	ldr	r0, [r4, #0]
 800da60:	1d19      	adds	r1, r3, #4
 800da62:	6029      	str	r1, [r5, #0]
 800da64:	0605      	lsls	r5, r0, #24
 800da66:	d501      	bpl.n	800da6c <_printf_i+0xe8>
 800da68:	681e      	ldr	r6, [r3, #0]
 800da6a:	e002      	b.n	800da72 <_printf_i+0xee>
 800da6c:	0641      	lsls	r1, r0, #25
 800da6e:	d5fb      	bpl.n	800da68 <_printf_i+0xe4>
 800da70:	881e      	ldrh	r6, [r3, #0]
 800da72:	4853      	ldr	r0, [pc, #332]	; (800dbc0 <_printf_i+0x23c>)
 800da74:	2f6f      	cmp	r7, #111	; 0x6f
 800da76:	bf0c      	ite	eq
 800da78:	2308      	moveq	r3, #8
 800da7a:	230a      	movne	r3, #10
 800da7c:	2100      	movs	r1, #0
 800da7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da82:	6865      	ldr	r5, [r4, #4]
 800da84:	60a5      	str	r5, [r4, #8]
 800da86:	2d00      	cmp	r5, #0
 800da88:	bfa2      	ittt	ge
 800da8a:	6821      	ldrge	r1, [r4, #0]
 800da8c:	f021 0104 	bicge.w	r1, r1, #4
 800da90:	6021      	strge	r1, [r4, #0]
 800da92:	b90e      	cbnz	r6, 800da98 <_printf_i+0x114>
 800da94:	2d00      	cmp	r5, #0
 800da96:	d04b      	beq.n	800db30 <_printf_i+0x1ac>
 800da98:	4615      	mov	r5, r2
 800da9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800da9e:	fb03 6711 	mls	r7, r3, r1, r6
 800daa2:	5dc7      	ldrb	r7, [r0, r7]
 800daa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800daa8:	4637      	mov	r7, r6
 800daaa:	42bb      	cmp	r3, r7
 800daac:	460e      	mov	r6, r1
 800daae:	d9f4      	bls.n	800da9a <_printf_i+0x116>
 800dab0:	2b08      	cmp	r3, #8
 800dab2:	d10b      	bne.n	800dacc <_printf_i+0x148>
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	07de      	lsls	r6, r3, #31
 800dab8:	d508      	bpl.n	800dacc <_printf_i+0x148>
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	6861      	ldr	r1, [r4, #4]
 800dabe:	4299      	cmp	r1, r3
 800dac0:	bfde      	ittt	le
 800dac2:	2330      	movle	r3, #48	; 0x30
 800dac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dacc:	1b52      	subs	r2, r2, r5
 800dace:	6122      	str	r2, [r4, #16]
 800dad0:	f8cd a000 	str.w	sl, [sp]
 800dad4:	464b      	mov	r3, r9
 800dad6:	aa03      	add	r2, sp, #12
 800dad8:	4621      	mov	r1, r4
 800dada:	4640      	mov	r0, r8
 800dadc:	f7ff fee4 	bl	800d8a8 <_printf_common>
 800dae0:	3001      	adds	r0, #1
 800dae2:	d14a      	bne.n	800db7a <_printf_i+0x1f6>
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	b004      	add	sp, #16
 800daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	f043 0320 	orr.w	r3, r3, #32
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	4833      	ldr	r0, [pc, #204]	; (800dbc4 <_printf_i+0x240>)
 800daf8:	2778      	movs	r7, #120	; 0x78
 800dafa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	6829      	ldr	r1, [r5, #0]
 800db02:	061f      	lsls	r7, r3, #24
 800db04:	f851 6b04 	ldr.w	r6, [r1], #4
 800db08:	d402      	bmi.n	800db10 <_printf_i+0x18c>
 800db0a:	065f      	lsls	r7, r3, #25
 800db0c:	bf48      	it	mi
 800db0e:	b2b6      	uxthmi	r6, r6
 800db10:	07df      	lsls	r7, r3, #31
 800db12:	bf48      	it	mi
 800db14:	f043 0320 	orrmi.w	r3, r3, #32
 800db18:	6029      	str	r1, [r5, #0]
 800db1a:	bf48      	it	mi
 800db1c:	6023      	strmi	r3, [r4, #0]
 800db1e:	b91e      	cbnz	r6, 800db28 <_printf_i+0x1a4>
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	f023 0320 	bic.w	r3, r3, #32
 800db26:	6023      	str	r3, [r4, #0]
 800db28:	2310      	movs	r3, #16
 800db2a:	e7a7      	b.n	800da7c <_printf_i+0xf8>
 800db2c:	4824      	ldr	r0, [pc, #144]	; (800dbc0 <_printf_i+0x23c>)
 800db2e:	e7e4      	b.n	800dafa <_printf_i+0x176>
 800db30:	4615      	mov	r5, r2
 800db32:	e7bd      	b.n	800dab0 <_printf_i+0x12c>
 800db34:	682b      	ldr	r3, [r5, #0]
 800db36:	6826      	ldr	r6, [r4, #0]
 800db38:	6961      	ldr	r1, [r4, #20]
 800db3a:	1d18      	adds	r0, r3, #4
 800db3c:	6028      	str	r0, [r5, #0]
 800db3e:	0635      	lsls	r5, r6, #24
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	d501      	bpl.n	800db48 <_printf_i+0x1c4>
 800db44:	6019      	str	r1, [r3, #0]
 800db46:	e002      	b.n	800db4e <_printf_i+0x1ca>
 800db48:	0670      	lsls	r0, r6, #25
 800db4a:	d5fb      	bpl.n	800db44 <_printf_i+0x1c0>
 800db4c:	8019      	strh	r1, [r3, #0]
 800db4e:	2300      	movs	r3, #0
 800db50:	6123      	str	r3, [r4, #16]
 800db52:	4615      	mov	r5, r2
 800db54:	e7bc      	b.n	800dad0 <_printf_i+0x14c>
 800db56:	682b      	ldr	r3, [r5, #0]
 800db58:	1d1a      	adds	r2, r3, #4
 800db5a:	602a      	str	r2, [r5, #0]
 800db5c:	681d      	ldr	r5, [r3, #0]
 800db5e:	6862      	ldr	r2, [r4, #4]
 800db60:	2100      	movs	r1, #0
 800db62:	4628      	mov	r0, r5
 800db64:	f7f2 fb64 	bl	8000230 <memchr>
 800db68:	b108      	cbz	r0, 800db6e <_printf_i+0x1ea>
 800db6a:	1b40      	subs	r0, r0, r5
 800db6c:	6060      	str	r0, [r4, #4]
 800db6e:	6863      	ldr	r3, [r4, #4]
 800db70:	6123      	str	r3, [r4, #16]
 800db72:	2300      	movs	r3, #0
 800db74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db78:	e7aa      	b.n	800dad0 <_printf_i+0x14c>
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	462a      	mov	r2, r5
 800db7e:	4649      	mov	r1, r9
 800db80:	4640      	mov	r0, r8
 800db82:	47d0      	blx	sl
 800db84:	3001      	adds	r0, #1
 800db86:	d0ad      	beq.n	800dae4 <_printf_i+0x160>
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	079b      	lsls	r3, r3, #30
 800db8c:	d413      	bmi.n	800dbb6 <_printf_i+0x232>
 800db8e:	68e0      	ldr	r0, [r4, #12]
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	4298      	cmp	r0, r3
 800db94:	bfb8      	it	lt
 800db96:	4618      	movlt	r0, r3
 800db98:	e7a6      	b.n	800dae8 <_printf_i+0x164>
 800db9a:	2301      	movs	r3, #1
 800db9c:	4632      	mov	r2, r6
 800db9e:	4649      	mov	r1, r9
 800dba0:	4640      	mov	r0, r8
 800dba2:	47d0      	blx	sl
 800dba4:	3001      	adds	r0, #1
 800dba6:	d09d      	beq.n	800dae4 <_printf_i+0x160>
 800dba8:	3501      	adds	r5, #1
 800dbaa:	68e3      	ldr	r3, [r4, #12]
 800dbac:	9903      	ldr	r1, [sp, #12]
 800dbae:	1a5b      	subs	r3, r3, r1
 800dbb0:	42ab      	cmp	r3, r5
 800dbb2:	dcf2      	bgt.n	800db9a <_printf_i+0x216>
 800dbb4:	e7eb      	b.n	800db8e <_printf_i+0x20a>
 800dbb6:	2500      	movs	r5, #0
 800dbb8:	f104 0619 	add.w	r6, r4, #25
 800dbbc:	e7f5      	b.n	800dbaa <_printf_i+0x226>
 800dbbe:	bf00      	nop
 800dbc0:	08010a7e 	.word	0x08010a7e
 800dbc4:	08010a8f 	.word	0x08010a8f

0800dbc8 <std>:
 800dbc8:	2300      	movs	r3, #0
 800dbca:	b510      	push	{r4, lr}
 800dbcc:	4604      	mov	r4, r0
 800dbce:	e9c0 3300 	strd	r3, r3, [r0]
 800dbd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbd6:	6083      	str	r3, [r0, #8]
 800dbd8:	8181      	strh	r1, [r0, #12]
 800dbda:	6643      	str	r3, [r0, #100]	; 0x64
 800dbdc:	81c2      	strh	r2, [r0, #14]
 800dbde:	6183      	str	r3, [r0, #24]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	2208      	movs	r2, #8
 800dbe4:	305c      	adds	r0, #92	; 0x5c
 800dbe6:	f000 fa05 	bl	800dff4 <memset>
 800dbea:	4b05      	ldr	r3, [pc, #20]	; (800dc00 <std+0x38>)
 800dbec:	6263      	str	r3, [r4, #36]	; 0x24
 800dbee:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <std+0x3c>)
 800dbf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbf2:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <std+0x40>)
 800dbf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbf6:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <std+0x44>)
 800dbf8:	6224      	str	r4, [r4, #32]
 800dbfa:	6323      	str	r3, [r4, #48]	; 0x30
 800dbfc:	bd10      	pop	{r4, pc}
 800dbfe:	bf00      	nop
 800dc00:	0800de45 	.word	0x0800de45
 800dc04:	0800de67 	.word	0x0800de67
 800dc08:	0800de9f 	.word	0x0800de9f
 800dc0c:	0800dec3 	.word	0x0800dec3

0800dc10 <stdio_exit_handler>:
 800dc10:	4a02      	ldr	r2, [pc, #8]	; (800dc1c <stdio_exit_handler+0xc>)
 800dc12:	4903      	ldr	r1, [pc, #12]	; (800dc20 <stdio_exit_handler+0x10>)
 800dc14:	4803      	ldr	r0, [pc, #12]	; (800dc24 <stdio_exit_handler+0x14>)
 800dc16:	f000 b869 	b.w	800dcec <_fwalk_sglue>
 800dc1a:	bf00      	nop
 800dc1c:	20000030 	.word	0x20000030
 800dc20:	0800fe11 	.word	0x0800fe11
 800dc24:	2000003c 	.word	0x2000003c

0800dc28 <cleanup_stdio>:
 800dc28:	6841      	ldr	r1, [r0, #4]
 800dc2a:	4b0c      	ldr	r3, [pc, #48]	; (800dc5c <cleanup_stdio+0x34>)
 800dc2c:	4299      	cmp	r1, r3
 800dc2e:	b510      	push	{r4, lr}
 800dc30:	4604      	mov	r4, r0
 800dc32:	d001      	beq.n	800dc38 <cleanup_stdio+0x10>
 800dc34:	f002 f8ec 	bl	800fe10 <_fflush_r>
 800dc38:	68a1      	ldr	r1, [r4, #8]
 800dc3a:	4b09      	ldr	r3, [pc, #36]	; (800dc60 <cleanup_stdio+0x38>)
 800dc3c:	4299      	cmp	r1, r3
 800dc3e:	d002      	beq.n	800dc46 <cleanup_stdio+0x1e>
 800dc40:	4620      	mov	r0, r4
 800dc42:	f002 f8e5 	bl	800fe10 <_fflush_r>
 800dc46:	68e1      	ldr	r1, [r4, #12]
 800dc48:	4b06      	ldr	r3, [pc, #24]	; (800dc64 <cleanup_stdio+0x3c>)
 800dc4a:	4299      	cmp	r1, r3
 800dc4c:	d004      	beq.n	800dc58 <cleanup_stdio+0x30>
 800dc4e:	4620      	mov	r0, r4
 800dc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc54:	f002 b8dc 	b.w	800fe10 <_fflush_r>
 800dc58:	bd10      	pop	{r4, pc}
 800dc5a:	bf00      	nop
 800dc5c:	2000977c 	.word	0x2000977c
 800dc60:	200097e4 	.word	0x200097e4
 800dc64:	2000984c 	.word	0x2000984c

0800dc68 <global_stdio_init.part.0>:
 800dc68:	b510      	push	{r4, lr}
 800dc6a:	4b0b      	ldr	r3, [pc, #44]	; (800dc98 <global_stdio_init.part.0+0x30>)
 800dc6c:	4c0b      	ldr	r4, [pc, #44]	; (800dc9c <global_stdio_init.part.0+0x34>)
 800dc6e:	4a0c      	ldr	r2, [pc, #48]	; (800dca0 <global_stdio_init.part.0+0x38>)
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	4620      	mov	r0, r4
 800dc74:	2200      	movs	r2, #0
 800dc76:	2104      	movs	r1, #4
 800dc78:	f7ff ffa6 	bl	800dbc8 <std>
 800dc7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dc80:	2201      	movs	r2, #1
 800dc82:	2109      	movs	r1, #9
 800dc84:	f7ff ffa0 	bl	800dbc8 <std>
 800dc88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc92:	2112      	movs	r1, #18
 800dc94:	f7ff bf98 	b.w	800dbc8 <std>
 800dc98:	200098b4 	.word	0x200098b4
 800dc9c:	2000977c 	.word	0x2000977c
 800dca0:	0800dc11 	.word	0x0800dc11

0800dca4 <__sfp_lock_acquire>:
 800dca4:	4801      	ldr	r0, [pc, #4]	; (800dcac <__sfp_lock_acquire+0x8>)
 800dca6:	f000 ba8b 	b.w	800e1c0 <__retarget_lock_acquire_recursive>
 800dcaa:	bf00      	nop
 800dcac:	200098bd 	.word	0x200098bd

0800dcb0 <__sfp_lock_release>:
 800dcb0:	4801      	ldr	r0, [pc, #4]	; (800dcb8 <__sfp_lock_release+0x8>)
 800dcb2:	f000 ba86 	b.w	800e1c2 <__retarget_lock_release_recursive>
 800dcb6:	bf00      	nop
 800dcb8:	200098bd 	.word	0x200098bd

0800dcbc <__sinit>:
 800dcbc:	b510      	push	{r4, lr}
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	f7ff fff0 	bl	800dca4 <__sfp_lock_acquire>
 800dcc4:	6a23      	ldr	r3, [r4, #32]
 800dcc6:	b11b      	cbz	r3, 800dcd0 <__sinit+0x14>
 800dcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dccc:	f7ff bff0 	b.w	800dcb0 <__sfp_lock_release>
 800dcd0:	4b04      	ldr	r3, [pc, #16]	; (800dce4 <__sinit+0x28>)
 800dcd2:	6223      	str	r3, [r4, #32]
 800dcd4:	4b04      	ldr	r3, [pc, #16]	; (800dce8 <__sinit+0x2c>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1f5      	bne.n	800dcc8 <__sinit+0xc>
 800dcdc:	f7ff ffc4 	bl	800dc68 <global_stdio_init.part.0>
 800dce0:	e7f2      	b.n	800dcc8 <__sinit+0xc>
 800dce2:	bf00      	nop
 800dce4:	0800dc29 	.word	0x0800dc29
 800dce8:	200098b4 	.word	0x200098b4

0800dcec <_fwalk_sglue>:
 800dcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf0:	4607      	mov	r7, r0
 800dcf2:	4688      	mov	r8, r1
 800dcf4:	4614      	mov	r4, r2
 800dcf6:	2600      	movs	r6, #0
 800dcf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dcfc:	f1b9 0901 	subs.w	r9, r9, #1
 800dd00:	d505      	bpl.n	800dd0e <_fwalk_sglue+0x22>
 800dd02:	6824      	ldr	r4, [r4, #0]
 800dd04:	2c00      	cmp	r4, #0
 800dd06:	d1f7      	bne.n	800dcf8 <_fwalk_sglue+0xc>
 800dd08:	4630      	mov	r0, r6
 800dd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd0e:	89ab      	ldrh	r3, [r5, #12]
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d907      	bls.n	800dd24 <_fwalk_sglue+0x38>
 800dd14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	d003      	beq.n	800dd24 <_fwalk_sglue+0x38>
 800dd1c:	4629      	mov	r1, r5
 800dd1e:	4638      	mov	r0, r7
 800dd20:	47c0      	blx	r8
 800dd22:	4306      	orrs	r6, r0
 800dd24:	3568      	adds	r5, #104	; 0x68
 800dd26:	e7e9      	b.n	800dcfc <_fwalk_sglue+0x10>

0800dd28 <iprintf>:
 800dd28:	b40f      	push	{r0, r1, r2, r3}
 800dd2a:	b507      	push	{r0, r1, r2, lr}
 800dd2c:	4906      	ldr	r1, [pc, #24]	; (800dd48 <iprintf+0x20>)
 800dd2e:	ab04      	add	r3, sp, #16
 800dd30:	6808      	ldr	r0, [r1, #0]
 800dd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd36:	6881      	ldr	r1, [r0, #8]
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	f001 fec9 	bl	800fad0 <_vfiprintf_r>
 800dd3e:	b003      	add	sp, #12
 800dd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd44:	b004      	add	sp, #16
 800dd46:	4770      	bx	lr
 800dd48:	20000088 	.word	0x20000088

0800dd4c <_puts_r>:
 800dd4c:	6a03      	ldr	r3, [r0, #32]
 800dd4e:	b570      	push	{r4, r5, r6, lr}
 800dd50:	6884      	ldr	r4, [r0, #8]
 800dd52:	4605      	mov	r5, r0
 800dd54:	460e      	mov	r6, r1
 800dd56:	b90b      	cbnz	r3, 800dd5c <_puts_r+0x10>
 800dd58:	f7ff ffb0 	bl	800dcbc <__sinit>
 800dd5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd5e:	07db      	lsls	r3, r3, #31
 800dd60:	d405      	bmi.n	800dd6e <_puts_r+0x22>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	0598      	lsls	r0, r3, #22
 800dd66:	d402      	bmi.n	800dd6e <_puts_r+0x22>
 800dd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd6a:	f000 fa29 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800dd6e:	89a3      	ldrh	r3, [r4, #12]
 800dd70:	0719      	lsls	r1, r3, #28
 800dd72:	d513      	bpl.n	800dd9c <_puts_r+0x50>
 800dd74:	6923      	ldr	r3, [r4, #16]
 800dd76:	b18b      	cbz	r3, 800dd9c <_puts_r+0x50>
 800dd78:	3e01      	subs	r6, #1
 800dd7a:	68a3      	ldr	r3, [r4, #8]
 800dd7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dd80:	3b01      	subs	r3, #1
 800dd82:	60a3      	str	r3, [r4, #8]
 800dd84:	b9e9      	cbnz	r1, 800ddc2 <_puts_r+0x76>
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	da2e      	bge.n	800dde8 <_puts_r+0x9c>
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	210a      	movs	r1, #10
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f000 f89b 	bl	800deca <__swbuf_r>
 800dd94:	3001      	adds	r0, #1
 800dd96:	d007      	beq.n	800dda8 <_puts_r+0x5c>
 800dd98:	250a      	movs	r5, #10
 800dd9a:	e007      	b.n	800ddac <_puts_r+0x60>
 800dd9c:	4621      	mov	r1, r4
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f000 f8d0 	bl	800df44 <__swsetup_r>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d0e7      	beq.n	800dd78 <_puts_r+0x2c>
 800dda8:	f04f 35ff 	mov.w	r5, #4294967295
 800ddac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddae:	07da      	lsls	r2, r3, #31
 800ddb0:	d405      	bmi.n	800ddbe <_puts_r+0x72>
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	059b      	lsls	r3, r3, #22
 800ddb6:	d402      	bmi.n	800ddbe <_puts_r+0x72>
 800ddb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddba:	f000 fa02 	bl	800e1c2 <__retarget_lock_release_recursive>
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	bd70      	pop	{r4, r5, r6, pc}
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	da04      	bge.n	800ddd0 <_puts_r+0x84>
 800ddc6:	69a2      	ldr	r2, [r4, #24]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	dc06      	bgt.n	800ddda <_puts_r+0x8e>
 800ddcc:	290a      	cmp	r1, #10
 800ddce:	d004      	beq.n	800ddda <_puts_r+0x8e>
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	6022      	str	r2, [r4, #0]
 800ddd6:	7019      	strb	r1, [r3, #0]
 800ddd8:	e7cf      	b.n	800dd7a <_puts_r+0x2e>
 800ddda:	4622      	mov	r2, r4
 800dddc:	4628      	mov	r0, r5
 800ddde:	f000 f874 	bl	800deca <__swbuf_r>
 800dde2:	3001      	adds	r0, #1
 800dde4:	d1c9      	bne.n	800dd7a <_puts_r+0x2e>
 800dde6:	e7df      	b.n	800dda8 <_puts_r+0x5c>
 800dde8:	6823      	ldr	r3, [r4, #0]
 800ddea:	250a      	movs	r5, #10
 800ddec:	1c5a      	adds	r2, r3, #1
 800ddee:	6022      	str	r2, [r4, #0]
 800ddf0:	701d      	strb	r5, [r3, #0]
 800ddf2:	e7db      	b.n	800ddac <_puts_r+0x60>

0800ddf4 <puts>:
 800ddf4:	4b02      	ldr	r3, [pc, #8]	; (800de00 <puts+0xc>)
 800ddf6:	4601      	mov	r1, r0
 800ddf8:	6818      	ldr	r0, [r3, #0]
 800ddfa:	f7ff bfa7 	b.w	800dd4c <_puts_r>
 800ddfe:	bf00      	nop
 800de00:	20000088 	.word	0x20000088

0800de04 <siprintf>:
 800de04:	b40e      	push	{r1, r2, r3}
 800de06:	b500      	push	{lr}
 800de08:	b09c      	sub	sp, #112	; 0x70
 800de0a:	ab1d      	add	r3, sp, #116	; 0x74
 800de0c:	9002      	str	r0, [sp, #8]
 800de0e:	9006      	str	r0, [sp, #24]
 800de10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de14:	4809      	ldr	r0, [pc, #36]	; (800de3c <siprintf+0x38>)
 800de16:	9107      	str	r1, [sp, #28]
 800de18:	9104      	str	r1, [sp, #16]
 800de1a:	4909      	ldr	r1, [pc, #36]	; (800de40 <siprintf+0x3c>)
 800de1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800de20:	9105      	str	r1, [sp, #20]
 800de22:	6800      	ldr	r0, [r0, #0]
 800de24:	9301      	str	r3, [sp, #4]
 800de26:	a902      	add	r1, sp, #8
 800de28:	f001 fd2a 	bl	800f880 <_svfiprintf_r>
 800de2c:	9b02      	ldr	r3, [sp, #8]
 800de2e:	2200      	movs	r2, #0
 800de30:	701a      	strb	r2, [r3, #0]
 800de32:	b01c      	add	sp, #112	; 0x70
 800de34:	f85d eb04 	ldr.w	lr, [sp], #4
 800de38:	b003      	add	sp, #12
 800de3a:	4770      	bx	lr
 800de3c:	20000088 	.word	0x20000088
 800de40:	ffff0208 	.word	0xffff0208

0800de44 <__sread>:
 800de44:	b510      	push	{r4, lr}
 800de46:	460c      	mov	r4, r1
 800de48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de4c:	f000 f96a 	bl	800e124 <_read_r>
 800de50:	2800      	cmp	r0, #0
 800de52:	bfab      	itete	ge
 800de54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de56:	89a3      	ldrhlt	r3, [r4, #12]
 800de58:	181b      	addge	r3, r3, r0
 800de5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de5e:	bfac      	ite	ge
 800de60:	6563      	strge	r3, [r4, #84]	; 0x54
 800de62:	81a3      	strhlt	r3, [r4, #12]
 800de64:	bd10      	pop	{r4, pc}

0800de66 <__swrite>:
 800de66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de6a:	461f      	mov	r7, r3
 800de6c:	898b      	ldrh	r3, [r1, #12]
 800de6e:	05db      	lsls	r3, r3, #23
 800de70:	4605      	mov	r5, r0
 800de72:	460c      	mov	r4, r1
 800de74:	4616      	mov	r6, r2
 800de76:	d505      	bpl.n	800de84 <__swrite+0x1e>
 800de78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de7c:	2302      	movs	r3, #2
 800de7e:	2200      	movs	r2, #0
 800de80:	f000 f93e 	bl	800e100 <_lseek_r>
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de8e:	81a3      	strh	r3, [r4, #12]
 800de90:	4632      	mov	r2, r6
 800de92:	463b      	mov	r3, r7
 800de94:	4628      	mov	r0, r5
 800de96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de9a:	f000 b955 	b.w	800e148 <_write_r>

0800de9e <__sseek>:
 800de9e:	b510      	push	{r4, lr}
 800dea0:	460c      	mov	r4, r1
 800dea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dea6:	f000 f92b 	bl	800e100 <_lseek_r>
 800deaa:	1c43      	adds	r3, r0, #1
 800deac:	89a3      	ldrh	r3, [r4, #12]
 800deae:	bf15      	itete	ne
 800deb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800deb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800deb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800deba:	81a3      	strheq	r3, [r4, #12]
 800debc:	bf18      	it	ne
 800debe:	81a3      	strhne	r3, [r4, #12]
 800dec0:	bd10      	pop	{r4, pc}

0800dec2 <__sclose>:
 800dec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec6:	f000 b8b5 	b.w	800e034 <_close_r>

0800deca <__swbuf_r>:
 800deca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800decc:	460e      	mov	r6, r1
 800dece:	4614      	mov	r4, r2
 800ded0:	4605      	mov	r5, r0
 800ded2:	b118      	cbz	r0, 800dedc <__swbuf_r+0x12>
 800ded4:	6a03      	ldr	r3, [r0, #32]
 800ded6:	b90b      	cbnz	r3, 800dedc <__swbuf_r+0x12>
 800ded8:	f7ff fef0 	bl	800dcbc <__sinit>
 800dedc:	69a3      	ldr	r3, [r4, #24]
 800dede:	60a3      	str	r3, [r4, #8]
 800dee0:	89a3      	ldrh	r3, [r4, #12]
 800dee2:	071a      	lsls	r2, r3, #28
 800dee4:	d525      	bpl.n	800df32 <__swbuf_r+0x68>
 800dee6:	6923      	ldr	r3, [r4, #16]
 800dee8:	b31b      	cbz	r3, 800df32 <__swbuf_r+0x68>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	6922      	ldr	r2, [r4, #16]
 800deee:	1a98      	subs	r0, r3, r2
 800def0:	6963      	ldr	r3, [r4, #20]
 800def2:	b2f6      	uxtb	r6, r6
 800def4:	4283      	cmp	r3, r0
 800def6:	4637      	mov	r7, r6
 800def8:	dc04      	bgt.n	800df04 <__swbuf_r+0x3a>
 800defa:	4621      	mov	r1, r4
 800defc:	4628      	mov	r0, r5
 800defe:	f001 ff87 	bl	800fe10 <_fflush_r>
 800df02:	b9e0      	cbnz	r0, 800df3e <__swbuf_r+0x74>
 800df04:	68a3      	ldr	r3, [r4, #8]
 800df06:	3b01      	subs	r3, #1
 800df08:	60a3      	str	r3, [r4, #8]
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	1c5a      	adds	r2, r3, #1
 800df0e:	6022      	str	r2, [r4, #0]
 800df10:	701e      	strb	r6, [r3, #0]
 800df12:	6962      	ldr	r2, [r4, #20]
 800df14:	1c43      	adds	r3, r0, #1
 800df16:	429a      	cmp	r2, r3
 800df18:	d004      	beq.n	800df24 <__swbuf_r+0x5a>
 800df1a:	89a3      	ldrh	r3, [r4, #12]
 800df1c:	07db      	lsls	r3, r3, #31
 800df1e:	d506      	bpl.n	800df2e <__swbuf_r+0x64>
 800df20:	2e0a      	cmp	r6, #10
 800df22:	d104      	bne.n	800df2e <__swbuf_r+0x64>
 800df24:	4621      	mov	r1, r4
 800df26:	4628      	mov	r0, r5
 800df28:	f001 ff72 	bl	800fe10 <_fflush_r>
 800df2c:	b938      	cbnz	r0, 800df3e <__swbuf_r+0x74>
 800df2e:	4638      	mov	r0, r7
 800df30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df32:	4621      	mov	r1, r4
 800df34:	4628      	mov	r0, r5
 800df36:	f000 f805 	bl	800df44 <__swsetup_r>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d0d5      	beq.n	800deea <__swbuf_r+0x20>
 800df3e:	f04f 37ff 	mov.w	r7, #4294967295
 800df42:	e7f4      	b.n	800df2e <__swbuf_r+0x64>

0800df44 <__swsetup_r>:
 800df44:	b538      	push	{r3, r4, r5, lr}
 800df46:	4b2a      	ldr	r3, [pc, #168]	; (800dff0 <__swsetup_r+0xac>)
 800df48:	4605      	mov	r5, r0
 800df4a:	6818      	ldr	r0, [r3, #0]
 800df4c:	460c      	mov	r4, r1
 800df4e:	b118      	cbz	r0, 800df58 <__swsetup_r+0x14>
 800df50:	6a03      	ldr	r3, [r0, #32]
 800df52:	b90b      	cbnz	r3, 800df58 <__swsetup_r+0x14>
 800df54:	f7ff feb2 	bl	800dcbc <__sinit>
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df5e:	0718      	lsls	r0, r3, #28
 800df60:	d422      	bmi.n	800dfa8 <__swsetup_r+0x64>
 800df62:	06d9      	lsls	r1, r3, #27
 800df64:	d407      	bmi.n	800df76 <__swsetup_r+0x32>
 800df66:	2309      	movs	r3, #9
 800df68:	602b      	str	r3, [r5, #0]
 800df6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df6e:	81a3      	strh	r3, [r4, #12]
 800df70:	f04f 30ff 	mov.w	r0, #4294967295
 800df74:	e034      	b.n	800dfe0 <__swsetup_r+0x9c>
 800df76:	0758      	lsls	r0, r3, #29
 800df78:	d512      	bpl.n	800dfa0 <__swsetup_r+0x5c>
 800df7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df7c:	b141      	cbz	r1, 800df90 <__swsetup_r+0x4c>
 800df7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df82:	4299      	cmp	r1, r3
 800df84:	d002      	beq.n	800df8c <__swsetup_r+0x48>
 800df86:	4628      	mov	r0, r5
 800df88:	f000 ffa4 	bl	800eed4 <_free_r>
 800df8c:	2300      	movs	r3, #0
 800df8e:	6363      	str	r3, [r4, #52]	; 0x34
 800df90:	89a3      	ldrh	r3, [r4, #12]
 800df92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df96:	81a3      	strh	r3, [r4, #12]
 800df98:	2300      	movs	r3, #0
 800df9a:	6063      	str	r3, [r4, #4]
 800df9c:	6923      	ldr	r3, [r4, #16]
 800df9e:	6023      	str	r3, [r4, #0]
 800dfa0:	89a3      	ldrh	r3, [r4, #12]
 800dfa2:	f043 0308 	orr.w	r3, r3, #8
 800dfa6:	81a3      	strh	r3, [r4, #12]
 800dfa8:	6923      	ldr	r3, [r4, #16]
 800dfaa:	b94b      	cbnz	r3, 800dfc0 <__swsetup_r+0x7c>
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfb6:	d003      	beq.n	800dfc0 <__swsetup_r+0x7c>
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f001 ff76 	bl	800feac <__smakebuf_r>
 800dfc0:	89a0      	ldrh	r0, [r4, #12]
 800dfc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfc6:	f010 0301 	ands.w	r3, r0, #1
 800dfca:	d00a      	beq.n	800dfe2 <__swsetup_r+0x9e>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60a3      	str	r3, [r4, #8]
 800dfd0:	6963      	ldr	r3, [r4, #20]
 800dfd2:	425b      	negs	r3, r3
 800dfd4:	61a3      	str	r3, [r4, #24]
 800dfd6:	6923      	ldr	r3, [r4, #16]
 800dfd8:	b943      	cbnz	r3, 800dfec <__swsetup_r+0xa8>
 800dfda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfde:	d1c4      	bne.n	800df6a <__swsetup_r+0x26>
 800dfe0:	bd38      	pop	{r3, r4, r5, pc}
 800dfe2:	0781      	lsls	r1, r0, #30
 800dfe4:	bf58      	it	pl
 800dfe6:	6963      	ldrpl	r3, [r4, #20]
 800dfe8:	60a3      	str	r3, [r4, #8]
 800dfea:	e7f4      	b.n	800dfd6 <__swsetup_r+0x92>
 800dfec:	2000      	movs	r0, #0
 800dfee:	e7f7      	b.n	800dfe0 <__swsetup_r+0x9c>
 800dff0:	20000088 	.word	0x20000088

0800dff4 <memset>:
 800dff4:	4402      	add	r2, r0
 800dff6:	4603      	mov	r3, r0
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d100      	bne.n	800dffe <memset+0xa>
 800dffc:	4770      	bx	lr
 800dffe:	f803 1b01 	strb.w	r1, [r3], #1
 800e002:	e7f9      	b.n	800dff8 <memset+0x4>

0800e004 <strncpy>:
 800e004:	b510      	push	{r4, lr}
 800e006:	3901      	subs	r1, #1
 800e008:	4603      	mov	r3, r0
 800e00a:	b132      	cbz	r2, 800e01a <strncpy+0x16>
 800e00c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e010:	f803 4b01 	strb.w	r4, [r3], #1
 800e014:	3a01      	subs	r2, #1
 800e016:	2c00      	cmp	r4, #0
 800e018:	d1f7      	bne.n	800e00a <strncpy+0x6>
 800e01a:	441a      	add	r2, r3
 800e01c:	2100      	movs	r1, #0
 800e01e:	4293      	cmp	r3, r2
 800e020:	d100      	bne.n	800e024 <strncpy+0x20>
 800e022:	bd10      	pop	{r4, pc}
 800e024:	f803 1b01 	strb.w	r1, [r3], #1
 800e028:	e7f9      	b.n	800e01e <strncpy+0x1a>
	...

0800e02c <_localeconv_r>:
 800e02c:	4800      	ldr	r0, [pc, #0]	; (800e030 <_localeconv_r+0x4>)
 800e02e:	4770      	bx	lr
 800e030:	2000017c 	.word	0x2000017c

0800e034 <_close_r>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	4d06      	ldr	r5, [pc, #24]	; (800e050 <_close_r+0x1c>)
 800e038:	2300      	movs	r3, #0
 800e03a:	4604      	mov	r4, r0
 800e03c:	4608      	mov	r0, r1
 800e03e:	602b      	str	r3, [r5, #0]
 800e040:	f7f4 fe39 	bl	8002cb6 <_close>
 800e044:	1c43      	adds	r3, r0, #1
 800e046:	d102      	bne.n	800e04e <_close_r+0x1a>
 800e048:	682b      	ldr	r3, [r5, #0]
 800e04a:	b103      	cbz	r3, 800e04e <_close_r+0x1a>
 800e04c:	6023      	str	r3, [r4, #0]
 800e04e:	bd38      	pop	{r3, r4, r5, pc}
 800e050:	200098b8 	.word	0x200098b8

0800e054 <_reclaim_reent>:
 800e054:	4b29      	ldr	r3, [pc, #164]	; (800e0fc <_reclaim_reent+0xa8>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4283      	cmp	r3, r0
 800e05a:	b570      	push	{r4, r5, r6, lr}
 800e05c:	4604      	mov	r4, r0
 800e05e:	d04b      	beq.n	800e0f8 <_reclaim_reent+0xa4>
 800e060:	69c3      	ldr	r3, [r0, #28]
 800e062:	b143      	cbz	r3, 800e076 <_reclaim_reent+0x22>
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d144      	bne.n	800e0f4 <_reclaim_reent+0xa0>
 800e06a:	69e3      	ldr	r3, [r4, #28]
 800e06c:	6819      	ldr	r1, [r3, #0]
 800e06e:	b111      	cbz	r1, 800e076 <_reclaim_reent+0x22>
 800e070:	4620      	mov	r0, r4
 800e072:	f000 ff2f 	bl	800eed4 <_free_r>
 800e076:	6961      	ldr	r1, [r4, #20]
 800e078:	b111      	cbz	r1, 800e080 <_reclaim_reent+0x2c>
 800e07a:	4620      	mov	r0, r4
 800e07c:	f000 ff2a 	bl	800eed4 <_free_r>
 800e080:	69e1      	ldr	r1, [r4, #28]
 800e082:	b111      	cbz	r1, 800e08a <_reclaim_reent+0x36>
 800e084:	4620      	mov	r0, r4
 800e086:	f000 ff25 	bl	800eed4 <_free_r>
 800e08a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e08c:	b111      	cbz	r1, 800e094 <_reclaim_reent+0x40>
 800e08e:	4620      	mov	r0, r4
 800e090:	f000 ff20 	bl	800eed4 <_free_r>
 800e094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e096:	b111      	cbz	r1, 800e09e <_reclaim_reent+0x4a>
 800e098:	4620      	mov	r0, r4
 800e09a:	f000 ff1b 	bl	800eed4 <_free_r>
 800e09e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e0a0:	b111      	cbz	r1, 800e0a8 <_reclaim_reent+0x54>
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f000 ff16 	bl	800eed4 <_free_r>
 800e0a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e0aa:	b111      	cbz	r1, 800e0b2 <_reclaim_reent+0x5e>
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f000 ff11 	bl	800eed4 <_free_r>
 800e0b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e0b4:	b111      	cbz	r1, 800e0bc <_reclaim_reent+0x68>
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f000 ff0c 	bl	800eed4 <_free_r>
 800e0bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e0be:	b111      	cbz	r1, 800e0c6 <_reclaim_reent+0x72>
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	f000 ff07 	bl	800eed4 <_free_r>
 800e0c6:	6a23      	ldr	r3, [r4, #32]
 800e0c8:	b1b3      	cbz	r3, 800e0f8 <_reclaim_reent+0xa4>
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0d0:	4718      	bx	r3
 800e0d2:	5949      	ldr	r1, [r1, r5]
 800e0d4:	b941      	cbnz	r1, 800e0e8 <_reclaim_reent+0x94>
 800e0d6:	3504      	adds	r5, #4
 800e0d8:	69e3      	ldr	r3, [r4, #28]
 800e0da:	2d80      	cmp	r5, #128	; 0x80
 800e0dc:	68d9      	ldr	r1, [r3, #12]
 800e0de:	d1f8      	bne.n	800e0d2 <_reclaim_reent+0x7e>
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f000 fef7 	bl	800eed4 <_free_r>
 800e0e6:	e7c0      	b.n	800e06a <_reclaim_reent+0x16>
 800e0e8:	680e      	ldr	r6, [r1, #0]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fef2 	bl	800eed4 <_free_r>
 800e0f0:	4631      	mov	r1, r6
 800e0f2:	e7ef      	b.n	800e0d4 <_reclaim_reent+0x80>
 800e0f4:	2500      	movs	r5, #0
 800e0f6:	e7ef      	b.n	800e0d8 <_reclaim_reent+0x84>
 800e0f8:	bd70      	pop	{r4, r5, r6, pc}
 800e0fa:	bf00      	nop
 800e0fc:	20000088 	.word	0x20000088

0800e100 <_lseek_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4d07      	ldr	r5, [pc, #28]	; (800e120 <_lseek_r+0x20>)
 800e104:	4604      	mov	r4, r0
 800e106:	4608      	mov	r0, r1
 800e108:	4611      	mov	r1, r2
 800e10a:	2200      	movs	r2, #0
 800e10c:	602a      	str	r2, [r5, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	f7f4 fdf8 	bl	8002d04 <_lseek>
 800e114:	1c43      	adds	r3, r0, #1
 800e116:	d102      	bne.n	800e11e <_lseek_r+0x1e>
 800e118:	682b      	ldr	r3, [r5, #0]
 800e11a:	b103      	cbz	r3, 800e11e <_lseek_r+0x1e>
 800e11c:	6023      	str	r3, [r4, #0]
 800e11e:	bd38      	pop	{r3, r4, r5, pc}
 800e120:	200098b8 	.word	0x200098b8

0800e124 <_read_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4d07      	ldr	r5, [pc, #28]	; (800e144 <_read_r+0x20>)
 800e128:	4604      	mov	r4, r0
 800e12a:	4608      	mov	r0, r1
 800e12c:	4611      	mov	r1, r2
 800e12e:	2200      	movs	r2, #0
 800e130:	602a      	str	r2, [r5, #0]
 800e132:	461a      	mov	r2, r3
 800e134:	f7f4 fd86 	bl	8002c44 <_read>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	d102      	bne.n	800e142 <_read_r+0x1e>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	b103      	cbz	r3, 800e142 <_read_r+0x1e>
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	bd38      	pop	{r3, r4, r5, pc}
 800e144:	200098b8 	.word	0x200098b8

0800e148 <_write_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	4d07      	ldr	r5, [pc, #28]	; (800e168 <_write_r+0x20>)
 800e14c:	4604      	mov	r4, r0
 800e14e:	4608      	mov	r0, r1
 800e150:	4611      	mov	r1, r2
 800e152:	2200      	movs	r2, #0
 800e154:	602a      	str	r2, [r5, #0]
 800e156:	461a      	mov	r2, r3
 800e158:	f7f4 fd91 	bl	8002c7e <_write>
 800e15c:	1c43      	adds	r3, r0, #1
 800e15e:	d102      	bne.n	800e166 <_write_r+0x1e>
 800e160:	682b      	ldr	r3, [r5, #0]
 800e162:	b103      	cbz	r3, 800e166 <_write_r+0x1e>
 800e164:	6023      	str	r3, [r4, #0]
 800e166:	bd38      	pop	{r3, r4, r5, pc}
 800e168:	200098b8 	.word	0x200098b8

0800e16c <__errno>:
 800e16c:	4b01      	ldr	r3, [pc, #4]	; (800e174 <__errno+0x8>)
 800e16e:	6818      	ldr	r0, [r3, #0]
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	20000088 	.word	0x20000088

0800e178 <__libc_init_array>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4d0d      	ldr	r5, [pc, #52]	; (800e1b0 <__libc_init_array+0x38>)
 800e17c:	4c0d      	ldr	r4, [pc, #52]	; (800e1b4 <__libc_init_array+0x3c>)
 800e17e:	1b64      	subs	r4, r4, r5
 800e180:	10a4      	asrs	r4, r4, #2
 800e182:	2600      	movs	r6, #0
 800e184:	42a6      	cmp	r6, r4
 800e186:	d109      	bne.n	800e19c <__libc_init_array+0x24>
 800e188:	4d0b      	ldr	r5, [pc, #44]	; (800e1b8 <__libc_init_array+0x40>)
 800e18a:	4c0c      	ldr	r4, [pc, #48]	; (800e1bc <__libc_init_array+0x44>)
 800e18c:	f001 fffe 	bl	801018c <_init>
 800e190:	1b64      	subs	r4, r4, r5
 800e192:	10a4      	asrs	r4, r4, #2
 800e194:	2600      	movs	r6, #0
 800e196:	42a6      	cmp	r6, r4
 800e198:	d105      	bne.n	800e1a6 <__libc_init_array+0x2e>
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1a0:	4798      	blx	r3
 800e1a2:	3601      	adds	r6, #1
 800e1a4:	e7ee      	b.n	800e184 <__libc_init_array+0xc>
 800e1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1aa:	4798      	blx	r3
 800e1ac:	3601      	adds	r6, #1
 800e1ae:	e7f2      	b.n	800e196 <__libc_init_array+0x1e>
 800e1b0:	08010de4 	.word	0x08010de4
 800e1b4:	08010de4 	.word	0x08010de4
 800e1b8:	08010de4 	.word	0x08010de4
 800e1bc:	08010de8 	.word	0x08010de8

0800e1c0 <__retarget_lock_acquire_recursive>:
 800e1c0:	4770      	bx	lr

0800e1c2 <__retarget_lock_release_recursive>:
 800e1c2:	4770      	bx	lr

0800e1c4 <memcpy>:
 800e1c4:	440a      	add	r2, r1
 800e1c6:	4291      	cmp	r1, r2
 800e1c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1cc:	d100      	bne.n	800e1d0 <memcpy+0xc>
 800e1ce:	4770      	bx	lr
 800e1d0:	b510      	push	{r4, lr}
 800e1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1da:	4291      	cmp	r1, r2
 800e1dc:	d1f9      	bne.n	800e1d2 <memcpy+0xe>
 800e1de:	bd10      	pop	{r4, pc}

0800e1e0 <quorem>:
 800e1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	6903      	ldr	r3, [r0, #16]
 800e1e6:	690c      	ldr	r4, [r1, #16]
 800e1e8:	42a3      	cmp	r3, r4
 800e1ea:	4607      	mov	r7, r0
 800e1ec:	db7e      	blt.n	800e2ec <quorem+0x10c>
 800e1ee:	3c01      	subs	r4, #1
 800e1f0:	f101 0814 	add.w	r8, r1, #20
 800e1f4:	f100 0514 	add.w	r5, r0, #20
 800e1f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1fc:	9301      	str	r3, [sp, #4]
 800e1fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e206:	3301      	adds	r3, #1
 800e208:	429a      	cmp	r2, r3
 800e20a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e20e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e212:	fbb2 f6f3 	udiv	r6, r2, r3
 800e216:	d331      	bcc.n	800e27c <quorem+0x9c>
 800e218:	f04f 0e00 	mov.w	lr, #0
 800e21c:	4640      	mov	r0, r8
 800e21e:	46ac      	mov	ip, r5
 800e220:	46f2      	mov	sl, lr
 800e222:	f850 2b04 	ldr.w	r2, [r0], #4
 800e226:	b293      	uxth	r3, r2
 800e228:	fb06 e303 	mla	r3, r6, r3, lr
 800e22c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e230:	0c1a      	lsrs	r2, r3, #16
 800e232:	b29b      	uxth	r3, r3
 800e234:	ebaa 0303 	sub.w	r3, sl, r3
 800e238:	f8dc a000 	ldr.w	sl, [ip]
 800e23c:	fa13 f38a 	uxtah	r3, r3, sl
 800e240:	fb06 220e 	mla	r2, r6, lr, r2
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	9b00      	ldr	r3, [sp, #0]
 800e248:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e24c:	b292      	uxth	r2, r2
 800e24e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e252:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e256:	f8bd 3000 	ldrh.w	r3, [sp]
 800e25a:	4581      	cmp	r9, r0
 800e25c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e260:	f84c 3b04 	str.w	r3, [ip], #4
 800e264:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e268:	d2db      	bcs.n	800e222 <quorem+0x42>
 800e26a:	f855 300b 	ldr.w	r3, [r5, fp]
 800e26e:	b92b      	cbnz	r3, 800e27c <quorem+0x9c>
 800e270:	9b01      	ldr	r3, [sp, #4]
 800e272:	3b04      	subs	r3, #4
 800e274:	429d      	cmp	r5, r3
 800e276:	461a      	mov	r2, r3
 800e278:	d32c      	bcc.n	800e2d4 <quorem+0xf4>
 800e27a:	613c      	str	r4, [r7, #16]
 800e27c:	4638      	mov	r0, r7
 800e27e:	f001 f9a5 	bl	800f5cc <__mcmp>
 800e282:	2800      	cmp	r0, #0
 800e284:	db22      	blt.n	800e2cc <quorem+0xec>
 800e286:	3601      	adds	r6, #1
 800e288:	4629      	mov	r1, r5
 800e28a:	2000      	movs	r0, #0
 800e28c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e290:	f8d1 c000 	ldr.w	ip, [r1]
 800e294:	b293      	uxth	r3, r2
 800e296:	1ac3      	subs	r3, r0, r3
 800e298:	0c12      	lsrs	r2, r2, #16
 800e29a:	fa13 f38c 	uxtah	r3, r3, ip
 800e29e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e2a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2ac:	45c1      	cmp	r9, r8
 800e2ae:	f841 3b04 	str.w	r3, [r1], #4
 800e2b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e2b6:	d2e9      	bcs.n	800e28c <quorem+0xac>
 800e2b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2c0:	b922      	cbnz	r2, 800e2cc <quorem+0xec>
 800e2c2:	3b04      	subs	r3, #4
 800e2c4:	429d      	cmp	r5, r3
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	d30a      	bcc.n	800e2e0 <quorem+0x100>
 800e2ca:	613c      	str	r4, [r7, #16]
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	b003      	add	sp, #12
 800e2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d4:	6812      	ldr	r2, [r2, #0]
 800e2d6:	3b04      	subs	r3, #4
 800e2d8:	2a00      	cmp	r2, #0
 800e2da:	d1ce      	bne.n	800e27a <quorem+0x9a>
 800e2dc:	3c01      	subs	r4, #1
 800e2de:	e7c9      	b.n	800e274 <quorem+0x94>
 800e2e0:	6812      	ldr	r2, [r2, #0]
 800e2e2:	3b04      	subs	r3, #4
 800e2e4:	2a00      	cmp	r2, #0
 800e2e6:	d1f0      	bne.n	800e2ca <quorem+0xea>
 800e2e8:	3c01      	subs	r4, #1
 800e2ea:	e7eb      	b.n	800e2c4 <quorem+0xe4>
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	e7ee      	b.n	800e2ce <quorem+0xee>

0800e2f0 <_dtoa_r>:
 800e2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f4:	ed2d 8b04 	vpush	{d8-d9}
 800e2f8:	69c5      	ldr	r5, [r0, #28]
 800e2fa:	b093      	sub	sp, #76	; 0x4c
 800e2fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e300:	ec57 6b10 	vmov	r6, r7, d0
 800e304:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e308:	9107      	str	r1, [sp, #28]
 800e30a:	4604      	mov	r4, r0
 800e30c:	920a      	str	r2, [sp, #40]	; 0x28
 800e30e:	930d      	str	r3, [sp, #52]	; 0x34
 800e310:	b975      	cbnz	r5, 800e330 <_dtoa_r+0x40>
 800e312:	2010      	movs	r0, #16
 800e314:	f000 fe2a 	bl	800ef6c <malloc>
 800e318:	4602      	mov	r2, r0
 800e31a:	61e0      	str	r0, [r4, #28]
 800e31c:	b920      	cbnz	r0, 800e328 <_dtoa_r+0x38>
 800e31e:	4bae      	ldr	r3, [pc, #696]	; (800e5d8 <_dtoa_r+0x2e8>)
 800e320:	21ef      	movs	r1, #239	; 0xef
 800e322:	48ae      	ldr	r0, [pc, #696]	; (800e5dc <_dtoa_r+0x2ec>)
 800e324:	f001 fe4a 	bl	800ffbc <__assert_func>
 800e328:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e32c:	6005      	str	r5, [r0, #0]
 800e32e:	60c5      	str	r5, [r0, #12]
 800e330:	69e3      	ldr	r3, [r4, #28]
 800e332:	6819      	ldr	r1, [r3, #0]
 800e334:	b151      	cbz	r1, 800e34c <_dtoa_r+0x5c>
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	604a      	str	r2, [r1, #4]
 800e33a:	2301      	movs	r3, #1
 800e33c:	4093      	lsls	r3, r2
 800e33e:	608b      	str	r3, [r1, #8]
 800e340:	4620      	mov	r0, r4
 800e342:	f000 ff07 	bl	800f154 <_Bfree>
 800e346:	69e3      	ldr	r3, [r4, #28]
 800e348:	2200      	movs	r2, #0
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	1e3b      	subs	r3, r7, #0
 800e34e:	bfbb      	ittet	lt
 800e350:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e354:	9303      	strlt	r3, [sp, #12]
 800e356:	2300      	movge	r3, #0
 800e358:	2201      	movlt	r2, #1
 800e35a:	bfac      	ite	ge
 800e35c:	f8c8 3000 	strge.w	r3, [r8]
 800e360:	f8c8 2000 	strlt.w	r2, [r8]
 800e364:	4b9e      	ldr	r3, [pc, #632]	; (800e5e0 <_dtoa_r+0x2f0>)
 800e366:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e36a:	ea33 0308 	bics.w	r3, r3, r8
 800e36e:	d11b      	bne.n	800e3a8 <_dtoa_r+0xb8>
 800e370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e372:	f242 730f 	movw	r3, #9999	; 0x270f
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e37c:	4333      	orrs	r3, r6
 800e37e:	f000 8593 	beq.w	800eea8 <_dtoa_r+0xbb8>
 800e382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e384:	b963      	cbnz	r3, 800e3a0 <_dtoa_r+0xb0>
 800e386:	4b97      	ldr	r3, [pc, #604]	; (800e5e4 <_dtoa_r+0x2f4>)
 800e388:	e027      	b.n	800e3da <_dtoa_r+0xea>
 800e38a:	4b97      	ldr	r3, [pc, #604]	; (800e5e8 <_dtoa_r+0x2f8>)
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	3308      	adds	r3, #8
 800e390:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e392:	6013      	str	r3, [r2, #0]
 800e394:	9800      	ldr	r0, [sp, #0]
 800e396:	b013      	add	sp, #76	; 0x4c
 800e398:	ecbd 8b04 	vpop	{d8-d9}
 800e39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a0:	4b90      	ldr	r3, [pc, #576]	; (800e5e4 <_dtoa_r+0x2f4>)
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	3303      	adds	r3, #3
 800e3a6:	e7f3      	b.n	800e390 <_dtoa_r+0xa0>
 800e3a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	ec51 0b17 	vmov	r0, r1, d7
 800e3b2:	eeb0 8a47 	vmov.f32	s16, s14
 800e3b6:	eef0 8a67 	vmov.f32	s17, s15
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f7f2 fbb4 	bl	8000b28 <__aeabi_dcmpeq>
 800e3c0:	4681      	mov	r9, r0
 800e3c2:	b160      	cbz	r0, 800e3de <_dtoa_r+0xee>
 800e3c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	6013      	str	r3, [r2, #0]
 800e3ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 8568 	beq.w	800eea2 <_dtoa_r+0xbb2>
 800e3d2:	4b86      	ldr	r3, [pc, #536]	; (800e5ec <_dtoa_r+0x2fc>)
 800e3d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3d6:	6013      	str	r3, [r2, #0]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	e7da      	b.n	800e394 <_dtoa_r+0xa4>
 800e3de:	aa10      	add	r2, sp, #64	; 0x40
 800e3e0:	a911      	add	r1, sp, #68	; 0x44
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	eeb0 0a48 	vmov.f32	s0, s16
 800e3e8:	eef0 0a68 	vmov.f32	s1, s17
 800e3ec:	f001 f994 	bl	800f718 <__d2b>
 800e3f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e3f4:	4682      	mov	sl, r0
 800e3f6:	2d00      	cmp	r5, #0
 800e3f8:	d07f      	beq.n	800e4fa <_dtoa_r+0x20a>
 800e3fa:	ee18 3a90 	vmov	r3, s17
 800e3fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e402:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e406:	ec51 0b18 	vmov	r0, r1, d8
 800e40a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e40e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e412:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e416:	4619      	mov	r1, r3
 800e418:	2200      	movs	r2, #0
 800e41a:	4b75      	ldr	r3, [pc, #468]	; (800e5f0 <_dtoa_r+0x300>)
 800e41c:	f7f1 ff64 	bl	80002e8 <__aeabi_dsub>
 800e420:	a367      	add	r3, pc, #412	; (adr r3, 800e5c0 <_dtoa_r+0x2d0>)
 800e422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e426:	f7f2 f917 	bl	8000658 <__aeabi_dmul>
 800e42a:	a367      	add	r3, pc, #412	; (adr r3, 800e5c8 <_dtoa_r+0x2d8>)
 800e42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e430:	f7f1 ff5c 	bl	80002ec <__adddf3>
 800e434:	4606      	mov	r6, r0
 800e436:	4628      	mov	r0, r5
 800e438:	460f      	mov	r7, r1
 800e43a:	f7f2 f8a3 	bl	8000584 <__aeabi_i2d>
 800e43e:	a364      	add	r3, pc, #400	; (adr r3, 800e5d0 <_dtoa_r+0x2e0>)
 800e440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e444:	f7f2 f908 	bl	8000658 <__aeabi_dmul>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4630      	mov	r0, r6
 800e44e:	4639      	mov	r1, r7
 800e450:	f7f1 ff4c 	bl	80002ec <__adddf3>
 800e454:	4606      	mov	r6, r0
 800e456:	460f      	mov	r7, r1
 800e458:	f7f2 fbae 	bl	8000bb8 <__aeabi_d2iz>
 800e45c:	2200      	movs	r2, #0
 800e45e:	4683      	mov	fp, r0
 800e460:	2300      	movs	r3, #0
 800e462:	4630      	mov	r0, r6
 800e464:	4639      	mov	r1, r7
 800e466:	f7f2 fb69 	bl	8000b3c <__aeabi_dcmplt>
 800e46a:	b148      	cbz	r0, 800e480 <_dtoa_r+0x190>
 800e46c:	4658      	mov	r0, fp
 800e46e:	f7f2 f889 	bl	8000584 <__aeabi_i2d>
 800e472:	4632      	mov	r2, r6
 800e474:	463b      	mov	r3, r7
 800e476:	f7f2 fb57 	bl	8000b28 <__aeabi_dcmpeq>
 800e47a:	b908      	cbnz	r0, 800e480 <_dtoa_r+0x190>
 800e47c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e480:	f1bb 0f16 	cmp.w	fp, #22
 800e484:	d857      	bhi.n	800e536 <_dtoa_r+0x246>
 800e486:	4b5b      	ldr	r3, [pc, #364]	; (800e5f4 <_dtoa_r+0x304>)
 800e488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	ec51 0b18 	vmov	r0, r1, d8
 800e494:	f7f2 fb52 	bl	8000b3c <__aeabi_dcmplt>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d04e      	beq.n	800e53a <_dtoa_r+0x24a>
 800e49c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	930c      	str	r3, [sp, #48]	; 0x30
 800e4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4a6:	1b5b      	subs	r3, r3, r5
 800e4a8:	1e5a      	subs	r2, r3, #1
 800e4aa:	bf45      	ittet	mi
 800e4ac:	f1c3 0301 	rsbmi	r3, r3, #1
 800e4b0:	9305      	strmi	r3, [sp, #20]
 800e4b2:	2300      	movpl	r3, #0
 800e4b4:	2300      	movmi	r3, #0
 800e4b6:	9206      	str	r2, [sp, #24]
 800e4b8:	bf54      	ite	pl
 800e4ba:	9305      	strpl	r3, [sp, #20]
 800e4bc:	9306      	strmi	r3, [sp, #24]
 800e4be:	f1bb 0f00 	cmp.w	fp, #0
 800e4c2:	db3c      	blt.n	800e53e <_dtoa_r+0x24e>
 800e4c4:	9b06      	ldr	r3, [sp, #24]
 800e4c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e4ca:	445b      	add	r3, fp
 800e4cc:	9306      	str	r3, [sp, #24]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	9308      	str	r3, [sp, #32]
 800e4d2:	9b07      	ldr	r3, [sp, #28]
 800e4d4:	2b09      	cmp	r3, #9
 800e4d6:	d868      	bhi.n	800e5aa <_dtoa_r+0x2ba>
 800e4d8:	2b05      	cmp	r3, #5
 800e4da:	bfc4      	itt	gt
 800e4dc:	3b04      	subgt	r3, #4
 800e4de:	9307      	strgt	r3, [sp, #28]
 800e4e0:	9b07      	ldr	r3, [sp, #28]
 800e4e2:	f1a3 0302 	sub.w	r3, r3, #2
 800e4e6:	bfcc      	ite	gt
 800e4e8:	2500      	movgt	r5, #0
 800e4ea:	2501      	movle	r5, #1
 800e4ec:	2b03      	cmp	r3, #3
 800e4ee:	f200 8085 	bhi.w	800e5fc <_dtoa_r+0x30c>
 800e4f2:	e8df f003 	tbb	[pc, r3]
 800e4f6:	3b2e      	.short	0x3b2e
 800e4f8:	5839      	.short	0x5839
 800e4fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4fe:	441d      	add	r5, r3
 800e500:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e504:	2b20      	cmp	r3, #32
 800e506:	bfc1      	itttt	gt
 800e508:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e50c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e510:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e514:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e518:	bfd6      	itet	le
 800e51a:	f1c3 0320 	rsble	r3, r3, #32
 800e51e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e522:	fa06 f003 	lslle.w	r0, r6, r3
 800e526:	f7f2 f81d 	bl	8000564 <__aeabi_ui2d>
 800e52a:	2201      	movs	r2, #1
 800e52c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e530:	3d01      	subs	r5, #1
 800e532:	920e      	str	r2, [sp, #56]	; 0x38
 800e534:	e76f      	b.n	800e416 <_dtoa_r+0x126>
 800e536:	2301      	movs	r3, #1
 800e538:	e7b3      	b.n	800e4a2 <_dtoa_r+0x1b2>
 800e53a:	900c      	str	r0, [sp, #48]	; 0x30
 800e53c:	e7b2      	b.n	800e4a4 <_dtoa_r+0x1b4>
 800e53e:	9b05      	ldr	r3, [sp, #20]
 800e540:	eba3 030b 	sub.w	r3, r3, fp
 800e544:	9305      	str	r3, [sp, #20]
 800e546:	f1cb 0300 	rsb	r3, fp, #0
 800e54a:	9308      	str	r3, [sp, #32]
 800e54c:	2300      	movs	r3, #0
 800e54e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e550:	e7bf      	b.n	800e4d2 <_dtoa_r+0x1e2>
 800e552:	2300      	movs	r3, #0
 800e554:	9309      	str	r3, [sp, #36]	; 0x24
 800e556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e558:	2b00      	cmp	r3, #0
 800e55a:	dc52      	bgt.n	800e602 <_dtoa_r+0x312>
 800e55c:	2301      	movs	r3, #1
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	9304      	str	r3, [sp, #16]
 800e562:	461a      	mov	r2, r3
 800e564:	920a      	str	r2, [sp, #40]	; 0x28
 800e566:	e00b      	b.n	800e580 <_dtoa_r+0x290>
 800e568:	2301      	movs	r3, #1
 800e56a:	e7f3      	b.n	800e554 <_dtoa_r+0x264>
 800e56c:	2300      	movs	r3, #0
 800e56e:	9309      	str	r3, [sp, #36]	; 0x24
 800e570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e572:	445b      	add	r3, fp
 800e574:	9301      	str	r3, [sp, #4]
 800e576:	3301      	adds	r3, #1
 800e578:	2b01      	cmp	r3, #1
 800e57a:	9304      	str	r3, [sp, #16]
 800e57c:	bfb8      	it	lt
 800e57e:	2301      	movlt	r3, #1
 800e580:	69e0      	ldr	r0, [r4, #28]
 800e582:	2100      	movs	r1, #0
 800e584:	2204      	movs	r2, #4
 800e586:	f102 0614 	add.w	r6, r2, #20
 800e58a:	429e      	cmp	r6, r3
 800e58c:	d93d      	bls.n	800e60a <_dtoa_r+0x31a>
 800e58e:	6041      	str	r1, [r0, #4]
 800e590:	4620      	mov	r0, r4
 800e592:	f000 fd9f 	bl	800f0d4 <_Balloc>
 800e596:	9000      	str	r0, [sp, #0]
 800e598:	2800      	cmp	r0, #0
 800e59a:	d139      	bne.n	800e610 <_dtoa_r+0x320>
 800e59c:	4b16      	ldr	r3, [pc, #88]	; (800e5f8 <_dtoa_r+0x308>)
 800e59e:	4602      	mov	r2, r0
 800e5a0:	f240 11af 	movw	r1, #431	; 0x1af
 800e5a4:	e6bd      	b.n	800e322 <_dtoa_r+0x32>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e7e1      	b.n	800e56e <_dtoa_r+0x27e>
 800e5aa:	2501      	movs	r5, #1
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	9307      	str	r3, [sp, #28]
 800e5b0:	9509      	str	r5, [sp, #36]	; 0x24
 800e5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b6:	9301      	str	r3, [sp, #4]
 800e5b8:	9304      	str	r3, [sp, #16]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	2312      	movs	r3, #18
 800e5be:	e7d1      	b.n	800e564 <_dtoa_r+0x274>
 800e5c0:	636f4361 	.word	0x636f4361
 800e5c4:	3fd287a7 	.word	0x3fd287a7
 800e5c8:	8b60c8b3 	.word	0x8b60c8b3
 800e5cc:	3fc68a28 	.word	0x3fc68a28
 800e5d0:	509f79fb 	.word	0x509f79fb
 800e5d4:	3fd34413 	.word	0x3fd34413
 800e5d8:	08010aad 	.word	0x08010aad
 800e5dc:	08010ac4 	.word	0x08010ac4
 800e5e0:	7ff00000 	.word	0x7ff00000
 800e5e4:	08010aa9 	.word	0x08010aa9
 800e5e8:	08010aa0 	.word	0x08010aa0
 800e5ec:	08010a7d 	.word	0x08010a7d
 800e5f0:	3ff80000 	.word	0x3ff80000
 800e5f4:	08010bb0 	.word	0x08010bb0
 800e5f8:	08010b1c 	.word	0x08010b1c
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e600:	e7d7      	b.n	800e5b2 <_dtoa_r+0x2c2>
 800e602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e604:	9301      	str	r3, [sp, #4]
 800e606:	9304      	str	r3, [sp, #16]
 800e608:	e7ba      	b.n	800e580 <_dtoa_r+0x290>
 800e60a:	3101      	adds	r1, #1
 800e60c:	0052      	lsls	r2, r2, #1
 800e60e:	e7ba      	b.n	800e586 <_dtoa_r+0x296>
 800e610:	69e3      	ldr	r3, [r4, #28]
 800e612:	9a00      	ldr	r2, [sp, #0]
 800e614:	601a      	str	r2, [r3, #0]
 800e616:	9b04      	ldr	r3, [sp, #16]
 800e618:	2b0e      	cmp	r3, #14
 800e61a:	f200 80a8 	bhi.w	800e76e <_dtoa_r+0x47e>
 800e61e:	2d00      	cmp	r5, #0
 800e620:	f000 80a5 	beq.w	800e76e <_dtoa_r+0x47e>
 800e624:	f1bb 0f00 	cmp.w	fp, #0
 800e628:	dd38      	ble.n	800e69c <_dtoa_r+0x3ac>
 800e62a:	4bc0      	ldr	r3, [pc, #768]	; (800e92c <_dtoa_r+0x63c>)
 800e62c:	f00b 020f 	and.w	r2, fp, #15
 800e630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e634:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e638:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e63c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e640:	d019      	beq.n	800e676 <_dtoa_r+0x386>
 800e642:	4bbb      	ldr	r3, [pc, #748]	; (800e930 <_dtoa_r+0x640>)
 800e644:	ec51 0b18 	vmov	r0, r1, d8
 800e648:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e64c:	f7f2 f92e 	bl	80008ac <__aeabi_ddiv>
 800e650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e654:	f008 080f 	and.w	r8, r8, #15
 800e658:	2503      	movs	r5, #3
 800e65a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e930 <_dtoa_r+0x640>
 800e65e:	f1b8 0f00 	cmp.w	r8, #0
 800e662:	d10a      	bne.n	800e67a <_dtoa_r+0x38a>
 800e664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e668:	4632      	mov	r2, r6
 800e66a:	463b      	mov	r3, r7
 800e66c:	f7f2 f91e 	bl	80008ac <__aeabi_ddiv>
 800e670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e674:	e02b      	b.n	800e6ce <_dtoa_r+0x3de>
 800e676:	2502      	movs	r5, #2
 800e678:	e7ef      	b.n	800e65a <_dtoa_r+0x36a>
 800e67a:	f018 0f01 	tst.w	r8, #1
 800e67e:	d008      	beq.n	800e692 <_dtoa_r+0x3a2>
 800e680:	4630      	mov	r0, r6
 800e682:	4639      	mov	r1, r7
 800e684:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e688:	f7f1 ffe6 	bl	8000658 <__aeabi_dmul>
 800e68c:	3501      	adds	r5, #1
 800e68e:	4606      	mov	r6, r0
 800e690:	460f      	mov	r7, r1
 800e692:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e696:	f109 0908 	add.w	r9, r9, #8
 800e69a:	e7e0      	b.n	800e65e <_dtoa_r+0x36e>
 800e69c:	f000 809f 	beq.w	800e7de <_dtoa_r+0x4ee>
 800e6a0:	f1cb 0600 	rsb	r6, fp, #0
 800e6a4:	4ba1      	ldr	r3, [pc, #644]	; (800e92c <_dtoa_r+0x63c>)
 800e6a6:	4fa2      	ldr	r7, [pc, #648]	; (800e930 <_dtoa_r+0x640>)
 800e6a8:	f006 020f 	and.w	r2, r6, #15
 800e6ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	ec51 0b18 	vmov	r0, r1, d8
 800e6b8:	f7f1 ffce 	bl	8000658 <__aeabi_dmul>
 800e6bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6c0:	1136      	asrs	r6, r6, #4
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	2502      	movs	r5, #2
 800e6c6:	2e00      	cmp	r6, #0
 800e6c8:	d17e      	bne.n	800e7c8 <_dtoa_r+0x4d8>
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1d0      	bne.n	800e670 <_dtoa_r+0x380>
 800e6ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 8084 	beq.w	800e7e2 <_dtoa_r+0x4f2>
 800e6da:	4b96      	ldr	r3, [pc, #600]	; (800e934 <_dtoa_r+0x644>)
 800e6dc:	2200      	movs	r2, #0
 800e6de:	4640      	mov	r0, r8
 800e6e0:	4649      	mov	r1, r9
 800e6e2:	f7f2 fa2b 	bl	8000b3c <__aeabi_dcmplt>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d07b      	beq.n	800e7e2 <_dtoa_r+0x4f2>
 800e6ea:	9b04      	ldr	r3, [sp, #16]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d078      	beq.n	800e7e2 <_dtoa_r+0x4f2>
 800e6f0:	9b01      	ldr	r3, [sp, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	dd39      	ble.n	800e76a <_dtoa_r+0x47a>
 800e6f6:	4b90      	ldr	r3, [pc, #576]	; (800e938 <_dtoa_r+0x648>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	4640      	mov	r0, r8
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	f7f1 ffab 	bl	8000658 <__aeabi_dmul>
 800e702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e706:	9e01      	ldr	r6, [sp, #4]
 800e708:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e70c:	3501      	adds	r5, #1
 800e70e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e712:	4628      	mov	r0, r5
 800e714:	f7f1 ff36 	bl	8000584 <__aeabi_i2d>
 800e718:	4642      	mov	r2, r8
 800e71a:	464b      	mov	r3, r9
 800e71c:	f7f1 ff9c 	bl	8000658 <__aeabi_dmul>
 800e720:	4b86      	ldr	r3, [pc, #536]	; (800e93c <_dtoa_r+0x64c>)
 800e722:	2200      	movs	r2, #0
 800e724:	f7f1 fde2 	bl	80002ec <__adddf3>
 800e728:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e730:	9303      	str	r3, [sp, #12]
 800e732:	2e00      	cmp	r6, #0
 800e734:	d158      	bne.n	800e7e8 <_dtoa_r+0x4f8>
 800e736:	4b82      	ldr	r3, [pc, #520]	; (800e940 <_dtoa_r+0x650>)
 800e738:	2200      	movs	r2, #0
 800e73a:	4640      	mov	r0, r8
 800e73c:	4649      	mov	r1, r9
 800e73e:	f7f1 fdd3 	bl	80002e8 <__aeabi_dsub>
 800e742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e746:	4680      	mov	r8, r0
 800e748:	4689      	mov	r9, r1
 800e74a:	f7f2 fa15 	bl	8000b78 <__aeabi_dcmpgt>
 800e74e:	2800      	cmp	r0, #0
 800e750:	f040 8296 	bne.w	800ec80 <_dtoa_r+0x990>
 800e754:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e758:	4640      	mov	r0, r8
 800e75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e75e:	4649      	mov	r1, r9
 800e760:	f7f2 f9ec 	bl	8000b3c <__aeabi_dcmplt>
 800e764:	2800      	cmp	r0, #0
 800e766:	f040 8289 	bne.w	800ec7c <_dtoa_r+0x98c>
 800e76a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e76e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e770:	2b00      	cmp	r3, #0
 800e772:	f2c0 814e 	blt.w	800ea12 <_dtoa_r+0x722>
 800e776:	f1bb 0f0e 	cmp.w	fp, #14
 800e77a:	f300 814a 	bgt.w	800ea12 <_dtoa_r+0x722>
 800e77e:	4b6b      	ldr	r3, [pc, #428]	; (800e92c <_dtoa_r+0x63c>)
 800e780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e784:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f280 80dc 	bge.w	800e948 <_dtoa_r+0x658>
 800e790:	9b04      	ldr	r3, [sp, #16]
 800e792:	2b00      	cmp	r3, #0
 800e794:	f300 80d8 	bgt.w	800e948 <_dtoa_r+0x658>
 800e798:	f040 826f 	bne.w	800ec7a <_dtoa_r+0x98a>
 800e79c:	4b68      	ldr	r3, [pc, #416]	; (800e940 <_dtoa_r+0x650>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	4640      	mov	r0, r8
 800e7a2:	4649      	mov	r1, r9
 800e7a4:	f7f1 ff58 	bl	8000658 <__aeabi_dmul>
 800e7a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7ac:	f7f2 f9da 	bl	8000b64 <__aeabi_dcmpge>
 800e7b0:	9e04      	ldr	r6, [sp, #16]
 800e7b2:	4637      	mov	r7, r6
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	f040 8245 	bne.w	800ec44 <_dtoa_r+0x954>
 800e7ba:	9d00      	ldr	r5, [sp, #0]
 800e7bc:	2331      	movs	r3, #49	; 0x31
 800e7be:	f805 3b01 	strb.w	r3, [r5], #1
 800e7c2:	f10b 0b01 	add.w	fp, fp, #1
 800e7c6:	e241      	b.n	800ec4c <_dtoa_r+0x95c>
 800e7c8:	07f2      	lsls	r2, r6, #31
 800e7ca:	d505      	bpl.n	800e7d8 <_dtoa_r+0x4e8>
 800e7cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7d0:	f7f1 ff42 	bl	8000658 <__aeabi_dmul>
 800e7d4:	3501      	adds	r5, #1
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	1076      	asrs	r6, r6, #1
 800e7da:	3708      	adds	r7, #8
 800e7dc:	e773      	b.n	800e6c6 <_dtoa_r+0x3d6>
 800e7de:	2502      	movs	r5, #2
 800e7e0:	e775      	b.n	800e6ce <_dtoa_r+0x3de>
 800e7e2:	9e04      	ldr	r6, [sp, #16]
 800e7e4:	465f      	mov	r7, fp
 800e7e6:	e792      	b.n	800e70e <_dtoa_r+0x41e>
 800e7e8:	9900      	ldr	r1, [sp, #0]
 800e7ea:	4b50      	ldr	r3, [pc, #320]	; (800e92c <_dtoa_r+0x63c>)
 800e7ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7f0:	4431      	add	r1, r6
 800e7f2:	9102      	str	r1, [sp, #8]
 800e7f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7f6:	eeb0 9a47 	vmov.f32	s18, s14
 800e7fa:	eef0 9a67 	vmov.f32	s19, s15
 800e7fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e802:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e806:	2900      	cmp	r1, #0
 800e808:	d044      	beq.n	800e894 <_dtoa_r+0x5a4>
 800e80a:	494e      	ldr	r1, [pc, #312]	; (800e944 <_dtoa_r+0x654>)
 800e80c:	2000      	movs	r0, #0
 800e80e:	f7f2 f84d 	bl	80008ac <__aeabi_ddiv>
 800e812:	ec53 2b19 	vmov	r2, r3, d9
 800e816:	f7f1 fd67 	bl	80002e8 <__aeabi_dsub>
 800e81a:	9d00      	ldr	r5, [sp, #0]
 800e81c:	ec41 0b19 	vmov	d9, r0, r1
 800e820:	4649      	mov	r1, r9
 800e822:	4640      	mov	r0, r8
 800e824:	f7f2 f9c8 	bl	8000bb8 <__aeabi_d2iz>
 800e828:	4606      	mov	r6, r0
 800e82a:	f7f1 feab 	bl	8000584 <__aeabi_i2d>
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	4640      	mov	r0, r8
 800e834:	4649      	mov	r1, r9
 800e836:	f7f1 fd57 	bl	80002e8 <__aeabi_dsub>
 800e83a:	3630      	adds	r6, #48	; 0x30
 800e83c:	f805 6b01 	strb.w	r6, [r5], #1
 800e840:	ec53 2b19 	vmov	r2, r3, d9
 800e844:	4680      	mov	r8, r0
 800e846:	4689      	mov	r9, r1
 800e848:	f7f2 f978 	bl	8000b3c <__aeabi_dcmplt>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d164      	bne.n	800e91a <_dtoa_r+0x62a>
 800e850:	4642      	mov	r2, r8
 800e852:	464b      	mov	r3, r9
 800e854:	4937      	ldr	r1, [pc, #220]	; (800e934 <_dtoa_r+0x644>)
 800e856:	2000      	movs	r0, #0
 800e858:	f7f1 fd46 	bl	80002e8 <__aeabi_dsub>
 800e85c:	ec53 2b19 	vmov	r2, r3, d9
 800e860:	f7f2 f96c 	bl	8000b3c <__aeabi_dcmplt>
 800e864:	2800      	cmp	r0, #0
 800e866:	f040 80b6 	bne.w	800e9d6 <_dtoa_r+0x6e6>
 800e86a:	9b02      	ldr	r3, [sp, #8]
 800e86c:	429d      	cmp	r5, r3
 800e86e:	f43f af7c 	beq.w	800e76a <_dtoa_r+0x47a>
 800e872:	4b31      	ldr	r3, [pc, #196]	; (800e938 <_dtoa_r+0x648>)
 800e874:	ec51 0b19 	vmov	r0, r1, d9
 800e878:	2200      	movs	r2, #0
 800e87a:	f7f1 feed 	bl	8000658 <__aeabi_dmul>
 800e87e:	4b2e      	ldr	r3, [pc, #184]	; (800e938 <_dtoa_r+0x648>)
 800e880:	ec41 0b19 	vmov	d9, r0, r1
 800e884:	2200      	movs	r2, #0
 800e886:	4640      	mov	r0, r8
 800e888:	4649      	mov	r1, r9
 800e88a:	f7f1 fee5 	bl	8000658 <__aeabi_dmul>
 800e88e:	4680      	mov	r8, r0
 800e890:	4689      	mov	r9, r1
 800e892:	e7c5      	b.n	800e820 <_dtoa_r+0x530>
 800e894:	ec51 0b17 	vmov	r0, r1, d7
 800e898:	f7f1 fede 	bl	8000658 <__aeabi_dmul>
 800e89c:	9b02      	ldr	r3, [sp, #8]
 800e89e:	9d00      	ldr	r5, [sp, #0]
 800e8a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8a2:	ec41 0b19 	vmov	d9, r0, r1
 800e8a6:	4649      	mov	r1, r9
 800e8a8:	4640      	mov	r0, r8
 800e8aa:	f7f2 f985 	bl	8000bb8 <__aeabi_d2iz>
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	f7f1 fe68 	bl	8000584 <__aeabi_i2d>
 800e8b4:	3630      	adds	r6, #48	; 0x30
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	4640      	mov	r0, r8
 800e8bc:	4649      	mov	r1, r9
 800e8be:	f7f1 fd13 	bl	80002e8 <__aeabi_dsub>
 800e8c2:	f805 6b01 	strb.w	r6, [r5], #1
 800e8c6:	9b02      	ldr	r3, [sp, #8]
 800e8c8:	429d      	cmp	r5, r3
 800e8ca:	4680      	mov	r8, r0
 800e8cc:	4689      	mov	r9, r1
 800e8ce:	f04f 0200 	mov.w	r2, #0
 800e8d2:	d124      	bne.n	800e91e <_dtoa_r+0x62e>
 800e8d4:	4b1b      	ldr	r3, [pc, #108]	; (800e944 <_dtoa_r+0x654>)
 800e8d6:	ec51 0b19 	vmov	r0, r1, d9
 800e8da:	f7f1 fd07 	bl	80002ec <__adddf3>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	f7f2 f947 	bl	8000b78 <__aeabi_dcmpgt>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d173      	bne.n	800e9d6 <_dtoa_r+0x6e6>
 800e8ee:	ec53 2b19 	vmov	r2, r3, d9
 800e8f2:	4914      	ldr	r1, [pc, #80]	; (800e944 <_dtoa_r+0x654>)
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	f7f1 fcf7 	bl	80002e8 <__aeabi_dsub>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	4640      	mov	r0, r8
 800e900:	4649      	mov	r1, r9
 800e902:	f7f2 f91b 	bl	8000b3c <__aeabi_dcmplt>
 800e906:	2800      	cmp	r0, #0
 800e908:	f43f af2f 	beq.w	800e76a <_dtoa_r+0x47a>
 800e90c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e90e:	1e6b      	subs	r3, r5, #1
 800e910:	930f      	str	r3, [sp, #60]	; 0x3c
 800e912:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e916:	2b30      	cmp	r3, #48	; 0x30
 800e918:	d0f8      	beq.n	800e90c <_dtoa_r+0x61c>
 800e91a:	46bb      	mov	fp, r7
 800e91c:	e04a      	b.n	800e9b4 <_dtoa_r+0x6c4>
 800e91e:	4b06      	ldr	r3, [pc, #24]	; (800e938 <_dtoa_r+0x648>)
 800e920:	f7f1 fe9a 	bl	8000658 <__aeabi_dmul>
 800e924:	4680      	mov	r8, r0
 800e926:	4689      	mov	r9, r1
 800e928:	e7bd      	b.n	800e8a6 <_dtoa_r+0x5b6>
 800e92a:	bf00      	nop
 800e92c:	08010bb0 	.word	0x08010bb0
 800e930:	08010b88 	.word	0x08010b88
 800e934:	3ff00000 	.word	0x3ff00000
 800e938:	40240000 	.word	0x40240000
 800e93c:	401c0000 	.word	0x401c0000
 800e940:	40140000 	.word	0x40140000
 800e944:	3fe00000 	.word	0x3fe00000
 800e948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e94c:	9d00      	ldr	r5, [sp, #0]
 800e94e:	4642      	mov	r2, r8
 800e950:	464b      	mov	r3, r9
 800e952:	4630      	mov	r0, r6
 800e954:	4639      	mov	r1, r7
 800e956:	f7f1 ffa9 	bl	80008ac <__aeabi_ddiv>
 800e95a:	f7f2 f92d 	bl	8000bb8 <__aeabi_d2iz>
 800e95e:	9001      	str	r0, [sp, #4]
 800e960:	f7f1 fe10 	bl	8000584 <__aeabi_i2d>
 800e964:	4642      	mov	r2, r8
 800e966:	464b      	mov	r3, r9
 800e968:	f7f1 fe76 	bl	8000658 <__aeabi_dmul>
 800e96c:	4602      	mov	r2, r0
 800e96e:	460b      	mov	r3, r1
 800e970:	4630      	mov	r0, r6
 800e972:	4639      	mov	r1, r7
 800e974:	f7f1 fcb8 	bl	80002e8 <__aeabi_dsub>
 800e978:	9e01      	ldr	r6, [sp, #4]
 800e97a:	9f04      	ldr	r7, [sp, #16]
 800e97c:	3630      	adds	r6, #48	; 0x30
 800e97e:	f805 6b01 	strb.w	r6, [r5], #1
 800e982:	9e00      	ldr	r6, [sp, #0]
 800e984:	1bae      	subs	r6, r5, r6
 800e986:	42b7      	cmp	r7, r6
 800e988:	4602      	mov	r2, r0
 800e98a:	460b      	mov	r3, r1
 800e98c:	d134      	bne.n	800e9f8 <_dtoa_r+0x708>
 800e98e:	f7f1 fcad 	bl	80002ec <__adddf3>
 800e992:	4642      	mov	r2, r8
 800e994:	464b      	mov	r3, r9
 800e996:	4606      	mov	r6, r0
 800e998:	460f      	mov	r7, r1
 800e99a:	f7f2 f8ed 	bl	8000b78 <__aeabi_dcmpgt>
 800e99e:	b9c8      	cbnz	r0, 800e9d4 <_dtoa_r+0x6e4>
 800e9a0:	4642      	mov	r2, r8
 800e9a2:	464b      	mov	r3, r9
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	f7f2 f8be 	bl	8000b28 <__aeabi_dcmpeq>
 800e9ac:	b110      	cbz	r0, 800e9b4 <_dtoa_r+0x6c4>
 800e9ae:	9b01      	ldr	r3, [sp, #4]
 800e9b0:	07db      	lsls	r3, r3, #31
 800e9b2:	d40f      	bmi.n	800e9d4 <_dtoa_r+0x6e4>
 800e9b4:	4651      	mov	r1, sl
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f000 fbcc 	bl	800f154 <_Bfree>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9c0:	702b      	strb	r3, [r5, #0]
 800e9c2:	f10b 0301 	add.w	r3, fp, #1
 800e9c6:	6013      	str	r3, [r2, #0]
 800e9c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f43f ace2 	beq.w	800e394 <_dtoa_r+0xa4>
 800e9d0:	601d      	str	r5, [r3, #0]
 800e9d2:	e4df      	b.n	800e394 <_dtoa_r+0xa4>
 800e9d4:	465f      	mov	r7, fp
 800e9d6:	462b      	mov	r3, r5
 800e9d8:	461d      	mov	r5, r3
 800e9da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9de:	2a39      	cmp	r2, #57	; 0x39
 800e9e0:	d106      	bne.n	800e9f0 <_dtoa_r+0x700>
 800e9e2:	9a00      	ldr	r2, [sp, #0]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d1f7      	bne.n	800e9d8 <_dtoa_r+0x6e8>
 800e9e8:	9900      	ldr	r1, [sp, #0]
 800e9ea:	2230      	movs	r2, #48	; 0x30
 800e9ec:	3701      	adds	r7, #1
 800e9ee:	700a      	strb	r2, [r1, #0]
 800e9f0:	781a      	ldrb	r2, [r3, #0]
 800e9f2:	3201      	adds	r2, #1
 800e9f4:	701a      	strb	r2, [r3, #0]
 800e9f6:	e790      	b.n	800e91a <_dtoa_r+0x62a>
 800e9f8:	4ba3      	ldr	r3, [pc, #652]	; (800ec88 <_dtoa_r+0x998>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f7f1 fe2c 	bl	8000658 <__aeabi_dmul>
 800ea00:	2200      	movs	r2, #0
 800ea02:	2300      	movs	r3, #0
 800ea04:	4606      	mov	r6, r0
 800ea06:	460f      	mov	r7, r1
 800ea08:	f7f2 f88e 	bl	8000b28 <__aeabi_dcmpeq>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d09e      	beq.n	800e94e <_dtoa_r+0x65e>
 800ea10:	e7d0      	b.n	800e9b4 <_dtoa_r+0x6c4>
 800ea12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea14:	2a00      	cmp	r2, #0
 800ea16:	f000 80ca 	beq.w	800ebae <_dtoa_r+0x8be>
 800ea1a:	9a07      	ldr	r2, [sp, #28]
 800ea1c:	2a01      	cmp	r2, #1
 800ea1e:	f300 80ad 	bgt.w	800eb7c <_dtoa_r+0x88c>
 800ea22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	f000 80a5 	beq.w	800eb74 <_dtoa_r+0x884>
 800ea2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ea2e:	9e08      	ldr	r6, [sp, #32]
 800ea30:	9d05      	ldr	r5, [sp, #20]
 800ea32:	9a05      	ldr	r2, [sp, #20]
 800ea34:	441a      	add	r2, r3
 800ea36:	9205      	str	r2, [sp, #20]
 800ea38:	9a06      	ldr	r2, [sp, #24]
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	441a      	add	r2, r3
 800ea3e:	4620      	mov	r0, r4
 800ea40:	9206      	str	r2, [sp, #24]
 800ea42:	f000 fc3d 	bl	800f2c0 <__i2b>
 800ea46:	4607      	mov	r7, r0
 800ea48:	b165      	cbz	r5, 800ea64 <_dtoa_r+0x774>
 800ea4a:	9b06      	ldr	r3, [sp, #24]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	dd09      	ble.n	800ea64 <_dtoa_r+0x774>
 800ea50:	42ab      	cmp	r3, r5
 800ea52:	9a05      	ldr	r2, [sp, #20]
 800ea54:	bfa8      	it	ge
 800ea56:	462b      	movge	r3, r5
 800ea58:	1ad2      	subs	r2, r2, r3
 800ea5a:	9205      	str	r2, [sp, #20]
 800ea5c:	9a06      	ldr	r2, [sp, #24]
 800ea5e:	1aed      	subs	r5, r5, r3
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	9306      	str	r3, [sp, #24]
 800ea64:	9b08      	ldr	r3, [sp, #32]
 800ea66:	b1f3      	cbz	r3, 800eaa6 <_dtoa_r+0x7b6>
 800ea68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f000 80a3 	beq.w	800ebb6 <_dtoa_r+0x8c6>
 800ea70:	2e00      	cmp	r6, #0
 800ea72:	dd10      	ble.n	800ea96 <_dtoa_r+0x7a6>
 800ea74:	4639      	mov	r1, r7
 800ea76:	4632      	mov	r2, r6
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f000 fce1 	bl	800f440 <__pow5mult>
 800ea7e:	4652      	mov	r2, sl
 800ea80:	4601      	mov	r1, r0
 800ea82:	4607      	mov	r7, r0
 800ea84:	4620      	mov	r0, r4
 800ea86:	f000 fc31 	bl	800f2ec <__multiply>
 800ea8a:	4651      	mov	r1, sl
 800ea8c:	4680      	mov	r8, r0
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f000 fb60 	bl	800f154 <_Bfree>
 800ea94:	46c2      	mov	sl, r8
 800ea96:	9b08      	ldr	r3, [sp, #32]
 800ea98:	1b9a      	subs	r2, r3, r6
 800ea9a:	d004      	beq.n	800eaa6 <_dtoa_r+0x7b6>
 800ea9c:	4651      	mov	r1, sl
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f000 fcce 	bl	800f440 <__pow5mult>
 800eaa4:	4682      	mov	sl, r0
 800eaa6:	2101      	movs	r1, #1
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 fc09 	bl	800f2c0 <__i2b>
 800eaae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	4606      	mov	r6, r0
 800eab4:	f340 8081 	ble.w	800ebba <_dtoa_r+0x8ca>
 800eab8:	461a      	mov	r2, r3
 800eaba:	4601      	mov	r1, r0
 800eabc:	4620      	mov	r0, r4
 800eabe:	f000 fcbf 	bl	800f440 <__pow5mult>
 800eac2:	9b07      	ldr	r3, [sp, #28]
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	4606      	mov	r6, r0
 800eac8:	dd7a      	ble.n	800ebc0 <_dtoa_r+0x8d0>
 800eaca:	f04f 0800 	mov.w	r8, #0
 800eace:	6933      	ldr	r3, [r6, #16]
 800ead0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ead4:	6918      	ldr	r0, [r3, #16]
 800ead6:	f000 fba5 	bl	800f224 <__hi0bits>
 800eada:	f1c0 0020 	rsb	r0, r0, #32
 800eade:	9b06      	ldr	r3, [sp, #24]
 800eae0:	4418      	add	r0, r3
 800eae2:	f010 001f 	ands.w	r0, r0, #31
 800eae6:	f000 8094 	beq.w	800ec12 <_dtoa_r+0x922>
 800eaea:	f1c0 0320 	rsb	r3, r0, #32
 800eaee:	2b04      	cmp	r3, #4
 800eaf0:	f340 8085 	ble.w	800ebfe <_dtoa_r+0x90e>
 800eaf4:	9b05      	ldr	r3, [sp, #20]
 800eaf6:	f1c0 001c 	rsb	r0, r0, #28
 800eafa:	4403      	add	r3, r0
 800eafc:	9305      	str	r3, [sp, #20]
 800eafe:	9b06      	ldr	r3, [sp, #24]
 800eb00:	4403      	add	r3, r0
 800eb02:	4405      	add	r5, r0
 800eb04:	9306      	str	r3, [sp, #24]
 800eb06:	9b05      	ldr	r3, [sp, #20]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	dd05      	ble.n	800eb18 <_dtoa_r+0x828>
 800eb0c:	4651      	mov	r1, sl
 800eb0e:	461a      	mov	r2, r3
 800eb10:	4620      	mov	r0, r4
 800eb12:	f000 fcef 	bl	800f4f4 <__lshift>
 800eb16:	4682      	mov	sl, r0
 800eb18:	9b06      	ldr	r3, [sp, #24]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	dd05      	ble.n	800eb2a <_dtoa_r+0x83a>
 800eb1e:	4631      	mov	r1, r6
 800eb20:	461a      	mov	r2, r3
 800eb22:	4620      	mov	r0, r4
 800eb24:	f000 fce6 	bl	800f4f4 <__lshift>
 800eb28:	4606      	mov	r6, r0
 800eb2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d072      	beq.n	800ec16 <_dtoa_r+0x926>
 800eb30:	4631      	mov	r1, r6
 800eb32:	4650      	mov	r0, sl
 800eb34:	f000 fd4a 	bl	800f5cc <__mcmp>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	da6c      	bge.n	800ec16 <_dtoa_r+0x926>
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	4651      	mov	r1, sl
 800eb40:	220a      	movs	r2, #10
 800eb42:	4620      	mov	r0, r4
 800eb44:	f000 fb28 	bl	800f198 <__multadd>
 800eb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb4e:	4682      	mov	sl, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f000 81b0 	beq.w	800eeb6 <_dtoa_r+0xbc6>
 800eb56:	2300      	movs	r3, #0
 800eb58:	4639      	mov	r1, r7
 800eb5a:	220a      	movs	r2, #10
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f000 fb1b 	bl	800f198 <__multadd>
 800eb62:	9b01      	ldr	r3, [sp, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	4607      	mov	r7, r0
 800eb68:	f300 8096 	bgt.w	800ec98 <_dtoa_r+0x9a8>
 800eb6c:	9b07      	ldr	r3, [sp, #28]
 800eb6e:	2b02      	cmp	r3, #2
 800eb70:	dc59      	bgt.n	800ec26 <_dtoa_r+0x936>
 800eb72:	e091      	b.n	800ec98 <_dtoa_r+0x9a8>
 800eb74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb7a:	e758      	b.n	800ea2e <_dtoa_r+0x73e>
 800eb7c:	9b04      	ldr	r3, [sp, #16]
 800eb7e:	1e5e      	subs	r6, r3, #1
 800eb80:	9b08      	ldr	r3, [sp, #32]
 800eb82:	42b3      	cmp	r3, r6
 800eb84:	bfbf      	itttt	lt
 800eb86:	9b08      	ldrlt	r3, [sp, #32]
 800eb88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eb8a:	9608      	strlt	r6, [sp, #32]
 800eb8c:	1af3      	sublt	r3, r6, r3
 800eb8e:	bfb4      	ite	lt
 800eb90:	18d2      	addlt	r2, r2, r3
 800eb92:	1b9e      	subge	r6, r3, r6
 800eb94:	9b04      	ldr	r3, [sp, #16]
 800eb96:	bfbc      	itt	lt
 800eb98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800eb9a:	2600      	movlt	r6, #0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	bfb7      	itett	lt
 800eba0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800eba4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800eba8:	1a9d      	sublt	r5, r3, r2
 800ebaa:	2300      	movlt	r3, #0
 800ebac:	e741      	b.n	800ea32 <_dtoa_r+0x742>
 800ebae:	9e08      	ldr	r6, [sp, #32]
 800ebb0:	9d05      	ldr	r5, [sp, #20]
 800ebb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ebb4:	e748      	b.n	800ea48 <_dtoa_r+0x758>
 800ebb6:	9a08      	ldr	r2, [sp, #32]
 800ebb8:	e770      	b.n	800ea9c <_dtoa_r+0x7ac>
 800ebba:	9b07      	ldr	r3, [sp, #28]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	dc19      	bgt.n	800ebf4 <_dtoa_r+0x904>
 800ebc0:	9b02      	ldr	r3, [sp, #8]
 800ebc2:	b9bb      	cbnz	r3, 800ebf4 <_dtoa_r+0x904>
 800ebc4:	9b03      	ldr	r3, [sp, #12]
 800ebc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebca:	b99b      	cbnz	r3, 800ebf4 <_dtoa_r+0x904>
 800ebcc:	9b03      	ldr	r3, [sp, #12]
 800ebce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebd2:	0d1b      	lsrs	r3, r3, #20
 800ebd4:	051b      	lsls	r3, r3, #20
 800ebd6:	b183      	cbz	r3, 800ebfa <_dtoa_r+0x90a>
 800ebd8:	9b05      	ldr	r3, [sp, #20]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	9305      	str	r3, [sp, #20]
 800ebde:	9b06      	ldr	r3, [sp, #24]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	9306      	str	r3, [sp, #24]
 800ebe4:	f04f 0801 	mov.w	r8, #1
 800ebe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f47f af6f 	bne.w	800eace <_dtoa_r+0x7de>
 800ebf0:	2001      	movs	r0, #1
 800ebf2:	e774      	b.n	800eade <_dtoa_r+0x7ee>
 800ebf4:	f04f 0800 	mov.w	r8, #0
 800ebf8:	e7f6      	b.n	800ebe8 <_dtoa_r+0x8f8>
 800ebfa:	4698      	mov	r8, r3
 800ebfc:	e7f4      	b.n	800ebe8 <_dtoa_r+0x8f8>
 800ebfe:	d082      	beq.n	800eb06 <_dtoa_r+0x816>
 800ec00:	9a05      	ldr	r2, [sp, #20]
 800ec02:	331c      	adds	r3, #28
 800ec04:	441a      	add	r2, r3
 800ec06:	9205      	str	r2, [sp, #20]
 800ec08:	9a06      	ldr	r2, [sp, #24]
 800ec0a:	441a      	add	r2, r3
 800ec0c:	441d      	add	r5, r3
 800ec0e:	9206      	str	r2, [sp, #24]
 800ec10:	e779      	b.n	800eb06 <_dtoa_r+0x816>
 800ec12:	4603      	mov	r3, r0
 800ec14:	e7f4      	b.n	800ec00 <_dtoa_r+0x910>
 800ec16:	9b04      	ldr	r3, [sp, #16]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	dc37      	bgt.n	800ec8c <_dtoa_r+0x99c>
 800ec1c:	9b07      	ldr	r3, [sp, #28]
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	dd34      	ble.n	800ec8c <_dtoa_r+0x99c>
 800ec22:	9b04      	ldr	r3, [sp, #16]
 800ec24:	9301      	str	r3, [sp, #4]
 800ec26:	9b01      	ldr	r3, [sp, #4]
 800ec28:	b963      	cbnz	r3, 800ec44 <_dtoa_r+0x954>
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	2205      	movs	r2, #5
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f000 fab2 	bl	800f198 <__multadd>
 800ec34:	4601      	mov	r1, r0
 800ec36:	4606      	mov	r6, r0
 800ec38:	4650      	mov	r0, sl
 800ec3a:	f000 fcc7 	bl	800f5cc <__mcmp>
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	f73f adbb 	bgt.w	800e7ba <_dtoa_r+0x4ca>
 800ec44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec46:	9d00      	ldr	r5, [sp, #0]
 800ec48:	ea6f 0b03 	mvn.w	fp, r3
 800ec4c:	f04f 0800 	mov.w	r8, #0
 800ec50:	4631      	mov	r1, r6
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 fa7e 	bl	800f154 <_Bfree>
 800ec58:	2f00      	cmp	r7, #0
 800ec5a:	f43f aeab 	beq.w	800e9b4 <_dtoa_r+0x6c4>
 800ec5e:	f1b8 0f00 	cmp.w	r8, #0
 800ec62:	d005      	beq.n	800ec70 <_dtoa_r+0x980>
 800ec64:	45b8      	cmp	r8, r7
 800ec66:	d003      	beq.n	800ec70 <_dtoa_r+0x980>
 800ec68:	4641      	mov	r1, r8
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 fa72 	bl	800f154 <_Bfree>
 800ec70:	4639      	mov	r1, r7
 800ec72:	4620      	mov	r0, r4
 800ec74:	f000 fa6e 	bl	800f154 <_Bfree>
 800ec78:	e69c      	b.n	800e9b4 <_dtoa_r+0x6c4>
 800ec7a:	2600      	movs	r6, #0
 800ec7c:	4637      	mov	r7, r6
 800ec7e:	e7e1      	b.n	800ec44 <_dtoa_r+0x954>
 800ec80:	46bb      	mov	fp, r7
 800ec82:	4637      	mov	r7, r6
 800ec84:	e599      	b.n	800e7ba <_dtoa_r+0x4ca>
 800ec86:	bf00      	nop
 800ec88:	40240000 	.word	0x40240000
 800ec8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f000 80c8 	beq.w	800ee24 <_dtoa_r+0xb34>
 800ec94:	9b04      	ldr	r3, [sp, #16]
 800ec96:	9301      	str	r3, [sp, #4]
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	dd05      	ble.n	800eca8 <_dtoa_r+0x9b8>
 800ec9c:	4639      	mov	r1, r7
 800ec9e:	462a      	mov	r2, r5
 800eca0:	4620      	mov	r0, r4
 800eca2:	f000 fc27 	bl	800f4f4 <__lshift>
 800eca6:	4607      	mov	r7, r0
 800eca8:	f1b8 0f00 	cmp.w	r8, #0
 800ecac:	d05b      	beq.n	800ed66 <_dtoa_r+0xa76>
 800ecae:	6879      	ldr	r1, [r7, #4]
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	f000 fa0f 	bl	800f0d4 <_Balloc>
 800ecb6:	4605      	mov	r5, r0
 800ecb8:	b928      	cbnz	r0, 800ecc6 <_dtoa_r+0x9d6>
 800ecba:	4b83      	ldr	r3, [pc, #524]	; (800eec8 <_dtoa_r+0xbd8>)
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ecc2:	f7ff bb2e 	b.w	800e322 <_dtoa_r+0x32>
 800ecc6:	693a      	ldr	r2, [r7, #16]
 800ecc8:	3202      	adds	r2, #2
 800ecca:	0092      	lsls	r2, r2, #2
 800eccc:	f107 010c 	add.w	r1, r7, #12
 800ecd0:	300c      	adds	r0, #12
 800ecd2:	f7ff fa77 	bl	800e1c4 <memcpy>
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	4629      	mov	r1, r5
 800ecda:	4620      	mov	r0, r4
 800ecdc:	f000 fc0a 	bl	800f4f4 <__lshift>
 800ece0:	9b00      	ldr	r3, [sp, #0]
 800ece2:	3301      	adds	r3, #1
 800ece4:	9304      	str	r3, [sp, #16]
 800ece6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecea:	4413      	add	r3, r2
 800ecec:	9308      	str	r3, [sp, #32]
 800ecee:	9b02      	ldr	r3, [sp, #8]
 800ecf0:	f003 0301 	and.w	r3, r3, #1
 800ecf4:	46b8      	mov	r8, r7
 800ecf6:	9306      	str	r3, [sp, #24]
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	9b04      	ldr	r3, [sp, #16]
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	4650      	mov	r0, sl
 800ed02:	9301      	str	r3, [sp, #4]
 800ed04:	f7ff fa6c 	bl	800e1e0 <quorem>
 800ed08:	4641      	mov	r1, r8
 800ed0a:	9002      	str	r0, [sp, #8]
 800ed0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ed10:	4650      	mov	r0, sl
 800ed12:	f000 fc5b 	bl	800f5cc <__mcmp>
 800ed16:	463a      	mov	r2, r7
 800ed18:	9005      	str	r0, [sp, #20]
 800ed1a:	4631      	mov	r1, r6
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 fc71 	bl	800f604 <__mdiff>
 800ed22:	68c2      	ldr	r2, [r0, #12]
 800ed24:	4605      	mov	r5, r0
 800ed26:	bb02      	cbnz	r2, 800ed6a <_dtoa_r+0xa7a>
 800ed28:	4601      	mov	r1, r0
 800ed2a:	4650      	mov	r0, sl
 800ed2c:	f000 fc4e 	bl	800f5cc <__mcmp>
 800ed30:	4602      	mov	r2, r0
 800ed32:	4629      	mov	r1, r5
 800ed34:	4620      	mov	r0, r4
 800ed36:	9209      	str	r2, [sp, #36]	; 0x24
 800ed38:	f000 fa0c 	bl	800f154 <_Bfree>
 800ed3c:	9b07      	ldr	r3, [sp, #28]
 800ed3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed40:	9d04      	ldr	r5, [sp, #16]
 800ed42:	ea43 0102 	orr.w	r1, r3, r2
 800ed46:	9b06      	ldr	r3, [sp, #24]
 800ed48:	4319      	orrs	r1, r3
 800ed4a:	d110      	bne.n	800ed6e <_dtoa_r+0xa7e>
 800ed4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed50:	d029      	beq.n	800eda6 <_dtoa_r+0xab6>
 800ed52:	9b05      	ldr	r3, [sp, #20]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	dd02      	ble.n	800ed5e <_dtoa_r+0xa6e>
 800ed58:	9b02      	ldr	r3, [sp, #8]
 800ed5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ed5e:	9b01      	ldr	r3, [sp, #4]
 800ed60:	f883 9000 	strb.w	r9, [r3]
 800ed64:	e774      	b.n	800ec50 <_dtoa_r+0x960>
 800ed66:	4638      	mov	r0, r7
 800ed68:	e7ba      	b.n	800ece0 <_dtoa_r+0x9f0>
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	e7e1      	b.n	800ed32 <_dtoa_r+0xa42>
 800ed6e:	9b05      	ldr	r3, [sp, #20]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	db04      	blt.n	800ed7e <_dtoa_r+0xa8e>
 800ed74:	9907      	ldr	r1, [sp, #28]
 800ed76:	430b      	orrs	r3, r1
 800ed78:	9906      	ldr	r1, [sp, #24]
 800ed7a:	430b      	orrs	r3, r1
 800ed7c:	d120      	bne.n	800edc0 <_dtoa_r+0xad0>
 800ed7e:	2a00      	cmp	r2, #0
 800ed80:	dded      	ble.n	800ed5e <_dtoa_r+0xa6e>
 800ed82:	4651      	mov	r1, sl
 800ed84:	2201      	movs	r2, #1
 800ed86:	4620      	mov	r0, r4
 800ed88:	f000 fbb4 	bl	800f4f4 <__lshift>
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4682      	mov	sl, r0
 800ed90:	f000 fc1c 	bl	800f5cc <__mcmp>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	dc03      	bgt.n	800eda0 <_dtoa_r+0xab0>
 800ed98:	d1e1      	bne.n	800ed5e <_dtoa_r+0xa6e>
 800ed9a:	f019 0f01 	tst.w	r9, #1
 800ed9e:	d0de      	beq.n	800ed5e <_dtoa_r+0xa6e>
 800eda0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eda4:	d1d8      	bne.n	800ed58 <_dtoa_r+0xa68>
 800eda6:	9a01      	ldr	r2, [sp, #4]
 800eda8:	2339      	movs	r3, #57	; 0x39
 800edaa:	7013      	strb	r3, [r2, #0]
 800edac:	462b      	mov	r3, r5
 800edae:	461d      	mov	r5, r3
 800edb0:	3b01      	subs	r3, #1
 800edb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800edb6:	2a39      	cmp	r2, #57	; 0x39
 800edb8:	d06c      	beq.n	800ee94 <_dtoa_r+0xba4>
 800edba:	3201      	adds	r2, #1
 800edbc:	701a      	strb	r2, [r3, #0]
 800edbe:	e747      	b.n	800ec50 <_dtoa_r+0x960>
 800edc0:	2a00      	cmp	r2, #0
 800edc2:	dd07      	ble.n	800edd4 <_dtoa_r+0xae4>
 800edc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800edc8:	d0ed      	beq.n	800eda6 <_dtoa_r+0xab6>
 800edca:	9a01      	ldr	r2, [sp, #4]
 800edcc:	f109 0301 	add.w	r3, r9, #1
 800edd0:	7013      	strb	r3, [r2, #0]
 800edd2:	e73d      	b.n	800ec50 <_dtoa_r+0x960>
 800edd4:	9b04      	ldr	r3, [sp, #16]
 800edd6:	9a08      	ldr	r2, [sp, #32]
 800edd8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800eddc:	4293      	cmp	r3, r2
 800edde:	d043      	beq.n	800ee68 <_dtoa_r+0xb78>
 800ede0:	4651      	mov	r1, sl
 800ede2:	2300      	movs	r3, #0
 800ede4:	220a      	movs	r2, #10
 800ede6:	4620      	mov	r0, r4
 800ede8:	f000 f9d6 	bl	800f198 <__multadd>
 800edec:	45b8      	cmp	r8, r7
 800edee:	4682      	mov	sl, r0
 800edf0:	f04f 0300 	mov.w	r3, #0
 800edf4:	f04f 020a 	mov.w	r2, #10
 800edf8:	4641      	mov	r1, r8
 800edfa:	4620      	mov	r0, r4
 800edfc:	d107      	bne.n	800ee0e <_dtoa_r+0xb1e>
 800edfe:	f000 f9cb 	bl	800f198 <__multadd>
 800ee02:	4680      	mov	r8, r0
 800ee04:	4607      	mov	r7, r0
 800ee06:	9b04      	ldr	r3, [sp, #16]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	9304      	str	r3, [sp, #16]
 800ee0c:	e775      	b.n	800ecfa <_dtoa_r+0xa0a>
 800ee0e:	f000 f9c3 	bl	800f198 <__multadd>
 800ee12:	4639      	mov	r1, r7
 800ee14:	4680      	mov	r8, r0
 800ee16:	2300      	movs	r3, #0
 800ee18:	220a      	movs	r2, #10
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f000 f9bc 	bl	800f198 <__multadd>
 800ee20:	4607      	mov	r7, r0
 800ee22:	e7f0      	b.n	800ee06 <_dtoa_r+0xb16>
 800ee24:	9b04      	ldr	r3, [sp, #16]
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	9d00      	ldr	r5, [sp, #0]
 800ee2a:	4631      	mov	r1, r6
 800ee2c:	4650      	mov	r0, sl
 800ee2e:	f7ff f9d7 	bl	800e1e0 <quorem>
 800ee32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ee36:	9b00      	ldr	r3, [sp, #0]
 800ee38:	f805 9b01 	strb.w	r9, [r5], #1
 800ee3c:	1aea      	subs	r2, r5, r3
 800ee3e:	9b01      	ldr	r3, [sp, #4]
 800ee40:	4293      	cmp	r3, r2
 800ee42:	dd07      	ble.n	800ee54 <_dtoa_r+0xb64>
 800ee44:	4651      	mov	r1, sl
 800ee46:	2300      	movs	r3, #0
 800ee48:	220a      	movs	r2, #10
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f000 f9a4 	bl	800f198 <__multadd>
 800ee50:	4682      	mov	sl, r0
 800ee52:	e7ea      	b.n	800ee2a <_dtoa_r+0xb3a>
 800ee54:	9b01      	ldr	r3, [sp, #4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	bfc8      	it	gt
 800ee5a:	461d      	movgt	r5, r3
 800ee5c:	9b00      	ldr	r3, [sp, #0]
 800ee5e:	bfd8      	it	le
 800ee60:	2501      	movle	r5, #1
 800ee62:	441d      	add	r5, r3
 800ee64:	f04f 0800 	mov.w	r8, #0
 800ee68:	4651      	mov	r1, sl
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f000 fb41 	bl	800f4f4 <__lshift>
 800ee72:	4631      	mov	r1, r6
 800ee74:	4682      	mov	sl, r0
 800ee76:	f000 fba9 	bl	800f5cc <__mcmp>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	dc96      	bgt.n	800edac <_dtoa_r+0xabc>
 800ee7e:	d102      	bne.n	800ee86 <_dtoa_r+0xb96>
 800ee80:	f019 0f01 	tst.w	r9, #1
 800ee84:	d192      	bne.n	800edac <_dtoa_r+0xabc>
 800ee86:	462b      	mov	r3, r5
 800ee88:	461d      	mov	r5, r3
 800ee8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee8e:	2a30      	cmp	r2, #48	; 0x30
 800ee90:	d0fa      	beq.n	800ee88 <_dtoa_r+0xb98>
 800ee92:	e6dd      	b.n	800ec50 <_dtoa_r+0x960>
 800ee94:	9a00      	ldr	r2, [sp, #0]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d189      	bne.n	800edae <_dtoa_r+0xabe>
 800ee9a:	f10b 0b01 	add.w	fp, fp, #1
 800ee9e:	2331      	movs	r3, #49	; 0x31
 800eea0:	e796      	b.n	800edd0 <_dtoa_r+0xae0>
 800eea2:	4b0a      	ldr	r3, [pc, #40]	; (800eecc <_dtoa_r+0xbdc>)
 800eea4:	f7ff ba99 	b.w	800e3da <_dtoa_r+0xea>
 800eea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f47f aa6d 	bne.w	800e38a <_dtoa_r+0x9a>
 800eeb0:	4b07      	ldr	r3, [pc, #28]	; (800eed0 <_dtoa_r+0xbe0>)
 800eeb2:	f7ff ba92 	b.w	800e3da <_dtoa_r+0xea>
 800eeb6:	9b01      	ldr	r3, [sp, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	dcb5      	bgt.n	800ee28 <_dtoa_r+0xb38>
 800eebc:	9b07      	ldr	r3, [sp, #28]
 800eebe:	2b02      	cmp	r3, #2
 800eec0:	f73f aeb1 	bgt.w	800ec26 <_dtoa_r+0x936>
 800eec4:	e7b0      	b.n	800ee28 <_dtoa_r+0xb38>
 800eec6:	bf00      	nop
 800eec8:	08010b1c 	.word	0x08010b1c
 800eecc:	08010a7c 	.word	0x08010a7c
 800eed0:	08010aa0 	.word	0x08010aa0

0800eed4 <_free_r>:
 800eed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eed6:	2900      	cmp	r1, #0
 800eed8:	d044      	beq.n	800ef64 <_free_r+0x90>
 800eeda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eede:	9001      	str	r0, [sp, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	f1a1 0404 	sub.w	r4, r1, #4
 800eee6:	bfb8      	it	lt
 800eee8:	18e4      	addlt	r4, r4, r3
 800eeea:	f000 f8e7 	bl	800f0bc <__malloc_lock>
 800eeee:	4a1e      	ldr	r2, [pc, #120]	; (800ef68 <_free_r+0x94>)
 800eef0:	9801      	ldr	r0, [sp, #4]
 800eef2:	6813      	ldr	r3, [r2, #0]
 800eef4:	b933      	cbnz	r3, 800ef04 <_free_r+0x30>
 800eef6:	6063      	str	r3, [r4, #4]
 800eef8:	6014      	str	r4, [r2, #0]
 800eefa:	b003      	add	sp, #12
 800eefc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef00:	f000 b8e2 	b.w	800f0c8 <__malloc_unlock>
 800ef04:	42a3      	cmp	r3, r4
 800ef06:	d908      	bls.n	800ef1a <_free_r+0x46>
 800ef08:	6825      	ldr	r5, [r4, #0]
 800ef0a:	1961      	adds	r1, r4, r5
 800ef0c:	428b      	cmp	r3, r1
 800ef0e:	bf01      	itttt	eq
 800ef10:	6819      	ldreq	r1, [r3, #0]
 800ef12:	685b      	ldreq	r3, [r3, #4]
 800ef14:	1949      	addeq	r1, r1, r5
 800ef16:	6021      	streq	r1, [r4, #0]
 800ef18:	e7ed      	b.n	800eef6 <_free_r+0x22>
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	b10b      	cbz	r3, 800ef24 <_free_r+0x50>
 800ef20:	42a3      	cmp	r3, r4
 800ef22:	d9fa      	bls.n	800ef1a <_free_r+0x46>
 800ef24:	6811      	ldr	r1, [r2, #0]
 800ef26:	1855      	adds	r5, r2, r1
 800ef28:	42a5      	cmp	r5, r4
 800ef2a:	d10b      	bne.n	800ef44 <_free_r+0x70>
 800ef2c:	6824      	ldr	r4, [r4, #0]
 800ef2e:	4421      	add	r1, r4
 800ef30:	1854      	adds	r4, r2, r1
 800ef32:	42a3      	cmp	r3, r4
 800ef34:	6011      	str	r1, [r2, #0]
 800ef36:	d1e0      	bne.n	800eefa <_free_r+0x26>
 800ef38:	681c      	ldr	r4, [r3, #0]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	6053      	str	r3, [r2, #4]
 800ef3e:	440c      	add	r4, r1
 800ef40:	6014      	str	r4, [r2, #0]
 800ef42:	e7da      	b.n	800eefa <_free_r+0x26>
 800ef44:	d902      	bls.n	800ef4c <_free_r+0x78>
 800ef46:	230c      	movs	r3, #12
 800ef48:	6003      	str	r3, [r0, #0]
 800ef4a:	e7d6      	b.n	800eefa <_free_r+0x26>
 800ef4c:	6825      	ldr	r5, [r4, #0]
 800ef4e:	1961      	adds	r1, r4, r5
 800ef50:	428b      	cmp	r3, r1
 800ef52:	bf04      	itt	eq
 800ef54:	6819      	ldreq	r1, [r3, #0]
 800ef56:	685b      	ldreq	r3, [r3, #4]
 800ef58:	6063      	str	r3, [r4, #4]
 800ef5a:	bf04      	itt	eq
 800ef5c:	1949      	addeq	r1, r1, r5
 800ef5e:	6021      	streq	r1, [r4, #0]
 800ef60:	6054      	str	r4, [r2, #4]
 800ef62:	e7ca      	b.n	800eefa <_free_r+0x26>
 800ef64:	b003      	add	sp, #12
 800ef66:	bd30      	pop	{r4, r5, pc}
 800ef68:	200098c0 	.word	0x200098c0

0800ef6c <malloc>:
 800ef6c:	4b02      	ldr	r3, [pc, #8]	; (800ef78 <malloc+0xc>)
 800ef6e:	4601      	mov	r1, r0
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	f000 b823 	b.w	800efbc <_malloc_r>
 800ef76:	bf00      	nop
 800ef78:	20000088 	.word	0x20000088

0800ef7c <sbrk_aligned>:
 800ef7c:	b570      	push	{r4, r5, r6, lr}
 800ef7e:	4e0e      	ldr	r6, [pc, #56]	; (800efb8 <sbrk_aligned+0x3c>)
 800ef80:	460c      	mov	r4, r1
 800ef82:	6831      	ldr	r1, [r6, #0]
 800ef84:	4605      	mov	r5, r0
 800ef86:	b911      	cbnz	r1, 800ef8e <sbrk_aligned+0x12>
 800ef88:	f001 f808 	bl	800ff9c <_sbrk_r>
 800ef8c:	6030      	str	r0, [r6, #0]
 800ef8e:	4621      	mov	r1, r4
 800ef90:	4628      	mov	r0, r5
 800ef92:	f001 f803 	bl	800ff9c <_sbrk_r>
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	d00a      	beq.n	800efb0 <sbrk_aligned+0x34>
 800ef9a:	1cc4      	adds	r4, r0, #3
 800ef9c:	f024 0403 	bic.w	r4, r4, #3
 800efa0:	42a0      	cmp	r0, r4
 800efa2:	d007      	beq.n	800efb4 <sbrk_aligned+0x38>
 800efa4:	1a21      	subs	r1, r4, r0
 800efa6:	4628      	mov	r0, r5
 800efa8:	f000 fff8 	bl	800ff9c <_sbrk_r>
 800efac:	3001      	adds	r0, #1
 800efae:	d101      	bne.n	800efb4 <sbrk_aligned+0x38>
 800efb0:	f04f 34ff 	mov.w	r4, #4294967295
 800efb4:	4620      	mov	r0, r4
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	200098c4 	.word	0x200098c4

0800efbc <_malloc_r>:
 800efbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efc0:	1ccd      	adds	r5, r1, #3
 800efc2:	f025 0503 	bic.w	r5, r5, #3
 800efc6:	3508      	adds	r5, #8
 800efc8:	2d0c      	cmp	r5, #12
 800efca:	bf38      	it	cc
 800efcc:	250c      	movcc	r5, #12
 800efce:	2d00      	cmp	r5, #0
 800efd0:	4607      	mov	r7, r0
 800efd2:	db01      	blt.n	800efd8 <_malloc_r+0x1c>
 800efd4:	42a9      	cmp	r1, r5
 800efd6:	d905      	bls.n	800efe4 <_malloc_r+0x28>
 800efd8:	230c      	movs	r3, #12
 800efda:	603b      	str	r3, [r7, #0]
 800efdc:	2600      	movs	r6, #0
 800efde:	4630      	mov	r0, r6
 800efe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efe4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f0b8 <_malloc_r+0xfc>
 800efe8:	f000 f868 	bl	800f0bc <__malloc_lock>
 800efec:	f8d8 3000 	ldr.w	r3, [r8]
 800eff0:	461c      	mov	r4, r3
 800eff2:	bb5c      	cbnz	r4, 800f04c <_malloc_r+0x90>
 800eff4:	4629      	mov	r1, r5
 800eff6:	4638      	mov	r0, r7
 800eff8:	f7ff ffc0 	bl	800ef7c <sbrk_aligned>
 800effc:	1c43      	adds	r3, r0, #1
 800effe:	4604      	mov	r4, r0
 800f000:	d155      	bne.n	800f0ae <_malloc_r+0xf2>
 800f002:	f8d8 4000 	ldr.w	r4, [r8]
 800f006:	4626      	mov	r6, r4
 800f008:	2e00      	cmp	r6, #0
 800f00a:	d145      	bne.n	800f098 <_malloc_r+0xdc>
 800f00c:	2c00      	cmp	r4, #0
 800f00e:	d048      	beq.n	800f0a2 <_malloc_r+0xe6>
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	4631      	mov	r1, r6
 800f014:	4638      	mov	r0, r7
 800f016:	eb04 0903 	add.w	r9, r4, r3
 800f01a:	f000 ffbf 	bl	800ff9c <_sbrk_r>
 800f01e:	4581      	cmp	r9, r0
 800f020:	d13f      	bne.n	800f0a2 <_malloc_r+0xe6>
 800f022:	6821      	ldr	r1, [r4, #0]
 800f024:	1a6d      	subs	r5, r5, r1
 800f026:	4629      	mov	r1, r5
 800f028:	4638      	mov	r0, r7
 800f02a:	f7ff ffa7 	bl	800ef7c <sbrk_aligned>
 800f02e:	3001      	adds	r0, #1
 800f030:	d037      	beq.n	800f0a2 <_malloc_r+0xe6>
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	442b      	add	r3, r5
 800f036:	6023      	str	r3, [r4, #0]
 800f038:	f8d8 3000 	ldr.w	r3, [r8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d038      	beq.n	800f0b2 <_malloc_r+0xf6>
 800f040:	685a      	ldr	r2, [r3, #4]
 800f042:	42a2      	cmp	r2, r4
 800f044:	d12b      	bne.n	800f09e <_malloc_r+0xe2>
 800f046:	2200      	movs	r2, #0
 800f048:	605a      	str	r2, [r3, #4]
 800f04a:	e00f      	b.n	800f06c <_malloc_r+0xb0>
 800f04c:	6822      	ldr	r2, [r4, #0]
 800f04e:	1b52      	subs	r2, r2, r5
 800f050:	d41f      	bmi.n	800f092 <_malloc_r+0xd6>
 800f052:	2a0b      	cmp	r2, #11
 800f054:	d917      	bls.n	800f086 <_malloc_r+0xca>
 800f056:	1961      	adds	r1, r4, r5
 800f058:	42a3      	cmp	r3, r4
 800f05a:	6025      	str	r5, [r4, #0]
 800f05c:	bf18      	it	ne
 800f05e:	6059      	strne	r1, [r3, #4]
 800f060:	6863      	ldr	r3, [r4, #4]
 800f062:	bf08      	it	eq
 800f064:	f8c8 1000 	streq.w	r1, [r8]
 800f068:	5162      	str	r2, [r4, r5]
 800f06a:	604b      	str	r3, [r1, #4]
 800f06c:	4638      	mov	r0, r7
 800f06e:	f104 060b 	add.w	r6, r4, #11
 800f072:	f000 f829 	bl	800f0c8 <__malloc_unlock>
 800f076:	f026 0607 	bic.w	r6, r6, #7
 800f07a:	1d23      	adds	r3, r4, #4
 800f07c:	1af2      	subs	r2, r6, r3
 800f07e:	d0ae      	beq.n	800efde <_malloc_r+0x22>
 800f080:	1b9b      	subs	r3, r3, r6
 800f082:	50a3      	str	r3, [r4, r2]
 800f084:	e7ab      	b.n	800efde <_malloc_r+0x22>
 800f086:	42a3      	cmp	r3, r4
 800f088:	6862      	ldr	r2, [r4, #4]
 800f08a:	d1dd      	bne.n	800f048 <_malloc_r+0x8c>
 800f08c:	f8c8 2000 	str.w	r2, [r8]
 800f090:	e7ec      	b.n	800f06c <_malloc_r+0xb0>
 800f092:	4623      	mov	r3, r4
 800f094:	6864      	ldr	r4, [r4, #4]
 800f096:	e7ac      	b.n	800eff2 <_malloc_r+0x36>
 800f098:	4634      	mov	r4, r6
 800f09a:	6876      	ldr	r6, [r6, #4]
 800f09c:	e7b4      	b.n	800f008 <_malloc_r+0x4c>
 800f09e:	4613      	mov	r3, r2
 800f0a0:	e7cc      	b.n	800f03c <_malloc_r+0x80>
 800f0a2:	230c      	movs	r3, #12
 800f0a4:	603b      	str	r3, [r7, #0]
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	f000 f80e 	bl	800f0c8 <__malloc_unlock>
 800f0ac:	e797      	b.n	800efde <_malloc_r+0x22>
 800f0ae:	6025      	str	r5, [r4, #0]
 800f0b0:	e7dc      	b.n	800f06c <_malloc_r+0xb0>
 800f0b2:	605b      	str	r3, [r3, #4]
 800f0b4:	deff      	udf	#255	; 0xff
 800f0b6:	bf00      	nop
 800f0b8:	200098c0 	.word	0x200098c0

0800f0bc <__malloc_lock>:
 800f0bc:	4801      	ldr	r0, [pc, #4]	; (800f0c4 <__malloc_lock+0x8>)
 800f0be:	f7ff b87f 	b.w	800e1c0 <__retarget_lock_acquire_recursive>
 800f0c2:	bf00      	nop
 800f0c4:	200098bc 	.word	0x200098bc

0800f0c8 <__malloc_unlock>:
 800f0c8:	4801      	ldr	r0, [pc, #4]	; (800f0d0 <__malloc_unlock+0x8>)
 800f0ca:	f7ff b87a 	b.w	800e1c2 <__retarget_lock_release_recursive>
 800f0ce:	bf00      	nop
 800f0d0:	200098bc 	.word	0x200098bc

0800f0d4 <_Balloc>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	69c6      	ldr	r6, [r0, #28]
 800f0d8:	4604      	mov	r4, r0
 800f0da:	460d      	mov	r5, r1
 800f0dc:	b976      	cbnz	r6, 800f0fc <_Balloc+0x28>
 800f0de:	2010      	movs	r0, #16
 800f0e0:	f7ff ff44 	bl	800ef6c <malloc>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	61e0      	str	r0, [r4, #28]
 800f0e8:	b920      	cbnz	r0, 800f0f4 <_Balloc+0x20>
 800f0ea:	4b18      	ldr	r3, [pc, #96]	; (800f14c <_Balloc+0x78>)
 800f0ec:	4818      	ldr	r0, [pc, #96]	; (800f150 <_Balloc+0x7c>)
 800f0ee:	216b      	movs	r1, #107	; 0x6b
 800f0f0:	f000 ff64 	bl	800ffbc <__assert_func>
 800f0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0f8:	6006      	str	r6, [r0, #0]
 800f0fa:	60c6      	str	r6, [r0, #12]
 800f0fc:	69e6      	ldr	r6, [r4, #28]
 800f0fe:	68f3      	ldr	r3, [r6, #12]
 800f100:	b183      	cbz	r3, 800f124 <_Balloc+0x50>
 800f102:	69e3      	ldr	r3, [r4, #28]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f10a:	b9b8      	cbnz	r0, 800f13c <_Balloc+0x68>
 800f10c:	2101      	movs	r1, #1
 800f10e:	fa01 f605 	lsl.w	r6, r1, r5
 800f112:	1d72      	adds	r2, r6, #5
 800f114:	0092      	lsls	r2, r2, #2
 800f116:	4620      	mov	r0, r4
 800f118:	f000 ff6e 	bl	800fff8 <_calloc_r>
 800f11c:	b160      	cbz	r0, 800f138 <_Balloc+0x64>
 800f11e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f122:	e00e      	b.n	800f142 <_Balloc+0x6e>
 800f124:	2221      	movs	r2, #33	; 0x21
 800f126:	2104      	movs	r1, #4
 800f128:	4620      	mov	r0, r4
 800f12a:	f000 ff65 	bl	800fff8 <_calloc_r>
 800f12e:	69e3      	ldr	r3, [r4, #28]
 800f130:	60f0      	str	r0, [r6, #12]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1e4      	bne.n	800f102 <_Balloc+0x2e>
 800f138:	2000      	movs	r0, #0
 800f13a:	bd70      	pop	{r4, r5, r6, pc}
 800f13c:	6802      	ldr	r2, [r0, #0]
 800f13e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f142:	2300      	movs	r3, #0
 800f144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f148:	e7f7      	b.n	800f13a <_Balloc+0x66>
 800f14a:	bf00      	nop
 800f14c:	08010aad 	.word	0x08010aad
 800f150:	08010b2d 	.word	0x08010b2d

0800f154 <_Bfree>:
 800f154:	b570      	push	{r4, r5, r6, lr}
 800f156:	69c6      	ldr	r6, [r0, #28]
 800f158:	4605      	mov	r5, r0
 800f15a:	460c      	mov	r4, r1
 800f15c:	b976      	cbnz	r6, 800f17c <_Bfree+0x28>
 800f15e:	2010      	movs	r0, #16
 800f160:	f7ff ff04 	bl	800ef6c <malloc>
 800f164:	4602      	mov	r2, r0
 800f166:	61e8      	str	r0, [r5, #28]
 800f168:	b920      	cbnz	r0, 800f174 <_Bfree+0x20>
 800f16a:	4b09      	ldr	r3, [pc, #36]	; (800f190 <_Bfree+0x3c>)
 800f16c:	4809      	ldr	r0, [pc, #36]	; (800f194 <_Bfree+0x40>)
 800f16e:	218f      	movs	r1, #143	; 0x8f
 800f170:	f000 ff24 	bl	800ffbc <__assert_func>
 800f174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f178:	6006      	str	r6, [r0, #0]
 800f17a:	60c6      	str	r6, [r0, #12]
 800f17c:	b13c      	cbz	r4, 800f18e <_Bfree+0x3a>
 800f17e:	69eb      	ldr	r3, [r5, #28]
 800f180:	6862      	ldr	r2, [r4, #4]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f188:	6021      	str	r1, [r4, #0]
 800f18a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f18e:	bd70      	pop	{r4, r5, r6, pc}
 800f190:	08010aad 	.word	0x08010aad
 800f194:	08010b2d 	.word	0x08010b2d

0800f198 <__multadd>:
 800f198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f19c:	690d      	ldr	r5, [r1, #16]
 800f19e:	4607      	mov	r7, r0
 800f1a0:	460c      	mov	r4, r1
 800f1a2:	461e      	mov	r6, r3
 800f1a4:	f101 0c14 	add.w	ip, r1, #20
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	f8dc 3000 	ldr.w	r3, [ip]
 800f1ae:	b299      	uxth	r1, r3
 800f1b0:	fb02 6101 	mla	r1, r2, r1, r6
 800f1b4:	0c1e      	lsrs	r6, r3, #16
 800f1b6:	0c0b      	lsrs	r3, r1, #16
 800f1b8:	fb02 3306 	mla	r3, r2, r6, r3
 800f1bc:	b289      	uxth	r1, r1
 800f1be:	3001      	adds	r0, #1
 800f1c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f1c4:	4285      	cmp	r5, r0
 800f1c6:	f84c 1b04 	str.w	r1, [ip], #4
 800f1ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f1ce:	dcec      	bgt.n	800f1aa <__multadd+0x12>
 800f1d0:	b30e      	cbz	r6, 800f216 <__multadd+0x7e>
 800f1d2:	68a3      	ldr	r3, [r4, #8]
 800f1d4:	42ab      	cmp	r3, r5
 800f1d6:	dc19      	bgt.n	800f20c <__multadd+0x74>
 800f1d8:	6861      	ldr	r1, [r4, #4]
 800f1da:	4638      	mov	r0, r7
 800f1dc:	3101      	adds	r1, #1
 800f1de:	f7ff ff79 	bl	800f0d4 <_Balloc>
 800f1e2:	4680      	mov	r8, r0
 800f1e4:	b928      	cbnz	r0, 800f1f2 <__multadd+0x5a>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	4b0c      	ldr	r3, [pc, #48]	; (800f21c <__multadd+0x84>)
 800f1ea:	480d      	ldr	r0, [pc, #52]	; (800f220 <__multadd+0x88>)
 800f1ec:	21ba      	movs	r1, #186	; 0xba
 800f1ee:	f000 fee5 	bl	800ffbc <__assert_func>
 800f1f2:	6922      	ldr	r2, [r4, #16]
 800f1f4:	3202      	adds	r2, #2
 800f1f6:	f104 010c 	add.w	r1, r4, #12
 800f1fa:	0092      	lsls	r2, r2, #2
 800f1fc:	300c      	adds	r0, #12
 800f1fe:	f7fe ffe1 	bl	800e1c4 <memcpy>
 800f202:	4621      	mov	r1, r4
 800f204:	4638      	mov	r0, r7
 800f206:	f7ff ffa5 	bl	800f154 <_Bfree>
 800f20a:	4644      	mov	r4, r8
 800f20c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f210:	3501      	adds	r5, #1
 800f212:	615e      	str	r6, [r3, #20]
 800f214:	6125      	str	r5, [r4, #16]
 800f216:	4620      	mov	r0, r4
 800f218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f21c:	08010b1c 	.word	0x08010b1c
 800f220:	08010b2d 	.word	0x08010b2d

0800f224 <__hi0bits>:
 800f224:	0c03      	lsrs	r3, r0, #16
 800f226:	041b      	lsls	r3, r3, #16
 800f228:	b9d3      	cbnz	r3, 800f260 <__hi0bits+0x3c>
 800f22a:	0400      	lsls	r0, r0, #16
 800f22c:	2310      	movs	r3, #16
 800f22e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f232:	bf04      	itt	eq
 800f234:	0200      	lsleq	r0, r0, #8
 800f236:	3308      	addeq	r3, #8
 800f238:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f23c:	bf04      	itt	eq
 800f23e:	0100      	lsleq	r0, r0, #4
 800f240:	3304      	addeq	r3, #4
 800f242:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f246:	bf04      	itt	eq
 800f248:	0080      	lsleq	r0, r0, #2
 800f24a:	3302      	addeq	r3, #2
 800f24c:	2800      	cmp	r0, #0
 800f24e:	db05      	blt.n	800f25c <__hi0bits+0x38>
 800f250:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f254:	f103 0301 	add.w	r3, r3, #1
 800f258:	bf08      	it	eq
 800f25a:	2320      	moveq	r3, #32
 800f25c:	4618      	mov	r0, r3
 800f25e:	4770      	bx	lr
 800f260:	2300      	movs	r3, #0
 800f262:	e7e4      	b.n	800f22e <__hi0bits+0xa>

0800f264 <__lo0bits>:
 800f264:	6803      	ldr	r3, [r0, #0]
 800f266:	f013 0207 	ands.w	r2, r3, #7
 800f26a:	d00c      	beq.n	800f286 <__lo0bits+0x22>
 800f26c:	07d9      	lsls	r1, r3, #31
 800f26e:	d422      	bmi.n	800f2b6 <__lo0bits+0x52>
 800f270:	079a      	lsls	r2, r3, #30
 800f272:	bf49      	itett	mi
 800f274:	085b      	lsrmi	r3, r3, #1
 800f276:	089b      	lsrpl	r3, r3, #2
 800f278:	6003      	strmi	r3, [r0, #0]
 800f27a:	2201      	movmi	r2, #1
 800f27c:	bf5c      	itt	pl
 800f27e:	6003      	strpl	r3, [r0, #0]
 800f280:	2202      	movpl	r2, #2
 800f282:	4610      	mov	r0, r2
 800f284:	4770      	bx	lr
 800f286:	b299      	uxth	r1, r3
 800f288:	b909      	cbnz	r1, 800f28e <__lo0bits+0x2a>
 800f28a:	0c1b      	lsrs	r3, r3, #16
 800f28c:	2210      	movs	r2, #16
 800f28e:	b2d9      	uxtb	r1, r3
 800f290:	b909      	cbnz	r1, 800f296 <__lo0bits+0x32>
 800f292:	3208      	adds	r2, #8
 800f294:	0a1b      	lsrs	r3, r3, #8
 800f296:	0719      	lsls	r1, r3, #28
 800f298:	bf04      	itt	eq
 800f29a:	091b      	lsreq	r3, r3, #4
 800f29c:	3204      	addeq	r2, #4
 800f29e:	0799      	lsls	r1, r3, #30
 800f2a0:	bf04      	itt	eq
 800f2a2:	089b      	lsreq	r3, r3, #2
 800f2a4:	3202      	addeq	r2, #2
 800f2a6:	07d9      	lsls	r1, r3, #31
 800f2a8:	d403      	bmi.n	800f2b2 <__lo0bits+0x4e>
 800f2aa:	085b      	lsrs	r3, r3, #1
 800f2ac:	f102 0201 	add.w	r2, r2, #1
 800f2b0:	d003      	beq.n	800f2ba <__lo0bits+0x56>
 800f2b2:	6003      	str	r3, [r0, #0]
 800f2b4:	e7e5      	b.n	800f282 <__lo0bits+0x1e>
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	e7e3      	b.n	800f282 <__lo0bits+0x1e>
 800f2ba:	2220      	movs	r2, #32
 800f2bc:	e7e1      	b.n	800f282 <__lo0bits+0x1e>
	...

0800f2c0 <__i2b>:
 800f2c0:	b510      	push	{r4, lr}
 800f2c2:	460c      	mov	r4, r1
 800f2c4:	2101      	movs	r1, #1
 800f2c6:	f7ff ff05 	bl	800f0d4 <_Balloc>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	b928      	cbnz	r0, 800f2da <__i2b+0x1a>
 800f2ce:	4b05      	ldr	r3, [pc, #20]	; (800f2e4 <__i2b+0x24>)
 800f2d0:	4805      	ldr	r0, [pc, #20]	; (800f2e8 <__i2b+0x28>)
 800f2d2:	f240 1145 	movw	r1, #325	; 0x145
 800f2d6:	f000 fe71 	bl	800ffbc <__assert_func>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	6144      	str	r4, [r0, #20]
 800f2de:	6103      	str	r3, [r0, #16]
 800f2e0:	bd10      	pop	{r4, pc}
 800f2e2:	bf00      	nop
 800f2e4:	08010b1c 	.word	0x08010b1c
 800f2e8:	08010b2d 	.word	0x08010b2d

0800f2ec <__multiply>:
 800f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f0:	4691      	mov	r9, r2
 800f2f2:	690a      	ldr	r2, [r1, #16]
 800f2f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	bfb8      	it	lt
 800f2fc:	460b      	movlt	r3, r1
 800f2fe:	460c      	mov	r4, r1
 800f300:	bfbc      	itt	lt
 800f302:	464c      	movlt	r4, r9
 800f304:	4699      	movlt	r9, r3
 800f306:	6927      	ldr	r7, [r4, #16]
 800f308:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f30c:	68a3      	ldr	r3, [r4, #8]
 800f30e:	6861      	ldr	r1, [r4, #4]
 800f310:	eb07 060a 	add.w	r6, r7, sl
 800f314:	42b3      	cmp	r3, r6
 800f316:	b085      	sub	sp, #20
 800f318:	bfb8      	it	lt
 800f31a:	3101      	addlt	r1, #1
 800f31c:	f7ff feda 	bl	800f0d4 <_Balloc>
 800f320:	b930      	cbnz	r0, 800f330 <__multiply+0x44>
 800f322:	4602      	mov	r2, r0
 800f324:	4b44      	ldr	r3, [pc, #272]	; (800f438 <__multiply+0x14c>)
 800f326:	4845      	ldr	r0, [pc, #276]	; (800f43c <__multiply+0x150>)
 800f328:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f32c:	f000 fe46 	bl	800ffbc <__assert_func>
 800f330:	f100 0514 	add.w	r5, r0, #20
 800f334:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f338:	462b      	mov	r3, r5
 800f33a:	2200      	movs	r2, #0
 800f33c:	4543      	cmp	r3, r8
 800f33e:	d321      	bcc.n	800f384 <__multiply+0x98>
 800f340:	f104 0314 	add.w	r3, r4, #20
 800f344:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f348:	f109 0314 	add.w	r3, r9, #20
 800f34c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f350:	9202      	str	r2, [sp, #8]
 800f352:	1b3a      	subs	r2, r7, r4
 800f354:	3a15      	subs	r2, #21
 800f356:	f022 0203 	bic.w	r2, r2, #3
 800f35a:	3204      	adds	r2, #4
 800f35c:	f104 0115 	add.w	r1, r4, #21
 800f360:	428f      	cmp	r7, r1
 800f362:	bf38      	it	cc
 800f364:	2204      	movcc	r2, #4
 800f366:	9201      	str	r2, [sp, #4]
 800f368:	9a02      	ldr	r2, [sp, #8]
 800f36a:	9303      	str	r3, [sp, #12]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d80c      	bhi.n	800f38a <__multiply+0x9e>
 800f370:	2e00      	cmp	r6, #0
 800f372:	dd03      	ble.n	800f37c <__multiply+0x90>
 800f374:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d05b      	beq.n	800f434 <__multiply+0x148>
 800f37c:	6106      	str	r6, [r0, #16]
 800f37e:	b005      	add	sp, #20
 800f380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f384:	f843 2b04 	str.w	r2, [r3], #4
 800f388:	e7d8      	b.n	800f33c <__multiply+0x50>
 800f38a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f38e:	f1ba 0f00 	cmp.w	sl, #0
 800f392:	d024      	beq.n	800f3de <__multiply+0xf2>
 800f394:	f104 0e14 	add.w	lr, r4, #20
 800f398:	46a9      	mov	r9, r5
 800f39a:	f04f 0c00 	mov.w	ip, #0
 800f39e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f3a2:	f8d9 1000 	ldr.w	r1, [r9]
 800f3a6:	fa1f fb82 	uxth.w	fp, r2
 800f3aa:	b289      	uxth	r1, r1
 800f3ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800f3b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f3b4:	f8d9 2000 	ldr.w	r2, [r9]
 800f3b8:	4461      	add	r1, ip
 800f3ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3be:	fb0a c20b 	mla	r2, sl, fp, ip
 800f3c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3c6:	b289      	uxth	r1, r1
 800f3c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3cc:	4577      	cmp	r7, lr
 800f3ce:	f849 1b04 	str.w	r1, [r9], #4
 800f3d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3d6:	d8e2      	bhi.n	800f39e <__multiply+0xb2>
 800f3d8:	9a01      	ldr	r2, [sp, #4]
 800f3da:	f845 c002 	str.w	ip, [r5, r2]
 800f3de:	9a03      	ldr	r2, [sp, #12]
 800f3e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	f1b9 0f00 	cmp.w	r9, #0
 800f3ea:	d021      	beq.n	800f430 <__multiply+0x144>
 800f3ec:	6829      	ldr	r1, [r5, #0]
 800f3ee:	f104 0c14 	add.w	ip, r4, #20
 800f3f2:	46ae      	mov	lr, r5
 800f3f4:	f04f 0a00 	mov.w	sl, #0
 800f3f8:	f8bc b000 	ldrh.w	fp, [ip]
 800f3fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f400:	fb09 220b 	mla	r2, r9, fp, r2
 800f404:	4452      	add	r2, sl
 800f406:	b289      	uxth	r1, r1
 800f408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f40c:	f84e 1b04 	str.w	r1, [lr], #4
 800f410:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f418:	f8be 1000 	ldrh.w	r1, [lr]
 800f41c:	fb09 110a 	mla	r1, r9, sl, r1
 800f420:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f424:	4567      	cmp	r7, ip
 800f426:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f42a:	d8e5      	bhi.n	800f3f8 <__multiply+0x10c>
 800f42c:	9a01      	ldr	r2, [sp, #4]
 800f42e:	50a9      	str	r1, [r5, r2]
 800f430:	3504      	adds	r5, #4
 800f432:	e799      	b.n	800f368 <__multiply+0x7c>
 800f434:	3e01      	subs	r6, #1
 800f436:	e79b      	b.n	800f370 <__multiply+0x84>
 800f438:	08010b1c 	.word	0x08010b1c
 800f43c:	08010b2d 	.word	0x08010b2d

0800f440 <__pow5mult>:
 800f440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f444:	4615      	mov	r5, r2
 800f446:	f012 0203 	ands.w	r2, r2, #3
 800f44a:	4606      	mov	r6, r0
 800f44c:	460f      	mov	r7, r1
 800f44e:	d007      	beq.n	800f460 <__pow5mult+0x20>
 800f450:	4c25      	ldr	r4, [pc, #148]	; (800f4e8 <__pow5mult+0xa8>)
 800f452:	3a01      	subs	r2, #1
 800f454:	2300      	movs	r3, #0
 800f456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f45a:	f7ff fe9d 	bl	800f198 <__multadd>
 800f45e:	4607      	mov	r7, r0
 800f460:	10ad      	asrs	r5, r5, #2
 800f462:	d03d      	beq.n	800f4e0 <__pow5mult+0xa0>
 800f464:	69f4      	ldr	r4, [r6, #28]
 800f466:	b97c      	cbnz	r4, 800f488 <__pow5mult+0x48>
 800f468:	2010      	movs	r0, #16
 800f46a:	f7ff fd7f 	bl	800ef6c <malloc>
 800f46e:	4602      	mov	r2, r0
 800f470:	61f0      	str	r0, [r6, #28]
 800f472:	b928      	cbnz	r0, 800f480 <__pow5mult+0x40>
 800f474:	4b1d      	ldr	r3, [pc, #116]	; (800f4ec <__pow5mult+0xac>)
 800f476:	481e      	ldr	r0, [pc, #120]	; (800f4f0 <__pow5mult+0xb0>)
 800f478:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f47c:	f000 fd9e 	bl	800ffbc <__assert_func>
 800f480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f484:	6004      	str	r4, [r0, #0]
 800f486:	60c4      	str	r4, [r0, #12]
 800f488:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f490:	b94c      	cbnz	r4, 800f4a6 <__pow5mult+0x66>
 800f492:	f240 2171 	movw	r1, #625	; 0x271
 800f496:	4630      	mov	r0, r6
 800f498:	f7ff ff12 	bl	800f2c0 <__i2b>
 800f49c:	2300      	movs	r3, #0
 800f49e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	6003      	str	r3, [r0, #0]
 800f4a6:	f04f 0900 	mov.w	r9, #0
 800f4aa:	07eb      	lsls	r3, r5, #31
 800f4ac:	d50a      	bpl.n	800f4c4 <__pow5mult+0x84>
 800f4ae:	4639      	mov	r1, r7
 800f4b0:	4622      	mov	r2, r4
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	f7ff ff1a 	bl	800f2ec <__multiply>
 800f4b8:	4639      	mov	r1, r7
 800f4ba:	4680      	mov	r8, r0
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f7ff fe49 	bl	800f154 <_Bfree>
 800f4c2:	4647      	mov	r7, r8
 800f4c4:	106d      	asrs	r5, r5, #1
 800f4c6:	d00b      	beq.n	800f4e0 <__pow5mult+0xa0>
 800f4c8:	6820      	ldr	r0, [r4, #0]
 800f4ca:	b938      	cbnz	r0, 800f4dc <__pow5mult+0x9c>
 800f4cc:	4622      	mov	r2, r4
 800f4ce:	4621      	mov	r1, r4
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	f7ff ff0b 	bl	800f2ec <__multiply>
 800f4d6:	6020      	str	r0, [r4, #0]
 800f4d8:	f8c0 9000 	str.w	r9, [r0]
 800f4dc:	4604      	mov	r4, r0
 800f4de:	e7e4      	b.n	800f4aa <__pow5mult+0x6a>
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e6:	bf00      	nop
 800f4e8:	08010c78 	.word	0x08010c78
 800f4ec:	08010aad 	.word	0x08010aad
 800f4f0:	08010b2d 	.word	0x08010b2d

0800f4f4 <__lshift>:
 800f4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f8:	460c      	mov	r4, r1
 800f4fa:	6849      	ldr	r1, [r1, #4]
 800f4fc:	6923      	ldr	r3, [r4, #16]
 800f4fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f502:	68a3      	ldr	r3, [r4, #8]
 800f504:	4607      	mov	r7, r0
 800f506:	4691      	mov	r9, r2
 800f508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f50c:	f108 0601 	add.w	r6, r8, #1
 800f510:	42b3      	cmp	r3, r6
 800f512:	db0b      	blt.n	800f52c <__lshift+0x38>
 800f514:	4638      	mov	r0, r7
 800f516:	f7ff fddd 	bl	800f0d4 <_Balloc>
 800f51a:	4605      	mov	r5, r0
 800f51c:	b948      	cbnz	r0, 800f532 <__lshift+0x3e>
 800f51e:	4602      	mov	r2, r0
 800f520:	4b28      	ldr	r3, [pc, #160]	; (800f5c4 <__lshift+0xd0>)
 800f522:	4829      	ldr	r0, [pc, #164]	; (800f5c8 <__lshift+0xd4>)
 800f524:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f528:	f000 fd48 	bl	800ffbc <__assert_func>
 800f52c:	3101      	adds	r1, #1
 800f52e:	005b      	lsls	r3, r3, #1
 800f530:	e7ee      	b.n	800f510 <__lshift+0x1c>
 800f532:	2300      	movs	r3, #0
 800f534:	f100 0114 	add.w	r1, r0, #20
 800f538:	f100 0210 	add.w	r2, r0, #16
 800f53c:	4618      	mov	r0, r3
 800f53e:	4553      	cmp	r3, sl
 800f540:	db33      	blt.n	800f5aa <__lshift+0xb6>
 800f542:	6920      	ldr	r0, [r4, #16]
 800f544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f548:	f104 0314 	add.w	r3, r4, #20
 800f54c:	f019 091f 	ands.w	r9, r9, #31
 800f550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f558:	d02b      	beq.n	800f5b2 <__lshift+0xbe>
 800f55a:	f1c9 0e20 	rsb	lr, r9, #32
 800f55e:	468a      	mov	sl, r1
 800f560:	2200      	movs	r2, #0
 800f562:	6818      	ldr	r0, [r3, #0]
 800f564:	fa00 f009 	lsl.w	r0, r0, r9
 800f568:	4310      	orrs	r0, r2
 800f56a:	f84a 0b04 	str.w	r0, [sl], #4
 800f56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f572:	459c      	cmp	ip, r3
 800f574:	fa22 f20e 	lsr.w	r2, r2, lr
 800f578:	d8f3      	bhi.n	800f562 <__lshift+0x6e>
 800f57a:	ebac 0304 	sub.w	r3, ip, r4
 800f57e:	3b15      	subs	r3, #21
 800f580:	f023 0303 	bic.w	r3, r3, #3
 800f584:	3304      	adds	r3, #4
 800f586:	f104 0015 	add.w	r0, r4, #21
 800f58a:	4584      	cmp	ip, r0
 800f58c:	bf38      	it	cc
 800f58e:	2304      	movcc	r3, #4
 800f590:	50ca      	str	r2, [r1, r3]
 800f592:	b10a      	cbz	r2, 800f598 <__lshift+0xa4>
 800f594:	f108 0602 	add.w	r6, r8, #2
 800f598:	3e01      	subs	r6, #1
 800f59a:	4638      	mov	r0, r7
 800f59c:	612e      	str	r6, [r5, #16]
 800f59e:	4621      	mov	r1, r4
 800f5a0:	f7ff fdd8 	bl	800f154 <_Bfree>
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	e7c5      	b.n	800f53e <__lshift+0x4a>
 800f5b2:	3904      	subs	r1, #4
 800f5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5bc:	459c      	cmp	ip, r3
 800f5be:	d8f9      	bhi.n	800f5b4 <__lshift+0xc0>
 800f5c0:	e7ea      	b.n	800f598 <__lshift+0xa4>
 800f5c2:	bf00      	nop
 800f5c4:	08010b1c 	.word	0x08010b1c
 800f5c8:	08010b2d 	.word	0x08010b2d

0800f5cc <__mcmp>:
 800f5cc:	b530      	push	{r4, r5, lr}
 800f5ce:	6902      	ldr	r2, [r0, #16]
 800f5d0:	690c      	ldr	r4, [r1, #16]
 800f5d2:	1b12      	subs	r2, r2, r4
 800f5d4:	d10e      	bne.n	800f5f4 <__mcmp+0x28>
 800f5d6:	f100 0314 	add.w	r3, r0, #20
 800f5da:	3114      	adds	r1, #20
 800f5dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f5e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f5e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f5e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f5ec:	42a5      	cmp	r5, r4
 800f5ee:	d003      	beq.n	800f5f8 <__mcmp+0x2c>
 800f5f0:	d305      	bcc.n	800f5fe <__mcmp+0x32>
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	4610      	mov	r0, r2
 800f5f6:	bd30      	pop	{r4, r5, pc}
 800f5f8:	4283      	cmp	r3, r0
 800f5fa:	d3f3      	bcc.n	800f5e4 <__mcmp+0x18>
 800f5fc:	e7fa      	b.n	800f5f4 <__mcmp+0x28>
 800f5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f602:	e7f7      	b.n	800f5f4 <__mcmp+0x28>

0800f604 <__mdiff>:
 800f604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f608:	460c      	mov	r4, r1
 800f60a:	4606      	mov	r6, r0
 800f60c:	4611      	mov	r1, r2
 800f60e:	4620      	mov	r0, r4
 800f610:	4690      	mov	r8, r2
 800f612:	f7ff ffdb 	bl	800f5cc <__mcmp>
 800f616:	1e05      	subs	r5, r0, #0
 800f618:	d110      	bne.n	800f63c <__mdiff+0x38>
 800f61a:	4629      	mov	r1, r5
 800f61c:	4630      	mov	r0, r6
 800f61e:	f7ff fd59 	bl	800f0d4 <_Balloc>
 800f622:	b930      	cbnz	r0, 800f632 <__mdiff+0x2e>
 800f624:	4b3a      	ldr	r3, [pc, #232]	; (800f710 <__mdiff+0x10c>)
 800f626:	4602      	mov	r2, r0
 800f628:	f240 2137 	movw	r1, #567	; 0x237
 800f62c:	4839      	ldr	r0, [pc, #228]	; (800f714 <__mdiff+0x110>)
 800f62e:	f000 fcc5 	bl	800ffbc <__assert_func>
 800f632:	2301      	movs	r3, #1
 800f634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63c:	bfa4      	itt	ge
 800f63e:	4643      	movge	r3, r8
 800f640:	46a0      	movge	r8, r4
 800f642:	4630      	mov	r0, r6
 800f644:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f648:	bfa6      	itte	ge
 800f64a:	461c      	movge	r4, r3
 800f64c:	2500      	movge	r5, #0
 800f64e:	2501      	movlt	r5, #1
 800f650:	f7ff fd40 	bl	800f0d4 <_Balloc>
 800f654:	b920      	cbnz	r0, 800f660 <__mdiff+0x5c>
 800f656:	4b2e      	ldr	r3, [pc, #184]	; (800f710 <__mdiff+0x10c>)
 800f658:	4602      	mov	r2, r0
 800f65a:	f240 2145 	movw	r1, #581	; 0x245
 800f65e:	e7e5      	b.n	800f62c <__mdiff+0x28>
 800f660:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f664:	6926      	ldr	r6, [r4, #16]
 800f666:	60c5      	str	r5, [r0, #12]
 800f668:	f104 0914 	add.w	r9, r4, #20
 800f66c:	f108 0514 	add.w	r5, r8, #20
 800f670:	f100 0e14 	add.w	lr, r0, #20
 800f674:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f67c:	f108 0210 	add.w	r2, r8, #16
 800f680:	46f2      	mov	sl, lr
 800f682:	2100      	movs	r1, #0
 800f684:	f859 3b04 	ldr.w	r3, [r9], #4
 800f688:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f68c:	fa11 f88b 	uxtah	r8, r1, fp
 800f690:	b299      	uxth	r1, r3
 800f692:	0c1b      	lsrs	r3, r3, #16
 800f694:	eba8 0801 	sub.w	r8, r8, r1
 800f698:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f69c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6a0:	fa1f f888 	uxth.w	r8, r8
 800f6a4:	1419      	asrs	r1, r3, #16
 800f6a6:	454e      	cmp	r6, r9
 800f6a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6ac:	f84a 3b04 	str.w	r3, [sl], #4
 800f6b0:	d8e8      	bhi.n	800f684 <__mdiff+0x80>
 800f6b2:	1b33      	subs	r3, r6, r4
 800f6b4:	3b15      	subs	r3, #21
 800f6b6:	f023 0303 	bic.w	r3, r3, #3
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	3415      	adds	r4, #21
 800f6be:	42a6      	cmp	r6, r4
 800f6c0:	bf38      	it	cc
 800f6c2:	2304      	movcc	r3, #4
 800f6c4:	441d      	add	r5, r3
 800f6c6:	4473      	add	r3, lr
 800f6c8:	469e      	mov	lr, r3
 800f6ca:	462e      	mov	r6, r5
 800f6cc:	4566      	cmp	r6, ip
 800f6ce:	d30e      	bcc.n	800f6ee <__mdiff+0xea>
 800f6d0:	f10c 0203 	add.w	r2, ip, #3
 800f6d4:	1b52      	subs	r2, r2, r5
 800f6d6:	f022 0203 	bic.w	r2, r2, #3
 800f6da:	3d03      	subs	r5, #3
 800f6dc:	45ac      	cmp	ip, r5
 800f6de:	bf38      	it	cc
 800f6e0:	2200      	movcc	r2, #0
 800f6e2:	4413      	add	r3, r2
 800f6e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f6e8:	b17a      	cbz	r2, 800f70a <__mdiff+0x106>
 800f6ea:	6107      	str	r7, [r0, #16]
 800f6ec:	e7a4      	b.n	800f638 <__mdiff+0x34>
 800f6ee:	f856 8b04 	ldr.w	r8, [r6], #4
 800f6f2:	fa11 f288 	uxtah	r2, r1, r8
 800f6f6:	1414      	asrs	r4, r2, #16
 800f6f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f6fc:	b292      	uxth	r2, r2
 800f6fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f702:	f84e 2b04 	str.w	r2, [lr], #4
 800f706:	1421      	asrs	r1, r4, #16
 800f708:	e7e0      	b.n	800f6cc <__mdiff+0xc8>
 800f70a:	3f01      	subs	r7, #1
 800f70c:	e7ea      	b.n	800f6e4 <__mdiff+0xe0>
 800f70e:	bf00      	nop
 800f710:	08010b1c 	.word	0x08010b1c
 800f714:	08010b2d 	.word	0x08010b2d

0800f718 <__d2b>:
 800f718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f71c:	460f      	mov	r7, r1
 800f71e:	2101      	movs	r1, #1
 800f720:	ec59 8b10 	vmov	r8, r9, d0
 800f724:	4616      	mov	r6, r2
 800f726:	f7ff fcd5 	bl	800f0d4 <_Balloc>
 800f72a:	4604      	mov	r4, r0
 800f72c:	b930      	cbnz	r0, 800f73c <__d2b+0x24>
 800f72e:	4602      	mov	r2, r0
 800f730:	4b24      	ldr	r3, [pc, #144]	; (800f7c4 <__d2b+0xac>)
 800f732:	4825      	ldr	r0, [pc, #148]	; (800f7c8 <__d2b+0xb0>)
 800f734:	f240 310f 	movw	r1, #783	; 0x30f
 800f738:	f000 fc40 	bl	800ffbc <__assert_func>
 800f73c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f744:	bb2d      	cbnz	r5, 800f792 <__d2b+0x7a>
 800f746:	9301      	str	r3, [sp, #4]
 800f748:	f1b8 0300 	subs.w	r3, r8, #0
 800f74c:	d026      	beq.n	800f79c <__d2b+0x84>
 800f74e:	4668      	mov	r0, sp
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	f7ff fd87 	bl	800f264 <__lo0bits>
 800f756:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f75a:	b1e8      	cbz	r0, 800f798 <__d2b+0x80>
 800f75c:	f1c0 0320 	rsb	r3, r0, #32
 800f760:	fa02 f303 	lsl.w	r3, r2, r3
 800f764:	430b      	orrs	r3, r1
 800f766:	40c2      	lsrs	r2, r0
 800f768:	6163      	str	r3, [r4, #20]
 800f76a:	9201      	str	r2, [sp, #4]
 800f76c:	9b01      	ldr	r3, [sp, #4]
 800f76e:	61a3      	str	r3, [r4, #24]
 800f770:	2b00      	cmp	r3, #0
 800f772:	bf14      	ite	ne
 800f774:	2202      	movne	r2, #2
 800f776:	2201      	moveq	r2, #1
 800f778:	6122      	str	r2, [r4, #16]
 800f77a:	b1bd      	cbz	r5, 800f7ac <__d2b+0x94>
 800f77c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f780:	4405      	add	r5, r0
 800f782:	603d      	str	r5, [r7, #0]
 800f784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f788:	6030      	str	r0, [r6, #0]
 800f78a:	4620      	mov	r0, r4
 800f78c:	b003      	add	sp, #12
 800f78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f796:	e7d6      	b.n	800f746 <__d2b+0x2e>
 800f798:	6161      	str	r1, [r4, #20]
 800f79a:	e7e7      	b.n	800f76c <__d2b+0x54>
 800f79c:	a801      	add	r0, sp, #4
 800f79e:	f7ff fd61 	bl	800f264 <__lo0bits>
 800f7a2:	9b01      	ldr	r3, [sp, #4]
 800f7a4:	6163      	str	r3, [r4, #20]
 800f7a6:	3020      	adds	r0, #32
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	e7e5      	b.n	800f778 <__d2b+0x60>
 800f7ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f7b4:	6038      	str	r0, [r7, #0]
 800f7b6:	6918      	ldr	r0, [r3, #16]
 800f7b8:	f7ff fd34 	bl	800f224 <__hi0bits>
 800f7bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7c0:	e7e2      	b.n	800f788 <__d2b+0x70>
 800f7c2:	bf00      	nop
 800f7c4:	08010b1c 	.word	0x08010b1c
 800f7c8:	08010b2d 	.word	0x08010b2d

0800f7cc <__ssputs_r>:
 800f7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d0:	688e      	ldr	r6, [r1, #8]
 800f7d2:	461f      	mov	r7, r3
 800f7d4:	42be      	cmp	r6, r7
 800f7d6:	680b      	ldr	r3, [r1, #0]
 800f7d8:	4682      	mov	sl, r0
 800f7da:	460c      	mov	r4, r1
 800f7dc:	4690      	mov	r8, r2
 800f7de:	d82c      	bhi.n	800f83a <__ssputs_r+0x6e>
 800f7e0:	898a      	ldrh	r2, [r1, #12]
 800f7e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7e6:	d026      	beq.n	800f836 <__ssputs_r+0x6a>
 800f7e8:	6965      	ldr	r5, [r4, #20]
 800f7ea:	6909      	ldr	r1, [r1, #16]
 800f7ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7f0:	eba3 0901 	sub.w	r9, r3, r1
 800f7f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7f8:	1c7b      	adds	r3, r7, #1
 800f7fa:	444b      	add	r3, r9
 800f7fc:	106d      	asrs	r5, r5, #1
 800f7fe:	429d      	cmp	r5, r3
 800f800:	bf38      	it	cc
 800f802:	461d      	movcc	r5, r3
 800f804:	0553      	lsls	r3, r2, #21
 800f806:	d527      	bpl.n	800f858 <__ssputs_r+0x8c>
 800f808:	4629      	mov	r1, r5
 800f80a:	f7ff fbd7 	bl	800efbc <_malloc_r>
 800f80e:	4606      	mov	r6, r0
 800f810:	b360      	cbz	r0, 800f86c <__ssputs_r+0xa0>
 800f812:	6921      	ldr	r1, [r4, #16]
 800f814:	464a      	mov	r2, r9
 800f816:	f7fe fcd5 	bl	800e1c4 <memcpy>
 800f81a:	89a3      	ldrh	r3, [r4, #12]
 800f81c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f824:	81a3      	strh	r3, [r4, #12]
 800f826:	6126      	str	r6, [r4, #16]
 800f828:	6165      	str	r5, [r4, #20]
 800f82a:	444e      	add	r6, r9
 800f82c:	eba5 0509 	sub.w	r5, r5, r9
 800f830:	6026      	str	r6, [r4, #0]
 800f832:	60a5      	str	r5, [r4, #8]
 800f834:	463e      	mov	r6, r7
 800f836:	42be      	cmp	r6, r7
 800f838:	d900      	bls.n	800f83c <__ssputs_r+0x70>
 800f83a:	463e      	mov	r6, r7
 800f83c:	6820      	ldr	r0, [r4, #0]
 800f83e:	4632      	mov	r2, r6
 800f840:	4641      	mov	r1, r8
 800f842:	f000 fb6f 	bl	800ff24 <memmove>
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	1b9b      	subs	r3, r3, r6
 800f84a:	60a3      	str	r3, [r4, #8]
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	4433      	add	r3, r6
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	2000      	movs	r0, #0
 800f854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f858:	462a      	mov	r2, r5
 800f85a:	f000 fbf5 	bl	8010048 <_realloc_r>
 800f85e:	4606      	mov	r6, r0
 800f860:	2800      	cmp	r0, #0
 800f862:	d1e0      	bne.n	800f826 <__ssputs_r+0x5a>
 800f864:	6921      	ldr	r1, [r4, #16]
 800f866:	4650      	mov	r0, sl
 800f868:	f7ff fb34 	bl	800eed4 <_free_r>
 800f86c:	230c      	movs	r3, #12
 800f86e:	f8ca 3000 	str.w	r3, [sl]
 800f872:	89a3      	ldrh	r3, [r4, #12]
 800f874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f878:	81a3      	strh	r3, [r4, #12]
 800f87a:	f04f 30ff 	mov.w	r0, #4294967295
 800f87e:	e7e9      	b.n	800f854 <__ssputs_r+0x88>

0800f880 <_svfiprintf_r>:
 800f880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f884:	4698      	mov	r8, r3
 800f886:	898b      	ldrh	r3, [r1, #12]
 800f888:	061b      	lsls	r3, r3, #24
 800f88a:	b09d      	sub	sp, #116	; 0x74
 800f88c:	4607      	mov	r7, r0
 800f88e:	460d      	mov	r5, r1
 800f890:	4614      	mov	r4, r2
 800f892:	d50e      	bpl.n	800f8b2 <_svfiprintf_r+0x32>
 800f894:	690b      	ldr	r3, [r1, #16]
 800f896:	b963      	cbnz	r3, 800f8b2 <_svfiprintf_r+0x32>
 800f898:	2140      	movs	r1, #64	; 0x40
 800f89a:	f7ff fb8f 	bl	800efbc <_malloc_r>
 800f89e:	6028      	str	r0, [r5, #0]
 800f8a0:	6128      	str	r0, [r5, #16]
 800f8a2:	b920      	cbnz	r0, 800f8ae <_svfiprintf_r+0x2e>
 800f8a4:	230c      	movs	r3, #12
 800f8a6:	603b      	str	r3, [r7, #0]
 800f8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ac:	e0d0      	b.n	800fa50 <_svfiprintf_r+0x1d0>
 800f8ae:	2340      	movs	r3, #64	; 0x40
 800f8b0:	616b      	str	r3, [r5, #20]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f8b6:	2320      	movs	r3, #32
 800f8b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8c0:	2330      	movs	r3, #48	; 0x30
 800f8c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fa68 <_svfiprintf_r+0x1e8>
 800f8c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8ca:	f04f 0901 	mov.w	r9, #1
 800f8ce:	4623      	mov	r3, r4
 800f8d0:	469a      	mov	sl, r3
 800f8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8d6:	b10a      	cbz	r2, 800f8dc <_svfiprintf_r+0x5c>
 800f8d8:	2a25      	cmp	r2, #37	; 0x25
 800f8da:	d1f9      	bne.n	800f8d0 <_svfiprintf_r+0x50>
 800f8dc:	ebba 0b04 	subs.w	fp, sl, r4
 800f8e0:	d00b      	beq.n	800f8fa <_svfiprintf_r+0x7a>
 800f8e2:	465b      	mov	r3, fp
 800f8e4:	4622      	mov	r2, r4
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	f7ff ff6f 	bl	800f7cc <__ssputs_r>
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	f000 80a9 	beq.w	800fa46 <_svfiprintf_r+0x1c6>
 800f8f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8f6:	445a      	add	r2, fp
 800f8f8:	9209      	str	r2, [sp, #36]	; 0x24
 800f8fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f000 80a1 	beq.w	800fa46 <_svfiprintf_r+0x1c6>
 800f904:	2300      	movs	r3, #0
 800f906:	f04f 32ff 	mov.w	r2, #4294967295
 800f90a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f90e:	f10a 0a01 	add.w	sl, sl, #1
 800f912:	9304      	str	r3, [sp, #16]
 800f914:	9307      	str	r3, [sp, #28]
 800f916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f91a:	931a      	str	r3, [sp, #104]	; 0x68
 800f91c:	4654      	mov	r4, sl
 800f91e:	2205      	movs	r2, #5
 800f920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f924:	4850      	ldr	r0, [pc, #320]	; (800fa68 <_svfiprintf_r+0x1e8>)
 800f926:	f7f0 fc83 	bl	8000230 <memchr>
 800f92a:	9a04      	ldr	r2, [sp, #16]
 800f92c:	b9d8      	cbnz	r0, 800f966 <_svfiprintf_r+0xe6>
 800f92e:	06d0      	lsls	r0, r2, #27
 800f930:	bf44      	itt	mi
 800f932:	2320      	movmi	r3, #32
 800f934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f938:	0711      	lsls	r1, r2, #28
 800f93a:	bf44      	itt	mi
 800f93c:	232b      	movmi	r3, #43	; 0x2b
 800f93e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f942:	f89a 3000 	ldrb.w	r3, [sl]
 800f946:	2b2a      	cmp	r3, #42	; 0x2a
 800f948:	d015      	beq.n	800f976 <_svfiprintf_r+0xf6>
 800f94a:	9a07      	ldr	r2, [sp, #28]
 800f94c:	4654      	mov	r4, sl
 800f94e:	2000      	movs	r0, #0
 800f950:	f04f 0c0a 	mov.w	ip, #10
 800f954:	4621      	mov	r1, r4
 800f956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f95a:	3b30      	subs	r3, #48	; 0x30
 800f95c:	2b09      	cmp	r3, #9
 800f95e:	d94d      	bls.n	800f9fc <_svfiprintf_r+0x17c>
 800f960:	b1b0      	cbz	r0, 800f990 <_svfiprintf_r+0x110>
 800f962:	9207      	str	r2, [sp, #28]
 800f964:	e014      	b.n	800f990 <_svfiprintf_r+0x110>
 800f966:	eba0 0308 	sub.w	r3, r0, r8
 800f96a:	fa09 f303 	lsl.w	r3, r9, r3
 800f96e:	4313      	orrs	r3, r2
 800f970:	9304      	str	r3, [sp, #16]
 800f972:	46a2      	mov	sl, r4
 800f974:	e7d2      	b.n	800f91c <_svfiprintf_r+0x9c>
 800f976:	9b03      	ldr	r3, [sp, #12]
 800f978:	1d19      	adds	r1, r3, #4
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	9103      	str	r1, [sp, #12]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	bfbb      	ittet	lt
 800f982:	425b      	neglt	r3, r3
 800f984:	f042 0202 	orrlt.w	r2, r2, #2
 800f988:	9307      	strge	r3, [sp, #28]
 800f98a:	9307      	strlt	r3, [sp, #28]
 800f98c:	bfb8      	it	lt
 800f98e:	9204      	strlt	r2, [sp, #16]
 800f990:	7823      	ldrb	r3, [r4, #0]
 800f992:	2b2e      	cmp	r3, #46	; 0x2e
 800f994:	d10c      	bne.n	800f9b0 <_svfiprintf_r+0x130>
 800f996:	7863      	ldrb	r3, [r4, #1]
 800f998:	2b2a      	cmp	r3, #42	; 0x2a
 800f99a:	d134      	bne.n	800fa06 <_svfiprintf_r+0x186>
 800f99c:	9b03      	ldr	r3, [sp, #12]
 800f99e:	1d1a      	adds	r2, r3, #4
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	9203      	str	r2, [sp, #12]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	bfb8      	it	lt
 800f9a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9ac:	3402      	adds	r4, #2
 800f9ae:	9305      	str	r3, [sp, #20]
 800f9b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fa78 <_svfiprintf_r+0x1f8>
 800f9b4:	7821      	ldrb	r1, [r4, #0]
 800f9b6:	2203      	movs	r2, #3
 800f9b8:	4650      	mov	r0, sl
 800f9ba:	f7f0 fc39 	bl	8000230 <memchr>
 800f9be:	b138      	cbz	r0, 800f9d0 <_svfiprintf_r+0x150>
 800f9c0:	9b04      	ldr	r3, [sp, #16]
 800f9c2:	eba0 000a 	sub.w	r0, r0, sl
 800f9c6:	2240      	movs	r2, #64	; 0x40
 800f9c8:	4082      	lsls	r2, r0
 800f9ca:	4313      	orrs	r3, r2
 800f9cc:	3401      	adds	r4, #1
 800f9ce:	9304      	str	r3, [sp, #16]
 800f9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9d4:	4825      	ldr	r0, [pc, #148]	; (800fa6c <_svfiprintf_r+0x1ec>)
 800f9d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9da:	2206      	movs	r2, #6
 800f9dc:	f7f0 fc28 	bl	8000230 <memchr>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d038      	beq.n	800fa56 <_svfiprintf_r+0x1d6>
 800f9e4:	4b22      	ldr	r3, [pc, #136]	; (800fa70 <_svfiprintf_r+0x1f0>)
 800f9e6:	bb1b      	cbnz	r3, 800fa30 <_svfiprintf_r+0x1b0>
 800f9e8:	9b03      	ldr	r3, [sp, #12]
 800f9ea:	3307      	adds	r3, #7
 800f9ec:	f023 0307 	bic.w	r3, r3, #7
 800f9f0:	3308      	adds	r3, #8
 800f9f2:	9303      	str	r3, [sp, #12]
 800f9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f6:	4433      	add	r3, r6
 800f9f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9fa:	e768      	b.n	800f8ce <_svfiprintf_r+0x4e>
 800f9fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa00:	460c      	mov	r4, r1
 800fa02:	2001      	movs	r0, #1
 800fa04:	e7a6      	b.n	800f954 <_svfiprintf_r+0xd4>
 800fa06:	2300      	movs	r3, #0
 800fa08:	3401      	adds	r4, #1
 800fa0a:	9305      	str	r3, [sp, #20]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	f04f 0c0a 	mov.w	ip, #10
 800fa12:	4620      	mov	r0, r4
 800fa14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa18:	3a30      	subs	r2, #48	; 0x30
 800fa1a:	2a09      	cmp	r2, #9
 800fa1c:	d903      	bls.n	800fa26 <_svfiprintf_r+0x1a6>
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d0c6      	beq.n	800f9b0 <_svfiprintf_r+0x130>
 800fa22:	9105      	str	r1, [sp, #20]
 800fa24:	e7c4      	b.n	800f9b0 <_svfiprintf_r+0x130>
 800fa26:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e7f0      	b.n	800fa12 <_svfiprintf_r+0x192>
 800fa30:	ab03      	add	r3, sp, #12
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	462a      	mov	r2, r5
 800fa36:	4b0f      	ldr	r3, [pc, #60]	; (800fa74 <_svfiprintf_r+0x1f4>)
 800fa38:	a904      	add	r1, sp, #16
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	f7fd fcfe 	bl	800d43c <_printf_float>
 800fa40:	1c42      	adds	r2, r0, #1
 800fa42:	4606      	mov	r6, r0
 800fa44:	d1d6      	bne.n	800f9f4 <_svfiprintf_r+0x174>
 800fa46:	89ab      	ldrh	r3, [r5, #12]
 800fa48:	065b      	lsls	r3, r3, #25
 800fa4a:	f53f af2d 	bmi.w	800f8a8 <_svfiprintf_r+0x28>
 800fa4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa50:	b01d      	add	sp, #116	; 0x74
 800fa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa56:	ab03      	add	r3, sp, #12
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	462a      	mov	r2, r5
 800fa5c:	4b05      	ldr	r3, [pc, #20]	; (800fa74 <_svfiprintf_r+0x1f4>)
 800fa5e:	a904      	add	r1, sp, #16
 800fa60:	4638      	mov	r0, r7
 800fa62:	f7fd ff8f 	bl	800d984 <_printf_i>
 800fa66:	e7eb      	b.n	800fa40 <_svfiprintf_r+0x1c0>
 800fa68:	08010c84 	.word	0x08010c84
 800fa6c:	08010c8e 	.word	0x08010c8e
 800fa70:	0800d43d 	.word	0x0800d43d
 800fa74:	0800f7cd 	.word	0x0800f7cd
 800fa78:	08010c8a 	.word	0x08010c8a

0800fa7c <__sfputc_r>:
 800fa7c:	6893      	ldr	r3, [r2, #8]
 800fa7e:	3b01      	subs	r3, #1
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	b410      	push	{r4}
 800fa84:	6093      	str	r3, [r2, #8]
 800fa86:	da08      	bge.n	800fa9a <__sfputc_r+0x1e>
 800fa88:	6994      	ldr	r4, [r2, #24]
 800fa8a:	42a3      	cmp	r3, r4
 800fa8c:	db01      	blt.n	800fa92 <__sfputc_r+0x16>
 800fa8e:	290a      	cmp	r1, #10
 800fa90:	d103      	bne.n	800fa9a <__sfputc_r+0x1e>
 800fa92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa96:	f7fe ba18 	b.w	800deca <__swbuf_r>
 800fa9a:	6813      	ldr	r3, [r2, #0]
 800fa9c:	1c58      	adds	r0, r3, #1
 800fa9e:	6010      	str	r0, [r2, #0]
 800faa0:	7019      	strb	r1, [r3, #0]
 800faa2:	4608      	mov	r0, r1
 800faa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800faa8:	4770      	bx	lr

0800faaa <__sfputs_r>:
 800faaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faac:	4606      	mov	r6, r0
 800faae:	460f      	mov	r7, r1
 800fab0:	4614      	mov	r4, r2
 800fab2:	18d5      	adds	r5, r2, r3
 800fab4:	42ac      	cmp	r4, r5
 800fab6:	d101      	bne.n	800fabc <__sfputs_r+0x12>
 800fab8:	2000      	movs	r0, #0
 800faba:	e007      	b.n	800facc <__sfputs_r+0x22>
 800fabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac0:	463a      	mov	r2, r7
 800fac2:	4630      	mov	r0, r6
 800fac4:	f7ff ffda 	bl	800fa7c <__sfputc_r>
 800fac8:	1c43      	adds	r3, r0, #1
 800faca:	d1f3      	bne.n	800fab4 <__sfputs_r+0xa>
 800facc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fad0 <_vfiprintf_r>:
 800fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad4:	460d      	mov	r5, r1
 800fad6:	b09d      	sub	sp, #116	; 0x74
 800fad8:	4614      	mov	r4, r2
 800fada:	4698      	mov	r8, r3
 800fadc:	4606      	mov	r6, r0
 800fade:	b118      	cbz	r0, 800fae8 <_vfiprintf_r+0x18>
 800fae0:	6a03      	ldr	r3, [r0, #32]
 800fae2:	b90b      	cbnz	r3, 800fae8 <_vfiprintf_r+0x18>
 800fae4:	f7fe f8ea 	bl	800dcbc <__sinit>
 800fae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faea:	07d9      	lsls	r1, r3, #31
 800faec:	d405      	bmi.n	800fafa <_vfiprintf_r+0x2a>
 800faee:	89ab      	ldrh	r3, [r5, #12]
 800faf0:	059a      	lsls	r2, r3, #22
 800faf2:	d402      	bmi.n	800fafa <_vfiprintf_r+0x2a>
 800faf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faf6:	f7fe fb63 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800fafa:	89ab      	ldrh	r3, [r5, #12]
 800fafc:	071b      	lsls	r3, r3, #28
 800fafe:	d501      	bpl.n	800fb04 <_vfiprintf_r+0x34>
 800fb00:	692b      	ldr	r3, [r5, #16]
 800fb02:	b99b      	cbnz	r3, 800fb2c <_vfiprintf_r+0x5c>
 800fb04:	4629      	mov	r1, r5
 800fb06:	4630      	mov	r0, r6
 800fb08:	f7fe fa1c 	bl	800df44 <__swsetup_r>
 800fb0c:	b170      	cbz	r0, 800fb2c <_vfiprintf_r+0x5c>
 800fb0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb10:	07dc      	lsls	r4, r3, #31
 800fb12:	d504      	bpl.n	800fb1e <_vfiprintf_r+0x4e>
 800fb14:	f04f 30ff 	mov.w	r0, #4294967295
 800fb18:	b01d      	add	sp, #116	; 0x74
 800fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1e:	89ab      	ldrh	r3, [r5, #12]
 800fb20:	0598      	lsls	r0, r3, #22
 800fb22:	d4f7      	bmi.n	800fb14 <_vfiprintf_r+0x44>
 800fb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb26:	f7fe fb4c 	bl	800e1c2 <__retarget_lock_release_recursive>
 800fb2a:	e7f3      	b.n	800fb14 <_vfiprintf_r+0x44>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	9309      	str	r3, [sp, #36]	; 0x24
 800fb30:	2320      	movs	r3, #32
 800fb32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb36:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb3a:	2330      	movs	r3, #48	; 0x30
 800fb3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fcf0 <_vfiprintf_r+0x220>
 800fb40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb44:	f04f 0901 	mov.w	r9, #1
 800fb48:	4623      	mov	r3, r4
 800fb4a:	469a      	mov	sl, r3
 800fb4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb50:	b10a      	cbz	r2, 800fb56 <_vfiprintf_r+0x86>
 800fb52:	2a25      	cmp	r2, #37	; 0x25
 800fb54:	d1f9      	bne.n	800fb4a <_vfiprintf_r+0x7a>
 800fb56:	ebba 0b04 	subs.w	fp, sl, r4
 800fb5a:	d00b      	beq.n	800fb74 <_vfiprintf_r+0xa4>
 800fb5c:	465b      	mov	r3, fp
 800fb5e:	4622      	mov	r2, r4
 800fb60:	4629      	mov	r1, r5
 800fb62:	4630      	mov	r0, r6
 800fb64:	f7ff ffa1 	bl	800faaa <__sfputs_r>
 800fb68:	3001      	adds	r0, #1
 800fb6a:	f000 80a9 	beq.w	800fcc0 <_vfiprintf_r+0x1f0>
 800fb6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb70:	445a      	add	r2, fp
 800fb72:	9209      	str	r2, [sp, #36]	; 0x24
 800fb74:	f89a 3000 	ldrb.w	r3, [sl]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	f000 80a1 	beq.w	800fcc0 <_vfiprintf_r+0x1f0>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f04f 32ff 	mov.w	r2, #4294967295
 800fb84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb88:	f10a 0a01 	add.w	sl, sl, #1
 800fb8c:	9304      	str	r3, [sp, #16]
 800fb8e:	9307      	str	r3, [sp, #28]
 800fb90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb94:	931a      	str	r3, [sp, #104]	; 0x68
 800fb96:	4654      	mov	r4, sl
 800fb98:	2205      	movs	r2, #5
 800fb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb9e:	4854      	ldr	r0, [pc, #336]	; (800fcf0 <_vfiprintf_r+0x220>)
 800fba0:	f7f0 fb46 	bl	8000230 <memchr>
 800fba4:	9a04      	ldr	r2, [sp, #16]
 800fba6:	b9d8      	cbnz	r0, 800fbe0 <_vfiprintf_r+0x110>
 800fba8:	06d1      	lsls	r1, r2, #27
 800fbaa:	bf44      	itt	mi
 800fbac:	2320      	movmi	r3, #32
 800fbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbb2:	0713      	lsls	r3, r2, #28
 800fbb4:	bf44      	itt	mi
 800fbb6:	232b      	movmi	r3, #43	; 0x2b
 800fbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800fbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800fbc2:	d015      	beq.n	800fbf0 <_vfiprintf_r+0x120>
 800fbc4:	9a07      	ldr	r2, [sp, #28]
 800fbc6:	4654      	mov	r4, sl
 800fbc8:	2000      	movs	r0, #0
 800fbca:	f04f 0c0a 	mov.w	ip, #10
 800fbce:	4621      	mov	r1, r4
 800fbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbd4:	3b30      	subs	r3, #48	; 0x30
 800fbd6:	2b09      	cmp	r3, #9
 800fbd8:	d94d      	bls.n	800fc76 <_vfiprintf_r+0x1a6>
 800fbda:	b1b0      	cbz	r0, 800fc0a <_vfiprintf_r+0x13a>
 800fbdc:	9207      	str	r2, [sp, #28]
 800fbde:	e014      	b.n	800fc0a <_vfiprintf_r+0x13a>
 800fbe0:	eba0 0308 	sub.w	r3, r0, r8
 800fbe4:	fa09 f303 	lsl.w	r3, r9, r3
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	9304      	str	r3, [sp, #16]
 800fbec:	46a2      	mov	sl, r4
 800fbee:	e7d2      	b.n	800fb96 <_vfiprintf_r+0xc6>
 800fbf0:	9b03      	ldr	r3, [sp, #12]
 800fbf2:	1d19      	adds	r1, r3, #4
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	9103      	str	r1, [sp, #12]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	bfbb      	ittet	lt
 800fbfc:	425b      	neglt	r3, r3
 800fbfe:	f042 0202 	orrlt.w	r2, r2, #2
 800fc02:	9307      	strge	r3, [sp, #28]
 800fc04:	9307      	strlt	r3, [sp, #28]
 800fc06:	bfb8      	it	lt
 800fc08:	9204      	strlt	r2, [sp, #16]
 800fc0a:	7823      	ldrb	r3, [r4, #0]
 800fc0c:	2b2e      	cmp	r3, #46	; 0x2e
 800fc0e:	d10c      	bne.n	800fc2a <_vfiprintf_r+0x15a>
 800fc10:	7863      	ldrb	r3, [r4, #1]
 800fc12:	2b2a      	cmp	r3, #42	; 0x2a
 800fc14:	d134      	bne.n	800fc80 <_vfiprintf_r+0x1b0>
 800fc16:	9b03      	ldr	r3, [sp, #12]
 800fc18:	1d1a      	adds	r2, r3, #4
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	9203      	str	r2, [sp, #12]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	bfb8      	it	lt
 800fc22:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc26:	3402      	adds	r4, #2
 800fc28:	9305      	str	r3, [sp, #20]
 800fc2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fd00 <_vfiprintf_r+0x230>
 800fc2e:	7821      	ldrb	r1, [r4, #0]
 800fc30:	2203      	movs	r2, #3
 800fc32:	4650      	mov	r0, sl
 800fc34:	f7f0 fafc 	bl	8000230 <memchr>
 800fc38:	b138      	cbz	r0, 800fc4a <_vfiprintf_r+0x17a>
 800fc3a:	9b04      	ldr	r3, [sp, #16]
 800fc3c:	eba0 000a 	sub.w	r0, r0, sl
 800fc40:	2240      	movs	r2, #64	; 0x40
 800fc42:	4082      	lsls	r2, r0
 800fc44:	4313      	orrs	r3, r2
 800fc46:	3401      	adds	r4, #1
 800fc48:	9304      	str	r3, [sp, #16]
 800fc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc4e:	4829      	ldr	r0, [pc, #164]	; (800fcf4 <_vfiprintf_r+0x224>)
 800fc50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc54:	2206      	movs	r2, #6
 800fc56:	f7f0 faeb 	bl	8000230 <memchr>
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	d03f      	beq.n	800fcde <_vfiprintf_r+0x20e>
 800fc5e:	4b26      	ldr	r3, [pc, #152]	; (800fcf8 <_vfiprintf_r+0x228>)
 800fc60:	bb1b      	cbnz	r3, 800fcaa <_vfiprintf_r+0x1da>
 800fc62:	9b03      	ldr	r3, [sp, #12]
 800fc64:	3307      	adds	r3, #7
 800fc66:	f023 0307 	bic.w	r3, r3, #7
 800fc6a:	3308      	adds	r3, #8
 800fc6c:	9303      	str	r3, [sp, #12]
 800fc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc70:	443b      	add	r3, r7
 800fc72:	9309      	str	r3, [sp, #36]	; 0x24
 800fc74:	e768      	b.n	800fb48 <_vfiprintf_r+0x78>
 800fc76:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	2001      	movs	r0, #1
 800fc7e:	e7a6      	b.n	800fbce <_vfiprintf_r+0xfe>
 800fc80:	2300      	movs	r3, #0
 800fc82:	3401      	adds	r4, #1
 800fc84:	9305      	str	r3, [sp, #20]
 800fc86:	4619      	mov	r1, r3
 800fc88:	f04f 0c0a 	mov.w	ip, #10
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc92:	3a30      	subs	r2, #48	; 0x30
 800fc94:	2a09      	cmp	r2, #9
 800fc96:	d903      	bls.n	800fca0 <_vfiprintf_r+0x1d0>
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d0c6      	beq.n	800fc2a <_vfiprintf_r+0x15a>
 800fc9c:	9105      	str	r1, [sp, #20]
 800fc9e:	e7c4      	b.n	800fc2a <_vfiprintf_r+0x15a>
 800fca0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fca4:	4604      	mov	r4, r0
 800fca6:	2301      	movs	r3, #1
 800fca8:	e7f0      	b.n	800fc8c <_vfiprintf_r+0x1bc>
 800fcaa:	ab03      	add	r3, sp, #12
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	462a      	mov	r2, r5
 800fcb0:	4b12      	ldr	r3, [pc, #72]	; (800fcfc <_vfiprintf_r+0x22c>)
 800fcb2:	a904      	add	r1, sp, #16
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	f7fd fbc1 	bl	800d43c <_printf_float>
 800fcba:	4607      	mov	r7, r0
 800fcbc:	1c78      	adds	r0, r7, #1
 800fcbe:	d1d6      	bne.n	800fc6e <_vfiprintf_r+0x19e>
 800fcc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcc2:	07d9      	lsls	r1, r3, #31
 800fcc4:	d405      	bmi.n	800fcd2 <_vfiprintf_r+0x202>
 800fcc6:	89ab      	ldrh	r3, [r5, #12]
 800fcc8:	059a      	lsls	r2, r3, #22
 800fcca:	d402      	bmi.n	800fcd2 <_vfiprintf_r+0x202>
 800fccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcce:	f7fe fa78 	bl	800e1c2 <__retarget_lock_release_recursive>
 800fcd2:	89ab      	ldrh	r3, [r5, #12]
 800fcd4:	065b      	lsls	r3, r3, #25
 800fcd6:	f53f af1d 	bmi.w	800fb14 <_vfiprintf_r+0x44>
 800fcda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcdc:	e71c      	b.n	800fb18 <_vfiprintf_r+0x48>
 800fcde:	ab03      	add	r3, sp, #12
 800fce0:	9300      	str	r3, [sp, #0]
 800fce2:	462a      	mov	r2, r5
 800fce4:	4b05      	ldr	r3, [pc, #20]	; (800fcfc <_vfiprintf_r+0x22c>)
 800fce6:	a904      	add	r1, sp, #16
 800fce8:	4630      	mov	r0, r6
 800fcea:	f7fd fe4b 	bl	800d984 <_printf_i>
 800fcee:	e7e4      	b.n	800fcba <_vfiprintf_r+0x1ea>
 800fcf0:	08010c84 	.word	0x08010c84
 800fcf4:	08010c8e 	.word	0x08010c8e
 800fcf8:	0800d43d 	.word	0x0800d43d
 800fcfc:	0800faab 	.word	0x0800faab
 800fd00:	08010c8a 	.word	0x08010c8a

0800fd04 <__sflush_r>:
 800fd04:	898a      	ldrh	r2, [r1, #12]
 800fd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	0710      	lsls	r0, r2, #28
 800fd0e:	460c      	mov	r4, r1
 800fd10:	d458      	bmi.n	800fdc4 <__sflush_r+0xc0>
 800fd12:	684b      	ldr	r3, [r1, #4]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	dc05      	bgt.n	800fd24 <__sflush_r+0x20>
 800fd18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	dc02      	bgt.n	800fd24 <__sflush_r+0x20>
 800fd1e:	2000      	movs	r0, #0
 800fd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd26:	2e00      	cmp	r6, #0
 800fd28:	d0f9      	beq.n	800fd1e <__sflush_r+0x1a>
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd30:	682f      	ldr	r7, [r5, #0]
 800fd32:	6a21      	ldr	r1, [r4, #32]
 800fd34:	602b      	str	r3, [r5, #0]
 800fd36:	d032      	beq.n	800fd9e <__sflush_r+0x9a>
 800fd38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd3a:	89a3      	ldrh	r3, [r4, #12]
 800fd3c:	075a      	lsls	r2, r3, #29
 800fd3e:	d505      	bpl.n	800fd4c <__sflush_r+0x48>
 800fd40:	6863      	ldr	r3, [r4, #4]
 800fd42:	1ac0      	subs	r0, r0, r3
 800fd44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd46:	b10b      	cbz	r3, 800fd4c <__sflush_r+0x48>
 800fd48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd4a:	1ac0      	subs	r0, r0, r3
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	4602      	mov	r2, r0
 800fd50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd52:	6a21      	ldr	r1, [r4, #32]
 800fd54:	4628      	mov	r0, r5
 800fd56:	47b0      	blx	r6
 800fd58:	1c43      	adds	r3, r0, #1
 800fd5a:	89a3      	ldrh	r3, [r4, #12]
 800fd5c:	d106      	bne.n	800fd6c <__sflush_r+0x68>
 800fd5e:	6829      	ldr	r1, [r5, #0]
 800fd60:	291d      	cmp	r1, #29
 800fd62:	d82b      	bhi.n	800fdbc <__sflush_r+0xb8>
 800fd64:	4a29      	ldr	r2, [pc, #164]	; (800fe0c <__sflush_r+0x108>)
 800fd66:	410a      	asrs	r2, r1
 800fd68:	07d6      	lsls	r6, r2, #31
 800fd6a:	d427      	bmi.n	800fdbc <__sflush_r+0xb8>
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	6062      	str	r2, [r4, #4]
 800fd70:	04d9      	lsls	r1, r3, #19
 800fd72:	6922      	ldr	r2, [r4, #16]
 800fd74:	6022      	str	r2, [r4, #0]
 800fd76:	d504      	bpl.n	800fd82 <__sflush_r+0x7e>
 800fd78:	1c42      	adds	r2, r0, #1
 800fd7a:	d101      	bne.n	800fd80 <__sflush_r+0x7c>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	b903      	cbnz	r3, 800fd82 <__sflush_r+0x7e>
 800fd80:	6560      	str	r0, [r4, #84]	; 0x54
 800fd82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd84:	602f      	str	r7, [r5, #0]
 800fd86:	2900      	cmp	r1, #0
 800fd88:	d0c9      	beq.n	800fd1e <__sflush_r+0x1a>
 800fd8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd8e:	4299      	cmp	r1, r3
 800fd90:	d002      	beq.n	800fd98 <__sflush_r+0x94>
 800fd92:	4628      	mov	r0, r5
 800fd94:	f7ff f89e 	bl	800eed4 <_free_r>
 800fd98:	2000      	movs	r0, #0
 800fd9a:	6360      	str	r0, [r4, #52]	; 0x34
 800fd9c:	e7c0      	b.n	800fd20 <__sflush_r+0x1c>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	4628      	mov	r0, r5
 800fda2:	47b0      	blx	r6
 800fda4:	1c41      	adds	r1, r0, #1
 800fda6:	d1c8      	bne.n	800fd3a <__sflush_r+0x36>
 800fda8:	682b      	ldr	r3, [r5, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d0c5      	beq.n	800fd3a <__sflush_r+0x36>
 800fdae:	2b1d      	cmp	r3, #29
 800fdb0:	d001      	beq.n	800fdb6 <__sflush_r+0xb2>
 800fdb2:	2b16      	cmp	r3, #22
 800fdb4:	d101      	bne.n	800fdba <__sflush_r+0xb6>
 800fdb6:	602f      	str	r7, [r5, #0]
 800fdb8:	e7b1      	b.n	800fd1e <__sflush_r+0x1a>
 800fdba:	89a3      	ldrh	r3, [r4, #12]
 800fdbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdc0:	81a3      	strh	r3, [r4, #12]
 800fdc2:	e7ad      	b.n	800fd20 <__sflush_r+0x1c>
 800fdc4:	690f      	ldr	r7, [r1, #16]
 800fdc6:	2f00      	cmp	r7, #0
 800fdc8:	d0a9      	beq.n	800fd1e <__sflush_r+0x1a>
 800fdca:	0793      	lsls	r3, r2, #30
 800fdcc:	680e      	ldr	r6, [r1, #0]
 800fdce:	bf08      	it	eq
 800fdd0:	694b      	ldreq	r3, [r1, #20]
 800fdd2:	600f      	str	r7, [r1, #0]
 800fdd4:	bf18      	it	ne
 800fdd6:	2300      	movne	r3, #0
 800fdd8:	eba6 0807 	sub.w	r8, r6, r7
 800fddc:	608b      	str	r3, [r1, #8]
 800fdde:	f1b8 0f00 	cmp.w	r8, #0
 800fde2:	dd9c      	ble.n	800fd1e <__sflush_r+0x1a>
 800fde4:	6a21      	ldr	r1, [r4, #32]
 800fde6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fde8:	4643      	mov	r3, r8
 800fdea:	463a      	mov	r2, r7
 800fdec:	4628      	mov	r0, r5
 800fdee:	47b0      	blx	r6
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	dc06      	bgt.n	800fe02 <__sflush_r+0xfe>
 800fdf4:	89a3      	ldrh	r3, [r4, #12]
 800fdf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdfa:	81a3      	strh	r3, [r4, #12]
 800fdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fe00:	e78e      	b.n	800fd20 <__sflush_r+0x1c>
 800fe02:	4407      	add	r7, r0
 800fe04:	eba8 0800 	sub.w	r8, r8, r0
 800fe08:	e7e9      	b.n	800fdde <__sflush_r+0xda>
 800fe0a:	bf00      	nop
 800fe0c:	dfbffffe 	.word	0xdfbffffe

0800fe10 <_fflush_r>:
 800fe10:	b538      	push	{r3, r4, r5, lr}
 800fe12:	690b      	ldr	r3, [r1, #16]
 800fe14:	4605      	mov	r5, r0
 800fe16:	460c      	mov	r4, r1
 800fe18:	b913      	cbnz	r3, 800fe20 <_fflush_r+0x10>
 800fe1a:	2500      	movs	r5, #0
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	bd38      	pop	{r3, r4, r5, pc}
 800fe20:	b118      	cbz	r0, 800fe2a <_fflush_r+0x1a>
 800fe22:	6a03      	ldr	r3, [r0, #32]
 800fe24:	b90b      	cbnz	r3, 800fe2a <_fflush_r+0x1a>
 800fe26:	f7fd ff49 	bl	800dcbc <__sinit>
 800fe2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d0f3      	beq.n	800fe1a <_fflush_r+0xa>
 800fe32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe34:	07d0      	lsls	r0, r2, #31
 800fe36:	d404      	bmi.n	800fe42 <_fflush_r+0x32>
 800fe38:	0599      	lsls	r1, r3, #22
 800fe3a:	d402      	bmi.n	800fe42 <_fflush_r+0x32>
 800fe3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe3e:	f7fe f9bf 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800fe42:	4628      	mov	r0, r5
 800fe44:	4621      	mov	r1, r4
 800fe46:	f7ff ff5d 	bl	800fd04 <__sflush_r>
 800fe4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe4c:	07da      	lsls	r2, r3, #31
 800fe4e:	4605      	mov	r5, r0
 800fe50:	d4e4      	bmi.n	800fe1c <_fflush_r+0xc>
 800fe52:	89a3      	ldrh	r3, [r4, #12]
 800fe54:	059b      	lsls	r3, r3, #22
 800fe56:	d4e1      	bmi.n	800fe1c <_fflush_r+0xc>
 800fe58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe5a:	f7fe f9b2 	bl	800e1c2 <__retarget_lock_release_recursive>
 800fe5e:	e7dd      	b.n	800fe1c <_fflush_r+0xc>

0800fe60 <__swhatbuf_r>:
 800fe60:	b570      	push	{r4, r5, r6, lr}
 800fe62:	460c      	mov	r4, r1
 800fe64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe68:	2900      	cmp	r1, #0
 800fe6a:	b096      	sub	sp, #88	; 0x58
 800fe6c:	4615      	mov	r5, r2
 800fe6e:	461e      	mov	r6, r3
 800fe70:	da0d      	bge.n	800fe8e <__swhatbuf_r+0x2e>
 800fe72:	89a3      	ldrh	r3, [r4, #12]
 800fe74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fe78:	f04f 0100 	mov.w	r1, #0
 800fe7c:	bf0c      	ite	eq
 800fe7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fe82:	2340      	movne	r3, #64	; 0x40
 800fe84:	2000      	movs	r0, #0
 800fe86:	6031      	str	r1, [r6, #0]
 800fe88:	602b      	str	r3, [r5, #0]
 800fe8a:	b016      	add	sp, #88	; 0x58
 800fe8c:	bd70      	pop	{r4, r5, r6, pc}
 800fe8e:	466a      	mov	r2, sp
 800fe90:	f000 f862 	bl	800ff58 <_fstat_r>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	dbec      	blt.n	800fe72 <__swhatbuf_r+0x12>
 800fe98:	9901      	ldr	r1, [sp, #4]
 800fe9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fe9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fea2:	4259      	negs	r1, r3
 800fea4:	4159      	adcs	r1, r3
 800fea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feaa:	e7eb      	b.n	800fe84 <__swhatbuf_r+0x24>

0800feac <__smakebuf_r>:
 800feac:	898b      	ldrh	r3, [r1, #12]
 800feae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800feb0:	079d      	lsls	r5, r3, #30
 800feb2:	4606      	mov	r6, r0
 800feb4:	460c      	mov	r4, r1
 800feb6:	d507      	bpl.n	800fec8 <__smakebuf_r+0x1c>
 800feb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800febc:	6023      	str	r3, [r4, #0]
 800febe:	6123      	str	r3, [r4, #16]
 800fec0:	2301      	movs	r3, #1
 800fec2:	6163      	str	r3, [r4, #20]
 800fec4:	b002      	add	sp, #8
 800fec6:	bd70      	pop	{r4, r5, r6, pc}
 800fec8:	ab01      	add	r3, sp, #4
 800feca:	466a      	mov	r2, sp
 800fecc:	f7ff ffc8 	bl	800fe60 <__swhatbuf_r>
 800fed0:	9900      	ldr	r1, [sp, #0]
 800fed2:	4605      	mov	r5, r0
 800fed4:	4630      	mov	r0, r6
 800fed6:	f7ff f871 	bl	800efbc <_malloc_r>
 800feda:	b948      	cbnz	r0, 800fef0 <__smakebuf_r+0x44>
 800fedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fee0:	059a      	lsls	r2, r3, #22
 800fee2:	d4ef      	bmi.n	800fec4 <__smakebuf_r+0x18>
 800fee4:	f023 0303 	bic.w	r3, r3, #3
 800fee8:	f043 0302 	orr.w	r3, r3, #2
 800feec:	81a3      	strh	r3, [r4, #12]
 800feee:	e7e3      	b.n	800feb8 <__smakebuf_r+0xc>
 800fef0:	89a3      	ldrh	r3, [r4, #12]
 800fef2:	6020      	str	r0, [r4, #0]
 800fef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fef8:	81a3      	strh	r3, [r4, #12]
 800fefa:	9b00      	ldr	r3, [sp, #0]
 800fefc:	6163      	str	r3, [r4, #20]
 800fefe:	9b01      	ldr	r3, [sp, #4]
 800ff00:	6120      	str	r0, [r4, #16]
 800ff02:	b15b      	cbz	r3, 800ff1c <__smakebuf_r+0x70>
 800ff04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f000 f837 	bl	800ff7c <_isatty_r>
 800ff0e:	b128      	cbz	r0, 800ff1c <__smakebuf_r+0x70>
 800ff10:	89a3      	ldrh	r3, [r4, #12]
 800ff12:	f023 0303 	bic.w	r3, r3, #3
 800ff16:	f043 0301 	orr.w	r3, r3, #1
 800ff1a:	81a3      	strh	r3, [r4, #12]
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	431d      	orrs	r5, r3
 800ff20:	81a5      	strh	r5, [r4, #12]
 800ff22:	e7cf      	b.n	800fec4 <__smakebuf_r+0x18>

0800ff24 <memmove>:
 800ff24:	4288      	cmp	r0, r1
 800ff26:	b510      	push	{r4, lr}
 800ff28:	eb01 0402 	add.w	r4, r1, r2
 800ff2c:	d902      	bls.n	800ff34 <memmove+0x10>
 800ff2e:	4284      	cmp	r4, r0
 800ff30:	4623      	mov	r3, r4
 800ff32:	d807      	bhi.n	800ff44 <memmove+0x20>
 800ff34:	1e43      	subs	r3, r0, #1
 800ff36:	42a1      	cmp	r1, r4
 800ff38:	d008      	beq.n	800ff4c <memmove+0x28>
 800ff3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff42:	e7f8      	b.n	800ff36 <memmove+0x12>
 800ff44:	4402      	add	r2, r0
 800ff46:	4601      	mov	r1, r0
 800ff48:	428a      	cmp	r2, r1
 800ff4a:	d100      	bne.n	800ff4e <memmove+0x2a>
 800ff4c:	bd10      	pop	{r4, pc}
 800ff4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff56:	e7f7      	b.n	800ff48 <memmove+0x24>

0800ff58 <_fstat_r>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4d07      	ldr	r5, [pc, #28]	; (800ff78 <_fstat_r+0x20>)
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	4604      	mov	r4, r0
 800ff60:	4608      	mov	r0, r1
 800ff62:	4611      	mov	r1, r2
 800ff64:	602b      	str	r3, [r5, #0]
 800ff66:	f7f2 feb2 	bl	8002cce <_fstat>
 800ff6a:	1c43      	adds	r3, r0, #1
 800ff6c:	d102      	bne.n	800ff74 <_fstat_r+0x1c>
 800ff6e:	682b      	ldr	r3, [r5, #0]
 800ff70:	b103      	cbz	r3, 800ff74 <_fstat_r+0x1c>
 800ff72:	6023      	str	r3, [r4, #0]
 800ff74:	bd38      	pop	{r3, r4, r5, pc}
 800ff76:	bf00      	nop
 800ff78:	200098b8 	.word	0x200098b8

0800ff7c <_isatty_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d06      	ldr	r5, [pc, #24]	; (800ff98 <_isatty_r+0x1c>)
 800ff80:	2300      	movs	r3, #0
 800ff82:	4604      	mov	r4, r0
 800ff84:	4608      	mov	r0, r1
 800ff86:	602b      	str	r3, [r5, #0]
 800ff88:	f7f2 feb1 	bl	8002cee <_isatty>
 800ff8c:	1c43      	adds	r3, r0, #1
 800ff8e:	d102      	bne.n	800ff96 <_isatty_r+0x1a>
 800ff90:	682b      	ldr	r3, [r5, #0]
 800ff92:	b103      	cbz	r3, 800ff96 <_isatty_r+0x1a>
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	200098b8 	.word	0x200098b8

0800ff9c <_sbrk_r>:
 800ff9c:	b538      	push	{r3, r4, r5, lr}
 800ff9e:	4d06      	ldr	r5, [pc, #24]	; (800ffb8 <_sbrk_r+0x1c>)
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	4608      	mov	r0, r1
 800ffa6:	602b      	str	r3, [r5, #0]
 800ffa8:	f7f2 feba 	bl	8002d20 <_sbrk>
 800ffac:	1c43      	adds	r3, r0, #1
 800ffae:	d102      	bne.n	800ffb6 <_sbrk_r+0x1a>
 800ffb0:	682b      	ldr	r3, [r5, #0]
 800ffb2:	b103      	cbz	r3, 800ffb6 <_sbrk_r+0x1a>
 800ffb4:	6023      	str	r3, [r4, #0]
 800ffb6:	bd38      	pop	{r3, r4, r5, pc}
 800ffb8:	200098b8 	.word	0x200098b8

0800ffbc <__assert_func>:
 800ffbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffbe:	4614      	mov	r4, r2
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	4b09      	ldr	r3, [pc, #36]	; (800ffe8 <__assert_func+0x2c>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	68d8      	ldr	r0, [r3, #12]
 800ffca:	b14c      	cbz	r4, 800ffe0 <__assert_func+0x24>
 800ffcc:	4b07      	ldr	r3, [pc, #28]	; (800ffec <__assert_func+0x30>)
 800ffce:	9100      	str	r1, [sp, #0]
 800ffd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ffd4:	4906      	ldr	r1, [pc, #24]	; (800fff0 <__assert_func+0x34>)
 800ffd6:	462b      	mov	r3, r5
 800ffd8:	f000 f872 	bl	80100c0 <fiprintf>
 800ffdc:	f000 f882 	bl	80100e4 <abort>
 800ffe0:	4b04      	ldr	r3, [pc, #16]	; (800fff4 <__assert_func+0x38>)
 800ffe2:	461c      	mov	r4, r3
 800ffe4:	e7f3      	b.n	800ffce <__assert_func+0x12>
 800ffe6:	bf00      	nop
 800ffe8:	20000088 	.word	0x20000088
 800ffec:	08010c9f 	.word	0x08010c9f
 800fff0:	08010cac 	.word	0x08010cac
 800fff4:	08010cda 	.word	0x08010cda

0800fff8 <_calloc_r>:
 800fff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fffa:	fba1 2402 	umull	r2, r4, r1, r2
 800fffe:	b94c      	cbnz	r4, 8010014 <_calloc_r+0x1c>
 8010000:	4611      	mov	r1, r2
 8010002:	9201      	str	r2, [sp, #4]
 8010004:	f7fe ffda 	bl	800efbc <_malloc_r>
 8010008:	9a01      	ldr	r2, [sp, #4]
 801000a:	4605      	mov	r5, r0
 801000c:	b930      	cbnz	r0, 801001c <_calloc_r+0x24>
 801000e:	4628      	mov	r0, r5
 8010010:	b003      	add	sp, #12
 8010012:	bd30      	pop	{r4, r5, pc}
 8010014:	220c      	movs	r2, #12
 8010016:	6002      	str	r2, [r0, #0]
 8010018:	2500      	movs	r5, #0
 801001a:	e7f8      	b.n	801000e <_calloc_r+0x16>
 801001c:	4621      	mov	r1, r4
 801001e:	f7fd ffe9 	bl	800dff4 <memset>
 8010022:	e7f4      	b.n	801000e <_calloc_r+0x16>

08010024 <__ascii_mbtowc>:
 8010024:	b082      	sub	sp, #8
 8010026:	b901      	cbnz	r1, 801002a <__ascii_mbtowc+0x6>
 8010028:	a901      	add	r1, sp, #4
 801002a:	b142      	cbz	r2, 801003e <__ascii_mbtowc+0x1a>
 801002c:	b14b      	cbz	r3, 8010042 <__ascii_mbtowc+0x1e>
 801002e:	7813      	ldrb	r3, [r2, #0]
 8010030:	600b      	str	r3, [r1, #0]
 8010032:	7812      	ldrb	r2, [r2, #0]
 8010034:	1e10      	subs	r0, r2, #0
 8010036:	bf18      	it	ne
 8010038:	2001      	movne	r0, #1
 801003a:	b002      	add	sp, #8
 801003c:	4770      	bx	lr
 801003e:	4610      	mov	r0, r2
 8010040:	e7fb      	b.n	801003a <__ascii_mbtowc+0x16>
 8010042:	f06f 0001 	mvn.w	r0, #1
 8010046:	e7f8      	b.n	801003a <__ascii_mbtowc+0x16>

08010048 <_realloc_r>:
 8010048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801004c:	4680      	mov	r8, r0
 801004e:	4614      	mov	r4, r2
 8010050:	460e      	mov	r6, r1
 8010052:	b921      	cbnz	r1, 801005e <_realloc_r+0x16>
 8010054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010058:	4611      	mov	r1, r2
 801005a:	f7fe bfaf 	b.w	800efbc <_malloc_r>
 801005e:	b92a      	cbnz	r2, 801006c <_realloc_r+0x24>
 8010060:	f7fe ff38 	bl	800eed4 <_free_r>
 8010064:	4625      	mov	r5, r4
 8010066:	4628      	mov	r0, r5
 8010068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801006c:	f000 f841 	bl	80100f2 <_malloc_usable_size_r>
 8010070:	4284      	cmp	r4, r0
 8010072:	4607      	mov	r7, r0
 8010074:	d802      	bhi.n	801007c <_realloc_r+0x34>
 8010076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801007a:	d812      	bhi.n	80100a2 <_realloc_r+0x5a>
 801007c:	4621      	mov	r1, r4
 801007e:	4640      	mov	r0, r8
 8010080:	f7fe ff9c 	bl	800efbc <_malloc_r>
 8010084:	4605      	mov	r5, r0
 8010086:	2800      	cmp	r0, #0
 8010088:	d0ed      	beq.n	8010066 <_realloc_r+0x1e>
 801008a:	42bc      	cmp	r4, r7
 801008c:	4622      	mov	r2, r4
 801008e:	4631      	mov	r1, r6
 8010090:	bf28      	it	cs
 8010092:	463a      	movcs	r2, r7
 8010094:	f7fe f896 	bl	800e1c4 <memcpy>
 8010098:	4631      	mov	r1, r6
 801009a:	4640      	mov	r0, r8
 801009c:	f7fe ff1a 	bl	800eed4 <_free_r>
 80100a0:	e7e1      	b.n	8010066 <_realloc_r+0x1e>
 80100a2:	4635      	mov	r5, r6
 80100a4:	e7df      	b.n	8010066 <_realloc_r+0x1e>

080100a6 <__ascii_wctomb>:
 80100a6:	b149      	cbz	r1, 80100bc <__ascii_wctomb+0x16>
 80100a8:	2aff      	cmp	r2, #255	; 0xff
 80100aa:	bf85      	ittet	hi
 80100ac:	238a      	movhi	r3, #138	; 0x8a
 80100ae:	6003      	strhi	r3, [r0, #0]
 80100b0:	700a      	strbls	r2, [r1, #0]
 80100b2:	f04f 30ff 	movhi.w	r0, #4294967295
 80100b6:	bf98      	it	ls
 80100b8:	2001      	movls	r0, #1
 80100ba:	4770      	bx	lr
 80100bc:	4608      	mov	r0, r1
 80100be:	4770      	bx	lr

080100c0 <fiprintf>:
 80100c0:	b40e      	push	{r1, r2, r3}
 80100c2:	b503      	push	{r0, r1, lr}
 80100c4:	4601      	mov	r1, r0
 80100c6:	ab03      	add	r3, sp, #12
 80100c8:	4805      	ldr	r0, [pc, #20]	; (80100e0 <fiprintf+0x20>)
 80100ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ce:	6800      	ldr	r0, [r0, #0]
 80100d0:	9301      	str	r3, [sp, #4]
 80100d2:	f7ff fcfd 	bl	800fad0 <_vfiprintf_r>
 80100d6:	b002      	add	sp, #8
 80100d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80100dc:	b003      	add	sp, #12
 80100de:	4770      	bx	lr
 80100e0:	20000088 	.word	0x20000088

080100e4 <abort>:
 80100e4:	b508      	push	{r3, lr}
 80100e6:	2006      	movs	r0, #6
 80100e8:	f000 f834 	bl	8010154 <raise>
 80100ec:	2001      	movs	r0, #1
 80100ee:	f7f2 fd9f 	bl	8002c30 <_exit>

080100f2 <_malloc_usable_size_r>:
 80100f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100f6:	1f18      	subs	r0, r3, #4
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	bfbc      	itt	lt
 80100fc:	580b      	ldrlt	r3, [r1, r0]
 80100fe:	18c0      	addlt	r0, r0, r3
 8010100:	4770      	bx	lr

08010102 <_raise_r>:
 8010102:	291f      	cmp	r1, #31
 8010104:	b538      	push	{r3, r4, r5, lr}
 8010106:	4604      	mov	r4, r0
 8010108:	460d      	mov	r5, r1
 801010a:	d904      	bls.n	8010116 <_raise_r+0x14>
 801010c:	2316      	movs	r3, #22
 801010e:	6003      	str	r3, [r0, #0]
 8010110:	f04f 30ff 	mov.w	r0, #4294967295
 8010114:	bd38      	pop	{r3, r4, r5, pc}
 8010116:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010118:	b112      	cbz	r2, 8010120 <_raise_r+0x1e>
 801011a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801011e:	b94b      	cbnz	r3, 8010134 <_raise_r+0x32>
 8010120:	4620      	mov	r0, r4
 8010122:	f000 f831 	bl	8010188 <_getpid_r>
 8010126:	462a      	mov	r2, r5
 8010128:	4601      	mov	r1, r0
 801012a:	4620      	mov	r0, r4
 801012c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010130:	f000 b818 	b.w	8010164 <_kill_r>
 8010134:	2b01      	cmp	r3, #1
 8010136:	d00a      	beq.n	801014e <_raise_r+0x4c>
 8010138:	1c59      	adds	r1, r3, #1
 801013a:	d103      	bne.n	8010144 <_raise_r+0x42>
 801013c:	2316      	movs	r3, #22
 801013e:	6003      	str	r3, [r0, #0]
 8010140:	2001      	movs	r0, #1
 8010142:	e7e7      	b.n	8010114 <_raise_r+0x12>
 8010144:	2400      	movs	r4, #0
 8010146:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801014a:	4628      	mov	r0, r5
 801014c:	4798      	blx	r3
 801014e:	2000      	movs	r0, #0
 8010150:	e7e0      	b.n	8010114 <_raise_r+0x12>
	...

08010154 <raise>:
 8010154:	4b02      	ldr	r3, [pc, #8]	; (8010160 <raise+0xc>)
 8010156:	4601      	mov	r1, r0
 8010158:	6818      	ldr	r0, [r3, #0]
 801015a:	f7ff bfd2 	b.w	8010102 <_raise_r>
 801015e:	bf00      	nop
 8010160:	20000088 	.word	0x20000088

08010164 <_kill_r>:
 8010164:	b538      	push	{r3, r4, r5, lr}
 8010166:	4d07      	ldr	r5, [pc, #28]	; (8010184 <_kill_r+0x20>)
 8010168:	2300      	movs	r3, #0
 801016a:	4604      	mov	r4, r0
 801016c:	4608      	mov	r0, r1
 801016e:	4611      	mov	r1, r2
 8010170:	602b      	str	r3, [r5, #0]
 8010172:	f7f2 fd4d 	bl	8002c10 <_kill>
 8010176:	1c43      	adds	r3, r0, #1
 8010178:	d102      	bne.n	8010180 <_kill_r+0x1c>
 801017a:	682b      	ldr	r3, [r5, #0]
 801017c:	b103      	cbz	r3, 8010180 <_kill_r+0x1c>
 801017e:	6023      	str	r3, [r4, #0]
 8010180:	bd38      	pop	{r3, r4, r5, pc}
 8010182:	bf00      	nop
 8010184:	200098b8 	.word	0x200098b8

08010188 <_getpid_r>:
 8010188:	f7f2 bd3a 	b.w	8002c00 <_getpid>

0801018c <_init>:
 801018c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018e:	bf00      	nop
 8010190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010192:	bc08      	pop	{r3}
 8010194:	469e      	mov	lr, r3
 8010196:	4770      	bx	lr

08010198 <_fini>:
 8010198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019a:	bf00      	nop
 801019c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801019e:	bc08      	pop	{r3}
 80101a0:	469e      	mov	lr, r3
 80101a2:	4770      	bx	lr
