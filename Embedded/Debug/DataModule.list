
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011140  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  08011310  08011310  00021310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e4c  08011e4c  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08011e4c  08011e4c  00021e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e54  08011e54  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e54  08011e54  00021e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011e58  08011e58  00021e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08011e5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009dfc  20000210  0801206c  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a00c  0801206c  0003a00c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024f96  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ff0  00000000  00000000  00055219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fe0  00000000  00000000  0005b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018ba  00000000  00000000  0005d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b4f3  00000000  00000000  0005eaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dc94  00000000  00000000  00089f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef3a2  00000000  00000000  000b7c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009498  00000000  00000000  001a6fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080112f8 	.word	0x080112f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	080112f8 	.word	0x080112f8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <setPath>:
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char *dir, char *frontSensor, char *rearSensor,
		char *frontPressureSensor, char *rearPressureSensor, uint8_t path)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
	sprintf(dir, "Data%d", path);
 8000f12:	7f3b      	ldrb	r3, [r7, #28]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4910      	ldr	r1, [pc, #64]	; (8000f58 <setPath+0x54>)
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00e f829 	bl	800ef70 <siprintf>
	sprintf(frontSensor, "Data%d/FRONT%d.txt", path, path);
 8000f1e:	7f3a      	ldrb	r2, [r7, #28]
 8000f20:	7f3b      	ldrb	r3, [r7, #28]
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <setPath+0x58>)
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f00e f823 	bl	800ef70 <siprintf>
	sprintf(rearSensor, "Data%d/Rear%d.txt", path, path);
 8000f2a:	7f3a      	ldrb	r2, [r7, #28]
 8000f2c:	7f3b      	ldrb	r3, [r7, #28]
 8000f2e:	490c      	ldr	r1, [pc, #48]	; (8000f60 <setPath+0x5c>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f00e f81d 	bl	800ef70 <siprintf>
	sprintf(frontPressureSensor, "Data%d/F_PSI%d.txt", path, path);
 8000f36:	7f3a      	ldrb	r2, [r7, #28]
 8000f38:	7f3b      	ldrb	r3, [r7, #28]
 8000f3a:	490a      	ldr	r1, [pc, #40]	; (8000f64 <setPath+0x60>)
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f00e f817 	bl	800ef70 <siprintf>
	sprintf(rearPressureSensor, "Data%d/R_PSI%d.txt", path, path);
 8000f42:	7f3a      	ldrb	r2, [r7, #28]
 8000f44:	7f3b      	ldrb	r3, [r7, #28]
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <setPath+0x64>)
 8000f48:	69b8      	ldr	r0, [r7, #24]
 8000f4a:	f00e f811 	bl	800ef70 <siprintf>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08011310 	.word	0x08011310
 8000f5c:	08011318 	.word	0x08011318
 8000f60:	0801132c 	.word	0x0801132c
 8000f64:	08011340 	.word	0x08011340
 8000f68:	08011354 	.word	0x08011354

08000f6c <createNewFile>:
void createNewFile(char *dir, char *frontSensor, char *rearSensor,
		char *frontPressureSensor, char *rearPressureSensor, uint8_t *pathPtr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
	uint8_t path = *pathPtr;
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <createNewFile+0x5c>)
 8000f82:	f000 f839 	bl	8000ff8 <Mount_SD>
	Format_SD(path);
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f87b 	bl	8001084 <Format_SD>
	Create_Dir(dir);
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 fa6a 	bl	8001468 <Create_Dir>
	Create_File(frontSensor);
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	f000 f911 	bl	80011bc <Create_File>
	Create_File(rearSensor);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f90e 	bl	80011bc <Create_File>
	Create_File(frontPressureSensor);
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f000 f90b 	bl	80011bc <Create_File>
	Create_File(rearPressureSensor);
 8000fa6:	6a38      	ldr	r0, [r7, #32]
 8000fa8:	f000 f908 	bl	80011bc <Create_File>
	Unmount_SD("/");
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <createNewFile+0x5c>)
 8000fae:	f000 f847 	bl	8001040 <Unmount_SD>
	(*pathPtr)++;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	08011368 	.word	0x08011368

08000fcc <Send_Uart>:

void Send_Uart(char *string)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t*) string, strlen(string), HAL_MAX_DELAY);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff f97b 	bl	80002d0 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <Send_Uart+0x28>)
 8000fe6:	f007 fb98 	bl	800871a <HAL_UART_Transmit>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200060a8 	.word	0x200060a8

08000ff8 <Mount_SD>:

void Mount_SD(const TCHAR *path)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <Mount_SD+0x38>)
 8001006:	f009 fdcf 	bl	800aba8 <f_mount>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <Mount_SD+0x3c>)
 8001010:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <Mount_SD+0x3c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <Mount_SD+0x2a>
		Send_Uart("ERROR!!! in mounting SD CARD...\n\n");
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <Mount_SD+0x40>)
 800101c:	f7ff ffd6 	bl	8000fcc <Send_Uart>
	else
		Send_Uart("SD CARD mounted successfully...\n");
}
 8001020:	e002      	b.n	8001028 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <Mount_SD+0x44>)
 8001024:	f7ff ffd2 	bl	8000fcc <Send_Uart>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000022c 	.word	0x2000022c
 8001034:	200006a8 	.word	0x200006a8
 8001038:	0801136c 	.word	0x0801136c
 800103c:	08011390 	.word	0x08011390

08001040 <Unmount_SD>:

void Unmount_SD(const TCHAR *path)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2000      	movs	r0, #0
 800104e:	f009 fdab 	bl	800aba8 <f_mount>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <Unmount_SD+0x38>)
 8001058:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <Unmount_SD+0x38>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <Unmount_SD+0x2a>
		Send_Uart("SD CARD UNMOUNTED successfully...\n\n\n");
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <Unmount_SD+0x3c>)
 8001064:	f7ff ffb2 	bl	8000fcc <Send_Uart>
	else
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8001068:	e002      	b.n	8001070 <Unmount_SD+0x30>
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <Unmount_SD+0x40>)
 800106c:	f7ff ffae 	bl	8000fcc <Send_Uart>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200006a8 	.word	0x200006a8
 800107c:	080113b4 	.word	0x080113b4
 8001080:	080113dc 	.word	0x080113dc

08001084 <Format_SD>:
	return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	; 0x58
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	DIR dir;
	FILINFO fno;
	char *path = pvPortMalloc(20 * sizeof(char));
 800108e:	2014      	movs	r0, #20
 8001090:	f00d f812 	bl	800e0b8 <pvPortMalloc>
 8001094:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(path, "/Data%d", dirNumber);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	461a      	mov	r2, r3
 800109a:	4943      	ldr	r1, [pc, #268]	; (80011a8 <Format_SD+0x124>)
 800109c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800109e:	f00d ff67 	bl	800ef70 <siprintf>
	fresult = f_opendir(&dir, path);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00a fa02 	bl	800b4b2 <f_opendir>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <Format_SD+0x128>)
 80010b4:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <Format_SD+0x128>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d154      	bne.n	8001168 <Format_SD+0xe4>
	{
		while (1)
		{
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00a fa96 	bl	800b5fa <f_readdir>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <Format_SD+0x128>)
 80010d4:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0)
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <Format_SD+0x128>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d13f      	bne.n	800115e <Format_SD+0xda>
 80010de:	7d7b      	ldrb	r3, [r7, #21]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d03c      	beq.n	800115e <Format_SD+0xda>
				break; /* Break on error or end of dir */
			if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	3309      	adds	r3, #9
 80010ea:	4619      	mov	r1, r3
 80010ec:	4830      	ldr	r0, [pc, #192]	; (80011b0 <Format_SD+0x12c>)
 80010ee:	f7ff f88f 	bl	8000210 <strcmp>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02f      	beq.n	8001158 <Format_SD+0xd4>
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	3309      	adds	r3, #9
 80010fe:	4619      	mov	r1, r3
 8001100:	482c      	ldr	r0, [pc, #176]	; (80011b4 <Format_SD+0x130>)
 8001102:	f7ff f885 	bl	8000210 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d025      	beq.n	8001158 <Format_SD+0xd4>
			{
				continue;
			}

			sprintf(path, "/Data%d/%s", dirNumber, fno.fname);
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	3309      	adds	r3, #9
 8001114:	4928      	ldr	r1, [pc, #160]	; (80011b8 <Format_SD+0x134>)
 8001116:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001118:	f00d ff2a 	bl	800ef70 <siprintf>
			if (fno.fattrib & AM_DIR) /* It is a directory */
 800111c:	7d3b      	ldrb	r3, [r7, #20]
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <Format_SD+0xbc>
			{

				fresult = Format_SD(dirNumber);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffab 	bl	8001084 <Format_SD>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <Format_SD+0x128>)
 8001134:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <Format_SD+0x128>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0bf      	beq.n	80010be <Format_SD+0x3a>
					break;
 800113e:	e00e      	b.n	800115e <Format_SD+0xda>
			}
			else
			{
				fresult = f_unlink(path);
 8001140:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001142:	f00a fadd 	bl	800b700 <f_unlink>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <Format_SD+0x128>)
 800114c:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <Format_SD+0x128>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <Format_SD+0xd8>
 8001156:	e7b2      	b.n	80010be <Format_SD+0x3a>
				continue;
 8001158:	bf00      	nop
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 800115a:	e7b0      	b.n	80010be <Format_SD+0x3a>
					break;
 800115c:	bf00      	nop
			}
		}
		f_closedir(&dir);
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	4618      	mov	r0, r3
 8001164:	f00a fa1e 	bl	800b5a4 <f_closedir>
	}

	if (fresult == FR_OK)
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <Format_SD+0x128>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d111      	bne.n	8001194 <Format_SD+0x110>
	{
		memset(path, 0, 20);
 8001170:	2214      	movs	r2, #20
 8001172:	2100      	movs	r1, #0
 8001174:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001176:	f00d fff3 	bl	800f160 <memset>
		sprintf(path, "/Data%d", dirNumber);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	461a      	mov	r2, r3
 800117e:	490a      	ldr	r1, [pc, #40]	; (80011a8 <Format_SD+0x124>)
 8001180:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001182:	f00d fef5 	bl	800ef70 <siprintf>
		fresult = f_unlink(path);
 8001186:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001188:	f00a faba 	bl	800b700 <f_unlink>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <Format_SD+0x128>)
 8001192:	701a      	strb	r2, [r3, #0]
	}

	vPortFree(path);
 8001194:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001196:	f00d f85b 	bl	800e250 <vPortFree>
	return (fresult);
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <Format_SD+0x128>)
 800119c:	781b      	ldrb	r3, [r3, #0]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3758      	adds	r7, #88	; 0x58
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08011430 	.word	0x08011430
 80011ac:	200006a8 	.word	0x200006a8
 80011b0:	08011438 	.word	0x08011438
 80011b4:	0801143c 	.word	0x0801143c
 80011b8:	08011440 	.word	0x08011440

080011bc <Create_File>:
		return fresult;
	}
}

FRESULT Create_File(char *name)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 80011c4:	4940      	ldr	r1, [pc, #256]	; (80012c8 <Create_File+0x10c>)
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f00a fa5a 	bl	800b680 <f_stat>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <Create_File+0x110>)
 80011d2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80011d4:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <Create_File+0x110>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 80011dc:	2064      	movs	r0, #100	; 0x64
 80011de:	f00c ff6b 	bl	800e0b8 <pvPortMalloc>
 80011e2:	60f8      	str	r0, [r7, #12]
		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	493a      	ldr	r1, [pc, #232]	; (80012d0 <Create_File+0x114>)
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f00d fec1 	bl	800ef70 <siprintf>
				name);
		Send_Uart(buf);
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff feec 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f00d f82b 	bl	800e250 <vPortFree>
		return fresult;
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <Create_File+0x110>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e05f      	b.n	80012c0 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001200:	220b      	movs	r2, #11
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4833      	ldr	r0, [pc, #204]	; (80012d4 <Create_File+0x118>)
 8001206:	f009 fd33 	bl	800ac70 <f_open>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <Create_File+0x110>)
 8001210:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <Create_File+0x110>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d014      	beq.n	8001244 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f00c ff4c 	bl	800e0b8 <pvPortMalloc>
 8001220:	6138      	str	r0, [r7, #16]
			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult,
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <Create_File+0x110>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	492b      	ldr	r1, [pc, #172]	; (80012d8 <Create_File+0x11c>)
 800122c:	6938      	ldr	r0, [r7, #16]
 800122e:	f00d fe9f 	bl	800ef70 <siprintf>
					name);
			Send_Uart(buf);
 8001232:	6938      	ldr	r0, [r7, #16]
 8001234:	f7ff feca 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001238:	6938      	ldr	r0, [r7, #16]
 800123a:	f00d f809 	bl	800e250 <vPortFree>
			return fresult;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <Create_File+0x110>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	e03d      	b.n	80012c0 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f00c ff37 	bl	800e0b8 <pvPortMalloc>
 800124a:	61f8      	str	r0, [r7, #28]
			sprintf(buf,
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4923      	ldr	r1, [pc, #140]	; (80012dc <Create_File+0x120>)
 8001250:	69f8      	ldr	r0, [r7, #28]
 8001252:	f00d fe8d 	bl	800ef70 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			Send_Uart(buf);
 8001256:	69f8      	ldr	r0, [r7, #28]
 8001258:	f7ff feb8 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800125c:	69f8      	ldr	r0, [r7, #28]
 800125e:	f00c fff7 	bl	800e250 <vPortFree>
		}

		fresult = f_close(&fil);
 8001262:	481c      	ldr	r0, [pc, #112]	; (80012d4 <Create_File+0x118>)
 8001264:	f00a f8f6 	bl	800b454 <f_close>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <Create_File+0x110>)
 800126e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <Create_File+0x110>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d012      	beq.n	800129e <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001278:	2064      	movs	r0, #100	; 0x64
 800127a:	f00c ff1d 	bl	800e0b8 <pvPortMalloc>
 800127e:	6178      	str	r0, [r7, #20]
			sprintf(buf, "ERROR No. %d in closing file *%s*\n\n", fresult,
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <Create_File+0x110>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4915      	ldr	r1, [pc, #84]	; (80012e0 <Create_File+0x124>)
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f00d fe70 	bl	800ef70 <siprintf>
					name);
			Send_Uart(buf);
 8001290:	6978      	ldr	r0, [r7, #20]
 8001292:	f7ff fe9b 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f00c ffda 	bl	800e250 <vPortFree>
 800129c:	e00e      	b.n	80012bc <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f00c ff0a 	bl	800e0b8 <pvPortMalloc>
 80012a4:	61b8      	str	r0, [r7, #24]
			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	490e      	ldr	r1, [pc, #56]	; (80012e4 <Create_File+0x128>)
 80012aa:	69b8      	ldr	r0, [r7, #24]
 80012ac:	f00d fe60 	bl	800ef70 <siprintf>
			Send_Uart(buf);
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f7ff fe8b 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80012b6:	69b8      	ldr	r0, [r7, #24]
 80012b8:	f00c ffca 	bl	800e250 <vPortFree>
		}
	}
	return fresult;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <Create_File+0x110>)
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000690 	.word	0x20000690
 80012cc:	200006a8 	.word	0x200006a8
 80012d0:	080115c4 	.word	0x080115c4
 80012d4:	20000460 	.word	0x20000460
 80012d8:	080115fc 	.word	0x080115fc
 80012dc:	08011624 	.word	0x08011624
 80012e0:	08011664 	.word	0x08011664
 80012e4:	080115a4 	.word	0x080115a4

080012e8 <Update_File>:

FRESULT Update_File(char *name, char *data)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 80012f2:	4953      	ldr	r1, [pc, #332]	; (8001440 <Update_File+0x158>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f00a f9c3 	bl	800b680 <f_stat>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <Update_File+0x15c>)
 8001300:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001302:	4b50      	ldr	r3, [pc, #320]	; (8001444 <Update_File+0x15c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d011      	beq.n	800132e <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 800130a:	2064      	movs	r0, #100	; 0x64
 800130c:	f00c fed4 	bl	800e0b8 <pvPortMalloc>
 8001310:	60b8      	str	r0, [r7, #8]
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	494c      	ldr	r1, [pc, #304]	; (8001448 <Update_File+0x160>)
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f00d fe2a 	bl	800ef70 <siprintf>
		Send_Uart(buf);
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f7ff fe55 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f00c ff94 	bl	800e250 <vPortFree>
		return fresult;
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <Update_File+0x15c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	e083      	b.n	8001436 <Update_File+0x14e>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800132e:	2232      	movs	r2, #50	; 0x32
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4846      	ldr	r0, [pc, #280]	; (800144c <Update_File+0x164>)
 8001334:	f009 fc9c 	bl	800ac70 <f_open>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b41      	ldr	r3, [pc, #260]	; (8001444 <Update_File+0x15c>)
 800133e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001340:	4b40      	ldr	r3, [pc, #256]	; (8001444 <Update_File+0x15c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d014      	beq.n	8001372 <Update_File+0x8a>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f00c feb5 	bl	800e0b8 <pvPortMalloc>
 800134e:	60f8      	str	r0, [r7, #12]
			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult,
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <Update_File+0x15c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	493d      	ldr	r1, [pc, #244]	; (8001450 <Update_File+0x168>)
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f00d fe08 	bl	800ef70 <siprintf>
					name);
			Send_Uart(buf);
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff fe33 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f00c ff72 	bl	800e250 <vPortFree>
			return fresult;
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <Update_File+0x15c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	e061      	b.n	8001436 <Update_File+0x14e>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f7fe ffac 	bl	80002d0 <strlen>
 8001378:	4602      	mov	r2, r0
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <Update_File+0x16c>)
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	4833      	ldr	r0, [pc, #204]	; (800144c <Update_File+0x164>)
 8001380:	f009 fe3b 	bl	800affa <f_write>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <Update_File+0x15c>)
 800138a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <Update_File+0x15c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <Update_File+0xd2>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001394:	2064      	movs	r0, #100	; 0x64
 8001396:	f00c fe8f 	bl	800e0b8 <pvPortMalloc>
 800139a:	61b8      	str	r0, [r7, #24]
			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult,
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <Update_File+0x15c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	492c      	ldr	r1, [pc, #176]	; (8001458 <Update_File+0x170>)
 80013a6:	69b8      	ldr	r0, [r7, #24]
 80013a8:	f00d fde2 	bl	800ef70 <siprintf>
					name);
			Send_Uart(buf);
 80013ac:	69b8      	ldr	r0, [r7, #24]
 80013ae:	f7ff fe0d 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80013b2:	69b8      	ldr	r0, [r7, #24]
 80013b4:	f00c ff4c 	bl	800e250 <vPortFree>
 80013b8:	e00e      	b.n	80013d8 <Update_File+0xf0>
		}

		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 80013ba:	2064      	movs	r0, #100	; 0x64
 80013bc:	f00c fe7c 	bl	800e0b8 <pvPortMalloc>
 80013c0:	61f8      	str	r0, [r7, #28]
			sprintf(buf, "*%s* UPDATED successfully\n", name);
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4925      	ldr	r1, [pc, #148]	; (800145c <Update_File+0x174>)
 80013c6:	69f8      	ldr	r0, [r7, #28]
 80013c8:	f00d fdd2 	bl	800ef70 <siprintf>
			Send_Uart(buf);
 80013cc:	69f8      	ldr	r0, [r7, #28]
 80013ce:	f7ff fdfd 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80013d2:	69f8      	ldr	r0, [r7, #28]
 80013d4:	f00c ff3c 	bl	800e250 <vPortFree>
		}

		/* Close file */
		fresult = f_close(&fil);
 80013d8:	481c      	ldr	r0, [pc, #112]	; (800144c <Update_File+0x164>)
 80013da:	f00a f83b 	bl	800b454 <f_close>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <Update_File+0x15c>)
 80013e4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <Update_File+0x15c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d012      	beq.n	8001414 <Update_File+0x12c>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 80013ee:	2064      	movs	r0, #100	; 0x64
 80013f0:	f00c fe62 	bl	800e0b8 <pvPortMalloc>
 80013f4:	6138      	str	r0, [r7, #16]
			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult,
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <Update_File+0x15c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4918      	ldr	r1, [pc, #96]	; (8001460 <Update_File+0x178>)
 8001400:	6938      	ldr	r0, [r7, #16]
 8001402:	f00d fdb5 	bl	800ef70 <siprintf>
					name);
			Send_Uart(buf);
 8001406:	6938      	ldr	r0, [r7, #16]
 8001408:	f7ff fde0 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800140c:	6938      	ldr	r0, [r7, #16]
 800140e:	f00c ff1f 	bl	800e250 <vPortFree>
 8001412:	e00e      	b.n	8001432 <Update_File+0x14a>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001414:	2064      	movs	r0, #100	; 0x64
 8001416:	f00c fe4f 	bl	800e0b8 <pvPortMalloc>
 800141a:	6178      	str	r0, [r7, #20]
			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4911      	ldr	r1, [pc, #68]	; (8001464 <Update_File+0x17c>)
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f00d fda5 	bl	800ef70 <siprintf>
			Send_Uart(buf);
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff fdd0 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800142c:	6978      	ldr	r0, [r7, #20]
 800142e:	f00c ff0f 	bl	800e250 <vPortFree>
		}
	}
	return fresult;
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <Update_File+0x15c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000690 	.word	0x20000690
 8001444:	200006a8 	.word	0x200006a8
 8001448:	0801144c 	.word	0x0801144c
 800144c:	20000460 	.word	0x20000460
 8001450:	0801146c 	.word	0x0801146c
 8001454:	200006ac 	.word	0x200006ac
 8001458:	08011688 	.word	0x08011688
 800145c:	080116b0 	.word	0x080116b0
 8001460:	0801157c 	.word	0x0801157c
 8001464:	080115a4 	.word	0x080115a4

08001468 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir(char *name)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f00a f9f7 	bl	800b864 <f_mkdir>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <Create_Dir+0x70>)
 800147c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <Create_Dir+0x70>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10f      	bne.n	80014a6 <Create_Dir+0x3e>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 8001486:	2064      	movs	r0, #100	; 0x64
 8001488:	f00c fe16 	bl	800e0b8 <pvPortMalloc>
 800148c:	60b8      	str	r0, [r7, #8]
		sprintf(buf, "*%s* has been created successfully\n", name);
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4912      	ldr	r1, [pc, #72]	; (80014dc <Create_Dir+0x74>)
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f00d fd6c 	bl	800ef70 <siprintf>
		Send_Uart(buf);
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f7ff fd97 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f00c fed6 	bl	800e250 <vPortFree>
 80014a4:	e011      	b.n	80014ca <Create_Dir+0x62>
	}
	else
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f00c fe06 	bl	800e0b8 <pvPortMalloc>
 80014ac:	60f8      	str	r0, [r7, #12]
		sprintf(buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <Create_Dir+0x70>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	490a      	ldr	r1, [pc, #40]	; (80014e0 <Create_Dir+0x78>)
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f00d fd59 	bl	800ef70 <siprintf>
				name);
		Send_Uart(buf);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fd84 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f00c fec3 	bl	800e250 <vPortFree>
	}
	return fresult;
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <Create_Dir+0x70>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200006a8 	.word	0x200006a8
 80014dc:	08011710 	.word	0x08011710
 80014e0:	08011734 	.word	0x08011734

080014e4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80014f8:	4a38      	ldr	r2, [pc, #224]	; (80015dc <MX_ADC2_Init+0xf8>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014fc:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <MX_ADC2_Init+0xf4>)
 800150a:	2201      	movs	r2, #1
 800150c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001510:	2200      	movs	r2, #0
 8001512:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <MX_ADC2_Init+0xf4>)
 800151e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001526:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_ADC2_Init+0xf4>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001534:	2204      	movs	r2, #4
 8001536:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <MX_ADC2_Init+0xf4>)
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001546:	4824      	ldr	r0, [pc, #144]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001548:	f002 feec 	bl	8004324 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001552:	f001 fb83 	bl	8002c5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001556:	2304      	movs	r3, #4
 8001558:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800155e:	2301      	movs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	481c      	ldr	r0, [pc, #112]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001568:	f003 f894 	bl	8004694 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001572:	f001 fb73 	bl	8002c5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001576:	2301      	movs	r3, #1
 8001578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800157a:	2302      	movs	r3, #2
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4815      	ldr	r0, [pc, #84]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001584:	f003 f886 	bl	8004694 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 800158e:	f001 fb65 	bl	8002c5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001592:	230f      	movs	r3, #15
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001596:	2303      	movs	r3, #3
 8001598:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	480e      	ldr	r0, [pc, #56]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80015a0:	f003 f878 	bl	8004694 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 80015aa:	f001 fb57 	bl	8002c5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015ae:	230e      	movs	r3, #14
 80015b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80015b2:	2304      	movs	r3, #4
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80015c0:	f003 f868 	bl	8004694 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 80015ca:	f001 fb47 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200006b0 	.word	0x200006b0
 80015dc:	40012100 	.word	0x40012100

080015e0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <MX_ADC3_Init+0x98>)
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <MX_ADC3_Init+0x9c>)
 80015f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_ADC3_Init+0x98>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_ADC3_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_ADC3_Init+0x98>)
 8001606:	2201      	movs	r2, #1
 8001608:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_ADC3_Init+0x98>)
 800160c:	2201      	movs	r2, #1
 800160e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_ADC3_Init+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_ADC3_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_ADC3_Init+0x98>)
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <MX_ADC3_Init+0xa0>)
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_ADC3_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_ADC3_Init+0x98>)
 800162c:	2201      	movs	r2, #1
 800162e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_ADC3_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_ADC3_Init+0x98>)
 800163a:	2201      	movs	r2, #1
 800163c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <MX_ADC3_Init+0x98>)
 8001640:	f002 fe70 	bl	8004324 <HAL_ADC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800164a:	f001 fb07 	bl	8002c5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <MX_ADC3_Init+0x98>)
 8001660:	f003 f818 	bl	8004694 <HAL_ADC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800166a:	f001 faf7 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200006f8 	.word	0x200006f8
 800167c:	40012200 	.word	0x40012200
 8001680:	0f000001 	.word	0x0f000001

08001684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	; 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a53      	ldr	r2, [pc, #332]	; (80017f0 <HAL_ADC_MspInit+0x16c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d173      	bne.n	800178e <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a43      	ldr	r2, [pc, #268]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    PA1     ------> ADC2_IN1
    PA4     ------> ADC2_IN4
    PC4     ------> ADC2_IN14
    PC5     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80016fa:	2312      	movs	r3, #18
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	483a      	ldr	r0, [pc, #232]	; (80017f8 <HAL_ADC_MspInit+0x174>)
 800170e:	f003 ff33 	bl	8005578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001712:	2330      	movs	r3, #48	; 0x30
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4835      	ldr	r0, [pc, #212]	; (80017fc <HAL_ADC_MspInit+0x178>)
 8001726:	f003 ff27 	bl	8005578 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800172c:	4a35      	ldr	r2, [pc, #212]	; (8001804 <HAL_ADC_MspInit+0x180>)
 800172e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001730:	4b33      	ldr	r3, [pc, #204]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001736:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001744:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800174e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001752:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001762:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001770:	4823      	ldr	r0, [pc, #140]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001772:	f003 fb21 	bl	8004db8 <HAL_DMA_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800177c:	f001 fa6e 	bl	8002c5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
 8001786:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800178c:	e02c      	b.n	80017e8 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_ADC_MspInit+0x184>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d127      	bne.n	80017e8 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a6:	6453      	str	r3, [r2, #68]	; 0x44
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_ADC_MspInit+0x174>)
 80017e4:	f003 fec8 	bl	8005578 <HAL_GPIO_Init>
}
 80017e8:	bf00      	nop
 80017ea:	3730      	adds	r7, #48	; 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40012100 	.word	0x40012100
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800
 8001800:	20000740 	.word	0x20000740
 8001804:	40026440 	.word	0x40026440
 8001808:	40012200 	.word	0x40012200

0800180c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_DMA_Init+0x3c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <MX_DMA_Init+0x3c>)
 800181c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_DMA_Init+0x3c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2105      	movs	r1, #5
 8001832:	203a      	movs	r0, #58	; 0x3a
 8001834:	f003 fa96 	bl	8004d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001838:	203a      	movs	r0, #58	; 0x3a
 800183a:	f003 faaf 	bl	8004d9c <HAL_NVIC_EnableIRQ>

}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <SELECT>:
static uint8_t CardType; /* SD type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0; /* Power condition Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2101      	movs	r1, #1
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <SELECT+0x14>)
 8001856:	f004 f823 	bl	80058a0 <HAL_GPIO_WritePin>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40020400 	.word	0x40020400

08001864 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2101      	movs	r1, #1
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <DESELECT+0x14>)
 800186e:	f004 f817 	bl	80058a0 <HAL_GPIO_WritePin>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40020400 	.word	0x40020400

0800187c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY)
 8001886:	bf00      	nop
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <SPI_TxByte+0x30>)
 800188a:	f005 fdf0 	bl	800746e <HAL_SPI_GetState>
 800188e:	4603      	mov	r3, r0
 8001890:	2b01      	cmp	r3, #1
 8001892:	d1f9      	bne.n	8001888 <SPI_TxByte+0xc>
		;
	HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001894:	1df9      	adds	r1, r7, #7
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	2201      	movs	r2, #1
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <SPI_TxByte+0x30>)
 800189e:	f005 fb08 	bl	8006eb2 <HAL_SPI_Transmit>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000571c 	.word	0x2000571c

080018b0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80018b6:	23ff      	movs	r3, #255	; 0xff
 80018b8:	71fb      	strb	r3, [r7, #7]
	data = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	71bb      	strb	r3, [r7, #6]

	while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY))
 80018be:	bf00      	nop
 80018c0:	4809      	ldr	r0, [pc, #36]	; (80018e8 <SPI_RxByte+0x38>)
 80018c2:	f005 fdd4 	bl	800746e <HAL_SPI_GetState>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d1f9      	bne.n	80018c0 <SPI_RxByte+0x10>
		;
	HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80018cc:	1dba      	adds	r2, r7, #6
 80018ce:	1df9      	adds	r1, r7, #7
 80018d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <SPI_RxByte+0x38>)
 80018da:	f005 fc26 	bl	800712a <HAL_SPI_TransmitReceive>

	return data;
 80018de:	79bb      	ldrb	r3, [r7, #6]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000571c 	.word	0x2000571c

080018ec <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80018f4:	f7ff ffdc 	bl	80018b0 <SPI_RxByte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	701a      	strb	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* 500ms Counter preparation*/
	Timer2 = 50;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <SD_ReadyWait+0x34>)
 8001910:	2232      	movs	r2, #50	; 0x32
 8001912:	701a      	strb	r2, [r3, #0]

	SPI_RxByte();
 8001914:	f7ff ffcc 	bl	80018b0 <SPI_RxByte>

	do
	{
		/* 0xFF SPI communication until a value is received */
		res = SPI_RxByte();
 8001918:	f7ff ffca 	bl	80018b0 <SPI_RxByte>
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d004      	beq.n	8001930 <SD_ReadyWait+0x28>
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <SD_ReadyWait+0x34>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f3      	bne.n	8001918 <SD_ReadyWait+0x10>

	return res;
 8001930:	79fb      	ldrb	r3, [r7, #7]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200057be 	.word	0x200057be

08001940 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
	uint8_t cmd_arg[6];
	uint32_t Count = 0x1FFF;
 8001946:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800194a:	617b      	str	r3, [r7, #20]

	DESELECT();
 800194c:	f7ff ff8a 	bl	8001864 <DESELECT>

	for (int i = 0; i < 10; i++)
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	e005      	b.n	8001962 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001956:	20ff      	movs	r0, #255	; 0xff
 8001958:	f7ff ff90 	bl	800187c <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	3301      	adds	r3, #1
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b09      	cmp	r3, #9
 8001966:	ddf6      	ble.n	8001956 <SD_PowerOn+0x16>
	}

	/* SPI Chips Select */
	SELECT();
 8001968:	f7ff ff70 	bl	800184c <SELECT>

	/*  GO_IDLE_STATE State transitions*/
	cmd_arg[0] = (CMD0 | 0x40);
 800196c:	2340      	movs	r3, #64	; 0x40
 800196e:	713b      	strb	r3, [r7, #4]
	cmd_arg[1] = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	717b      	strb	r3, [r7, #5]
	cmd_arg[2] = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	71bb      	strb	r3, [r7, #6]
	cmd_arg[3] = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	71fb      	strb	r3, [r7, #7]
	cmd_arg[4] = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	723b      	strb	r3, [r7, #8]
	cmd_arg[5] = 0x95;
 8001980:	2395      	movs	r3, #149	; 0x95
 8001982:	727b      	strb	r3, [r7, #9]

	/* Command transmission*/
	for (int i = 0; i < 6; i++)
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e009      	b.n	800199e <SD_PowerOn+0x5e>
	{
		SPI_TxByte(cmd_arg[i]);
 800198a:	1d3a      	adds	r2, r7, #4
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff72 	bl	800187c <SPI_TxByte>
	for (int i = 0; i < 6; i++)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	ddf2      	ble.n	800198a <SD_PowerOn+0x4a>
	}

	/* Answer waiting*/
	while ((SPI_RxByte() != 0x01) && Count)
 80019a4:	e002      	b.n	80019ac <SD_PowerOn+0x6c>
	{
		Count--;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
	while ((SPI_RxByte() != 0x01) && Count)
 80019ac:	f7ff ff80 	bl	80018b0 <SPI_RxByte>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d002      	beq.n	80019bc <SD_PowerOn+0x7c>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f4      	bne.n	80019a6 <SD_PowerOn+0x66>
	}

	DESELECT();
 80019bc:	f7ff ff52 	bl	8001864 <DESELECT>
	SPI_TxByte(0XFF);
 80019c0:	20ff      	movs	r0, #255	; 0xff
 80019c2:	f7ff ff5b 	bl	800187c <SPI_TxByte>

	PowerFlag = 1;
 80019c6:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <SD_PowerOn+0x94>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200007a1 	.word	0x200007a1

080019d8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <SD_PowerOff+0x14>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	200007a1 	.word	0x200007a1

080019f0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	/*  0=off, 1=on */
	return PowerFlag;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <SD_CheckPower+0x14>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	200007a1 	.word	0x200007a1

08001a08 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* 100ms 타이머 */
	Timer1 = 10;
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <SD_RxDataBlock+0x68>)
 8001a14:	220a      	movs	r2, #10
 8001a16:	701a      	strb	r2, [r3, #0]

	/* 응답 대기 */
	do
	{
		token = SPI_RxByte();
 8001a18:	f7ff ff4a 	bl	80018b0 <SPI_RxByte>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d104      	bne.n	8001a30 <SD_RxDataBlock+0x28>
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <SD_RxDataBlock+0x68>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f3      	bne.n	8001a18 <SD_RxDataBlock+0x10>

	/* 0xFE 이외 Token 수신 시 에러 처리 */
	if (token != 0xFE)
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2bfe      	cmp	r3, #254	; 0xfe
 8001a34:	d001      	beq.n	8001a3a <SD_RxDataBlock+0x32>
		return FALSE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e016      	b.n	8001a68 <SD_RxDataBlock+0x60>

	/* 버퍼에 데이터 수신 */
	do
	{
		SPI_RxBytePtr(buff++);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff53 	bl	80018ec <SPI_RxBytePtr>
		SPI_RxBytePtr(buff++);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff4d 	bl	80018ec <SPI_RxBytePtr>
	} while (btr -= 2);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	3b02      	subs	r3, #2
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ed      	bne.n	8001a3a <SD_RxDataBlock+0x32>

	SPI_RxByte(); /* CRC 무시 */
 8001a5e:	f7ff ff27 	bl	80018b0 <SPI_RxByte>
	SPI_RxByte();
 8001a62:	f7ff ff25 	bl	80018b0 <SPI_RxByte>

	return TRUE;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200057bd 	.word	0x200057bd

08001a74 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp, wc;
	uint8_t i = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	737b      	strb	r3, [r7, #13]

	/* SD카드 준비 대기 */
	if (SD_ReadyWait() != 0xFF)
 8001a84:	f7ff ff40 	bl	8001908 <SD_ReadyWait>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2bff      	cmp	r3, #255	; 0xff
 8001a8c:	d001      	beq.n	8001a92 <SD_TxDataBlock+0x1e>
		return FALSE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e040      	b.n	8001b14 <SD_TxDataBlock+0xa0>

	/* 토큰 전송 */
	SPI_TxByte(token);
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fef1 	bl	800187c <SPI_TxByte>

	/* 데이터 토큰인 경우 */
	if (token != 0xFD)
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	2bfd      	cmp	r3, #253	; 0xfd
 8001a9e:	d031      	beq.n	8001b04 <SD_TxDataBlock+0x90>
	{
		wc = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73bb      	strb	r3, [r7, #14]

		/* 512 바이트 데이터 전송 */
		do
		{
			SPI_TxByte(*buff++);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fee5 	bl	800187c <SPI_TxByte>
			SPI_TxByte(*buff++);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fede 	bl	800187c <SPI_TxByte>
		} while (--wc);
 8001ac0:	7bbb      	ldrb	r3, [r7, #14]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	73bb      	strb	r3, [r7, #14]
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1eb      	bne.n	8001aa4 <SD_TxDataBlock+0x30>

		SPI_RxByte(); /* CRC 무시 */
 8001acc:	f7ff fef0 	bl	80018b0 <SPI_RxByte>
		SPI_RxByte();
 8001ad0:	f7ff feee 	bl	80018b0 <SPI_RxByte>

		/* 데이트 응답 수신 */
		while (i <= 64)
 8001ad4:	e00b      	b.n	8001aee <SD_TxDataBlock+0x7a>
		{
			resp = SPI_RxByte();
 8001ad6:	f7ff feeb 	bl	80018b0 <SPI_RxByte>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]

			/* 에러 응답 처리 */
			if ((resp & 0x1F) == 0x05)
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d006      	beq.n	8001af6 <SD_TxDataBlock+0x82>
				break;

			i++;
 8001ae8:	7b7b      	ldrb	r3, [r7, #13]
 8001aea:	3301      	adds	r3, #1
 8001aec:	737b      	strb	r3, [r7, #13]
		while (i <= 64)
 8001aee:	7b7b      	ldrb	r3, [r7, #13]
 8001af0:	2b40      	cmp	r3, #64	; 0x40
 8001af2:	d9f0      	bls.n	8001ad6 <SD_TxDataBlock+0x62>
 8001af4:	e000      	b.n	8001af8 <SD_TxDataBlock+0x84>
				break;
 8001af6:	bf00      	nop
		}

		/* SPI 수신 버퍼 Clear */
		while (SPI_RxByte() == 0)
 8001af8:	bf00      	nop
 8001afa:	f7ff fed9 	bl	80018b0 <SPI_RxByte>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0fa      	beq.n	8001afa <SD_TxDataBlock+0x86>
			;
	}

	if ((resp & 0x1F) == 0x05)
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d101      	bne.n	8001b12 <SD_TxDataBlock+0x9e>
		return TRUE;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <SD_TxDataBlock+0xa0>
	else
		return FALSE;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* SD카드 대기 */
	if (SD_ReadyWait() != 0xFF)
 8001b28:	f7ff feee 	bl	8001908 <SD_ReadyWait>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2bff      	cmp	r3, #255	; 0xff
 8001b30:	d001      	beq.n	8001b36 <SD_SendCmd+0x1a>
		return 0xFF;
 8001b32:	23ff      	movs	r3, #255	; 0xff
 8001b34:	e040      	b.n	8001bb8 <SD_SendCmd+0x9c>

	/* 명령 패킷 전송 */
	SPI_TxByte(cmd); /* Command */
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe9f 	bl	800187c <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	0e1b      	lsrs	r3, r3, #24
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fe99 	bl	800187c <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fe93 	bl	800187c <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 8)); /* Argument[15..8] */
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe8d 	bl	800187c <SPI_TxByte>
	SPI_TxByte((BYTE) arg); /* Argument[7..0] */
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe88 	bl	800187c <SPI_TxByte>

	/* 명령별 CRC 준비 */
	crc = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	2b40      	cmp	r3, #64	; 0x40
 8001b74:	d101      	bne.n	8001b7a <SD_SendCmd+0x5e>
		crc = 0x95; /* CRC for CMD0(0) */
 8001b76:	2395      	movs	r3, #149	; 0x95
 8001b78:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD8)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b48      	cmp	r3, #72	; 0x48
 8001b7e:	d101      	bne.n	8001b84 <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001b80:	2387      	movs	r3, #135	; 0x87
 8001b82:	73fb      	strb	r3, [r7, #15]

	/* CRC 전송 */
	SPI_TxByte(crc);
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe78 	bl	800187c <SPI_TxByte>

	/* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
	if (cmd == CMD12)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b4c      	cmp	r3, #76	; 0x4c
 8001b90:	d101      	bne.n	8001b96 <SD_SendCmd+0x7a>
		SPI_RxByte();
 8001b92:	f7ff fe8d 	bl	80018b0 <SPI_RxByte>

	/* 10회 내에 정상 데이터를 수신한다. */
	uint8_t n = 10;
 8001b96:	230a      	movs	r3, #10
 8001b98:	73bb      	strb	r3, [r7, #14]
	do
	{
		res = SPI_RxByte();
 8001b9a:	f7ff fe89 	bl	80018b0 <SPI_RxByte>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001ba2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da05      	bge.n	8001bb6 <SD_SendCmd+0x9a>
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	73bb      	strb	r3, [r7, #14]
 8001bb0:	7bbb      	ldrb	r3, [r7, #14]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f1      	bne.n	8001b9a <SD_SendCmd+0x7e>

	return res;
 8001bb6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SD_disk_initialize>:
 user_diskio.c 파일에서 사용된다.
 -----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* 한종류의 드라이브만 지원 */
	if (drv)
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SD_disk_initialize+0x14>
		return STA_NOINIT;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0d5      	b.n	8001d80 <SD_disk_initialize+0x1c0>

	/* SD카드 미삽입 */
	if (Stat & STA_NODISK)
 8001bd4:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <SD_disk_initialize+0x1c8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <SD_disk_initialize+0x2a>
		return Stat;
 8001be2:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <SD_disk_initialize+0x1c8>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	e0ca      	b.n	8001d80 <SD_disk_initialize+0x1c0>

	/* SD카드 Power On */
	SD_PowerOn();
 8001bea:	f7ff fea9 	bl	8001940 <SD_PowerOn>

	/* SPI 통신을 위해 Chip Select */
	SELECT();
 8001bee:	f7ff fe2d 	bl	800184c <SELECT>

	/* SD카드 타입변수 초기화 */
	type = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73bb      	strb	r3, [r7, #14]

	/* Idle 상태 진입 */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2040      	movs	r0, #64	; 0x40
 8001bfa:	f7ff ff8f 	bl	8001b1c <SD_SendCmd>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	f040 80a5 	bne.w	8001d50 <SD_disk_initialize+0x190>
	{
		/* 타이머 1초 설정 */
		Timer1 = 100;
 8001c06:	4b61      	ldr	r3, [pc, #388]	; (8001d8c <SD_disk_initialize+0x1cc>)
 8001c08:	2264      	movs	r2, #100	; 0x64
 8001c0a:	701a      	strb	r2, [r3, #0]

		/* SD 인터페이스 동작 조건 확인 */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001c0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001c10:	2048      	movs	r0, #72	; 0x48
 8001c12:	f7ff ff83 	bl	8001b1c <SD_SendCmd>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d158      	bne.n	8001cce <SD_disk_initialize+0x10e>
		{
			/* SDC Ver2+ */
			for (n = 0; n < 4; n++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e00c      	b.n	8001c3c <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 8001c22:	7bfc      	ldrb	r4, [r7, #15]
 8001c24:	f7ff fe44 	bl	80018b0 <SPI_RxByte>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f104 0310 	add.w	r3, r4, #16
 8001c30:	443b      	add	r3, r7
 8001c32:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d9ef      	bls.n	8001c22 <SD_disk_initialize+0x62>
			}

			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001c42:	7abb      	ldrb	r3, [r7, #10]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	f040 8083 	bne.w	8001d50 <SD_disk_initialize+0x190>
 8001c4a:	7afb      	ldrb	r3, [r7, #11]
 8001c4c:	2baa      	cmp	r3, #170	; 0xaa
 8001c4e:	d17f      	bne.n	8001d50 <SD_disk_initialize+0x190>
			{
				/* 2.7-3.6V 전압범위 동작 */
				do
				{
					if (SD_SendCmd(CMD55, 0) <= 1
 8001c50:	2100      	movs	r1, #0
 8001c52:	2077      	movs	r0, #119	; 0x77
 8001c54:	f7ff ff62 	bl	8001b1c <SD_SendCmd>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d807      	bhi.n	8001c6e <SD_disk_initialize+0xae>
							&& SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001c5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c62:	2069      	movs	r0, #105	; 0x69
 8001c64:	f7ff ff5a 	bl	8001b1c <SD_SendCmd>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <SD_disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <SD_disk_initialize+0x1cc>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1eb      	bne.n	8001c50 <SD_disk_initialize+0x90>
 8001c78:	e000      	b.n	8001c7c <SD_disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001c7a:	bf00      	nop

				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <SD_disk_initialize+0x1cc>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d064      	beq.n	8001d50 <SD_disk_initialize+0x190>
 8001c86:	2100      	movs	r1, #0
 8001c88:	207a      	movs	r0, #122	; 0x7a
 8001c8a:	f7ff ff47 	bl	8001b1c <SD_SendCmd>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d15d      	bne.n	8001d50 <SD_disk_initialize+0x190>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e00c      	b.n	8001cb4 <SD_disk_initialize+0xf4>
					{
						ocr[n] = SPI_RxByte();
 8001c9a:	7bfc      	ldrb	r4, [r7, #15]
 8001c9c:	f7ff fe08 	bl	80018b0 <SPI_RxByte>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f104 0310 	add.w	r3, r4, #16
 8001ca8:	443b      	add	r3, r7
 8001caa:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d9ef      	bls.n	8001c9a <SD_disk_initialize+0xda>
					}

					type = (ocr[0] & 0x40) ? 6 : 2;
 8001cba:	7a3b      	ldrb	r3, [r7, #8]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SD_disk_initialize+0x108>
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	e000      	b.n	8001cca <SD_disk_initialize+0x10a>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	73bb      	strb	r3, [r7, #14]
 8001ccc:	e040      	b.n	8001d50 <SD_disk_initialize+0x190>
			}
		}
		else
		{
			/* SDC Ver1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ?
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2077      	movs	r0, #119	; 0x77
 8001cd2:	f7ff ff23 	bl	8001b1c <SD_SendCmd>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d808      	bhi.n	8001cee <SD_disk_initialize+0x12e>
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2069      	movs	r0, #105	; 0x69
 8001ce0:	f7ff ff1c 	bl	8001b1c <SD_SendCmd>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d801      	bhi.n	8001cee <SD_disk_initialize+0x12e>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e000      	b.n	8001cf0 <SD_disk_initialize+0x130>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73bb      	strb	r3, [r7, #14]
					2 : 1; /* SDC : MMC */

			do
			{
				if (type == 2)
 8001cf2:	7bbb      	ldrb	r3, [r7, #14]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d10e      	bne.n	8001d16 <SD_disk_initialize+0x156>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2077      	movs	r0, #119	; 0x77
 8001cfc:	f7ff ff0e 	bl	8001b1c <SD_SendCmd>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d80e      	bhi.n	8001d24 <SD_disk_initialize+0x164>
 8001d06:	2100      	movs	r1, #0
 8001d08:	2069      	movs	r0, #105	; 0x69
 8001d0a:	f7ff ff07 	bl	8001b1c <SD_SendCmd>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <SD_disk_initialize+0x164>
						break; /* ACMD41 */
 8001d14:	e00d      	b.n	8001d32 <SD_disk_initialize+0x172>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0)
 8001d16:	2100      	movs	r1, #0
 8001d18:	2041      	movs	r0, #65	; 0x41
 8001d1a:	f7ff feff 	bl	8001b1c <SD_SendCmd>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <SD_disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <SD_disk_initialize+0x1cc>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e1      	bne.n	8001cf2 <SD_disk_initialize+0x132>
 8001d2e:	e000      	b.n	8001d32 <SD_disk_initialize+0x172>
						break; /* CMD1 */
 8001d30:	bf00      	nop

			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <SD_disk_initialize+0x1cc>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <SD_disk_initialize+0x18c>
 8001d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d40:	2050      	movs	r0, #80	; 0x50
 8001d42:	f7ff feeb 	bl	8001b1c <SD_SendCmd>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <SD_disk_initialize+0x190>
			{
				/* 블럭 길이 선택 */
				type = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73bb      	strb	r3, [r7, #14]
			}
		}
	}

	CardType = type;
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <SD_disk_initialize+0x1d0>)
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	7013      	strb	r3, [r2, #0]

	DESELECT();
 8001d56:	f7ff fd85 	bl	8001864 <DESELECT>

	SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001d5a:	f7ff fda9 	bl	80018b0 <SPI_RxByte>

	if (type)
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <SD_disk_initialize+0x1b6>
	{
		/* Clear STA_NOINIT */
		Stat &= ~STA_NOINIT;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <SD_disk_initialize+0x1c8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SD_disk_initialize+0x1c8>)
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e001      	b.n	8001d7a <SD_disk_initialize+0x1ba>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001d76:	f7ff fe2f 	bl	80019d8 <SD_PowerOff>
	}

	return Stat;
 8001d7a:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <SD_disk_initialize+0x1c8>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b2db      	uxtb	r3, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	200057bd 	.word	0x200057bd
 8001d90:	200007a0 	.word	0x200007a0

08001d94 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SD_disk_status+0x14>
		return STA_NOINIT;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e002      	b.n	8001dae <SD_disk_status+0x1a>

	return Stat;
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <SD_disk_status+0x28>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <SD_disk_read+0x1c>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <SD_disk_read+0x20>
		return RES_PARERR;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e051      	b.n	8001e84 <SD_disk_read+0xc4>

	if (Stat & STA_NOINIT)
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <SD_disk_read+0xcc>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SD_disk_read+0x32>
		return RES_NOTRDY;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e048      	b.n	8001e84 <SD_disk_read+0xc4>

	if (!(CardType & 4))
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <SD_disk_read+0xd0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <SD_disk_read+0x44>
		sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	025b      	lsls	r3, r3, #9
 8001e02:	607b      	str	r3, [r7, #4]

	SELECT();
 8001e04:	f7ff fd22 	bl	800184c <SELECT>

	if (count == 1)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d111      	bne.n	8001e32 <SD_disk_read+0x72>
	{
		/* 싱글 블록 읽기 */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	2051      	movs	r0, #81	; 0x51
 8001e12:	f7ff fe83 	bl	8001b1c <SD_SendCmd>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d129      	bne.n	8001e70 <SD_disk_read+0xb0>
 8001e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e20:	68b8      	ldr	r0, [r7, #8]
 8001e22:	f7ff fdf1 	bl	8001a08 <SD_RxDataBlock>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d021      	beq.n	8001e70 <SD_disk_read+0xb0>
			count = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	e01e      	b.n	8001e70 <SD_disk_read+0xb0>
	}
	else
	{
		/* 다중 블록 읽기 */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	2052      	movs	r0, #82	; 0x52
 8001e36:	f7ff fe71 	bl	8001b1c <SD_SendCmd>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d117      	bne.n	8001e70 <SD_disk_read+0xb0>
		{
			do
			{
				if (!SD_RxDataBlock(buff, 512))
 8001e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	f7ff fddf 	bl	8001a08 <SD_RxDataBlock>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <SD_disk_read+0xa6>
					break;

				buff += 512;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e56:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ed      	bne.n	8001e40 <SD_disk_read+0x80>
 8001e64:	e000      	b.n	8001e68 <SD_disk_read+0xa8>
					break;
 8001e66:	bf00      	nop

			/* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
			SD_SendCmd(CMD12, 0);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	204c      	movs	r0, #76	; 0x4c
 8001e6c:	f7ff fe56 	bl	8001b1c <SD_SendCmd>
		}
	}

	DESELECT();
 8001e70:	f7ff fcf8 	bl	8001864 <DESELECT>
	SPI_RxByte(); /* Idle 상태(Release DO) */
 8001e74:	f7ff fd1c 	bl	80018b0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	200007a0 	.word	0x200007a0

08001e94 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <SD_disk_write+0x1c>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <SD_disk_write+0x20>
		return RES_PARERR;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	e06b      	b.n	8001f8c <SD_disk_write+0xf8>

	if (Stat & STA_NOINIT)
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <SD_disk_write+0x100>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SD_disk_write+0x32>
		return RES_NOTRDY;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e062      	b.n	8001f8c <SD_disk_write+0xf8>

	if (Stat & STA_PROTECT)
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <SD_disk_write+0x100>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SD_disk_write+0x44>
		return RES_WRPRT;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e059      	b.n	8001f8c <SD_disk_write+0xf8>

	if (!(CardType & 4))
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <SD_disk_write+0x104>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <SD_disk_write+0x56>
		sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	025b      	lsls	r3, r3, #9
 8001ee8:	607b      	str	r3, [r7, #4]

	SELECT();
 8001eea:	f7ff fcaf 	bl	800184c <SELECT>

	if (count == 1)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d110      	bne.n	8001f16 <SD_disk_write+0x82>
	{
		/* 싱글 블록 쓰기 */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	2058      	movs	r0, #88	; 0x58
 8001ef8:	f7ff fe10 	bl	8001b1c <SD_SendCmd>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d13a      	bne.n	8001f78 <SD_disk_write+0xe4>
 8001f02:	21fe      	movs	r1, #254	; 0xfe
 8001f04:	68b8      	ldr	r0, [r7, #8]
 8001f06:	f7ff fdb5 	bl	8001a74 <SD_TxDataBlock>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d033      	beq.n	8001f78 <SD_disk_write+0xe4>
			count = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	e030      	b.n	8001f78 <SD_disk_write+0xe4>
	}
	else
	{
		/* 다중 블록 쓰기 */
		if (CardType & 2)
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <SD_disk_write+0x104>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001f22:	2100      	movs	r1, #0
 8001f24:	2077      	movs	r0, #119	; 0x77
 8001f26:	f7ff fdf9 	bl	8001b1c <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	2057      	movs	r0, #87	; 0x57
 8001f2e:	f7ff fdf5 	bl	8001b1c <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	2059      	movs	r0, #89	; 0x59
 8001f36:	f7ff fdf1 	bl	8001b1c <SD_SendCmd>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d11b      	bne.n	8001f78 <SD_disk_write+0xe4>
		{
			do
			{
				if (!SD_TxDataBlock(buff, 0xFC))
 8001f40:	21fc      	movs	r1, #252	; 0xfc
 8001f42:	68b8      	ldr	r0, [r7, #8]
 8001f44:	f7ff fd96 	bl	8001a74 <SD_TxDataBlock>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <SD_disk_write+0xd0>
					break;

				buff += 512;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f54:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ee      	bne.n	8001f40 <SD_disk_write+0xac>
 8001f62:	e000      	b.n	8001f66 <SD_disk_write+0xd2>
					break;
 8001f64:	bf00      	nop

			if (!SD_TxDataBlock(0, 0xFD))
 8001f66:	21fd      	movs	r1, #253	; 0xfd
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff fd83 	bl	8001a74 <SD_TxDataBlock>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <SD_disk_write+0xe4>
			{
				count = 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	603b      	str	r3, [r7, #0]
			}
		}
	}

	DESELECT();
 8001f78:	f7ff fc74 	bl	8001864 <DESELECT>
	SPI_RxByte();
 8001f7c:	f7ff fc98 	bl	80018b0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000000 	.word	0x20000000
 8001f98:	200007a0 	.word	0x200007a0

08001f9c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b08b      	sub	sp, #44	; 0x2c
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	603a      	str	r2, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	e11b      	b.n	80021f2 <SD_disk_ioctl+0x256>

	res = RES_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d129      	bne.n	800201a <SD_disk_ioctl+0x7e>
	{
		switch (*ptr)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d017      	beq.n	8001ffe <SD_disk_ioctl+0x62>
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	dc1f      	bgt.n	8002012 <SD_disk_ioctl+0x76>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <SD_disk_ioctl+0x40>
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d00b      	beq.n	8001ff2 <SD_disk_ioctl+0x56>
 8001fda:	e01a      	b.n	8002012 <SD_disk_ioctl+0x76>
		{
		case 0:
			if (SD_CheckPower())
 8001fdc:	f7ff fd08 	bl	80019f0 <SD_CheckPower>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SD_disk_ioctl+0x4e>
				SD_PowerOff(); /* Power Off */
 8001fe6:	f7ff fcf7 	bl	80019d8 <SD_PowerOff>
			res = RES_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ff0:	e0fd      	b.n	80021ee <SD_disk_ioctl+0x252>
		case 1:
			SD_PowerOn(); /* Power On */
 8001ff2:	f7ff fca5 	bl	8001940 <SD_PowerOn>
			res = RES_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ffc:	e0f7      	b.n	80021ee <SD_disk_ioctl+0x252>
		case 2:
			*(ptr + 1) = (BYTE) SD_CheckPower();
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	1c5c      	adds	r4, r3, #1
 8002002:	f7ff fcf5 	bl	80019f0 <SD_CheckPower>
 8002006:	4603      	mov	r3, r0
 8002008:	7023      	strb	r3, [r4, #0]
			res = RES_OK; /* Power Check */
 800200a:	2300      	movs	r3, #0
 800200c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002010:	e0ed      	b.n	80021ee <SD_disk_ioctl+0x252>
		default:
			res = RES_PARERR;
 8002012:	2304      	movs	r3, #4
 8002014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002018:	e0e9      	b.n	80021ee <SD_disk_ioctl+0x252>
		}
	}
	else
	{
		if (Stat & STA_NOINIT)
 800201a:	4b78      	ldr	r3, [pc, #480]	; (80021fc <SD_disk_ioctl+0x260>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SD_disk_ioctl+0x90>
			return RES_NOTRDY;
 8002028:	2303      	movs	r3, #3
 800202a:	e0e2      	b.n	80021f2 <SD_disk_ioctl+0x256>

		SELECT();
 800202c:	f7ff fc0e 	bl	800184c <SELECT>

		switch (ctrl)
 8002030:	79bb      	ldrb	r3, [r7, #6]
 8002032:	2b0d      	cmp	r3, #13
 8002034:	f200 80cc 	bhi.w	80021d0 <SD_disk_ioctl+0x234>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <SD_disk_ioctl+0xa4>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	0800213b 	.word	0x0800213b
 8002044:	08002079 	.word	0x08002079
 8002048:	0800212b 	.word	0x0800212b
 800204c:	080021d1 	.word	0x080021d1
 8002050:	080021d1 	.word	0x080021d1
 8002054:	080021d1 	.word	0x080021d1
 8002058:	080021d1 	.word	0x080021d1
 800205c:	080021d1 	.word	0x080021d1
 8002060:	080021d1 	.word	0x080021d1
 8002064:	080021d1 	.word	0x080021d1
 8002068:	080021d1 	.word	0x080021d1
 800206c:	0800214d 	.word	0x0800214d
 8002070:	08002171 	.word	0x08002171
 8002074:	08002195 	.word	0x08002195
		{
		case GET_SECTOR_COUNT:
			/* SD카드 내 Sector의 개수 (DWORD) */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002078:	2100      	movs	r1, #0
 800207a:	2049      	movs	r0, #73	; 0x49
 800207c:	f7ff fd4e 	bl	8001b1c <SD_SendCmd>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80a8 	bne.w	80021d8 <SD_disk_ioctl+0x23c>
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	2110      	movs	r1, #16
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fcba 	bl	8001a08 <SD_RxDataBlock>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 809e 	beq.w	80021d8 <SD_disk_ioctl+0x23c>
			{
				if ((csd[0] >> 6) == 1)
 800209c:	7b3b      	ldrb	r3, [r7, #12]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10e      	bne.n	80020c4 <SD_disk_ioctl+0x128>
				{
					/* SDC ver 2.00 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80020a6:	7d7b      	ldrb	r3, [r7, #21]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	7d3b      	ldrb	r3, [r7, #20]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80020ba:	8bfb      	ldrh	r3, [r7, #30]
 80020bc:	029a      	lsls	r2, r3, #10
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e02e      	b.n	8002122 <SD_disk_ioctl+0x186>
				}
				else
				{
					/* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80020c4:	7c7b      	ldrb	r3, [r7, #17]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	7dbb      	ldrb	r3, [r7, #22]
 80020ce:	09db      	lsrs	r3, r3, #7
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80020d6:	7d7b      	ldrb	r3, [r7, #21]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f003 0306 	and.w	r3, r3, #6
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80020e6:	3302      	adds	r3, #2
 80020e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80020ec:	7d3b      	ldrb	r3, [r7, #20]
 80020ee:	099b      	lsrs	r3, r3, #6
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8002100:	7cbb      	ldrb	r3, [r7, #18]
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	b29b      	uxth	r3, r3
 8002106:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800210a:	b29b      	uxth	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8002110:	3301      	adds	r3, #1
 8002112:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002114:	8bfa      	ldrh	r2, [r7, #30]
 8002116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800211a:	3b09      	subs	r3, #9
 800211c:	409a      	lsls	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]
				}

				res = RES_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002128:	e056      	b.n	80021d8 <SD_disk_ioctl+0x23c>

		case GET_SECTOR_SIZE:
			/* 섹터의 단위 크기 (WORD) */
			*(WORD*) buff = 512;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002130:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002138:	e055      	b.n	80021e6 <SD_disk_ioctl+0x24a>

		case CTRL_SYNC:
			/* 쓰기 동기화 */
			if (SD_ReadyWait() == 0xFF)
 800213a:	f7ff fbe5 	bl	8001908 <SD_ReadyWait>
 800213e:	4603      	mov	r3, r0
 8002140:	2bff      	cmp	r3, #255	; 0xff
 8002142:	d14b      	bne.n	80021dc <SD_disk_ioctl+0x240>
				res = RES_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800214a:	e047      	b.n	80021dc <SD_disk_ioctl+0x240>

		case MMC_GET_CSD:
			/* CSD 정보 수신 (16 bytes) */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800214c:	2100      	movs	r1, #0
 800214e:	2049      	movs	r0, #73	; 0x49
 8002150:	f7ff fce4 	bl	8001b1c <SD_SendCmd>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d142      	bne.n	80021e0 <SD_disk_ioctl+0x244>
 800215a:	2110      	movs	r1, #16
 800215c:	6a38      	ldr	r0, [r7, #32]
 800215e:	f7ff fc53 	bl	8001a08 <SD_RxDataBlock>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03b      	beq.n	80021e0 <SD_disk_ioctl+0x244>
				res = RES_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800216e:	e037      	b.n	80021e0 <SD_disk_ioctl+0x244>

		case MMC_GET_CID:
			/* CID 정보 수신 (16 bytes) */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002170:	2100      	movs	r1, #0
 8002172:	204a      	movs	r0, #74	; 0x4a
 8002174:	f7ff fcd2 	bl	8001b1c <SD_SendCmd>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d132      	bne.n	80021e4 <SD_disk_ioctl+0x248>
 800217e:	2110      	movs	r1, #16
 8002180:	6a38      	ldr	r0, [r7, #32]
 8002182:	f7ff fc41 	bl	8001a08 <SD_RxDataBlock>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d02b      	beq.n	80021e4 <SD_disk_ioctl+0x248>
				res = RES_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002192:	e027      	b.n	80021e4 <SD_disk_ioctl+0x248>

		case MMC_GET_OCR:
			/* OCR 정보 수신 (4 bytes) */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002194:	2100      	movs	r1, #0
 8002196:	207a      	movs	r0, #122	; 0x7a
 8002198:	f7ff fcc0 	bl	8001b1c <SD_SendCmd>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <SD_disk_ioctl+0x234>
			{
				for (n = 0; n < 4; n++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021a8:	e00b      	b.n	80021c2 <SD_disk_ioctl+0x226>
				{
					*ptr++ = SPI_RxByte();
 80021aa:	6a3c      	ldr	r4, [r7, #32]
 80021ac:	1c63      	adds	r3, r4, #1
 80021ae:	623b      	str	r3, [r7, #32]
 80021b0:	f7ff fb7e 	bl	80018b0 <SPI_RxByte>
 80021b4:	4603      	mov	r3, r0
 80021b6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80021b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021bc:	3301      	adds	r3, #1
 80021be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d9ef      	bls.n	80021aa <SD_disk_ioctl+0x20e>
				}

				res = RES_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

		default:
			res = RES_PARERR;
 80021d0:	2304      	movs	r3, #4
 80021d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021d6:	e006      	b.n	80021e6 <SD_disk_ioctl+0x24a>
			break;
 80021d8:	bf00      	nop
 80021da:	e004      	b.n	80021e6 <SD_disk_ioctl+0x24a>
			break;
 80021dc:	bf00      	nop
 80021de:	e002      	b.n	80021e6 <SD_disk_ioctl+0x24a>
			break;
 80021e0:	bf00      	nop
 80021e2:	e000      	b.n	80021e6 <SD_disk_ioctl+0x24a>
			break;
 80021e4:	bf00      	nop
		}

		DESELECT();
 80021e6:	f7ff fb3d 	bl	8001864 <DESELECT>
		SPI_RxByte();
 80021ea:	f7ff fb61 	bl	80018b0 <SPI_RxByte>
	}

	return res;
 80021ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	372c      	adds	r7, #44	; 0x2c
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd90      	pop	{r4, r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000

08002200 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <vApplicationGetIdleTaskMemory+0x2c>)
 8002210:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <vApplicationGetIdleTaskMemory+0x30>)
 8002216:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	200053bc 	.word	0x200053bc
 8002230:	2000545c 	.word	0x2000545c

08002234 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002234:	b5b0      	push	{r4, r5, r7, lr}
 8002236:	b0aa      	sub	sp, #168	; 0xa8
 8002238:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002240:	4b45      	ldr	r3, [pc, #276]	; (8002358 <MX_FREERTOS_Init+0x124>)
 8002242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8002246:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800224a:	2101      	movs	r1, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f009 fd5f 	bl	800bd10 <osSemaphoreCreate>
 8002252:	4603      	mov	r3, r0
 8002254:	4a41      	ldr	r2, [pc, #260]	; (800235c <MX_FREERTOS_Init+0x128>)
 8002256:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800225e:	4b40      	ldr	r3, [pc, #256]	; (8002360 <MX_FREERTOS_Init+0x12c>)
 8002260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 8002264:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f009 fd50 	bl	800bd10 <osSemaphoreCreate>
 8002270:	4603      	mov	r3, r0
 8002272:	4a3c      	ldr	r2, [pc, #240]	; (8002364 <MX_FREERTOS_Init+0x130>)
 8002274:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonSem */
  osSemaphoreStaticDef(buttonSem, &buttonSemControlBlock);
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <MX_FREERTOS_Init+0x134>)
 800227e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  buttonSemHandle = osSemaphoreCreate(osSemaphore(buttonSem), 1);
 8002282:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f009 fd41 	bl	800bd10 <osSemaphoreCreate>
 800228e:	4603      	mov	r3, r0
 8002290:	4a36      	ldr	r2, [pc, #216]	; (800236c <MX_FREERTOS_Init+0x138>)
 8002292:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTask */
  osThreadStaticDef(buttonTask, buttonTaskInit, osPriorityNormal, 0, 128, buttonTaskBuffer, &buttonTaskControlBlock);
 8002294:	4b36      	ldr	r3, [pc, #216]	; (8002370 <MX_FREERTOS_Init+0x13c>)
 8002296:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800229a:	461d      	mov	r5, r3
 800229c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 80022a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f009 fcce 	bl	800bc50 <osThreadCreate>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <MX_FREERTOS_Init+0x140>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, initSensorRead, osPriorityNormal, 0, 2048, sensorReadBuffer, &sensorReadControlBlock);
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <MX_FREERTOS_Init+0x144>)
 80022bc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80022c0:	461d      	mov	r5, r3
 80022c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 80022ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f009 fcbb 	bl	800bc50 <osThreadCreate>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a27      	ldr	r2, [pc, #156]	; (800237c <MX_FREERTOS_Init+0x148>)
 80022de:	6013      	str	r3, [r2, #0]

  /* definition and creation of SdCard */
  osThreadStaticDef(SdCard, SdCardInit, osPriorityHigh, 0, 256, SdCardBuffer, &SdCardControlBlock);
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <MX_FREERTOS_Init+0x14c>)
 80022e2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80022e6:	461d      	mov	r5, r3
 80022e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 80022f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f009 fca8 	bl	800bc50 <osThreadCreate>
 8002300:	4603      	mov	r3, r0
 8002302:	4a20      	ldr	r2, [pc, #128]	; (8002384 <MX_FREERTOS_Init+0x150>)
 8002304:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 2048, menuProcessDataBuffer, &menuProcessDataControlBlock);
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <MX_FREERTOS_Init+0x154>)
 8002308:	f107 0420 	add.w	r4, r7, #32
 800230c:	461d      	mov	r5, r3
 800230e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 800231a:	f107 0320 	add.w	r3, r7, #32
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f009 fc95 	bl	800bc50 <osThreadCreate>
 8002326:	4603      	mov	r3, r0
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <MX_FREERTOS_Init+0x158>)
 800232a:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadStaticDef(lcdTask, lcdTaskInit, osPriorityNormal, 0, 128, lcdTaskBuffer, &lcdTaskControlBlock);
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_FREERTOS_Init+0x15c>)
 800232e:	1d3c      	adds	r4, r7, #4
 8002330:	461d      	mov	r5, r3
 8002332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800233a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f009 fc84 	bl	800bc50 <osThreadCreate>
 8002348:	4603      	mov	r3, r0
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <MX_FREERTOS_Init+0x160>)
 800234c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800234e:	bf00      	nop
 8002350:	37a8      	adds	r7, #168	; 0xa8
 8002352:	46bd      	mov	sp, r7
 8002354:	bdb0      	pop	{r4, r5, r7, pc}
 8002356:	bf00      	nop
 8002358:	200052dc 	.word	0x200052dc
 800235c:	200052d8 	.word	0x200052d8
 8002360:	20005328 	.word	0x20005328
 8002364:	20005324 	.word	0x20005324
 8002368:	20005374 	.word	0x20005374
 800236c:	20005370 	.word	0x20005370
 8002370:	080117a8 	.word	0x080117a8
 8002374:	200007a4 	.word	0x200007a4
 8002378:	080117d0 	.word	0x080117d0
 800237c:	20000a48 	.word	0x20000a48
 8002380:	080117f4 	.word	0x080117f4
 8002384:	20002aec 	.word	0x20002aec
 8002388:	08011820 	.word	0x08011820
 800238c:	20002f90 	.word	0x20002f90
 8002390:	08011844 	.word	0x08011844
 8002394:	20005034 	.word	0x20005034

08002398 <buttonTaskInit>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_buttonTaskInit */
void buttonTaskInit(void const * argument)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonTaskInit */
	/* Infinite loop */
	for (;;)
	{
		/*buttonMenu = readButton(); for live expression*/
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <buttonTaskInit+0x24>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d804      	bhi.n	80023b2 <buttonTaskInit+0x1a>
		{
			osSemaphoreRelease(buttonSemHandle);
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <buttonTaskInit+0x28>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f009 fd2f 	bl	800be10 <osSemaphoreRelease>
		}
		osDelay(30);
 80023b2:	201e      	movs	r0, #30
 80023b4:	f009 fc98 	bl	800bce8 <osDelay>
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 80023b8:	e7f2      	b.n	80023a0 <buttonTaskInit+0x8>
 80023ba:	bf00      	nop
 80023bc:	20000001 	.word	0x20000001
 80023c0:	20005370 	.word	0x20005370

080023c4 <initSensorRead>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_initSensorRead */
void initSensorRead(void const * argument)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{

		osDelay(30);
 80023cc:	201e      	movs	r0, #30
 80023ce:	f009 fc8b 	bl	800bce8 <osDelay>
 80023d2:	e7fb      	b.n	80023cc <initSensorRead+0x8>

080023d4 <SdCardInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SdCardInit */
	 HD44780_Init(2);
 80023dc:	2002      	movs	r0, #2
 80023de:	f000 f959 	bl	8002694 <HD44780_Init>
	 HD44780_Clear();
 80023e2:	f000 f9db 	bl	800279c <HD44780_Clear>
	 HD44780_SetCursor(0,0);
 80023e6:	2100      	movs	r1, #0
 80023e8:	2000      	movs	r0, #0
 80023ea:	f000 f9ed 	bl	80027c8 <HD44780_SetCursor>
	 HD44780_PrintStr("SAG");
 80023ee:	4817      	ldr	r0, [pc, #92]	; (800244c <SdCardInit+0x78>)
 80023f0:	f000 fa71 	bl	80028d6 <HD44780_PrintStr>
	 HD44780_SetCursor(0,1);
 80023f4:	2101      	movs	r1, #1
 80023f6:	2000      	movs	r0, #0
 80023f8:	f000 f9e6 	bl	80027c8 <HD44780_SetCursor>
	 HD44780_PrintStr("LEFT");
 80023fc:	4814      	ldr	r0, [pc, #80]	; (8002450 <SdCardInit+0x7c>)
 80023fe:	f000 fa6a 	bl	80028d6 <HD44780_PrintStr>
	 HD44780_SetCursor(9,0);
 8002402:	2100      	movs	r1, #0
 8002404:	2009      	movs	r0, #9
 8002406:	f000 f9df 	bl	80027c8 <HD44780_SetCursor>
	 HD44780_PrintStr("MESSURE");
 800240a:	4812      	ldr	r0, [pc, #72]	; (8002454 <SdCardInit+0x80>)
 800240c:	f000 fa63 	bl	80028d6 <HD44780_PrintStr>
	 HD44780_SetCursor(11,1);
 8002410:	2101      	movs	r1, #1
 8002412:	200b      	movs	r0, #11
 8002414:	f000 f9d8 	bl	80027c8 <HD44780_SetCursor>
	 HD44780_PrintStr("RIGHT");
 8002418:	480f      	ldr	r0, [pc, #60]	; (8002458 <SdCardInit+0x84>)
 800241a:	f000 fa5c 	bl	80028d6 <HD44780_PrintStr>
	/* Infinite loop */
	for (;;)
	{

		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <SdCardInit+0x88>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d807      	bhi.n	8002436 <SdCardInit+0x62>
		{
			menuSelector(buttonMenu);
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <SdCardInit+0x88>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fc1c 	bl	8002c68 <menuSelector>
			buttonMenu = BUTTON_SNA; /*for live expression*/
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <SdCardInit+0x88>)
 8002432:	2205      	movs	r2, #5
 8002434:	701a      	strb	r2, [r3, #0]
		}
		osSemaphoreWait(buttonSemHandle, osWaitForever);
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <SdCardInit+0x8c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f04f 31ff 	mov.w	r1, #4294967295
 800243e:	4618      	mov	r0, r3
 8002440:	f009 fc98 	bl	800bd74 <osSemaphoreWait>
		osDelay(20);
 8002444:	2014      	movs	r0, #20
 8002446:	f009 fc4f 	bl	800bce8 <osDelay>
		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 800244a:	e7e8      	b.n	800241e <SdCardInit+0x4a>
 800244c:	08011860 	.word	0x08011860
 8002450:	08011864 	.word	0x08011864
 8002454:	0801186c 	.word	0x0801186c
 8002458:	08011874 	.word	0x08011874
 800245c:	20000001 	.word	0x20000001
 8002460:	20005370 	.word	0x20005370

08002464 <menuProcessDataInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
	/* Infinite loop */
	for (;;)
	{
		menuCalculateBlock();
 800246c:	f000 fde8 	bl	8003040 <menuCalculateBlock>
		osDelay(10);
 8002470:	200a      	movs	r0, #10
 8002472:	f009 fc39 	bl	800bce8 <osDelay>
		menuCalculateBlock();
 8002476:	e7f9      	b.n	800246c <menuProcessDataInit+0x8>

08002478 <lcdTaskInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcdTaskInit */
void lcdTaskInit(void const * argument)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

    osDelay(1);
 8002480:	2001      	movs	r0, #1
 8002482:	f009 fc31 	bl	800bce8 <osDelay>
 8002486:	e7fb      	b.n	8002480 <lcdTaskInit+0x8>

08002488 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC5   ------> ADCx_IN15
*/
void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <MX_GPIO_Init+0x110>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a3c      	ldr	r2, [pc, #240]	; (8002598 <MX_GPIO_Init+0x110>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <MX_GPIO_Init+0x110>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <MX_GPIO_Init+0x110>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a35      	ldr	r2, [pc, #212]	; (8002598 <MX_GPIO_Init+0x110>)
 80024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b33      	ldr	r3, [pc, #204]	; (8002598 <MX_GPIO_Init+0x110>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <MX_GPIO_Init+0x110>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a2e      	ldr	r2, [pc, #184]	; (8002598 <MX_GPIO_Init+0x110>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <MX_GPIO_Init+0x110>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b28      	ldr	r3, [pc, #160]	; (8002598 <MX_GPIO_Init+0x110>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <MX_GPIO_Init+0x110>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b25      	ldr	r3, [pc, #148]	; (8002598 <MX_GPIO_Init+0x110>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	2120      	movs	r1, #32
 8002512:	4822      	ldr	r0, [pc, #136]	; (800259c <MX_GPIO_Init+0x114>)
 8002514:	f003 f9c4 	bl	80058a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002518:	2200      	movs	r2, #0
 800251a:	2101      	movs	r1, #1
 800251c:	4820      	ldr	r0, [pc, #128]	; (80025a0 <MX_GPIO_Init+0x118>)
 800251e:	f003 f9bf 	bl	80058a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002528:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800252c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <MX_GPIO_Init+0x11c>)
 800253a:	f003 f81d 	bl	8005578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800253e:	2320      	movs	r3, #32
 8002540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002542:	2301      	movs	r3, #1
 8002544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	4811      	ldr	r0, [pc, #68]	; (800259c <MX_GPIO_Init+0x114>)
 8002556:	f003 f80f 	bl	8005578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800255a:	2320      	movs	r3, #32
 800255c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	2303      	movs	r3, #3
 8002560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_GPIO_Init+0x11c>)
 800256e:	f003 f803 	bl	8005578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002572:	2301      	movs	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002576:	2301      	movs	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_GPIO_Init+0x118>)
 800258a:	f002 fff5 	bl	8005578 <HAL_GPIO_Init>

}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40020800 	.word	0x40020800

080025a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <MX_I2C1_Init+0x54>)
 80025b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025b4:	4a12      	ldr	r2, [pc, #72]	; (8002600 <MX_I2C1_Init+0x58>)
 80025b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025e6:	f003 f975 	bl	80058d4 <HAL_I2C_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025f0:	f000 fb34 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	2000565c 	.word	0x2000565c
 80025fc:	40005400 	.word	0x40005400
 8002600:	000186a0 	.word	0x000186a0

08002604 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <HAL_I2C_MspInit+0x84>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d12c      	bne.n	8002680 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_I2C_MspInit+0x88>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a17      	ldr	r2, [pc, #92]	; (800268c <HAL_I2C_MspInit+0x88>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_I2C_MspInit+0x88>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002648:	2312      	movs	r3, #18
 800264a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002654:	2304      	movs	r3, #4
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	4619      	mov	r1, r3
 800265e:	480c      	ldr	r0, [pc, #48]	; (8002690 <HAL_I2C_MspInit+0x8c>)
 8002660:	f002 ff8a 	bl	8005578 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_I2C_MspInit+0x88>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_I2C_MspInit+0x88>)
 800266e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002672:	6413      	str	r3, [r2, #64]	; 0x40
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_I2C_MspInit+0x88>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002680:	bf00      	nop
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40005400 	.word	0x40005400
 800268c:	40023800 	.word	0x40023800
 8002690:	40020400 	.word	0x40020400

08002694 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800269e:	4a38      	ldr	r2, [pc, #224]	; (8002780 <HD44780_Init+0xec>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80026a4:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HD44780_Init+0xf0>)
 80026a6:	2208      	movs	r2, #8
 80026a8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HD44780_Init+0xf4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HD44780_Init+0xec>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d907      	bls.n	80026c8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HD44780_Init+0xf4>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HD44780_Init+0xf4>)
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e006      	b.n	80026d6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80026c8:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HD44780_Init+0xf4>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HD44780_Init+0xf4>)
 80026d4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80026d6:	f000 f99b 	bl	8002a10 <DelayInit>
  osDelay(50);
 80026da:	2032      	movs	r0, #50	; 0x32
 80026dc:	f009 fb04 	bl	800bce8 <osDelay>

  ExpanderWrite(dpBacklight);
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HD44780_Init+0xf0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f959 	bl	800299c <ExpanderWrite>
  osDelay(1000);
 80026ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ee:	f009 fafb 	bl	800bce8 <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80026f2:	2030      	movs	r0, #48	; 0x30
 80026f4:	f000 f941 	bl	800297a <Write4Bits>
  DelayUS(4500);
 80026f8:	f241 1094 	movw	r0, #4500	; 0x1194
 80026fc:	f000 f9b2 	bl	8002a64 <DelayUS>

  Write4Bits(0x03 << 4);
 8002700:	2030      	movs	r0, #48	; 0x30
 8002702:	f000 f93a 	bl	800297a <Write4Bits>
  DelayUS(4500);
 8002706:	f241 1094 	movw	r0, #4500	; 0x1194
 800270a:	f000 f9ab 	bl	8002a64 <DelayUS>

  Write4Bits(0x03 << 4);
 800270e:	2030      	movs	r0, #48	; 0x30
 8002710:	f000 f933 	bl	800297a <Write4Bits>
  DelayUS(4500);
 8002714:	f241 1094 	movw	r0, #4500	; 0x1194
 8002718:	f000 f9a4 	bl	8002a64 <DelayUS>

  Write4Bits(0x02 << 4);
 800271c:	2020      	movs	r0, #32
 800271e:	f000 f92c 	bl	800297a <Write4Bits>
  DelayUS(100);
 8002722:	2064      	movs	r0, #100	; 0x64
 8002724:	f000 f99e 	bl	8002a64 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HD44780_Init+0xf4>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	f043 0320 	orr.w	r3, r3, #32
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f8e4 	bl	8002900 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <HD44780_Init+0xf8>)
 800273a:	2204      	movs	r2, #4
 800273c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800273e:	f000 f875 	bl	800282c <HD44780_Display>
  HD44780_Clear();
 8002742:	f000 f82b 	bl	800279c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HD44780_Init+0xfc>)
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HD44780_Init+0xfc>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f8d2 	bl	8002900 <SendCommand>
  DelayUS(4500);
 800275c:	f241 1094 	movw	r0, #4500	; 0x1194
 8002760:	f000 f980 	bl	8002a64 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8002764:	490b      	ldr	r1, [pc, #44]	; (8002794 <HD44780_Init+0x100>)
 8002766:	2000      	movs	r0, #0
 8002768:	f000 f88c 	bl	8002884 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800276c:	490a      	ldr	r1, [pc, #40]	; (8002798 <HD44780_Init+0x104>)
 800276e:	2001      	movs	r0, #1
 8002770:	f000 f888 	bl	8002884 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8002774:	f000 f81d 	bl	80027b2 <HD44780_Home>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200056b3 	.word	0x200056b3
 8002784:	200056b4 	.word	0x200056b4
 8002788:	200056b0 	.word	0x200056b0
 800278c:	200056b1 	.word	0x200056b1
 8002790:	200056b2 	.word	0x200056b2
 8002794:	20000004 	.word	0x20000004
 8002798:	2000000c 	.word	0x2000000c

0800279c <HD44780_Clear>:

void HD44780_Clear()
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f000 f8ad 	bl	8002900 <SendCommand>
  DelayUS(2000);
 80027a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027aa:	f000 f95b 	bl	8002a64 <DelayUS>
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HD44780_Home>:

void HD44780_Home()
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80027b6:	2002      	movs	r0, #2
 80027b8:	f000 f8a2 	bl	8002900 <SendCommand>
  DelayUS(2000);
 80027bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027c0:	f000 f950 	bl	8002a64 <DelayUS>
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	460a      	mov	r2, r1
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HD44780_SetCursor+0x5c>)
 80027da:	f107 0408 	add.w	r4, r7, #8
 80027de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HD44780_SetCursor+0x60>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	79ba      	ldrb	r2, [r7, #6]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d303      	bcc.n	80027f6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HD44780_SetCursor+0x60>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80027f6:	79bb      	ldrb	r3, [r7, #6]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	3318      	adds	r3, #24
 80027fc:	443b      	add	r3, r7
 80027fe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4413      	add	r3, r2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	b25b      	sxtb	r3, r3
 800280c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002810:	b25b      	sxtb	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f873 	bl	8002900 <SendCommand>
}
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	0801187c 	.word	0x0801187c
 8002828:	200056b3 	.word	0x200056b3

0800282c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HD44780_Display+0x28>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HD44780_Display+0x28>)
 800283c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HD44780_Display+0x28>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f859 	bl	8002900 <SendCommand>
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200056b1 	.word	0x200056b1

08002858 <HD44780_NoBlink>:
  dpControl |= LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_NoBlink()
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HD44780_NoBlink+0x28>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HD44780_NoBlink+0x28>)
 8002868:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HD44780_NoBlink+0x28>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	b2db      	uxtb	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f843 	bl	8002900 <SendCommand>
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200056b1 	.word	0x200056b1

08002884 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	b25b      	sxtb	r3, r3
 800289e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f82a 	bl	8002900 <SendCommand>
  for (int i=0; i<8; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e009      	b.n	80028c6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f82e 	bl	800291c <SendChar>
  for (int i=0; i<8; i++)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3301      	adds	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b07      	cmp	r3, #7
 80028ca:	ddf2      	ble.n	80028b2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80028de:	e006      	b.n	80028ee <HD44780_PrintStr+0x18>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f817 	bl	800291c <SendChar>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f4      	bne.n	80028e0 <HD44780_PrintStr+0xa>
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f812 	bl	8002938 <Send>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <SendChar>:

static void SendChar(uint8_t ch)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f804 	bl	8002938 <Send>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	460a      	mov	r2, r1
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	4613      	mov	r3, r2
 8002946:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f023 030f 	bic.w	r3, r3, #15
 800294e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	79bb      	ldrb	r3, [r7, #6]
 800295a:	4313      	orrs	r3, r2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f80b 	bl	800297a <Write4Bits>
  Write4Bits((lownib)|mode);
 8002964:	7bba      	ldrb	r2, [r7, #14]
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	4313      	orrs	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f804 	bl	800297a <Write4Bits>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f808 	bl	800299c <ExpanderWrite>
  PulseEnable(value);
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f820 	bl	80029d4 <PulseEnable>
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <ExpanderWrite+0x30>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80029b2:	f107 020f 	add.w	r2, r7, #15
 80029b6:	230a      	movs	r3, #10
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2301      	movs	r3, #1
 80029bc:	214e      	movs	r1, #78	; 0x4e
 80029be:	4804      	ldr	r0, [pc, #16]	; (80029d0 <ExpanderWrite+0x34>)
 80029c0:	f003 f8cc 	bl	8005b5c <HAL_I2C_Master_Transmit>
}
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200056b4 	.word	0x200056b4
 80029d0:	2000565c 	.word	0x2000565c

080029d4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ffd8 	bl	800299c <ExpanderWrite>
  DelayUS(20);
 80029ec:	2014      	movs	r0, #20
 80029ee:	f000 f839 	bl	8002a64 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ffce 	bl	800299c <ExpanderWrite>
  DelayUS(20);
 8002a00:	2014      	movs	r0, #20
 8002a02:	f000 f82f 	bl	8002a64 <DelayUS>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <DelayInit>:

static void DelayInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <DelayInit+0x4c>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <DelayInit+0x4c>)
 8002a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <DelayInit+0x4c>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <DelayInit+0x4c>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <DelayInit+0x50>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <DelayInit+0x50>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <DelayInit+0x50>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <DelayInit+0x50>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <DelayInit+0x50>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002a4a:	bf00      	nop
  __ASM volatile ("NOP");
 8002a4c:	bf00      	nop
  __ASM volatile ("NOP");
 8002a4e:	bf00      	nop
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000edf0 	.word	0xe000edf0
 8002a60:	e0001000 	.word	0xe0001000

08002a64 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <DelayUS+0x44>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <DelayUS+0x48>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9a      	lsrs	r2, r3, #18
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <DelayUS+0x4c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <DelayUS+0x4c>)
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d8f6      	bhi.n	8002a86 <DelayUS+0x22>
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000014 	.word	0x20000014
 8002aac:	431bde83 	.word	0x431bde83
 8002ab0:	e0001000 	.word	0xe0001000

08002ab4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002abc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ac0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002acc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ad0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002ad4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002adc:	e000      	b.n	8002ae0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002ade:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002ae0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f9      	beq.n	8002ade <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002aea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ffd1 	bl	8002ab4 <ITM_SendChar>
	return (ch);
 8002b12:	687b      	ldr	r3, [r7, #4]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b20:	f001 fbbe 	bl	80042a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b24:	f000 f81c 	bl	8002b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b28:	f7ff fcae 	bl	8002488 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b2c:	f7fe fe6e 	bl	800180c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002b30:	f001 fb1a 	bl	8004168 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002b34:	f000 fb16 	bl	8003164 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002b38:	f006 f964 	bl	8008e04 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002b3c:	f000 fe12 	bl	8003764 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002b40:	f000 fe46 	bl	80037d0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8002b44:	f000 fd9c 	bl	8003680 <MX_TIM2_Init>
  MX_ADC2_Init();
 8002b48:	f7fe fccc 	bl	80014e4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002b4c:	f7fe fd48 	bl	80015e0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8002b50:	f7ff fd2a 	bl	80025a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002b54:	f7ff fb6e 	bl	8002234 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b58:	f009 f863 	bl	800bc22 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002b5c:	e7fe      	b.n	8002b5c <main+0x40>
	...

08002b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b094      	sub	sp, #80	; 0x50
 8002b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b66:	f107 031c 	add.w	r3, r7, #28
 8002b6a:	2234      	movs	r2, #52	; 0x34
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00c faf6 	bl	800f160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <SystemClock_Config+0xd0>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <SystemClock_Config+0xd0>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <SystemClock_Config+0xd0>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <SystemClock_Config+0xd4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a22      	ldr	r2, [pc, #136]	; (8002c34 <SystemClock_Config+0xd4>)
 8002baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <SystemClock_Config+0xd4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002bd4:	2390      	movs	r3, #144	; 0x90
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002be0:	2302      	movs	r3, #2
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 fe3b 	bl	8006864 <HAL_RCC_OscConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002bf4:	f000 f832 	bl	8002c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c10:	f107 0308 	add.w	r3, r7, #8
 8002c14:	2104      	movs	r1, #4
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 faa8 	bl	800616c <HAL_RCC_ClockConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c22:	f000 f81b 	bl	8002c5c <Error_Handler>
  }
}
 8002c26:	bf00      	nop
 8002c28:	3750      	adds	r7, #80	; 0x50
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000

08002c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c4a:	f001 fb4b 	bl	80042e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40000400 	.word	0x40000400

08002c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c60:	b672      	cpsid	i
}
 8002c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c64:	e7fe      	b.n	8002c64 <Error_Handler+0x8>
	...

08002c68 <menuSelector>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void menuSelector(button_t button)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]

	switch (selector)
 8002c72:	4bb8      	ldr	r3, [pc, #736]	; (8002f54 <menuSelector+0x2ec>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	f200 81d0 	bhi.w	800301c <menuSelector+0x3b4>
 8002c7c:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <menuSelector+0x1c>)
 8002c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002c9d 	.word	0x08002c9d
 8002c88:	08002d57 	.word	0x08002d57
 8002c8c:	08002dcb 	.word	0x08002dcb
 8002c90:	08002e89 	.word	0x08002e89
 8002c94:	08002edb 	.word	0x08002edb
 8002c98:	08002fb1 	.word	0x08002fb1
	{

	case (MENU_START):
		if (BUTTON_LEFT == button)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d121      	bne.n	8002ce6 <menuSelector+0x7e>
		{
			HD44780_Clear();
 8002ca2:	f7ff fd7b 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff fd8d 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("CALIB");
 8002cae:	48aa      	ldr	r0, [pc, #680]	; (8002f58 <menuSelector+0x2f0>)
 8002cb0:	f7ff fe11 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7ff fd86 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002cbc:	48a7      	ldr	r0, [pc, #668]	; (8002f5c <menuSelector+0x2f4>)
 8002cbe:	f7ff fe0a 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(10,0);
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	200a      	movs	r0, #10
 8002cc6:	f7ff fd7f 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("START");
 8002cca:	48a5      	ldr	r0, [pc, #660]	; (8002f60 <menuSelector+0x2f8>)
 8002ccc:	f7ff fe03 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	200a      	movs	r0, #10
 8002cd4:	f7ff fd78 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002cd8:	48a2      	ldr	r0, [pc, #648]	; (8002f64 <menuSelector+0x2fc>)
 8002cda:	f7ff fdfc 	bl	80028d6 <HD44780_PrintStr>
			selector = MENU_SAG;
 8002cde:	4b9d      	ldr	r3, [pc, #628]	; (8002f54 <menuSelector+0x2ec>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e034      	b.n	8002d50 <menuSelector+0xe8>

		}
		else if (BUTTON_RIGHT == button)
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d113      	bne.n	8002d14 <menuSelector+0xac>
		{
			HD44780_Clear();
 8002cec:	f7ff fd56 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7ff fd68 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("START MESSURE");
 8002cf8:	489b      	ldr	r0, [pc, #620]	; (8002f68 <menuSelector+0x300>)
 8002cfa:	f7ff fdec 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002cfe:	2101      	movs	r1, #1
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7ff fd61 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002d06:	4897      	ldr	r0, [pc, #604]	; (8002f64 <menuSelector+0x2fc>)
 8002d08:	f7ff fde5 	bl	80028d6 <HD44780_PrintStr>
			selector = MENU_MEASURMENT;
 8002d0c:	4b91      	ldr	r3, [pc, #580]	; (8002f54 <menuSelector+0x2ec>)
 8002d0e:	2204      	movs	r2, #4
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e01d      	b.n	8002d50 <menuSelector+0xe8>

		}
		else
		{
				 HD44780_Clear();
 8002d14:	f7ff fd42 	bl	800279c <HD44780_Clear>
				 HD44780_SetCursor(0,0);
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7ff fd54 	bl	80027c8 <HD44780_SetCursor>
				 HD44780_PrintStr("SAG");
 8002d20:	4892      	ldr	r0, [pc, #584]	; (8002f6c <menuSelector+0x304>)
 8002d22:	f7ff fdd8 	bl	80028d6 <HD44780_PrintStr>
				 HD44780_SetCursor(0,1);
 8002d26:	2101      	movs	r1, #1
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7ff fd4d 	bl	80027c8 <HD44780_SetCursor>
				 HD44780_PrintStr("LEFT");
 8002d2e:	488b      	ldr	r0, [pc, #556]	; (8002f5c <menuSelector+0x2f4>)
 8002d30:	f7ff fdd1 	bl	80028d6 <HD44780_PrintStr>
				 HD44780_SetCursor(9,0);
 8002d34:	2100      	movs	r1, #0
 8002d36:	2009      	movs	r0, #9
 8002d38:	f7ff fd46 	bl	80027c8 <HD44780_SetCursor>
				 HD44780_PrintStr("MESSURE");
 8002d3c:	488c      	ldr	r0, [pc, #560]	; (8002f70 <menuSelector+0x308>)
 8002d3e:	f7ff fdca 	bl	80028d6 <HD44780_PrintStr>
				 HD44780_SetCursor(11,1);
 8002d42:	2101      	movs	r1, #1
 8002d44:	200b      	movs	r0, #11
 8002d46:	f7ff fd3f 	bl	80027c8 <HD44780_SetCursor>
				 HD44780_PrintStr("RIGHT");
 8002d4a:	488a      	ldr	r0, [pc, #552]	; (8002f74 <menuSelector+0x30c>)
 8002d4c:	f7ff fdc3 	bl	80028d6 <HD44780_PrintStr>
		}
		stopAdcDma();
 8002d50:	f000 fe48 	bl	80039e4 <stopAdcDma>
		break;
 8002d54:	e162      	b.n	800301c <menuSelector+0x3b4>

	case (MENU_SAG):
		if (BUTTON_SELECT == button)
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <menuSelector+0x10a>
		{
			startAdcDma();
 8002d5c:	f000 fe22 	bl	80039a4 <startAdcDma>
			HD44780_Clear();
 8002d60:	f7ff fd1c 	bl	800279c <HD44780_Clear>
			selector = MENU_SAG_START;
 8002d64:	4b7b      	ldr	r3, [pc, #492]	; (8002f54 <menuSelector+0x2ec>)
 8002d66:	2203      	movs	r2, #3
 8002d68:	701a      	strb	r2, [r3, #0]
			puts("pomiar rozpoczety, kliknij select aby zakonczyc\n");
 8002d6a:	4883      	ldr	r0, [pc, #524]	; (8002f78 <menuSelector+0x310>)
 8002d6c:	f00c f8f8 	bl	800ef60 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002d70:	e154      	b.n	800301c <menuSelector+0x3b4>
		else if (BUTTON_LEFT == button)
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d11d      	bne.n	8002db4 <menuSelector+0x14c>
			selector = MENU_CALIBRATION;
 8002d78:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <menuSelector+0x2ec>)
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	701a      	strb	r2, [r3, #0]
			HD44780_Init(2);
 8002d7e:	2002      	movs	r0, #2
 8002d80:	f7ff fc88 	bl	8002694 <HD44780_Init>
			HD44780_Clear();
 8002d84:	f7ff fd0a 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7ff fd1c 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("CALIBRATION");
 8002d90:	487a      	ldr	r0, [pc, #488]	; (8002f7c <menuSelector+0x314>)
 8002d92:	f7ff fda0 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002d96:	2101      	movs	r1, #1
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7ff fd15 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("START");
 8002d9e:	4870      	ldr	r0, [pc, #448]	; (8002f60 <menuSelector+0x2f8>)
 8002da0:	f7ff fd99 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002da4:	2101      	movs	r1, #1
 8002da6:	200a      	movs	r0, #10
 8002da8:	f7ff fd0e 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002dac:	486d      	ldr	r0, [pc, #436]	; (8002f64 <menuSelector+0x2fc>)
 8002dae:	f7ff fd92 	bl	80028d6 <HD44780_PrintStr>
		break;
 8002db2:	e133      	b.n	800301c <menuSelector+0x3b4>
		else if (BUTTON_RIGHT == button)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d103      	bne.n	8002dc2 <menuSelector+0x15a>
			selector = MENU_START;
 8002dba:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <menuSelector+0x2ec>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
		break;
 8002dc0:	e12c      	b.n	800301c <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002dc2:	486f      	ldr	r0, [pc, #444]	; (8002f80 <menuSelector+0x318>)
 8002dc4:	f00c f8cc 	bl	800ef60 <puts>
		break;
 8002dc8:	e128      	b.n	800301c <menuSelector+0x3b4>
	case (MENU_CALIBRATION):
		if (BUTTON_SELECT == button)
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d132      	bne.n	8002e36 <menuSelector+0x1ce>
		{
			startAdcDma();
 8002dd0:	f000 fde8 	bl	80039a4 <startAdcDma>
			travelPressureSensorCalibration();
 8002dd4:	f000 fe1a 	bl	8003a0c <travelPressureSensorCalibration>
			HD44780_Clear();
 8002dd8:	f7ff fce0 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7ff fcf2 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("CAL FINISH");
 8002de4:	4867      	ldr	r0, [pc, #412]	; (8002f84 <menuSelector+0x31c>)
 8002de6:	f7ff fd76 	bl	80028d6 <HD44780_PrintStr>
			osDelay(2000);
 8002dea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dee:	f008 ff7b 	bl	800bce8 <osDelay>
			HD44780_Clear();
 8002df2:	f7ff fcd3 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002df6:	2100      	movs	r1, #0
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7ff fce5 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002dfe:	485b      	ldr	r0, [pc, #364]	; (8002f6c <menuSelector+0x304>)
 8002e00:	f7ff fd69 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002e04:	2101      	movs	r1, #1
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7ff fcde 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002e0c:	4853      	ldr	r0, [pc, #332]	; (8002f5c <menuSelector+0x2f4>)
 8002e0e:	f7ff fd62 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002e12:	2100      	movs	r1, #0
 8002e14:	2009      	movs	r0, #9
 8002e16:	f7ff fcd7 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002e1a:	4855      	ldr	r0, [pc, #340]	; (8002f70 <menuSelector+0x308>)
 8002e1c:	f7ff fd5b 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002e20:	2101      	movs	r1, #1
 8002e22:	200b      	movs	r0, #11
 8002e24:	f7ff fcd0 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002e28:	4852      	ldr	r0, [pc, #328]	; (8002f74 <menuSelector+0x30c>)
 8002e2a:	f7ff fd54 	bl	80028d6 <HD44780_PrintStr>
			selector = MENU_START;
 8002e2e:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <menuSelector+0x2ec>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002e34:	e0f2      	b.n	800301c <menuSelector+0x3b4>
		else if (BUTTON_RIGHT == button)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d121      	bne.n	8002e80 <menuSelector+0x218>
			selector = MENU_START;
 8002e3c:	4b45      	ldr	r3, [pc, #276]	; (8002f54 <menuSelector+0x2ec>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
			HD44780_Clear();
 8002e42:	f7ff fcab 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002e46:	2100      	movs	r1, #0
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7ff fcbd 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002e4e:	4847      	ldr	r0, [pc, #284]	; (8002f6c <menuSelector+0x304>)
 8002e50:	f7ff fd41 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002e54:	2101      	movs	r1, #1
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7ff fcb6 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002e5c:	483f      	ldr	r0, [pc, #252]	; (8002f5c <menuSelector+0x2f4>)
 8002e5e:	f7ff fd3a 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002e62:	2100      	movs	r1, #0
 8002e64:	2009      	movs	r0, #9
 8002e66:	f7ff fcaf 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002e6a:	4841      	ldr	r0, [pc, #260]	; (8002f70 <menuSelector+0x308>)
 8002e6c:	f7ff fd33 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002e70:	2101      	movs	r1, #1
 8002e72:	200b      	movs	r0, #11
 8002e74:	f7ff fca8 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002e78:	483e      	ldr	r0, [pc, #248]	; (8002f74 <menuSelector+0x30c>)
 8002e7a:	f7ff fd2c 	bl	80028d6 <HD44780_PrintStr>
		break;
 8002e7e:	e0cd      	b.n	800301c <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002e80:	483f      	ldr	r0, [pc, #252]	; (8002f80 <menuSelector+0x318>)
 8002e82:	f00c f86d 	bl	800ef60 <puts>
		break;
 8002e86:	e0c9      	b.n	800301c <menuSelector+0x3b4>
	case (MENU_SAG_START):
		if (BUTTON_SELECT == button)
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d121      	bne.n	8002ed2 <menuSelector+0x26a>
		{

			selector = MENU_START;
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <menuSelector+0x2ec>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
			HD44780_Clear();
 8002e94:	f7ff fc82 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff fc94 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002ea0:	4832      	ldr	r0, [pc, #200]	; (8002f6c <menuSelector+0x304>)
 8002ea2:	f7ff fd18 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7ff fc8d 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002eae:	482b      	ldr	r0, [pc, #172]	; (8002f5c <menuSelector+0x2f4>)
 8002eb0:	f7ff fd11 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2009      	movs	r0, #9
 8002eb8:	f7ff fc86 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002ebc:	482c      	ldr	r0, [pc, #176]	; (8002f70 <menuSelector+0x308>)
 8002ebe:	f7ff fd0a 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	200b      	movs	r0, #11
 8002ec6:	f7ff fc7f 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002eca:	482a      	ldr	r0, [pc, #168]	; (8002f74 <menuSelector+0x30c>)
 8002ecc:	f7ff fd03 	bl	80028d6 <HD44780_PrintStr>
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 8002ed0:	e0a4      	b.n	800301c <menuSelector+0x3b4>
			puts("nacisnij select aby wrocic do menu start");
 8002ed2:	482d      	ldr	r0, [pc, #180]	; (8002f88 <menuSelector+0x320>)
 8002ed4:	f00c f844 	bl	800ef60 <puts>
		break;
 8002ed8:	e0a0      	b.n	800301c <menuSelector+0x3b4>

	case (MENU_MEASURMENT):
		if (BUTTON_SELECT == button)
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d134      	bne.n	8002f4a <menuSelector+0x2e2>
		{
			HD44780_Clear();
 8002ee0:	f7ff fc5c 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7ff fc6e 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("STARTING");
 8002eec:	4827      	ldr	r0, [pc, #156]	; (8002f8c <menuSelector+0x324>)
 8002eee:	f7ff fcf2 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7ff fc67 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("FINISH");
 8002efa:	4825      	ldr	r0, [pc, #148]	; (8002f90 <menuSelector+0x328>)
 8002efc:	f7ff fceb 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002f00:	2101      	movs	r1, #1
 8002f02:	200a      	movs	r0, #10
 8002f04:	f7ff fc60 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002f08:	4816      	ldr	r0, [pc, #88]	; (8002f64 <menuSelector+0x2fc>)
 8002f0a:	f7ff fce4 	bl	80028d6 <HD44780_PrintStr>
			setPath(dir, frontSensor, rearSensor, frontPressureSensor,
 8002f0e:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <menuSelector+0x32c>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <menuSelector+0x330>)
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <menuSelector+0x334>)
 8002f1a:	4a21      	ldr	r2, [pc, #132]	; (8002fa0 <menuSelector+0x338>)
 8002f1c:	4921      	ldr	r1, [pc, #132]	; (8002fa4 <menuSelector+0x33c>)
 8002f1e:	4822      	ldr	r0, [pc, #136]	; (8002fa8 <menuSelector+0x340>)
 8002f20:	f7fd fff0 	bl	8000f04 <setPath>
					rearPressureSensor, path);
			createNewFile(dir, frontSensor, rearSensor, frontPressureSensor,
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <menuSelector+0x32c>)
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <menuSelector+0x330>)
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <menuSelector+0x334>)
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <menuSelector+0x338>)
 8002f30:	491c      	ldr	r1, [pc, #112]	; (8002fa4 <menuSelector+0x33c>)
 8002f32:	481d      	ldr	r0, [pc, #116]	; (8002fa8 <menuSelector+0x340>)
 8002f34:	f7fe f81a 	bl	8000f6c <createNewFile>
					rearPressureSensor, &path);
			startAdcDma();
 8002f38:	f000 fd34 	bl	80039a4 <startAdcDma>
			selector = MENU_MEASURMENT_START;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <menuSelector+0x2ec>)
 8002f3e:	2205      	movs	r2, #5
 8002f40:	701a      	strb	r2, [r3, #0]
			puts("pomiar ciagly rozpoczety, kliknij select aby zakonczyc\n");
 8002f42:	481a      	ldr	r0, [pc, #104]	; (8002fac <menuSelector+0x344>)
 8002f44:	f00c f80c 	bl	800ef60 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002f48:	e068      	b.n	800301c <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002f4a:	480d      	ldr	r0, [pc, #52]	; (8002f80 <menuSelector+0x318>)
 8002f4c:	f00c f808 	bl	800ef60 <puts>
		break;
 8002f50:	e064      	b.n	800301c <menuSelector+0x3b4>
 8002f52:	bf00      	nop
 8002f54:	200056b5 	.word	0x200056b5
 8002f58:	0801188c 	.word	0x0801188c
 8002f5c:	08011894 	.word	0x08011894
 8002f60:	0801189c 	.word	0x0801189c
 8002f64:	080118a4 	.word	0x080118a4
 8002f68:	080118ac 	.word	0x080118ac
 8002f6c:	080118bc 	.word	0x080118bc
 8002f70:	080118c0 	.word	0x080118c0
 8002f74:	080118c8 	.word	0x080118c8
 8002f78:	080118d0 	.word	0x080118d0
 8002f7c:	08011904 	.word	0x08011904
 8002f80:	08011910 	.word	0x08011910
 8002f84:	08011938 	.word	0x08011938
 8002f88:	08011944 	.word	0x08011944
 8002f8c:	08011970 	.word	0x08011970
 8002f90:	0801197c 	.word	0x0801197c
 8002f94:	200056b6 	.word	0x200056b6
 8002f98:	20005708 	.word	0x20005708
 8002f9c:	200056f4 	.word	0x200056f4
 8002fa0:	200056e0 	.word	0x200056e0
 8002fa4:	200056cc 	.word	0x200056cc
 8002fa8:	200056b8 	.word	0x200056b8
 8002fac:	08011984 	.word	0x08011984

	case (MENU_MEASURMENT_START):
		if (BUTTON_SELECT == button)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d12e      	bne.n	8003014 <menuSelector+0x3ac>
		{

			HD44780_Clear();
 8002fb6:	f7ff fbf1 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002fba:	2100      	movs	r1, #0
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7ff fc03 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("FINISHED");
 8002fc2:	4818      	ldr	r0, [pc, #96]	; (8003024 <menuSelector+0x3bc>)
 8002fc4:	f7ff fc87 	bl	80028d6 <HD44780_PrintStr>
			osDelay(2000);
 8002fc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fcc:	f008 fe8c 	bl	800bce8 <osDelay>

			HD44780_Clear();
 8002fd0:	f7ff fbe4 	bl	800279c <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff fbf6 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002fdc:	4812      	ldr	r0, [pc, #72]	; (8003028 <menuSelector+0x3c0>)
 8002fde:	f7ff fc7a 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7ff fbef 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002fea:	4810      	ldr	r0, [pc, #64]	; (800302c <menuSelector+0x3c4>)
 8002fec:	f7ff fc73 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	2009      	movs	r0, #9
 8002ff4:	f7ff fbe8 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002ff8:	480d      	ldr	r0, [pc, #52]	; (8003030 <menuSelector+0x3c8>)
 8002ffa:	f7ff fc6c 	bl	80028d6 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002ffe:	2101      	movs	r1, #1
 8003000:	200b      	movs	r0, #11
 8003002:	f7ff fbe1 	bl	80027c8 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8003006:	480b      	ldr	r0, [pc, #44]	; (8003034 <menuSelector+0x3cc>)
 8003008:	f7ff fc65 	bl	80028d6 <HD44780_PrintStr>
			selector = MENU_START;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <menuSelector+0x3d0>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 8003012:	e002      	b.n	800301a <menuSelector+0x3b2>
			puts("nacisnij select aby wrocic do menu start");
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <menuSelector+0x3d4>)
 8003016:	f00b ffa3 	bl	800ef60 <puts>
		break;
 800301a:	bf00      	nop

	default:
	}

}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	080119bc 	.word	0x080119bc
 8003028:	080118bc 	.word	0x080118bc
 800302c:	08011894 	.word	0x08011894
 8003030:	080118c0 	.word	0x080118c0
 8003034:	080118c8 	.word	0x080118c8
 8003038:	200056b5 	.word	0x200056b5
 800303c:	08011944 	.word	0x08011944

08003040 <menuCalculateBlock>:
void menuCalculateBlock(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
	switch (selector)
 8003046:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <menuCalculateBlock+0x100>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d002      	beq.n	8003054 <menuCalculateBlock+0x14>
 800304e:	2b05      	cmp	r3, #5
 8003050:	d06b      	beq.n	800312a <menuCalculateBlock+0xea>
				rearPressureSensor);
		break;
	default:
	}

}
 8003052:	e071      	b.n	8003138 <menuCalculateBlock+0xf8>
		int16_t result[2] =
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
		int16_t resultPressure[2] =
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
		char lcdFirstLineTravel[8] = {0};
 800305c:	2300      	movs	r3, #0
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
		char lcSecondLineTravel[8] = {0};
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
		char lcdFirstLinePressure[8] = {0};
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
		char lcSecondLinePressure[8] = {0};
 8003074:	2300      	movs	r3, #0
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	607b      	str	r3, [r7, #4]
		processDataSag(result, resultPressure);
 800307c:	f107 0220 	add.w	r2, r7, #32
 8003080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd78 	bl	8003b7c <processDataSag>
		sprintf(lcdFirstLineTravel,"FT: %d", result[1]);
 800308c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003090:	461a      	mov	r2, r3
 8003092:	f107 0318 	add.w	r3, r7, #24
 8003096:	492b      	ldr	r1, [pc, #172]	; (8003144 <menuCalculateBlock+0x104>)
 8003098:	4618      	mov	r0, r3
 800309a:	f00b ff69 	bl	800ef70 <siprintf>
		sprintf(lcSecondLineTravel,"RT: %d", result[0]);
 800309e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80030a2:	461a      	mov	r2, r3
 80030a4:	f107 0310 	add.w	r3, r7, #16
 80030a8:	4927      	ldr	r1, [pc, #156]	; (8003148 <menuCalculateBlock+0x108>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f00b ff60 	bl	800ef70 <siprintf>
		sprintf(lcdFirstLinePressure, "FP: %d", resultPressure[1]);
 80030b0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80030b4:	461a      	mov	r2, r3
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	4924      	ldr	r1, [pc, #144]	; (800314c <menuCalculateBlock+0x10c>)
 80030bc:	4618      	mov	r0, r3
 80030be:	f00b ff57 	bl	800ef70 <siprintf>
		sprintf(lcSecondLinePressure, "RP: %d", resultPressure[0]);
 80030c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80030c6:	461a      	mov	r2, r3
 80030c8:	463b      	mov	r3, r7
 80030ca:	4921      	ldr	r1, [pc, #132]	; (8003150 <menuCalculateBlock+0x110>)
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00b ff4f 	bl	800ef70 <siprintf>
		HD44780_NoBlink();
 80030d2:	f7ff fbc1 	bl	8002858 <HD44780_NoBlink>
		HD44780_Clear();
 80030d6:	f7ff fb61 	bl	800279c <HD44780_Clear>
		HD44780_SetCursor(0,0);
 80030da:	2100      	movs	r1, #0
 80030dc:	2000      	movs	r0, #0
 80030de:	f7ff fb73 	bl	80027c8 <HD44780_SetCursor>
		HD44780_PrintStr(lcdFirstLineTravel);
 80030e2:	f107 0318 	add.w	r3, r7, #24
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fbf5 	bl	80028d6 <HD44780_PrintStr>
		HD44780_SetCursor(0,1);
 80030ec:	2101      	movs	r1, #1
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff fb6a 	bl	80027c8 <HD44780_SetCursor>
		HD44780_PrintStr(lcSecondLineTravel);
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fbec 	bl	80028d6 <HD44780_PrintStr>
		HD44780_SetCursor(9,0);
 80030fe:	2100      	movs	r1, #0
 8003100:	2009      	movs	r0, #9
 8003102:	f7ff fb61 	bl	80027c8 <HD44780_SetCursor>
		HD44780_PrintStr(lcdFirstLinePressure);
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fbe3 	bl	80028d6 <HD44780_PrintStr>
		HD44780_SetCursor(9,1);
 8003110:	2101      	movs	r1, #1
 8003112:	2009      	movs	r0, #9
 8003114:	f7ff fb58 	bl	80027c8 <HD44780_SetCursor>
		HD44780_PrintStr(lcSecondLinePressure);
 8003118:	463b      	mov	r3, r7
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fbdb 	bl	80028d6 <HD44780_PrintStr>
		osDelay(1000);
 8003120:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003124:	f008 fde0 	bl	800bce8 <osDelay>
		break;
 8003128:	e006      	b.n	8003138 <menuCalculateBlock+0xf8>
		processData(frontSensor, rearSensor, frontPressureSensor,
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <menuCalculateBlock+0x114>)
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <menuCalculateBlock+0x118>)
 800312e:	490b      	ldr	r1, [pc, #44]	; (800315c <menuCalculateBlock+0x11c>)
 8003130:	480b      	ldr	r0, [pc, #44]	; (8003160 <menuCalculateBlock+0x120>)
 8003132:	f000 fcef 	bl	8003b14 <processData>
		break;
 8003136:	bf00      	nop
}
 8003138:	bf00      	nop
 800313a:	3728      	adds	r7, #40	; 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200056b5 	.word	0x200056b5
 8003144:	080119c8 	.word	0x080119c8
 8003148:	080119d0 	.word	0x080119d0
 800314c:	080119d8 	.word	0x080119d8
 8003150:	080119e0 	.word	0x080119e0
 8003154:	20005708 	.word	0x20005708
 8003158:	200056f4 	.word	0x200056f4
 800315c:	200056e0 	.word	0x200056e0
 8003160:	200056cc 	.word	0x200056cc

08003164 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <MX_SPI2_Init+0x64>)
 800316a:	4a18      	ldr	r2, [pc, #96]	; (80031cc <MX_SPI2_Init+0x68>)
 800316c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <MX_SPI2_Init+0x64>)
 8003170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <MX_SPI2_Init+0x64>)
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <MX_SPI2_Init+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <MX_SPI2_Init+0x64>)
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <MX_SPI2_Init+0x64>)
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <MX_SPI2_Init+0x64>)
 8003190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003194:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <MX_SPI2_Init+0x64>)
 8003198:	2218      	movs	r2, #24
 800319a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800319c:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <MX_SPI2_Init+0x64>)
 800319e:	2200      	movs	r2, #0
 80031a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <MX_SPI2_Init+0x64>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <MX_SPI2_Init+0x64>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <MX_SPI2_Init+0x64>)
 80031b0:	220a      	movs	r2, #10
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031b4:	4804      	ldr	r0, [pc, #16]	; (80031c8 <MX_SPI2_Init+0x64>)
 80031b6:	f003 fdf3 	bl	8006da0 <HAL_SPI_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031c0:	f7ff fd4c 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	2000571c 	.word	0x2000571c
 80031cc:	40003800 	.word	0x40003800

080031d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a30      	ldr	r2, [pc, #192]	; (80032b0 <HAL_SPI_MspInit+0xe0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d15a      	bne.n	80032a8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a2e      	ldr	r2, [pc, #184]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 80031fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_SPI_MspInit+0xe4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003246:	2302      	movs	r3, #2
 8003248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003256:	2307      	movs	r3, #7
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4619      	mov	r1, r3
 8003260:	4815      	ldr	r0, [pc, #84]	; (80032b8 <HAL_SPI_MspInit+0xe8>)
 8003262:	f002 f989 	bl	8005578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003266:	2304      	movs	r3, #4
 8003268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326a:	2302      	movs	r3, #2
 800326c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003272:	2303      	movs	r3, #3
 8003274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003276:	2305      	movs	r3, #5
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327a:	f107 0314 	add.w	r3, r7, #20
 800327e:	4619      	mov	r1, r3
 8003280:	480d      	ldr	r0, [pc, #52]	; (80032b8 <HAL_SPI_MspInit+0xe8>)
 8003282:	f002 f979 	bl	8005578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800328a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003298:	2305      	movs	r3, #5
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	4619      	mov	r1, r3
 80032a2:	4806      	ldr	r0, [pc, #24]	; (80032bc <HAL_SPI_MspInit+0xec>)
 80032a4:	f002 f968 	bl	8005578 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80032a8:	bf00      	nop
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40003800 	.word	0x40003800
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020800 	.word	0x40020800
 80032bc:	40020400 	.word	0x40020400

080032c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_MspInit+0x54>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_MspInit+0x54>)
 80032d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d4:	6453      	str	r3, [r2, #68]	; 0x44
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_MspInit+0x54>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_MspInit+0x54>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_MspInit+0x54>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_MspInit+0x54>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032fe:	2200      	movs	r2, #0
 8003300:	210f      	movs	r1, #15
 8003302:	f06f 0001 	mvn.w	r0, #1
 8003306:	f001 fd2d 	bl	8004d64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800

08003318 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08e      	sub	sp, #56	; 0x38
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_InitTick+0xe4>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	4a32      	ldr	r2, [pc, #200]	; (80033fc <HAL_InitTick+0xe4>)
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	6413      	str	r3, [r2, #64]	; 0x40
 8003338:	4b30      	ldr	r3, [pc, #192]	; (80033fc <HAL_InitTick+0xe4>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003344:	f107 0210 	add.w	r2, r7, #16
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f003 f826 	bl	80063a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800335e:	f002 fff7 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8003362:	6378      	str	r0, [r7, #52]	; 0x34
 8003364:	e004      	b.n	8003370 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003366:	f002 fff3 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800336a:	4603      	mov	r3, r0
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	4a23      	ldr	r2, [pc, #140]	; (8003400 <HAL_InitTick+0xe8>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	0c9b      	lsrs	r3, r3, #18
 800337a:	3b01      	subs	r3, #1
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_InitTick+0xec>)
 8003380:	4a21      	ldr	r2, [pc, #132]	; (8003408 <HAL_InitTick+0xf0>)
 8003382:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003384:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <HAL_InitTick+0xec>)
 8003386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800338a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_InitTick+0xec>)
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <HAL_InitTick+0xec>)
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_InitTick+0xec>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_InitTick+0xec>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80033a4:	4817      	ldr	r0, [pc, #92]	; (8003404 <HAL_InitTick+0xec>)
 80033a6:	f004 f93b 	bl	8007620 <HAL_TIM_Base_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80033b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d11b      	bne.n	80033f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80033b8:	4812      	ldr	r0, [pc, #72]	; (8003404 <HAL_InitTick+0xec>)
 80033ba:	f004 fa11 	bl	80077e0 <HAL_TIM_Base_Start_IT>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80033c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033cc:	201d      	movs	r0, #29
 80033ce:	f001 fce5 	bl	8004d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b0f      	cmp	r3, #15
 80033d6:	d808      	bhi.n	80033ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80033d8:	2200      	movs	r2, #0
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	201d      	movs	r0, #29
 80033de:	f001 fcc1 	bl	8004d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <HAL_InitTick+0xf4>)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e002      	b.n	80033f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3738      	adds	r7, #56	; 0x38
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	431bde83 	.word	0x431bde83
 8003404:	20005774 	.word	0x20005774
 8003408:	40000400 	.word	0x40000400
 800340c:	20000028 	.word	0x20000028

08003410 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <SDTimer_Handler+0x40>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <SDTimer_Handler+0x1c>
		Timer1--;
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <SDTimer_Handler+0x40>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b2da      	uxtb	r2, r3
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <SDTimer_Handler+0x40>)
 800342a:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <SDTimer_Handler+0x44>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d006      	beq.n	8003444 <SDTimer_Handler+0x34>
		Timer2--;
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <SDTimer_Handler+0x44>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SDTimer_Handler+0x44>)
 8003442:	701a      	strb	r2, [r3, #0]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	200057bd 	.word	0x200057bd
 8003454:	200057be 	.word	0x200057be

08003458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800345c:	e7fe      	b.n	800345c <NMI_Handler+0x4>

0800345e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003462:	e7fe      	b.n	8003462 <HardFault_Handler+0x4>

08003464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003468:	e7fe      	b.n	8003468 <MemManage_Handler+0x4>

0800346a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800346e:	e7fe      	b.n	800346e <BusFault_Handler+0x4>

08003470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <UsageFault_Handler+0x4>

08003476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <TIM3_IRQHandler+0x30>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	3301      	adds	r3, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <TIM3_IRQHandler+0x30>)
 8003494:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <TIM3_IRQHandler+0x30>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b09      	cmp	r3, #9
 800349e:	d904      	bls.n	80034aa <TIM3_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <TIM3_IRQHandler+0x30>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80034a6:	f7ff ffb3 	bl	8003410 <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034aa:	4803      	ldr	r0, [pc, #12]	; (80034b8 <TIM3_IRQHandler+0x34>)
 80034ac:	f004 fa61 	bl	8007972 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200057bc 	.word	0x200057bc
 80034b8:	20005774 	.word	0x20005774

080034bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <DMA2_Stream2_IRQHandler+0x10>)
 80034c2:	f001 fdef 	bl	80050a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000740 	.word	0x20000740

080034d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
	return 1;
 80034d4:	2301      	movs	r3, #1
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <_kill>:

int _kill(int pid, int sig)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80034ea:	f00b fef5 	bl	800f2d8 <__errno>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2216      	movs	r2, #22
 80034f2:	601a      	str	r2, [r3, #0]
	return -1;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_exit>:

void _exit(int status)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003508:	f04f 31ff 	mov.w	r1, #4294967295
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ffe7 	bl	80034e0 <_kill>
	while (1)
 8003512:	e7fe      	b.n	8003512 <_exit+0x12>

08003514 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e00a      	b.n	800353c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003526:	f3af 8000 	nop.w
 800352a:	4601      	mov	r1, r0
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	60ba      	str	r2, [r7, #8]
 8003532:	b2ca      	uxtb	r2, r1
 8003534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3301      	adds	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	dbf0      	blt.n	8003526 <_read+0x12>
	}

	return len;
 8003544:	687b      	ldr	r3, [r7, #4]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e009      	b.n	8003574 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	60ba      	str	r2, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff faca 	bl	8002b02 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	3301      	adds	r3, #1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	dbf1      	blt.n	8003560 <_write+0x12>
	}
	return len;
 800357c:	687b      	ldr	r3, [r7, #4]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_close>:

int _close(int file)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <_fstat>:

int _fstat(int file, struct stat *st)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035ae:	605a      	str	r2, [r3, #4]
	return 0;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <_isatty>:

int _isatty(int file)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80035c6:	2301      	movs	r3, #1
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <_sbrk+0x64>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <_sbrk+0x64>)
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <_sbrk+0x68>)
 8003610:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d207      	bcs.n	8003630 <_sbrk+0x40>
	{
		errno = ENOMEM;
 8003620:	f00b fe5a 	bl	800f2d8 <__errno>
 8003624:	4603      	mov	r3, r0
 8003626:	220c      	movs	r2, #12
 8003628:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	e009      	b.n	8003644 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <_sbrk+0x64>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <_sbrk+0x64>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <_sbrk+0x64>)
 8003640:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20020000 	.word	0x20020000
 8003650:	00000400 	.word	0x00000400
 8003654:	200057c0 	.word	0x200057c0
 8003658:	2000a010 	.word	0x2000a010

0800365c <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <SystemInit+0x20>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <SystemInit+0x20>)
 8003668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800366c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	; 0x38
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003694:	f107 0320 	add.w	r3, r7, #32
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
 80036ac:	615a      	str	r2, [r3, #20]
 80036ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <MX_TIM2_Init+0xe0>)
 80036b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 80036b8:	4b29      	ldr	r3, [pc, #164]	; (8003760 <MX_TIM2_Init+0xe0>)
 80036ba:	f640 620f 	movw	r2, #3599	; 0xe0f
 80036be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <MX_TIM2_Init+0xe0>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80036c6:	4b26      	ldr	r3, [pc, #152]	; (8003760 <MX_TIM2_Init+0xe0>)
 80036c8:	2263      	movs	r2, #99	; 0x63
 80036ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <MX_TIM2_Init+0xe0>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <MX_TIM2_Init+0xe0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036d8:	4821      	ldr	r0, [pc, #132]	; (8003760 <MX_TIM2_Init+0xe0>)
 80036da:	f003 ffa1 	bl	8007620 <HAL_TIM_Base_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80036e4:	f7ff faba 	bl	8002c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f2:	4619      	mov	r1, r3
 80036f4:	481a      	ldr	r0, [pc, #104]	; (8003760 <MX_TIM2_Init+0xe0>)
 80036f6:	f004 fb07 	bl	8007d08 <HAL_TIM_ConfigClockSource>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003700:	f7ff faac 	bl	8002c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003704:	4816      	ldr	r0, [pc, #88]	; (8003760 <MX_TIM2_Init+0xe0>)
 8003706:	f004 f8db 	bl	80078c0 <HAL_TIM_PWM_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003710:	f7ff faa4 	bl	8002c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003714:	2320      	movs	r3, #32
 8003716:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800371c:	f107 0320 	add.w	r3, r7, #32
 8003720:	4619      	mov	r1, r3
 8003722:	480f      	ldr	r0, [pc, #60]	; (8003760 <MX_TIM2_Init+0xe0>)
 8003724:	f004 feca 	bl	80084bc <HAL_TIMEx_MasterConfigSynchronization>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800372e:	f7ff fa95 	bl	8002c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003732:	2360      	movs	r3, #96	; 0x60
 8003734:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	2200      	movs	r2, #0
 8003746:	4619      	mov	r1, r3
 8003748:	4805      	ldr	r0, [pc, #20]	; (8003760 <MX_TIM2_Init+0xe0>)
 800374a:	f004 fa1b 	bl	8007b84 <HAL_TIM_PWM_ConfigChannel>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003754:	f7ff fa82 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003758:	bf00      	nop
 800375a:	3738      	adds	r7, #56	; 0x38
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200057c4 	.word	0x200057c4

08003764 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800376a:	463b      	mov	r3, r7
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <MX_TIM6_Init+0x64>)
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <MX_TIM6_Init+0x68>)
 8003776:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <MX_TIM6_Init+0x64>)
 800377a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800377e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <MX_TIM6_Init+0x64>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <MX_TIM6_Init+0x64>)
 8003788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800378c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <MX_TIM6_Init+0x64>)
 8003790:	2200      	movs	r2, #0
 8003792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <MX_TIM6_Init+0x64>)
 8003796:	f003 ff43 	bl	8007620 <HAL_TIM_Base_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80037a0:	f7ff fa5c 	bl	8002c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037ac:	463b      	mov	r3, r7
 80037ae:	4619      	mov	r1, r3
 80037b0:	4805      	ldr	r0, [pc, #20]	; (80037c8 <MX_TIM6_Init+0x64>)
 80037b2:	f004 fe83 	bl	80084bc <HAL_TIMEx_MasterConfigSynchronization>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80037bc:	f7ff fa4e 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	2000580c 	.word	0x2000580c
 80037cc:	40001000 	.word	0x40001000

080037d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b096      	sub	sp, #88	; 0x58
 80037d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	615a      	str	r2, [r3, #20]
 8003800:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2220      	movs	r2, #32
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f00b fca9 	bl	800f160 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800380e:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <MX_TIM8_Init+0x134>)
 8003810:	4a3d      	ldr	r2, [pc, #244]	; (8003908 <MX_TIM8_Init+0x138>)
 8003812:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 8003814:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <MX_TIM8_Init+0x134>)
 8003816:	f240 7207 	movw	r2, #1799	; 0x707
 800381a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381c:	4b39      	ldr	r3, [pc, #228]	; (8003904 <MX_TIM8_Init+0x134>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <MX_TIM8_Init+0x134>)
 8003824:	f240 120d 	movw	r2, #269	; 0x10d
 8003828:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <MX_TIM8_Init+0x134>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <MX_TIM8_Init+0x134>)
 8003832:	2200      	movs	r2, #0
 8003834:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003836:	4b33      	ldr	r3, [pc, #204]	; (8003904 <MX_TIM8_Init+0x134>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800383c:	4831      	ldr	r0, [pc, #196]	; (8003904 <MX_TIM8_Init+0x134>)
 800383e:	f003 feef 	bl	8007620 <HAL_TIM_Base_Init>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003848:	f7ff fa08 	bl	8002c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800384c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003852:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003856:	4619      	mov	r1, r3
 8003858:	482a      	ldr	r0, [pc, #168]	; (8003904 <MX_TIM8_Init+0x134>)
 800385a:	f004 fa55 	bl	8007d08 <HAL_TIM_ConfigClockSource>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003864:	f7ff f9fa 	bl	8002c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003868:	4826      	ldr	r0, [pc, #152]	; (8003904 <MX_TIM8_Init+0x134>)
 800386a:	f004 f829 	bl	80078c0 <HAL_TIM_PWM_Init>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003874:	f7ff f9f2 	bl	8002c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003878:	2320      	movs	r3, #32
 800387a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800387c:	2300      	movs	r3, #0
 800387e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003884:	4619      	mov	r1, r3
 8003886:	481f      	ldr	r0, [pc, #124]	; (8003904 <MX_TIM8_Init+0x134>)
 8003888:	f004 fe18 	bl	80084bc <HAL_TIMEx_MasterConfigSynchronization>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8003892:	f7ff f9e3 	bl	8002c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003896:	2360      	movs	r3, #96	; 0x60
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800389e:	2300      	movs	r3, #0
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038a2:	2300      	movs	r3, #0
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b6:	2200      	movs	r2, #0
 80038b8:	4619      	mov	r1, r3
 80038ba:	4812      	ldr	r0, [pc, #72]	; (8003904 <MX_TIM8_Init+0x134>)
 80038bc:	f004 f962 	bl	8007b84 <HAL_TIM_PWM_ConfigChannel>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80038c6:	f7ff f9c9 	bl	8002c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	4619      	mov	r1, r3
 80038ec:	4805      	ldr	r0, [pc, #20]	; (8003904 <MX_TIM8_Init+0x134>)
 80038ee:	f004 fe61 	bl	80085b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80038f8:	f7ff f9b0 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80038fc:	bf00      	nop
 80038fe:	3758      	adds	r7, #88	; 0x58
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20005854 	.word	0x20005854
 8003908:	40010400 	.word	0x40010400

0800390c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d10e      	bne.n	800393c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800393a:	e026      	b.n	800398a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a16      	ldr	r2, [pc, #88]	; (800399c <HAL_TIM_Base_MspInit+0x90>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d10e      	bne.n	8003964 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	4a12      	ldr	r2, [pc, #72]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 8003950:	f043 0310 	orr.w	r3, r3, #16
 8003954:	6413      	str	r3, [r2, #64]	; 0x40
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
}
 8003962:	e012      	b.n	800398a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <HAL_TIM_Base_MspInit+0x94>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10d      	bne.n	800398a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 8003978:	f043 0302 	orr.w	r3, r3, #2
 800397c:	6453      	str	r3, [r2, #68]	; 0x44
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_TIM_Base_MspInit+0x8c>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	40001000 	.word	0x40001000
 80039a0:	40010400 	.word	0x40010400

080039a4 <startAdcDma>:
static void sendDataSD(char *file, volatile int16_t *sensor);
/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void startAdcDma(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*) osKernelSysTick(), SD_INIT_TIME);
 80039a8:	f008 f942 	bl	800bc30 <osKernelSysTick>
 80039ac:	4603      	mov	r3, r0
 80039ae:	210a      	movs	r1, #10
 80039b0:	4618      	mov	r0, r3
 80039b2:	f008 fa76 	bl	800bea2 <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*) adcDataWrite,
 80039b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ba:	4906      	ldr	r1, [pc, #24]	; (80039d4 <startAdcDma+0x30>)
 80039bc:	4806      	ldr	r0, [pc, #24]	; (80039d8 <startAdcDma+0x34>)
 80039be:	f000 fcf5 	bl	80043ac <HAL_ADC_Start_DMA>
	BUFFER_SIZE);
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 80039c2:	4806      	ldr	r0, [pc, #24]	; (80039dc <startAdcDma+0x38>)
 80039c4:	f003 fe7c 	bl	80076c0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 80039c8:	4805      	ldr	r0, [pc, #20]	; (80039e0 <startAdcDma+0x3c>)
 80039ca:	f003 fe79 	bl	80076c0 <HAL_TIM_Base_Start>
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200058a4 	.word	0x200058a4
 80039d8:	200006b0 	.word	0x200006b0
 80039dc:	2000580c 	.word	0x2000580c
 80039e0:	200057c4 	.word	0x200057c4

080039e4 <stopAdcDma>:
void stopAdcDma(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 80039e8:	4805      	ldr	r0, [pc, #20]	; (8003a00 <stopAdcDma+0x1c>)
 80039ea:	f000 fdef 	bl	80045cc <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 80039ee:	4805      	ldr	r0, [pc, #20]	; (8003a04 <stopAdcDma+0x20>)
 80039f0:	f003 fece 	bl	8007790 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 80039f4:	4804      	ldr	r0, [pc, #16]	; (8003a08 <stopAdcDma+0x24>)
 80039f6:	f003 fecb 	bl	8007790 <HAL_TIM_Base_Stop>
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200006b0 	.word	0x200006b0
 8003a04:	2000580c 	.word	0x2000580c
 8003a08:	200057c4 	.word	0x200057c4

08003a0c <travelPressureSensorCalibration>:
void travelPressureSensorCalibration(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003a12:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <travelPressureSensorCalibration+0xf0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f008 f9aa 	bl	800bd74 <osSemaphoreWait>
#endif

	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	e046      	b.n	8003ab4 <travelPressureSensorCalibration+0xa8>
	{
		calibrationValues.rearTravelSensor += outRearBufPtr[i];
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <travelPressureSensorCalibration+0xf4>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b219      	sxth	r1, r3
 8003a34:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	b28b      	uxth	r3, r1
 8003a3e:	4413      	add	r3, r2
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b21a      	sxth	r2, r3
 8003a44:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003a46:	801a      	strh	r2, [r3, #0]
		calibrationValues.frontTravelSensor += outFrontBufPtr[i];
 8003a48:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <travelPressureSensorCalibration+0xfc>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b219      	sxth	r1, r3
 8003a56:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003a58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	b28b      	uxth	r3, r1
 8003a60:	4413      	add	r3, r2
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	b21a      	sxth	r2, r3
 8003a66:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003a68:	805a      	strh	r2, [r3, #2]
		calibrationValues.rearPressureSensor += outRearPressureBufPtr[i];
 8003a6a:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <travelPressureSensorCalibration+0x100>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b219      	sxth	r1, r3
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003a7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	b28b      	uxth	r3, r1
 8003a82:	4413      	add	r3, r2
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	b21a      	sxth	r2, r3
 8003a88:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003a8a:	809a      	strh	r2, [r3, #4]
		calibrationValues.frontPressureSensor += outFrontPressureBufPtr[i];
 8003a8c:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <travelPressureSensorCalibration+0x104>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b219      	sxth	r1, r3
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003a9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	b28b      	uxth	r3, r1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	b21a      	sxth	r2, r3
 8003aaa:	4b16      	ldr	r3, [pc, #88]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003aac:	80da      	strh	r2, [r3, #6]
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b3f      	cmp	r3, #63	; 0x3f
 8003ab8:	d9b5      	bls.n	8003a26 <travelPressureSensorCalibration+0x1a>

	}
	calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003abc:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003ac0:	099b      	lsrs	r3, r3, #6
	calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003ac2:	b21a      	sxth	r2, r3
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003ac6:	801a      	strh	r2, [r3, #0]
	calibrationValues.frontTravelSensor = calibrationValues.frontTravelSensor
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003aca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003ace:	099b      	lsrs	r3, r3, #6
	calibrationValues.frontTravelSensor = calibrationValues.frontTravelSensor
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003ad4:	805a      	strh	r2, [r3, #2]
	calibrationValues.rearPressureSensor = calibrationValues.rearPressureSensor
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003ad8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003adc:	099b      	lsrs	r3, r3, #6
	calibrationValues.rearPressureSensor = calibrationValues.rearPressureSensor
 8003ade:	b21a      	sxth	r2, r3
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003ae2:	809a      	strh	r2, [r3, #4]
	calibrationValues.frontPressureSensor =
			calibrationValues.frontPressureSensor
 8003ae4:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003ae6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
					/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003aea:	099b      	lsrs	r3, r3, #6
	calibrationValues.frontPressureSensor =
 8003aec:	b21a      	sxth	r2, r3
 8003aee:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <travelPressureSensorCalibration+0xf8>)
 8003af0:	80da      	strh	r2, [r3, #6]
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200052d8 	.word	0x200052d8
 8003b00:	20000018 	.word	0x20000018
 8003b04:	2000589c 	.word	0x2000589c
 8003b08:	2000001c 	.word	0x2000001c
 8003b0c:	20000020 	.word	0x20000020
 8003b10:	20000024 	.word	0x20000024

08003b14 <processData>:

void processData(char *sensorFront, char *sensorRear, char *sensorPressureFront,
		char *sensorPressureRear)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <processData+0x54>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f04f 31ff 	mov.w	r1, #4294967295
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f008 f922 	bl	800bd74 <osSemaphoreWait>
#endif
	sendDataSD(sensorRear, outRearBufPtr);
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <processData+0x58>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4619      	mov	r1, r3
 8003b36:	68b8      	ldr	r0, [r7, #8]
 8003b38:	f000 fa78 	bl	800402c <sendDataSD>
	sendDataSD(sensorFront, outFrontBufPtr);
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <processData+0x5c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fa72 	bl	800402c <sendDataSD>
	sendDataSD(sensorPressureRear, outRearPressureBufPtr);
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <processData+0x60>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6838      	ldr	r0, [r7, #0]
 8003b50:	f000 fa6c 	bl	800402c <sendDataSD>
	sendDataSD(sensorPressureFront, outFrontPressureBufPtr);
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <processData+0x64>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa66 	bl	800402c <sendDataSD>
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	200052d8 	.word	0x200052d8
 8003b6c:	20000018 	.word	0x20000018
 8003b70:	2000001c 	.word	0x2000001c
 8003b74:	20000020 	.word	0x20000020
 8003b78:	20000024 	.word	0x20000024

08003b7c <processDataSag>:

void processDataSag(int16_t *sagRearFront, int16_t *pressureRearFront)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003b86:	4b5c      	ldr	r3, [pc, #368]	; (8003cf8 <processDataSag+0x17c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f008 f8f0 	bl	800bd74 <osSemaphoreWait>
#endif
	(uint32_t*) sagRearFront;
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e04a      	b.n	8003c30 <processDataSag+0xb4>
	{
		sagRearFront[0] += outRearBufPtr[i];
 8003b9a:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <processDataSag+0x180>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b219      	sxth	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	b28b      	uxth	r3, r1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b21a      	sxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	801a      	strh	r2, [r3, #0]
		sagRearFront[1] += outFrontBufPtr[i];
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <processDataSag+0x184>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b219      	sxth	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	b28b      	uxth	r3, r1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	b212      	sxth	r2, r2
 8003be0:	801a      	strh	r2, [r3, #0]
		pressureRearFront[0] += outRearPressureBufPtr[i];
 8003be2:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <processDataSag+0x188>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b219      	sxth	r1, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	b28b      	uxth	r3, r1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b21a      	sxth	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	801a      	strh	r2, [r3, #0]
		pressureRearFront[1] += outFrontPressureBufPtr[i];
 8003c04:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <processDataSag+0x18c>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b219      	sxth	r1, r3
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	3302      	adds	r3, #2
 8003c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	b28b      	uxth	r3, r1
 8003c1e:	4413      	add	r3, r2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	3302      	adds	r3, #2
 8003c26:	b212      	sxth	r2, r2
 8003c28:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b3f      	cmp	r3, #63	; 0x3f
 8003c34:	d9b1      	bls.n	8003b9a <processDataSag+0x1e>

	}
	sagRearFront[0] = sagRearFront[0] / (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = sagRearFront[1] / (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3302      	adds	r3, #2
 8003c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4c:	099a      	lsrs	r2, r3, #6
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3302      	adds	r3, #2
 8003c52:	b212      	sxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]
	pressureRearFront[0] = pressureRearFront[0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003c5c:	099b      	lsrs	r3, r3, #6
	pressureRearFront[0] = pressureRearFront[0]
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	801a      	strh	r2, [r3, #0]
	pressureRearFront[1] = pressureRearFront[1]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	3302      	adds	r3, #2
 8003c68:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003c6c:	099a      	lsrs	r2, r3, #6
	pressureRearFront[1] = pressureRearFront[1]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	3302      	adds	r3, #2
 8003c72:	b212      	sxth	r2, r2
 8003c74:	801a      	strh	r2, [r3, #0]

	sagRearFront[0] = CONVERT_TO_PERCENT
			* (sagRearFront[0] / ((float) (REAR_SUSPENSION_TRAVEL - calibrationValues.rearTravelSensor)));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <processDataSag+0x190>)
 8003c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c8a:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003d10 <processDataSag+0x194>
 8003c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagRearFront[0] = CONVERT_TO_PERCENT
 8003ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca6:	ee17 3a90 	vmov	r3, s15
 8003caa:	b21a      	sxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = CONVERT_TO_PERCENT
			* (sagRearFront[1] / ((float) (FRONT_SUSPENSION_TRAVEL - calibrationValues.frontTravelSensor)));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb8:	ee07 3a90 	vmov	s15, r3
 8003cbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <processDataSag+0x190>)
 8003cc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cc6:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003d10 <processDataSag+0x194>
 8003cda:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagRearFront[1] = CONVERT_TO_PERCENT
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce6:	ee17 2a90 	vmov	r2, s15
 8003cea:	b212      	sxth	r2, r2
 8003cec:	801a      	strh	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200052d8 	.word	0x200052d8
 8003cfc:	20000018 	.word	0x20000018
 8003d00:	2000001c 	.word	0x2000001c
 8003d04:	20000020 	.word	0x20000020
 8003d08:	20000024 	.word	0x20000024
 8003d0c:	2000589c 	.word	0x2000589c
 8003d10:	42c80000 	.word	0x42c80000

08003d14 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 8003d1c:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003d1e:	4a45      	ldr	r2, [pc, #276]	; (8003e34 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8003d20:	601a      	str	r2, [r3, #0]
	outRearPressureBufPtr = &adcRearPressureDataRead[0];
 8003d22:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8003d24:	4a45      	ldr	r2, [pc, #276]	; (8003e3c <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8003d26:	601a      	str	r2, [r3, #0]
	outFrontPressureBufPtr = &adcFrontPressureDataRead[0];
 8003d28:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8003d2a:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 8003d2c:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[0];
 8003d2e:	4b46      	ldr	r3, [pc, #280]	; (8003e48 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8003d30:	4a46      	ldr	r2, [pc, #280]	; (8003e4c <HAL_ADC_ConvHalfCpltCallback+0x138>)
 8003d32:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[0];
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 8003d36:	4a47      	ldr	r2, [pc, #284]	; (8003e54 <HAL_ADC_ConvHalfCpltCallback+0x140>)
 8003d38:	601a      	str	r2, [r3, #0]

	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e06a      	b.n	8003e16 <HAL_ADC_ConvHalfCpltCallback+0x102>
	{
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d40:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003d42:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n],
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	005b      	lsls	r3, r3, #1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d48:	4413      	add	r3, r2
 8003d4a:	2106      	movs	r1, #6
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f943 	bl	8003fd8 <convertAdcToPressure>
 8003d52:	4603      	mov	r3, r0
 8003d54:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003d56:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003d58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	b299      	uxth	r1, r3
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d62:	4b35      	ldr	r3, [pc, #212]	; (8003e38 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003d6e:	b20a      	sxth	r2, r1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d70:	801a      	strh	r2, [r3, #0]
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d72:	4b2f      	ldr	r3, [pc, #188]	; (8003e30 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003d74:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 1],
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	005b      	lsls	r3, r3, #1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d7c:	4413      	add	r3, r2
 8003d7e:	2106      	movs	r1, #6
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f929 	bl	8003fd8 <convertAdcToPressure>
 8003d86:	4603      	mov	r3, r0
 8003d88:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003d8a:	4b33      	ldr	r3, [pc, #204]	; (8003e58 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003d8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	b299      	uxth	r1, r3
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003da2:	b20a      	sxth	r2, r1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003da4:	801a      	strh	r2, [r3, #0]
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003da8:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 2],
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3302      	adds	r3, #2
 8003dae:	005b      	lsls	r3, r3, #1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003db0:	4413      	add	r3, r2
 8003db2:	217d      	movs	r1, #125	; 0x7d
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f8f9 	bl	8003fac <convertAdcToTravel>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	b29a      	uxth	r2, r3
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	b299      	uxth	r1, r3
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003dca:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003dd6:	b20a      	sxth	r2, r1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003dd8:	801a      	strh	r2, [r3, #0]
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 3],
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3303      	adds	r3, #3
 8003de2:	005b      	lsls	r3, r3, #1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003de4:	4413      	add	r3, r2
 8003de6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f8de 	bl	8003fac <convertAdcToTravel>
 8003df0:	4603      	mov	r3, r0
 8003df2:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003df6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	b299      	uxth	r1, r3
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e00:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003e0c:	b20a      	sxth	r2, r1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e0e:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3304      	adds	r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2bfe      	cmp	r3, #254	; 0xfe
 8003e1a:	d991      	bls.n	8003d40 <HAL_ADC_ConvHalfCpltCallback+0x2c>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <HAL_ADC_ConvHalfCpltCallback+0x148>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f007 fff5 	bl	800be10 <osSemaphoreRelease>
#endif
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200060a4 	.word	0x200060a4
 8003e34:	200058a4 	.word	0x200058a4
 8003e38:	20000020 	.word	0x20000020
 8003e3c:	20005ea4 	.word	0x20005ea4
 8003e40:	20000024 	.word	0x20000024
 8003e44:	20005fa4 	.word	0x20005fa4
 8003e48:	20000018 	.word	0x20000018
 8003e4c:	20005ca4 	.word	0x20005ca4
 8003e50:	2000001c 	.word	0x2000001c
 8003e54:	20005da4 	.word	0x20005da4
 8003e58:	2000589c 	.word	0x2000589c
 8003e5c:	200052d8 	.word	0x200052d8

08003e60 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
	sample_time = ((time_end - previousTime)/NUMBER_OF_SENSORS)/(float)(BUFFER_SIZE/NUMBER_OF_SENSORS);
	printf("semFullTime: %f\n", sample_time);
#endif

	inBufPtr = &adcDataWrite[BUFFER_SIZE / 2];
 8003e68:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e6a:	4a45      	ldr	r2, [pc, #276]	; (8003f80 <HAL_ADC_ConvCpltCallback+0x120>)
 8003e6c:	601a      	str	r2, [r3, #0]
	outRearPressureBufPtr = &adcRearPressureDataRead[BUFFER_SIZE
 8003e6e:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <HAL_ADC_ConvCpltCallback+0x124>)
 8003e70:	4a45      	ldr	r2, [pc, #276]	; (8003f88 <HAL_ADC_ConvCpltCallback+0x128>)
 8003e72:	601a      	str	r2, [r3, #0]
			/ HALF_CONV_BUFF_SIZE];
	outFrontPressureBufPtr = &adcFrontPressureDataRead[BUFFER_SIZE
 8003e74:	4b45      	ldr	r3, [pc, #276]	; (8003f8c <HAL_ADC_ConvCpltCallback+0x12c>)
 8003e76:	4a46      	ldr	r2, [pc, #280]	; (8003f90 <HAL_ADC_ConvCpltCallback+0x130>)
 8003e78:	601a      	str	r2, [r3, #0]
			/ HALF_CONV_BUFF_SIZE];
	outRearBufPtr = &adcRearDataRead[BUFFER_SIZE / HALF_CONV_BUFF_SIZE];
 8003e7a:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <HAL_ADC_ConvCpltCallback+0x134>)
 8003e7c:	4a46      	ldr	r2, [pc, #280]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x138>)
 8003e7e:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[BUFFER_SIZE / HALF_CONV_BUFF_SIZE];
 8003e80:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_ADC_ConvCpltCallback+0x13c>)
 8003e82:	4a47      	ldr	r2, [pc, #284]	; (8003fa0 <HAL_ADC_ConvCpltCallback+0x140>)
 8003e84:	601a      	str	r2, [r3, #0]

	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e06a      	b.n	8003f62 <HAL_ADC_ConvCpltCallback+0x102>
	{
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n],
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	005b      	lsls	r3, r3, #1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003e94:	4413      	add	r3, r2
 8003e96:	2106      	movs	r1, #6
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f89d 	bl	8003fd8 <convertAdcToPressure>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003ea2:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <HAL_ADC_ConvCpltCallback+0x144>)
 8003ea4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	b299      	uxth	r1, r3
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003eae:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_ADC_ConvCpltCallback+0x124>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003eba:	b20a      	sxth	r2, r1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003ebc:	801a      	strh	r2, [r3, #0]
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003ebe:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <HAL_ADC_ConvCpltCallback+0x11c>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 1],
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	005b      	lsls	r3, r3, #1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003ec8:	4413      	add	r3, r2
 8003eca:	2106      	movs	r1, #6
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f883 	bl	8003fd8 <convertAdcToPressure>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003ed6:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <HAL_ADC_ConvCpltCallback+0x144>)
 8003ed8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	b299      	uxth	r1, r3
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003ee2:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <HAL_ADC_ConvCpltCallback+0x12c>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003eee:	b20a      	sxth	r2, r1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003ef0:	801a      	strh	r2, [r3, #0]
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_ADC_ConvCpltCallback+0x11c>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 2],
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	005b      	lsls	r3, r3, #1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003efc:	4413      	add	r3, r2
 8003efe:	217d      	movs	r1, #125	; 0x7d
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f853 	bl	8003fac <convertAdcToTravel>
 8003f06:	4603      	mov	r3, r0
 8003f08:	b29a      	uxth	r2, r3
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003f0a:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <HAL_ADC_ConvCpltCallback+0x144>)
 8003f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	b299      	uxth	r1, r3
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f16:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <HAL_ADC_ConvCpltCallback+0x134>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003f22:	b20a      	sxth	r2, r1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f24:	801a      	strh	r2, [r3, #0]
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_ADC_ConvCpltCallback+0x11c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 3],
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3303      	adds	r3, #3
 8003f2e:	005b      	lsls	r3, r3, #1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f30:	4413      	add	r3, r2
 8003f32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f838 	bl	8003fac <convertAdcToTravel>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003f40:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <HAL_ADC_ConvCpltCallback+0x144>)
 8003f42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	b299      	uxth	r1, r3
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_ADC_ConvCpltCallback+0x13c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003f58:	b20a      	sxth	r2, r1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f5a:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2bfe      	cmp	r3, #254	; 0xfe
 8003f66:	d991      	bls.n	8003e8c <HAL_ADC_ConvCpltCallback+0x2c>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <HAL_ADC_ConvCpltCallback+0x148>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f007 ff4f 	bl	800be10 <osSemaphoreRelease>
#endif
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200060a4 	.word	0x200060a4
 8003f80:	20005aa4 	.word	0x20005aa4
 8003f84:	20000020 	.word	0x20000020
 8003f88:	20005f24 	.word	0x20005f24
 8003f8c:	20000024 	.word	0x20000024
 8003f90:	20006024 	.word	0x20006024
 8003f94:	20000018 	.word	0x20000018
 8003f98:	20005d24 	.word	0x20005d24
 8003f9c:	2000001c 	.word	0x2000001c
 8003fa0:	20005e24 	.word	0x20005e24
 8003fa4:	2000589c 	.word	0x2000589c
 8003fa8:	200052d8 	.word	0x200052d8

08003fac <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite,
		int16_t sensorTravel)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite * sensorTravel / ADC_RESOLUTION);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b21b      	sxth	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fc4:	fb02 f303 	mul.w	r3, r2, r3
 8003fc8:	0b1b      	lsrs	r3, r3, #12
 8003fca:	b21b      	sxth	r3, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <convertAdcToPressure>:

static int16_t convertAdcToPressure(volatile int16_t *adcDataWrite,
		int16_t sensorMaxPressure)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]

	return ((CONVERT_MPa_to_PSI)
			* (*adcDataWrite * sensorMaxPressure / ((float) ADC_RESOLUTION)));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b21b      	sxth	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ffc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004024 <convertAdcToPressure+0x4c>
 8004000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004004:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004028 <convertAdcToPressure+0x50>
 8004008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800400c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004010:	ee17 3a90 	vmov	r3, s15
 8004014:	b21b      	sxth	r3, r3
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	45800000 	.word	0x45800000
 8004028:	43110000 	.word	0x43110000

0800402c <sendDataSD>:

static void sendDataSD(char *file, volatile int16_t *sensor)
{
 800402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004030:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8004034:	af00      	add	r7, sp, #0
 8004036:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800403a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800403e:	6018      	str	r0, [r3, #0]
 8004040:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004044:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8004048:	6019      	str	r1, [r3, #0]
 800404a:	466b      	mov	r3, sp
 800404c:	469a      	mov	sl, r3
	char buffer[BUFFER_SIZE + 1];
	memset(buffer, 0, BUFFER_SIZE + 1);
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	f240 2201 	movw	r2, #513	; 0x201
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f00b f881 	bl	800f160 <memset>
	int i;
	for (i = 0; i < (BUFFER_SIZE) / HALF_CONV_BUFF_SIZE; i++)
 800405e:	2300      	movs	r3, #0
 8004060:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8004064:	e01c      	b.n	80040a0 <sendDataSD+0x74>
	{
		sprintf(buffer + strlen(buffer), "%d ", sensor[i]);
 8004066:	f107 030c 	add.w	r3, r7, #12
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc f930 	bl	80002d0 <strlen>
 8004070:	4602      	mov	r2, r0
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	1898      	adds	r0, r3, r2
 8004078:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004082:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	4413      	add	r3, r2
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b21b      	sxth	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	4933      	ldr	r1, [pc, #204]	; (8004160 <sendDataSD+0x134>)
 8004092:	f00a ff6d 	bl	800ef70 <siprintf>
	for (i = 0; i < (BUFFER_SIZE) / HALF_CONV_BUFF_SIZE; i++)
 8004096:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800409a:	3301      	adds	r3, #1
 800409c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80040a0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80040a4:	2b3f      	cmp	r3, #63	; 0x3f
 80040a6:	d9de      	bls.n	8004066 <sendDataSD+0x3a>
	}
	size_t size = strlen(buffer) + 1;
 80040a8:	f107 030c 	add.w	r3, r7, #12
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc f90f 	bl	80002d0 <strlen>
 80040b2:	4603      	mov	r3, r0
 80040b4:	3301      	adds	r3, #1
 80040b6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	char newBuff[size];
 80040ba:	f8d7 6218 	ldr.w	r6, [r7, #536]	; 0x218
 80040be:	4633      	mov	r3, r6
 80040c0:	3b01      	subs	r3, #1
 80040c2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80040c6:	2300      	movs	r3, #0
 80040c8:	46b0      	mov	r8, r6
 80040ca:	4699      	mov	r9, r3
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e0:	2300      	movs	r3, #0
 80040e2:	4634      	mov	r4, r6
 80040e4:	461d      	mov	r5, r3
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	00eb      	lsls	r3, r5, #3
 80040f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f4:	00e2      	lsls	r2, r4, #3
 80040f6:	1df3      	adds	r3, r6, #7
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	ebad 0d03 	sub.w	sp, sp, r3
 8004100:	466b      	mov	r3, sp
 8004102:	3300      	adds	r3, #0
 8004104:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	memset(newBuff, 0, size);
 8004108:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800410c:	2100      	movs	r1, #0
 800410e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8004112:	f00b f825 	bl	800f160 <memset>
	strncpy(newBuff, buffer, sizeof(newBuff));
 8004116:	f107 030c 	add.w	r3, r7, #12
 800411a:	4632      	mov	r2, r6
 800411c:	4619      	mov	r1, r3
 800411e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8004122:	f00b f825 	bl	800f170 <strncpy>
	newBuff[size] = '\0';
 8004126:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800412a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800412e:	4413      	add	r3, r2
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
	Mount_SD("/");
 8004134:	480b      	ldr	r0, [pc, #44]	; (8004164 <sendDataSD+0x138>)
 8004136:	f7fc ff5f 	bl	8000ff8 <Mount_SD>
	Update_File(file, newBuff);
 800413a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800413e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8004142:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	f7fd f8ce 	bl	80012e8 <Update_File>
	Unmount_SD("/");
 800414c:	4805      	ldr	r0, [pc, #20]	; (8004164 <sendDataSD+0x138>)
 800414e:	f7fc ff77 	bl	8001040 <Unmount_SD>
 8004152:	46d5      	mov	sp, sl
}
 8004154:	bf00      	nop
 8004156:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800415a:	46bd      	mov	sp, r7
 800415c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004160:	080119e8 	.word	0x080119e8
 8004164:	080119ec 	.word	0x080119ec

08004168 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <MX_USART2_UART_Init+0x50>)
 8004170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 8004174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 8004182:	2200      	movs	r2, #0
 8004184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 8004188:	2200      	movs	r2, #0
 800418a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 800418e:	220c      	movs	r2, #12
 8004190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 8004194:	2200      	movs	r2, #0
 8004196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800419e:	4805      	ldr	r0, [pc, #20]	; (80041b4 <MX_USART2_UART_Init+0x4c>)
 80041a0:	f004 fa6e 	bl	8008680 <HAL_UART_Init>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80041aa:	f7fe fd57 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200060a8 	.word	0x200060a8
 80041b8:	40004400 	.word	0x40004400

080041bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <HAL_UART_MspInit+0x84>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d12b      	bne.n	8004236 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_UART_MspInit+0x88>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_UART_MspInit+0x88>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_UART_MspInit+0x88>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_UART_MspInit+0x88>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <HAL_UART_MspInit+0x88>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6313      	str	r3, [r2, #48]	; 0x30
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_UART_MspInit+0x88>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004216:	230c      	movs	r3, #12
 8004218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004222:	2303      	movs	r3, #3
 8004224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004226:	2307      	movs	r3, #7
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	4805      	ldr	r0, [pc, #20]	; (8004248 <HAL_UART_MspInit+0x8c>)
 8004232:	f001 f9a1 	bl	8005578 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004236:	bf00      	nop
 8004238:	3728      	adds	r7, #40	; 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40004400 	.word	0x40004400
 8004244:	40023800 	.word	0x40023800
 8004248:	40020000 	.word	0x40020000

0800424c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800424c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004250:	480d      	ldr	r0, [pc, #52]	; (8004288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004252:	490e      	ldr	r1, [pc, #56]	; (800428c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004254:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004258:	e002      	b.n	8004260 <LoopCopyDataInit>

0800425a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800425a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800425c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800425e:	3304      	adds	r3, #4

08004260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004264:	d3f9      	bcc.n	800425a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004266:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004268:	4c0b      	ldr	r4, [pc, #44]	; (8004298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800426a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800426c:	e001      	b.n	8004272 <LoopFillZerobss>

0800426e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800426e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004270:	3204      	adds	r2, #4

08004272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004274:	d3fb      	bcc.n	800426e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004276:	f7ff f9f1 	bl	800365c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800427a:	f00b f833 	bl	800f2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800427e:	f7fe fc4d 	bl	8002b1c <main>
  bx  lr    
 8004282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800428c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004290:	08011e5c 	.word	0x08011e5c
  ldr r2, =_sbss
 8004294:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004298:	2000a00c 	.word	0x2000a00c

0800429c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800429c:	e7fe      	b.n	800429c <ADC_IRQHandler>
	...

080042a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_Init+0x40>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <HAL_Init+0x40>)
 80042aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_Init+0x40>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_Init+0x40>)
 80042b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_Init+0x40>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <HAL_Init+0x40>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c8:	2003      	movs	r0, #3
 80042ca:	f000 fd40 	bl	8004d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ce:	200f      	movs	r0, #15
 80042d0:	f7ff f822 	bl	8003318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042d4:	f7fe fff4 	bl	80032c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00

080042e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_IncTick+0x20>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_IncTick+0x24>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_IncTick+0x24>)
 80042f6:	6013      	str	r3, [r2, #0]
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000002c 	.word	0x2000002c
 8004308:	200060ec 	.word	0x200060ec

0800430c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return uwTick;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_GetTick+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	200060ec 	.word	0x200060ec

08004324 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e033      	b.n	80043a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd f99e 	bl	8001684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d118      	bne.n	8004394 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800436a:	f023 0302 	bic.w	r3, r3, #2
 800436e:	f043 0202 	orr.w	r2, r3, #2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fabe 	bl	80048f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
 8004392:	e001      	b.n	8004398 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_Start_DMA+0x1e>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e0e9      	b.n	800459e <HAL_ADC_Start_DMA+0x1f2>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d018      	beq.n	8004412 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043f0:	4b6d      	ldr	r3, [pc, #436]	; (80045a8 <HAL_ADC_Start_DMA+0x1fc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6d      	ldr	r2, [pc, #436]	; (80045ac <HAL_ADC_Start_DMA+0x200>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	0c9a      	lsrs	r2, r3, #18
 80043fc:	4613      	mov	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004404:	e002      	b.n	800440c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	3b01      	subs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f9      	bne.n	8004406 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004420:	d107      	bne.n	8004432 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004430:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 80a1 	bne.w	8004584 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800446c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d106      	bne.n	8004490 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f023 0206 	bic.w	r2, r3, #6
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
 800448e:	e002      	b.n	8004496 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800449e:	4b44      	ldr	r3, [pc, #272]	; (80045b0 <HAL_ADC_Start_DMA+0x204>)
 80044a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	4a43      	ldr	r2, [pc, #268]	; (80045b4 <HAL_ADC_Start_DMA+0x208>)
 80044a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	4a42      	ldr	r2, [pc, #264]	; (80045b8 <HAL_ADC_Start_DMA+0x20c>)
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	4a41      	ldr	r2, [pc, #260]	; (80045bc <HAL_ADC_Start_DMA+0x210>)
 80044b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80044d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	334c      	adds	r3, #76	; 0x4c
 80044ee:	4619      	mov	r1, r3
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f000 fd0e 	bl	8004f14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2b00      	cmp	r3, #0
 8004502:	d12a      	bne.n	800455a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <HAL_ADC_Start_DMA+0x214>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d015      	beq.n	800453a <HAL_ADC_Start_DMA+0x18e>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <HAL_ADC_Start_DMA+0x218>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d105      	bne.n	8004524 <HAL_ADC_Start_DMA+0x178>
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_ADC_Start_DMA+0x204>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a27      	ldr	r2, [pc, #156]	; (80045c8 <HAL_ADC_Start_DMA+0x21c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d136      	bne.n	800459c <HAL_ADC_Start_DMA+0x1f0>
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_ADC_Start_DMA+0x204>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d130      	bne.n	800459c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d129      	bne.n	800459c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	e020      	b.n	800459c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_ADC_Start_DMA+0x214>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d11b      	bne.n	800459c <HAL_ADC_Start_DMA+0x1f0>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d114      	bne.n	800459c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	e00b      	b.n	800459c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000014 	.word	0x20000014
 80045ac:	431bde83 	.word	0x431bde83
 80045b0:	40012300 	.word	0x40012300
 80045b4:	08004af1 	.word	0x08004af1
 80045b8:	08004bab 	.word	0x08004bab
 80045bc:	08004bc7 	.word	0x08004bc7
 80045c0:	40012000 	.word	0x40012000
 80045c4:	40012100 	.word	0x40012100
 80045c8:	40012200 	.word	0x40012200

080045cc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_Stop_DMA+0x1a>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e048      	b.n	8004678 <HAL_ADC_Stop_DMA+0xac>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d130      	bne.n	800466e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d10f      	bne.n	800464a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fcc8 	bl	8004fc4 <HAL_DMA_Abort>
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004658:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x1c>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e113      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x244>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b09      	cmp	r3, #9
 80046be:	d925      	bls.n	800470c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68d9      	ldr	r1, [r3, #12]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	4613      	mov	r3, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4413      	add	r3, r2
 80046d4:	3b1e      	subs	r3, #30
 80046d6:	2207      	movs	r2, #7
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43da      	mvns	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	400a      	ands	r2, r1
 80046e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4618      	mov	r0, r3
 80046f8:	4603      	mov	r3, r0
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4403      	add	r3, r0
 80046fe:	3b1e      	subs	r3, #30
 8004700:	409a      	lsls	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e022      	b.n	8004752 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6919      	ldr	r1, [r3, #16]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	2207      	movs	r2, #7
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	400a      	ands	r2, r1
 800472e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6919      	ldr	r1, [r3, #16]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	4618      	mov	r0, r3
 8004742:	4603      	mov	r3, r0
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4403      	add	r3, r0
 8004748:	409a      	lsls	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b06      	cmp	r3, #6
 8004758:	d824      	bhi.n	80047a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	3b05      	subs	r3, #5
 800476c:	221f      	movs	r2, #31
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43da      	mvns	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	400a      	ands	r2, r1
 800477a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	4618      	mov	r0, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	3b05      	subs	r3, #5
 8004796:	fa00 f203 	lsl.w	r2, r0, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	635a      	str	r2, [r3, #52]	; 0x34
 80047a2:	e04c      	b.n	800483e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b0c      	cmp	r3, #12
 80047aa:	d824      	bhi.n	80047f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	3b23      	subs	r3, #35	; 0x23
 80047be:	221f      	movs	r2, #31
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43da      	mvns	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	400a      	ands	r2, r1
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	4618      	mov	r0, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	3b23      	subs	r3, #35	; 0x23
 80047e8:	fa00 f203 	lsl.w	r2, r0, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
 80047f4:	e023      	b.n	800483e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	3b41      	subs	r3, #65	; 0x41
 8004808:	221f      	movs	r2, #31
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43da      	mvns	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	400a      	ands	r2, r1
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	4618      	mov	r0, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	3b41      	subs	r3, #65	; 0x41
 8004832:	fa00 f203 	lsl.w	r2, r0, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800483e:	4b29      	ldr	r3, [pc, #164]	; (80048e4 <HAL_ADC_ConfigChannel+0x250>)
 8004840:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a28      	ldr	r2, [pc, #160]	; (80048e8 <HAL_ADC_ConfigChannel+0x254>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10f      	bne.n	800486c <HAL_ADC_ConfigChannel+0x1d8>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b12      	cmp	r3, #18
 8004852:	d10b      	bne.n	800486c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <HAL_ADC_ConfigChannel+0x254>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d12b      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x23a>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_ADC_ConfigChannel+0x258>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <HAL_ADC_ConfigChannel+0x1f4>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b11      	cmp	r3, #17
 8004886:	d122      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a11      	ldr	r2, [pc, #68]	; (80048ec <HAL_ADC_ConfigChannel+0x258>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d111      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <HAL_ADC_ConfigChannel+0x25c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <HAL_ADC_ConfigChannel+0x260>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	0c9a      	lsrs	r2, r3, #18
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048c0:	e002      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f9      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40012300 	.word	0x40012300
 80048e8:	40012000 	.word	0x40012000
 80048ec:	10000012 	.word	0x10000012
 80048f0:	20000014 	.word	0x20000014
 80048f4:	431bde83 	.word	0x431bde83

080048f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004900:	4b79      	ldr	r3, [pc, #484]	; (8004ae8 <ADC_Init+0x1f0>)
 8004902:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800492c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	021a      	lsls	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6899      	ldr	r1, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	4a58      	ldr	r2, [pc, #352]	; (8004aec <ADC_Init+0x1f4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800499e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6899      	ldr	r1, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	e00f      	b.n	80049f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0202 	bic.w	r2, r2, #2
 8004a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6899      	ldr	r1, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	7e1b      	ldrb	r3, [r3, #24]
 8004a10:	005a      	lsls	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01b      	beq.n	8004a5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	035a      	lsls	r2, r3, #13
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	e007      	b.n	8004a6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	051a      	lsls	r2, r3, #20
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aae:	025a      	lsls	r2, r3, #9
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6899      	ldr	r1, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	029a      	lsls	r2, r3, #10
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40012300 	.word	0x40012300
 8004aec:	0f000001 	.word	0x0f000001

08004af0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d13c      	bne.n	8004b84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d12b      	bne.n	8004b7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d127      	bne.n	8004b7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d006      	beq.n	8004b48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d119      	bne.n	8004b7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0220 	bic.w	r2, r2, #32
 8004b56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f043 0201 	orr.w	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff f96f 	bl	8003e60 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b82:	e00e      	b.n	8004ba2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7ff fd75 	bl	8004680 <HAL_ADC_ErrorCallback>
}
 8004b96:	e004      	b.n	8004ba2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	4798      	blx	r3
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff f8ab 	bl	8003d14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2240      	movs	r2, #64	; 0x40
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	f043 0204 	orr.w	r2, r3, #4
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fd4a 	bl	8004680 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <__NVIC_SetPriorityGrouping>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c10:	4013      	ands	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c26:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	60d3      	str	r3, [r2, #12]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <__NVIC_GetPriorityGrouping>:
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <__NVIC_GetPriorityGrouping+0x18>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0307 	and.w	r3, r3, #7
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_EnableIRQ>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	db0b      	blt.n	8004c82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	f003 021f 	and.w	r2, r3, #31
 8004c70:	4907      	ldr	r1, [pc, #28]	; (8004c90 <__NVIC_EnableIRQ+0x38>)
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2001      	movs	r0, #1
 8004c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <__NVIC_SetPriority>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	6039      	str	r1, [r7, #0]
 8004c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	db0a      	blt.n	8004cbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	490c      	ldr	r1, [pc, #48]	; (8004ce0 <__NVIC_SetPriority+0x4c>)
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cbc:	e00a      	b.n	8004cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	4908      	ldr	r1, [pc, #32]	; (8004ce4 <__NVIC_SetPriority+0x50>)
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	0112      	lsls	r2, r2, #4
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	761a      	strb	r2, [r3, #24]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000e100 	.word	0xe000e100
 8004ce4:	e000ed00 	.word	0xe000ed00

08004ce8 <NVIC_EncodePriority>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	; 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f1c3 0307 	rsb	r3, r3, #7
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	bf28      	it	cs
 8004d06:	2304      	movcs	r3, #4
 8004d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	2b06      	cmp	r3, #6
 8004d10:	d902      	bls.n	8004d18 <NVIC_EncodePriority+0x30>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3b03      	subs	r3, #3
 8004d16:	e000      	b.n	8004d1a <NVIC_EncodePriority+0x32>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43da      	mvns	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d30:	f04f 31ff 	mov.w	r1, #4294967295
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	43d9      	mvns	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d40:	4313      	orrs	r3, r2
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	; 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff ff4c 	bl	8004bf4 <__NVIC_SetPriorityGrouping>
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d76:	f7ff ff61 	bl	8004c3c <__NVIC_GetPriorityGrouping>
 8004d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	6978      	ldr	r0, [r7, #20]
 8004d82:	f7ff ffb1 	bl	8004ce8 <NVIC_EncodePriority>
 8004d86:	4602      	mov	r2, r0
 8004d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff80 	bl	8004c94 <__NVIC_SetPriority>
}
 8004d94:	bf00      	nop
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff54 	bl	8004c58 <__NVIC_EnableIRQ>
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004dc4:	f7ff faa2 	bl	800430c <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e099      	b.n	8004f08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004df4:	e00f      	b.n	8004e16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004df6:	f7ff fa89 	bl	800430c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d908      	bls.n	8004e16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e078      	b.n	8004f08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e8      	bne.n	8004df6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4b38      	ldr	r3, [pc, #224]	; (8004f10 <HAL_DMA_Init+0x158>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d107      	bne.n	8004e80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0307 	bic.w	r3, r3, #7
 8004e96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d117      	bne.n	8004eda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00e      	beq.n	8004eda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fadf 	bl	8005480 <DMA_CheckFifoParam>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2240      	movs	r2, #64	; 0x40
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e016      	b.n	8004f08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa96 	bl	8005414 <DMA_CalcBaseAndBitshift>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	223f      	movs	r2, #63	; 0x3f
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	f010803f 	.word	0xf010803f

08004f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_DMA_Start_IT+0x26>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e040      	b.n	8004fbc <HAL_DMA_Start_IT+0xa8>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d12f      	bne.n	8004fae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fa28 	bl	80053b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6c:	223f      	movs	r2, #63	; 0x3f
 8004f6e:	409a      	lsls	r2, r3
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0216 	orr.w	r2, r2, #22
 8004f82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0208 	orr.w	r2, r2, #8
 8004f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e005      	b.n	8004fba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fd2:	f7ff f99b 	bl	800430c <HAL_GetTick>
 8004fd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d008      	beq.n	8004ff6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2280      	movs	r2, #128	; 0x80
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e052      	b.n	800509c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0216 	bic.w	r2, r2, #22
 8005004:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005014:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <HAL_DMA_Abort+0x62>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0208 	bic.w	r2, r2, #8
 8005034:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0201 	bic.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005046:	e013      	b.n	8005070 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005048:	f7ff f960 	bl	800430c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b05      	cmp	r3, #5
 8005054:	d90c      	bls.n	8005070 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2203      	movs	r2, #3
 8005060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e015      	b.n	800509c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e4      	bne.n	8005048 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	223f      	movs	r2, #63	; 0x3f
 8005084:	409a      	lsls	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050b0:	4b8e      	ldr	r3, [pc, #568]	; (80052ec <HAL_DMA_IRQHandler+0x248>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a8e      	ldr	r2, [pc, #568]	; (80052f0 <HAL_DMA_IRQHandler+0x24c>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	0a9b      	lsrs	r3, r3, #10
 80050bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	2208      	movs	r2, #8
 80050d0:	409a      	lsls	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01a      	beq.n	8005110 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d013      	beq.n	8005110 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	2208      	movs	r2, #8
 80050fe:	409a      	lsls	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f043 0201 	orr.w	r2, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	2201      	movs	r2, #1
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f043 0202 	orr.w	r2, r3, #2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514a:	2204      	movs	r2, #4
 800514c:	409a      	lsls	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d012      	beq.n	800517c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005168:	2204      	movs	r2, #4
 800516a:	409a      	lsls	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	f043 0204 	orr.w	r2, r3, #4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005180:	2210      	movs	r2, #16
 8005182:	409a      	lsls	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d043      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d03c      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	2210      	movs	r2, #16
 80051a0:	409a      	lsls	r2, r3
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d018      	beq.n	80051e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d108      	bne.n	80051d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d024      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
 80051d2:	e01f      	b.n	8005214 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01b      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
 80051e4:	e016      	b.n	8005214 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0208 	bic.w	r2, r2, #8
 8005202:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005218:	2220      	movs	r2, #32
 800521a:	409a      	lsls	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 808f 	beq.w	8005344 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8087 	beq.w	8005344 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	2220      	movs	r2, #32
 800523c:	409a      	lsls	r2, r3
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b05      	cmp	r3, #5
 800524c:	d136      	bne.n	80052bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0216 	bic.w	r2, r2, #22
 800525c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800526c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <HAL_DMA_IRQHandler+0x1da>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0208 	bic.w	r2, r2, #8
 800528c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	223f      	movs	r2, #63	; 0x3f
 8005294:	409a      	lsls	r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d07e      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
        }
        return;
 80052ba:	e079      	b.n	80053b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01d      	beq.n	8005306 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10d      	bne.n	80052f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d031      	beq.n	8005344 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
 80052e8:	e02c      	b.n	8005344 <HAL_DMA_IRQHandler+0x2a0>
 80052ea:	bf00      	nop
 80052ec:	20000014 	.word	0x20000014
 80052f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d023      	beq.n	8005344 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	4798      	blx	r3
 8005304:	e01e      	b.n	8005344 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10f      	bne.n	8005334 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0210 	bic.w	r2, r2, #16
 8005322:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	2b00      	cmp	r3, #0
 800534a:	d032      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d022      	beq.n	800539e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2205      	movs	r2, #5
 800535c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	3301      	adds	r3, #1
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	429a      	cmp	r2, r3
 800537a:	d307      	bcc.n	800538c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f2      	bne.n	8005370 <HAL_DMA_IRQHandler+0x2cc>
 800538a:	e000      	b.n	800538e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800538c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4798      	blx	r3
 80053ae:	e000      	b.n	80053b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80053b0:	bf00      	nop
    }
  }
}
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b40      	cmp	r3, #64	; 0x40
 80053e4:	d108      	bne.n	80053f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053f6:	e007      	b.n	8005408 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	3b10      	subs	r3, #16
 8005424:	4a14      	ldr	r2, [pc, #80]	; (8005478 <DMA_CalcBaseAndBitshift+0x64>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800542e:	4a13      	ldr	r2, [pc, #76]	; (800547c <DMA_CalcBaseAndBitshift+0x68>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d909      	bls.n	8005456 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	1d1a      	adds	r2, r3, #4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	659a      	str	r2, [r3, #88]	; 0x58
 8005454:	e007      	b.n	8005466 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	aaaaaaab 	.word	0xaaaaaaab
 800547c:	08011a54 	.word	0x08011a54

08005480 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d11f      	bne.n	80054da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d856      	bhi.n	800554e <DMA_CheckFifoParam+0xce>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <DMA_CheckFifoParam+0x28>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054cb 	.word	0x080054cb
 80054b0:	080054b9 	.word	0x080054b9
 80054b4:	0800554f 	.word	0x0800554f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d046      	beq.n	8005552 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c8:	e043      	b.n	8005552 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054d2:	d140      	bne.n	8005556 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d8:	e03d      	b.n	8005556 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d121      	bne.n	8005528 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d837      	bhi.n	800555a <DMA_CheckFifoParam+0xda>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <DMA_CheckFifoParam+0x70>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005501 	.word	0x08005501
 80054f4:	08005507 	.word	0x08005507
 80054f8:	08005501 	.word	0x08005501
 80054fc:	08005519 	.word	0x08005519
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e030      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d025      	beq.n	800555e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005516:	e022      	b.n	800555e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005520:	d11f      	bne.n	8005562 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005526:	e01c      	b.n	8005562 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d903      	bls.n	8005536 <DMA_CheckFifoParam+0xb6>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d003      	beq.n	800553c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005534:	e018      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      break;
 800553a:	e015      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
      break;
 800554c:	e00b      	b.n	8005566 <DMA_CheckFifoParam+0xe6>
      break;
 800554e:	bf00      	nop
 8005550:	e00a      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 8005552:	bf00      	nop
 8005554:	e008      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 8005556:	bf00      	nop
 8005558:	e006      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 800555a:	bf00      	nop
 800555c:	e004      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 800555e:	bf00      	nop
 8005560:	e002      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;   
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 8005566:	bf00      	nop
    }
  } 
  
  return status; 
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005578:	b480      	push	{r7}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800558a:	2300      	movs	r3, #0
 800558c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e165      	b.n	8005860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005594:	2201      	movs	r2, #1
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	f040 8154 	bne.w	800585a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d005      	beq.n	80055ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d130      	bne.n	800562c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	2203      	movs	r2, #3
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005600:	2201      	movs	r2, #1
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 0201 	and.w	r2, r3, #1
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	2b03      	cmp	r3, #3
 8005636:	d017      	beq.n	8005668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	2203      	movs	r2, #3
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d123      	bne.n	80056bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	08da      	lsrs	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3208      	adds	r2, #8
 800567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	220f      	movs	r2, #15
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	08da      	lsrs	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3208      	adds	r2, #8
 80056b6:	69b9      	ldr	r1, [r7, #24]
 80056b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2203      	movs	r2, #3
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 0203 	and.w	r2, r3, #3
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80ae 	beq.w	800585a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b5d      	ldr	r3, [pc, #372]	; (8005878 <HAL_GPIO_Init+0x300>)
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	4a5c      	ldr	r2, [pc, #368]	; (8005878 <HAL_GPIO_Init+0x300>)
 8005708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800570c:	6453      	str	r3, [r2, #68]	; 0x44
 800570e:	4b5a      	ldr	r3, [pc, #360]	; (8005878 <HAL_GPIO_Init+0x300>)
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571a:	4a58      	ldr	r2, [pc, #352]	; (800587c <HAL_GPIO_Init+0x304>)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	3302      	adds	r3, #2
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	220f      	movs	r2, #15
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a4f      	ldr	r2, [pc, #316]	; (8005880 <HAL_GPIO_Init+0x308>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d025      	beq.n	8005792 <HAL_GPIO_Init+0x21a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a4e      	ldr	r2, [pc, #312]	; (8005884 <HAL_GPIO_Init+0x30c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01f      	beq.n	800578e <HAL_GPIO_Init+0x216>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a4d      	ldr	r2, [pc, #308]	; (8005888 <HAL_GPIO_Init+0x310>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d019      	beq.n	800578a <HAL_GPIO_Init+0x212>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a4c      	ldr	r2, [pc, #304]	; (800588c <HAL_GPIO_Init+0x314>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_GPIO_Init+0x20e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a4b      	ldr	r2, [pc, #300]	; (8005890 <HAL_GPIO_Init+0x318>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00d      	beq.n	8005782 <HAL_GPIO_Init+0x20a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a4a      	ldr	r2, [pc, #296]	; (8005894 <HAL_GPIO_Init+0x31c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <HAL_GPIO_Init+0x206>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a49      	ldr	r2, [pc, #292]	; (8005898 <HAL_GPIO_Init+0x320>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d101      	bne.n	800577a <HAL_GPIO_Init+0x202>
 8005776:	2306      	movs	r3, #6
 8005778:	e00c      	b.n	8005794 <HAL_GPIO_Init+0x21c>
 800577a:	2307      	movs	r3, #7
 800577c:	e00a      	b.n	8005794 <HAL_GPIO_Init+0x21c>
 800577e:	2305      	movs	r3, #5
 8005780:	e008      	b.n	8005794 <HAL_GPIO_Init+0x21c>
 8005782:	2304      	movs	r3, #4
 8005784:	e006      	b.n	8005794 <HAL_GPIO_Init+0x21c>
 8005786:	2303      	movs	r3, #3
 8005788:	e004      	b.n	8005794 <HAL_GPIO_Init+0x21c>
 800578a:	2302      	movs	r3, #2
 800578c:	e002      	b.n	8005794 <HAL_GPIO_Init+0x21c>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <HAL_GPIO_Init+0x21c>
 8005792:	2300      	movs	r3, #0
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	f002 0203 	and.w	r2, r2, #3
 800579a:	0092      	lsls	r2, r2, #2
 800579c:	4093      	lsls	r3, r2
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057a4:	4935      	ldr	r1, [pc, #212]	; (800587c <HAL_GPIO_Init+0x304>)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	3302      	adds	r3, #2
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057b2:	4b3a      	ldr	r3, [pc, #232]	; (800589c <HAL_GPIO_Init+0x324>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	43db      	mvns	r3, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4013      	ands	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057d6:	4a31      	ldr	r2, [pc, #196]	; (800589c <HAL_GPIO_Init+0x324>)
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057dc:	4b2f      	ldr	r3, [pc, #188]	; (800589c <HAL_GPIO_Init+0x324>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	43db      	mvns	r3, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4013      	ands	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005800:	4a26      	ldr	r2, [pc, #152]	; (800589c <HAL_GPIO_Init+0x324>)
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005806:	4b25      	ldr	r3, [pc, #148]	; (800589c <HAL_GPIO_Init+0x324>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	43db      	mvns	r3, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4013      	ands	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800582a:	4a1c      	ldr	r2, [pc, #112]	; (800589c <HAL_GPIO_Init+0x324>)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005830:	4b1a      	ldr	r3, [pc, #104]	; (800589c <HAL_GPIO_Init+0x324>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	43db      	mvns	r3, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005854:	4a11      	ldr	r2, [pc, #68]	; (800589c <HAL_GPIO_Init+0x324>)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3301      	adds	r3, #1
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b0f      	cmp	r3, #15
 8005864:	f67f ae96 	bls.w	8005594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3724      	adds	r7, #36	; 0x24
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	40013800 	.word	0x40013800
 8005880:	40020000 	.word	0x40020000
 8005884:	40020400 	.word	0x40020400
 8005888:	40020800 	.word	0x40020800
 800588c:	40020c00 	.word	0x40020c00
 8005890:	40021000 	.word	0x40021000
 8005894:	40021400 	.word	0x40021400
 8005898:	40021800 	.word	0x40021800
 800589c:	40013c00 	.word	0x40013c00

080058a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	807b      	strh	r3, [r7, #2]
 80058ac:	4613      	mov	r3, r2
 80058ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058b0:	787b      	ldrb	r3, [r7, #1]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058b6:	887a      	ldrh	r2, [r7, #2]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058bc:	e003      	b.n	80058c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058be:	887b      	ldrh	r3, [r7, #2]
 80058c0:	041a      	lsls	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	619a      	str	r2, [r3, #24]
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e12b      	b.n	8005b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fc fe82 	bl	8002604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	; 0x24
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005938:	f000 fd0a 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800593c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4a81      	ldr	r2, [pc, #516]	; (8005b48 <HAL_I2C_Init+0x274>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d807      	bhi.n	8005958 <HAL_I2C_Init+0x84>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a80      	ldr	r2, [pc, #512]	; (8005b4c <HAL_I2C_Init+0x278>)
 800594c:	4293      	cmp	r3, r2
 800594e:	bf94      	ite	ls
 8005950:	2301      	movls	r3, #1
 8005952:	2300      	movhi	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e006      	b.n	8005966 <HAL_I2C_Init+0x92>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a7d      	ldr	r2, [pc, #500]	; (8005b50 <HAL_I2C_Init+0x27c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	bf94      	ite	ls
 8005960:	2301      	movls	r3, #1
 8005962:	2300      	movhi	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0e7      	b.n	8005b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a78      	ldr	r2, [pc, #480]	; (8005b54 <HAL_I2C_Init+0x280>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	0c9b      	lsrs	r3, r3, #18
 8005978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a6a      	ldr	r2, [pc, #424]	; (8005b48 <HAL_I2C_Init+0x274>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d802      	bhi.n	80059a8 <HAL_I2C_Init+0xd4>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3301      	adds	r3, #1
 80059a6:	e009      	b.n	80059bc <HAL_I2C_Init+0xe8>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	4a69      	ldr	r2, [pc, #420]	; (8005b58 <HAL_I2C_Init+0x284>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	099b      	lsrs	r3, r3, #6
 80059ba:	3301      	adds	r3, #1
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	495c      	ldr	r1, [pc, #368]	; (8005b48 <HAL_I2C_Init+0x274>)
 80059d8:	428b      	cmp	r3, r1
 80059da:	d819      	bhi.n	8005a10 <HAL_I2C_Init+0x13c>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1e59      	subs	r1, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ea:	1c59      	adds	r1, r3, #1
 80059ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059f0:	400b      	ands	r3, r1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_I2C_Init+0x138>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1e59      	subs	r1, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a04:	3301      	adds	r3, #1
 8005a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0a:	e051      	b.n	8005ab0 <HAL_I2C_Init+0x1dc>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	e04f      	b.n	8005ab0 <HAL_I2C_Init+0x1dc>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d111      	bne.n	8005a3c <HAL_I2C_Init+0x168>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1e58      	subs	r0, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	440b      	add	r3, r1
 8005a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e012      	b.n	8005a62 <HAL_I2C_Init+0x18e>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1e58      	subs	r0, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6859      	ldr	r1, [r3, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	0099      	lsls	r1, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a52:	3301      	adds	r3, #1
 8005a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_I2C_Init+0x196>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e022      	b.n	8005ab0 <HAL_I2C_Init+0x1dc>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10e      	bne.n	8005a90 <HAL_I2C_Init+0x1bc>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1e58      	subs	r0, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	440b      	add	r3, r1
 8005a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a84:	3301      	adds	r3, #1
 8005a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8e:	e00f      	b.n	8005ab0 <HAL_I2C_Init+0x1dc>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1e58      	subs	r0, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6859      	ldr	r1, [r3, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	0099      	lsls	r1, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	6809      	ldr	r1, [r1, #0]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6911      	ldr	r1, [r2, #16]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	4311      	orrs	r1, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	000186a0 	.word	0x000186a0
 8005b4c:	001e847f 	.word	0x001e847f
 8005b50:	003d08ff 	.word	0x003d08ff
 8005b54:	431bde83 	.word	0x431bde83
 8005b58:	10624dd3 	.word	0x10624dd3

08005b5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	461a      	mov	r2, r3
 8005b68:	460b      	mov	r3, r1
 8005b6a:	817b      	strh	r3, [r7, #10]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b70:	f7fe fbcc 	bl	800430c <HAL_GetTick>
 8005b74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	f040 80e0 	bne.w	8005d44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	2319      	movs	r3, #25
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4970      	ldr	r1, [pc, #448]	; (8005d50 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f964 	bl	8005e5c <I2C_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e0d3      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_I2C_Master_Transmit+0x50>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e0cc      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d007      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2221      	movs	r2, #33	; 0x21
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2210      	movs	r2, #16
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	893a      	ldrh	r2, [r7, #8]
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a50      	ldr	r2, [pc, #320]	; (8005d54 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c14:	8979      	ldrh	r1, [r7, #10]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f89c 	bl	8005d58 <I2C_MasterRequestWrite>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e08d      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c40:	e066      	b.n	8005d10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	6a39      	ldr	r1, [r7, #32]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f9de 	bl	8006008 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d107      	bne.n	8005c6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e06b      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	781a      	ldrb	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d11b      	bne.n	8005ce4 <HAL_I2C_Master_Transmit+0x188>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d017      	beq.n	8005ce4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	6a39      	ldr	r1, [r7, #32]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f9ce 	bl	800608a <I2C_WaitOnBTFFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d107      	bne.n	8005d0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e01a      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d194      	bne.n	8005c42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	00100002 	.word	0x00100002
 8005d54:	ffff0000 	.word	0xffff0000

08005d58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	460b      	mov	r3, r1
 8005d66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d006      	beq.n	8005d82 <I2C_MasterRequestWrite+0x2a>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d003      	beq.n	8005d82 <I2C_MasterRequestWrite+0x2a>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d80:	d108      	bne.n	8005d94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e00b      	b.n	8005dac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	2b12      	cmp	r3, #18
 8005d9a:	d107      	bne.n	8005dac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005daa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f84f 	bl	8005e5c <I2C_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d103      	bne.n	8005ddc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e035      	b.n	8005e4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de8:	d108      	bne.n	8005dfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005df8:	611a      	str	r2, [r3, #16]
 8005dfa:	e01b      	b.n	8005e34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dfc:	897b      	ldrh	r3, [r7, #10]
 8005dfe:	11db      	asrs	r3, r3, #7
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 0306 	and.w	r3, r3, #6
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f063 030f 	orn	r3, r3, #15
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	490e      	ldr	r1, [pc, #56]	; (8005e54 <I2C_MasterRequestWrite+0xfc>)
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f875 	bl	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e010      	b.n	8005e4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e2a:	897b      	ldrh	r3, [r7, #10]
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4907      	ldr	r1, [pc, #28]	; (8005e58 <I2C_MasterRequestWrite+0x100>)
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f865 	bl	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	00010008 	.word	0x00010008
 8005e58:	00010002 	.word	0x00010002

08005e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e6c:	e025      	b.n	8005eba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d021      	beq.n	8005eba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e76:	f7fe fa49 	bl	800430c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d302      	bcc.n	8005e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d116      	bne.n	8005eba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f043 0220 	orr.w	r2, r3, #32
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e023      	b.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	0c1b      	lsrs	r3, r3, #16
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d10d      	bne.n	8005ee0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2301      	moveq	r3, #1
 8005ed8:	2300      	movne	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	e00c      	b.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	43da      	mvns	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4013      	ands	r3, r2
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d0b6      	beq.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f18:	e051      	b.n	8005fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f28:	d123      	bne.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f043 0204 	orr.w	r2, r3, #4
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e046      	b.n	8006000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d021      	beq.n	8005fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fe f9c7 	bl	800430c <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d116      	bne.n	8005fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e020      	b.n	8006000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	0c1b      	lsrs	r3, r3, #16
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d10c      	bne.n	8005fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	43da      	mvns	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bf14      	ite	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	2300      	moveq	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	e00b      	b.n	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	43da      	mvns	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4013      	ands	r3, r2
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d18d      	bne.n	8005f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006014:	e02d      	b.n	8006072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f878 	bl	800610c <I2C_IsAcknowledgeFailed>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e02d      	b.n	8006082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d021      	beq.n	8006072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602e:	f7fe f96d 	bl	800430c <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	429a      	cmp	r2, r3
 800603c:	d302      	bcc.n	8006044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d116      	bne.n	8006072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	f043 0220 	orr.w	r2, r3, #32
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e007      	b.n	8006082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607c:	2b80      	cmp	r3, #128	; 0x80
 800607e:	d1ca      	bne.n	8006016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006096:	e02d      	b.n	80060f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f837 	bl	800610c <I2C_IsAcknowledgeFailed>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e02d      	b.n	8006104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d021      	beq.n	80060f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b0:	f7fe f92c 	bl	800430c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d302      	bcc.n	80060c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d116      	bne.n	80060f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	f043 0220 	orr.w	r2, r3, #32
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e007      	b.n	8006104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d1ca      	bne.n	8006098 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006122:	d11b      	bne.n	800615c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800612c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f043 0204 	orr.w	r2, r3, #4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
	...

0800616c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0cc      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006180:	4b68      	ldr	r3, [pc, #416]	; (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d90c      	bls.n	80061a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618e:	4b65      	ldr	r3, [pc, #404]	; (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006196:	4b63      	ldr	r3, [pc, #396]	; (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d001      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0b8      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d020      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061c0:	4b59      	ldr	r3, [pc, #356]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4a58      	ldr	r2, [pc, #352]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061d8:	4b53      	ldr	r3, [pc, #332]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a52      	ldr	r2, [pc, #328]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e4:	4b50      	ldr	r3, [pc, #320]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	494d      	ldr	r1, [pc, #308]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d044      	beq.n	800628c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d107      	bne.n	800621a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620a:	4b47      	ldr	r3, [pc, #284]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d119      	bne.n	800624a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e07f      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b02      	cmp	r3, #2
 8006220:	d003      	beq.n	800622a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006226:	2b03      	cmp	r3, #3
 8006228:	d107      	bne.n	800623a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622a:	4b3f      	ldr	r3, [pc, #252]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e06f      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800623a:	4b3b      	ldr	r3, [pc, #236]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e067      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800624a:	4b37      	ldr	r3, [pc, #220]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f023 0203 	bic.w	r2, r3, #3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4934      	ldr	r1, [pc, #208]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	4313      	orrs	r3, r2
 800625a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800625c:	f7fe f856 	bl	800430c <HAL_GetTick>
 8006260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	e00a      	b.n	800627a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006264:	f7fe f852 	bl	800430c <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e04f      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627a:	4b2b      	ldr	r3, [pc, #172]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 020c 	and.w	r2, r3, #12
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	429a      	cmp	r2, r3
 800628a:	d1eb      	bne.n	8006264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800628c:	4b25      	ldr	r3, [pc, #148]	; (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d20c      	bcs.n	80062b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629a:	4b22      	ldr	r3, [pc, #136]	; (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062a2:	4b20      	ldr	r3, [pc, #128]	; (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d001      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e032      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c0:	4b19      	ldr	r3, [pc, #100]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	4916      	ldr	r1, [pc, #88]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062de:	4b12      	ldr	r3, [pc, #72]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	490e      	ldr	r1, [pc, #56]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062f2:	f000 f887 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 80062f6:	4602      	mov	r2, r0
 80062f8:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	490a      	ldr	r1, [pc, #40]	; (800632c <HAL_RCC_ClockConfig+0x1c0>)
 8006304:	5ccb      	ldrb	r3, [r1, r3]
 8006306:	fa22 f303 	lsr.w	r3, r2, r3
 800630a:	4a09      	ldr	r2, [pc, #36]	; (8006330 <HAL_RCC_ClockConfig+0x1c4>)
 800630c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800630e:	4b09      	ldr	r3, [pc, #36]	; (8006334 <HAL_RCC_ClockConfig+0x1c8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f7fd f800 	bl	8003318 <HAL_InitTick>

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40023c00 	.word	0x40023c00
 8006328:	40023800 	.word	0x40023800
 800632c:	08011a3c 	.word	0x08011a3c
 8006330:	20000014 	.word	0x20000014
 8006334:	20000028 	.word	0x20000028

08006338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <HAL_RCC_GetHCLKFreq+0x14>)
 800633e:	681b      	ldr	r3, [r3, #0]
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000014 	.word	0x20000014

08006350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006354:	f7ff fff0 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8006358:	4602      	mov	r2, r0
 800635a:	4b05      	ldr	r3, [pc, #20]	; (8006370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	0a9b      	lsrs	r3, r3, #10
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	4903      	ldr	r1, [pc, #12]	; (8006374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006366:	5ccb      	ldrb	r3, [r1, r3]
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800636c:	4618      	mov	r0, r3
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40023800 	.word	0x40023800
 8006374:	08011a4c 	.word	0x08011a4c

08006378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800637c:	f7ff ffdc 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8006380:	4602      	mov	r2, r0
 8006382:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	0b5b      	lsrs	r3, r3, #13
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	4903      	ldr	r1, [pc, #12]	; (800639c <HAL_RCC_GetPCLK2Freq+0x24>)
 800638e:	5ccb      	ldrb	r3, [r1, r3]
 8006390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006394:	4618      	mov	r0, r3
 8006396:	bd80      	pop	{r7, pc}
 8006398:	40023800 	.word	0x40023800
 800639c:	08011a4c 	.word	0x08011a4c

080063a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	220f      	movs	r2, #15
 80063ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063b0:	4b12      	ldr	r3, [pc, #72]	; (80063fc <HAL_RCC_GetClockConfig+0x5c>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0203 	and.w	r2, r3, #3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <HAL_RCC_GetClockConfig+0x5c>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063c8:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <HAL_RCC_GetClockConfig+0x5c>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <HAL_RCC_GetClockConfig+0x5c>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	08db      	lsrs	r3, r3, #3
 80063da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063e2:	4b07      	ldr	r3, [pc, #28]	; (8006400 <HAL_RCC_GetClockConfig+0x60>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 020f 	and.w	r2, r3, #15
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	601a      	str	r2, [r3, #0]
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40023800 	.word	0x40023800
 8006400:	40023c00 	.word	0x40023c00

08006404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006408:	b0ae      	sub	sp, #184	; 0xb8
 800640a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800642a:	4bcb      	ldr	r3, [pc, #812]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
 8006432:	2b0c      	cmp	r3, #12
 8006434:	f200 8206 	bhi.w	8006844 <HAL_RCC_GetSysClockFreq+0x440>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <HAL_RCC_GetSysClockFreq+0x3c>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006475 	.word	0x08006475
 8006444:	08006845 	.word	0x08006845
 8006448:	08006845 	.word	0x08006845
 800644c:	08006845 	.word	0x08006845
 8006450:	0800647d 	.word	0x0800647d
 8006454:	08006845 	.word	0x08006845
 8006458:	08006845 	.word	0x08006845
 800645c:	08006845 	.word	0x08006845
 8006460:	08006485 	.word	0x08006485
 8006464:	08006845 	.word	0x08006845
 8006468:	08006845 	.word	0x08006845
 800646c:	08006845 	.word	0x08006845
 8006470:	08006675 	.word	0x08006675
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006474:	4bb9      	ldr	r3, [pc, #740]	; (800675c <HAL_RCC_GetSysClockFreq+0x358>)
 8006476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800647a:	e1e7      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800647c:	4bb8      	ldr	r3, [pc, #736]	; (8006760 <HAL_RCC_GetSysClockFreq+0x35c>)
 800647e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006482:	e1e3      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006484:	4bb4      	ldr	r3, [pc, #720]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800648c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006490:	4bb1      	ldr	r3, [pc, #708]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d071      	beq.n	8006580 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800649c:	4bae      	ldr	r3, [pc, #696]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	099b      	lsrs	r3, r3, #6
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80064ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064b8:	2300      	movs	r3, #0
 80064ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064c2:	4622      	mov	r2, r4
 80064c4:	462b      	mov	r3, r5
 80064c6:	f04f 0000 	mov.w	r0, #0
 80064ca:	f04f 0100 	mov.w	r1, #0
 80064ce:	0159      	lsls	r1, r3, #5
 80064d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064d4:	0150      	lsls	r0, r2, #5
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4621      	mov	r1, r4
 80064dc:	1a51      	subs	r1, r2, r1
 80064de:	6439      	str	r1, [r7, #64]	; 0x40
 80064e0:	4629      	mov	r1, r5
 80064e2:	eb63 0301 	sbc.w	r3, r3, r1
 80064e6:	647b      	str	r3, [r7, #68]	; 0x44
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80064f4:	4649      	mov	r1, r9
 80064f6:	018b      	lsls	r3, r1, #6
 80064f8:	4641      	mov	r1, r8
 80064fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064fe:	4641      	mov	r1, r8
 8006500:	018a      	lsls	r2, r1, #6
 8006502:	4641      	mov	r1, r8
 8006504:	1a51      	subs	r1, r2, r1
 8006506:	63b9      	str	r1, [r7, #56]	; 0x38
 8006508:	4649      	mov	r1, r9
 800650a:	eb63 0301 	sbc.w	r3, r3, r1
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800651c:	4649      	mov	r1, r9
 800651e:	00cb      	lsls	r3, r1, #3
 8006520:	4641      	mov	r1, r8
 8006522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006526:	4641      	mov	r1, r8
 8006528:	00ca      	lsls	r2, r1, #3
 800652a:	4610      	mov	r0, r2
 800652c:	4619      	mov	r1, r3
 800652e:	4603      	mov	r3, r0
 8006530:	4622      	mov	r2, r4
 8006532:	189b      	adds	r3, r3, r2
 8006534:	633b      	str	r3, [r7, #48]	; 0x30
 8006536:	462b      	mov	r3, r5
 8006538:	460a      	mov	r2, r1
 800653a:	eb42 0303 	adc.w	r3, r2, r3
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800654c:	4629      	mov	r1, r5
 800654e:	024b      	lsls	r3, r1, #9
 8006550:	4621      	mov	r1, r4
 8006552:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006556:	4621      	mov	r1, r4
 8006558:	024a      	lsls	r2, r1, #9
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800656c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006570:	f7fa fb4a 	bl	8000c08 <__aeabi_uldivmod>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4613      	mov	r3, r2
 800657a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800657e:	e067      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006580:	4b75      	ldr	r3, [pc, #468]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	099b      	lsrs	r3, r3, #6
 8006586:	2200      	movs	r2, #0
 8006588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800658c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006598:	67bb      	str	r3, [r7, #120]	; 0x78
 800659a:	2300      	movs	r3, #0
 800659c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800659e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80065a2:	4622      	mov	r2, r4
 80065a4:	462b      	mov	r3, r5
 80065a6:	f04f 0000 	mov.w	r0, #0
 80065aa:	f04f 0100 	mov.w	r1, #0
 80065ae:	0159      	lsls	r1, r3, #5
 80065b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065b4:	0150      	lsls	r0, r2, #5
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4621      	mov	r1, r4
 80065bc:	1a51      	subs	r1, r2, r1
 80065be:	62b9      	str	r1, [r7, #40]	; 0x28
 80065c0:	4629      	mov	r1, r5
 80065c2:	eb63 0301 	sbc.w	r3, r3, r1
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80065d4:	4649      	mov	r1, r9
 80065d6:	018b      	lsls	r3, r1, #6
 80065d8:	4641      	mov	r1, r8
 80065da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065de:	4641      	mov	r1, r8
 80065e0:	018a      	lsls	r2, r1, #6
 80065e2:	4641      	mov	r1, r8
 80065e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80065e8:	4649      	mov	r1, r9
 80065ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006602:	4692      	mov	sl, r2
 8006604:	469b      	mov	fp, r3
 8006606:	4623      	mov	r3, r4
 8006608:	eb1a 0303 	adds.w	r3, sl, r3
 800660c:	623b      	str	r3, [r7, #32]
 800660e:	462b      	mov	r3, r5
 8006610:	eb4b 0303 	adc.w	r3, fp, r3
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006622:	4629      	mov	r1, r5
 8006624:	028b      	lsls	r3, r1, #10
 8006626:	4621      	mov	r1, r4
 8006628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800662c:	4621      	mov	r1, r4
 800662e:	028a      	lsls	r2, r1, #10
 8006630:	4610      	mov	r0, r2
 8006632:	4619      	mov	r1, r3
 8006634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006638:	2200      	movs	r2, #0
 800663a:	673b      	str	r3, [r7, #112]	; 0x70
 800663c:	677a      	str	r2, [r7, #116]	; 0x74
 800663e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006642:	f7fa fae1 	bl	8000c08 <__aeabi_uldivmod>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4613      	mov	r3, r2
 800664c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006650:	4b41      	ldr	r3, [pc, #260]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	3301      	adds	r3, #1
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800666a:	fbb2 f3f3 	udiv	r3, r2, r3
 800666e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006672:	e0eb      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006674:	4b38      	ldr	r3, [pc, #224]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800667c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006680:	4b35      	ldr	r3, [pc, #212]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d06b      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800668c:	4b32      	ldr	r3, [pc, #200]	; (8006758 <HAL_RCC_GetSysClockFreq+0x354>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	099b      	lsrs	r3, r3, #6
 8006692:	2200      	movs	r2, #0
 8006694:	66bb      	str	r3, [r7, #104]	; 0x68
 8006696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800669a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669e:	663b      	str	r3, [r7, #96]	; 0x60
 80066a0:	2300      	movs	r3, #0
 80066a2:	667b      	str	r3, [r7, #100]	; 0x64
 80066a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80066a8:	4622      	mov	r2, r4
 80066aa:	462b      	mov	r3, r5
 80066ac:	f04f 0000 	mov.w	r0, #0
 80066b0:	f04f 0100 	mov.w	r1, #0
 80066b4:	0159      	lsls	r1, r3, #5
 80066b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ba:	0150      	lsls	r0, r2, #5
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4621      	mov	r1, r4
 80066c2:	1a51      	subs	r1, r2, r1
 80066c4:	61b9      	str	r1, [r7, #24]
 80066c6:	4629      	mov	r1, r5
 80066c8:	eb63 0301 	sbc.w	r3, r3, r1
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80066da:	4659      	mov	r1, fp
 80066dc:	018b      	lsls	r3, r1, #6
 80066de:	4651      	mov	r1, sl
 80066e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066e4:	4651      	mov	r1, sl
 80066e6:	018a      	lsls	r2, r1, #6
 80066e8:	4651      	mov	r1, sl
 80066ea:	ebb2 0801 	subs.w	r8, r2, r1
 80066ee:	4659      	mov	r1, fp
 80066f0:	eb63 0901 	sbc.w	r9, r3, r1
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006700:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006704:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006708:	4690      	mov	r8, r2
 800670a:	4699      	mov	r9, r3
 800670c:	4623      	mov	r3, r4
 800670e:	eb18 0303 	adds.w	r3, r8, r3
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	462b      	mov	r3, r5
 8006716:	eb49 0303 	adc.w	r3, r9, r3
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006728:	4629      	mov	r1, r5
 800672a:	024b      	lsls	r3, r1, #9
 800672c:	4621      	mov	r1, r4
 800672e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006732:	4621      	mov	r1, r4
 8006734:	024a      	lsls	r2, r1, #9
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800673e:	2200      	movs	r2, #0
 8006740:	65bb      	str	r3, [r7, #88]	; 0x58
 8006742:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006748:	f7fa fa5e 	bl	8000c08 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4613      	mov	r3, r2
 8006752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006756:	e065      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x420>
 8006758:	40023800 	.word	0x40023800
 800675c:	00f42400 	.word	0x00f42400
 8006760:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006764:	4b3d      	ldr	r3, [pc, #244]	; (800685c <HAL_RCC_GetSysClockFreq+0x458>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	099b      	lsrs	r3, r3, #6
 800676a:	2200      	movs	r2, #0
 800676c:	4618      	mov	r0, r3
 800676e:	4611      	mov	r1, r2
 8006770:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006774:	653b      	str	r3, [r7, #80]	; 0x50
 8006776:	2300      	movs	r3, #0
 8006778:	657b      	str	r3, [r7, #84]	; 0x54
 800677a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800677e:	4642      	mov	r2, r8
 8006780:	464b      	mov	r3, r9
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f04f 0100 	mov.w	r1, #0
 800678a:	0159      	lsls	r1, r3, #5
 800678c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006790:	0150      	lsls	r0, r2, #5
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4641      	mov	r1, r8
 8006798:	1a51      	subs	r1, r2, r1
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	4649      	mov	r1, r9
 800679e:	eb63 0301 	sbc.w	r3, r3, r1
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80067b0:	4659      	mov	r1, fp
 80067b2:	018b      	lsls	r3, r1, #6
 80067b4:	4651      	mov	r1, sl
 80067b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067ba:	4651      	mov	r1, sl
 80067bc:	018a      	lsls	r2, r1, #6
 80067be:	4651      	mov	r1, sl
 80067c0:	1a54      	subs	r4, r2, r1
 80067c2:	4659      	mov	r1, fp
 80067c4:	eb63 0501 	sbc.w	r5, r3, r1
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	00eb      	lsls	r3, r5, #3
 80067d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067d6:	00e2      	lsls	r2, r4, #3
 80067d8:	4614      	mov	r4, r2
 80067da:	461d      	mov	r5, r3
 80067dc:	4643      	mov	r3, r8
 80067de:	18e3      	adds	r3, r4, r3
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	464b      	mov	r3, r9
 80067e4:	eb45 0303 	adc.w	r3, r5, r3
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067f6:	4629      	mov	r1, r5
 80067f8:	028b      	lsls	r3, r1, #10
 80067fa:	4621      	mov	r1, r4
 80067fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006800:	4621      	mov	r1, r4
 8006802:	028a      	lsls	r2, r1, #10
 8006804:	4610      	mov	r0, r2
 8006806:	4619      	mov	r1, r3
 8006808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800680c:	2200      	movs	r2, #0
 800680e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006810:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006812:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006816:	f7fa f9f7 	bl	8000c08 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4613      	mov	r3, r2
 8006820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006824:	4b0d      	ldr	r3, [pc, #52]	; (800685c <HAL_RCC_GetSysClockFreq+0x458>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	0f1b      	lsrs	r3, r3, #28
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800683a:	fbb2 f3f3 	udiv	r3, r2, r3
 800683e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006842:	e003      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006844:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800684a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800684c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006850:	4618      	mov	r0, r3
 8006852:	37b8      	adds	r7, #184	; 0xb8
 8006854:	46bd      	mov	sp, r7
 8006856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685a:	bf00      	nop
 800685c:	40023800 	.word	0x40023800
 8006860:	00f42400 	.word	0x00f42400

08006864 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e28d      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8083 	beq.w	800698a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006884:	4b94      	ldr	r3, [pc, #592]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 030c 	and.w	r3, r3, #12
 800688c:	2b04      	cmp	r3, #4
 800688e:	d019      	beq.n	80068c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006890:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006898:	2b08      	cmp	r3, #8
 800689a:	d106      	bne.n	80068aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800689c:	4b8e      	ldr	r3, [pc, #568]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068a8:	d00c      	beq.n	80068c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068aa:	4b8b      	ldr	r3, [pc, #556]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d112      	bne.n	80068dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068b6:	4b88      	ldr	r3, [pc, #544]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c2:	d10b      	bne.n	80068dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c4:	4b84      	ldr	r3, [pc, #528]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d05b      	beq.n	8006988 <HAL_RCC_OscConfig+0x124>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d157      	bne.n	8006988 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e25a      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e4:	d106      	bne.n	80068f4 <HAL_RCC_OscConfig+0x90>
 80068e6:	4b7c      	ldr	r3, [pc, #496]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a7b      	ldr	r2, [pc, #492]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80068ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	e01d      	b.n	8006930 <HAL_RCC_OscConfig+0xcc>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068fc:	d10c      	bne.n	8006918 <HAL_RCC_OscConfig+0xb4>
 80068fe:	4b76      	ldr	r3, [pc, #472]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a75      	ldr	r2, [pc, #468]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	4b73      	ldr	r3, [pc, #460]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a72      	ldr	r2, [pc, #456]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e00b      	b.n	8006930 <HAL_RCC_OscConfig+0xcc>
 8006918:	4b6f      	ldr	r3, [pc, #444]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a6e      	ldr	r2, [pc, #440]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 800691e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	4b6c      	ldr	r3, [pc, #432]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a6b      	ldr	r2, [pc, #428]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 800692a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800692e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d013      	beq.n	8006960 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fd fce8 	bl	800430c <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006940:	f7fd fce4 	bl	800430c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b64      	cmp	r3, #100	; 0x64
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e21f      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006952:	4b61      	ldr	r3, [pc, #388]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0xdc>
 800695e:	e014      	b.n	800698a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fd fcd4 	bl	800430c <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006968:	f7fd fcd0 	bl	800430c <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b64      	cmp	r3, #100	; 0x64
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e20b      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800697a:	4b57      	ldr	r3, [pc, #348]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f0      	bne.n	8006968 <HAL_RCC_OscConfig+0x104>
 8006986:	e000      	b.n	800698a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d06f      	beq.n	8006a76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006996:	4b50      	ldr	r3, [pc, #320]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 030c 	and.w	r3, r3, #12
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d017      	beq.n	80069d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069a2:	4b4d      	ldr	r3, [pc, #308]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d105      	bne.n	80069ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069ae:	4b4a      	ldr	r3, [pc, #296]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00b      	beq.n	80069d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ba:	4b47      	ldr	r3, [pc, #284]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069c2:	2b0c      	cmp	r3, #12
 80069c4:	d11c      	bne.n	8006a00 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069c6:	4b44      	ldr	r3, [pc, #272]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d116      	bne.n	8006a00 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d2:	4b41      	ldr	r3, [pc, #260]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <HAL_RCC_OscConfig+0x186>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d001      	beq.n	80069ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e1d3      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ea:	4b3b      	ldr	r3, [pc, #236]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4937      	ldr	r1, [pc, #220]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069fe:	e03a      	b.n	8006a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d020      	beq.n	8006a4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a08:	4b34      	ldr	r3, [pc, #208]	; (8006adc <HAL_RCC_OscConfig+0x278>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0e:	f7fd fc7d 	bl	800430c <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a16:	f7fd fc79 	bl	800430c <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e1b4      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a28:	4b2b      	ldr	r3, [pc, #172]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a34:	4b28      	ldr	r3, [pc, #160]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	4925      	ldr	r1, [pc, #148]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	600b      	str	r3, [r1, #0]
 8006a48:	e015      	b.n	8006a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a4a:	4b24      	ldr	r3, [pc, #144]	; (8006adc <HAL_RCC_OscConfig+0x278>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fd fc5c 	bl	800430c <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a58:	f7fd fc58 	bl	800430c <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e193      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d036      	beq.n	8006af0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d016      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <HAL_RCC_OscConfig+0x27c>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a90:	f7fd fc3c 	bl	800430c <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a98:	f7fd fc38 	bl	800430c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e173      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x234>
 8006ab6:	e01b      	b.n	8006af0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab8:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <HAL_RCC_OscConfig+0x27c>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abe:	f7fd fc25 	bl	800430c <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac4:	e00e      	b.n	8006ae4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ac6:	f7fd fc21 	bl	800430c <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d907      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e15c      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	42470000 	.word	0x42470000
 8006ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae4:	4b8a      	ldr	r3, [pc, #552]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1ea      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8097 	beq.w	8006c2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b02:	4b83      	ldr	r3, [pc, #524]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10f      	bne.n	8006b2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	4b7f      	ldr	r3, [pc, #508]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	4a7e      	ldr	r2, [pc, #504]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b1e:	4b7c      	ldr	r3, [pc, #496]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b26:	60bb      	str	r3, [r7, #8]
 8006b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b2e:	4b79      	ldr	r3, [pc, #484]	; (8006d14 <HAL_RCC_OscConfig+0x4b0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d118      	bne.n	8006b6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b3a:	4b76      	ldr	r3, [pc, #472]	; (8006d14 <HAL_RCC_OscConfig+0x4b0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a75      	ldr	r2, [pc, #468]	; (8006d14 <HAL_RCC_OscConfig+0x4b0>)
 8006b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b46:	f7fd fbe1 	bl	800430c <HAL_GetTick>
 8006b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4c:	e008      	b.n	8006b60 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4e:	f7fd fbdd 	bl	800430c <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e118      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b60:	4b6c      	ldr	r3, [pc, #432]	; (8006d14 <HAL_RCC_OscConfig+0x4b0>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0f0      	beq.n	8006b4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d106      	bne.n	8006b82 <HAL_RCC_OscConfig+0x31e>
 8006b74:	4b66      	ldr	r3, [pc, #408]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b78:	4a65      	ldr	r2, [pc, #404]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b80:	e01c      	b.n	8006bbc <HAL_RCC_OscConfig+0x358>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	d10c      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x340>
 8006b8a:	4b61      	ldr	r3, [pc, #388]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	4a60      	ldr	r2, [pc, #384]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b90:	f043 0304 	orr.w	r3, r3, #4
 8006b94:	6713      	str	r3, [r2, #112]	; 0x70
 8006b96:	4b5e      	ldr	r3, [pc, #376]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	4a5d      	ldr	r2, [pc, #372]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba2:	e00b      	b.n	8006bbc <HAL_RCC_OscConfig+0x358>
 8006ba4:	4b5a      	ldr	r3, [pc, #360]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba8:	4a59      	ldr	r2, [pc, #356]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006baa:	f023 0301 	bic.w	r3, r3, #1
 8006bae:	6713      	str	r3, [r2, #112]	; 0x70
 8006bb0:	4b57      	ldr	r3, [pc, #348]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb4:	4a56      	ldr	r2, [pc, #344]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006bb6:	f023 0304 	bic.w	r3, r3, #4
 8006bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d015      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc4:	f7fd fba2 	bl	800430c <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bca:	e00a      	b.n	8006be2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bcc:	f7fd fb9e 	bl	800430c <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e0d7      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be2:	4b4b      	ldr	r3, [pc, #300]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0ee      	beq.n	8006bcc <HAL_RCC_OscConfig+0x368>
 8006bee:	e014      	b.n	8006c1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf0:	f7fd fb8c 	bl	800430c <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf6:	e00a      	b.n	8006c0e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf8:	f7fd fb88 	bl	800430c <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e0c1      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0e:	4b40      	ldr	r3, [pc, #256]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1ee      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d105      	bne.n	8006c2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c20:	4b3b      	ldr	r3, [pc, #236]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	4a3a      	ldr	r2, [pc, #232]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80ad 	beq.w	8006d90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c36:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 030c 	and.w	r3, r3, #12
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d060      	beq.n	8006d04 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d145      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4a:	4b33      	ldr	r3, [pc, #204]	; (8006d18 <HAL_RCC_OscConfig+0x4b4>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c50:	f7fd fb5c 	bl	800430c <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c58:	f7fd fb58 	bl	800430c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e093      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6a:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	019b      	lsls	r3, r3, #6
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	061b      	lsls	r3, r3, #24
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	071b      	lsls	r3, r3, #28
 8006ca2:	491b      	ldr	r1, [pc, #108]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <HAL_RCC_OscConfig+0x4b4>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cae:	f7fd fb2d 	bl	800430c <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cb6:	f7fd fb29 	bl	800430c <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e064      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cc8:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x452>
 8006cd4:	e05c      	b.n	8006d90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cd6:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <HAL_RCC_OscConfig+0x4b4>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cdc:	f7fd fb16 	bl	800430c <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ce4:	f7fd fb12 	bl	800430c <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e04d      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <HAL_RCC_OscConfig+0x4ac>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f0      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x480>
 8006d02:	e045      	b.n	8006d90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d107      	bne.n	8006d1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e040      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
 8006d10:	40023800 	.word	0x40023800
 8006d14:	40007000 	.word	0x40007000
 8006d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d1c:	4b1f      	ldr	r3, [pc, #124]	; (8006d9c <HAL_RCC_OscConfig+0x538>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d030      	beq.n	8006d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d129      	bne.n	8006d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d122      	bne.n	8006d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d119      	bne.n	8006d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	3b01      	subs	r3, #1
 8006d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d10f      	bne.n	8006d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d107      	bne.n	8006d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40023800 	.word	0x40023800

08006da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e07b      	b.n	8006eaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc2:	d009      	beq.n	8006dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	61da      	str	r2, [r3, #28]
 8006dca:	e005      	b.n	8006dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fc f9ec 	bl	80031d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	ea42 0103 	orr.w	r1, r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	f003 0104 	and.w	r1, r3, #4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f003 0210 	and.w	r2, r3, #16
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b088      	sub	sp, #32
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_SPI_Transmit+0x22>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e126      	b.n	8007122 <HAL_SPI_Transmit+0x270>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006edc:	f7fd fa16 	bl	800430c <HAL_GetTick>
 8006ee0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d002      	beq.n	8006ef8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ef6:	e10b      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_SPI_Transmit+0x52>
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f08:	e102      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	88fa      	ldrh	r2, [r7, #6]
 8006f22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	88fa      	ldrh	r2, [r7, #6]
 8006f28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f50:	d10f      	bne.n	8006f72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d007      	beq.n	8006f90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f98:	d14b      	bne.n	8007032 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_SPI_Transmit+0xf6>
 8006fa2:	8afb      	ldrh	r3, [r7, #22]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d13e      	bne.n	8007026 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fcc:	e02b      	b.n	8007026 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d112      	bne.n	8007002 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	881a      	ldrh	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007000:	e011      	b.n	8007026 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007002:	f7fd f983 	bl	800430c <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d803      	bhi.n	800701a <HAL_SPI_Transmit+0x168>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d102      	bne.n	8007020 <HAL_SPI_Transmit+0x16e>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007024:	e074      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ce      	bne.n	8006fce <HAL_SPI_Transmit+0x11c>
 8007030:	e04c      	b.n	80070cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_Transmit+0x18e>
 800703a:	8afb      	ldrh	r3, [r7, #22]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d140      	bne.n	80070c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	330c      	adds	r3, #12
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007066:	e02c      	b.n	80070c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d113      	bne.n	800709e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	330c      	adds	r3, #12
 8007080:	7812      	ldrb	r2, [r2, #0]
 8007082:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	86da      	strh	r2, [r3, #54]	; 0x36
 800709c:	e011      	b.n	80070c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800709e:	f7fd f935 	bl	800430c <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d803      	bhi.n	80070b6 <HAL_SPI_Transmit+0x204>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d102      	bne.n	80070bc <HAL_SPI_Transmit+0x20a>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070c0:	e026      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1cd      	bne.n	8007068 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 fa63 	bl	800759c <SPI_EndRxTxTransaction>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10a      	bne.n	8007100 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070ea:	2300      	movs	r3, #0
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	e000      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
  }

error:
 800710e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007120:	7ffb      	ldrb	r3, [r7, #31]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b08c      	sub	sp, #48	; 0x30
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
 8007136:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007138:	2301      	movs	r3, #1
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_SPI_TransmitReceive+0x26>
 800714c:	2302      	movs	r3, #2
 800714e:	e18a      	b.n	8007466 <HAL_SPI_TransmitReceive+0x33c>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007158:	f7fd f8d8 	bl	800430c <HAL_GetTick>
 800715c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800716e:	887b      	ldrh	r3, [r7, #2]
 8007170:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007176:	2b01      	cmp	r3, #1
 8007178:	d00f      	beq.n	800719a <HAL_SPI_TransmitReceive+0x70>
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007180:	d107      	bne.n	8007192 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <HAL_SPI_TransmitReceive+0x68>
 800718a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800718e:	2b04      	cmp	r3, #4
 8007190:	d003      	beq.n	800719a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007192:	2302      	movs	r3, #2
 8007194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007198:	e15b      	b.n	8007452 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x82>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x82>
 80071a6:	887b      	ldrh	r3, [r7, #2]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071b2:	e14e      	b.n	8007452 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d003      	beq.n	80071c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2205      	movs	r2, #5
 80071c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	887a      	ldrh	r2, [r7, #2]
 80071d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	887a      	ldrh	r2, [r7, #2]
 80071de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	887a      	ldrh	r2, [r7, #2]
 80071ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	887a      	ldrh	r2, [r7, #2]
 80071f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d007      	beq.n	800721c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800721a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007224:	d178      	bne.n	8007318 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_SPI_TransmitReceive+0x10a>
 800722e:	8b7b      	ldrh	r3, [r7, #26]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d166      	bne.n	8007302 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	881a      	ldrh	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	1c9a      	adds	r2, r3, #2
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007258:	e053      	b.n	8007302 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d11b      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x176>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d016      	beq.n	80072a0 <HAL_SPI_TransmitReceive+0x176>
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	2b01      	cmp	r3, #1
 8007276:	d113      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	881a      	ldrh	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	1c9a      	adds	r2, r3, #2
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d119      	bne.n	80072e2 <HAL_SPI_TransmitReceive+0x1b8>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d014      	beq.n	80072e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	b292      	uxth	r2, r2
 80072c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	1c9a      	adds	r2, r3, #2
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072de:	2301      	movs	r3, #1
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072e2:	f7fd f813 	bl	800430c <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d807      	bhi.n	8007302 <HAL_SPI_TransmitReceive+0x1d8>
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d003      	beq.n	8007302 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007300:	e0a7      	b.n	8007452 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1a6      	bne.n	800725a <HAL_SPI_TransmitReceive+0x130>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1a1      	bne.n	800725a <HAL_SPI_TransmitReceive+0x130>
 8007316:	e07c      	b.n	8007412 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <HAL_SPI_TransmitReceive+0x1fc>
 8007320:	8b7b      	ldrh	r3, [r7, #26]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d16b      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	330c      	adds	r3, #12
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800734c:	e057      	b.n	80073fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d11c      	bne.n	8007396 <HAL_SPI_TransmitReceive+0x26c>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d017      	beq.n	8007396 <HAL_SPI_TransmitReceive+0x26c>
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	2b01      	cmp	r3, #1
 800736a:	d114      	bne.n	8007396 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	7812      	ldrb	r2, [r2, #0]
 8007378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d119      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x2ae>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d014      	beq.n	80073d8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073d4:	2301      	movs	r3, #1
 80073d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073d8:	f7fc ff98 	bl	800430c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d803      	bhi.n	80073f0 <HAL_SPI_TransmitReceive+0x2c6>
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d102      	bne.n	80073f6 <HAL_SPI_TransmitReceive+0x2cc>
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073fc:	e029      	b.n	8007452 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007402:	b29b      	uxth	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1a2      	bne.n	800734e <HAL_SPI_TransmitReceive+0x224>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d19d      	bne.n	800734e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007414:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f8c0 	bl	800759c <SPI_EndRxTxTransaction>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d006      	beq.n	8007430 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800742e:	e010      	b.n	8007452 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	e000      	b.n	8007452 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007450:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007462:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007466:	4618      	mov	r0, r3
 8007468:	3730      	adds	r7, #48	; 0x30
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800747c:	b2db      	uxtb	r3, r3
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	4613      	mov	r3, r2
 800749a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800749c:	f7fc ff36 	bl	800430c <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4413      	add	r3, r2
 80074aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074ac:	f7fc ff2e 	bl	800430c <HAL_GetTick>
 80074b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074b2:	4b39      	ldr	r3, [pc, #228]	; (8007598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	015b      	lsls	r3, r3, #5
 80074b8:	0d1b      	lsrs	r3, r3, #20
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	fb02 f303 	mul.w	r3, r2, r3
 80074c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074c2:	e054      	b.n	800756e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d050      	beq.n	800756e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074cc:	f7fc ff1e 	bl	800430c <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d902      	bls.n	80074e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d13d      	bne.n	800755e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074fa:	d111      	bne.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007504:	d004      	beq.n	8007510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750e:	d107      	bne.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800751e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007528:	d10f      	bne.n	800754a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e017      	b.n	800758e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	3b01      	subs	r3, #1
 800756c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4013      	ands	r3, r2
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	429a      	cmp	r2, r3
 800757c:	bf0c      	ite	eq
 800757e:	2301      	moveq	r3, #1
 8007580:	2300      	movne	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	461a      	mov	r2, r3
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	429a      	cmp	r2, r3
 800758a:	d19b      	bne.n	80074c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000014 	.word	0x20000014

0800759c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af02      	add	r7, sp, #8
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075a8:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <SPI_EndRxTxTransaction+0x7c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1b      	ldr	r2, [pc, #108]	; (800761c <SPI_EndRxTxTransaction+0x80>)
 80075ae:	fba2 2303 	umull	r2, r3, r2, r3
 80075b2:	0d5b      	lsrs	r3, r3, #21
 80075b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075b8:	fb02 f303 	mul.w	r3, r2, r3
 80075bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c6:	d112      	bne.n	80075ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2200      	movs	r2, #0
 80075d0:	2180      	movs	r1, #128	; 0x80
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7ff ff5a 	bl	800748c <SPI_WaitFlagStateUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d016      	beq.n	800760c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e2:	f043 0220 	orr.w	r2, r3, #32
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e00f      	b.n	800760e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007604:	2b80      	cmp	r3, #128	; 0x80
 8007606:	d0f2      	beq.n	80075ee <SPI_EndRxTxTransaction+0x52>
 8007608:	e000      	b.n	800760c <SPI_EndRxTxTransaction+0x70>
        break;
 800760a:	bf00      	nop
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000014 	.word	0x20000014
 800761c:	165e9f81 	.word	0x165e9f81

08007620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e041      	b.n	80076b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fc f960 	bl	800390c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3304      	adds	r3, #4
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f000 fc42 	bl	8007ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d001      	beq.n	80076d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e046      	b.n	8007766 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a23      	ldr	r2, [pc, #140]	; (8007774 <HAL_TIM_Base_Start+0xb4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d022      	beq.n	8007730 <HAL_TIM_Base_Start+0x70>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f2:	d01d      	beq.n	8007730 <HAL_TIM_Base_Start+0x70>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1f      	ldr	r2, [pc, #124]	; (8007778 <HAL_TIM_Base_Start+0xb8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d018      	beq.n	8007730 <HAL_TIM_Base_Start+0x70>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1e      	ldr	r2, [pc, #120]	; (800777c <HAL_TIM_Base_Start+0xbc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <HAL_TIM_Base_Start+0x70>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1c      	ldr	r2, [pc, #112]	; (8007780 <HAL_TIM_Base_Start+0xc0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00e      	beq.n	8007730 <HAL_TIM_Base_Start+0x70>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <HAL_TIM_Base_Start+0xc4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d009      	beq.n	8007730 <HAL_TIM_Base_Start+0x70>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a19      	ldr	r2, [pc, #100]	; (8007788 <HAL_TIM_Base_Start+0xc8>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <HAL_TIM_Base_Start+0x70>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <HAL_TIM_Base_Start+0xcc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d111      	bne.n	8007754 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b06      	cmp	r3, #6
 8007740:	d010      	beq.n	8007764 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0201 	orr.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007752:	e007      	b.n	8007764 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40010000 	.word	0x40010000
 8007778:	40000400 	.word	0x40000400
 800777c:	40000800 	.word	0x40000800
 8007780:	40000c00 	.word	0x40000c00
 8007784:	40010400 	.word	0x40010400
 8007788:	40014000 	.word	0x40014000
 800778c:	40001800 	.word	0x40001800

08007790 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	f241 1311 	movw	r3, #4369	; 0x1111
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10f      	bne.n	80077c8 <HAL_TIM_Base_Stop+0x38>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6a1a      	ldr	r2, [r3, #32]
 80077ae:	f240 4344 	movw	r3, #1092	; 0x444
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d107      	bne.n	80077c8 <HAL_TIM_Base_Stop+0x38>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0201 	bic.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d001      	beq.n	80077f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e04e      	b.n	8007896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0201 	orr.w	r2, r2, #1
 800780e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a23      	ldr	r2, [pc, #140]	; (80078a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d022      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007822:	d01d      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d018      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a1e      	ldr	r2, [pc, #120]	; (80078ac <HAL_TIM_Base_Start_IT+0xcc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d013      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1c      	ldr	r2, [pc, #112]	; (80078b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00e      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d009      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a19      	ldr	r2, [pc, #100]	; (80078b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d004      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a18      	ldr	r2, [pc, #96]	; (80078bc <HAL_TIM_Base_Start_IT+0xdc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d111      	bne.n	8007884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b06      	cmp	r3, #6
 8007870:	d010      	beq.n	8007894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0201 	orr.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007882:	e007      	b.n	8007894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40010000 	.word	0x40010000
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40000800 	.word	0x40000800
 80078b0:	40000c00 	.word	0x40000c00
 80078b4:	40010400 	.word	0x40010400
 80078b8:	40014000 	.word	0x40014000
 80078bc:	40001800 	.word	0x40001800

080078c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e041      	b.n	8007956 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f839 	bl	800795e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f000 faf2 	bl	8007ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b02      	cmp	r3, #2
 8007986:	d122      	bne.n	80079ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b02      	cmp	r3, #2
 8007994:	d11b      	bne.n	80079ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f06f 0202 	mvn.w	r2, #2
 800799e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fa78 	bl	8007eaa <HAL_TIM_IC_CaptureCallback>
 80079ba:	e005      	b.n	80079c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa6a 	bl	8007e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa7b 	bl	8007ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d122      	bne.n	8007a22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d11b      	bne.n	8007a22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f06f 0204 	mvn.w	r2, #4
 80079f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fa4e 	bl	8007eaa <HAL_TIM_IC_CaptureCallback>
 8007a0e:	e005      	b.n	8007a1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fa40 	bl	8007e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa51 	bl	8007ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d122      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d11b      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f06f 0208 	mvn.w	r2, #8
 8007a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	f003 0303 	and.w	r3, r3, #3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fa24 	bl	8007eaa <HAL_TIM_IC_CaptureCallback>
 8007a62:	e005      	b.n	8007a70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fa16 	bl	8007e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa27 	bl	8007ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0310 	and.w	r3, r3, #16
 8007a80:	2b10      	cmp	r3, #16
 8007a82:	d122      	bne.n	8007aca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0310 	and.w	r3, r3, #16
 8007a8e:	2b10      	cmp	r3, #16
 8007a90:	d11b      	bne.n	8007aca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f06f 0210 	mvn.w	r2, #16
 8007a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f9fa 	bl	8007eaa <HAL_TIM_IC_CaptureCallback>
 8007ab6:	e005      	b.n	8007ac4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f9ec 	bl	8007e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9fd 	bl	8007ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d10e      	bne.n	8007af6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d107      	bne.n	8007af6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f06f 0201 	mvn.w	r2, #1
 8007aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fb f8a1 	bl	8002c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b00:	2b80      	cmp	r3, #128	; 0x80
 8007b02:	d10e      	bne.n	8007b22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b80      	cmp	r3, #128	; 0x80
 8007b10:	d107      	bne.n	8007b22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fda5 	bl	800866c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d10e      	bne.n	8007b4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b40      	cmp	r3, #64	; 0x40
 8007b3c:	d107      	bne.n	8007b4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f9c2 	bl	8007ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d10e      	bne.n	8007b7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d107      	bne.n	8007b7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f06f 0220 	mvn.w	r2, #32
 8007b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fd6f 	bl	8008658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e0ae      	b.n	8007d00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b0c      	cmp	r3, #12
 8007bae:	f200 809f 	bhi.w	8007cf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bb2:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007bed 	.word	0x08007bed
 8007bbc:	08007cf1 	.word	0x08007cf1
 8007bc0:	08007cf1 	.word	0x08007cf1
 8007bc4:	08007cf1 	.word	0x08007cf1
 8007bc8:	08007c2d 	.word	0x08007c2d
 8007bcc:	08007cf1 	.word	0x08007cf1
 8007bd0:	08007cf1 	.word	0x08007cf1
 8007bd4:	08007cf1 	.word	0x08007cf1
 8007bd8:	08007c6f 	.word	0x08007c6f
 8007bdc:	08007cf1 	.word	0x08007cf1
 8007be0:	08007cf1 	.word	0x08007cf1
 8007be4:	08007cf1 	.word	0x08007cf1
 8007be8:	08007caf 	.word	0x08007caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fa18 	bl	8008028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0208 	orr.w	r2, r2, #8
 8007c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0204 	bic.w	r2, r2, #4
 8007c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6999      	ldr	r1, [r3, #24]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	691a      	ldr	r2, [r3, #16]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	619a      	str	r2, [r3, #24]
      break;
 8007c2a:	e064      	b.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fa68 	bl	8008108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699a      	ldr	r2, [r3, #24]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6999      	ldr	r1, [r3, #24]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	021a      	lsls	r2, r3, #8
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	619a      	str	r2, [r3, #24]
      break;
 8007c6c:	e043      	b.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fabd 	bl	80081f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0208 	orr.w	r2, r2, #8
 8007c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69da      	ldr	r2, [r3, #28]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0204 	bic.w	r2, r2, #4
 8007c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69d9      	ldr	r1, [r3, #28]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	61da      	str	r2, [r3, #28]
      break;
 8007cac:	e023      	b.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68b9      	ldr	r1, [r7, #8]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fb11 	bl	80082dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69da      	ldr	r2, [r3, #28]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69da      	ldr	r2, [r3, #28]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69d9      	ldr	r1, [r3, #28]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	021a      	lsls	r2, r3, #8
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	61da      	str	r2, [r3, #28]
      break;
 8007cee:	e002      	b.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIM_ConfigClockSource+0x1c>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e0b4      	b.n	8007e8e <HAL_TIM_ConfigClockSource+0x186>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5c:	d03e      	beq.n	8007ddc <HAL_TIM_ConfigClockSource+0xd4>
 8007d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d62:	f200 8087 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	f000 8086 	beq.w	8007e7a <HAL_TIM_ConfigClockSource+0x172>
 8007d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d72:	d87f      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007d74:	2b70      	cmp	r3, #112	; 0x70
 8007d76:	d01a      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0xa6>
 8007d78:	2b70      	cmp	r3, #112	; 0x70
 8007d7a:	d87b      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007d7c:	2b60      	cmp	r3, #96	; 0x60
 8007d7e:	d050      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0x11a>
 8007d80:	2b60      	cmp	r3, #96	; 0x60
 8007d82:	d877      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007d84:	2b50      	cmp	r3, #80	; 0x50
 8007d86:	d03c      	beq.n	8007e02 <HAL_TIM_ConfigClockSource+0xfa>
 8007d88:	2b50      	cmp	r3, #80	; 0x50
 8007d8a:	d873      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d058      	beq.n	8007e42 <HAL_TIM_ConfigClockSource+0x13a>
 8007d90:	2b40      	cmp	r3, #64	; 0x40
 8007d92:	d86f      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007d94:	2b30      	cmp	r3, #48	; 0x30
 8007d96:	d064      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x15a>
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	d86b      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d060      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x15a>
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d867      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d05c      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x15a>
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d05a      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x15a>
 8007dac:	e062      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6899      	ldr	r1, [r3, #8]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f000 fb5d 	bl	800847c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	609a      	str	r2, [r3, #8]
      break;
 8007dda:	e04f      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	6899      	ldr	r1, [r3, #8]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f000 fb46 	bl	800847c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dfe:	609a      	str	r2, [r3, #8]
      break;
 8007e00:	e03c      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	6859      	ldr	r1, [r3, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f000 faba 	bl	8008388 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2150      	movs	r1, #80	; 0x50
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fb13 	bl	8008446 <TIM_ITRx_SetConfig>
      break;
 8007e20:	e02c      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6859      	ldr	r1, [r3, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f000 fad9 	bl	80083e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2160      	movs	r1, #96	; 0x60
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fb03 	bl	8008446 <TIM_ITRx_SetConfig>
      break;
 8007e40:	e01c      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f000 fa9a 	bl	8008388 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 faf3 	bl	8008446 <TIM_ITRx_SetConfig>
      break;
 8007e60:	e00c      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f000 faea 	bl	8008446 <TIM_ITRx_SetConfig>
      break;
 8007e72:	e003      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	73fb      	strb	r3, [r7, #15]
      break;
 8007e78:	e000      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a40      	ldr	r2, [pc, #256]	; (8007ffc <TIM_Base_SetConfig+0x114>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d013      	beq.n	8007f28 <TIM_Base_SetConfig+0x40>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f06:	d00f      	beq.n	8007f28 <TIM_Base_SetConfig+0x40>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a3d      	ldr	r2, [pc, #244]	; (8008000 <TIM_Base_SetConfig+0x118>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d00b      	beq.n	8007f28 <TIM_Base_SetConfig+0x40>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a3c      	ldr	r2, [pc, #240]	; (8008004 <TIM_Base_SetConfig+0x11c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d007      	beq.n	8007f28 <TIM_Base_SetConfig+0x40>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a3b      	ldr	r2, [pc, #236]	; (8008008 <TIM_Base_SetConfig+0x120>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d003      	beq.n	8007f28 <TIM_Base_SetConfig+0x40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a3a      	ldr	r2, [pc, #232]	; (800800c <TIM_Base_SetConfig+0x124>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d108      	bne.n	8007f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a2f      	ldr	r2, [pc, #188]	; (8007ffc <TIM_Base_SetConfig+0x114>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d02b      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f48:	d027      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a2c      	ldr	r2, [pc, #176]	; (8008000 <TIM_Base_SetConfig+0x118>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d023      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a2b      	ldr	r2, [pc, #172]	; (8008004 <TIM_Base_SetConfig+0x11c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d01f      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a2a      	ldr	r2, [pc, #168]	; (8008008 <TIM_Base_SetConfig+0x120>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01b      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a29      	ldr	r2, [pc, #164]	; (800800c <TIM_Base_SetConfig+0x124>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d017      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a28      	ldr	r2, [pc, #160]	; (8008010 <TIM_Base_SetConfig+0x128>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d013      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a27      	ldr	r2, [pc, #156]	; (8008014 <TIM_Base_SetConfig+0x12c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00f      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a26      	ldr	r2, [pc, #152]	; (8008018 <TIM_Base_SetConfig+0x130>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00b      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a25      	ldr	r2, [pc, #148]	; (800801c <TIM_Base_SetConfig+0x134>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d007      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a24      	ldr	r2, [pc, #144]	; (8008020 <TIM_Base_SetConfig+0x138>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d003      	beq.n	8007f9a <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a23      	ldr	r2, [pc, #140]	; (8008024 <TIM_Base_SetConfig+0x13c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d108      	bne.n	8007fac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a0a      	ldr	r2, [pc, #40]	; (8007ffc <TIM_Base_SetConfig+0x114>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d003      	beq.n	8007fe0 <TIM_Base_SetConfig+0xf8>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a0c      	ldr	r2, [pc, #48]	; (800800c <TIM_Base_SetConfig+0x124>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d103      	bne.n	8007fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	691a      	ldr	r2, [r3, #16]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	615a      	str	r2, [r3, #20]
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	40010000 	.word	0x40010000
 8008000:	40000400 	.word	0x40000400
 8008004:	40000800 	.word	0x40000800
 8008008:	40000c00 	.word	0x40000c00
 800800c:	40010400 	.word	0x40010400
 8008010:	40014000 	.word	0x40014000
 8008014:	40014400 	.word	0x40014400
 8008018:	40014800 	.word	0x40014800
 800801c:	40001800 	.word	0x40001800
 8008020:	40001c00 	.word	0x40001c00
 8008024:	40002000 	.word	0x40002000

08008028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	f023 0201 	bic.w	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f023 0302 	bic.w	r3, r3, #2
 8008070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a20      	ldr	r2, [pc, #128]	; (8008100 <TIM_OC1_SetConfig+0xd8>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_OC1_SetConfig+0x64>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a1f      	ldr	r2, [pc, #124]	; (8008104 <TIM_OC1_SetConfig+0xdc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d10c      	bne.n	80080a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f023 0308 	bic.w	r3, r3, #8
 8008092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	4313      	orrs	r3, r2
 800809c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f023 0304 	bic.w	r3, r3, #4
 80080a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a15      	ldr	r2, [pc, #84]	; (8008100 <TIM_OC1_SetConfig+0xd8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d003      	beq.n	80080b6 <TIM_OC1_SetConfig+0x8e>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a14      	ldr	r2, [pc, #80]	; (8008104 <TIM_OC1_SetConfig+0xdc>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d111      	bne.n	80080da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	621a      	str	r2, [r3, #32]
}
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	40010000 	.word	0x40010000
 8008104:	40010400 	.word	0x40010400

08008108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f023 0210 	bic.w	r2, r3, #16
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800813e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f023 0320 	bic.w	r3, r3, #32
 8008152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a22      	ldr	r2, [pc, #136]	; (80081ec <TIM_OC2_SetConfig+0xe4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d003      	beq.n	8008170 <TIM_OC2_SetConfig+0x68>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a21      	ldr	r2, [pc, #132]	; (80081f0 <TIM_OC2_SetConfig+0xe8>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d10d      	bne.n	800818c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800818a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a17      	ldr	r2, [pc, #92]	; (80081ec <TIM_OC2_SetConfig+0xe4>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_OC2_SetConfig+0x94>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <TIM_OC2_SetConfig+0xe8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d113      	bne.n	80081c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	621a      	str	r2, [r3, #32]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	40010000 	.word	0x40010000
 80081f0:	40010400 	.word	0x40010400

080081f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800823c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a21      	ldr	r2, [pc, #132]	; (80082d4 <TIM_OC3_SetConfig+0xe0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d003      	beq.n	800825a <TIM_OC3_SetConfig+0x66>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a20      	ldr	r2, [pc, #128]	; (80082d8 <TIM_OC3_SetConfig+0xe4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d10d      	bne.n	8008276 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a16      	ldr	r2, [pc, #88]	; (80082d4 <TIM_OC3_SetConfig+0xe0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d003      	beq.n	8008286 <TIM_OC3_SetConfig+0x92>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a15      	ldr	r2, [pc, #84]	; (80082d8 <TIM_OC3_SetConfig+0xe4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d113      	bne.n	80082ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800828c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	621a      	str	r2, [r3, #32]
}
 80082c8:	bf00      	nop
 80082ca:	371c      	adds	r7, #28
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	40010000 	.word	0x40010000
 80082d8:	40010400 	.word	0x40010400

080082dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	021b      	lsls	r3, r3, #8
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	031b      	lsls	r3, r3, #12
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a12      	ldr	r2, [pc, #72]	; (8008380 <TIM_OC4_SetConfig+0xa4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d003      	beq.n	8008344 <TIM_OC4_SetConfig+0x68>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a11      	ldr	r2, [pc, #68]	; (8008384 <TIM_OC4_SetConfig+0xa8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d109      	bne.n	8008358 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800834a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	019b      	lsls	r3, r3, #6
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	4313      	orrs	r3, r2
 8008356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	621a      	str	r2, [r3, #32]
}
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40010000 	.word	0x40010000
 8008384:	40010400 	.word	0x40010400

08008388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	f023 0201 	bic.w	r2, r3, #1
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f023 030a 	bic.w	r3, r3, #10
 80083c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	621a      	str	r2, [r3, #32]
}
 80083da:	bf00      	nop
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b087      	sub	sp, #28
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	f023 0210 	bic.w	r2, r3, #16
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	031b      	lsls	r3, r3, #12
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008422:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	4313      	orrs	r3, r2
 800842c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	621a      	str	r2, [r3, #32]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4313      	orrs	r3, r2
 8008464:	f043 0307 	orr.w	r3, r3, #7
 8008468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	609a      	str	r2, [r3, #8]
}
 8008470:	bf00      	nop
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	021a      	lsls	r2, r3, #8
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	431a      	orrs	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	609a      	str	r2, [r3, #8]
}
 80084b0:	bf00      	nop
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e05a      	b.n	800858a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a21      	ldr	r2, [pc, #132]	; (8008598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d022      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008520:	d01d      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a1d      	ldr	r2, [pc, #116]	; (800859c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d018      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a1b      	ldr	r2, [pc, #108]	; (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d013      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a1a      	ldr	r2, [pc, #104]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00e      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a18      	ldr	r2, [pc, #96]	; (80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d009      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a17      	ldr	r2, [pc, #92]	; (80085ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a15      	ldr	r2, [pc, #84]	; (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d10c      	bne.n	8008578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	4313      	orrs	r3, r2
 800856e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	40010000 	.word	0x40010000
 800859c:	40000400 	.word	0x40000400
 80085a0:	40000800 	.word	0x40000800
 80085a4:	40000c00 	.word	0x40000c00
 80085a8:	40010400 	.word	0x40010400
 80085ac:	40014000 	.word	0x40014000
 80085b0:	40001800 	.word	0x40001800

080085b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e03d      	b.n	800864c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e03f      	b.n	8008712 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7fb fd88 	bl	80041bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2224      	movs	r2, #36	; 0x24
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f929 	bl	800891c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	695a      	ldr	r2, [r3, #20]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b08a      	sub	sp, #40	; 0x28
 800871e:	af02      	add	r7, sp, #8
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	603b      	str	r3, [r7, #0]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b20      	cmp	r3, #32
 8008738:	d17c      	bne.n	8008834 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <HAL_UART_Transmit+0x2c>
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e075      	b.n	8008836 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_UART_Transmit+0x3e>
 8008754:	2302      	movs	r3, #2
 8008756:	e06e      	b.n	8008836 <HAL_UART_Transmit+0x11c>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2221      	movs	r2, #33	; 0x21
 800876a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800876e:	f7fb fdcd 	bl	800430c <HAL_GetTick>
 8008772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	88fa      	ldrh	r2, [r7, #6]
 8008778:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	88fa      	ldrh	r2, [r7, #6]
 800877e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008788:	d108      	bne.n	800879c <HAL_UART_Transmit+0x82>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d104      	bne.n	800879c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	61bb      	str	r3, [r7, #24]
 800879a:	e003      	b.n	80087a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80087ac:	e02a      	b.n	8008804 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2200      	movs	r2, #0
 80087b6:	2180      	movs	r1, #128	; 0x80
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 f840 	bl	800883e <UART_WaitOnFlagUntilTimeout>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e036      	b.n	8008836 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10b      	bne.n	80087e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	3302      	adds	r3, #2
 80087e2:	61bb      	str	r3, [r7, #24]
 80087e4:	e007      	b.n	80087f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	781a      	ldrb	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	3301      	adds	r3, #1
 80087f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1cf      	bne.n	80087ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2200      	movs	r2, #0
 8008816:	2140      	movs	r1, #64	; 0x40
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f810 	bl	800883e <UART_WaitOnFlagUntilTimeout>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e006      	b.n	8008836 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	e000      	b.n	8008836 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008834:	2302      	movs	r3, #2
  }
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b090      	sub	sp, #64	; 0x40
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	603b      	str	r3, [r7, #0]
 800884a:	4613      	mov	r3, r2
 800884c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800884e:	e050      	b.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008856:	d04c      	beq.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <UART_WaitOnFlagUntilTimeout+0x30>
 800885e:	f7fb fd55 	bl	800430c <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800886a:	429a      	cmp	r2, r3
 800886c:	d241      	bcs.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	330c      	adds	r3, #12
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	e853 3f00 	ldrex	r3, [r3]
 800887c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	330c      	adds	r3, #12
 800888c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800888e:	637a      	str	r2, [r7, #52]	; 0x34
 8008890:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e5      	bne.n	800886e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3314      	adds	r3, #20
 80088a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	613b      	str	r3, [r7, #16]
   return(result);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f023 0301 	bic.w	r3, r3, #1
 80088b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3314      	adds	r3, #20
 80088c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088c2:	623a      	str	r2, [r7, #32]
 80088c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c6:	69f9      	ldr	r1, [r7, #28]
 80088c8:	6a3a      	ldr	r2, [r7, #32]
 80088ca:	e841 2300 	strex	r3, r2, [r1]
 80088ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e5      	bne.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2220      	movs	r2, #32
 80088da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e00f      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4013      	ands	r3, r2
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	429a      	cmp	r2, r3
 8008900:	bf0c      	ite	eq
 8008902:	2301      	moveq	r3, #1
 8008904:	2300      	movne	r3, #0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	461a      	mov	r2, r3
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	429a      	cmp	r2, r3
 800890e:	d09f      	beq.n	8008850 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3740      	adds	r7, #64	; 0x40
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800891c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008920:	b0c0      	sub	sp, #256	; 0x100
 8008922:	af00      	add	r7, sp, #0
 8008924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008938:	68d9      	ldr	r1, [r3, #12]
 800893a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	ea40 0301 	orr.w	r3, r0, r1
 8008944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	431a      	orrs	r2, r3
 8008954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	431a      	orrs	r2, r3
 800895c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	4313      	orrs	r3, r2
 8008964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008974:	f021 010c 	bic.w	r1, r1, #12
 8008978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008982:	430b      	orrs	r3, r1
 8008984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008996:	6999      	ldr	r1, [r3, #24]
 8008998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	ea40 0301 	orr.w	r3, r0, r1
 80089a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	4b8f      	ldr	r3, [pc, #572]	; (8008be8 <UART_SetConfig+0x2cc>)
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d005      	beq.n	80089bc <UART_SetConfig+0xa0>
 80089b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	4b8d      	ldr	r3, [pc, #564]	; (8008bec <UART_SetConfig+0x2d0>)
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d104      	bne.n	80089c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089bc:	f7fd fcdc 	bl	8006378 <HAL_RCC_GetPCLK2Freq>
 80089c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80089c4:	e003      	b.n	80089ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089c6:	f7fd fcc3 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 80089ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d8:	f040 810c 	bne.w	8008bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80089ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80089ee:	4622      	mov	r2, r4
 80089f0:	462b      	mov	r3, r5
 80089f2:	1891      	adds	r1, r2, r2
 80089f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80089f6:	415b      	adcs	r3, r3
 80089f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80089fe:	4621      	mov	r1, r4
 8008a00:	eb12 0801 	adds.w	r8, r2, r1
 8008a04:	4629      	mov	r1, r5
 8008a06:	eb43 0901 	adc.w	r9, r3, r1
 8008a0a:	f04f 0200 	mov.w	r2, #0
 8008a0e:	f04f 0300 	mov.w	r3, #0
 8008a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a1e:	4690      	mov	r8, r2
 8008a20:	4699      	mov	r9, r3
 8008a22:	4623      	mov	r3, r4
 8008a24:	eb18 0303 	adds.w	r3, r8, r3
 8008a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	eb49 0303 	adc.w	r3, r9, r3
 8008a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	18db      	adds	r3, r3, r3
 8008a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a50:	4613      	mov	r3, r2
 8008a52:	eb42 0303 	adc.w	r3, r2, r3
 8008a56:	657b      	str	r3, [r7, #84]	; 0x54
 8008a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a60:	f7f8 f8d2 	bl	8000c08 <__aeabi_uldivmod>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4b61      	ldr	r3, [pc, #388]	; (8008bf0 <UART_SetConfig+0x2d4>)
 8008a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a6e:	095b      	lsrs	r3, r3, #5
 8008a70:	011c      	lsls	r4, r3, #4
 8008a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008a84:	4642      	mov	r2, r8
 8008a86:	464b      	mov	r3, r9
 8008a88:	1891      	adds	r1, r2, r2
 8008a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008a8c:	415b      	adcs	r3, r3
 8008a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a94:	4641      	mov	r1, r8
 8008a96:	eb12 0a01 	adds.w	sl, r2, r1
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	f04f 0300 	mov.w	r3, #0
 8008aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ab4:	4692      	mov	sl, r2
 8008ab6:	469b      	mov	fp, r3
 8008ab8:	4643      	mov	r3, r8
 8008aba:	eb1a 0303 	adds.w	r3, sl, r3
 8008abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ac2:	464b      	mov	r3, r9
 8008ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8008ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	18db      	adds	r3, r3, r3
 8008ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	eb42 0303 	adc.w	r3, r2, r3
 8008aec:	647b      	str	r3, [r7, #68]	; 0x44
 8008aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008af6:	f7f8 f887 	bl	8000c08 <__aeabi_uldivmod>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4611      	mov	r1, r2
 8008b00:	4b3b      	ldr	r3, [pc, #236]	; (8008bf0 <UART_SetConfig+0x2d4>)
 8008b02:	fba3 2301 	umull	r2, r3, r3, r1
 8008b06:	095b      	lsrs	r3, r3, #5
 8008b08:	2264      	movs	r2, #100	; 0x64
 8008b0a:	fb02 f303 	mul.w	r3, r2, r3
 8008b0e:	1acb      	subs	r3, r1, r3
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b16:	4b36      	ldr	r3, [pc, #216]	; (8008bf0 <UART_SetConfig+0x2d4>)
 8008b18:	fba3 2302 	umull	r2, r3, r3, r2
 8008b1c:	095b      	lsrs	r3, r3, #5
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b24:	441c      	add	r4, r3
 8008b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b38:	4642      	mov	r2, r8
 8008b3a:	464b      	mov	r3, r9
 8008b3c:	1891      	adds	r1, r2, r2
 8008b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b40:	415b      	adcs	r3, r3
 8008b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b48:	4641      	mov	r1, r8
 8008b4a:	1851      	adds	r1, r2, r1
 8008b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8008b4e:	4649      	mov	r1, r9
 8008b50:	414b      	adcs	r3, r1
 8008b52:	637b      	str	r3, [r7, #52]	; 0x34
 8008b54:	f04f 0200 	mov.w	r2, #0
 8008b58:	f04f 0300 	mov.w	r3, #0
 8008b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b60:	4659      	mov	r1, fp
 8008b62:	00cb      	lsls	r3, r1, #3
 8008b64:	4651      	mov	r1, sl
 8008b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	00ca      	lsls	r2, r1, #3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	4619      	mov	r1, r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	4642      	mov	r2, r8
 8008b76:	189b      	adds	r3, r3, r2
 8008b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b7c:	464b      	mov	r3, r9
 8008b7e:	460a      	mov	r2, r1
 8008b80:	eb42 0303 	adc.w	r3, r2, r3
 8008b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	18db      	adds	r3, r3, r3
 8008ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	eb42 0303 	adc.w	r3, r2, r3
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bb2:	f7f8 f829 	bl	8000c08 <__aeabi_uldivmod>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4b0d      	ldr	r3, [pc, #52]	; (8008bf0 <UART_SetConfig+0x2d4>)
 8008bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	2164      	movs	r1, #100	; 0x64
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	3332      	adds	r3, #50	; 0x32
 8008bce:	4a08      	ldr	r2, [pc, #32]	; (8008bf0 <UART_SetConfig+0x2d4>)
 8008bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd4:	095b      	lsrs	r3, r3, #5
 8008bd6:	f003 0207 	and.w	r2, r3, #7
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4422      	add	r2, r4
 8008be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008be4:	e106      	b.n	8008df4 <UART_SetConfig+0x4d8>
 8008be6:	bf00      	nop
 8008be8:	40011000 	.word	0x40011000
 8008bec:	40011400 	.word	0x40011400
 8008bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c06:	4642      	mov	r2, r8
 8008c08:	464b      	mov	r3, r9
 8008c0a:	1891      	adds	r1, r2, r2
 8008c0c:	6239      	str	r1, [r7, #32]
 8008c0e:	415b      	adcs	r3, r3
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24
 8008c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c16:	4641      	mov	r1, r8
 8008c18:	1854      	adds	r4, r2, r1
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	eb43 0501 	adc.w	r5, r3, r1
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	00eb      	lsls	r3, r5, #3
 8008c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c2e:	00e2      	lsls	r2, r4, #3
 8008c30:	4614      	mov	r4, r2
 8008c32:	461d      	mov	r5, r3
 8008c34:	4643      	mov	r3, r8
 8008c36:	18e3      	adds	r3, r4, r3
 8008c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	eb45 0303 	adc.w	r3, r5, r3
 8008c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	f04f 0300 	mov.w	r3, #0
 8008c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c62:	4629      	mov	r1, r5
 8008c64:	008b      	lsls	r3, r1, #2
 8008c66:	4621      	mov	r1, r4
 8008c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	008a      	lsls	r2, r1, #2
 8008c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c74:	f7f7 ffc8 	bl	8000c08 <__aeabi_uldivmod>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4b60      	ldr	r3, [pc, #384]	; (8008e00 <UART_SetConfig+0x4e4>)
 8008c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8008c82:	095b      	lsrs	r3, r3, #5
 8008c84:	011c      	lsls	r4, r3, #4
 8008c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008c98:	4642      	mov	r2, r8
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	1891      	adds	r1, r2, r2
 8008c9e:	61b9      	str	r1, [r7, #24]
 8008ca0:	415b      	adcs	r3, r3
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ca8:	4641      	mov	r1, r8
 8008caa:	1851      	adds	r1, r2, r1
 8008cac:	6139      	str	r1, [r7, #16]
 8008cae:	4649      	mov	r1, r9
 8008cb0:	414b      	adcs	r3, r1
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	f04f 0300 	mov.w	r3, #0
 8008cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	00cb      	lsls	r3, r1, #3
 8008cc4:	4651      	mov	r1, sl
 8008cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cca:	4651      	mov	r1, sl
 8008ccc:	00ca      	lsls	r2, r1, #3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4642      	mov	r2, r8
 8008cd6:	189b      	adds	r3, r3, r2
 8008cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cdc:	464b      	mov	r3, r9
 8008cde:	460a      	mov	r2, r1
 8008ce0:	eb42 0303 	adc.w	r3, r2, r3
 8008ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d00:	4649      	mov	r1, r9
 8008d02:	008b      	lsls	r3, r1, #2
 8008d04:	4641      	mov	r1, r8
 8008d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	008a      	lsls	r2, r1, #2
 8008d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d12:	f7f7 ff79 	bl	8000c08 <__aeabi_uldivmod>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4b38      	ldr	r3, [pc, #224]	; (8008e00 <UART_SetConfig+0x4e4>)
 8008d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8008d22:	095b      	lsrs	r3, r3, #5
 8008d24:	2264      	movs	r2, #100	; 0x64
 8008d26:	fb02 f303 	mul.w	r3, r2, r3
 8008d2a:	1acb      	subs	r3, r1, r3
 8008d2c:	011b      	lsls	r3, r3, #4
 8008d2e:	3332      	adds	r3, #50	; 0x32
 8008d30:	4a33      	ldr	r2, [pc, #204]	; (8008e00 <UART_SetConfig+0x4e4>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d3c:	441c      	add	r4, r3
 8008d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d42:	2200      	movs	r2, #0
 8008d44:	673b      	str	r3, [r7, #112]	; 0x70
 8008d46:	677a      	str	r2, [r7, #116]	; 0x74
 8008d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	464b      	mov	r3, r9
 8008d50:	1891      	adds	r1, r2, r2
 8008d52:	60b9      	str	r1, [r7, #8]
 8008d54:	415b      	adcs	r3, r3
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d5c:	4641      	mov	r1, r8
 8008d5e:	1851      	adds	r1, r2, r1
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	4649      	mov	r1, r9
 8008d64:	414b      	adcs	r3, r1
 8008d66:	607b      	str	r3, [r7, #4]
 8008d68:	f04f 0200 	mov.w	r2, #0
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d74:	4659      	mov	r1, fp
 8008d76:	00cb      	lsls	r3, r1, #3
 8008d78:	4651      	mov	r1, sl
 8008d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d7e:	4651      	mov	r1, sl
 8008d80:	00ca      	lsls	r2, r1, #3
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	4603      	mov	r3, r0
 8008d88:	4642      	mov	r2, r8
 8008d8a:	189b      	adds	r3, r3, r2
 8008d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d8e:	464b      	mov	r3, r9
 8008d90:	460a      	mov	r2, r1
 8008d92:	eb42 0303 	adc.w	r3, r2, r3
 8008d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	663b      	str	r3, [r7, #96]	; 0x60
 8008da2:	667a      	str	r2, [r7, #100]	; 0x64
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008db0:	4649      	mov	r1, r9
 8008db2:	008b      	lsls	r3, r1, #2
 8008db4:	4641      	mov	r1, r8
 8008db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dba:	4641      	mov	r1, r8
 8008dbc:	008a      	lsls	r2, r1, #2
 8008dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008dc2:	f7f7 ff21 	bl	8000c08 <__aeabi_uldivmod>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <UART_SetConfig+0x4e4>)
 8008dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	2164      	movs	r1, #100	; 0x64
 8008dd4:	fb01 f303 	mul.w	r3, r1, r3
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	3332      	adds	r3, #50	; 0x32
 8008dde:	4a08      	ldr	r2, [pc, #32]	; (8008e00 <UART_SetConfig+0x4e4>)
 8008de0:	fba2 2303 	umull	r2, r3, r2, r3
 8008de4:	095b      	lsrs	r3, r3, #5
 8008de6:	f003 020f 	and.w	r2, r3, #15
 8008dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4422      	add	r2, r4
 8008df2:	609a      	str	r2, [r3, #8]
}
 8008df4:	bf00      	nop
 8008df6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e00:	51eb851f 	.word	0x51eb851f

08008e04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008e08:	4904      	ldr	r1, [pc, #16]	; (8008e1c <MX_FATFS_Init+0x18>)
 8008e0a:	4805      	ldr	r0, [pc, #20]	; (8008e20 <MX_FATFS_Init+0x1c>)
 8008e0c:	f002 fe84 	bl	800bb18 <FATFS_LinkDriver>
 8008e10:	4603      	mov	r3, r0
 8008e12:	461a      	mov	r2, r3
 8008e14:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <MX_FATFS_Init+0x20>)
 8008e16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e18:	bf00      	nop
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	200060f4 	.word	0x200060f4
 8008e20:	20000030 	.word	0x20000030
 8008e24:	200060f0 	.word	0x200060f0

08008e28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008e2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (SD_disk_initialize(pdrv));
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f8 febb 	bl	8001bc0 <SD_disk_initialize>
 8008e4a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return (SD_disk_status(pdrv));
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f8 ff97 	bl	8001d94 <SD_disk_status>
 8008e66:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (SD_disk_read(pdrv,buff, sector, count));
 8008e80:	7bf8      	ldrb	r0, [r7, #15]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	f7f8 ff9a 	bl	8001dc0 <SD_disk_read>
 8008e8c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return (SD_disk_write(pdrv, buff, sector, count));
 8008ea6:	7bf8      	ldrb	r0, [r7, #15]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	68b9      	ldr	r1, [r7, #8]
 8008eae:	f7f8 fff1 	bl	8001e94 <SD_disk_write>
 8008eb2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	603a      	str	r2, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return (SD_disk_ioctl(pdrv, cmd, buff));
 8008ecc:	79b9      	ldrb	r1, [r7, #6]
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f9 f862 	bl	8001f9c <SD_disk_ioctl>
 8008ed8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <disk_status+0x30>)
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	79fa      	ldrb	r2, [r7, #7]
 8008efc:	4905      	ldr	r1, [pc, #20]	; (8008f14 <disk_status+0x30>)
 8008efe:	440a      	add	r2, r1
 8008f00:	7a12      	ldrb	r2, [r2, #8]
 8008f02:	4610      	mov	r0, r2
 8008f04:	4798      	blx	r3
 8008f06:	4603      	mov	r3, r0
 8008f08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20006120 	.word	0x20006120

08008f18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	4a0d      	ldr	r2, [pc, #52]	; (8008f60 <disk_initialize+0x48>)
 8008f2a:	5cd3      	ldrb	r3, [r2, r3]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d111      	bne.n	8008f54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	4a0b      	ldr	r2, [pc, #44]	; (8008f60 <disk_initialize+0x48>)
 8008f34:	2101      	movs	r1, #1
 8008f36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <disk_initialize+0x48>)
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	79fa      	ldrb	r2, [r7, #7]
 8008f46:	4906      	ldr	r1, [pc, #24]	; (8008f60 <disk_initialize+0x48>)
 8008f48:	440a      	add	r2, r1
 8008f4a:	7a12      	ldrb	r2, [r2, #8]
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	4603      	mov	r3, r0
 8008f52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20006120 	.word	0x20006120

08008f64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008f64:	b590      	push	{r4, r7, lr}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	607a      	str	r2, [r7, #4]
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	4603      	mov	r3, r0
 8008f72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	4a0a      	ldr	r2, [pc, #40]	; (8008fa0 <disk_read+0x3c>)
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	689c      	ldr	r4, [r3, #8]
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	4a07      	ldr	r2, [pc, #28]	; (8008fa0 <disk_read+0x3c>)
 8008f84:	4413      	add	r3, r2
 8008f86:	7a18      	ldrb	r0, [r3, #8]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	47a0      	blx	r4
 8008f90:	4603      	mov	r3, r0
 8008f92:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd90      	pop	{r4, r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20006120 	.word	0x20006120

08008fa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008fa4:	b590      	push	{r4, r7, lr}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <disk_write+0x3c>)
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	68dc      	ldr	r4, [r3, #12]
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	4a07      	ldr	r2, [pc, #28]	; (8008fe0 <disk_write+0x3c>)
 8008fc4:	4413      	add	r3, r2
 8008fc6:	7a18      	ldrb	r0, [r3, #8]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	47a0      	blx	r4
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd90      	pop	{r4, r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20006120 	.word	0x20006120

08008fe4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	603a      	str	r2, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	4a09      	ldr	r2, [pc, #36]	; (800901c <disk_ioctl+0x38>)
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	79fa      	ldrb	r2, [r7, #7]
 8009002:	4906      	ldr	r1, [pc, #24]	; (800901c <disk_ioctl+0x38>)
 8009004:	440a      	add	r2, r1
 8009006:	7a10      	ldrb	r0, [r2, #8]
 8009008:	79b9      	ldrb	r1, [r7, #6]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	4798      	blx	r3
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
  return res;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20006120 	.word	0x20006120

08009020 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3301      	adds	r3, #1
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009030:	89fb      	ldrh	r3, [r7, #14]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	b21a      	sxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	b21b      	sxth	r3, r3
 800903c:	4313      	orrs	r3, r2
 800903e:	b21b      	sxth	r3, r3
 8009040:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009042:	89fb      	ldrh	r3, [r7, #14]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3303      	adds	r3, #3
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	021b      	lsls	r3, r3, #8
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	3202      	adds	r2, #2
 8009068:	7812      	ldrb	r2, [r2, #0]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	021b      	lsls	r3, r3, #8
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	3201      	adds	r2, #1
 8009076:	7812      	ldrb	r2, [r2, #0]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	7812      	ldrb	r2, [r2, #0]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]
	return rv;
 8009088:	68fb      	ldr	r3, [r7, #12]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	887a      	ldrh	r2, [r7, #2]
 80090aa:	b2d2      	uxtb	r2, r2
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	887b      	ldrh	r3, [r7, #2]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	887a      	ldrh	r2, [r7, #2]
 80090bc:	b2d2      	uxtb	r2, r2
 80090be:	701a      	strb	r2, [r3, #0]
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	701a      	strb	r2, [r3, #0]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	0a1b      	lsrs	r3, r3, #8
 80090e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	b2d2      	uxtb	r2, r2
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	b2d2      	uxtb	r2, r2
 8009104:	701a      	strb	r2, [r3, #0]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	0a1b      	lsrs	r3, r3, #8
 800910a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	607a      	str	r2, [r7, #4]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	b2d2      	uxtb	r2, r2
 8009116:	701a      	strb	r2, [r3, #0]
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00d      	beq.n	800915a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	1c53      	adds	r3, r2, #1
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	1c59      	adds	r1, r3, #1
 8009148:	6179      	str	r1, [r7, #20]
 800914a:	7812      	ldrb	r2, [r2, #0]
 800914c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	3b01      	subs	r3, #1
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1f1      	bne.n	800913e <mem_cpy+0x1a>
	}
}
 800915a:	bf00      	nop
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009166:	b480      	push	{r7}
 8009168:	b087      	sub	sp, #28
 800916a:	af00      	add	r7, sp, #0
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	60b9      	str	r1, [r7, #8]
 8009170:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	617a      	str	r2, [r7, #20]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	b2d2      	uxtb	r2, r2
 8009180:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3b01      	subs	r3, #1
 8009186:	607b      	str	r3, [r7, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1f3      	bne.n	8009176 <mem_set+0x10>
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800919c:	b480      	push	{r7}
 800919e:	b089      	sub	sp, #36	; 0x24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	61fb      	str	r3, [r7, #28]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	61fa      	str	r2, [r7, #28]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	4619      	mov	r1, r3
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	61ba      	str	r2, [r7, #24]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	1acb      	subs	r3, r1, r3
 80091c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	607b      	str	r3, [r7, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <mem_cmp+0x40>
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0eb      	beq.n	80091b4 <mem_cmp+0x18>

	return r;
 80091dc:	697b      	ldr	r3, [r7, #20]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3724      	adds	r7, #36	; 0x24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80091f4:	e002      	b.n	80091fc <chk_chr+0x12>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	3301      	adds	r3, #1
 80091fa:	607b      	str	r3, [r7, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <chk_chr+0x26>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	4293      	cmp	r3, r2
 800920e:	d1f2      	bne.n	80091f6 <chk_chr+0xc>
	return *str;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	781b      	ldrb	r3, [r3, #0]
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <lock_fs+0x22>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	4618      	mov	r0, r3
 8009234:	f002 fcab 	bl	800bb8e <ff_req_grant>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <lock_fs+0x22>
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <lock_fs+0x24>
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00d      	beq.n	800927a <unlock_fs+0x2e>
 800925e:	78fb      	ldrb	r3, [r7, #3]
 8009260:	2b0c      	cmp	r3, #12
 8009262:	d00a      	beq.n	800927a <unlock_fs+0x2e>
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	2b0b      	cmp	r3, #11
 8009268:	d007      	beq.n	800927a <unlock_fs+0x2e>
 800926a:	78fb      	ldrb	r3, [r7, #3]
 800926c:	2b0f      	cmp	r3, #15
 800926e:	d004      	beq.n	800927a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4618      	mov	r0, r3
 8009276:	f002 fc9f 	bl	800bbb8 <ff_rel_grant>
	}
}
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800928e:	2300      	movs	r3, #0
 8009290:	60bb      	str	r3, [r7, #8]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e029      	b.n	80092ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009298:	4a27      	ldr	r2, [pc, #156]	; (8009338 <chk_lock+0xb4>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	4413      	add	r3, r2
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d01d      	beq.n	80092e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80092a6:	4a24      	ldr	r2, [pc, #144]	; (8009338 <chk_lock+0xb4>)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	4413      	add	r3, r2
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d116      	bne.n	80092e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80092b8:	4a1f      	ldr	r2, [pc, #124]	; (8009338 <chk_lock+0xb4>)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	4413      	add	r3, r2
 80092c0:	3304      	adds	r3, #4
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d10c      	bne.n	80092e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80092cc:	4a1a      	ldr	r2, [pc, #104]	; (8009338 <chk_lock+0xb4>)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	011b      	lsls	r3, r3, #4
 80092d2:	4413      	add	r3, r2
 80092d4:	3308      	adds	r3, #8
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80092dc:	429a      	cmp	r2, r3
 80092de:	d102      	bne.n	80092e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80092e0:	e007      	b.n	80092f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80092e2:	2301      	movs	r3, #1
 80092e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d9d2      	bls.n	8009298 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d109      	bne.n	800930c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <chk_lock+0x80>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b02      	cmp	r3, #2
 8009302:	d101      	bne.n	8009308 <chk_lock+0x84>
 8009304:	2300      	movs	r3, #0
 8009306:	e010      	b.n	800932a <chk_lock+0xa6>
 8009308:	2312      	movs	r3, #18
 800930a:	e00e      	b.n	800932a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d108      	bne.n	8009324 <chk_lock+0xa0>
 8009312:	4a09      	ldr	r2, [pc, #36]	; (8009338 <chk_lock+0xb4>)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	4413      	add	r3, r2
 800931a:	330c      	adds	r3, #12
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009322:	d101      	bne.n	8009328 <chk_lock+0xa4>
 8009324:	2310      	movs	r3, #16
 8009326:	e000      	b.n	800932a <chk_lock+0xa6>
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	20006100 	.word	0x20006100

0800933c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009342:	2300      	movs	r3, #0
 8009344:	607b      	str	r3, [r7, #4]
 8009346:	e002      	b.n	800934e <enq_lock+0x12>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3301      	adds	r3, #1
 800934c:	607b      	str	r3, [r7, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d806      	bhi.n	8009362 <enq_lock+0x26>
 8009354:	4a09      	ldr	r2, [pc, #36]	; (800937c <enq_lock+0x40>)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	011b      	lsls	r3, r3, #4
 800935a:	4413      	add	r3, r2
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1f2      	bne.n	8009348 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b02      	cmp	r3, #2
 8009366:	bf14      	ite	ne
 8009368:	2301      	movne	r3, #1
 800936a:	2300      	moveq	r3, #0
 800936c:	b2db      	uxtb	r3, r3
}
 800936e:	4618      	mov	r0, r3
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20006100 	.word	0x20006100

08009380 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	e01f      	b.n	80093d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009390:	4a41      	ldr	r2, [pc, #260]	; (8009498 <inc_lock+0x118>)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	011b      	lsls	r3, r3, #4
 8009396:	4413      	add	r3, r2
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d113      	bne.n	80093ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80093a2:	4a3d      	ldr	r2, [pc, #244]	; (8009498 <inc_lock+0x118>)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	4413      	add	r3, r2
 80093aa:	3304      	adds	r3, #4
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d109      	bne.n	80093ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80093b6:	4a38      	ldr	r2, [pc, #224]	; (8009498 <inc_lock+0x118>)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	011b      	lsls	r3, r3, #4
 80093bc:	4413      	add	r3, r2
 80093be:	3308      	adds	r3, #8
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d006      	beq.n	80093d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3301      	adds	r3, #1
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d9dc      	bls.n	8009390 <inc_lock+0x10>
 80093d6:	e000      	b.n	80093da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80093d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d132      	bne.n	8009446 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e002      	b.n	80093ec <inc_lock+0x6c>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d806      	bhi.n	8009400 <inc_lock+0x80>
 80093f2:	4a29      	ldr	r2, [pc, #164]	; (8009498 <inc_lock+0x118>)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	4413      	add	r3, r2
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1f2      	bne.n	80093e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b02      	cmp	r3, #2
 8009404:	d101      	bne.n	800940a <inc_lock+0x8a>
 8009406:	2300      	movs	r3, #0
 8009408:	e040      	b.n	800948c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	4922      	ldr	r1, [pc, #136]	; (8009498 <inc_lock+0x118>)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	440b      	add	r3, r1
 8009416:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	491e      	ldr	r1, [pc, #120]	; (8009498 <inc_lock+0x118>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	440b      	add	r3, r1
 8009424:	3304      	adds	r3, #4
 8009426:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	695a      	ldr	r2, [r3, #20]
 800942c:	491a      	ldr	r1, [pc, #104]	; (8009498 <inc_lock+0x118>)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	011b      	lsls	r3, r3, #4
 8009432:	440b      	add	r3, r1
 8009434:	3308      	adds	r3, #8
 8009436:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009438:	4a17      	ldr	r2, [pc, #92]	; (8009498 <inc_lock+0x118>)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	011b      	lsls	r3, r3, #4
 800943e:	4413      	add	r3, r2
 8009440:	330c      	adds	r3, #12
 8009442:	2200      	movs	r2, #0
 8009444:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d009      	beq.n	8009460 <inc_lock+0xe0>
 800944c:	4a12      	ldr	r2, [pc, #72]	; (8009498 <inc_lock+0x118>)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	4413      	add	r3, r2
 8009454:	330c      	adds	r3, #12
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <inc_lock+0xe0>
 800945c:	2300      	movs	r3, #0
 800945e:	e015      	b.n	800948c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d108      	bne.n	8009478 <inc_lock+0xf8>
 8009466:	4a0c      	ldr	r2, [pc, #48]	; (8009498 <inc_lock+0x118>)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	4413      	add	r3, r2
 800946e:	330c      	adds	r3, #12
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	e001      	b.n	800947c <inc_lock+0xfc>
 8009478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800947c:	4906      	ldr	r1, [pc, #24]	; (8009498 <inc_lock+0x118>)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	011b      	lsls	r3, r3, #4
 8009482:	440b      	add	r3, r1
 8009484:	330c      	adds	r3, #12
 8009486:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20006100 	.word	0x20006100

0800949c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d825      	bhi.n	80094fc <dec_lock+0x60>
		n = Files[i].ctr;
 80094b0:	4a17      	ldr	r2, [pc, #92]	; (8009510 <dec_lock+0x74>)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	011b      	lsls	r3, r3, #4
 80094b6:	4413      	add	r3, r2
 80094b8:	330c      	adds	r3, #12
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80094be:	89fb      	ldrh	r3, [r7, #14]
 80094c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c4:	d101      	bne.n	80094ca <dec_lock+0x2e>
 80094c6:	2300      	movs	r3, #0
 80094c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80094ca:	89fb      	ldrh	r3, [r7, #14]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <dec_lock+0x3a>
 80094d0:	89fb      	ldrh	r3, [r7, #14]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80094d6:	4a0e      	ldr	r2, [pc, #56]	; (8009510 <dec_lock+0x74>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	011b      	lsls	r3, r3, #4
 80094dc:	4413      	add	r3, r2
 80094de:	330c      	adds	r3, #12
 80094e0:	89fa      	ldrh	r2, [r7, #14]
 80094e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80094e4:	89fb      	ldrh	r3, [r7, #14]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d105      	bne.n	80094f6 <dec_lock+0x5a>
 80094ea:	4a09      	ldr	r2, [pc, #36]	; (8009510 <dec_lock+0x74>)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	4413      	add	r3, r2
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	737b      	strb	r3, [r7, #13]
 80094fa:	e001      	b.n	8009500 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80094fc:	2302      	movs	r3, #2
 80094fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009500:	7b7b      	ldrb	r3, [r7, #13]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	20006100 	.word	0x20006100

08009514 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800951c:	2300      	movs	r3, #0
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	e010      	b.n	8009544 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009522:	4a0d      	ldr	r2, [pc, #52]	; (8009558 <clear_lock+0x44>)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	4413      	add	r3, r2
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	429a      	cmp	r2, r3
 8009530:	d105      	bne.n	800953e <clear_lock+0x2a>
 8009532:	4a09      	ldr	r2, [pc, #36]	; (8009558 <clear_lock+0x44>)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	4413      	add	r3, r2
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d9eb      	bls.n	8009522 <clear_lock+0xe>
	}
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	20006100 	.word	0x20006100

0800955c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	78db      	ldrb	r3, [r3, #3]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d034      	beq.n	80095da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009574:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	7858      	ldrb	r0, [r3, #1]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009580:	2301      	movs	r3, #1
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	f7ff fd0e 	bl	8008fa4 <disk_write>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <sync_window+0x38>
			res = FR_DISK_ERR;
 800958e:	2301      	movs	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]
 8009592:	e022      	b.n	80095da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	1ad2      	subs	r2, r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d217      	bcs.n	80095da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	789b      	ldrb	r3, [r3, #2]
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	e010      	b.n	80095d4 <sync_window+0x78>
					wsect += fs->fsize;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	4413      	add	r3, r2
 80095ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	7858      	ldrb	r0, [r3, #1]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80095c6:	2301      	movs	r3, #1
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	f7ff fceb 	bl	8008fa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d8eb      	bhi.n	80095b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80095da:	7bfb      	ldrb	r3, [r7, #15]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d01b      	beq.n	8009634 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff ffad 	bl	800955c <sync_window>
 8009602:	4603      	mov	r3, r0
 8009604:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d113      	bne.n	8009634 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7858      	ldrb	r0, [r3, #1]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009616:	2301      	movs	r3, #1
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	f7ff fca3 	bl	8008f64 <disk_read>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009624:	f04f 33ff 	mov.w	r3, #4294967295
 8009628:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800962a:	2301      	movs	r3, #1
 800962c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff ff87 	bl	800955c <sync_window>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d158      	bne.n	800970a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d148      	bne.n	80096f2 <sync_fs+0xb2>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	791b      	ldrb	r3, [r3, #4]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d144      	bne.n	80096f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3334      	adds	r3, #52	; 0x34
 800966c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009670:	2100      	movs	r1, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff fd77 	bl	8009166 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3334      	adds	r3, #52	; 0x34
 800967c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009680:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff fd06 	bl	8009096 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	3334      	adds	r3, #52	; 0x34
 800968e:	4921      	ldr	r1, [pc, #132]	; (8009714 <sync_fs+0xd4>)
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fd1b 	bl	80090cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3334      	adds	r3, #52	; 0x34
 800969a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800969e:	491e      	ldr	r1, [pc, #120]	; (8009718 <sync_fs+0xd8>)
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff fd13 	bl	80090cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3334      	adds	r3, #52	; 0x34
 80096aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f7ff fd09 	bl	80090cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3334      	adds	r3, #52	; 0x34
 80096be:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7ff fcff 	bl	80090cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	7858      	ldrb	r0, [r3, #1]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e6:	2301      	movs	r3, #1
 80096e8:	f7ff fc5c 	bl	8008fa4 <disk_write>
			fs->fsi_flag = 0;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	785b      	ldrb	r3, [r3, #1]
 80096f6:	2200      	movs	r2, #0
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff fc72 	bl	8008fe4 <disk_ioctl>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <sync_fs+0xca>
 8009706:	2301      	movs	r3, #1
 8009708:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	41615252 	.word	0x41615252
 8009718:	61417272 	.word	0x61417272

0800971c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	3b02      	subs	r3, #2
 800972a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	3b02      	subs	r3, #2
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d301      	bcc.n	800973c <clust2sect+0x20>
 8009738:	2300      	movs	r3, #0
 800973a:	e008      	b.n	800974e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	895b      	ldrh	r3, [r3, #10]
 8009740:	461a      	mov	r2, r3
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	fb03 f202 	mul.w	r2, r3, r2
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	4413      	add	r3, r2
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d904      	bls.n	800977a <get_fat+0x20>
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d302      	bcc.n	8009780 <get_fat+0x26>
		val = 1;	/* Internal error */
 800977a:	2301      	movs	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	e08f      	b.n	80098a0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009780:	f04f 33ff 	mov.w	r3, #4294967295
 8009784:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	2b03      	cmp	r3, #3
 800978c:	d062      	beq.n	8009854 <get_fat+0xfa>
 800978e:	2b03      	cmp	r3, #3
 8009790:	dc7c      	bgt.n	800988c <get_fat+0x132>
 8009792:	2b01      	cmp	r3, #1
 8009794:	d002      	beq.n	800979c <get_fat+0x42>
 8009796:	2b02      	cmp	r3, #2
 8009798:	d042      	beq.n	8009820 <get_fat+0xc6>
 800979a:	e077      	b.n	800988c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	085b      	lsrs	r3, r3, #1
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	4413      	add	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	0a5b      	lsrs	r3, r3, #9
 80097b2:	4413      	add	r3, r2
 80097b4:	4619      	mov	r1, r3
 80097b6:	6938      	ldr	r0, [r7, #16]
 80097b8:	f7ff ff14 	bl	80095e4 <move_window>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d167      	bne.n	8009892 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	60fa      	str	r2, [r7, #12]
 80097c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4413      	add	r3, r2
 80097d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	0a5b      	lsrs	r3, r3, #9
 80097de:	4413      	add	r3, r2
 80097e0:	4619      	mov	r1, r3
 80097e2:	6938      	ldr	r0, [r7, #16]
 80097e4:	f7ff fefe 	bl	80095e4 <move_window>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d153      	bne.n	8009896 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097fc:	021b      	lsls	r3, r3, #8
 80097fe:	461a      	mov	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4313      	orrs	r3, r2
 8009804:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <get_fat+0xbc>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	091b      	lsrs	r3, r3, #4
 8009814:	e002      	b.n	800981c <get_fat+0xc2>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800981c:	617b      	str	r3, [r7, #20]
			break;
 800981e:	e03f      	b.n	80098a0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	4413      	add	r3, r2
 800982a:	4619      	mov	r1, r3
 800982c:	6938      	ldr	r0, [r7, #16]
 800982e:	f7ff fed9 	bl	80095e4 <move_window>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d130      	bne.n	800989a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009846:	4413      	add	r3, r2
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff fbe9 	bl	8009020 <ld_word>
 800984e:	4603      	mov	r3, r0
 8009850:	617b      	str	r3, [r7, #20]
			break;
 8009852:	e025      	b.n	80098a0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	09db      	lsrs	r3, r3, #7
 800985c:	4413      	add	r3, r2
 800985e:	4619      	mov	r1, r3
 8009860:	6938      	ldr	r0, [r7, #16]
 8009862:	f7ff febf 	bl	80095e4 <move_window>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d118      	bne.n	800989e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800987a:	4413      	add	r3, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fbe7 	bl	8009050 <ld_dword>
 8009882:	4603      	mov	r3, r0
 8009884:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009888:	617b      	str	r3, [r7, #20]
			break;
 800988a:	e009      	b.n	80098a0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800988c:	2301      	movs	r3, #1
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	e006      	b.n	80098a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009892:	bf00      	nop
 8009894:	e004      	b.n	80098a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009896:	bf00      	nop
 8009898:	e002      	b.n	80098a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800989e:	bf00      	nop
		}
	}

	return val;
 80098a0:	697b      	ldr	r3, [r7, #20]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80098aa:	b590      	push	{r4, r7, lr}
 80098ac:	b089      	sub	sp, #36	; 0x24
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80098b6:	2302      	movs	r3, #2
 80098b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	f240 80d9 	bls.w	8009a74 <put_fat+0x1ca>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	f080 80d3 	bcs.w	8009a74 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	f000 8096 	beq.w	8009a04 <put_fat+0x15a>
 80098d8:	2b03      	cmp	r3, #3
 80098da:	f300 80cb 	bgt.w	8009a74 <put_fat+0x1ca>
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d002      	beq.n	80098e8 <put_fat+0x3e>
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d06e      	beq.n	80099c4 <put_fat+0x11a>
 80098e6:	e0c5      	b.n	8009a74 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	61bb      	str	r3, [r7, #24]
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	085b      	lsrs	r3, r3, #1
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	4413      	add	r3, r2
 80098f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	0a5b      	lsrs	r3, r3, #9
 80098fe:	4413      	add	r3, r2
 8009900:	4619      	mov	r1, r3
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7ff fe6e 	bl	80095e4 <move_window>
 8009908:	4603      	mov	r3, r0
 800990a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800990c:	7ffb      	ldrb	r3, [r7, #31]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f040 80a9 	bne.w	8009a66 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	1c59      	adds	r1, r3, #1
 800991e:	61b9      	str	r1, [r7, #24]
 8009920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009924:	4413      	add	r3, r2
 8009926:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00d      	beq.n	800994e <put_fat+0xa4>
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	b25b      	sxtb	r3, r3
 8009938:	f003 030f 	and.w	r3, r3, #15
 800993c:	b25a      	sxtb	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	b25b      	sxtb	r3, r3
 8009946:	4313      	orrs	r3, r2
 8009948:	b25b      	sxtb	r3, r3
 800994a:	b2db      	uxtb	r3, r3
 800994c:	e001      	b.n	8009952 <put_fat+0xa8>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	0a5b      	lsrs	r3, r3, #9
 8009964:	4413      	add	r3, r2
 8009966:	4619      	mov	r1, r3
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fe3b 	bl	80095e4 <move_window>
 800996e:	4603      	mov	r3, r0
 8009970:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009972:	7ffb      	ldrb	r3, [r7, #31]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d178      	bne.n	8009a6a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009984:	4413      	add	r3, r2
 8009986:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <put_fat+0xf0>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	091b      	lsrs	r3, r3, #4
 8009996:	b2db      	uxtb	r3, r3
 8009998:	e00e      	b.n	80099b8 <put_fat+0x10e>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	b25b      	sxtb	r3, r3
 80099a0:	f023 030f 	bic.w	r3, r3, #15
 80099a4:	b25a      	sxtb	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	0a1b      	lsrs	r3, r3, #8
 80099aa:	b25b      	sxtb	r3, r3
 80099ac:	f003 030f 	and.w	r3, r3, #15
 80099b0:	b25b      	sxtb	r3, r3
 80099b2:	4313      	orrs	r3, r2
 80099b4:	b25b      	sxtb	r3, r3
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2201      	movs	r2, #1
 80099c0:	70da      	strb	r2, [r3, #3]
			break;
 80099c2:	e057      	b.n	8009a74 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	4413      	add	r3, r2
 80099ce:	4619      	mov	r1, r3
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f7ff fe07 	bl	80095e4 <move_window>
 80099d6:	4603      	mov	r3, r0
 80099d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099da:	7ffb      	ldrb	r3, [r7, #31]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d146      	bne.n	8009a6e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80099ee:	4413      	add	r3, r2
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	b292      	uxth	r2, r2
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff fb4d 	bl	8009096 <st_word>
			fs->wflag = 1;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2201      	movs	r2, #1
 8009a00:	70da      	strb	r2, [r3, #3]
			break;
 8009a02:	e037      	b.n	8009a74 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	09db      	lsrs	r3, r3, #7
 8009a0c:	4413      	add	r3, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff fde7 	bl	80095e4 <move_window>
 8009a16:	4603      	mov	r3, r0
 8009a18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a1a:	7ffb      	ldrb	r3, [r7, #31]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d128      	bne.n	8009a72 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009a34:	4413      	add	r3, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff fb0a 	bl	8009050 <ld_dword>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a42:	4323      	orrs	r3, r4
 8009a44:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009a54:	4413      	add	r3, r2
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff fb37 	bl	80090cc <st_dword>
			fs->wflag = 1;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2201      	movs	r2, #1
 8009a62:	70da      	strb	r2, [r3, #3]
			break;
 8009a64:	e006      	b.n	8009a74 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009a66:	bf00      	nop
 8009a68:	e004      	b.n	8009a74 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009a6a:	bf00      	nop
 8009a6c:	e002      	b.n	8009a74 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009a6e:	bf00      	nop
 8009a70:	e000      	b.n	8009a74 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009a72:	bf00      	nop
		}
	}
	return res;
 8009a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3724      	adds	r7, #36	; 0x24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd90      	pop	{r4, r7, pc}

08009a7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b088      	sub	sp, #32
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d904      	bls.n	8009aa4 <remove_chain+0x26>
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d301      	bcc.n	8009aa8 <remove_chain+0x2a>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e04b      	b.n	8009b40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00c      	beq.n	8009ac8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009aae:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	69b8      	ldr	r0, [r7, #24]
 8009ab6:	f7ff fef8 	bl	80098aa <put_fat>
 8009aba:	4603      	mov	r3, r0
 8009abc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009abe:	7ffb      	ldrb	r3, [r7, #31]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <remove_chain+0x4a>
 8009ac4:	7ffb      	ldrb	r3, [r7, #31]
 8009ac6:	e03b      	b.n	8009b40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009ac8:	68b9      	ldr	r1, [r7, #8]
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7ff fe45 	bl	800975a <get_fat>
 8009ad0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d031      	beq.n	8009b3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <remove_chain+0x64>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e02e      	b.n	8009b40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae8:	d101      	bne.n	8009aee <remove_chain+0x70>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e028      	b.n	8009b40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009aee:	2200      	movs	r2, #0
 8009af0:	68b9      	ldr	r1, [r7, #8]
 8009af2:	69b8      	ldr	r0, [r7, #24]
 8009af4:	f7ff fed9 	bl	80098aa <put_fat>
 8009af8:	4603      	mov	r3, r0
 8009afa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009afc:	7ffb      	ldrb	r3, [r7, #31]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <remove_chain+0x88>
 8009b02:	7ffb      	ldrb	r3, [r7, #31]
 8009b04:	e01c      	b.n	8009b40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	695a      	ldr	r2, [r3, #20]
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	3b02      	subs	r3, #2
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d20b      	bcs.n	8009b2c <remove_chain+0xae>
			fs->free_clst++;
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	791b      	ldrb	r3, [r3, #4]
 8009b22:	f043 0301 	orr.w	r3, r3, #1
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d3c6      	bcc.n	8009ac8 <remove_chain+0x4a>
 8009b3a:	e000      	b.n	8009b3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009b3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3720      	adds	r7, #32
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10d      	bne.n	8009b7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d004      	beq.n	8009b74 <create_chain+0x2c>
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	69ba      	ldr	r2, [r7, #24]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d31b      	bcc.n	8009bac <create_chain+0x64>
 8009b74:	2301      	movs	r3, #1
 8009b76:	61bb      	str	r3, [r7, #24]
 8009b78:	e018      	b.n	8009bac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff fdec 	bl	800975a <get_fat>
 8009b82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d801      	bhi.n	8009b8e <create_chain+0x46>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e070      	b.n	8009c70 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b94:	d101      	bne.n	8009b9a <create_chain+0x52>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	e06a      	b.n	8009c70 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d201      	bcs.n	8009ba8 <create_chain+0x60>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	e063      	b.n	8009c70 <create_chain+0x128>
		scl = clst;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d307      	bcc.n	8009bd0 <create_chain+0x88>
				ncl = 2;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009bc4:	69fa      	ldr	r2, [r7, #28]
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d901      	bls.n	8009bd0 <create_chain+0x88>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e04f      	b.n	8009c70 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009bd0:	69f9      	ldr	r1, [r7, #28]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff fdc1 	bl	800975a <get_fat>
 8009bd8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00e      	beq.n	8009bfe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d003      	beq.n	8009bee <create_chain+0xa6>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d101      	bne.n	8009bf2 <create_chain+0xaa>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	e03e      	b.n	8009c70 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009bf2:	69fa      	ldr	r2, [r7, #28]
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d1da      	bne.n	8009bb0 <create_chain+0x68>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e038      	b.n	8009c70 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009bfe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009c00:	f04f 32ff 	mov.w	r2, #4294967295
 8009c04:	69f9      	ldr	r1, [r7, #28]
 8009c06:	6938      	ldr	r0, [r7, #16]
 8009c08:	f7ff fe4f 	bl	80098aa <put_fat>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <create_chain+0xe2>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d006      	beq.n	8009c2a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009c1c:	69fa      	ldr	r2, [r7, #28]
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6938      	ldr	r0, [r7, #16]
 8009c22:	f7ff fe42 	bl	80098aa <put_fat>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d116      	bne.n	8009c5e <create_chain+0x116>
		fs->last_clst = ncl;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	69fa      	ldr	r2, [r7, #28]
 8009c34:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	695a      	ldr	r2, [r3, #20]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	3b02      	subs	r3, #2
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d804      	bhi.n	8009c4e <create_chain+0x106>
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	1e5a      	subs	r2, r3, #1
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	791b      	ldrb	r3, [r3, #4]
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	711a      	strb	r2, [r3, #4]
 8009c5c:	e007      	b.n	8009c6e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d102      	bne.n	8009c6a <create_chain+0x122>
 8009c64:	f04f 33ff 	mov.w	r3, #4294967295
 8009c68:	e000      	b.n	8009c6c <create_chain+0x124>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009c6e:	69fb      	ldr	r3, [r7, #28]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3720      	adds	r7, #32
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	0a5b      	lsrs	r3, r3, #9
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	8952      	ldrh	r2, [r2, #10]
 8009c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	1d1a      	adds	r2, r3, #4
 8009ca2:	613a      	str	r2, [r7, #16]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <clmt_clust+0x3a>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e010      	b.n	8009cd4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d307      	bcc.n	8009cca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009cc8:	e7e9      	b.n	8009c9e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009cca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	4413      	add	r3, r2
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	371c      	adds	r7, #28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cf6:	d204      	bcs.n	8009d02 <dir_sdi+0x22>
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	f003 031f 	and.w	r3, r3, #31
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009d02:	2302      	movs	r3, #2
 8009d04:	e063      	b.n	8009dce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d106      	bne.n	8009d26 <dir_sdi+0x46>
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d902      	bls.n	8009d26 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10c      	bne.n	8009d46 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	8912      	ldrh	r2, [r2, #8]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d301      	bcc.n	8009d3c <dir_sdi+0x5c>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e048      	b.n	8009dce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	61da      	str	r2, [r3, #28]
 8009d44:	e029      	b.n	8009d9a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	895b      	ldrh	r3, [r3, #10]
 8009d4a:	025b      	lsls	r3, r3, #9
 8009d4c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d4e:	e019      	b.n	8009d84 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6979      	ldr	r1, [r7, #20]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff fd00 	bl	800975a <get_fat>
 8009d5a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d62:	d101      	bne.n	8009d68 <dir_sdi+0x88>
 8009d64:	2301      	movs	r3, #1
 8009d66:	e032      	b.n	8009dce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d904      	bls.n	8009d78 <dir_sdi+0x98>
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d301      	bcc.n	8009d7c <dir_sdi+0x9c>
 8009d78:	2302      	movs	r3, #2
 8009d7a:	e028      	b.n	8009dce <dir_sdi+0xee>
			ofs -= csz;
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d2e1      	bcs.n	8009d50 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009d8c:	6979      	ldr	r1, [r7, #20]
 8009d8e:	6938      	ldr	r0, [r7, #16]
 8009d90:	f7ff fcc4 	bl	800971c <clust2sect>
 8009d94:	4602      	mov	r2, r0
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <dir_sdi+0xcc>
 8009da8:	2302      	movs	r3, #2
 8009daa:	e010      	b.n	8009dce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	69da      	ldr	r2, [r3, #28]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	0a5b      	lsrs	r3, r3, #9
 8009db4:	441a      	add	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc6:	441a      	add	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b086      	sub	sp, #24
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	3320      	adds	r3, #32
 8009dec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <dir_next+0x28>
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dfc:	d301      	bcc.n	8009e02 <dir_next+0x2c>
 8009dfe:	2304      	movs	r3, #4
 8009e00:	e0aa      	b.n	8009f58 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f040 8098 	bne.w	8009f3e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10b      	bne.n	8009e38 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	095b      	lsrs	r3, r3, #5
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	8912      	ldrh	r2, [r2, #8]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	f0c0 8088 	bcc.w	8009f3e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	61da      	str	r2, [r3, #28]
 8009e34:	2304      	movs	r3, #4
 8009e36:	e08f      	b.n	8009f58 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	0a5b      	lsrs	r3, r3, #9
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	8952      	ldrh	r2, [r2, #10]
 8009e40:	3a01      	subs	r2, #1
 8009e42:	4013      	ands	r3, r2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d17a      	bne.n	8009f3e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4610      	mov	r0, r2
 8009e52:	f7ff fc82 	bl	800975a <get_fat>
 8009e56:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d801      	bhi.n	8009e62 <dir_next+0x8c>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e07a      	b.n	8009f58 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e68:	d101      	bne.n	8009e6e <dir_next+0x98>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e074      	b.n	8009f58 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d358      	bcc.n	8009f2a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d104      	bne.n	8009e88 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	61da      	str	r2, [r3, #28]
 8009e84:	2304      	movs	r3, #4
 8009e86:	e067      	b.n	8009f58 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4610      	mov	r0, r2
 8009e92:	f7ff fe59 	bl	8009b48 <create_chain>
 8009e96:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <dir_next+0xcc>
 8009e9e:	2307      	movs	r3, #7
 8009ea0:	e05a      	b.n	8009f58 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d101      	bne.n	8009eac <dir_next+0xd6>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e055      	b.n	8009f58 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb2:	d101      	bne.n	8009eb8 <dir_next+0xe2>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e04f      	b.n	8009f58 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7ff fb4f 	bl	800955c <sync_window>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <dir_next+0xf2>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e047      	b.n	8009f58 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3334      	adds	r3, #52	; 0x34
 8009ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff f947 	bl	8009166 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ed8:	2300      	movs	r3, #0
 8009eda:	613b      	str	r3, [r7, #16]
 8009edc:	6979      	ldr	r1, [r7, #20]
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fc1c 	bl	800971c <clust2sect>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8009eea:	e012      	b.n	8009f12 <dir_next+0x13c>
						fs->wflag = 1;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7ff fb32 	bl	800955c <sync_window>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <dir_next+0x12c>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e02a      	b.n	8009f58 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	3301      	adds	r3, #1
 8009f06:	613b      	str	r3, [r7, #16]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	631a      	str	r2, [r3, #48]	; 0x30
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	895b      	ldrh	r3, [r3, #10]
 8009f16:	461a      	mov	r2, r3
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d3e6      	bcc.n	8009eec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	1ad2      	subs	r2, r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009f30:	6979      	ldr	r1, [r7, #20]
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f7ff fbf2 	bl	800971c <clust2sect>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f50:	441a      	add	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009f70:	2100      	movs	r1, #0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff feb4 	bl	8009ce0 <dir_sdi>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d12b      	bne.n	8009fda <dir_alloc+0x7a>
		n = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff fb29 	bl	80095e4 <move_window>
 8009f92:	4603      	mov	r3, r0
 8009f94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11d      	bne.n	8009fd8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2be5      	cmp	r3, #229	; 0xe5
 8009fa4:	d004      	beq.n	8009fb0 <dir_alloc+0x50>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d107      	bne.n	8009fc0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	613b      	str	r3, [r7, #16]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d102      	bne.n	8009fc4 <dir_alloc+0x64>
 8009fbe:	e00c      	b.n	8009fda <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff ff05 	bl	8009dd6 <dir_next>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0d7      	beq.n	8009f86 <dir_alloc+0x26>
 8009fd6:	e000      	b.n	8009fda <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009fd8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	d101      	bne.n	8009fe4 <dir_alloc+0x84>
 8009fe0:	2307      	movs	r3, #7
 8009fe2:	75fb      	strb	r3, [r7, #23]
	return res;
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	331a      	adds	r3, #26
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff f80f 	bl	8009020 <ld_word>
 800a002:	4603      	mov	r3, r0
 800a004:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d109      	bne.n	800a022 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	3314      	adds	r3, #20
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff f804 	bl	8009020 <ld_word>
 800a018:	4603      	mov	r3, r0
 800a01a:	041b      	lsls	r3, r3, #16
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	4313      	orrs	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a022:	68fb      	ldr	r3, [r7, #12]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	331a      	adds	r3, #26
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	b292      	uxth	r2, r2
 800a040:	4611      	mov	r1, r2
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff f827 	bl	8009096 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d109      	bne.n	800a064 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f103 0214 	add.w	r2, r3, #20
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	0c1b      	lsrs	r3, r3, #16
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7ff f819 	bl	8009096 <st_word>
	}
}
 800a064:	bf00      	nop
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a076:	2304      	movs	r3, #4
 800a078:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a080:	e03c      	b.n	800a0fc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	4619      	mov	r1, r3
 800a088:	6938      	ldr	r0, [r7, #16]
 800a08a:	f7ff faab 	bl	80095e4 <move_window>
 800a08e:	4603      	mov	r3, r0
 800a090:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d136      	bne.n	800a106 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d102      	bne.n	800a0ac <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a0a6:	2304      	movs	r3, #4
 800a0a8:	75fb      	strb	r3, [r7, #23]
 800a0aa:	e031      	b.n	800a110 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	330b      	adds	r3, #11
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0b8:	73bb      	strb	r3, [r7, #14]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	7bba      	ldrb	r2, [r7, #14]
 800a0be:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	2be5      	cmp	r3, #229	; 0xe5
 800a0c4:	d011      	beq.n	800a0ea <dir_read+0x7e>
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ca:	d00e      	beq.n	800a0ea <dir_read+0x7e>
 800a0cc:	7bbb      	ldrb	r3, [r7, #14]
 800a0ce:	2b0f      	cmp	r3, #15
 800a0d0:	d00b      	beq.n	800a0ea <dir_read+0x7e>
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	f023 0320 	bic.w	r3, r3, #32
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	bf0c      	ite	eq
 800a0dc:	2301      	moveq	r3, #1
 800a0de:	2300      	movne	r3, #0
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00f      	beq.n	800a10a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff fe72 	bl	8009dd6 <dir_next>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d108      	bne.n	800a10e <dir_read+0xa2>
	while (dp->sect) {
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1be      	bne.n	800a082 <dir_read+0x16>
 800a104:	e004      	b.n	800a110 <dir_read+0xa4>
		if (res != FR_OK) break;
 800a106:	bf00      	nop
 800a108:	e002      	b.n	800a110 <dir_read+0xa4>
				break;
 800a10a:	bf00      	nop
 800a10c:	e000      	b.n	800a110 <dir_read+0xa4>
		if (res != FR_OK) break;
 800a10e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <dir_read+0xb0>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	61da      	str	r2, [r3, #28]
	return res;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a134:	2100      	movs	r1, #0
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff fdd2 	bl	8009ce0 <dir_sdi>
 800a13c:	4603      	mov	r3, r0
 800a13e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <dir_find+0x24>
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	e03e      	b.n	800a1c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	4619      	mov	r1, r3
 800a150:	6938      	ldr	r0, [r7, #16]
 800a152:	f7ff fa47 	bl	80095e4 <move_window>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d12f      	bne.n	800a1c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a1b      	ldr	r3, [r3, #32]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <dir_find+0x4e>
 800a16e:	2304      	movs	r3, #4
 800a170:	75fb      	strb	r3, [r7, #23]
 800a172:	e028      	b.n	800a1c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	330b      	adds	r3, #11
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a180:	b2da      	uxtb	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	330b      	adds	r3, #11
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	f003 0308 	and.w	r3, r3, #8
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10a      	bne.n	800a1ac <dir_find+0x86>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a18      	ldr	r0, [r3, #32]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3324      	adds	r3, #36	; 0x24
 800a19e:	220b      	movs	r2, #11
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f7fe fffb 	bl	800919c <mem_cmp>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff fe11 	bl	8009dd6 <dir_next>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0c5      	beq.n	800a14a <dir_find+0x24>
 800a1be:	e002      	b.n	800a1c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a1c0:	bf00      	nop
 800a1c2:	e000      	b.n	800a1c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1c4:	bf00      	nop

	return res;
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a1de:	2101      	movs	r1, #1
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff febd 	bl	8009f60 <dir_alloc>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d11c      	bne.n	800a22a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	68b8      	ldr	r0, [r7, #8]
 800a1f8:	f7ff f9f4 	bl	80095e4 <move_window>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d111      	bne.n	800a22a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	2220      	movs	r2, #32
 800a20c:	2100      	movs	r1, #0
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe ffa9 	bl	8009166 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a18      	ldr	r0, [r3, #32]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3324      	adds	r3, #36	; 0x24
 800a21c:	220b      	movs	r2, #11
 800a21e:	4619      	mov	r1, r3
 800a220:	f7fe ff80 	bl	8009124 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2201      	movs	r2, #1
 800a228:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	4619      	mov	r1, r3
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff f9cb 	bl	80095e4 <move_window>
 800a24e:	4603      	mov	r3, r0
 800a250:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a252:	7afb      	ldrb	r3, [r7, #11]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d106      	bne.n	800a266 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	22e5      	movs	r2, #229	; 0xe5
 800a25e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2201      	movs	r2, #1
 800a264:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a266:	7afb      	ldrb	r3, [r7, #11]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2200      	movs	r2, #0
 800a27e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d04e      	beq.n	800a326 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	613b      	str	r3, [r7, #16]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a290:	e021      	b.n	800a2d6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1a      	ldr	r2, [r3, #32]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	1c59      	adds	r1, r3, #1
 800a29a:	6179      	str	r1, [r7, #20]
 800a29c:	4413      	add	r3, r2
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	d100      	bne.n	800a2aa <get_fileinfo+0x3a>
 800a2a8:	e015      	b.n	800a2d6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	2b05      	cmp	r3, #5
 800a2ae:	d101      	bne.n	800a2b4 <get_fileinfo+0x44>
 800a2b0:	23e5      	movs	r3, #229	; 0xe5
 800a2b2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2b09      	cmp	r3, #9
 800a2b8:	d106      	bne.n	800a2c8 <get_fileinfo+0x58>
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	613a      	str	r2, [r7, #16]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	222e      	movs	r2, #46	; 0x2e
 800a2c6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	613a      	str	r2, [r7, #16]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	7bfa      	ldrb	r2, [r7, #15]
 800a2d4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2b0a      	cmp	r3, #10
 800a2da:	d9da      	bls.n	800a292 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	3309      	adds	r3, #9
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	7ada      	ldrb	r2, [r3, #11]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	331c      	adds	r3, #28
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe fea9 	bl	8009050 <ld_dword>
 800a2fe:	4602      	mov	r2, r0
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a1b      	ldr	r3, [r3, #32]
 800a308:	3316      	adds	r3, #22
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fea0 	bl	8009050 <ld_dword>
 800a310:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	b29a      	uxth	r2, r3
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	80da      	strh	r2, [r3, #6]
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	0c1b      	lsrs	r3, r3, #16
 800a31e:	b29a      	uxth	r2, r3
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	809a      	strh	r2, [r3, #4]
 800a324:	e000      	b.n	800a328 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a326:	bf00      	nop
}
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3324      	adds	r3, #36	; 0x24
 800a344:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a346:	220b      	movs	r2, #11
 800a348:	2120      	movs	r1, #32
 800a34a:	68b8      	ldr	r0, [r7, #8]
 800a34c:	f7fe ff0b 	bl	8009166 <mem_set>
	si = i = 0; ni = 8;
 800a350:	2300      	movs	r3, #0
 800a352:	613b      	str	r3, [r7, #16]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	61fb      	str	r3, [r7, #28]
 800a358:	2308      	movs	r3, #8
 800a35a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	61fa      	str	r2, [r7, #28]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4413      	add	r3, r2
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a36a:	7efb      	ldrb	r3, [r7, #27]
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d94e      	bls.n	800a40e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a370:	7efb      	ldrb	r3, [r7, #27]
 800a372:	2b2f      	cmp	r3, #47	; 0x2f
 800a374:	d006      	beq.n	800a384 <create_name+0x54>
 800a376:	7efb      	ldrb	r3, [r7, #27]
 800a378:	2b5c      	cmp	r3, #92	; 0x5c
 800a37a:	d110      	bne.n	800a39e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a37c:	e002      	b.n	800a384 <create_name+0x54>
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	3301      	adds	r3, #1
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	4413      	add	r3, r2
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b2f      	cmp	r3, #47	; 0x2f
 800a38e:	d0f6      	beq.n	800a37e <create_name+0x4e>
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	4413      	add	r3, r2
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b5c      	cmp	r3, #92	; 0x5c
 800a39a:	d0f0      	beq.n	800a37e <create_name+0x4e>
			break;
 800a39c:	e038      	b.n	800a410 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a39e:	7efb      	ldrb	r3, [r7, #27]
 800a3a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a2:	d003      	beq.n	800a3ac <create_name+0x7c>
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d30c      	bcc.n	800a3c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b0b      	cmp	r3, #11
 800a3b0:	d002      	beq.n	800a3b8 <create_name+0x88>
 800a3b2:	7efb      	ldrb	r3, [r7, #27]
 800a3b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3b6:	d001      	beq.n	800a3bc <create_name+0x8c>
 800a3b8:	2306      	movs	r3, #6
 800a3ba:	e044      	b.n	800a446 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a3bc:	2308      	movs	r3, #8
 800a3be:	613b      	str	r3, [r7, #16]
 800a3c0:	230b      	movs	r3, #11
 800a3c2:	617b      	str	r3, [r7, #20]
			continue;
 800a3c4:	e022      	b.n	800a40c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a3c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	da04      	bge.n	800a3d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a3ce:	7efb      	ldrb	r3, [r7, #27]
 800a3d0:	3b80      	subs	r3, #128	; 0x80
 800a3d2:	4a1f      	ldr	r2, [pc, #124]	; (800a450 <create_name+0x120>)
 800a3d4:	5cd3      	ldrb	r3, [r2, r3]
 800a3d6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a3d8:	7efb      	ldrb	r3, [r7, #27]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	481d      	ldr	r0, [pc, #116]	; (800a454 <create_name+0x124>)
 800a3de:	f7fe ff04 	bl	80091ea <chk_chr>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <create_name+0xbc>
 800a3e8:	2306      	movs	r3, #6
 800a3ea:	e02c      	b.n	800a446 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a3ec:	7efb      	ldrb	r3, [r7, #27]
 800a3ee:	2b60      	cmp	r3, #96	; 0x60
 800a3f0:	d905      	bls.n	800a3fe <create_name+0xce>
 800a3f2:	7efb      	ldrb	r3, [r7, #27]
 800a3f4:	2b7a      	cmp	r3, #122	; 0x7a
 800a3f6:	d802      	bhi.n	800a3fe <create_name+0xce>
 800a3f8:	7efb      	ldrb	r3, [r7, #27]
 800a3fa:	3b20      	subs	r3, #32
 800a3fc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	613a      	str	r2, [r7, #16]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	4413      	add	r3, r2
 800a408:	7efa      	ldrb	r2, [r7, #27]
 800a40a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a40c:	e7a6      	b.n	800a35c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a40e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	441a      	add	r2, r3
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <create_name+0xf4>
 800a420:	2306      	movs	r3, #6
 800a422:	e010      	b.n	800a446 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2be5      	cmp	r3, #229	; 0xe5
 800a42a:	d102      	bne.n	800a432 <create_name+0x102>
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2205      	movs	r2, #5
 800a430:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a432:	7efb      	ldrb	r3, [r7, #27]
 800a434:	2b20      	cmp	r3, #32
 800a436:	d801      	bhi.n	800a43c <create_name+0x10c>
 800a438:	2204      	movs	r2, #4
 800a43a:	e000      	b.n	800a43e <create_name+0x10e>
 800a43c:	2200      	movs	r2, #0
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	330b      	adds	r3, #11
 800a442:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a444:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a446:	4618      	mov	r0, r3
 800a448:	3720      	adds	r7, #32
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	08011a5c 	.word	0x08011a5c
 800a454:	080119f0 	.word	0x080119f0

0800a458 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a46c:	e002      	b.n	800a474 <follow_path+0x1c>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	603b      	str	r3, [r7, #0]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b2f      	cmp	r3, #47	; 0x2f
 800a47a:	d0f8      	beq.n	800a46e <follow_path+0x16>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	2b5c      	cmp	r3, #92	; 0x5c
 800a482:	d0f4      	beq.n	800a46e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	2200      	movs	r2, #0
 800a488:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b1f      	cmp	r3, #31
 800a490:	d80a      	bhi.n	800a4a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2280      	movs	r2, #128	; 0x80
 800a496:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a49a:	2100      	movs	r1, #0
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff fc1f 	bl	8009ce0 <dir_sdi>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	75fb      	strb	r3, [r7, #23]
 800a4a6:	e043      	b.n	800a530 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4a8:	463b      	mov	r3, r7
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff ff3f 	bl	800a330 <create_name>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d134      	bne.n	800a526 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff fe32 	bl	800a126 <dir_find>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a4cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00a      	beq.n	800a4ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d127      	bne.n	800a52a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a4da:	7afb      	ldrb	r3, [r7, #11]
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d122      	bne.n	800a52a <follow_path+0xd2>
 800a4e4:	2305      	movs	r3, #5
 800a4e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a4e8:	e01f      	b.n	800a52a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4ea:	7afb      	ldrb	r3, [r7, #11]
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d11c      	bne.n	800a52e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	799b      	ldrb	r3, [r3, #6]
 800a4f8:	f003 0310 	and.w	r3, r3, #16
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d102      	bne.n	800a506 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a500:	2305      	movs	r3, #5
 800a502:	75fb      	strb	r3, [r7, #23]
 800a504:	e014      	b.n	800a530 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a514:	4413      	add	r3, r2
 800a516:	4619      	mov	r1, r3
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f7ff fd68 	bl	8009fee <ld_clust>
 800a51e:	4602      	mov	r2, r0
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a524:	e7c0      	b.n	800a4a8 <follow_path+0x50>
			if (res != FR_OK) break;
 800a526:	bf00      	nop
 800a528:	e002      	b.n	800a530 <follow_path+0xd8>
				break;
 800a52a:	bf00      	nop
 800a52c:	e000      	b.n	800a530 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a52e:	bf00      	nop
			}
		}
	}

	return res;
 800a530:	7dfb      	ldrb	r3, [r7, #23]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b087      	sub	sp, #28
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a542:	f04f 33ff 	mov.w	r3, #4294967295
 800a546:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d031      	beq.n	800a5b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	617b      	str	r3, [r7, #20]
 800a556:	e002      	b.n	800a55e <get_ldnumber+0x24>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	3301      	adds	r3, #1
 800a55c:	617b      	str	r3, [r7, #20]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	2b20      	cmp	r3, #32
 800a564:	d903      	bls.n	800a56e <get_ldnumber+0x34>
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b3a      	cmp	r3, #58	; 0x3a
 800a56c:	d1f4      	bne.n	800a558 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b3a      	cmp	r3, #58	; 0x3a
 800a574:	d11c      	bne.n	800a5b0 <get_ldnumber+0x76>
			tp = *path;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	60fa      	str	r2, [r7, #12]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	3b30      	subs	r3, #48	; 0x30
 800a586:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b09      	cmp	r3, #9
 800a58c:	d80e      	bhi.n	800a5ac <get_ldnumber+0x72>
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	429a      	cmp	r2, r3
 800a594:	d10a      	bne.n	800a5ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d107      	bne.n	800a5ac <get_ldnumber+0x72>
					vol = (int)i;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	617b      	str	r3, [r7, #20]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	e002      	b.n	800a5b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a5b4:	693b      	ldr	r3, [r7, #16]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	371c      	adds	r7, #28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	70da      	strb	r2, [r3, #3]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5da:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff f800 	bl	80095e4 <move_window>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <check_fs+0x2a>
 800a5ea:	2304      	movs	r3, #4
 800a5ec:	e038      	b.n	800a660 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3334      	adds	r3, #52	; 0x34
 800a5f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe fd12 	bl	8009020 <ld_word>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	461a      	mov	r2, r3
 800a600:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a604:	429a      	cmp	r2, r3
 800a606:	d001      	beq.n	800a60c <check_fs+0x48>
 800a608:	2303      	movs	r3, #3
 800a60a:	e029      	b.n	800a660 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a612:	2be9      	cmp	r3, #233	; 0xe9
 800a614:	d009      	beq.n	800a62a <check_fs+0x66>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a61c:	2beb      	cmp	r3, #235	; 0xeb
 800a61e:	d11e      	bne.n	800a65e <check_fs+0x9a>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a626:	2b90      	cmp	r3, #144	; 0x90
 800a628:	d119      	bne.n	800a65e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3334      	adds	r3, #52	; 0x34
 800a62e:	3336      	adds	r3, #54	; 0x36
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe fd0d 	bl	8009050 <ld_dword>
 800a636:	4603      	mov	r3, r0
 800a638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a63c:	4a0a      	ldr	r2, [pc, #40]	; (800a668 <check_fs+0xa4>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d101      	bne.n	800a646 <check_fs+0x82>
 800a642:	2300      	movs	r3, #0
 800a644:	e00c      	b.n	800a660 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3334      	adds	r3, #52	; 0x34
 800a64a:	3352      	adds	r3, #82	; 0x52
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fcff 	bl	8009050 <ld_dword>
 800a652:	4603      	mov	r3, r0
 800a654:	4a05      	ldr	r2, [pc, #20]	; (800a66c <check_fs+0xa8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d101      	bne.n	800a65e <check_fs+0x9a>
 800a65a:	2300      	movs	r3, #0
 800a65c:	e000      	b.n	800a660 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a65e:	2302      	movs	r3, #2
}
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	00544146 	.word	0x00544146
 800a66c:	33544146 	.word	0x33544146

0800a670 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b096      	sub	sp, #88	; 0x58
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7ff ff58 	bl	800a53a <get_ldnumber>
 800a68a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	da01      	bge.n	800a696 <find_volume+0x26>
 800a692:	230b      	movs	r3, #11
 800a694:	e235      	b.n	800ab02 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a696:	4aa5      	ldr	r2, [pc, #660]	; (800a92c <find_volume+0x2bc>)
 800a698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a69e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <find_volume+0x3a>
 800a6a6:	230c      	movs	r3, #12
 800a6a8:	e22b      	b.n	800ab02 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800a6aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6ac:	f7fe fdb8 	bl	8009220 <lock_fs>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <find_volume+0x4a>
 800a6b6:	230f      	movs	r3, #15
 800a6b8:	e223      	b.n	800ab02 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	f023 0301 	bic.w	r3, r3, #1
 800a6c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d01a      	beq.n	800a706 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fe fc05 	bl	8008ee4 <disk_status>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a6e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10c      	bne.n	800a706 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d007      	beq.n	800a702 <find_volume+0x92>
 800a6f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a6fe:	230a      	movs	r3, #10
 800a700:	e1ff      	b.n	800ab02 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800a702:	2300      	movs	r3, #0
 800a704:	e1fd      	b.n	800ab02 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe fbfd 	bl	8008f18 <disk_initialize>
 800a71e:	4603      	mov	r3, r0
 800a720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a730:	2303      	movs	r3, #3
 800a732:	e1e6      	b.n	800ab02 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a734:	79fb      	ldrb	r3, [r7, #7]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d007      	beq.n	800a74a <find_volume+0xda>
 800a73a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a73e:	f003 0304 	and.w	r3, r3, #4
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a746:	230a      	movs	r3, #10
 800a748:	e1db      	b.n	800ab02 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a74e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a752:	f7ff ff37 	bl	800a5c4 <check_fs>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a75c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a760:	2b02      	cmp	r3, #2
 800a762:	d149      	bne.n	800a7f8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a764:	2300      	movs	r3, #0
 800a766:	643b      	str	r3, [r7, #64]	; 0x40
 800a768:	e01e      	b.n	800a7a8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a772:	011b      	lsls	r3, r3, #4
 800a774:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a778:	4413      	add	r3, r2
 800a77a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	3304      	adds	r3, #4
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d006      	beq.n	800a794 <find_volume+0x124>
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	3308      	adds	r3, #8
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fc60 	bl	8009050 <ld_dword>
 800a790:	4602      	mov	r2, r0
 800a792:	e000      	b.n	800a796 <find_volume+0x126>
 800a794:	2200      	movs	r2, #0
 800a796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	3358      	adds	r3, #88	; 0x58
 800a79c:	443b      	add	r3, r7
 800a79e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a7a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	643b      	str	r3, [r7, #64]	; 0x40
 800a7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d9dd      	bls.n	800a76a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <find_volume+0x14e>
 800a7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	3358      	adds	r3, #88	; 0x58
 800a7c4:	443b      	add	r3, r7
 800a7c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a7ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d005      	beq.n	800a7de <find_volume+0x16e>
 800a7d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7d6:	f7ff fef5 	bl	800a5c4 <check_fs>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	e000      	b.n	800a7e0 <find_volume+0x170>
 800a7de:	2303      	movs	r3, #3
 800a7e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a7e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d905      	bls.n	800a7f8 <find_volume+0x188>
 800a7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d9e2      	bls.n	800a7be <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a7f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	d101      	bne.n	800a804 <find_volume+0x194>
 800a800:	2301      	movs	r3, #1
 800a802:	e17e      	b.n	800ab02 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d901      	bls.n	800a810 <find_volume+0x1a0>
 800a80c:	230d      	movs	r3, #13
 800a80e:	e178      	b.n	800ab02 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	3334      	adds	r3, #52	; 0x34
 800a814:	330b      	adds	r3, #11
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fc02 	bl	8009020 <ld_word>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a822:	d001      	beq.n	800a828 <find_volume+0x1b8>
 800a824:	230d      	movs	r3, #13
 800a826:	e16c      	b.n	800ab02 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	3334      	adds	r3, #52	; 0x34
 800a82c:	3316      	adds	r3, #22
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fe fbf6 	bl	8009020 <ld_word>
 800a834:	4603      	mov	r3, r0
 800a836:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <find_volume+0x1dc>
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	3334      	adds	r3, #52	; 0x34
 800a842:	3324      	adds	r3, #36	; 0x24
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fc03 	bl	8009050 <ld_dword>
 800a84a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a850:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85e:	789b      	ldrb	r3, [r3, #2]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d005      	beq.n	800a870 <find_volume+0x200>
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	789b      	ldrb	r3, [r3, #2]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d001      	beq.n	800a870 <find_volume+0x200>
 800a86c:	230d      	movs	r3, #13
 800a86e:	e148      	b.n	800ab02 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a872:	789b      	ldrb	r3, [r3, #2]
 800a874:	461a      	mov	r2, r3
 800a876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a878:	fb02 f303 	mul.w	r3, r2, r3
 800a87c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a884:	b29a      	uxth	r2, r3
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88c:	895b      	ldrh	r3, [r3, #10]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d008      	beq.n	800a8a4 <find_volume+0x234>
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	895b      	ldrh	r3, [r3, #10]
 800a896:	461a      	mov	r2, r3
 800a898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89a:	895b      	ldrh	r3, [r3, #10]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	4013      	ands	r3, r2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <find_volume+0x238>
 800a8a4:	230d      	movs	r3, #13
 800a8a6:	e12c      	b.n	800ab02 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	3334      	adds	r3, #52	; 0x34
 800a8ac:	3311      	adds	r3, #17
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fbb6 	bl	8009020 <ld_word>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	891b      	ldrh	r3, [r3, #8]
 800a8c0:	f003 030f 	and.w	r3, r3, #15
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <find_volume+0x25e>
 800a8ca:	230d      	movs	r3, #13
 800a8cc:	e119      	b.n	800ab02 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	3334      	adds	r3, #52	; 0x34
 800a8d2:	3313      	adds	r3, #19
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe fba3 	bl	8009020 <ld_word>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d106      	bne.n	800a8f2 <find_volume+0x282>
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	3334      	adds	r3, #52	; 0x34
 800a8e8:	3320      	adds	r3, #32
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fbb0 	bl	8009050 <ld_dword>
 800a8f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f4:	3334      	adds	r3, #52	; 0x34
 800a8f6:	330e      	adds	r3, #14
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fe fb91 	bl	8009020 <ld_word>
 800a8fe:	4603      	mov	r3, r0
 800a900:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a902:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <find_volume+0x29c>
 800a908:	230d      	movs	r3, #13
 800a90a:	e0fa      	b.n	800ab02 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a90c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a90e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a910:	4413      	add	r3, r2
 800a912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a914:	8912      	ldrh	r2, [r2, #8]
 800a916:	0912      	lsrs	r2, r2, #4
 800a918:	b292      	uxth	r2, r2
 800a91a:	4413      	add	r3, r2
 800a91c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a91e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	429a      	cmp	r2, r3
 800a924:	d204      	bcs.n	800a930 <find_volume+0x2c0>
 800a926:	230d      	movs	r3, #13
 800a928:	e0eb      	b.n	800ab02 <find_volume+0x492>
 800a92a:	bf00      	nop
 800a92c:	200060f8 	.word	0x200060f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a938:	8952      	ldrh	r2, [r2, #10]
 800a93a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <find_volume+0x2da>
 800a946:	230d      	movs	r3, #13
 800a948:	e0db      	b.n	800ab02 <find_volume+0x492>
		fmt = FS_FAT32;
 800a94a:	2303      	movs	r3, #3
 800a94c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a956:	4293      	cmp	r3, r2
 800a958:	d802      	bhi.n	800a960 <find_volume+0x2f0>
 800a95a:	2302      	movs	r3, #2
 800a95c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a966:	4293      	cmp	r3, r2
 800a968:	d802      	bhi.n	800a970 <find_volume+0x300>
 800a96a:	2301      	movs	r3, #1
 800a96c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	1c9a      	adds	r2, r3, #2
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a97c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a97e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a982:	441a      	add	r2, r3
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	441a      	add	r2, r3
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a992:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a996:	2b03      	cmp	r3, #3
 800a998:	d11e      	bne.n	800a9d8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	3334      	adds	r3, #52	; 0x34
 800a99e:	332a      	adds	r3, #42	; 0x2a
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe fb3d 	bl	8009020 <ld_word>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <find_volume+0x340>
 800a9ac:	230d      	movs	r3, #13
 800a9ae:	e0a8      	b.n	800ab02 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b2:	891b      	ldrh	r3, [r3, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <find_volume+0x34c>
 800a9b8:	230d      	movs	r3, #13
 800a9ba:	e0a2      	b.n	800ab02 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9be:	3334      	adds	r3, #52	; 0x34
 800a9c0:	332c      	adds	r3, #44	; 0x2c
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe fb44 	bl	8009050 <ld_dword>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a9d6:	e01f      	b.n	800aa18 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	891b      	ldrh	r3, [r3, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <find_volume+0x374>
 800a9e0:	230d      	movs	r3, #13
 800a9e2:	e08e      	b.n	800ab02 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ea:	441a      	add	r2, r3
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a9f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d103      	bne.n	800aa00 <find_volume+0x390>
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	e00a      	b.n	800aa16 <find_volume+0x3a6>
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	699a      	ldr	r2, [r3, #24]
 800aa04:	4613      	mov	r3, r2
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	4413      	add	r3, r2
 800aa0a:	085a      	lsrs	r2, r3, #1
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aa16:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	69da      	ldr	r2, [r3, #28]
 800aa1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800aa22:	0a5b      	lsrs	r3, r3, #9
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d201      	bcs.n	800aa2c <find_volume+0x3bc>
 800aa28:	230d      	movs	r3, #13
 800aa2a:	e06a      	b.n	800ab02 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa32:	615a      	str	r2, [r3, #20]
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	695a      	ldr	r2, [r3, #20]
 800aa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	2280      	movs	r2, #128	; 0x80
 800aa40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800aa42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d149      	bne.n	800aade <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	3334      	adds	r3, #52	; 0x34
 800aa4e:	3330      	adds	r3, #48	; 0x30
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fe fae5 	bl	8009020 <ld_word>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d140      	bne.n	800aade <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aa5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa5e:	3301      	adds	r3, #1
 800aa60:	4619      	mov	r1, r3
 800aa62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa64:	f7fe fdbe 	bl	80095e4 <move_window>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d137      	bne.n	800aade <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	2200      	movs	r2, #0
 800aa72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	3334      	adds	r3, #52	; 0x34
 800aa78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fe facf 	bl	8009020 <ld_word>
 800aa82:	4603      	mov	r3, r0
 800aa84:	461a      	mov	r2, r3
 800aa86:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d127      	bne.n	800aade <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa90:	3334      	adds	r3, #52	; 0x34
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe fadc 	bl	8009050 <ld_dword>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	4a1c      	ldr	r2, [pc, #112]	; (800ab0c <find_volume+0x49c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d11e      	bne.n	800aade <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	3334      	adds	r3, #52	; 0x34
 800aaa4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe fad1 	bl	8009050 <ld_dword>
 800aaae:	4603      	mov	r3, r0
 800aab0:	4a17      	ldr	r2, [pc, #92]	; (800ab10 <find_volume+0x4a0>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d113      	bne.n	800aade <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab8:	3334      	adds	r3, #52	; 0x34
 800aaba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe fac6 	bl	8009050 <ld_dword>
 800aac4:	4602      	mov	r2, r0
 800aac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aacc:	3334      	adds	r3, #52	; 0x34
 800aace:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fabc 	bl	8009050 <ld_dword>
 800aad8:	4602      	mov	r2, r0
 800aada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aadc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aae4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aae6:	4b0b      	ldr	r3, [pc, #44]	; (800ab14 <find_volume+0x4a4>)
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	3301      	adds	r3, #1
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <find_volume+0x4a4>)
 800aaf0:	801a      	strh	r2, [r3, #0]
 800aaf2:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <find_volume+0x4a4>)
 800aaf4:	881a      	ldrh	r2, [r3, #0]
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aafa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aafc:	f7fe fd0a 	bl	8009514 <clear_lock>
#endif
	return FR_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3758      	adds	r7, #88	; 0x58
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	41615252 	.word	0x41615252
 800ab10:	61417272 	.word	0x61417272
 800ab14:	200060fc 	.word	0x200060fc

0800ab18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ab22:	2309      	movs	r3, #9
 800ab24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d02e      	beq.n	800ab8a <validate+0x72>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d02a      	beq.n	800ab8a <validate+0x72>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d025      	beq.n	800ab8a <validate+0x72>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	889a      	ldrh	r2, [r3, #4]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	88db      	ldrh	r3, [r3, #6]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d11e      	bne.n	800ab8a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fb65 	bl	8009220 <lock_fs>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d014      	beq.n	800ab86 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	785b      	ldrb	r3, [r3, #1]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe f9be 	bl	8008ee4 <disk_status>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <validate+0x60>
				res = FR_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
 800ab76:	e008      	b.n	800ab8a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe fb64 	bl	800924c <unlock_fs>
 800ab84:	e001      	b.n	800ab8a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ab86:	230f      	movs	r3, #15
 800ab88:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d102      	bne.n	800ab96 <validate+0x7e>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	e000      	b.n	800ab98 <validate+0x80>
 800ab96:	2300      	movs	r3, #0
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	6013      	str	r3, [r2, #0]
	return res;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	4613      	mov	r3, r2
 800abb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800abba:	f107 0310 	add.w	r3, r7, #16
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7ff fcbb 	bl	800a53a <get_ldnumber>
 800abc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	da01      	bge.n	800abd0 <f_mount+0x28>
 800abcc:	230b      	movs	r3, #11
 800abce:	e048      	b.n	800ac62 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800abd0:	4a26      	ldr	r2, [pc, #152]	; (800ac6c <f_mount+0xc4>)
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00f      	beq.n	800ac00 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800abe0:	69b8      	ldr	r0, [r7, #24]
 800abe2:	f7fe fc97 	bl	8009514 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	4618      	mov	r0, r3
 800abec:	f000 ffc3 	bl	800bb76 <ff_del_syncobj>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <f_mount+0x52>
 800abf6:	2302      	movs	r3, #2
 800abf8:	e033      	b.n	800ac62 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	2200      	movs	r2, #0
 800abfe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00f      	beq.n	800ac26 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	330c      	adds	r3, #12
 800ac14:	4619      	mov	r1, r3
 800ac16:	4610      	mov	r0, r2
 800ac18:	f000 ff8d 	bl	800bb36 <ff_cre_syncobj>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <f_mount+0x7e>
 800ac22:	2302      	movs	r3, #2
 800ac24:	e01d      	b.n	800ac62 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4910      	ldr	r1, [pc, #64]	; (800ac6c <f_mount+0xc4>)
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <f_mount+0x94>
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d001      	beq.n	800ac40 <f_mount+0x98>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e010      	b.n	800ac62 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ac40:	f107 010c 	add.w	r1, r7, #12
 800ac44:	f107 0308 	add.w	r3, r7, #8
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff fd10 	bl	800a670 <find_volume>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	7dfa      	ldrb	r2, [r7, #23]
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe faf6 	bl	800924c <unlock_fs>
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3720      	adds	r7, #32
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	200060f8 	.word	0x200060f8

0800ac70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b098      	sub	sp, #96	; 0x60
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <f_open+0x18>
 800ac84:	2309      	movs	r3, #9
 800ac86:	e1b4      	b.n	800aff2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac8e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ac90:	79fa      	ldrb	r2, [r7, #7]
 800ac92:	f107 0110 	add.w	r1, r7, #16
 800ac96:	f107 0308 	add.w	r3, r7, #8
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7ff fce8 	bl	800a670 <find_volume>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800aca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f040 8191 	bne.w	800afd2 <f_open+0x362>
		dj.obj.fs = fs;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	f107 0314 	add.w	r3, r7, #20
 800acba:	4611      	mov	r1, r2
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fbcb 	bl	800a458 <follow_path>
 800acc2:	4603      	mov	r3, r0
 800acc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800acc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800accc:	2b00      	cmp	r3, #0
 800acce:	d11a      	bne.n	800ad06 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800acd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800acd4:	b25b      	sxtb	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	da03      	bge.n	800ace2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800acda:	2306      	movs	r3, #6
 800acdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ace0:	e011      	b.n	800ad06 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	f023 0301 	bic.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bf14      	ite	ne
 800acec:	2301      	movne	r3, #1
 800acee:	2300      	moveq	r3, #0
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	461a      	mov	r2, r3
 800acf4:	f107 0314 	add.w	r3, r7, #20
 800acf8:	4611      	mov	r1, r2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe fac2 	bl	8009284 <chk_lock>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	f003 031c 	and.w	r3, r3, #28
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d07f      	beq.n	800ae10 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ad10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d017      	beq.n	800ad48 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ad18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	d10e      	bne.n	800ad3e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ad20:	f7fe fb0c 	bl	800933c <enq_lock>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d006      	beq.n	800ad38 <f_open+0xc8>
 800ad2a:	f107 0314 	add.w	r3, r7, #20
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7ff fa4e 	bl	800a1d0 <dir_register>
 800ad34:	4603      	mov	r3, r0
 800ad36:	e000      	b.n	800ad3a <f_open+0xca>
 800ad38:	2312      	movs	r3, #18
 800ad3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	f043 0308 	orr.w	r3, r3, #8
 800ad44:	71fb      	strb	r3, [r7, #7]
 800ad46:	e010      	b.n	800ad6a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ad48:	7ebb      	ldrb	r3, [r7, #26]
 800ad4a:	f003 0311 	and.w	r3, r3, #17
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <f_open+0xea>
					res = FR_DENIED;
 800ad52:	2307      	movs	r3, #7
 800ad54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad58:	e007      	b.n	800ad6a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <f_open+0xfa>
 800ad64:	2308      	movs	r3, #8
 800ad66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ad6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d168      	bne.n	800ae44 <f_open+0x1d4>
 800ad72:	79fb      	ldrb	r3, [r7, #7]
 800ad74:	f003 0308 	and.w	r3, r3, #8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d063      	beq.n	800ae44 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ad7c:	f7fe f854 	bl	8008e28 <get_fattime>
 800ad80:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ad82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad84:	330e      	adds	r3, #14
 800ad86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fe f99f 	bl	80090cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad90:	3316      	adds	r3, #22
 800ad92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fe f999 	bl	80090cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9c:	330b      	adds	r3, #11
 800ad9e:	2220      	movs	r2, #32
 800ada0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ada6:	4611      	mov	r1, r2
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff f920 	bl	8009fee <ld_clust>
 800adae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800adb4:	2200      	movs	r2, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff f938 	bl	800a02c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800adbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adbe:	331c      	adds	r3, #28
 800adc0:	2100      	movs	r1, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe f982 	bl	80090cc <st_dword>
					fs->wflag = 1;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2201      	movs	r2, #1
 800adcc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800adce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add0:	2b00      	cmp	r3, #0
 800add2:	d037      	beq.n	800ae44 <f_open+0x1d4>
						dw = fs->winsect;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800adda:	f107 0314 	add.w	r3, r7, #20
 800adde:	2200      	movs	r2, #0
 800ade0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fe4b 	bl	8009a7e <remove_chain>
 800ade8:	4603      	mov	r3, r0
 800adea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800adee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d126      	bne.n	800ae44 <f_open+0x1d4>
							res = move_window(fs, dw);
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe fbf2 	bl	80095e4 <move_window>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae0a:	3a01      	subs	r2, #1
 800ae0c:	611a      	str	r2, [r3, #16]
 800ae0e:	e019      	b.n	800ae44 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ae10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d115      	bne.n	800ae44 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ae18:	7ebb      	ldrb	r3, [r7, #26]
 800ae1a:	f003 0310 	and.w	r3, r3, #16
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d003      	beq.n	800ae2a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ae22:	2304      	movs	r3, #4
 800ae24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae28:	e00c      	b.n	800ae44 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ae2a:	79fb      	ldrb	r3, [r7, #7]
 800ae2c:	f003 0302 	and.w	r3, r3, #2
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d007      	beq.n	800ae44 <f_open+0x1d4>
 800ae34:	7ebb      	ldrb	r3, [r7, #26]
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <f_open+0x1d4>
						res = FR_DENIED;
 800ae3e:	2307      	movs	r3, #7
 800ae40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ae44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d128      	bne.n	800ae9e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
 800ae4e:	f003 0308 	and.w	r3, r3, #8
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ae56:	79fb      	ldrb	r3, [r7, #7]
 800ae58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ae66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	f023 0301 	bic.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bf14      	ite	ne
 800ae76:	2301      	movne	r3, #1
 800ae78:	2300      	moveq	r3, #0
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	f107 0314 	add.w	r3, r7, #20
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fe fa7b 	bl	8009380 <inc_lock>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d102      	bne.n	800ae9e <f_open+0x22e>
 800ae98:	2302      	movs	r3, #2
 800ae9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ae9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f040 8095 	bne.w	800afd2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeac:	4611      	mov	r1, r2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7ff f89d 	bl	8009fee <ld_clust>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aeba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aebc:	331c      	adds	r3, #28
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe f8c6 	bl	8009050 <ld_dword>
 800aec4:	4602      	mov	r2, r0
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	88da      	ldrh	r2, [r3, #6]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	79fa      	ldrb	r2, [r7, #7]
 800aee2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3330      	adds	r3, #48	; 0x30
 800aefa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe f930 	bl	8009166 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	f003 0320 	and.w	r3, r3, #32
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d060      	beq.n	800afd2 <f_open+0x362>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d05c      	beq.n	800afd2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	68da      	ldr	r2, [r3, #12]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	895b      	ldrh	r3, [r3, #10]
 800af24:	025b      	lsls	r3, r3, #9
 800af26:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	657b      	str	r3, [r7, #84]	; 0x54
 800af34:	e016      	b.n	800af64 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fc0d 	bl	800975a <get_fat>
 800af40:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800af42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af44:	2b01      	cmp	r3, #1
 800af46:	d802      	bhi.n	800af4e <f_open+0x2de>
 800af48:	2302      	movs	r3, #2
 800af4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800af4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af54:	d102      	bne.n	800af5c <f_open+0x2ec>
 800af56:	2301      	movs	r3, #1
 800af58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	657b      	str	r3, [r7, #84]	; 0x54
 800af64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d103      	bne.n	800af74 <f_open+0x304>
 800af6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af70:	429a      	cmp	r2, r3
 800af72:	d8e0      	bhi.n	800af36 <f_open+0x2c6>
				}
				fp->clust = clst;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af78:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800af7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d127      	bne.n	800afd2 <f_open+0x362>
 800af82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d022      	beq.n	800afd2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe fbc3 	bl	800971c <clust2sect>
 800af96:	6478      	str	r0, [r7, #68]	; 0x44
 800af98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d103      	bne.n	800afa6 <f_open+0x336>
						res = FR_INT_ERR;
 800af9e:	2302      	movs	r3, #2
 800afa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800afa4:	e015      	b.n	800afd2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800afa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afa8:	0a5a      	lsrs	r2, r3, #9
 800afaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afac:	441a      	add	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	7858      	ldrb	r0, [r3, #1]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a1a      	ldr	r2, [r3, #32]
 800afc0:	2301      	movs	r3, #1
 800afc2:	f7fd ffcf 	bl	8008f64 <disk_read>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <f_open+0x362>
 800afcc:	2301      	movs	r3, #1
 800afce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800afd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <f_open+0x370>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800afe6:	4611      	mov	r1, r2
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fe f92f 	bl	800924c <unlock_fs>
 800afee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3760      	adds	r7, #96	; 0x60
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b08c      	sub	sp, #48	; 0x30
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
 800b004:	607a      	str	r2, [r7, #4]
 800b006:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f107 0210 	add.w	r2, r7, #16
 800b018:	4611      	mov	r1, r2
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff fd7c 	bl	800ab18 <validate>
 800b020:	4603      	mov	r3, r0
 800b022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d107      	bne.n	800b03e <f_write+0x44>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	7d5b      	ldrb	r3, [r3, #21]
 800b032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d009      	beq.n	800b052 <f_write+0x58>
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b044:	4611      	mov	r1, r2
 800b046:	4618      	mov	r0, r3
 800b048:	f7fe f900 	bl	800924c <unlock_fs>
 800b04c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b050:	e173      	b.n	800b33a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	7d1b      	ldrb	r3, [r3, #20]
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d106      	bne.n	800b06c <f_write+0x72>
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	2107      	movs	r1, #7
 800b062:	4618      	mov	r0, r3
 800b064:	f7fe f8f2 	bl	800924c <unlock_fs>
 800b068:	2307      	movs	r3, #7
 800b06a:	e166      	b.n	800b33a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	699a      	ldr	r2, [r3, #24]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	441a      	add	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	429a      	cmp	r2, r3
 800b07a:	f080 814b 	bcs.w	800b314 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	43db      	mvns	r3, r3
 800b084:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b086:	e145      	b.n	800b314 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b090:	2b00      	cmp	r3, #0
 800b092:	f040 8101 	bne.w	800b298 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	0a5b      	lsrs	r3, r3, #9
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	8952      	ldrh	r2, [r2, #10]
 800b0a0:	3a01      	subs	r2, #1
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d14d      	bne.n	800b148 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10c      	bne.n	800b0ce <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d11a      	bne.n	800b0f6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe fd3f 	bl	8009b48 <create_chain>
 800b0ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800b0cc:	e013      	b.n	800b0f6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d007      	beq.n	800b0e6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7fe fdcb 	bl	8009c78 <clmt_clust>
 800b0e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b0e4:	e007      	b.n	800b0f6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	69db      	ldr	r3, [r3, #28]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f7fe fd2a 	bl	8009b48 <create_chain>
 800b0f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 8110 	beq.w	800b31e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	2b01      	cmp	r3, #1
 800b102:	d109      	bne.n	800b118 <f_write+0x11e>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2202      	movs	r2, #2
 800b108:	755a      	strb	r2, [r3, #21]
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2102      	movs	r1, #2
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe f89c 	bl	800924c <unlock_fs>
 800b114:	2302      	movs	r3, #2
 800b116:	e110      	b.n	800b33a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11e:	d109      	bne.n	800b134 <f_write+0x13a>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2201      	movs	r2, #1
 800b124:	755a      	strb	r2, [r3, #21]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	2101      	movs	r1, #1
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fe f88e 	bl	800924c <unlock_fs>
 800b130:	2301      	movs	r3, #1
 800b132:	e102      	b.n	800b33a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b138:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d102      	bne.n	800b148 <f_write+0x14e>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b146:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	7d1b      	ldrb	r3, [r3, #20]
 800b14c:	b25b      	sxtb	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da1d      	bge.n	800b18e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	7858      	ldrb	r0, [r3, #1]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6a1a      	ldr	r2, [r3, #32]
 800b160:	2301      	movs	r3, #1
 800b162:	f7fd ff1f 	bl	8008fa4 <disk_write>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d009      	beq.n	800b180 <f_write+0x186>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2201      	movs	r2, #1
 800b170:	755a      	strb	r2, [r3, #21]
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	2101      	movs	r1, #1
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe f868 	bl	800924c <unlock_fs>
 800b17c:	2301      	movs	r3, #1
 800b17e:	e0dc      	b.n	800b33a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	7d1b      	ldrb	r3, [r3, #20]
 800b184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	4619      	mov	r1, r3
 800b196:	4610      	mov	r0, r2
 800b198:	f7fe fac0 	bl	800971c <clust2sect>
 800b19c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d109      	bne.n	800b1b8 <f_write+0x1be>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	755a      	strb	r2, [r3, #21]
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	2102      	movs	r1, #2
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe f84c 	bl	800924c <unlock_fs>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e0c0      	b.n	800b33a <f_write+0x340>
			sect += csect;
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	4413      	add	r3, r2
 800b1be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	0a5b      	lsrs	r3, r3, #9
 800b1c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d041      	beq.n	800b250 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	8952      	ldrh	r2, [r2, #10]
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d905      	bls.n	800b1e6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	895b      	ldrh	r3, [r3, #10]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	7858      	ldrb	r0, [r3, #1]
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	69f9      	ldr	r1, [r7, #28]
 800b1f0:	f7fd fed8 	bl	8008fa4 <disk_write>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d009      	beq.n	800b20e <f_write+0x214>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	755a      	strb	r2, [r3, #21]
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	2101      	movs	r1, #1
 800b204:	4618      	mov	r0, r3
 800b206:	f7fe f821 	bl	800924c <unlock_fs>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e095      	b.n	800b33a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6a1a      	ldr	r2, [r3, #32]
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	6a3a      	ldr	r2, [r7, #32]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d915      	bls.n	800b248 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6a1a      	ldr	r2, [r3, #32]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	025b      	lsls	r3, r3, #9
 800b22c:	69fa      	ldr	r2, [r7, #28]
 800b22e:	4413      	add	r3, r2
 800b230:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b234:	4619      	mov	r1, r3
 800b236:	f7fd ff75 	bl	8009124 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	7d1b      	ldrb	r3, [r3, #20]
 800b23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b242:	b2da      	uxtb	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	025b      	lsls	r3, r3, #9
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b24e:	e044      	b.n	800b2da <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6a1b      	ldr	r3, [r3, #32]
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	429a      	cmp	r2, r3
 800b258:	d01b      	beq.n	800b292 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	699a      	ldr	r2, [r3, #24]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b262:	429a      	cmp	r2, r3
 800b264:	d215      	bcs.n	800b292 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	7858      	ldrb	r0, [r3, #1]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b270:	2301      	movs	r3, #1
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	f7fd fe76 	bl	8008f64 <disk_read>
 800b278:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d009      	beq.n	800b292 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2201      	movs	r2, #1
 800b282:	755a      	strb	r2, [r3, #21]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2101      	movs	r1, #1
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fd ffdf 	bl	800924c <unlock_fs>
 800b28e:	2301      	movs	r3, #1
 800b290:	e053      	b.n	800b33a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d901      	bls.n	800b2b2 <f_write+0x2b8>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c0:	4413      	add	r3, r2
 800b2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2c4:	69f9      	ldr	r1, [r7, #28]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fd ff2c 	bl	8009124 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	7d1b      	ldrb	r3, [r3, #20]
 800b2d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b2da:	69fa      	ldr	r2, [r7, #28]
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	4413      	add	r3, r2
 800b2e0:	61fb      	str	r3, [r7, #28]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	441a      	add	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	619a      	str	r2, [r3, #24]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	68da      	ldr	r2, [r3, #12]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	bf38      	it	cc
 800b2fa:	461a      	movcc	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	60da      	str	r2, [r3, #12]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	441a      	add	r2, r3
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f47f aeb6 	bne.w	800b088 <f_write+0x8e>
 800b31c:	e000      	b.n	800b320 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b31e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	7d1b      	ldrb	r3, [r3, #20]
 800b324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2100      	movs	r1, #0
 800b332:	4618      	mov	r0, r3
 800b334:	f7fd ff8a 	bl	800924c <unlock_fs>
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3730      	adds	r7, #48	; 0x30
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b086      	sub	sp, #24
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f107 0208 	add.w	r2, r7, #8
 800b350:	4611      	mov	r1, r2
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff fbe0 	bl	800ab18 <validate>
 800b358:	4603      	mov	r3, r0
 800b35a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d16d      	bne.n	800b43e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	7d1b      	ldrb	r3, [r3, #20]
 800b366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d067      	beq.n	800b43e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	7d1b      	ldrb	r3, [r3, #20]
 800b372:	b25b      	sxtb	r3, r3
 800b374:	2b00      	cmp	r3, #0
 800b376:	da1a      	bge.n	800b3ae <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	7858      	ldrb	r0, [r3, #1]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1a      	ldr	r2, [r3, #32]
 800b386:	2301      	movs	r3, #1
 800b388:	f7fd fe0c 	bl	8008fa4 <disk_write>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d006      	beq.n	800b3a0 <f_sync+0x5e>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2101      	movs	r1, #1
 800b396:	4618      	mov	r0, r3
 800b398:	f7fd ff58 	bl	800924c <unlock_fs>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e055      	b.n	800b44c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	7d1b      	ldrb	r3, [r3, #20]
 800b3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b3ae:	f7fd fd3b 	bl	8008e28 <get_fattime>
 800b3b2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4610      	mov	r0, r2
 800b3be:	f7fe f911 	bl	80095e4 <move_window>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b3c6:	7dfb      	ldrb	r3, [r7, #23]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d138      	bne.n	800b43e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	330b      	adds	r3, #11
 800b3d6:	781a      	ldrb	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	330b      	adds	r3, #11
 800b3dc:	f042 0220 	orr.w	r2, r2, #32
 800b3e0:	b2d2      	uxtb	r2, r2
 800b3e2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6818      	ldr	r0, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	68f9      	ldr	r1, [r7, #12]
 800b3f0:	f7fe fe1c 	bl	800a02c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f103 021c 	add.w	r2, r3, #28
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	4619      	mov	r1, r3
 800b400:	4610      	mov	r0, r2
 800b402:	f7fd fe63 	bl	80090cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3316      	adds	r3, #22
 800b40a:	6939      	ldr	r1, [r7, #16]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fd fe5d 	bl	80090cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3312      	adds	r3, #18
 800b416:	2100      	movs	r1, #0
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fd fe3c 	bl	8009096 <st_word>
					fs->wflag = 1;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2201      	movs	r2, #1
 800b422:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe f90a 	bl	8009640 <sync_fs>
 800b42c:	4603      	mov	r3, r0
 800b42e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7d1b      	ldrb	r3, [r3, #20]
 800b434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	7dfa      	ldrb	r2, [r7, #23]
 800b442:	4611      	mov	r1, r2
 800b444:	4618      	mov	r0, r3
 800b446:	f7fd ff01 	bl	800924c <unlock_fs>
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3718      	adds	r7, #24
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7ff ff70 	bl	800b342 <f_sync>
 800b462:	4603      	mov	r3, r0
 800b464:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d11d      	bne.n	800b4a8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f107 0208 	add.w	r2, r7, #8
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fb4f 	bl	800ab18 <validate>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d111      	bne.n	800b4a8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fe f807 	bl	800949c <dec_lock>
 800b48e:	4603      	mov	r3, r0
 800b490:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fd fed2 	bl	800924c <unlock_fs>
#endif
		}
	}
	return res;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d101      	bne.n	800b4c6 <f_opendir+0x14>
 800b4c2:	2309      	movs	r3, #9
 800b4c4:	e06a      	b.n	800b59c <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b4ca:	f107 010c 	add.w	r1, r7, #12
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff f8cc 	bl	800a670 <find_volume>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d14f      	bne.n	800b582 <f_opendir+0xd0>
		obj->fs = fs;
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7fe ffb3 	bl	800a458 <follow_path>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d13d      	bne.n	800b578 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b502:	b25b      	sxtb	r3, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	db12      	blt.n	800b52e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	799b      	ldrb	r3, [r3, #6]
 800b50c:	f003 0310 	and.w	r3, r3, #16
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00a      	beq.n	800b52a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	f7fe fd66 	bl	8009fee <ld_clust>
 800b522:	4602      	mov	r2, r0
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	609a      	str	r2, [r3, #8]
 800b528:	e001      	b.n	800b52e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b52a:	2305      	movs	r3, #5
 800b52c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d121      	bne.n	800b578 <f_opendir+0xc6>
				obj->id = fs->id;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	88da      	ldrh	r2, [r3, #6]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b53c:	2100      	movs	r1, #0
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7fe fbce 	bl	8009ce0 <dir_sdi>
 800b544:	4603      	mov	r3, r0
 800b546:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b548:	7dfb      	ldrb	r3, [r7, #23]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d114      	bne.n	800b578 <f_opendir+0xc6>
					if (obj->sclust) {
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00d      	beq.n	800b572 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7fd ff11 	bl	8009380 <inc_lock>
 800b55e:	4602      	mov	r2, r0
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d105      	bne.n	800b578 <f_opendir+0xc6>
 800b56c:	2312      	movs	r3, #18
 800b56e:	75fb      	strb	r3, [r7, #23]
 800b570:	e002      	b.n	800b578 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	2200      	movs	r2, #0
 800b576:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	2b04      	cmp	r3, #4
 800b57c:	d101      	bne.n	800b582 <f_opendir+0xd0>
 800b57e:	2305      	movs	r3, #5
 800b580:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b582:	7dfb      	ldrb	r3, [r7, #23]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <f_opendir+0xdc>
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	2200      	movs	r2, #0
 800b58c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	7dfa      	ldrb	r2, [r7, #23]
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f7fd fe59 	bl	800924c <unlock_fs>
 800b59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f107 0208 	add.w	r2, r7, #8
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7ff faaf 	bl	800ab18 <validate>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d115      	bne.n	800b5f0 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d006      	beq.n	800b5da <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fd ff63 	bl	800949c <dec_lock>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d102      	bne.n	800b5e6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fd fe2e 	bl	800924c <unlock_fs>
#endif
	}
	return res;
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f107 0208 	add.w	r2, r7, #8
 800b60a:	4611      	mov	r1, r2
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff fa83 	bl	800ab18 <validate>
 800b612:	4603      	mov	r3, r0
 800b614:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d126      	bne.n	800b66a <f_readdir+0x70>
		if (!fno) {
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b622:	2100      	movs	r1, #0
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fe fb5b 	bl	8009ce0 <dir_sdi>
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]
 800b62e:	e01c      	b.n	800b66a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b630:	2100      	movs	r1, #0
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7fe fd1a 	bl	800a06c <dir_read>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d101      	bne.n	800b646 <f_readdir+0x4c>
 800b642:	2300      	movs	r3, #0
 800b644:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10e      	bne.n	800b66a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7fe fe0e 	bl	800a270 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b654:	2100      	movs	r1, #0
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7fe fbbd 	bl	8009dd6 <dir_next>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	2b04      	cmp	r3, #4
 800b664:	d101      	bne.n	800b66a <f_readdir+0x70>
 800b666:	2300      	movs	r3, #0
 800b668:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	7bfa      	ldrb	r2, [r7, #15]
 800b66e:	4611      	mov	r1, r2
 800b670:	4618      	mov	r0, r3
 800b672:	f7fd fdeb 	bl	800924c <unlock_fs>
 800b676:	7bfb      	ldrb	r3, [r7, #15]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b090      	sub	sp, #64	; 0x40
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b68a:	f107 010c 	add.w	r1, r7, #12
 800b68e:	1d3b      	adds	r3, r7, #4
 800b690:	2200      	movs	r2, #0
 800b692:	4618      	mov	r0, r3
 800b694:	f7fe ffec 	bl	800a670 <find_volume>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b69e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d11f      	bne.n	800b6e6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	f107 030c 	add.w	r3, r7, #12
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe fed2 	bl	800a458 <follow_path>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b6ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d111      	bne.n	800b6e6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b6c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b6c6:	b25b      	sxtb	r3, r3
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	da03      	bge.n	800b6d4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b6cc:	2306      	movs	r3, #6
 800b6ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b6d2:	e008      	b.n	800b6e6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d005      	beq.n	800b6e6 <f_stat+0x66>
 800b6da:	f107 030c 	add.w	r3, r7, #12
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe fdc5 	bl	800a270 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fd fdac 	bl	800924c <unlock_fs>
 800b6f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3740      	adds	r7, #64	; 0x40
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b09e      	sub	sp, #120	; 0x78
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b70c:	f107 010c 	add.w	r1, r7, #12
 800b710:	1d3b      	adds	r3, r7, #4
 800b712:	2202      	movs	r2, #2
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe ffab 	bl	800a670 <find_volume>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b724:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f040 808e 	bne.w	800b84a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b734:	4611      	mov	r1, r2
 800b736:	4618      	mov	r0, r3
 800b738:	f7fe fe8e 	bl	800a458 <follow_path>
 800b73c:	4603      	mov	r3, r0
 800b73e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b742:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b746:	2b00      	cmp	r3, #0
 800b748:	d108      	bne.n	800b75c <f_unlink+0x5c>
 800b74a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b74e:	2102      	movs	r1, #2
 800b750:	4618      	mov	r0, r3
 800b752:	f7fd fd97 	bl	8009284 <chk_lock>
 800b756:	4603      	mov	r3, r0
 800b758:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b75c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b760:	2b00      	cmp	r3, #0
 800b762:	d172      	bne.n	800b84a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b764:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da03      	bge.n	800b776 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b76e:	2306      	movs	r3, #6
 800b770:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b774:	e008      	b.n	800b788 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b776:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b782:	2307      	movs	r3, #7
 800b784:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b788:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d134      	bne.n	800b7fa <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b794:	4611      	mov	r1, r2
 800b796:	4618      	mov	r0, r3
 800b798:	f7fe fc29 	bl	8009fee <ld_clust>
 800b79c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b79e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b7a2:	f003 0310 	and.w	r3, r3, #16
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d027      	beq.n	800b7fa <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b7ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7b0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b7b2:	f107 0310 	add.w	r3, r7, #16
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe fa91 	bl	8009ce0 <dir_sdi>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b7c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d116      	bne.n	800b7fa <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b7cc:	f107 0310 	add.w	r3, r7, #16
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fe fc4a 	bl	800a06c <dir_read>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b7de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <f_unlink+0xec>
 800b7e6:	2307      	movs	r3, #7
 800b7e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b7ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	d102      	bne.n	800b7fa <f_unlink+0xfa>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b7fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d123      	bne.n	800b84a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fd14 	bl	800a234 <dir_remove>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b812:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10c      	bne.n	800b834 <f_unlink+0x134>
 800b81a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b824:	2200      	movs	r2, #0
 800b826:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fe f928 	bl	8009a7e <remove_chain>
 800b82e:	4603      	mov	r3, r0
 800b830:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b834:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d106      	bne.n	800b84a <f_unlink+0x14a>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fd fefe 	bl	8009640 <sync_fs>
 800b844:	4603      	mov	r3, r0
 800b846:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b850:	4611      	mov	r1, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f7fd fcfa 	bl	800924c <unlock_fs>
 800b858:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3778      	adds	r7, #120	; 0x78
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b096      	sub	sp, #88	; 0x58
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b86c:	f107 0108 	add.w	r1, r7, #8
 800b870:	1d3b      	adds	r3, r7, #4
 800b872:	2202      	movs	r2, #2
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe fefb 	bl	800a670 <find_volume>
 800b87a:	4603      	mov	r3, r0
 800b87c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f040 80ec 	bne.w	800ba66 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	f107 030c 	add.w	r3, r7, #12
 800b894:	4611      	mov	r1, r2
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fdde 	bl	800a458 <follow_path>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b8a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d102      	bne.n	800b8b0 <f_mkdir+0x4c>
 800b8aa:	2308      	movs	r3, #8
 800b8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b8b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8b4:	2b04      	cmp	r3, #4
 800b8b6:	f040 80d6 	bne.w	800ba66 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	2100      	movs	r1, #0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fe f941 	bl	8009b48 <create_chain>
 800b8c6:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	895b      	ldrh	r3, [r3, #10]
 800b8cc:	025b      	lsls	r3, r3, #9
 800b8ce:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b8d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d102      	bne.n	800b8e2 <f_mkdir+0x7e>
 800b8dc:	2307      	movs	r3, #7
 800b8de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d102      	bne.n	800b8ee <f_mkdir+0x8a>
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d102      	bne.n	800b8fc <f_mkdir+0x98>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b8fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <f_mkdir+0xae>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	4618      	mov	r0, r3
 800b908:	f7fd fe28 	bl	800955c <sync_window>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b912:	f7fd fa89 	bl	8008e28 <get_fattime>
 800b916:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b918:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d16a      	bne.n	800b9f6 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b924:	4618      	mov	r0, r3
 800b926:	f7fd fef9 	bl	800971c <clust2sect>
 800b92a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	3334      	adds	r3, #52	; 0x34
 800b930:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b932:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b936:	2100      	movs	r1, #0
 800b938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b93a:	f7fd fc14 	bl	8009166 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b93e:	220b      	movs	r2, #11
 800b940:	2120      	movs	r1, #32
 800b942:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b944:	f7fd fc0f 	bl	8009166 <mem_set>
					dir[DIR_Name] = '.';
 800b948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94a:	222e      	movs	r2, #46	; 0x2e
 800b94c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b950:	330b      	adds	r3, #11
 800b952:	2210      	movs	r2, #16
 800b954:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b958:	3316      	adds	r3, #22
 800b95a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fd fbb5 	bl	80090cc <st_dword>
					st_clust(fs, dir, dcl);
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fe fb5f 	bl	800a02c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b970:	3320      	adds	r3, #32
 800b972:	2220      	movs	r2, #32
 800b974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b976:	4618      	mov	r0, r3
 800b978:	f7fd fbd4 	bl	8009124 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b97e:	3321      	adds	r3, #33	; 0x21
 800b980:	222e      	movs	r2, #46	; 0x2e
 800b982:	701a      	strb	r2, [r3, #0]
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d106      	bne.n	800b99e <f_mkdir+0x13a>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b996:	429a      	cmp	r2, r3
 800b998:	d101      	bne.n	800b99e <f_mkdir+0x13a>
 800b99a:	2300      	movs	r3, #0
 800b99c:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b99e:	68b8      	ldr	r0, [r7, #8]
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a2:	3320      	adds	r3, #32
 800b9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	f7fe fb40 	bl	800a02c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	895b      	ldrh	r3, [r3, #10]
 800b9b0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9b2:	e01b      	b.n	800b9ec <f_mkdir+0x188>
					fs->winsect = dsc++;
 800b9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b6:	1c5a      	adds	r2, r3, #1
 800b9b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fd fdc8 	bl	800955c <sync_window>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b9d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10c      	bne.n	800b9f4 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800b9da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9de:	2100      	movs	r1, #0
 800b9e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b9e2:	f7fd fbc0 	bl	8009166 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	653b      	str	r3, [r7, #80]	; 0x50
 800b9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e0      	bne.n	800b9b4 <f_mkdir+0x150>
 800b9f2:	e000      	b.n	800b9f6 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800b9f4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b9f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d107      	bne.n	800ba0e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fe fbe4 	bl	800a1d0 <dir_register>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800ba0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d120      	bne.n	800ba58 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ba16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba18:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ba1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1c:	3316      	adds	r3, #22
 800ba1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fd fb53 	bl	80090cc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fe fafd 	bl	800a02c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ba32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba34:	330b      	adds	r3, #11
 800ba36:	2210      	movs	r2, #16
 800ba38:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ba40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10e      	bne.n	800ba66 <f_mkdir+0x202>
					res = sync_fs(fs);
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fd fdf8 	bl	8009640 <sync_fs>
 800ba50:	4603      	mov	r3, r0
 800ba52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ba56:	e006      	b.n	800ba66 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800ba58:	f107 030c 	add.w	r3, r7, #12
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe f80c 	bl	8009a7e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fd fbec 	bl	800924c <unlock_fs>
 800ba74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3758      	adds	r7, #88	; 0x58
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba96:	4b1f      	ldr	r3, [pc, #124]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800ba98:	7a5b      	ldrb	r3, [r3, #9]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d131      	bne.n	800bb04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800baa0:	4b1c      	ldr	r3, [pc, #112]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800baa2:	7a5b      	ldrb	r3, [r3, #9]
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	461a      	mov	r2, r3
 800baa8:	4b1a      	ldr	r3, [pc, #104]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800baaa:	2100      	movs	r1, #0
 800baac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800baae:	4b19      	ldr	r3, [pc, #100]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bab0:	7a5b      	ldrb	r3, [r3, #9]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	4a17      	ldr	r2, [pc, #92]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800babe:	4b15      	ldr	r3, [pc, #84]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bac0:	7a5b      	ldrb	r3, [r3, #9]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	461a      	mov	r2, r3
 800bac6:	4b13      	ldr	r3, [pc, #76]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bac8:	4413      	add	r3, r2
 800baca:	79fa      	ldrb	r2, [r7, #7]
 800bacc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bace:	4b11      	ldr	r3, [pc, #68]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bad0:	7a5b      	ldrb	r3, [r3, #9]
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	b2d1      	uxtb	r1, r2
 800bad8:	4a0e      	ldr	r2, [pc, #56]	; (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bada:	7251      	strb	r1, [r2, #9]
 800badc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bade:	7dbb      	ldrb	r3, [r7, #22]
 800bae0:	3330      	adds	r3, #48	; 0x30
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	3301      	adds	r3, #1
 800baec:	223a      	movs	r2, #58	; 0x3a
 800baee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	3302      	adds	r3, #2
 800baf4:	222f      	movs	r2, #47	; 0x2f
 800baf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	3303      	adds	r3, #3
 800bafc:	2200      	movs	r2, #0
 800bafe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb04:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20006120 	.word	0x20006120

0800bb18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb22:	2200      	movs	r2, #0
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff ffaa 	bl	800ba80 <FATFS_LinkDriverEx>
 800bb2c:	4603      	mov	r3, r0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b086      	sub	sp, #24
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	6039      	str	r1, [r7, #0]
 800bb40:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800bb42:	2300      	movs	r3, #0
 800bb44:	60fb      	str	r3, [r7, #12]
 800bb46:	2300      	movs	r3, #0
 800bb48:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800bb4a:	f107 030c 	add.w	r3, r7, #12
 800bb4e:	2101      	movs	r1, #1
 800bb50:	4618      	mov	r0, r3
 800bb52:	f000 f8dd 	bl	800bd10 <osSemaphoreCreate>
 800bb56:	4602      	mov	r2, r0
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	bf14      	ite	ne
 800bb64:	2301      	movne	r3, #1
 800bb66:	2300      	moveq	r3, #0
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	617b      	str	r3, [r7, #20]

    return ret;
 800bb6c:	697b      	ldr	r3, [r7, #20]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f97c 	bl	800be7c <osSemaphoreDelete>
#endif
    return 1;
 800bb84:	2301      	movs	r3, #1
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800bb9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f8e8 	bl	800bd74 <osSemaphoreWait>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bbae:	68fb      	ldr	r3, [r7, #12]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f925 	bl	800be10 <osSemaphoreRelease>
#endif
}
 800bbc6:	bf00      	nop
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b085      	sub	sp, #20
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bbdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbe0:	2b84      	cmp	r3, #132	; 0x84
 800bbe2:	d005      	beq.n	800bbf0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bbe4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4413      	add	r3, r2
 800bbec:	3303      	adds	r3, #3
 800bbee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b083      	sub	sp, #12
 800bc02:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc04:	f3ef 8305 	mrs	r3, IPSR
 800bc08:	607b      	str	r3, [r7, #4]
  return(result);
 800bc0a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bf14      	ite	ne
 800bc10:	2301      	movne	r3, #1
 800bc12:	2300      	moveq	r3, #0
 800bc14:	b2db      	uxtb	r3, r3
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc26:	f001 f9a3 	bl	800cf70 <vTaskStartScheduler>
  
  return osOK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc34:	f7ff ffe3 	bl	800bbfe <inHandlerMode>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc3e:	f001 fabb 	bl	800d1b8 <xTaskGetTickCountFromISR>
 800bc42:	4603      	mov	r3, r0
 800bc44:	e002      	b.n	800bc4c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bc46:	f001 faa7 	bl	800d198 <xTaskGetTickCount>
 800bc4a:	4603      	mov	r3, r0
  }
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc52:	b089      	sub	sp, #36	; 0x24
 800bc54:	af04      	add	r7, sp, #16
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d020      	beq.n	800bca4 <osThreadCreate+0x54>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d01c      	beq.n	800bca4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685c      	ldr	r4, [r3, #4]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691e      	ldr	r6, [r3, #16]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff ffa6 	bl	800bbce <makeFreeRtosPriority>
 800bc82:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	695b      	ldr	r3, [r3, #20]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc8c:	9202      	str	r2, [sp, #8]
 800bc8e:	9301      	str	r3, [sp, #4]
 800bc90:	9100      	str	r1, [sp, #0]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	4632      	mov	r2, r6
 800bc96:	4629      	mov	r1, r5
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 ff8b 	bl	800cbb4 <xTaskCreateStatic>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	e01c      	b.n	800bcde <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685c      	ldr	r4, [r3, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcb0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff ff88 	bl	800bbce <makeFreeRtosPriority>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	f107 030c 	add.w	r3, r7, #12
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	9200      	str	r2, [sp, #0]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	4632      	mov	r2, r6
 800bccc:	4629      	mov	r1, r5
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f000 ffcd 	bl	800cc6e <xTaskCreate>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d001      	beq.n	800bcde <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e000      	b.n	800bce0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bcde:	68fb      	ldr	r3, [r7, #12]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bce8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <osDelay+0x16>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	e000      	b.n	800bd00 <osDelay+0x18>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4618      	mov	r0, r3
 800bd02:	f001 f901 	bl	800cf08 <vTaskDelay>
  
  return osOK;
 800bd06:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af02      	add	r7, sp, #8
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00f      	beq.n	800bd42 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d10a      	bne.n	800bd3e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	2203      	movs	r2, #3
 800bd2e:	9200      	str	r2, [sp, #0]
 800bd30:	2200      	movs	r2, #0
 800bd32:	2100      	movs	r1, #0
 800bd34:	2001      	movs	r0, #1
 800bd36:	f000 f9dd 	bl	800c0f4 <xQueueGenericCreateStatic>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	e016      	b.n	800bd6c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e014      	b.n	800bd6c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d110      	bne.n	800bd6a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bd48:	2203      	movs	r2, #3
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	f000 fa49 	bl	800c1e4 <xQueueGenericCreate>
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d005      	beq.n	800bd66 <osSemaphoreCreate+0x56>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2100      	movs	r1, #0
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 fa99 	bl	800c298 <xQueueGenericSend>
      return sema;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	e000      	b.n	800bd6c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bd6a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bd88:	2380      	movs	r3, #128	; 0x80
 800bd8a:	e03a      	b.n	800be02 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd96:	d103      	bne.n	800bda0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bd98:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	e009      	b.n	800bdb4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d006      	beq.n	800bdb4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <osSemaphoreWait+0x40>
      ticks = 1;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bdb4:	f7ff ff23 	bl	800bbfe <inHandlerMode>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d017      	beq.n	800bdee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bdbe:	f107 0308 	add.w	r3, r7, #8
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fcfe 	bl	800c7c8 <xQueueReceiveFromISR>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d001      	beq.n	800bdd6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bdd2:	23ff      	movs	r3, #255	; 0xff
 800bdd4:	e015      	b.n	800be02 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d011      	beq.n	800be00 <osSemaphoreWait+0x8c>
 800bddc:	4b0b      	ldr	r3, [pc, #44]	; (800be0c <osSemaphoreWait+0x98>)
 800bdde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	e008      	b.n	800be00 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bdee:	68f9      	ldr	r1, [r7, #12]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fbdd 	bl	800c5b0 <xQueueSemaphoreTake>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d001      	beq.n	800be00 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bdfc:	23ff      	movs	r3, #255	; 0xff
 800bdfe:	e000      	b.n	800be02 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	e000ed04 	.word	0xe000ed04

0800be10 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800be18:	2300      	movs	r3, #0
 800be1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800be1c:	2300      	movs	r3, #0
 800be1e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800be20:	f7ff feed 	bl	800bbfe <inHandlerMode>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d016      	beq.n	800be58 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800be2a:	f107 0308 	add.w	r3, r7, #8
 800be2e:	4619      	mov	r1, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fb2f 	bl	800c494 <xQueueGiveFromISR>
 800be36:	4603      	mov	r3, r0
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d001      	beq.n	800be40 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800be3c:	23ff      	movs	r3, #255	; 0xff
 800be3e:	e017      	b.n	800be70 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d013      	beq.n	800be6e <osSemaphoreRelease+0x5e>
 800be46:	4b0c      	ldr	r3, [pc, #48]	; (800be78 <osSemaphoreRelease+0x68>)
 800be48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	e00a      	b.n	800be6e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800be58:	2300      	movs	r3, #0
 800be5a:	2200      	movs	r2, #0
 800be5c:	2100      	movs	r1, #0
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 fa1a 	bl	800c298 <xQueueGenericSend>
 800be64:	4603      	mov	r3, r0
 800be66:	2b01      	cmp	r3, #1
 800be68:	d001      	beq.n	800be6e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800be6a:	23ff      	movs	r3, #255	; 0xff
 800be6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800be6e:	68fb      	ldr	r3, [r7, #12]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	e000ed04 	.word	0xe000ed04

0800be7c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800be84:	f7ff febb 	bl	800bbfe <inHandlerMode>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800be8e:	2382      	movs	r3, #130	; 0x82
 800be90:	e003      	b.n	800be9a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fd18 	bl	800c8c8 <vQueueDelete>

  return osOK; 
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b083      	sub	sp, #12
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800beac:	2381      	movs	r3, #129	; 0x81
#endif
}
 800beae:	4618      	mov	r0, r3
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800beba:	b480      	push	{r7}
 800bebc:	b083      	sub	sp, #12
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f103 0208 	add.w	r2, r3, #8
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f103 0208 	add.w	r2, r3, #8
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f103 0208 	add.w	r2, r3, #8
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800beee:	bf00      	nop
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800befa:	b480      	push	{r7}
 800befc:	b083      	sub	sp, #12
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]
}
 800bf50:	bf00      	nop
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d103      	bne.n	800bf7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e00c      	b.n	800bf96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	e002      	b.n	800bf8a <vListInsert+0x2e>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d2f6      	bcs.n	800bf84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	1c5a      	adds	r2, r3, #1
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	601a      	str	r2, [r3, #0]
}
 800bfc2:	bf00      	nop
 800bfc4:	3714      	adds	r7, #20
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	6892      	ldr	r2, [r2, #8]
 800bfe4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6852      	ldr	r2, [r2, #4]
 800bfee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d103      	bne.n	800c002 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	689a      	ldr	r2, [r3, #8]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	1e5a      	subs	r2, r3, #1
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
	...

0800c024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c04a:	bf00      	nop
 800c04c:	e7fe      	b.n	800c04c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c04e:	f001 ff11 	bl	800de74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c05a:	68f9      	ldr	r1, [r7, #12]
 800c05c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c05e:	fb01 f303 	mul.w	r3, r1, r3
 800c062:	441a      	add	r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07e:	3b01      	subs	r3, #1
 800c080:	68f9      	ldr	r1, [r7, #12]
 800c082:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c084:	fb01 f303 	mul.w	r3, r1, r3
 800c088:	441a      	add	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	22ff      	movs	r2, #255	; 0xff
 800c092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	22ff      	movs	r2, #255	; 0xff
 800c09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d114      	bne.n	800c0ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d01a      	beq.n	800c0e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	3310      	adds	r3, #16
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f001 f9d1 	bl	800d458 <xTaskRemoveFromEventList>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d012      	beq.n	800c0e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0bc:	4b0c      	ldr	r3, [pc, #48]	; (800c0f0 <xQueueGenericReset+0xcc>)
 800c0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	e009      	b.n	800c0e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3310      	adds	r3, #16
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff fef1 	bl	800beba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3324      	adds	r3, #36	; 0x24
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff feec 	bl	800beba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0e2:	f001 fef7 	bl	800ded4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0e6:	2301      	movs	r3, #1
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	e000ed04 	.word	0xe000ed04

0800c0f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b08e      	sub	sp, #56	; 0x38
 800c0f8:	af02      	add	r7, sp, #8
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
 800c100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10a      	bne.n	800c11e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c11a:	bf00      	nop
 800c11c:	e7fe      	b.n	800c11c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10a      	bne.n	800c13a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c136:	bf00      	nop
 800c138:	e7fe      	b.n	800c138 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <xQueueGenericCreateStatic+0x52>
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <xQueueGenericCreateStatic+0x56>
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <xQueueGenericCreateStatic+0x58>
 800c14a:	2300      	movs	r3, #0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10a      	bne.n	800c166 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	623b      	str	r3, [r7, #32]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d102      	bne.n	800c172 <xQueueGenericCreateStatic+0x7e>
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <xQueueGenericCreateStatic+0x82>
 800c172:	2301      	movs	r3, #1
 800c174:	e000      	b.n	800c178 <xQueueGenericCreateStatic+0x84>
 800c176:	2300      	movs	r3, #0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	61fb      	str	r3, [r7, #28]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c192:	2348      	movs	r3, #72	; 0x48
 800c194:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2b48      	cmp	r3, #72	; 0x48
 800c19a:	d00a      	beq.n	800c1b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	61bb      	str	r3, [r7, #24]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00d      	beq.n	800c1da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f000 f83f 	bl	800c258 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3730      	adds	r7, #48	; 0x30
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b08a      	sub	sp, #40	; 0x28
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	613b      	str	r3, [r7, #16]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	fb02 f303 	mul.w	r3, r2, r3
 800c216:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	3348      	adds	r3, #72	; 0x48
 800c21c:	4618      	mov	r0, r3
 800c21e:	f001 ff4b 	bl	800e0b8 <pvPortMalloc>
 800c222:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d011      	beq.n	800c24e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	3348      	adds	r3, #72	; 0x48
 800c232:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	2200      	movs	r2, #0
 800c238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c23c:	79fa      	ldrb	r2, [r7, #7]
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	4613      	mov	r3, r2
 800c244:	697a      	ldr	r2, [r7, #20]
 800c246:	68b9      	ldr	r1, [r7, #8]
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 f805 	bl	800c258 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c24e:	69bb      	ldr	r3, [r7, #24]
	}
 800c250:	4618      	mov	r0, r3
 800c252:	3720      	adds	r7, #32
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d103      	bne.n	800c274 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	69ba      	ldr	r2, [r7, #24]
 800c270:	601a      	str	r2, [r3, #0]
 800c272:	e002      	b.n	800c27a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c286:	2101      	movs	r1, #1
 800c288:	69b8      	ldr	r0, [r7, #24]
 800c28a:	f7ff fecb 	bl	800c024 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c28e:	bf00      	nop
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08e      	sub	sp, #56	; 0x38
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <xQueueGenericSend+0x32>
	__asm volatile
 800c2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2c6:	bf00      	nop
 800c2c8:	e7fe      	b.n	800c2c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d103      	bne.n	800c2d8 <xQueueGenericSend+0x40>
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <xQueueGenericSend+0x44>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e000      	b.n	800c2de <xQueueGenericSend+0x46>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10a      	bne.n	800c2f8 <xQueueGenericSend+0x60>
	__asm volatile
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2f4:	bf00      	nop
 800c2f6:	e7fe      	b.n	800c2f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d103      	bne.n	800c306 <xQueueGenericSend+0x6e>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c302:	2b01      	cmp	r3, #1
 800c304:	d101      	bne.n	800c30a <xQueueGenericSend+0x72>
 800c306:	2301      	movs	r3, #1
 800c308:	e000      	b.n	800c30c <xQueueGenericSend+0x74>
 800c30a:	2300      	movs	r3, #0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10a      	bne.n	800c326 <xQueueGenericSend+0x8e>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	623b      	str	r3, [r7, #32]
}
 800c322:	bf00      	nop
 800c324:	e7fe      	b.n	800c324 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c326:	f001 fa57 	bl	800d7d8 <xTaskGetSchedulerState>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d102      	bne.n	800c336 <xQueueGenericSend+0x9e>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <xQueueGenericSend+0xa2>
 800c336:	2301      	movs	r3, #1
 800c338:	e000      	b.n	800c33c <xQueueGenericSend+0xa4>
 800c33a:	2300      	movs	r3, #0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10a      	bne.n	800c356 <xQueueGenericSend+0xbe>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	61fb      	str	r3, [r7, #28]
}
 800c352:	bf00      	nop
 800c354:	e7fe      	b.n	800c354 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c356:	f001 fd8d 	bl	800de74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c362:	429a      	cmp	r2, r3
 800c364:	d302      	bcc.n	800c36c <xQueueGenericSend+0xd4>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d129      	bne.n	800c3c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c372:	f000 fae4 	bl	800c93e <prvCopyDataToQueue>
 800c376:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d010      	beq.n	800c3a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	3324      	adds	r3, #36	; 0x24
 800c384:	4618      	mov	r0, r3
 800c386:	f001 f867 	bl	800d458 <xTaskRemoveFromEventList>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d013      	beq.n	800c3b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c390:	4b3f      	ldr	r3, [pc, #252]	; (800c490 <xQueueGenericSend+0x1f8>)
 800c392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c396:	601a      	str	r2, [r3, #0]
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	e00a      	b.n	800c3b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d007      	beq.n	800c3b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3a8:	4b39      	ldr	r3, [pc, #228]	; (800c490 <xQueueGenericSend+0x1f8>)
 800c3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c3b8:	f001 fd8c 	bl	800ded4 <vPortExitCritical>
				return pdPASS;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e063      	b.n	800c488 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d103      	bne.n	800c3ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3c6:	f001 fd85 	bl	800ded4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e05c      	b.n	800c488 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d106      	bne.n	800c3e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3d4:	f107 0314 	add.w	r3, r7, #20
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f001 f89f 	bl	800d51c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3e2:	f001 fd77 	bl	800ded4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3e6:	f000 fe2d 	bl	800d044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3ea:	f001 fd43 	bl	800de74 <vPortEnterCritical>
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3f4:	b25b      	sxtb	r3, r3
 800c3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fa:	d103      	bne.n	800c404 <xQueueGenericSend+0x16c>
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c40a:	b25b      	sxtb	r3, r3
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c410:	d103      	bne.n	800c41a <xQueueGenericSend+0x182>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c41a:	f001 fd5b 	bl	800ded4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c41e:	1d3a      	adds	r2, r7, #4
 800c420:	f107 0314 	add.w	r3, r7, #20
 800c424:	4611      	mov	r1, r2
 800c426:	4618      	mov	r0, r3
 800c428:	f001 f88e 	bl	800d548 <xTaskCheckForTimeOut>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d124      	bne.n	800c47c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c434:	f000 fb7b 	bl	800cb2e <prvIsQueueFull>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d018      	beq.n	800c470 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	3310      	adds	r3, #16
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	4611      	mov	r1, r2
 800c446:	4618      	mov	r0, r3
 800c448:	f000 ffe2 	bl	800d410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c44e:	f000 fb06 	bl	800ca5e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c452:	f000 fe05 	bl	800d060 <xTaskResumeAll>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f47f af7c 	bne.w	800c356 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c45e:	4b0c      	ldr	r3, [pc, #48]	; (800c490 <xQueueGenericSend+0x1f8>)
 800c460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	e772      	b.n	800c356 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c472:	f000 faf4 	bl	800ca5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c476:	f000 fdf3 	bl	800d060 <xTaskResumeAll>
 800c47a:	e76c      	b.n	800c356 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c47e:	f000 faee 	bl	800ca5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c482:	f000 fded 	bl	800d060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c486:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3738      	adds	r7, #56	; 0x38
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	e000ed04 	.word	0xe000ed04

0800c494 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b08e      	sub	sp, #56	; 0x38
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10a      	bne.n	800c4be <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	623b      	str	r3, [r7, #32]
}
 800c4ba:	bf00      	nop
 800c4bc:	e7fe      	b.n	800c4bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00a      	beq.n	800c4dc <xQueueGiveFromISR+0x48>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	61fb      	str	r3, [r7, #28]
}
 800c4d8:	bf00      	nop
 800c4da:	e7fe      	b.n	800c4da <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d103      	bne.n	800c4ec <xQueueGiveFromISR+0x58>
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <xQueueGiveFromISR+0x5c>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e000      	b.n	800c4f2 <xQueueGiveFromISR+0x5e>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10a      	bne.n	800c50c <xQueueGiveFromISR+0x78>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	61bb      	str	r3, [r7, #24]
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c50c:	f001 fd94 	bl	800e038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c510:	f3ef 8211 	mrs	r2, BASEPRI
 800c514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c518:	f383 8811 	msr	BASEPRI, r3
 800c51c:	f3bf 8f6f 	isb	sy
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	617a      	str	r2, [r7, #20]
 800c526:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c528:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c52a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c530:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c538:	429a      	cmp	r2, r3
 800c53a:	d22b      	bcs.n	800c594 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c54e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c556:	d112      	bne.n	800c57e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d016      	beq.n	800c58e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	3324      	adds	r3, #36	; 0x24
 800c564:	4618      	mov	r0, r3
 800c566:	f000 ff77 	bl	800d458 <xTaskRemoveFromEventList>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00e      	beq.n	800c58e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00b      	beq.n	800c58e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2201      	movs	r2, #1
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	e007      	b.n	800c58e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c582:	3301      	adds	r3, #1
 800c584:	b2db      	uxtb	r3, r3
 800c586:	b25a      	sxtb	r2, r3
 800c588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c58e:	2301      	movs	r3, #1
 800c590:	637b      	str	r3, [r7, #52]	; 0x34
 800c592:	e001      	b.n	800c598 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c594:	2300      	movs	r3, #0
 800c596:	637b      	str	r3, [r7, #52]	; 0x34
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c5a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3738      	adds	r7, #56	; 0x38
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
	...

0800c5b0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	; 0x38
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10a      	bne.n	800c5e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	623b      	str	r3, [r7, #32]
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00a      	beq.n	800c600 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	61fb      	str	r3, [r7, #28]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c600:	f001 f8ea 	bl	800d7d8 <xTaskGetSchedulerState>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d102      	bne.n	800c610 <xQueueSemaphoreTake+0x60>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <xQueueSemaphoreTake+0x64>
 800c610:	2301      	movs	r3, #1
 800c612:	e000      	b.n	800c616 <xQueueSemaphoreTake+0x66>
 800c614:	2300      	movs	r3, #0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10a      	bne.n	800c630 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	61bb      	str	r3, [r7, #24]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c630:	f001 fc20 	bl	800de74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c638:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d024      	beq.n	800c68a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	1e5a      	subs	r2, r3, #1
 800c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c646:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d104      	bne.n	800c65a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c650:	f001 fa6a 	bl	800db28 <pvTaskIncrementMutexHeldCount>
 800c654:	4602      	mov	r2, r0
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00f      	beq.n	800c682 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c664:	3310      	adds	r3, #16
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fef6 	bl	800d458 <xTaskRemoveFromEventList>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d007      	beq.n	800c682 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c672:	4b54      	ldr	r3, [pc, #336]	; (800c7c4 <xQueueSemaphoreTake+0x214>)
 800c674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c682:	f001 fc27 	bl	800ded4 <vPortExitCritical>
				return pdPASS;
 800c686:	2301      	movs	r3, #1
 800c688:	e097      	b.n	800c7ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d111      	bne.n	800c6b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	617b      	str	r3, [r7, #20]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6ac:	f001 fc12 	bl	800ded4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e082      	b.n	800c7ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d106      	bne.n	800c6c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6ba:	f107 030c 	add.w	r3, r7, #12
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 ff2c 	bl	800d51c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6c8:	f001 fc04 	bl	800ded4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6cc:	f000 fcba 	bl	800d044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6d0:	f001 fbd0 	bl	800de74 <vPortEnterCritical>
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6da:	b25b      	sxtb	r3, r3
 800c6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e0:	d103      	bne.n	800c6ea <xQueueSemaphoreTake+0x13a>
 800c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6f0:	b25b      	sxtb	r3, r3
 800c6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f6:	d103      	bne.n	800c700 <xQueueSemaphoreTake+0x150>
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c700:	f001 fbe8 	bl	800ded4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c704:	463a      	mov	r2, r7
 800c706:	f107 030c 	add.w	r3, r7, #12
 800c70a:	4611      	mov	r1, r2
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 ff1b 	bl	800d548 <xTaskCheckForTimeOut>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d132      	bne.n	800c77e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c71a:	f000 f9f2 	bl	800cb02 <prvIsQueueEmpty>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d026      	beq.n	800c772 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d109      	bne.n	800c740 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c72c:	f001 fba2 	bl	800de74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	4618      	mov	r0, r3
 800c736:	f001 f86d 	bl	800d814 <xTaskPriorityInherit>
 800c73a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c73c:	f001 fbca 	bl	800ded4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	3324      	adds	r3, #36	; 0x24
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	4611      	mov	r1, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 fe61 	bl	800d410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c750:	f000 f985 	bl	800ca5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c754:	f000 fc84 	bl	800d060 <xTaskResumeAll>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f47f af68 	bne.w	800c630 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c760:	4b18      	ldr	r3, [pc, #96]	; (800c7c4 <xQueueSemaphoreTake+0x214>)
 800c762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	e75e      	b.n	800c630 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c774:	f000 f973 	bl	800ca5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c778:	f000 fc72 	bl	800d060 <xTaskResumeAll>
 800c77c:	e758      	b.n	800c630 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c77e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c780:	f000 f96d 	bl	800ca5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c784:	f000 fc6c 	bl	800d060 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c78a:	f000 f9ba 	bl	800cb02 <prvIsQueueEmpty>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	f43f af4d 	beq.w	800c630 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00d      	beq.n	800c7b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c79c:	f001 fb6a 	bl	800de74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7a2:	f000 f8b4 	bl	800c90e <prvGetDisinheritPriorityAfterTimeout>
 800c7a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f001 f92c 	bl	800da0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7b4:	f001 fb8e 	bl	800ded4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3738      	adds	r7, #56	; 0x38
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	e000ed04 	.word	0xe000ed04

0800c7c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08e      	sub	sp, #56	; 0x38
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	623b      	str	r3, [r7, #32]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d103      	bne.n	800c802 <xQueueReceiveFromISR+0x3a>
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <xQueueReceiveFromISR+0x3e>
 800c802:	2301      	movs	r3, #1
 800c804:	e000      	b.n	800c808 <xQueueReceiveFromISR+0x40>
 800c806:	2300      	movs	r3, #0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10a      	bne.n	800c822 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	61fb      	str	r3, [r7, #28]
}
 800c81e:	bf00      	nop
 800c820:	e7fe      	b.n	800c820 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c822:	f001 fc09 	bl	800e038 <vPortValidateInterruptPriority>
	__asm volatile
 800c826:	f3ef 8211 	mrs	r2, BASEPRI
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	61ba      	str	r2, [r7, #24]
 800c83c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c83e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c840:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c846:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d02f      	beq.n	800c8ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c858:	68b9      	ldr	r1, [r7, #8]
 800c85a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c85c:	f000 f8d9 	bl	800ca12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	1e5a      	subs	r2, r3, #1
 800c864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c866:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c868:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c870:	d112      	bne.n	800c898 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d016      	beq.n	800c8a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	3310      	adds	r3, #16
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 fdea 	bl	800d458 <xTaskRemoveFromEventList>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00e      	beq.n	800c8a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	e007      	b.n	800c8a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c89c:	3301      	adds	r3, #1
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	b25a      	sxtb	r2, r3
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c8ac:	e001      	b.n	800c8b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	f383 8811 	msr	BASEPRI, r3
}
 800c8bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3738      	adds	r7, #56	; 0x38
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10a      	bne.n	800c8f0 <vQueueDelete+0x28>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	60bb      	str	r3, [r7, #8]
}
 800c8ec:	bf00      	nop
 800c8ee:	e7fe      	b.n	800c8ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 f935 	bl	800cb60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d102      	bne.n	800c906 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f001 fca5 	bl	800e250 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c906:	bf00      	nop
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c90e:	b480      	push	{r7}
 800c910:	b085      	sub	sp, #20
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d006      	beq.n	800c92c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f1c3 0307 	rsb	r3, r3, #7
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	e001      	b.n	800c930 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c92c:	2300      	movs	r3, #0
 800c92e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c930:	68fb      	ldr	r3, [r7, #12]
	}
 800c932:	4618      	mov	r0, r3
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b086      	sub	sp, #24
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c952:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10d      	bne.n	800c978 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d14d      	bne.n	800ca00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 ffc9 	bl	800d900 <xTaskPriorityDisinherit>
 800c96e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2200      	movs	r2, #0
 800c974:	609a      	str	r2, [r3, #8]
 800c976:	e043      	b.n	800ca00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d119      	bne.n	800c9b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6858      	ldr	r0, [r3, #4]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	461a      	mov	r2, r3
 800c988:	68b9      	ldr	r1, [r7, #8]
 800c98a:	f002 fcd1 	bl	800f330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c996:	441a      	add	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d32b      	bcc.n	800ca00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	605a      	str	r2, [r3, #4]
 800c9b0:	e026      	b.n	800ca00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	68d8      	ldr	r0, [r3, #12]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	68b9      	ldr	r1, [r7, #8]
 800c9be:	f002 fcb7 	bl	800f330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	68da      	ldr	r2, [r3, #12]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ca:	425b      	negs	r3, r3
 800c9cc:	441a      	add	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	68da      	ldr	r2, [r3, #12]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d207      	bcs.n	800c9ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	689a      	ldr	r2, [r3, #8]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e6:	425b      	negs	r3, r3
 800c9e8:	441a      	add	r2, r3
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d105      	bne.n	800ca00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca08:	697b      	ldr	r3, [r7, #20]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3718      	adds	r7, #24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b082      	sub	sp, #8
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d018      	beq.n	800ca56 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68da      	ldr	r2, [r3, #12]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2c:	441a      	add	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68da      	ldr	r2, [r3, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d303      	bcc.n	800ca46 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68d9      	ldr	r1, [r3, #12]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4e:	461a      	mov	r2, r3
 800ca50:	6838      	ldr	r0, [r7, #0]
 800ca52:	f002 fc6d 	bl	800f330 <memcpy>
	}
}
 800ca56:	bf00      	nop
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b084      	sub	sp, #16
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca66:	f001 fa05 	bl	800de74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca70:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca72:	e011      	b.n	800ca98 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d012      	beq.n	800caa2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3324      	adds	r3, #36	; 0x24
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 fce9 	bl	800d458 <xTaskRemoveFromEventList>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca8c:	f000 fdbe 	bl	800d60c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
 800ca92:	3b01      	subs	r3, #1
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	dce9      	bgt.n	800ca74 <prvUnlockQueue+0x16>
 800caa0:	e000      	b.n	800caa4 <prvUnlockQueue+0x46>
					break;
 800caa2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	22ff      	movs	r2, #255	; 0xff
 800caa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800caac:	f001 fa12 	bl	800ded4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cab0:	f001 f9e0 	bl	800de74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cabc:	e011      	b.n	800cae2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d012      	beq.n	800caec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3310      	adds	r3, #16
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 fcc4 	bl	800d458 <xTaskRemoveFromEventList>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cad6:	f000 fd99 	bl	800d60c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cada:	7bbb      	ldrb	r3, [r7, #14]
 800cadc:	3b01      	subs	r3, #1
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	dce9      	bgt.n	800cabe <prvUnlockQueue+0x60>
 800caea:	e000      	b.n	800caee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800caec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	22ff      	movs	r2, #255	; 0xff
 800caf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800caf6:	f001 f9ed 	bl	800ded4 <vPortExitCritical>
}
 800cafa:	bf00      	nop
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb0a:	f001 f9b3 	bl	800de74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb16:	2301      	movs	r3, #1
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	e001      	b.n	800cb20 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb20:	f001 f9d8 	bl	800ded4 <vPortExitCritical>

	return xReturn;
 800cb24:	68fb      	ldr	r3, [r7, #12]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb36:	f001 f99d 	bl	800de74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d102      	bne.n	800cb4c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb46:	2301      	movs	r3, #1
 800cb48:	60fb      	str	r3, [r7, #12]
 800cb4a:	e001      	b.n	800cb50 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb50:	f001 f9c0 	bl	800ded4 <vPortExitCritical>

	return xReturn;
 800cb54:	68fb      	ldr	r3, [r7, #12]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
	...

0800cb60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb68:	2300      	movs	r3, #0
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	e016      	b.n	800cb9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb6e:	4a10      	ldr	r2, [pc, #64]	; (800cbb0 <vQueueUnregisterQueue+0x50>)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	4413      	add	r3, r2
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d10b      	bne.n	800cb96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb7e:	4a0c      	ldr	r2, [pc, #48]	; (800cbb0 <vQueueUnregisterQueue+0x50>)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2100      	movs	r1, #0
 800cb84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb88:	4a09      	ldr	r2, [pc, #36]	; (800cbb0 <vQueueUnregisterQueue+0x50>)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	4413      	add	r3, r2
 800cb90:	2200      	movs	r2, #0
 800cb92:	605a      	str	r2, [r3, #4]
				break;
 800cb94:	e006      	b.n	800cba4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b07      	cmp	r3, #7
 800cba0:	d9e5      	bls.n	800cb6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	3714      	adds	r7, #20
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr
 800cbb0:	2000612c 	.word	0x2000612c

0800cbb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08e      	sub	sp, #56	; 0x38
 800cbb8:	af04      	add	r7, sp, #16
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
 800cbc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10a      	bne.n	800cbde <xTaskCreateStatic+0x2a>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	623b      	str	r3, [r7, #32]
}
 800cbda:	bf00      	nop
 800cbdc:	e7fe      	b.n	800cbdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10a      	bne.n	800cbfa <xTaskCreateStatic+0x46>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	61fb      	str	r3, [r7, #28]
}
 800cbf6:	bf00      	nop
 800cbf8:	e7fe      	b.n	800cbf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbfa:	23a0      	movs	r3, #160	; 0xa0
 800cbfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	2ba0      	cmp	r3, #160	; 0xa0
 800cc02:	d00a      	beq.n	800cc1a <xTaskCreateStatic+0x66>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	61bb      	str	r3, [r7, #24]
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d01e      	beq.n	800cc60 <xTaskCreateStatic+0xac>
 800cc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d01b      	beq.n	800cc60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc34:	2202      	movs	r2, #2
 800cc36:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	9302      	str	r3, [sp, #8]
 800cc42:	f107 0314 	add.w	r3, r7, #20
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	68b9      	ldr	r1, [r7, #8]
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f000 f850 	bl	800ccf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc5a:	f000 f8eb 	bl	800ce34 <prvAddNewTaskToReadyList>
 800cc5e:	e001      	b.n	800cc64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc64:	697b      	ldr	r3, [r7, #20]
	}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3728      	adds	r7, #40	; 0x28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b08c      	sub	sp, #48	; 0x30
 800cc72:	af04      	add	r7, sp, #16
 800cc74:	60f8      	str	r0, [r7, #12]
 800cc76:	60b9      	str	r1, [r7, #8]
 800cc78:	603b      	str	r3, [r7, #0]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc7e:	88fb      	ldrh	r3, [r7, #6]
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4618      	mov	r0, r3
 800cc84:	f001 fa18 	bl	800e0b8 <pvPortMalloc>
 800cc88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00e      	beq.n	800ccae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc90:	20a0      	movs	r0, #160	; 0xa0
 800cc92:	f001 fa11 	bl	800e0b8 <pvPortMalloc>
 800cc96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	697a      	ldr	r2, [r7, #20]
 800cca2:	631a      	str	r2, [r3, #48]	; 0x30
 800cca4:	e005      	b.n	800ccb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cca6:	6978      	ldr	r0, [r7, #20]
 800cca8:	f001 fad2 	bl	800e250 <vPortFree>
 800ccac:	e001      	b.n	800ccb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d017      	beq.n	800cce8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccc0:	88fa      	ldrh	r2, [r7, #6]
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	9303      	str	r3, [sp, #12]
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	9302      	str	r3, [sp, #8]
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	9301      	str	r3, [sp, #4]
 800ccce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	68b9      	ldr	r1, [r7, #8]
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f000 f80e 	bl	800ccf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccdc:	69f8      	ldr	r0, [r7, #28]
 800ccde:	f000 f8a9 	bl	800ce34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cce2:	2301      	movs	r3, #1
 800cce4:	61bb      	str	r3, [r7, #24]
 800cce6:	e002      	b.n	800ccee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cce8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccee:	69bb      	ldr	r3, [r7, #24]
	}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3720      	adds	r7, #32
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
 800cd04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd10:	3b01      	subs	r3, #1
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	f023 0307 	bic.w	r3, r3, #7
 800cd1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	f003 0307 	and.w	r3, r3, #7
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00a      	beq.n	800cd40 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	617b      	str	r3, [r7, #20]
}
 800cd3c:	bf00      	nop
 800cd3e:	e7fe      	b.n	800cd3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d01f      	beq.n	800cd86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd46:	2300      	movs	r3, #0
 800cd48:	61fb      	str	r3, [r7, #28]
 800cd4a:	e012      	b.n	800cd72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	4413      	add	r3, r2
 800cd52:	7819      	ldrb	r1, [r3, #0]
 800cd54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	4413      	add	r3, r2
 800cd5a:	3334      	adds	r3, #52	; 0x34
 800cd5c:	460a      	mov	r2, r1
 800cd5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	4413      	add	r3, r2
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d006      	beq.n	800cd7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	61fb      	str	r3, [r7, #28]
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	2b0f      	cmp	r3, #15
 800cd76:	d9e9      	bls.n	800cd4c <prvInitialiseNewTask+0x54>
 800cd78:	e000      	b.n	800cd7c <prvInitialiseNewTask+0x84>
			{
				break;
 800cd7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd84:	e003      	b.n	800cd8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd90:	2b06      	cmp	r3, #6
 800cd92:	d901      	bls.n	800cd98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd94:	2306      	movs	r3, #6
 800cd96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cda2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	2200      	movs	r2, #0
 800cda8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	3304      	adds	r3, #4
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff f8a3 	bl	800befa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	3318      	adds	r3, #24
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff f89e 	bl	800befa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	f1c3 0207 	rsb	r2, r3, #7
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	334c      	adds	r3, #76	; 0x4c
 800cde8:	224c      	movs	r2, #76	; 0x4c
 800cdea:	2100      	movs	r1, #0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f002 f9b7 	bl	800f160 <memset>
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf4:	4a0c      	ldr	r2, [pc, #48]	; (800ce28 <prvInitialiseNewTask+0x130>)
 800cdf6:	651a      	str	r2, [r3, #80]	; 0x50
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfa:	4a0c      	ldr	r2, [pc, #48]	; (800ce2c <prvInitialiseNewTask+0x134>)
 800cdfc:	655a      	str	r2, [r3, #84]	; 0x54
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	4a0b      	ldr	r2, [pc, #44]	; (800ce30 <prvInitialiseNewTask+0x138>)
 800ce02:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	68f9      	ldr	r1, [r7, #12]
 800ce08:	69b8      	ldr	r0, [r7, #24]
 800ce0a:	f000 ff07 	bl	800dc1c <pxPortInitialiseStack>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce20:	bf00      	nop
 800ce22:	3720      	adds	r7, #32
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	20009ec0 	.word	0x20009ec0
 800ce2c:	20009f28 	.word	0x20009f28
 800ce30:	20009f90 	.word	0x20009f90

0800ce34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce3c:	f001 f81a 	bl	800de74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce40:	4b2a      	ldr	r3, [pc, #168]	; (800ceec <prvAddNewTaskToReadyList+0xb8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3301      	adds	r3, #1
 800ce46:	4a29      	ldr	r2, [pc, #164]	; (800ceec <prvAddNewTaskToReadyList+0xb8>)
 800ce48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce4a:	4b29      	ldr	r3, [pc, #164]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d109      	bne.n	800ce66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce52:	4a27      	ldr	r2, [pc, #156]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce58:	4b24      	ldr	r3, [pc, #144]	; (800ceec <prvAddNewTaskToReadyList+0xb8>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d110      	bne.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce60:	f000 fbf8 	bl	800d654 <prvInitialiseTaskLists>
 800ce64:	e00d      	b.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce66:	4b23      	ldr	r3, [pc, #140]	; (800cef4 <prvAddNewTaskToReadyList+0xc0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d109      	bne.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce6e:	4b20      	ldr	r3, [pc, #128]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d802      	bhi.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce7c:	4a1c      	ldr	r2, [pc, #112]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce82:	4b1d      	ldr	r3, [pc, #116]	; (800cef8 <prvAddNewTaskToReadyList+0xc4>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3301      	adds	r3, #1
 800ce88:	4a1b      	ldr	r2, [pc, #108]	; (800cef8 <prvAddNewTaskToReadyList+0xc4>)
 800ce8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	2201      	movs	r2, #1
 800ce92:	409a      	lsls	r2, r3
 800ce94:	4b19      	ldr	r3, [pc, #100]	; (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	4a18      	ldr	r2, [pc, #96]	; (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea2:	4613      	mov	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4a15      	ldr	r2, [pc, #84]	; (800cf00 <prvAddNewTaskToReadyList+0xcc>)
 800ceac:	441a      	add	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f7ff f82d 	bl	800bf14 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ceba:	f001 f80b 	bl	800ded4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cebe:	4b0d      	ldr	r3, [pc, #52]	; (800cef4 <prvAddNewTaskToReadyList+0xc0>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00e      	beq.n	800cee4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cec6:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d207      	bcs.n	800cee4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ced4:	4b0b      	ldr	r3, [pc, #44]	; (800cf04 <prvAddNewTaskToReadyList+0xd0>)
 800ced6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	2000626c 	.word	0x2000626c
 800cef0:	2000616c 	.word	0x2000616c
 800cef4:	20006278 	.word	0x20006278
 800cef8:	20006288 	.word	0x20006288
 800cefc:	20006274 	.word	0x20006274
 800cf00:	20006170 	.word	0x20006170
 800cf04:	e000ed04 	.word	0xe000ed04

0800cf08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d017      	beq.n	800cf4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf1a:	4b13      	ldr	r3, [pc, #76]	; (800cf68 <vTaskDelay+0x60>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00a      	beq.n	800cf38 <vTaskDelay+0x30>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	60bb      	str	r3, [r7, #8]
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf38:	f000 f884 	bl	800d044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fe06 	bl	800db50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf44:	f000 f88c 	bl	800d060 <xTaskResumeAll>
 800cf48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d107      	bne.n	800cf60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf50:	4b06      	ldr	r3, [pc, #24]	; (800cf6c <vTaskDelay+0x64>)
 800cf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf60:	bf00      	nop
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20006294 	.word	0x20006294
 800cf6c:	e000ed04 	.word	0xe000ed04

0800cf70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08a      	sub	sp, #40	; 0x28
 800cf74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf7e:	463a      	mov	r2, r7
 800cf80:	1d39      	adds	r1, r7, #4
 800cf82:	f107 0308 	add.w	r3, r7, #8
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7f5 f93a 	bl	8002200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	9202      	str	r2, [sp, #8]
 800cf94:	9301      	str	r3, [sp, #4]
 800cf96:	2300      	movs	r3, #0
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	460a      	mov	r2, r1
 800cf9e:	4921      	ldr	r1, [pc, #132]	; (800d024 <vTaskStartScheduler+0xb4>)
 800cfa0:	4821      	ldr	r0, [pc, #132]	; (800d028 <vTaskStartScheduler+0xb8>)
 800cfa2:	f7ff fe07 	bl	800cbb4 <xTaskCreateStatic>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	4a20      	ldr	r2, [pc, #128]	; (800d02c <vTaskStartScheduler+0xbc>)
 800cfaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfac:	4b1f      	ldr	r3, [pc, #124]	; (800d02c <vTaskStartScheduler+0xbc>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	617b      	str	r3, [r7, #20]
 800cfb8:	e001      	b.n	800cfbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d11b      	bne.n	800cffc <vTaskStartScheduler+0x8c>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	613b      	str	r3, [r7, #16]
}
 800cfd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfd8:	4b15      	ldr	r3, [pc, #84]	; (800d030 <vTaskStartScheduler+0xc0>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	334c      	adds	r3, #76	; 0x4c
 800cfde:	4a15      	ldr	r2, [pc, #84]	; (800d034 <vTaskStartScheduler+0xc4>)
 800cfe0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <vTaskStartScheduler+0xc8>)
 800cfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfea:	4b14      	ldr	r3, [pc, #80]	; (800d03c <vTaskStartScheduler+0xcc>)
 800cfec:	2201      	movs	r2, #1
 800cfee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cff0:	4b13      	ldr	r3, [pc, #76]	; (800d040 <vTaskStartScheduler+0xd0>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cff6:	f000 fe9b 	bl	800dd30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cffa:	e00e      	b.n	800d01a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d002:	d10a      	bne.n	800d01a <vTaskStartScheduler+0xaa>
	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	60fb      	str	r3, [r7, #12]
}
 800d016:	bf00      	nop
 800d018:	e7fe      	b.n	800d018 <vTaskStartScheduler+0xa8>
}
 800d01a:	bf00      	nop
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	08011a34 	.word	0x08011a34
 800d028:	0800d625 	.word	0x0800d625
 800d02c:	20006290 	.word	0x20006290
 800d030:	2000616c 	.word	0x2000616c
 800d034:	200000a0 	.word	0x200000a0
 800d038:	2000628c 	.word	0x2000628c
 800d03c:	20006278 	.word	0x20006278
 800d040:	20006270 	.word	0x20006270

0800d044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d044:	b480      	push	{r7}
 800d046:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d048:	4b04      	ldr	r3, [pc, #16]	; (800d05c <vTaskSuspendAll+0x18>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3301      	adds	r3, #1
 800d04e:	4a03      	ldr	r2, [pc, #12]	; (800d05c <vTaskSuspendAll+0x18>)
 800d050:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d052:	bf00      	nop
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	20006294 	.word	0x20006294

0800d060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d066:	2300      	movs	r3, #0
 800d068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d06a:	2300      	movs	r3, #0
 800d06c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d06e:	4b41      	ldr	r3, [pc, #260]	; (800d174 <xTaskResumeAll+0x114>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10a      	bne.n	800d08c <xTaskResumeAll+0x2c>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	603b      	str	r3, [r7, #0]
}
 800d088:	bf00      	nop
 800d08a:	e7fe      	b.n	800d08a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d08c:	f000 fef2 	bl	800de74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d090:	4b38      	ldr	r3, [pc, #224]	; (800d174 <xTaskResumeAll+0x114>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3b01      	subs	r3, #1
 800d096:	4a37      	ldr	r2, [pc, #220]	; (800d174 <xTaskResumeAll+0x114>)
 800d098:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d09a:	4b36      	ldr	r3, [pc, #216]	; (800d174 <xTaskResumeAll+0x114>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d161      	bne.n	800d166 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0a2:	4b35      	ldr	r3, [pc, #212]	; (800d178 <xTaskResumeAll+0x118>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d05d      	beq.n	800d166 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0aa:	e02e      	b.n	800d10a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ac:	4b33      	ldr	r3, [pc, #204]	; (800d17c <xTaskResumeAll+0x11c>)
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	3318      	adds	r3, #24
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fe ff88 	bl	800bfce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe ff83 	bl	800bfce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	409a      	lsls	r2, r3
 800d0d0:	4b2b      	ldr	r3, [pc, #172]	; (800d180 <xTaskResumeAll+0x120>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	4a2a      	ldr	r2, [pc, #168]	; (800d180 <xTaskResumeAll+0x120>)
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0de:	4613      	mov	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4a27      	ldr	r2, [pc, #156]	; (800d184 <xTaskResumeAll+0x124>)
 800d0e8:	441a      	add	r2, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	f7fe ff0f 	bl	800bf14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fa:	4b23      	ldr	r3, [pc, #140]	; (800d188 <xTaskResumeAll+0x128>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d100:	429a      	cmp	r2, r3
 800d102:	d302      	bcc.n	800d10a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d104:	4b21      	ldr	r3, [pc, #132]	; (800d18c <xTaskResumeAll+0x12c>)
 800d106:	2201      	movs	r2, #1
 800d108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d10a:	4b1c      	ldr	r3, [pc, #112]	; (800d17c <xTaskResumeAll+0x11c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1cc      	bne.n	800d0ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d118:	f000 fb3e 	bl	800d798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d11c:	4b1c      	ldr	r3, [pc, #112]	; (800d190 <xTaskResumeAll+0x130>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d010      	beq.n	800d14a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d128:	f000 f858 	bl	800d1dc <xTaskIncrementTick>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d132:	4b16      	ldr	r3, [pc, #88]	; (800d18c <xTaskResumeAll+0x12c>)
 800d134:	2201      	movs	r2, #1
 800d136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1f1      	bne.n	800d128 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d144:	4b12      	ldr	r3, [pc, #72]	; (800d190 <xTaskResumeAll+0x130>)
 800d146:	2200      	movs	r2, #0
 800d148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d14a:	4b10      	ldr	r3, [pc, #64]	; (800d18c <xTaskResumeAll+0x12c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d009      	beq.n	800d166 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d152:	2301      	movs	r3, #1
 800d154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d156:	4b0f      	ldr	r3, [pc, #60]	; (800d194 <xTaskResumeAll+0x134>)
 800d158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d166:	f000 feb5 	bl	800ded4 <vPortExitCritical>

	return xAlreadyYielded;
 800d16a:	68bb      	ldr	r3, [r7, #8]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	20006294 	.word	0x20006294
 800d178:	2000626c 	.word	0x2000626c
 800d17c:	2000622c 	.word	0x2000622c
 800d180:	20006274 	.word	0x20006274
 800d184:	20006170 	.word	0x20006170
 800d188:	2000616c 	.word	0x2000616c
 800d18c:	20006280 	.word	0x20006280
 800d190:	2000627c 	.word	0x2000627c
 800d194:	e000ed04 	.word	0xe000ed04

0800d198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d19e:	4b05      	ldr	r3, [pc, #20]	; (800d1b4 <xTaskGetTickCount+0x1c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1a4:	687b      	ldr	r3, [r7, #4]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	20006270 	.word	0x20006270

0800d1b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1be:	f000 ff3b 	bl	800e038 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d1c6:	4b04      	ldr	r3, [pc, #16]	; (800d1d8 <xTaskGetTickCountFromISR+0x20>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1cc:	683b      	ldr	r3, [r7, #0]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20006270 	.word	0x20006270

0800d1dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1e6:	4b4e      	ldr	r3, [pc, #312]	; (800d320 <xTaskIncrementTick+0x144>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f040 808e 	bne.w	800d30c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1f0:	4b4c      	ldr	r3, [pc, #304]	; (800d324 <xTaskIncrementTick+0x148>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1f8:	4a4a      	ldr	r2, [pc, #296]	; (800d324 <xTaskIncrementTick+0x148>)
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d120      	bne.n	800d246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d204:	4b48      	ldr	r3, [pc, #288]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00a      	beq.n	800d224 <xTaskIncrementTick+0x48>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	603b      	str	r3, [r7, #0]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <xTaskIncrementTick+0x46>
 800d224:	4b40      	ldr	r3, [pc, #256]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	60fb      	str	r3, [r7, #12]
 800d22a:	4b40      	ldr	r3, [pc, #256]	; (800d32c <xTaskIncrementTick+0x150>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a3e      	ldr	r2, [pc, #248]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	4a3e      	ldr	r2, [pc, #248]	; (800d32c <xTaskIncrementTick+0x150>)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	4b3d      	ldr	r3, [pc, #244]	; (800d330 <xTaskIncrementTick+0x154>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3301      	adds	r3, #1
 800d23e:	4a3c      	ldr	r2, [pc, #240]	; (800d330 <xTaskIncrementTick+0x154>)
 800d240:	6013      	str	r3, [r2, #0]
 800d242:	f000 faa9 	bl	800d798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d246:	4b3b      	ldr	r3, [pc, #236]	; (800d334 <xTaskIncrementTick+0x158>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d348      	bcc.n	800d2e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d250:	4b35      	ldr	r3, [pc, #212]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d104      	bne.n	800d264 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d25a:	4b36      	ldr	r3, [pc, #216]	; (800d334 <xTaskIncrementTick+0x158>)
 800d25c:	f04f 32ff 	mov.w	r2, #4294967295
 800d260:	601a      	str	r2, [r3, #0]
					break;
 800d262:	e03e      	b.n	800d2e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d264:	4b30      	ldr	r3, [pc, #192]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d203      	bcs.n	800d284 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d27c:	4a2d      	ldr	r2, [pc, #180]	; (800d334 <xTaskIncrementTick+0x158>)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d282:	e02e      	b.n	800d2e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	3304      	adds	r3, #4
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe fea0 	bl	800bfce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d292:	2b00      	cmp	r3, #0
 800d294:	d004      	beq.n	800d2a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	3318      	adds	r3, #24
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe fe97 	bl	800bfce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	409a      	lsls	r2, r3
 800d2a8:	4b23      	ldr	r3, [pc, #140]	; (800d338 <xTaskIncrementTick+0x15c>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	4a22      	ldr	r2, [pc, #136]	; (800d338 <xTaskIncrementTick+0x15c>)
 800d2b0:	6013      	str	r3, [r2, #0]
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4413      	add	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4a1f      	ldr	r2, [pc, #124]	; (800d33c <xTaskIncrementTick+0x160>)
 800d2c0:	441a      	add	r2, r3
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	f7fe fe23 	bl	800bf14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d2:	4b1b      	ldr	r3, [pc, #108]	; (800d340 <xTaskIncrementTick+0x164>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d3b9      	bcc.n	800d250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2e0:	e7b6      	b.n	800d250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2e2:	4b17      	ldr	r3, [pc, #92]	; (800d340 <xTaskIncrementTick+0x164>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e8:	4914      	ldr	r1, [pc, #80]	; (800d33c <xTaskIncrementTick+0x160>)
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4413      	add	r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	440b      	add	r3, r1
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d901      	bls.n	800d2fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d2fe:	4b11      	ldr	r3, [pc, #68]	; (800d344 <xTaskIncrementTick+0x168>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d007      	beq.n	800d316 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d306:	2301      	movs	r3, #1
 800d308:	617b      	str	r3, [r7, #20]
 800d30a:	e004      	b.n	800d316 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d30c:	4b0e      	ldr	r3, [pc, #56]	; (800d348 <xTaskIncrementTick+0x16c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3301      	adds	r3, #1
 800d312:	4a0d      	ldr	r2, [pc, #52]	; (800d348 <xTaskIncrementTick+0x16c>)
 800d314:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d316:	697b      	ldr	r3, [r7, #20]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3718      	adds	r7, #24
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20006294 	.word	0x20006294
 800d324:	20006270 	.word	0x20006270
 800d328:	20006224 	.word	0x20006224
 800d32c:	20006228 	.word	0x20006228
 800d330:	20006284 	.word	0x20006284
 800d334:	2000628c 	.word	0x2000628c
 800d338:	20006274 	.word	0x20006274
 800d33c:	20006170 	.word	0x20006170
 800d340:	2000616c 	.word	0x2000616c
 800d344:	20006280 	.word	0x20006280
 800d348:	2000627c 	.word	0x2000627c

0800d34c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d34c:	b480      	push	{r7}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d352:	4b29      	ldr	r3, [pc, #164]	; (800d3f8 <vTaskSwitchContext+0xac>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d003      	beq.n	800d362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d35a:	4b28      	ldr	r3, [pc, #160]	; (800d3fc <vTaskSwitchContext+0xb0>)
 800d35c:	2201      	movs	r2, #1
 800d35e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d360:	e044      	b.n	800d3ec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d362:	4b26      	ldr	r3, [pc, #152]	; (800d3fc <vTaskSwitchContext+0xb0>)
 800d364:	2200      	movs	r2, #0
 800d366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d368:	4b25      	ldr	r3, [pc, #148]	; (800d400 <vTaskSwitchContext+0xb4>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	fab3 f383 	clz	r3, r3
 800d374:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d376:	7afb      	ldrb	r3, [r7, #11]
 800d378:	f1c3 031f 	rsb	r3, r3, #31
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	4921      	ldr	r1, [pc, #132]	; (800d404 <vTaskSwitchContext+0xb8>)
 800d380:	697a      	ldr	r2, [r7, #20]
 800d382:	4613      	mov	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	440b      	add	r3, r1
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	607b      	str	r3, [r7, #4]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <vTaskSwitchContext+0x5a>
 800d3a8:	697a      	ldr	r2, [r7, #20]
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4413      	add	r3, r2
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	4a14      	ldr	r2, [pc, #80]	; (800d404 <vTaskSwitchContext+0xb8>)
 800d3b4:	4413      	add	r3, r2
 800d3b6:	613b      	str	r3, [r7, #16]
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	605a      	str	r2, [r3, #4]
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	685a      	ldr	r2, [r3, #4]
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	3308      	adds	r3, #8
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d104      	bne.n	800d3d8 <vTaskSwitchContext+0x8c>
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	605a      	str	r2, [r3, #4]
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	4a0a      	ldr	r2, [pc, #40]	; (800d408 <vTaskSwitchContext+0xbc>)
 800d3e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d3e2:	4b09      	ldr	r3, [pc, #36]	; (800d408 <vTaskSwitchContext+0xbc>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	334c      	adds	r3, #76	; 0x4c
 800d3e8:	4a08      	ldr	r2, [pc, #32]	; (800d40c <vTaskSwitchContext+0xc0>)
 800d3ea:	6013      	str	r3, [r2, #0]
}
 800d3ec:	bf00      	nop
 800d3ee:	371c      	adds	r7, #28
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	20006294 	.word	0x20006294
 800d3fc:	20006280 	.word	0x20006280
 800d400:	20006274 	.word	0x20006274
 800d404:	20006170 	.word	0x20006170
 800d408:	2000616c 	.word	0x2000616c
 800d40c:	200000a0 	.word	0x200000a0

0800d410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10a      	bne.n	800d436 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	60fb      	str	r3, [r7, #12]
}
 800d432:	bf00      	nop
 800d434:	e7fe      	b.n	800d434 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d436:	4b07      	ldr	r3, [pc, #28]	; (800d454 <vTaskPlaceOnEventList+0x44>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	3318      	adds	r3, #24
 800d43c:	4619      	mov	r1, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7fe fd8c 	bl	800bf5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d444:	2101      	movs	r1, #1
 800d446:	6838      	ldr	r0, [r7, #0]
 800d448:	f000 fb82 	bl	800db50 <prvAddCurrentTaskToDelayedList>
}
 800d44c:	bf00      	nop
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	2000616c 	.word	0x2000616c

0800d458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10a      	bne.n	800d484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	60fb      	str	r3, [r7, #12]
}
 800d480:	bf00      	nop
 800d482:	e7fe      	b.n	800d482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	3318      	adds	r3, #24
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fe fda0 	bl	800bfce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d48e:	4b1d      	ldr	r3, [pc, #116]	; (800d504 <xTaskRemoveFromEventList+0xac>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d11c      	bne.n	800d4d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	3304      	adds	r3, #4
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe fd97 	bl	800bfce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	409a      	lsls	r2, r3
 800d4a8:	4b17      	ldr	r3, [pc, #92]	; (800d508 <xTaskRemoveFromEventList+0xb0>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	4a16      	ldr	r2, [pc, #88]	; (800d508 <xTaskRemoveFromEventList+0xb0>)
 800d4b0:	6013      	str	r3, [r2, #0]
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4a13      	ldr	r2, [pc, #76]	; (800d50c <xTaskRemoveFromEventList+0xb4>)
 800d4c0:	441a      	add	r2, r3
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	4610      	mov	r0, r2
 800d4ca:	f7fe fd23 	bl	800bf14 <vListInsertEnd>
 800d4ce:	e005      	b.n	800d4dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	3318      	adds	r3, #24
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	480e      	ldr	r0, [pc, #56]	; (800d510 <xTaskRemoveFromEventList+0xb8>)
 800d4d8:	f7fe fd1c 	bl	800bf14 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e0:	4b0c      	ldr	r3, [pc, #48]	; (800d514 <xTaskRemoveFromEventList+0xbc>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d905      	bls.n	800d4f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4ee:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <xTaskRemoveFromEventList+0xc0>)
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	e001      	b.n	800d4fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4fa:	697b      	ldr	r3, [r7, #20]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	20006294 	.word	0x20006294
 800d508:	20006274 	.word	0x20006274
 800d50c:	20006170 	.word	0x20006170
 800d510:	2000622c 	.word	0x2000622c
 800d514:	2000616c 	.word	0x2000616c
 800d518:	20006280 	.word	0x20006280

0800d51c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d524:	4b06      	ldr	r3, [pc, #24]	; (800d540 <vTaskInternalSetTimeOutState+0x24>)
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d52c:	4b05      	ldr	r3, [pc, #20]	; (800d544 <vTaskInternalSetTimeOutState+0x28>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	605a      	str	r2, [r3, #4]
}
 800d534:	bf00      	nop
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	20006284 	.word	0x20006284
 800d544:	20006270 	.word	0x20006270

0800d548 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10a      	bne.n	800d56e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	613b      	str	r3, [r7, #16]
}
 800d56a:	bf00      	nop
 800d56c:	e7fe      	b.n	800d56c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d10a      	bne.n	800d58a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	60fb      	str	r3, [r7, #12]
}
 800d586:	bf00      	nop
 800d588:	e7fe      	b.n	800d588 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d58a:	f000 fc73 	bl	800de74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d58e:	4b1d      	ldr	r3, [pc, #116]	; (800d604 <xTaskCheckForTimeOut+0xbc>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	69ba      	ldr	r2, [r7, #24]
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a6:	d102      	bne.n	800d5ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	e023      	b.n	800d5f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	4b15      	ldr	r3, [pc, #84]	; (800d608 <xTaskCheckForTimeOut+0xc0>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d007      	beq.n	800d5ca <xTaskCheckForTimeOut+0x82>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	69ba      	ldr	r2, [r7, #24]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d302      	bcc.n	800d5ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	61fb      	str	r3, [r7, #28]
 800d5c8:	e015      	b.n	800d5f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d20b      	bcs.n	800d5ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	1ad2      	subs	r2, r2, r3
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff ff9b 	bl	800d51c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61fb      	str	r3, [r7, #28]
 800d5ea:	e004      	b.n	800d5f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5f6:	f000 fc6d 	bl	800ded4 <vPortExitCritical>

	return xReturn;
 800d5fa:	69fb      	ldr	r3, [r7, #28]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3720      	adds	r7, #32
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	20006270 	.word	0x20006270
 800d608:	20006284 	.word	0x20006284

0800d60c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d60c:	b480      	push	{r7}
 800d60e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d610:	4b03      	ldr	r3, [pc, #12]	; (800d620 <vTaskMissedYield+0x14>)
 800d612:	2201      	movs	r2, #1
 800d614:	601a      	str	r2, [r3, #0]
}
 800d616:	bf00      	nop
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr
 800d620:	20006280 	.word	0x20006280

0800d624 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d62c:	f000 f852 	bl	800d6d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d630:	4b06      	ldr	r3, [pc, #24]	; (800d64c <prvIdleTask+0x28>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d9f9      	bls.n	800d62c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d638:	4b05      	ldr	r3, [pc, #20]	; (800d650 <prvIdleTask+0x2c>)
 800d63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d63e:	601a      	str	r2, [r3, #0]
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d648:	e7f0      	b.n	800d62c <prvIdleTask+0x8>
 800d64a:	bf00      	nop
 800d64c:	20006170 	.word	0x20006170
 800d650:	e000ed04 	.word	0xe000ed04

0800d654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d65a:	2300      	movs	r3, #0
 800d65c:	607b      	str	r3, [r7, #4]
 800d65e:	e00c      	b.n	800d67a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	4613      	mov	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4413      	add	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4a12      	ldr	r2, [pc, #72]	; (800d6b4 <prvInitialiseTaskLists+0x60>)
 800d66c:	4413      	add	r3, r2
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fc23 	bl	800beba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3301      	adds	r3, #1
 800d678:	607b      	str	r3, [r7, #4]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b06      	cmp	r3, #6
 800d67e:	d9ef      	bls.n	800d660 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d680:	480d      	ldr	r0, [pc, #52]	; (800d6b8 <prvInitialiseTaskLists+0x64>)
 800d682:	f7fe fc1a 	bl	800beba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d686:	480d      	ldr	r0, [pc, #52]	; (800d6bc <prvInitialiseTaskLists+0x68>)
 800d688:	f7fe fc17 	bl	800beba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d68c:	480c      	ldr	r0, [pc, #48]	; (800d6c0 <prvInitialiseTaskLists+0x6c>)
 800d68e:	f7fe fc14 	bl	800beba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d692:	480c      	ldr	r0, [pc, #48]	; (800d6c4 <prvInitialiseTaskLists+0x70>)
 800d694:	f7fe fc11 	bl	800beba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d698:	480b      	ldr	r0, [pc, #44]	; (800d6c8 <prvInitialiseTaskLists+0x74>)
 800d69a:	f7fe fc0e 	bl	800beba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d69e:	4b0b      	ldr	r3, [pc, #44]	; (800d6cc <prvInitialiseTaskLists+0x78>)
 800d6a0:	4a05      	ldr	r2, [pc, #20]	; (800d6b8 <prvInitialiseTaskLists+0x64>)
 800d6a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6a4:	4b0a      	ldr	r3, [pc, #40]	; (800d6d0 <prvInitialiseTaskLists+0x7c>)
 800d6a6:	4a05      	ldr	r2, [pc, #20]	; (800d6bc <prvInitialiseTaskLists+0x68>)
 800d6a8:	601a      	str	r2, [r3, #0]
}
 800d6aa:	bf00      	nop
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20006170 	.word	0x20006170
 800d6b8:	200061fc 	.word	0x200061fc
 800d6bc:	20006210 	.word	0x20006210
 800d6c0:	2000622c 	.word	0x2000622c
 800d6c4:	20006240 	.word	0x20006240
 800d6c8:	20006258 	.word	0x20006258
 800d6cc:	20006224 	.word	0x20006224
 800d6d0:	20006228 	.word	0x20006228

0800d6d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6da:	e019      	b.n	800d710 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6dc:	f000 fbca 	bl	800de74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6e0:	4b10      	ldr	r3, [pc, #64]	; (800d724 <prvCheckTasksWaitingTermination+0x50>)
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fe fc6e 	bl	800bfce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6f2:	4b0d      	ldr	r3, [pc, #52]	; (800d728 <prvCheckTasksWaitingTermination+0x54>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	4a0b      	ldr	r2, [pc, #44]	; (800d728 <prvCheckTasksWaitingTermination+0x54>)
 800d6fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6fc:	4b0b      	ldr	r3, [pc, #44]	; (800d72c <prvCheckTasksWaitingTermination+0x58>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3b01      	subs	r3, #1
 800d702:	4a0a      	ldr	r2, [pc, #40]	; (800d72c <prvCheckTasksWaitingTermination+0x58>)
 800d704:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d706:	f000 fbe5 	bl	800ded4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f810 	bl	800d730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d710:	4b06      	ldr	r3, [pc, #24]	; (800d72c <prvCheckTasksWaitingTermination+0x58>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1e1      	bne.n	800d6dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d718:	bf00      	nop
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20006240 	.word	0x20006240
 800d728:	2000626c 	.word	0x2000626c
 800d72c:	20006254 	.word	0x20006254

0800d730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	334c      	adds	r3, #76	; 0x4c
 800d73c:	4618      	mov	r0, r3
 800d73e:	f001 fd3f 	bl	800f1c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d108      	bne.n	800d75e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d750:	4618      	mov	r0, r3
 800d752:	f000 fd7d 	bl	800e250 <vPortFree>
				vPortFree( pxTCB );
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 fd7a 	bl	800e250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d75c:	e018      	b.n	800d790 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d764:	2b01      	cmp	r3, #1
 800d766:	d103      	bne.n	800d770 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fd71 	bl	800e250 <vPortFree>
	}
 800d76e:	e00f      	b.n	800d790 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d776:	2b02      	cmp	r3, #2
 800d778:	d00a      	beq.n	800d790 <prvDeleteTCB+0x60>
	__asm volatile
 800d77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	60fb      	str	r3, [r7, #12]
}
 800d78c:	bf00      	nop
 800d78e:	e7fe      	b.n	800d78e <prvDeleteTCB+0x5e>
	}
 800d790:	bf00      	nop
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d79e:	4b0c      	ldr	r3, [pc, #48]	; (800d7d0 <prvResetNextTaskUnblockTime+0x38>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d104      	bne.n	800d7b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7a8:	4b0a      	ldr	r3, [pc, #40]	; (800d7d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7b0:	e008      	b.n	800d7c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b2:	4b07      	ldr	r3, [pc, #28]	; (800d7d0 <prvResetNextTaskUnblockTime+0x38>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	4a04      	ldr	r2, [pc, #16]	; (800d7d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d7c2:	6013      	str	r3, [r2, #0]
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	20006224 	.word	0x20006224
 800d7d4:	2000628c 	.word	0x2000628c

0800d7d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7de:	4b0b      	ldr	r3, [pc, #44]	; (800d80c <xTaskGetSchedulerState+0x34>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d102      	bne.n	800d7ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	607b      	str	r3, [r7, #4]
 800d7ea:	e008      	b.n	800d7fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ec:	4b08      	ldr	r3, [pc, #32]	; (800d810 <xTaskGetSchedulerState+0x38>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d102      	bne.n	800d7fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7f4:	2302      	movs	r3, #2
 800d7f6:	607b      	str	r3, [r7, #4]
 800d7f8:	e001      	b.n	800d7fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7fe:	687b      	ldr	r3, [r7, #4]
	}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	20006278 	.word	0x20006278
 800d810:	20006294 	.word	0x20006294

0800d814 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d820:	2300      	movs	r3, #0
 800d822:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d05e      	beq.n	800d8e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82e:	4b31      	ldr	r3, [pc, #196]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d834:	429a      	cmp	r2, r3
 800d836:	d24e      	bcs.n	800d8d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	db06      	blt.n	800d84e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d840:	4b2c      	ldr	r3, [pc, #176]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d846:	f1c3 0207 	rsb	r2, r3, #7
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6959      	ldr	r1, [r3, #20]
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d856:	4613      	mov	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4a26      	ldr	r2, [pc, #152]	; (800d8f8 <xTaskPriorityInherit+0xe4>)
 800d860:	4413      	add	r3, r2
 800d862:	4299      	cmp	r1, r3
 800d864:	d12f      	bne.n	800d8c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	3304      	adds	r3, #4
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe fbaf 	bl	800bfce <uxListRemove>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d10a      	bne.n	800d88c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	2201      	movs	r2, #1
 800d87c:	fa02 f303 	lsl.w	r3, r2, r3
 800d880:	43da      	mvns	r2, r3
 800d882:	4b1e      	ldr	r3, [pc, #120]	; (800d8fc <xTaskPriorityInherit+0xe8>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4013      	ands	r3, r2
 800d888:	4a1c      	ldr	r2, [pc, #112]	; (800d8fc <xTaskPriorityInherit+0xe8>)
 800d88a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d88c:	4b19      	ldr	r3, [pc, #100]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89a:	2201      	movs	r2, #1
 800d89c:	409a      	lsls	r2, r3
 800d89e:	4b17      	ldr	r3, [pc, #92]	; (800d8fc <xTaskPriorityInherit+0xe8>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	4a15      	ldr	r2, [pc, #84]	; (800d8fc <xTaskPriorityInherit+0xe8>)
 800d8a6:	6013      	str	r3, [r2, #0]
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	4a10      	ldr	r2, [pc, #64]	; (800d8f8 <xTaskPriorityInherit+0xe4>)
 800d8b6:	441a      	add	r2, r3
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f7fe fb28 	bl	800bf14 <vListInsertEnd>
 800d8c4:	e004      	b.n	800d8d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8c6:	4b0b      	ldr	r3, [pc, #44]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	e008      	b.n	800d8e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8da:	4b06      	ldr	r3, [pc, #24]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d201      	bcs.n	800d8e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
	}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	2000616c 	.word	0x2000616c
 800d8f8:	20006170 	.word	0x20006170
 800d8fc:	20006274 	.word	0x20006274

0800d900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d90c:	2300      	movs	r3, #0
 800d90e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d06e      	beq.n	800d9f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d916:	4b3a      	ldr	r3, [pc, #232]	; (800da00 <xTaskPriorityDisinherit+0x100>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d00a      	beq.n	800d936 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	60fb      	str	r3, [r7, #12]
}
 800d932:	bf00      	nop
 800d934:	e7fe      	b.n	800d934 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10a      	bne.n	800d954 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	60bb      	str	r3, [r7, #8]
}
 800d950:	bf00      	nop
 800d952:	e7fe      	b.n	800d952 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d958:	1e5a      	subs	r2, r3, #1
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d966:	429a      	cmp	r2, r3
 800d968:	d044      	beq.n	800d9f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d140      	bne.n	800d9f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	3304      	adds	r3, #4
 800d976:	4618      	mov	r0, r3
 800d978:	f7fe fb29 	bl	800bfce <uxListRemove>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d115      	bne.n	800d9ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d986:	491f      	ldr	r1, [pc, #124]	; (800da04 <xTaskPriorityDisinherit+0x104>)
 800d988:	4613      	mov	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	440b      	add	r3, r1
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10a      	bne.n	800d9ae <xTaskPriorityDisinherit+0xae>
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99c:	2201      	movs	r2, #1
 800d99e:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a2:	43da      	mvns	r2, r3
 800d9a4:	4b18      	ldr	r3, [pc, #96]	; (800da08 <xTaskPriorityDisinherit+0x108>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	4a17      	ldr	r2, [pc, #92]	; (800da08 <xTaskPriorityDisinherit+0x108>)
 800d9ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ba:	f1c3 0207 	rsb	r2, r3, #7
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	409a      	lsls	r2, r3
 800d9ca:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <xTaskPriorityDisinherit+0x108>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	4a0d      	ldr	r2, [pc, #52]	; (800da08 <xTaskPriorityDisinherit+0x108>)
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4a08      	ldr	r2, [pc, #32]	; (800da04 <xTaskPriorityDisinherit+0x104>)
 800d9e2:	441a      	add	r2, r3
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7fe fa92 	bl	800bf14 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9f4:	697b      	ldr	r3, [r7, #20]
	}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3718      	adds	r7, #24
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	2000616c 	.word	0x2000616c
 800da04:	20006170 	.word	0x20006170
 800da08:	20006274 	.word	0x20006274

0800da0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b088      	sub	sp, #32
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da1a:	2301      	movs	r3, #1
 800da1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d077      	beq.n	800db14 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10a      	bne.n	800da42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	60fb      	str	r3, [r7, #12]
}
 800da3e:	bf00      	nop
 800da40:	e7fe      	b.n	800da40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d902      	bls.n	800da52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	61fb      	str	r3, [r7, #28]
 800da50:	e002      	b.n	800da58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5c:	69fa      	ldr	r2, [r7, #28]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d058      	beq.n	800db14 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d153      	bne.n	800db14 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da6c:	4b2b      	ldr	r3, [pc, #172]	; (800db1c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	69ba      	ldr	r2, [r7, #24]
 800da72:	429a      	cmp	r2, r3
 800da74:	d10a      	bne.n	800da8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	60bb      	str	r3, [r7, #8]
}
 800da88:	bf00      	nop
 800da8a:	e7fe      	b.n	800da8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	69fa      	ldr	r2, [r7, #28]
 800da96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	699b      	ldr	r3, [r3, #24]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	db04      	blt.n	800daaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	f1c3 0207 	rsb	r2, r3, #7
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	6959      	ldr	r1, [r3, #20]
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	4613      	mov	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	4a19      	ldr	r2, [pc, #100]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800daba:	4413      	add	r3, r2
 800dabc:	4299      	cmp	r1, r3
 800dabe:	d129      	bne.n	800db14 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	3304      	adds	r3, #4
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe fa82 	bl	800bfce <uxListRemove>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d10a      	bne.n	800dae6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad4:	2201      	movs	r2, #1
 800dad6:	fa02 f303 	lsl.w	r3, r2, r3
 800dada:	43da      	mvns	r2, r3
 800dadc:	4b11      	ldr	r3, [pc, #68]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4013      	ands	r3, r2
 800dae2:	4a10      	ldr	r2, [pc, #64]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dae4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daea:	2201      	movs	r2, #1
 800daec:	409a      	lsls	r2, r3
 800daee:	4b0d      	ldr	r3, [pc, #52]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	4a0b      	ldr	r2, [pc, #44]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dafc:	4613      	mov	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4a06      	ldr	r2, [pc, #24]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800db06:	441a      	add	r2, r3
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	3304      	adds	r3, #4
 800db0c:	4619      	mov	r1, r3
 800db0e:	4610      	mov	r0, r2
 800db10:	f7fe fa00 	bl	800bf14 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db14:	bf00      	nop
 800db16:	3720      	adds	r7, #32
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	2000616c 	.word	0x2000616c
 800db20:	20006170 	.word	0x20006170
 800db24:	20006274 	.word	0x20006274

0800db28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db28:	b480      	push	{r7}
 800db2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db2c:	4b07      	ldr	r3, [pc, #28]	; (800db4c <pvTaskIncrementMutexHeldCount+0x24>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d004      	beq.n	800db3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db34:	4b05      	ldr	r3, [pc, #20]	; (800db4c <pvTaskIncrementMutexHeldCount+0x24>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db3a:	3201      	adds	r2, #1
 800db3c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db3e:	4b03      	ldr	r3, [pc, #12]	; (800db4c <pvTaskIncrementMutexHeldCount+0x24>)
 800db40:	681b      	ldr	r3, [r3, #0]
	}
 800db42:	4618      	mov	r0, r3
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	2000616c 	.word	0x2000616c

0800db50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db5a:	4b29      	ldr	r3, [pc, #164]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb0>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db60:	4b28      	ldr	r3, [pc, #160]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3304      	adds	r3, #4
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe fa31 	bl	800bfce <uxListRemove>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10b      	bne.n	800db8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db72:	4b24      	ldr	r3, [pc, #144]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db78:	2201      	movs	r2, #1
 800db7a:	fa02 f303 	lsl.w	r3, r2, r3
 800db7e:	43da      	mvns	r2, r3
 800db80:	4b21      	ldr	r3, [pc, #132]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4013      	ands	r3, r2
 800db86:	4a20      	ldr	r2, [pc, #128]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db90:	d10a      	bne.n	800dba8 <prvAddCurrentTaskToDelayedList+0x58>
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d007      	beq.n	800dba8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db98:	4b1a      	ldr	r3, [pc, #104]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3304      	adds	r3, #4
 800db9e:	4619      	mov	r1, r3
 800dba0:	481a      	ldr	r0, [pc, #104]	; (800dc0c <prvAddCurrentTaskToDelayedList+0xbc>)
 800dba2:	f7fe f9b7 	bl	800bf14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dba6:	e026      	b.n	800dbf6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4413      	add	r3, r2
 800dbae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbb0:	4b14      	ldr	r3, [pc, #80]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d209      	bcs.n	800dbd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbc0:	4b13      	ldr	r3, [pc, #76]	; (800dc10 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	4b0f      	ldr	r3, [pc, #60]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3304      	adds	r3, #4
 800dbca:	4619      	mov	r1, r3
 800dbcc:	4610      	mov	r0, r2
 800dbce:	f7fe f9c5 	bl	800bf5c <vListInsert>
}
 800dbd2:	e010      	b.n	800dbf6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbd4:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	4b0a      	ldr	r3, [pc, #40]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3304      	adds	r3, #4
 800dbde:	4619      	mov	r1, r3
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	f7fe f9bb 	bl	800bf5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbe6:	4b0c      	ldr	r3, [pc, #48]	; (800dc18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d202      	bcs.n	800dbf6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dbf0:	4a09      	ldr	r2, [pc, #36]	; (800dc18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	6013      	str	r3, [r2, #0]
}
 800dbf6:	bf00      	nop
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20006270 	.word	0x20006270
 800dc04:	2000616c 	.word	0x2000616c
 800dc08:	20006274 	.word	0x20006274
 800dc0c:	20006258 	.word	0x20006258
 800dc10:	20006228 	.word	0x20006228
 800dc14:	20006224 	.word	0x20006224
 800dc18:	2000628c 	.word	0x2000628c

0800dc1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	3b04      	subs	r3, #4
 800dc2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	3b04      	subs	r3, #4
 800dc3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	f023 0201 	bic.w	r2, r3, #1
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3b04      	subs	r3, #4
 800dc4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc4c:	4a0c      	ldr	r2, [pc, #48]	; (800dc80 <pxPortInitialiseStack+0x64>)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3b14      	subs	r3, #20
 800dc56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3b04      	subs	r3, #4
 800dc62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f06f 0202 	mvn.w	r2, #2
 800dc6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	3b20      	subs	r3, #32
 800dc70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc72:	68fb      	ldr	r3, [r7, #12]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3714      	adds	r7, #20
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	0800dc85 	.word	0x0800dc85

0800dc84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc8e:	4b12      	ldr	r3, [pc, #72]	; (800dcd8 <prvTaskExitError+0x54>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc96:	d00a      	beq.n	800dcae <prvTaskExitError+0x2a>
	__asm volatile
 800dc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9c:	f383 8811 	msr	BASEPRI, r3
 800dca0:	f3bf 8f6f 	isb	sy
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	60fb      	str	r3, [r7, #12]
}
 800dcaa:	bf00      	nop
 800dcac:	e7fe      	b.n	800dcac <prvTaskExitError+0x28>
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	60bb      	str	r3, [r7, #8]
}
 800dcc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcc2:	bf00      	nop
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0fc      	beq.n	800dcc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcca:	bf00      	nop
 800dccc:	bf00      	nop
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	20000044 	.word	0x20000044
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dce0:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <pxCurrentTCBConst2>)
 800dce2:	6819      	ldr	r1, [r3, #0]
 800dce4:	6808      	ldr	r0, [r1, #0]
 800dce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcea:	f380 8809 	msr	PSP, r0
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f04f 0000 	mov.w	r0, #0
 800dcf6:	f380 8811 	msr	BASEPRI, r0
 800dcfa:	4770      	bx	lr
 800dcfc:	f3af 8000 	nop.w

0800dd00 <pxCurrentTCBConst2>:
 800dd00:	2000616c 	.word	0x2000616c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd04:	bf00      	nop
 800dd06:	bf00      	nop

0800dd08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd08:	4808      	ldr	r0, [pc, #32]	; (800dd2c <prvPortStartFirstTask+0x24>)
 800dd0a:	6800      	ldr	r0, [r0, #0]
 800dd0c:	6800      	ldr	r0, [r0, #0]
 800dd0e:	f380 8808 	msr	MSP, r0
 800dd12:	f04f 0000 	mov.w	r0, #0
 800dd16:	f380 8814 	msr	CONTROL, r0
 800dd1a:	b662      	cpsie	i
 800dd1c:	b661      	cpsie	f
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	df00      	svc	0
 800dd28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd2a:	bf00      	nop
 800dd2c:	e000ed08 	.word	0xe000ed08

0800dd30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd36:	4b46      	ldr	r3, [pc, #280]	; (800de50 <xPortStartScheduler+0x120>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a46      	ldr	r2, [pc, #280]	; (800de54 <xPortStartScheduler+0x124>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d10a      	bne.n	800dd56 <xPortStartScheduler+0x26>
	__asm volatile
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	613b      	str	r3, [r7, #16]
}
 800dd52:	bf00      	nop
 800dd54:	e7fe      	b.n	800dd54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd56:	4b3e      	ldr	r3, [pc, #248]	; (800de50 <xPortStartScheduler+0x120>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a3f      	ldr	r2, [pc, #252]	; (800de58 <xPortStartScheduler+0x128>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d10a      	bne.n	800dd76 <xPortStartScheduler+0x46>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	60fb      	str	r3, [r7, #12]
}
 800dd72:	bf00      	nop
 800dd74:	e7fe      	b.n	800dd74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd76:	4b39      	ldr	r3, [pc, #228]	; (800de5c <xPortStartScheduler+0x12c>)
 800dd78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	22ff      	movs	r2, #255	; 0xff
 800dd86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd90:	78fb      	ldrb	r3, [r7, #3]
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	4b31      	ldr	r3, [pc, #196]	; (800de60 <xPortStartScheduler+0x130>)
 800dd9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd9e:	4b31      	ldr	r3, [pc, #196]	; (800de64 <xPortStartScheduler+0x134>)
 800dda0:	2207      	movs	r2, #7
 800dda2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dda4:	e009      	b.n	800ddba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dda6:	4b2f      	ldr	r3, [pc, #188]	; (800de64 <xPortStartScheduler+0x134>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	4a2d      	ldr	r2, [pc, #180]	; (800de64 <xPortStartScheduler+0x134>)
 800ddae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ddb0:	78fb      	ldrb	r3, [r7, #3]
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddba:	78fb      	ldrb	r3, [r7, #3]
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddc2:	2b80      	cmp	r3, #128	; 0x80
 800ddc4:	d0ef      	beq.n	800dda6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ddc6:	4b27      	ldr	r3, [pc, #156]	; (800de64 <xPortStartScheduler+0x134>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f1c3 0307 	rsb	r3, r3, #7
 800ddce:	2b04      	cmp	r3, #4
 800ddd0:	d00a      	beq.n	800dde8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ddd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd6:	f383 8811 	msr	BASEPRI, r3
 800ddda:	f3bf 8f6f 	isb	sy
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	60bb      	str	r3, [r7, #8]
}
 800dde4:	bf00      	nop
 800dde6:	e7fe      	b.n	800dde6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dde8:	4b1e      	ldr	r3, [pc, #120]	; (800de64 <xPortStartScheduler+0x134>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	021b      	lsls	r3, r3, #8
 800ddee:	4a1d      	ldr	r2, [pc, #116]	; (800de64 <xPortStartScheduler+0x134>)
 800ddf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ddf2:	4b1c      	ldr	r3, [pc, #112]	; (800de64 <xPortStartScheduler+0x134>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ddfa:	4a1a      	ldr	r2, [pc, #104]	; (800de64 <xPortStartScheduler+0x134>)
 800ddfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	b2da      	uxtb	r2, r3
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de06:	4b18      	ldr	r3, [pc, #96]	; (800de68 <xPortStartScheduler+0x138>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a17      	ldr	r2, [pc, #92]	; (800de68 <xPortStartScheduler+0x138>)
 800de0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de12:	4b15      	ldr	r3, [pc, #84]	; (800de68 <xPortStartScheduler+0x138>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a14      	ldr	r2, [pc, #80]	; (800de68 <xPortStartScheduler+0x138>)
 800de18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de1e:	f000 f8dd 	bl	800dfdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de22:	4b12      	ldr	r3, [pc, #72]	; (800de6c <xPortStartScheduler+0x13c>)
 800de24:	2200      	movs	r2, #0
 800de26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de28:	f000 f8fc 	bl	800e024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de2c:	4b10      	ldr	r3, [pc, #64]	; (800de70 <xPortStartScheduler+0x140>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a0f      	ldr	r2, [pc, #60]	; (800de70 <xPortStartScheduler+0x140>)
 800de32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de38:	f7ff ff66 	bl	800dd08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de3c:	f7ff fa86 	bl	800d34c <vTaskSwitchContext>
	prvTaskExitError();
 800de40:	f7ff ff20 	bl	800dc84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3718      	adds	r7, #24
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	e000ed00 	.word	0xe000ed00
 800de54:	410fc271 	.word	0x410fc271
 800de58:	410fc270 	.word	0x410fc270
 800de5c:	e000e400 	.word	0xe000e400
 800de60:	20006298 	.word	0x20006298
 800de64:	2000629c 	.word	0x2000629c
 800de68:	e000ed20 	.word	0xe000ed20
 800de6c:	20000044 	.word	0x20000044
 800de70:	e000ef34 	.word	0xe000ef34

0800de74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
	__asm volatile
 800de7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7e:	f383 8811 	msr	BASEPRI, r3
 800de82:	f3bf 8f6f 	isb	sy
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	607b      	str	r3, [r7, #4]
}
 800de8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de8e:	4b0f      	ldr	r3, [pc, #60]	; (800decc <vPortEnterCritical+0x58>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	4a0d      	ldr	r2, [pc, #52]	; (800decc <vPortEnterCritical+0x58>)
 800de96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de98:	4b0c      	ldr	r3, [pc, #48]	; (800decc <vPortEnterCritical+0x58>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d10f      	bne.n	800dec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dea0:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <vPortEnterCritical+0x5c>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00a      	beq.n	800dec0 <vPortEnterCritical+0x4c>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	603b      	str	r3, [r7, #0]
}
 800debc:	bf00      	nop
 800debe:	e7fe      	b.n	800debe <vPortEnterCritical+0x4a>
	}
}
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	20000044 	.word	0x20000044
 800ded0:	e000ed04 	.word	0xe000ed04

0800ded4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800deda:	4b12      	ldr	r3, [pc, #72]	; (800df24 <vPortExitCritical+0x50>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d10a      	bne.n	800def8 <vPortExitCritical+0x24>
	__asm volatile
 800dee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee6:	f383 8811 	msr	BASEPRI, r3
 800deea:	f3bf 8f6f 	isb	sy
 800deee:	f3bf 8f4f 	dsb	sy
 800def2:	607b      	str	r3, [r7, #4]
}
 800def4:	bf00      	nop
 800def6:	e7fe      	b.n	800def6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800def8:	4b0a      	ldr	r3, [pc, #40]	; (800df24 <vPortExitCritical+0x50>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	3b01      	subs	r3, #1
 800defe:	4a09      	ldr	r2, [pc, #36]	; (800df24 <vPortExitCritical+0x50>)
 800df00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df02:	4b08      	ldr	r3, [pc, #32]	; (800df24 <vPortExitCritical+0x50>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d105      	bne.n	800df16 <vPortExitCritical+0x42>
 800df0a:	2300      	movs	r3, #0
 800df0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	f383 8811 	msr	BASEPRI, r3
}
 800df14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df16:	bf00      	nop
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	20000044 	.word	0x20000044
	...

0800df30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df30:	f3ef 8009 	mrs	r0, PSP
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	4b15      	ldr	r3, [pc, #84]	; (800df90 <pxCurrentTCBConst>)
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	f01e 0f10 	tst.w	lr, #16
 800df40:	bf08      	it	eq
 800df42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4a:	6010      	str	r0, [r2, #0]
 800df4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df54:	f380 8811 	msr	BASEPRI, r0
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f7ff f9f4 	bl	800d34c <vTaskSwitchContext>
 800df64:	f04f 0000 	mov.w	r0, #0
 800df68:	f380 8811 	msr	BASEPRI, r0
 800df6c:	bc09      	pop	{r0, r3}
 800df6e:	6819      	ldr	r1, [r3, #0]
 800df70:	6808      	ldr	r0, [r1, #0]
 800df72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df76:	f01e 0f10 	tst.w	lr, #16
 800df7a:	bf08      	it	eq
 800df7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df80:	f380 8809 	msr	PSP, r0
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	f3af 8000 	nop.w

0800df90 <pxCurrentTCBConst>:
 800df90:	2000616c 	.word	0x2000616c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df94:	bf00      	nop
 800df96:	bf00      	nop

0800df98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	607b      	str	r3, [r7, #4]
}
 800dfb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dfb2:	f7ff f913 	bl	800d1dc <xTaskIncrementTick>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d003      	beq.n	800dfc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfbc:	4b06      	ldr	r3, [pc, #24]	; (800dfd8 <SysTick_Handler+0x40>)
 800dfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	f383 8811 	msr	BASEPRI, r3
}
 800dfce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dfd0:	bf00      	nop
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	e000ed04 	.word	0xe000ed04

0800dfdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dfdc:	b480      	push	{r7}
 800dfde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dfe0:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <vPortSetupTimerInterrupt+0x34>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dfe6:	4b0b      	ldr	r3, [pc, #44]	; (800e014 <vPortSetupTimerInterrupt+0x38>)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dfec:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <vPortSetupTimerInterrupt+0x3c>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a0a      	ldr	r2, [pc, #40]	; (800e01c <vPortSetupTimerInterrupt+0x40>)
 800dff2:	fba2 2303 	umull	r2, r3, r2, r3
 800dff6:	099b      	lsrs	r3, r3, #6
 800dff8:	4a09      	ldr	r2, [pc, #36]	; (800e020 <vPortSetupTimerInterrupt+0x44>)
 800dffa:	3b01      	subs	r3, #1
 800dffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dffe:	4b04      	ldr	r3, [pc, #16]	; (800e010 <vPortSetupTimerInterrupt+0x34>)
 800e000:	2207      	movs	r2, #7
 800e002:	601a      	str	r2, [r3, #0]
}
 800e004:	bf00      	nop
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	e000e010 	.word	0xe000e010
 800e014:	e000e018 	.word	0xe000e018
 800e018:	20000014 	.word	0x20000014
 800e01c:	10624dd3 	.word	0x10624dd3
 800e020:	e000e014 	.word	0xe000e014

0800e024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e034 <vPortEnableVFP+0x10>
 800e028:	6801      	ldr	r1, [r0, #0]
 800e02a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e02e:	6001      	str	r1, [r0, #0]
 800e030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e032:	bf00      	nop
 800e034:	e000ed88 	.word	0xe000ed88

0800e038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e03e:	f3ef 8305 	mrs	r3, IPSR
 800e042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2b0f      	cmp	r3, #15
 800e048:	d914      	bls.n	800e074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e04a:	4a17      	ldr	r2, [pc, #92]	; (800e0a8 <vPortValidateInterruptPriority+0x70>)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	4413      	add	r3, r2
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e054:	4b15      	ldr	r3, [pc, #84]	; (800e0ac <vPortValidateInterruptPriority+0x74>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	7afa      	ldrb	r2, [r7, #11]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d20a      	bcs.n	800e074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	607b      	str	r3, [r7, #4]
}
 800e070:	bf00      	nop
 800e072:	e7fe      	b.n	800e072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e074:	4b0e      	ldr	r3, [pc, #56]	; (800e0b0 <vPortValidateInterruptPriority+0x78>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e07c:	4b0d      	ldr	r3, [pc, #52]	; (800e0b4 <vPortValidateInterruptPriority+0x7c>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	429a      	cmp	r2, r3
 800e082:	d90a      	bls.n	800e09a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	603b      	str	r3, [r7, #0]
}
 800e096:	bf00      	nop
 800e098:	e7fe      	b.n	800e098 <vPortValidateInterruptPriority+0x60>
	}
 800e09a:	bf00      	nop
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	e000e3f0 	.word	0xe000e3f0
 800e0ac:	20006298 	.word	0x20006298
 800e0b0:	e000ed0c 	.word	0xe000ed0c
 800e0b4:	2000629c 	.word	0x2000629c

0800e0b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08a      	sub	sp, #40	; 0x28
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e0c4:	f7fe ffbe 	bl	800d044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e0c8:	4b5b      	ldr	r3, [pc, #364]	; (800e238 <pvPortMalloc+0x180>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d101      	bne.n	800e0d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e0d0:	f000 f920 	bl	800e314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e0d4:	4b59      	ldr	r3, [pc, #356]	; (800e23c <pvPortMalloc+0x184>)
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4013      	ands	r3, r2
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f040 8093 	bne.w	800e208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d01d      	beq.n	800e124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e0e8:	2208      	movs	r2, #8
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f003 0307 	and.w	r3, r3, #7
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d014      	beq.n	800e124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f023 0307 	bic.w	r3, r3, #7
 800e100:	3308      	adds	r3, #8
 800e102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f003 0307 	and.w	r3, r3, #7
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00a      	beq.n	800e124 <pvPortMalloc+0x6c>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	617b      	str	r3, [r7, #20]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d06e      	beq.n	800e208 <pvPortMalloc+0x150>
 800e12a:	4b45      	ldr	r3, [pc, #276]	; (800e240 <pvPortMalloc+0x188>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	429a      	cmp	r2, r3
 800e132:	d869      	bhi.n	800e208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e134:	4b43      	ldr	r3, [pc, #268]	; (800e244 <pvPortMalloc+0x18c>)
 800e136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e138:	4b42      	ldr	r3, [pc, #264]	; (800e244 <pvPortMalloc+0x18c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e13e:	e004      	b.n	800e14a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	429a      	cmp	r2, r3
 800e152:	d903      	bls.n	800e15c <pvPortMalloc+0xa4>
 800e154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1f1      	bne.n	800e140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e15c:	4b36      	ldr	r3, [pc, #216]	; (800e238 <pvPortMalloc+0x180>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e162:	429a      	cmp	r2, r3
 800e164:	d050      	beq.n	800e208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e166:	6a3b      	ldr	r3, [r7, #32]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2208      	movs	r2, #8
 800e16c:	4413      	add	r3, r2
 800e16e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	6a3b      	ldr	r3, [r7, #32]
 800e176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	1ad2      	subs	r2, r2, r3
 800e180:	2308      	movs	r3, #8
 800e182:	005b      	lsls	r3, r3, #1
 800e184:	429a      	cmp	r2, r3
 800e186:	d91f      	bls.n	800e1c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4413      	add	r3, r2
 800e18e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	f003 0307 	and.w	r3, r3, #7
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00a      	beq.n	800e1b0 <pvPortMalloc+0xf8>
	__asm volatile
 800e19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
 800e1aa:	613b      	str	r3, [r7, #16]
}
 800e1ac:	bf00      	nop
 800e1ae:	e7fe      	b.n	800e1ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	685a      	ldr	r2, [r3, #4]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	1ad2      	subs	r2, r2, r3
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e1c2:	69b8      	ldr	r0, [r7, #24]
 800e1c4:	f000 f908 	bl	800e3d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e1c8:	4b1d      	ldr	r3, [pc, #116]	; (800e240 <pvPortMalloc+0x188>)
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	4a1b      	ldr	r2, [pc, #108]	; (800e240 <pvPortMalloc+0x188>)
 800e1d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e1d6:	4b1a      	ldr	r3, [pc, #104]	; (800e240 <pvPortMalloc+0x188>)
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	4b1b      	ldr	r3, [pc, #108]	; (800e248 <pvPortMalloc+0x190>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d203      	bcs.n	800e1ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e1e2:	4b17      	ldr	r3, [pc, #92]	; (800e240 <pvPortMalloc+0x188>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a18      	ldr	r2, [pc, #96]	; (800e248 <pvPortMalloc+0x190>)
 800e1e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ec:	685a      	ldr	r2, [r3, #4]
 800e1ee:	4b13      	ldr	r3, [pc, #76]	; (800e23c <pvPortMalloc+0x184>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e1fe:	4b13      	ldr	r3, [pc, #76]	; (800e24c <pvPortMalloc+0x194>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3301      	adds	r3, #1
 800e204:	4a11      	ldr	r2, [pc, #68]	; (800e24c <pvPortMalloc+0x194>)
 800e206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e208:	f7fe ff2a 	bl	800d060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	f003 0307 	and.w	r3, r3, #7
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00a      	beq.n	800e22c <pvPortMalloc+0x174>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	60fb      	str	r3, [r7, #12]
}
 800e228:	bf00      	nop
 800e22a:	e7fe      	b.n	800e22a <pvPortMalloc+0x172>
	return pvReturn;
 800e22c:	69fb      	ldr	r3, [r7, #28]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3728      	adds	r7, #40	; 0x28
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	20009ea8 	.word	0x20009ea8
 800e23c:	20009ebc 	.word	0x20009ebc
 800e240:	20009eac 	.word	0x20009eac
 800e244:	20009ea0 	.word	0x20009ea0
 800e248:	20009eb0 	.word	0x20009eb0
 800e24c:	20009eb4 	.word	0x20009eb4

0800e250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b086      	sub	sp, #24
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d04d      	beq.n	800e2fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e262:	2308      	movs	r3, #8
 800e264:	425b      	negs	r3, r3
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	4413      	add	r3, r2
 800e26a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	685a      	ldr	r2, [r3, #4]
 800e274:	4b24      	ldr	r3, [pc, #144]	; (800e308 <vPortFree+0xb8>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4013      	ands	r3, r2
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10a      	bne.n	800e294 <vPortFree+0x44>
	__asm volatile
 800e27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	60fb      	str	r3, [r7, #12]
}
 800e290:	bf00      	nop
 800e292:	e7fe      	b.n	800e292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00a      	beq.n	800e2b2 <vPortFree+0x62>
	__asm volatile
 800e29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a0:	f383 8811 	msr	BASEPRI, r3
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	60bb      	str	r3, [r7, #8]
}
 800e2ae:	bf00      	nop
 800e2b0:	e7fe      	b.n	800e2b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	4b14      	ldr	r3, [pc, #80]	; (800e308 <vPortFree+0xb8>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d01e      	beq.n	800e2fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d11a      	bne.n	800e2fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	685a      	ldr	r2, [r3, #4]
 800e2cc:	4b0e      	ldr	r3, [pc, #56]	; (800e308 <vPortFree+0xb8>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	43db      	mvns	r3, r3
 800e2d2:	401a      	ands	r2, r3
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e2d8:	f7fe feb4 	bl	800d044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	685a      	ldr	r2, [r3, #4]
 800e2e0:	4b0a      	ldr	r3, [pc, #40]	; (800e30c <vPortFree+0xbc>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	4a09      	ldr	r2, [pc, #36]	; (800e30c <vPortFree+0xbc>)
 800e2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e2ea:	6938      	ldr	r0, [r7, #16]
 800e2ec:	f000 f874 	bl	800e3d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e2f0:	4b07      	ldr	r3, [pc, #28]	; (800e310 <vPortFree+0xc0>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	4a06      	ldr	r2, [pc, #24]	; (800e310 <vPortFree+0xc0>)
 800e2f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e2fa:	f7fe feb1 	bl	800d060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e2fe:	bf00      	nop
 800e300:	3718      	adds	r7, #24
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	20009ebc 	.word	0x20009ebc
 800e30c:	20009eac 	.word	0x20009eac
 800e310:	20009eb8 	.word	0x20009eb8

0800e314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e31a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e31e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e320:	4b27      	ldr	r3, [pc, #156]	; (800e3c0 <prvHeapInit+0xac>)
 800e322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f003 0307 	and.w	r3, r3, #7
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d00c      	beq.n	800e348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	3307      	adds	r3, #7
 800e332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f023 0307 	bic.w	r3, r3, #7
 800e33a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	4a1f      	ldr	r2, [pc, #124]	; (800e3c0 <prvHeapInit+0xac>)
 800e344:	4413      	add	r3, r2
 800e346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e34c:	4a1d      	ldr	r2, [pc, #116]	; (800e3c4 <prvHeapInit+0xb0>)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e352:	4b1c      	ldr	r3, [pc, #112]	; (800e3c4 <prvHeapInit+0xb0>)
 800e354:	2200      	movs	r2, #0
 800e356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	4413      	add	r3, r2
 800e35e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e360:	2208      	movs	r2, #8
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	1a9b      	subs	r3, r3, r2
 800e366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f023 0307 	bic.w	r3, r3, #7
 800e36e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	4a15      	ldr	r2, [pc, #84]	; (800e3c8 <prvHeapInit+0xb4>)
 800e374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e376:	4b14      	ldr	r3, [pc, #80]	; (800e3c8 <prvHeapInit+0xb4>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2200      	movs	r2, #0
 800e37c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e37e:	4b12      	ldr	r3, [pc, #72]	; (800e3c8 <prvHeapInit+0xb4>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2200      	movs	r2, #0
 800e384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	1ad2      	subs	r2, r2, r3
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e394:	4b0c      	ldr	r3, [pc, #48]	; (800e3c8 <prvHeapInit+0xb4>)
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	4a0a      	ldr	r2, [pc, #40]	; (800e3cc <prvHeapInit+0xb8>)
 800e3a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	4a09      	ldr	r2, [pc, #36]	; (800e3d0 <prvHeapInit+0xbc>)
 800e3aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e3ac:	4b09      	ldr	r3, [pc, #36]	; (800e3d4 <prvHeapInit+0xc0>)
 800e3ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3b2:	601a      	str	r2, [r3, #0]
}
 800e3b4:	bf00      	nop
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr
 800e3c0:	200062a0 	.word	0x200062a0
 800e3c4:	20009ea0 	.word	0x20009ea0
 800e3c8:	20009ea8 	.word	0x20009ea8
 800e3cc:	20009eb0 	.word	0x20009eb0
 800e3d0:	20009eac 	.word	0x20009eac
 800e3d4:	20009ebc 	.word	0x20009ebc

0800e3d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e3e0:	4b28      	ldr	r3, [pc, #160]	; (800e484 <prvInsertBlockIntoFreeList+0xac>)
 800e3e2:	60fb      	str	r3, [r7, #12]
 800e3e4:	e002      	b.n	800e3ec <prvInsertBlockIntoFreeList+0x14>
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d8f7      	bhi.n	800e3e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	4413      	add	r3, r2
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	429a      	cmp	r2, r3
 800e406:	d108      	bne.n	800e41a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	685a      	ldr	r2, [r3, #4]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	441a      	add	r2, r3
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	441a      	add	r2, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d118      	bne.n	800e460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	4b15      	ldr	r3, [pc, #84]	; (800e488 <prvInsertBlockIntoFreeList+0xb0>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	429a      	cmp	r2, r3
 800e438:	d00d      	beq.n	800e456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	685a      	ldr	r2, [r3, #4]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	441a      	add	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	e008      	b.n	800e468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e456:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <prvInsertBlockIntoFreeList+0xb0>)
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	601a      	str	r2, [r3, #0]
 800e45e:	e003      	b.n	800e468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d002      	beq.n	800e476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e476:	bf00      	nop
 800e478:	3714      	adds	r7, #20
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop
 800e484:	20009ea0 	.word	0x20009ea0
 800e488:	20009ea8 	.word	0x20009ea8

0800e48c <__cvt>:
 800e48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e490:	ec55 4b10 	vmov	r4, r5, d0
 800e494:	2d00      	cmp	r5, #0
 800e496:	460e      	mov	r6, r1
 800e498:	4619      	mov	r1, r3
 800e49a:	462b      	mov	r3, r5
 800e49c:	bfbb      	ittet	lt
 800e49e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e4a2:	461d      	movlt	r5, r3
 800e4a4:	2300      	movge	r3, #0
 800e4a6:	232d      	movlt	r3, #45	; 0x2d
 800e4a8:	700b      	strb	r3, [r1, #0]
 800e4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e4b0:	4691      	mov	r9, r2
 800e4b2:	f023 0820 	bic.w	r8, r3, #32
 800e4b6:	bfbc      	itt	lt
 800e4b8:	4622      	movlt	r2, r4
 800e4ba:	4614      	movlt	r4, r2
 800e4bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4c0:	d005      	beq.n	800e4ce <__cvt+0x42>
 800e4c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e4c6:	d100      	bne.n	800e4ca <__cvt+0x3e>
 800e4c8:	3601      	adds	r6, #1
 800e4ca:	2102      	movs	r1, #2
 800e4cc:	e000      	b.n	800e4d0 <__cvt+0x44>
 800e4ce:	2103      	movs	r1, #3
 800e4d0:	ab03      	add	r3, sp, #12
 800e4d2:	9301      	str	r3, [sp, #4]
 800e4d4:	ab02      	add	r3, sp, #8
 800e4d6:	9300      	str	r3, [sp, #0]
 800e4d8:	ec45 4b10 	vmov	d0, r4, r5
 800e4dc:	4653      	mov	r3, sl
 800e4de:	4632      	mov	r2, r6
 800e4e0:	f000 ffbe 	bl	800f460 <_dtoa_r>
 800e4e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	d102      	bne.n	800e4f2 <__cvt+0x66>
 800e4ec:	f019 0f01 	tst.w	r9, #1
 800e4f0:	d022      	beq.n	800e538 <__cvt+0xac>
 800e4f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4f6:	eb07 0906 	add.w	r9, r7, r6
 800e4fa:	d110      	bne.n	800e51e <__cvt+0x92>
 800e4fc:	783b      	ldrb	r3, [r7, #0]
 800e4fe:	2b30      	cmp	r3, #48	; 0x30
 800e500:	d10a      	bne.n	800e518 <__cvt+0x8c>
 800e502:	2200      	movs	r2, #0
 800e504:	2300      	movs	r3, #0
 800e506:	4620      	mov	r0, r4
 800e508:	4629      	mov	r1, r5
 800e50a:	f7f2 fb0d 	bl	8000b28 <__aeabi_dcmpeq>
 800e50e:	b918      	cbnz	r0, 800e518 <__cvt+0x8c>
 800e510:	f1c6 0601 	rsb	r6, r6, #1
 800e514:	f8ca 6000 	str.w	r6, [sl]
 800e518:	f8da 3000 	ldr.w	r3, [sl]
 800e51c:	4499      	add	r9, r3
 800e51e:	2200      	movs	r2, #0
 800e520:	2300      	movs	r3, #0
 800e522:	4620      	mov	r0, r4
 800e524:	4629      	mov	r1, r5
 800e526:	f7f2 faff 	bl	8000b28 <__aeabi_dcmpeq>
 800e52a:	b108      	cbz	r0, 800e530 <__cvt+0xa4>
 800e52c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e530:	2230      	movs	r2, #48	; 0x30
 800e532:	9b03      	ldr	r3, [sp, #12]
 800e534:	454b      	cmp	r3, r9
 800e536:	d307      	bcc.n	800e548 <__cvt+0xbc>
 800e538:	9b03      	ldr	r3, [sp, #12]
 800e53a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e53c:	1bdb      	subs	r3, r3, r7
 800e53e:	4638      	mov	r0, r7
 800e540:	6013      	str	r3, [r2, #0]
 800e542:	b004      	add	sp, #16
 800e544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e548:	1c59      	adds	r1, r3, #1
 800e54a:	9103      	str	r1, [sp, #12]
 800e54c:	701a      	strb	r2, [r3, #0]
 800e54e:	e7f0      	b.n	800e532 <__cvt+0xa6>

0800e550 <__exponent>:
 800e550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e552:	4603      	mov	r3, r0
 800e554:	2900      	cmp	r1, #0
 800e556:	bfb8      	it	lt
 800e558:	4249      	neglt	r1, r1
 800e55a:	f803 2b02 	strb.w	r2, [r3], #2
 800e55e:	bfb4      	ite	lt
 800e560:	222d      	movlt	r2, #45	; 0x2d
 800e562:	222b      	movge	r2, #43	; 0x2b
 800e564:	2909      	cmp	r1, #9
 800e566:	7042      	strb	r2, [r0, #1]
 800e568:	dd2a      	ble.n	800e5c0 <__exponent+0x70>
 800e56a:	f10d 0207 	add.w	r2, sp, #7
 800e56e:	4617      	mov	r7, r2
 800e570:	260a      	movs	r6, #10
 800e572:	4694      	mov	ip, r2
 800e574:	fb91 f5f6 	sdiv	r5, r1, r6
 800e578:	fb06 1415 	mls	r4, r6, r5, r1
 800e57c:	3430      	adds	r4, #48	; 0x30
 800e57e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e582:	460c      	mov	r4, r1
 800e584:	2c63      	cmp	r4, #99	; 0x63
 800e586:	f102 32ff 	add.w	r2, r2, #4294967295
 800e58a:	4629      	mov	r1, r5
 800e58c:	dcf1      	bgt.n	800e572 <__exponent+0x22>
 800e58e:	3130      	adds	r1, #48	; 0x30
 800e590:	f1ac 0402 	sub.w	r4, ip, #2
 800e594:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e598:	1c41      	adds	r1, r0, #1
 800e59a:	4622      	mov	r2, r4
 800e59c:	42ba      	cmp	r2, r7
 800e59e:	d30a      	bcc.n	800e5b6 <__exponent+0x66>
 800e5a0:	f10d 0209 	add.w	r2, sp, #9
 800e5a4:	eba2 020c 	sub.w	r2, r2, ip
 800e5a8:	42bc      	cmp	r4, r7
 800e5aa:	bf88      	it	hi
 800e5ac:	2200      	movhi	r2, #0
 800e5ae:	4413      	add	r3, r2
 800e5b0:	1a18      	subs	r0, r3, r0
 800e5b2:	b003      	add	sp, #12
 800e5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e5ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e5be:	e7ed      	b.n	800e59c <__exponent+0x4c>
 800e5c0:	2330      	movs	r3, #48	; 0x30
 800e5c2:	3130      	adds	r1, #48	; 0x30
 800e5c4:	7083      	strb	r3, [r0, #2]
 800e5c6:	70c1      	strb	r1, [r0, #3]
 800e5c8:	1d03      	adds	r3, r0, #4
 800e5ca:	e7f1      	b.n	800e5b0 <__exponent+0x60>

0800e5cc <_printf_float>:
 800e5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d0:	ed2d 8b02 	vpush	{d8}
 800e5d4:	b08d      	sub	sp, #52	; 0x34
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e5dc:	4616      	mov	r6, r2
 800e5de:	461f      	mov	r7, r3
 800e5e0:	4605      	mov	r5, r0
 800e5e2:	f000 fdd9 	bl	800f198 <_localeconv_r>
 800e5e6:	f8d0 a000 	ldr.w	sl, [r0]
 800e5ea:	4650      	mov	r0, sl
 800e5ec:	f7f1 fe70 	bl	80002d0 <strlen>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800e5f4:	6823      	ldr	r3, [r4, #0]
 800e5f6:	9305      	str	r3, [sp, #20]
 800e5f8:	f8d8 3000 	ldr.w	r3, [r8]
 800e5fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e600:	3307      	adds	r3, #7
 800e602:	f023 0307 	bic.w	r3, r3, #7
 800e606:	f103 0208 	add.w	r2, r3, #8
 800e60a:	f8c8 2000 	str.w	r2, [r8]
 800e60e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e612:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e616:	9307      	str	r3, [sp, #28]
 800e618:	f8cd 8018 	str.w	r8, [sp, #24]
 800e61c:	ee08 0a10 	vmov	s16, r0
 800e620:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e628:	4b9e      	ldr	r3, [pc, #632]	; (800e8a4 <_printf_float+0x2d8>)
 800e62a:	f04f 32ff 	mov.w	r2, #4294967295
 800e62e:	f7f2 faad 	bl	8000b8c <__aeabi_dcmpun>
 800e632:	bb88      	cbnz	r0, 800e698 <_printf_float+0xcc>
 800e634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e638:	4b9a      	ldr	r3, [pc, #616]	; (800e8a4 <_printf_float+0x2d8>)
 800e63a:	f04f 32ff 	mov.w	r2, #4294967295
 800e63e:	f7f2 fa87 	bl	8000b50 <__aeabi_dcmple>
 800e642:	bb48      	cbnz	r0, 800e698 <_printf_float+0xcc>
 800e644:	2200      	movs	r2, #0
 800e646:	2300      	movs	r3, #0
 800e648:	4640      	mov	r0, r8
 800e64a:	4649      	mov	r1, r9
 800e64c:	f7f2 fa76 	bl	8000b3c <__aeabi_dcmplt>
 800e650:	b110      	cbz	r0, 800e658 <_printf_float+0x8c>
 800e652:	232d      	movs	r3, #45	; 0x2d
 800e654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e658:	4a93      	ldr	r2, [pc, #588]	; (800e8a8 <_printf_float+0x2dc>)
 800e65a:	4b94      	ldr	r3, [pc, #592]	; (800e8ac <_printf_float+0x2e0>)
 800e65c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e660:	bf94      	ite	ls
 800e662:	4690      	movls	r8, r2
 800e664:	4698      	movhi	r8, r3
 800e666:	2303      	movs	r3, #3
 800e668:	6123      	str	r3, [r4, #16]
 800e66a:	9b05      	ldr	r3, [sp, #20]
 800e66c:	f023 0304 	bic.w	r3, r3, #4
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	f04f 0900 	mov.w	r9, #0
 800e676:	9700      	str	r7, [sp, #0]
 800e678:	4633      	mov	r3, r6
 800e67a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e67c:	4621      	mov	r1, r4
 800e67e:	4628      	mov	r0, r5
 800e680:	f000 f9da 	bl	800ea38 <_printf_common>
 800e684:	3001      	adds	r0, #1
 800e686:	f040 8090 	bne.w	800e7aa <_printf_float+0x1de>
 800e68a:	f04f 30ff 	mov.w	r0, #4294967295
 800e68e:	b00d      	add	sp, #52	; 0x34
 800e690:	ecbd 8b02 	vpop	{d8}
 800e694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e698:	4642      	mov	r2, r8
 800e69a:	464b      	mov	r3, r9
 800e69c:	4640      	mov	r0, r8
 800e69e:	4649      	mov	r1, r9
 800e6a0:	f7f2 fa74 	bl	8000b8c <__aeabi_dcmpun>
 800e6a4:	b140      	cbz	r0, 800e6b8 <_printf_float+0xec>
 800e6a6:	464b      	mov	r3, r9
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	bfbc      	itt	lt
 800e6ac:	232d      	movlt	r3, #45	; 0x2d
 800e6ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e6b2:	4a7f      	ldr	r2, [pc, #508]	; (800e8b0 <_printf_float+0x2e4>)
 800e6b4:	4b7f      	ldr	r3, [pc, #508]	; (800e8b4 <_printf_float+0x2e8>)
 800e6b6:	e7d1      	b.n	800e65c <_printf_float+0x90>
 800e6b8:	6863      	ldr	r3, [r4, #4]
 800e6ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e6be:	9206      	str	r2, [sp, #24]
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	d13f      	bne.n	800e744 <_printf_float+0x178>
 800e6c4:	2306      	movs	r3, #6
 800e6c6:	6063      	str	r3, [r4, #4]
 800e6c8:	9b05      	ldr	r3, [sp, #20]
 800e6ca:	6861      	ldr	r1, [r4, #4]
 800e6cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	9303      	str	r3, [sp, #12]
 800e6d4:	ab0a      	add	r3, sp, #40	; 0x28
 800e6d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e6da:	ab09      	add	r3, sp, #36	; 0x24
 800e6dc:	ec49 8b10 	vmov	d0, r8, r9
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	6022      	str	r2, [r4, #0]
 800e6e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f7ff fecf 	bl	800e48c <__cvt>
 800e6ee:	9b06      	ldr	r3, [sp, #24]
 800e6f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6f2:	2b47      	cmp	r3, #71	; 0x47
 800e6f4:	4680      	mov	r8, r0
 800e6f6:	d108      	bne.n	800e70a <_printf_float+0x13e>
 800e6f8:	1cc8      	adds	r0, r1, #3
 800e6fa:	db02      	blt.n	800e702 <_printf_float+0x136>
 800e6fc:	6863      	ldr	r3, [r4, #4]
 800e6fe:	4299      	cmp	r1, r3
 800e700:	dd41      	ble.n	800e786 <_printf_float+0x1ba>
 800e702:	f1ab 0302 	sub.w	r3, fp, #2
 800e706:	fa5f fb83 	uxtb.w	fp, r3
 800e70a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e70e:	d820      	bhi.n	800e752 <_printf_float+0x186>
 800e710:	3901      	subs	r1, #1
 800e712:	465a      	mov	r2, fp
 800e714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e718:	9109      	str	r1, [sp, #36]	; 0x24
 800e71a:	f7ff ff19 	bl	800e550 <__exponent>
 800e71e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e720:	1813      	adds	r3, r2, r0
 800e722:	2a01      	cmp	r2, #1
 800e724:	4681      	mov	r9, r0
 800e726:	6123      	str	r3, [r4, #16]
 800e728:	dc02      	bgt.n	800e730 <_printf_float+0x164>
 800e72a:	6822      	ldr	r2, [r4, #0]
 800e72c:	07d2      	lsls	r2, r2, #31
 800e72e:	d501      	bpl.n	800e734 <_printf_float+0x168>
 800e730:	3301      	adds	r3, #1
 800e732:	6123      	str	r3, [r4, #16]
 800e734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d09c      	beq.n	800e676 <_printf_float+0xaa>
 800e73c:	232d      	movs	r3, #45	; 0x2d
 800e73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e742:	e798      	b.n	800e676 <_printf_float+0xaa>
 800e744:	9a06      	ldr	r2, [sp, #24]
 800e746:	2a47      	cmp	r2, #71	; 0x47
 800e748:	d1be      	bne.n	800e6c8 <_printf_float+0xfc>
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1bc      	bne.n	800e6c8 <_printf_float+0xfc>
 800e74e:	2301      	movs	r3, #1
 800e750:	e7b9      	b.n	800e6c6 <_printf_float+0xfa>
 800e752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e756:	d118      	bne.n	800e78a <_printf_float+0x1be>
 800e758:	2900      	cmp	r1, #0
 800e75a:	6863      	ldr	r3, [r4, #4]
 800e75c:	dd0b      	ble.n	800e776 <_printf_float+0x1aa>
 800e75e:	6121      	str	r1, [r4, #16]
 800e760:	b913      	cbnz	r3, 800e768 <_printf_float+0x19c>
 800e762:	6822      	ldr	r2, [r4, #0]
 800e764:	07d0      	lsls	r0, r2, #31
 800e766:	d502      	bpl.n	800e76e <_printf_float+0x1a2>
 800e768:	3301      	adds	r3, #1
 800e76a:	440b      	add	r3, r1
 800e76c:	6123      	str	r3, [r4, #16]
 800e76e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e770:	f04f 0900 	mov.w	r9, #0
 800e774:	e7de      	b.n	800e734 <_printf_float+0x168>
 800e776:	b913      	cbnz	r3, 800e77e <_printf_float+0x1b2>
 800e778:	6822      	ldr	r2, [r4, #0]
 800e77a:	07d2      	lsls	r2, r2, #31
 800e77c:	d501      	bpl.n	800e782 <_printf_float+0x1b6>
 800e77e:	3302      	adds	r3, #2
 800e780:	e7f4      	b.n	800e76c <_printf_float+0x1a0>
 800e782:	2301      	movs	r3, #1
 800e784:	e7f2      	b.n	800e76c <_printf_float+0x1a0>
 800e786:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e78c:	4299      	cmp	r1, r3
 800e78e:	db05      	blt.n	800e79c <_printf_float+0x1d0>
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	6121      	str	r1, [r4, #16]
 800e794:	07d8      	lsls	r0, r3, #31
 800e796:	d5ea      	bpl.n	800e76e <_printf_float+0x1a2>
 800e798:	1c4b      	adds	r3, r1, #1
 800e79a:	e7e7      	b.n	800e76c <_printf_float+0x1a0>
 800e79c:	2900      	cmp	r1, #0
 800e79e:	bfd4      	ite	le
 800e7a0:	f1c1 0202 	rsble	r2, r1, #2
 800e7a4:	2201      	movgt	r2, #1
 800e7a6:	4413      	add	r3, r2
 800e7a8:	e7e0      	b.n	800e76c <_printf_float+0x1a0>
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	055a      	lsls	r2, r3, #21
 800e7ae:	d407      	bmi.n	800e7c0 <_printf_float+0x1f4>
 800e7b0:	6923      	ldr	r3, [r4, #16]
 800e7b2:	4642      	mov	r2, r8
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b8      	blx	r7
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	d12c      	bne.n	800e818 <_printf_float+0x24c>
 800e7be:	e764      	b.n	800e68a <_printf_float+0xbe>
 800e7c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e7c4:	f240 80e0 	bls.w	800e988 <_printf_float+0x3bc>
 800e7c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f7f2 f9aa 	bl	8000b28 <__aeabi_dcmpeq>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d034      	beq.n	800e842 <_printf_float+0x276>
 800e7d8:	4a37      	ldr	r2, [pc, #220]	; (800e8b8 <_printf_float+0x2ec>)
 800e7da:	2301      	movs	r3, #1
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4628      	mov	r0, r5
 800e7e0:	47b8      	blx	r7
 800e7e2:	3001      	adds	r0, #1
 800e7e4:	f43f af51 	beq.w	800e68a <_printf_float+0xbe>
 800e7e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	db02      	blt.n	800e7f6 <_printf_float+0x22a>
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	07d8      	lsls	r0, r3, #31
 800e7f4:	d510      	bpl.n	800e818 <_printf_float+0x24c>
 800e7f6:	ee18 3a10 	vmov	r3, s16
 800e7fa:	4652      	mov	r2, sl
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	4628      	mov	r0, r5
 800e800:	47b8      	blx	r7
 800e802:	3001      	adds	r0, #1
 800e804:	f43f af41 	beq.w	800e68a <_printf_float+0xbe>
 800e808:	f04f 0800 	mov.w	r8, #0
 800e80c:	f104 091a 	add.w	r9, r4, #26
 800e810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e812:	3b01      	subs	r3, #1
 800e814:	4543      	cmp	r3, r8
 800e816:	dc09      	bgt.n	800e82c <_printf_float+0x260>
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	079b      	lsls	r3, r3, #30
 800e81c:	f100 8107 	bmi.w	800ea2e <_printf_float+0x462>
 800e820:	68e0      	ldr	r0, [r4, #12]
 800e822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e824:	4298      	cmp	r0, r3
 800e826:	bfb8      	it	lt
 800e828:	4618      	movlt	r0, r3
 800e82a:	e730      	b.n	800e68e <_printf_float+0xc2>
 800e82c:	2301      	movs	r3, #1
 800e82e:	464a      	mov	r2, r9
 800e830:	4631      	mov	r1, r6
 800e832:	4628      	mov	r0, r5
 800e834:	47b8      	blx	r7
 800e836:	3001      	adds	r0, #1
 800e838:	f43f af27 	beq.w	800e68a <_printf_float+0xbe>
 800e83c:	f108 0801 	add.w	r8, r8, #1
 800e840:	e7e6      	b.n	800e810 <_printf_float+0x244>
 800e842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e844:	2b00      	cmp	r3, #0
 800e846:	dc39      	bgt.n	800e8bc <_printf_float+0x2f0>
 800e848:	4a1b      	ldr	r2, [pc, #108]	; (800e8b8 <_printf_float+0x2ec>)
 800e84a:	2301      	movs	r3, #1
 800e84c:	4631      	mov	r1, r6
 800e84e:	4628      	mov	r0, r5
 800e850:	47b8      	blx	r7
 800e852:	3001      	adds	r0, #1
 800e854:	f43f af19 	beq.w	800e68a <_printf_float+0xbe>
 800e858:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e85c:	4313      	orrs	r3, r2
 800e85e:	d102      	bne.n	800e866 <_printf_float+0x29a>
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	07d9      	lsls	r1, r3, #31
 800e864:	d5d8      	bpl.n	800e818 <_printf_float+0x24c>
 800e866:	ee18 3a10 	vmov	r3, s16
 800e86a:	4652      	mov	r2, sl
 800e86c:	4631      	mov	r1, r6
 800e86e:	4628      	mov	r0, r5
 800e870:	47b8      	blx	r7
 800e872:	3001      	adds	r0, #1
 800e874:	f43f af09 	beq.w	800e68a <_printf_float+0xbe>
 800e878:	f04f 0900 	mov.w	r9, #0
 800e87c:	f104 0a1a 	add.w	sl, r4, #26
 800e880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e882:	425b      	negs	r3, r3
 800e884:	454b      	cmp	r3, r9
 800e886:	dc01      	bgt.n	800e88c <_printf_float+0x2c0>
 800e888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e88a:	e792      	b.n	800e7b2 <_printf_float+0x1e6>
 800e88c:	2301      	movs	r3, #1
 800e88e:	4652      	mov	r2, sl
 800e890:	4631      	mov	r1, r6
 800e892:	4628      	mov	r0, r5
 800e894:	47b8      	blx	r7
 800e896:	3001      	adds	r0, #1
 800e898:	f43f aef7 	beq.w	800e68a <_printf_float+0xbe>
 800e89c:	f109 0901 	add.w	r9, r9, #1
 800e8a0:	e7ee      	b.n	800e880 <_printf_float+0x2b4>
 800e8a2:	bf00      	nop
 800e8a4:	7fefffff 	.word	0x7fefffff
 800e8a8:	08011adc 	.word	0x08011adc
 800e8ac:	08011ae0 	.word	0x08011ae0
 800e8b0:	08011ae4 	.word	0x08011ae4
 800e8b4:	08011ae8 	.word	0x08011ae8
 800e8b8:	08011aec 	.word	0x08011aec
 800e8bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	bfa8      	it	ge
 800e8c4:	461a      	movge	r2, r3
 800e8c6:	2a00      	cmp	r2, #0
 800e8c8:	4691      	mov	r9, r2
 800e8ca:	dc37      	bgt.n	800e93c <_printf_float+0x370>
 800e8cc:	f04f 0b00 	mov.w	fp, #0
 800e8d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8d4:	f104 021a 	add.w	r2, r4, #26
 800e8d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8da:	9305      	str	r3, [sp, #20]
 800e8dc:	eba3 0309 	sub.w	r3, r3, r9
 800e8e0:	455b      	cmp	r3, fp
 800e8e2:	dc33      	bgt.n	800e94c <_printf_float+0x380>
 800e8e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	db3b      	blt.n	800e964 <_printf_float+0x398>
 800e8ec:	6823      	ldr	r3, [r4, #0]
 800e8ee:	07da      	lsls	r2, r3, #31
 800e8f0:	d438      	bmi.n	800e964 <_printf_float+0x398>
 800e8f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e8f6:	eba2 0903 	sub.w	r9, r2, r3
 800e8fa:	9b05      	ldr	r3, [sp, #20]
 800e8fc:	1ad2      	subs	r2, r2, r3
 800e8fe:	4591      	cmp	r9, r2
 800e900:	bfa8      	it	ge
 800e902:	4691      	movge	r9, r2
 800e904:	f1b9 0f00 	cmp.w	r9, #0
 800e908:	dc35      	bgt.n	800e976 <_printf_float+0x3aa>
 800e90a:	f04f 0800 	mov.w	r8, #0
 800e90e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e912:	f104 0a1a 	add.w	sl, r4, #26
 800e916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e91a:	1a9b      	subs	r3, r3, r2
 800e91c:	eba3 0309 	sub.w	r3, r3, r9
 800e920:	4543      	cmp	r3, r8
 800e922:	f77f af79 	ble.w	800e818 <_printf_float+0x24c>
 800e926:	2301      	movs	r3, #1
 800e928:	4652      	mov	r2, sl
 800e92a:	4631      	mov	r1, r6
 800e92c:	4628      	mov	r0, r5
 800e92e:	47b8      	blx	r7
 800e930:	3001      	adds	r0, #1
 800e932:	f43f aeaa 	beq.w	800e68a <_printf_float+0xbe>
 800e936:	f108 0801 	add.w	r8, r8, #1
 800e93a:	e7ec      	b.n	800e916 <_printf_float+0x34a>
 800e93c:	4613      	mov	r3, r2
 800e93e:	4631      	mov	r1, r6
 800e940:	4642      	mov	r2, r8
 800e942:	4628      	mov	r0, r5
 800e944:	47b8      	blx	r7
 800e946:	3001      	adds	r0, #1
 800e948:	d1c0      	bne.n	800e8cc <_printf_float+0x300>
 800e94a:	e69e      	b.n	800e68a <_printf_float+0xbe>
 800e94c:	2301      	movs	r3, #1
 800e94e:	4631      	mov	r1, r6
 800e950:	4628      	mov	r0, r5
 800e952:	9205      	str	r2, [sp, #20]
 800e954:	47b8      	blx	r7
 800e956:	3001      	adds	r0, #1
 800e958:	f43f ae97 	beq.w	800e68a <_printf_float+0xbe>
 800e95c:	9a05      	ldr	r2, [sp, #20]
 800e95e:	f10b 0b01 	add.w	fp, fp, #1
 800e962:	e7b9      	b.n	800e8d8 <_printf_float+0x30c>
 800e964:	ee18 3a10 	vmov	r3, s16
 800e968:	4652      	mov	r2, sl
 800e96a:	4631      	mov	r1, r6
 800e96c:	4628      	mov	r0, r5
 800e96e:	47b8      	blx	r7
 800e970:	3001      	adds	r0, #1
 800e972:	d1be      	bne.n	800e8f2 <_printf_float+0x326>
 800e974:	e689      	b.n	800e68a <_printf_float+0xbe>
 800e976:	9a05      	ldr	r2, [sp, #20]
 800e978:	464b      	mov	r3, r9
 800e97a:	4442      	add	r2, r8
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	d1c1      	bne.n	800e90a <_printf_float+0x33e>
 800e986:	e680      	b.n	800e68a <_printf_float+0xbe>
 800e988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e98a:	2a01      	cmp	r2, #1
 800e98c:	dc01      	bgt.n	800e992 <_printf_float+0x3c6>
 800e98e:	07db      	lsls	r3, r3, #31
 800e990:	d53a      	bpl.n	800ea08 <_printf_float+0x43c>
 800e992:	2301      	movs	r3, #1
 800e994:	4642      	mov	r2, r8
 800e996:	4631      	mov	r1, r6
 800e998:	4628      	mov	r0, r5
 800e99a:	47b8      	blx	r7
 800e99c:	3001      	adds	r0, #1
 800e99e:	f43f ae74 	beq.w	800e68a <_printf_float+0xbe>
 800e9a2:	ee18 3a10 	vmov	r3, s16
 800e9a6:	4652      	mov	r2, sl
 800e9a8:	4631      	mov	r1, r6
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	47b8      	blx	r7
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	f43f ae6b 	beq.w	800e68a <_printf_float+0xbe>
 800e9b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e9c0:	f7f2 f8b2 	bl	8000b28 <__aeabi_dcmpeq>
 800e9c4:	b9d8      	cbnz	r0, 800e9fe <_printf_float+0x432>
 800e9c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e9ca:	f108 0201 	add.w	r2, r8, #1
 800e9ce:	4631      	mov	r1, r6
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	47b8      	blx	r7
 800e9d4:	3001      	adds	r0, #1
 800e9d6:	d10e      	bne.n	800e9f6 <_printf_float+0x42a>
 800e9d8:	e657      	b.n	800e68a <_printf_float+0xbe>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	4652      	mov	r2, sl
 800e9de:	4631      	mov	r1, r6
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	47b8      	blx	r7
 800e9e4:	3001      	adds	r0, #1
 800e9e6:	f43f ae50 	beq.w	800e68a <_printf_float+0xbe>
 800e9ea:	f108 0801 	add.w	r8, r8, #1
 800e9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	4543      	cmp	r3, r8
 800e9f4:	dcf1      	bgt.n	800e9da <_printf_float+0x40e>
 800e9f6:	464b      	mov	r3, r9
 800e9f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e9fc:	e6da      	b.n	800e7b4 <_printf_float+0x1e8>
 800e9fe:	f04f 0800 	mov.w	r8, #0
 800ea02:	f104 0a1a 	add.w	sl, r4, #26
 800ea06:	e7f2      	b.n	800e9ee <_printf_float+0x422>
 800ea08:	2301      	movs	r3, #1
 800ea0a:	4642      	mov	r2, r8
 800ea0c:	e7df      	b.n	800e9ce <_printf_float+0x402>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	464a      	mov	r2, r9
 800ea12:	4631      	mov	r1, r6
 800ea14:	4628      	mov	r0, r5
 800ea16:	47b8      	blx	r7
 800ea18:	3001      	adds	r0, #1
 800ea1a:	f43f ae36 	beq.w	800e68a <_printf_float+0xbe>
 800ea1e:	f108 0801 	add.w	r8, r8, #1
 800ea22:	68e3      	ldr	r3, [r4, #12]
 800ea24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea26:	1a5b      	subs	r3, r3, r1
 800ea28:	4543      	cmp	r3, r8
 800ea2a:	dcf0      	bgt.n	800ea0e <_printf_float+0x442>
 800ea2c:	e6f8      	b.n	800e820 <_printf_float+0x254>
 800ea2e:	f04f 0800 	mov.w	r8, #0
 800ea32:	f104 0919 	add.w	r9, r4, #25
 800ea36:	e7f4      	b.n	800ea22 <_printf_float+0x456>

0800ea38 <_printf_common>:
 800ea38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea3c:	4616      	mov	r6, r2
 800ea3e:	4699      	mov	r9, r3
 800ea40:	688a      	ldr	r2, [r1, #8]
 800ea42:	690b      	ldr	r3, [r1, #16]
 800ea44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	bfb8      	it	lt
 800ea4c:	4613      	movlt	r3, r2
 800ea4e:	6033      	str	r3, [r6, #0]
 800ea50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea54:	4607      	mov	r7, r0
 800ea56:	460c      	mov	r4, r1
 800ea58:	b10a      	cbz	r2, 800ea5e <_printf_common+0x26>
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	6033      	str	r3, [r6, #0]
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	0699      	lsls	r1, r3, #26
 800ea62:	bf42      	ittt	mi
 800ea64:	6833      	ldrmi	r3, [r6, #0]
 800ea66:	3302      	addmi	r3, #2
 800ea68:	6033      	strmi	r3, [r6, #0]
 800ea6a:	6825      	ldr	r5, [r4, #0]
 800ea6c:	f015 0506 	ands.w	r5, r5, #6
 800ea70:	d106      	bne.n	800ea80 <_printf_common+0x48>
 800ea72:	f104 0a19 	add.w	sl, r4, #25
 800ea76:	68e3      	ldr	r3, [r4, #12]
 800ea78:	6832      	ldr	r2, [r6, #0]
 800ea7a:	1a9b      	subs	r3, r3, r2
 800ea7c:	42ab      	cmp	r3, r5
 800ea7e:	dc26      	bgt.n	800eace <_printf_common+0x96>
 800ea80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea84:	1e13      	subs	r3, r2, #0
 800ea86:	6822      	ldr	r2, [r4, #0]
 800ea88:	bf18      	it	ne
 800ea8a:	2301      	movne	r3, #1
 800ea8c:	0692      	lsls	r2, r2, #26
 800ea8e:	d42b      	bmi.n	800eae8 <_printf_common+0xb0>
 800ea90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea94:	4649      	mov	r1, r9
 800ea96:	4638      	mov	r0, r7
 800ea98:	47c0      	blx	r8
 800ea9a:	3001      	adds	r0, #1
 800ea9c:	d01e      	beq.n	800eadc <_printf_common+0xa4>
 800ea9e:	6823      	ldr	r3, [r4, #0]
 800eaa0:	6922      	ldr	r2, [r4, #16]
 800eaa2:	f003 0306 	and.w	r3, r3, #6
 800eaa6:	2b04      	cmp	r3, #4
 800eaa8:	bf02      	ittt	eq
 800eaaa:	68e5      	ldreq	r5, [r4, #12]
 800eaac:	6833      	ldreq	r3, [r6, #0]
 800eaae:	1aed      	subeq	r5, r5, r3
 800eab0:	68a3      	ldr	r3, [r4, #8]
 800eab2:	bf0c      	ite	eq
 800eab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eab8:	2500      	movne	r5, #0
 800eaba:	4293      	cmp	r3, r2
 800eabc:	bfc4      	itt	gt
 800eabe:	1a9b      	subgt	r3, r3, r2
 800eac0:	18ed      	addgt	r5, r5, r3
 800eac2:	2600      	movs	r6, #0
 800eac4:	341a      	adds	r4, #26
 800eac6:	42b5      	cmp	r5, r6
 800eac8:	d11a      	bne.n	800eb00 <_printf_common+0xc8>
 800eaca:	2000      	movs	r0, #0
 800eacc:	e008      	b.n	800eae0 <_printf_common+0xa8>
 800eace:	2301      	movs	r3, #1
 800ead0:	4652      	mov	r2, sl
 800ead2:	4649      	mov	r1, r9
 800ead4:	4638      	mov	r0, r7
 800ead6:	47c0      	blx	r8
 800ead8:	3001      	adds	r0, #1
 800eada:	d103      	bne.n	800eae4 <_printf_common+0xac>
 800eadc:	f04f 30ff 	mov.w	r0, #4294967295
 800eae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae4:	3501      	adds	r5, #1
 800eae6:	e7c6      	b.n	800ea76 <_printf_common+0x3e>
 800eae8:	18e1      	adds	r1, r4, r3
 800eaea:	1c5a      	adds	r2, r3, #1
 800eaec:	2030      	movs	r0, #48	; 0x30
 800eaee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eaf2:	4422      	add	r2, r4
 800eaf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eaf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eafc:	3302      	adds	r3, #2
 800eafe:	e7c7      	b.n	800ea90 <_printf_common+0x58>
 800eb00:	2301      	movs	r3, #1
 800eb02:	4622      	mov	r2, r4
 800eb04:	4649      	mov	r1, r9
 800eb06:	4638      	mov	r0, r7
 800eb08:	47c0      	blx	r8
 800eb0a:	3001      	adds	r0, #1
 800eb0c:	d0e6      	beq.n	800eadc <_printf_common+0xa4>
 800eb0e:	3601      	adds	r6, #1
 800eb10:	e7d9      	b.n	800eac6 <_printf_common+0x8e>
	...

0800eb14 <_printf_i>:
 800eb14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb18:	7e0f      	ldrb	r7, [r1, #24]
 800eb1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb1c:	2f78      	cmp	r7, #120	; 0x78
 800eb1e:	4691      	mov	r9, r2
 800eb20:	4680      	mov	r8, r0
 800eb22:	460c      	mov	r4, r1
 800eb24:	469a      	mov	sl, r3
 800eb26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb2a:	d807      	bhi.n	800eb3c <_printf_i+0x28>
 800eb2c:	2f62      	cmp	r7, #98	; 0x62
 800eb2e:	d80a      	bhi.n	800eb46 <_printf_i+0x32>
 800eb30:	2f00      	cmp	r7, #0
 800eb32:	f000 80d4 	beq.w	800ecde <_printf_i+0x1ca>
 800eb36:	2f58      	cmp	r7, #88	; 0x58
 800eb38:	f000 80c0 	beq.w	800ecbc <_printf_i+0x1a8>
 800eb3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb44:	e03a      	b.n	800ebbc <_printf_i+0xa8>
 800eb46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb4a:	2b15      	cmp	r3, #21
 800eb4c:	d8f6      	bhi.n	800eb3c <_printf_i+0x28>
 800eb4e:	a101      	add	r1, pc, #4	; (adr r1, 800eb54 <_printf_i+0x40>)
 800eb50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb54:	0800ebad 	.word	0x0800ebad
 800eb58:	0800ebc1 	.word	0x0800ebc1
 800eb5c:	0800eb3d 	.word	0x0800eb3d
 800eb60:	0800eb3d 	.word	0x0800eb3d
 800eb64:	0800eb3d 	.word	0x0800eb3d
 800eb68:	0800eb3d 	.word	0x0800eb3d
 800eb6c:	0800ebc1 	.word	0x0800ebc1
 800eb70:	0800eb3d 	.word	0x0800eb3d
 800eb74:	0800eb3d 	.word	0x0800eb3d
 800eb78:	0800eb3d 	.word	0x0800eb3d
 800eb7c:	0800eb3d 	.word	0x0800eb3d
 800eb80:	0800ecc5 	.word	0x0800ecc5
 800eb84:	0800ebed 	.word	0x0800ebed
 800eb88:	0800ec7f 	.word	0x0800ec7f
 800eb8c:	0800eb3d 	.word	0x0800eb3d
 800eb90:	0800eb3d 	.word	0x0800eb3d
 800eb94:	0800ece7 	.word	0x0800ece7
 800eb98:	0800eb3d 	.word	0x0800eb3d
 800eb9c:	0800ebed 	.word	0x0800ebed
 800eba0:	0800eb3d 	.word	0x0800eb3d
 800eba4:	0800eb3d 	.word	0x0800eb3d
 800eba8:	0800ec87 	.word	0x0800ec87
 800ebac:	682b      	ldr	r3, [r5, #0]
 800ebae:	1d1a      	adds	r2, r3, #4
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	602a      	str	r2, [r5, #0]
 800ebb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e09f      	b.n	800ed00 <_printf_i+0x1ec>
 800ebc0:	6820      	ldr	r0, [r4, #0]
 800ebc2:	682b      	ldr	r3, [r5, #0]
 800ebc4:	0607      	lsls	r7, r0, #24
 800ebc6:	f103 0104 	add.w	r1, r3, #4
 800ebca:	6029      	str	r1, [r5, #0]
 800ebcc:	d501      	bpl.n	800ebd2 <_printf_i+0xbe>
 800ebce:	681e      	ldr	r6, [r3, #0]
 800ebd0:	e003      	b.n	800ebda <_printf_i+0xc6>
 800ebd2:	0646      	lsls	r6, r0, #25
 800ebd4:	d5fb      	bpl.n	800ebce <_printf_i+0xba>
 800ebd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ebda:	2e00      	cmp	r6, #0
 800ebdc:	da03      	bge.n	800ebe6 <_printf_i+0xd2>
 800ebde:	232d      	movs	r3, #45	; 0x2d
 800ebe0:	4276      	negs	r6, r6
 800ebe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebe6:	485a      	ldr	r0, [pc, #360]	; (800ed50 <_printf_i+0x23c>)
 800ebe8:	230a      	movs	r3, #10
 800ebea:	e012      	b.n	800ec12 <_printf_i+0xfe>
 800ebec:	682b      	ldr	r3, [r5, #0]
 800ebee:	6820      	ldr	r0, [r4, #0]
 800ebf0:	1d19      	adds	r1, r3, #4
 800ebf2:	6029      	str	r1, [r5, #0]
 800ebf4:	0605      	lsls	r5, r0, #24
 800ebf6:	d501      	bpl.n	800ebfc <_printf_i+0xe8>
 800ebf8:	681e      	ldr	r6, [r3, #0]
 800ebfa:	e002      	b.n	800ec02 <_printf_i+0xee>
 800ebfc:	0641      	lsls	r1, r0, #25
 800ebfe:	d5fb      	bpl.n	800ebf8 <_printf_i+0xe4>
 800ec00:	881e      	ldrh	r6, [r3, #0]
 800ec02:	4853      	ldr	r0, [pc, #332]	; (800ed50 <_printf_i+0x23c>)
 800ec04:	2f6f      	cmp	r7, #111	; 0x6f
 800ec06:	bf0c      	ite	eq
 800ec08:	2308      	moveq	r3, #8
 800ec0a:	230a      	movne	r3, #10
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec12:	6865      	ldr	r5, [r4, #4]
 800ec14:	60a5      	str	r5, [r4, #8]
 800ec16:	2d00      	cmp	r5, #0
 800ec18:	bfa2      	ittt	ge
 800ec1a:	6821      	ldrge	r1, [r4, #0]
 800ec1c:	f021 0104 	bicge.w	r1, r1, #4
 800ec20:	6021      	strge	r1, [r4, #0]
 800ec22:	b90e      	cbnz	r6, 800ec28 <_printf_i+0x114>
 800ec24:	2d00      	cmp	r5, #0
 800ec26:	d04b      	beq.n	800ecc0 <_printf_i+0x1ac>
 800ec28:	4615      	mov	r5, r2
 800ec2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ec32:	5dc7      	ldrb	r7, [r0, r7]
 800ec34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec38:	4637      	mov	r7, r6
 800ec3a:	42bb      	cmp	r3, r7
 800ec3c:	460e      	mov	r6, r1
 800ec3e:	d9f4      	bls.n	800ec2a <_printf_i+0x116>
 800ec40:	2b08      	cmp	r3, #8
 800ec42:	d10b      	bne.n	800ec5c <_printf_i+0x148>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	07de      	lsls	r6, r3, #31
 800ec48:	d508      	bpl.n	800ec5c <_printf_i+0x148>
 800ec4a:	6923      	ldr	r3, [r4, #16]
 800ec4c:	6861      	ldr	r1, [r4, #4]
 800ec4e:	4299      	cmp	r1, r3
 800ec50:	bfde      	ittt	le
 800ec52:	2330      	movle	r3, #48	; 0x30
 800ec54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ec5c:	1b52      	subs	r2, r2, r5
 800ec5e:	6122      	str	r2, [r4, #16]
 800ec60:	f8cd a000 	str.w	sl, [sp]
 800ec64:	464b      	mov	r3, r9
 800ec66:	aa03      	add	r2, sp, #12
 800ec68:	4621      	mov	r1, r4
 800ec6a:	4640      	mov	r0, r8
 800ec6c:	f7ff fee4 	bl	800ea38 <_printf_common>
 800ec70:	3001      	adds	r0, #1
 800ec72:	d14a      	bne.n	800ed0a <_printf_i+0x1f6>
 800ec74:	f04f 30ff 	mov.w	r0, #4294967295
 800ec78:	b004      	add	sp, #16
 800ec7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec7e:	6823      	ldr	r3, [r4, #0]
 800ec80:	f043 0320 	orr.w	r3, r3, #32
 800ec84:	6023      	str	r3, [r4, #0]
 800ec86:	4833      	ldr	r0, [pc, #204]	; (800ed54 <_printf_i+0x240>)
 800ec88:	2778      	movs	r7, #120	; 0x78
 800ec8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	6829      	ldr	r1, [r5, #0]
 800ec92:	061f      	lsls	r7, r3, #24
 800ec94:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec98:	d402      	bmi.n	800eca0 <_printf_i+0x18c>
 800ec9a:	065f      	lsls	r7, r3, #25
 800ec9c:	bf48      	it	mi
 800ec9e:	b2b6      	uxthmi	r6, r6
 800eca0:	07df      	lsls	r7, r3, #31
 800eca2:	bf48      	it	mi
 800eca4:	f043 0320 	orrmi.w	r3, r3, #32
 800eca8:	6029      	str	r1, [r5, #0]
 800ecaa:	bf48      	it	mi
 800ecac:	6023      	strmi	r3, [r4, #0]
 800ecae:	b91e      	cbnz	r6, 800ecb8 <_printf_i+0x1a4>
 800ecb0:	6823      	ldr	r3, [r4, #0]
 800ecb2:	f023 0320 	bic.w	r3, r3, #32
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	2310      	movs	r3, #16
 800ecba:	e7a7      	b.n	800ec0c <_printf_i+0xf8>
 800ecbc:	4824      	ldr	r0, [pc, #144]	; (800ed50 <_printf_i+0x23c>)
 800ecbe:	e7e4      	b.n	800ec8a <_printf_i+0x176>
 800ecc0:	4615      	mov	r5, r2
 800ecc2:	e7bd      	b.n	800ec40 <_printf_i+0x12c>
 800ecc4:	682b      	ldr	r3, [r5, #0]
 800ecc6:	6826      	ldr	r6, [r4, #0]
 800ecc8:	6961      	ldr	r1, [r4, #20]
 800ecca:	1d18      	adds	r0, r3, #4
 800eccc:	6028      	str	r0, [r5, #0]
 800ecce:	0635      	lsls	r5, r6, #24
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	d501      	bpl.n	800ecd8 <_printf_i+0x1c4>
 800ecd4:	6019      	str	r1, [r3, #0]
 800ecd6:	e002      	b.n	800ecde <_printf_i+0x1ca>
 800ecd8:	0670      	lsls	r0, r6, #25
 800ecda:	d5fb      	bpl.n	800ecd4 <_printf_i+0x1c0>
 800ecdc:	8019      	strh	r1, [r3, #0]
 800ecde:	2300      	movs	r3, #0
 800ece0:	6123      	str	r3, [r4, #16]
 800ece2:	4615      	mov	r5, r2
 800ece4:	e7bc      	b.n	800ec60 <_printf_i+0x14c>
 800ece6:	682b      	ldr	r3, [r5, #0]
 800ece8:	1d1a      	adds	r2, r3, #4
 800ecea:	602a      	str	r2, [r5, #0]
 800ecec:	681d      	ldr	r5, [r3, #0]
 800ecee:	6862      	ldr	r2, [r4, #4]
 800ecf0:	2100      	movs	r1, #0
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	f7f1 fa9c 	bl	8000230 <memchr>
 800ecf8:	b108      	cbz	r0, 800ecfe <_printf_i+0x1ea>
 800ecfa:	1b40      	subs	r0, r0, r5
 800ecfc:	6060      	str	r0, [r4, #4]
 800ecfe:	6863      	ldr	r3, [r4, #4]
 800ed00:	6123      	str	r3, [r4, #16]
 800ed02:	2300      	movs	r3, #0
 800ed04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed08:	e7aa      	b.n	800ec60 <_printf_i+0x14c>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	462a      	mov	r2, r5
 800ed0e:	4649      	mov	r1, r9
 800ed10:	4640      	mov	r0, r8
 800ed12:	47d0      	blx	sl
 800ed14:	3001      	adds	r0, #1
 800ed16:	d0ad      	beq.n	800ec74 <_printf_i+0x160>
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	079b      	lsls	r3, r3, #30
 800ed1c:	d413      	bmi.n	800ed46 <_printf_i+0x232>
 800ed1e:	68e0      	ldr	r0, [r4, #12]
 800ed20:	9b03      	ldr	r3, [sp, #12]
 800ed22:	4298      	cmp	r0, r3
 800ed24:	bfb8      	it	lt
 800ed26:	4618      	movlt	r0, r3
 800ed28:	e7a6      	b.n	800ec78 <_printf_i+0x164>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	4632      	mov	r2, r6
 800ed2e:	4649      	mov	r1, r9
 800ed30:	4640      	mov	r0, r8
 800ed32:	47d0      	blx	sl
 800ed34:	3001      	adds	r0, #1
 800ed36:	d09d      	beq.n	800ec74 <_printf_i+0x160>
 800ed38:	3501      	adds	r5, #1
 800ed3a:	68e3      	ldr	r3, [r4, #12]
 800ed3c:	9903      	ldr	r1, [sp, #12]
 800ed3e:	1a5b      	subs	r3, r3, r1
 800ed40:	42ab      	cmp	r3, r5
 800ed42:	dcf2      	bgt.n	800ed2a <_printf_i+0x216>
 800ed44:	e7eb      	b.n	800ed1e <_printf_i+0x20a>
 800ed46:	2500      	movs	r5, #0
 800ed48:	f104 0619 	add.w	r6, r4, #25
 800ed4c:	e7f5      	b.n	800ed3a <_printf_i+0x226>
 800ed4e:	bf00      	nop
 800ed50:	08011aee 	.word	0x08011aee
 800ed54:	08011aff 	.word	0x08011aff

0800ed58 <std>:
 800ed58:	2300      	movs	r3, #0
 800ed5a:	b510      	push	{r4, lr}
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed66:	6083      	str	r3, [r0, #8]
 800ed68:	8181      	strh	r1, [r0, #12]
 800ed6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed6c:	81c2      	strh	r2, [r0, #14]
 800ed6e:	6183      	str	r3, [r0, #24]
 800ed70:	4619      	mov	r1, r3
 800ed72:	2208      	movs	r2, #8
 800ed74:	305c      	adds	r0, #92	; 0x5c
 800ed76:	f000 f9f3 	bl	800f160 <memset>
 800ed7a:	4b05      	ldr	r3, [pc, #20]	; (800ed90 <std+0x38>)
 800ed7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed7e:	4b05      	ldr	r3, [pc, #20]	; (800ed94 <std+0x3c>)
 800ed80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed82:	4b05      	ldr	r3, [pc, #20]	; (800ed98 <std+0x40>)
 800ed84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed86:	4b05      	ldr	r3, [pc, #20]	; (800ed9c <std+0x44>)
 800ed88:	6224      	str	r4, [r4, #32]
 800ed8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	bf00      	nop
 800ed90:	0800efb1 	.word	0x0800efb1
 800ed94:	0800efd3 	.word	0x0800efd3
 800ed98:	0800f00b 	.word	0x0800f00b
 800ed9c:	0800f02f 	.word	0x0800f02f

0800eda0 <stdio_exit_handler>:
 800eda0:	4a02      	ldr	r2, [pc, #8]	; (800edac <stdio_exit_handler+0xc>)
 800eda2:	4903      	ldr	r1, [pc, #12]	; (800edb0 <stdio_exit_handler+0x10>)
 800eda4:	4803      	ldr	r0, [pc, #12]	; (800edb4 <stdio_exit_handler+0x14>)
 800eda6:	f000 b869 	b.w	800ee7c <_fwalk_sglue>
 800edaa:	bf00      	nop
 800edac:	20000048 	.word	0x20000048
 800edb0:	08010cf9 	.word	0x08010cf9
 800edb4:	20000054 	.word	0x20000054

0800edb8 <cleanup_stdio>:
 800edb8:	6841      	ldr	r1, [r0, #4]
 800edba:	4b0c      	ldr	r3, [pc, #48]	; (800edec <cleanup_stdio+0x34>)
 800edbc:	4299      	cmp	r1, r3
 800edbe:	b510      	push	{r4, lr}
 800edc0:	4604      	mov	r4, r0
 800edc2:	d001      	beq.n	800edc8 <cleanup_stdio+0x10>
 800edc4:	f001 ff98 	bl	8010cf8 <_fflush_r>
 800edc8:	68a1      	ldr	r1, [r4, #8]
 800edca:	4b09      	ldr	r3, [pc, #36]	; (800edf0 <cleanup_stdio+0x38>)
 800edcc:	4299      	cmp	r1, r3
 800edce:	d002      	beq.n	800edd6 <cleanup_stdio+0x1e>
 800edd0:	4620      	mov	r0, r4
 800edd2:	f001 ff91 	bl	8010cf8 <_fflush_r>
 800edd6:	68e1      	ldr	r1, [r4, #12]
 800edd8:	4b06      	ldr	r3, [pc, #24]	; (800edf4 <cleanup_stdio+0x3c>)
 800edda:	4299      	cmp	r1, r3
 800eddc:	d004      	beq.n	800ede8 <cleanup_stdio+0x30>
 800edde:	4620      	mov	r0, r4
 800ede0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede4:	f001 bf88 	b.w	8010cf8 <_fflush_r>
 800ede8:	bd10      	pop	{r4, pc}
 800edea:	bf00      	nop
 800edec:	20009ec0 	.word	0x20009ec0
 800edf0:	20009f28 	.word	0x20009f28
 800edf4:	20009f90 	.word	0x20009f90

0800edf8 <global_stdio_init.part.0>:
 800edf8:	b510      	push	{r4, lr}
 800edfa:	4b0b      	ldr	r3, [pc, #44]	; (800ee28 <global_stdio_init.part.0+0x30>)
 800edfc:	4c0b      	ldr	r4, [pc, #44]	; (800ee2c <global_stdio_init.part.0+0x34>)
 800edfe:	4a0c      	ldr	r2, [pc, #48]	; (800ee30 <global_stdio_init.part.0+0x38>)
 800ee00:	601a      	str	r2, [r3, #0]
 800ee02:	4620      	mov	r0, r4
 800ee04:	2200      	movs	r2, #0
 800ee06:	2104      	movs	r1, #4
 800ee08:	f7ff ffa6 	bl	800ed58 <std>
 800ee0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ee10:	2201      	movs	r2, #1
 800ee12:	2109      	movs	r1, #9
 800ee14:	f7ff ffa0 	bl	800ed58 <std>
 800ee18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ee1c:	2202      	movs	r2, #2
 800ee1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee22:	2112      	movs	r1, #18
 800ee24:	f7ff bf98 	b.w	800ed58 <std>
 800ee28:	20009ff8 	.word	0x20009ff8
 800ee2c:	20009ec0 	.word	0x20009ec0
 800ee30:	0800eda1 	.word	0x0800eda1

0800ee34 <__sfp_lock_acquire>:
 800ee34:	4801      	ldr	r0, [pc, #4]	; (800ee3c <__sfp_lock_acquire+0x8>)
 800ee36:	f000 ba79 	b.w	800f32c <__retarget_lock_acquire_recursive>
 800ee3a:	bf00      	nop
 800ee3c:	2000a001 	.word	0x2000a001

0800ee40 <__sfp_lock_release>:
 800ee40:	4801      	ldr	r0, [pc, #4]	; (800ee48 <__sfp_lock_release+0x8>)
 800ee42:	f000 ba74 	b.w	800f32e <__retarget_lock_release_recursive>
 800ee46:	bf00      	nop
 800ee48:	2000a001 	.word	0x2000a001

0800ee4c <__sinit>:
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	4604      	mov	r4, r0
 800ee50:	f7ff fff0 	bl	800ee34 <__sfp_lock_acquire>
 800ee54:	6a23      	ldr	r3, [r4, #32]
 800ee56:	b11b      	cbz	r3, 800ee60 <__sinit+0x14>
 800ee58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee5c:	f7ff bff0 	b.w	800ee40 <__sfp_lock_release>
 800ee60:	4b04      	ldr	r3, [pc, #16]	; (800ee74 <__sinit+0x28>)
 800ee62:	6223      	str	r3, [r4, #32]
 800ee64:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <__sinit+0x2c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1f5      	bne.n	800ee58 <__sinit+0xc>
 800ee6c:	f7ff ffc4 	bl	800edf8 <global_stdio_init.part.0>
 800ee70:	e7f2      	b.n	800ee58 <__sinit+0xc>
 800ee72:	bf00      	nop
 800ee74:	0800edb9 	.word	0x0800edb9
 800ee78:	20009ff8 	.word	0x20009ff8

0800ee7c <_fwalk_sglue>:
 800ee7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee80:	4607      	mov	r7, r0
 800ee82:	4688      	mov	r8, r1
 800ee84:	4614      	mov	r4, r2
 800ee86:	2600      	movs	r6, #0
 800ee88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee8c:	f1b9 0901 	subs.w	r9, r9, #1
 800ee90:	d505      	bpl.n	800ee9e <_fwalk_sglue+0x22>
 800ee92:	6824      	ldr	r4, [r4, #0]
 800ee94:	2c00      	cmp	r4, #0
 800ee96:	d1f7      	bne.n	800ee88 <_fwalk_sglue+0xc>
 800ee98:	4630      	mov	r0, r6
 800ee9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee9e:	89ab      	ldrh	r3, [r5, #12]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d907      	bls.n	800eeb4 <_fwalk_sglue+0x38>
 800eea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	d003      	beq.n	800eeb4 <_fwalk_sglue+0x38>
 800eeac:	4629      	mov	r1, r5
 800eeae:	4638      	mov	r0, r7
 800eeb0:	47c0      	blx	r8
 800eeb2:	4306      	orrs	r6, r0
 800eeb4:	3568      	adds	r5, #104	; 0x68
 800eeb6:	e7e9      	b.n	800ee8c <_fwalk_sglue+0x10>

0800eeb8 <_puts_r>:
 800eeb8:	6a03      	ldr	r3, [r0, #32]
 800eeba:	b570      	push	{r4, r5, r6, lr}
 800eebc:	6884      	ldr	r4, [r0, #8]
 800eebe:	4605      	mov	r5, r0
 800eec0:	460e      	mov	r6, r1
 800eec2:	b90b      	cbnz	r3, 800eec8 <_puts_r+0x10>
 800eec4:	f7ff ffc2 	bl	800ee4c <__sinit>
 800eec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeca:	07db      	lsls	r3, r3, #31
 800eecc:	d405      	bmi.n	800eeda <_puts_r+0x22>
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	0598      	lsls	r0, r3, #22
 800eed2:	d402      	bmi.n	800eeda <_puts_r+0x22>
 800eed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eed6:	f000 fa29 	bl	800f32c <__retarget_lock_acquire_recursive>
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	0719      	lsls	r1, r3, #28
 800eede:	d513      	bpl.n	800ef08 <_puts_r+0x50>
 800eee0:	6923      	ldr	r3, [r4, #16]
 800eee2:	b18b      	cbz	r3, 800ef08 <_puts_r+0x50>
 800eee4:	3e01      	subs	r6, #1
 800eee6:	68a3      	ldr	r3, [r4, #8]
 800eee8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eeec:	3b01      	subs	r3, #1
 800eeee:	60a3      	str	r3, [r4, #8]
 800eef0:	b9e9      	cbnz	r1, 800ef2e <_puts_r+0x76>
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	da2e      	bge.n	800ef54 <_puts_r+0x9c>
 800eef6:	4622      	mov	r2, r4
 800eef8:	210a      	movs	r1, #10
 800eefa:	4628      	mov	r0, r5
 800eefc:	f000 f89b 	bl	800f036 <__swbuf_r>
 800ef00:	3001      	adds	r0, #1
 800ef02:	d007      	beq.n	800ef14 <_puts_r+0x5c>
 800ef04:	250a      	movs	r5, #10
 800ef06:	e007      	b.n	800ef18 <_puts_r+0x60>
 800ef08:	4621      	mov	r1, r4
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	f000 f8d0 	bl	800f0b0 <__swsetup_r>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d0e7      	beq.n	800eee4 <_puts_r+0x2c>
 800ef14:	f04f 35ff 	mov.w	r5, #4294967295
 800ef18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef1a:	07da      	lsls	r2, r3, #31
 800ef1c:	d405      	bmi.n	800ef2a <_puts_r+0x72>
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	059b      	lsls	r3, r3, #22
 800ef22:	d402      	bmi.n	800ef2a <_puts_r+0x72>
 800ef24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef26:	f000 fa02 	bl	800f32e <__retarget_lock_release_recursive>
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	bd70      	pop	{r4, r5, r6, pc}
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	da04      	bge.n	800ef3c <_puts_r+0x84>
 800ef32:	69a2      	ldr	r2, [r4, #24]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	dc06      	bgt.n	800ef46 <_puts_r+0x8e>
 800ef38:	290a      	cmp	r1, #10
 800ef3a:	d004      	beq.n	800ef46 <_puts_r+0x8e>
 800ef3c:	6823      	ldr	r3, [r4, #0]
 800ef3e:	1c5a      	adds	r2, r3, #1
 800ef40:	6022      	str	r2, [r4, #0]
 800ef42:	7019      	strb	r1, [r3, #0]
 800ef44:	e7cf      	b.n	800eee6 <_puts_r+0x2e>
 800ef46:	4622      	mov	r2, r4
 800ef48:	4628      	mov	r0, r5
 800ef4a:	f000 f874 	bl	800f036 <__swbuf_r>
 800ef4e:	3001      	adds	r0, #1
 800ef50:	d1c9      	bne.n	800eee6 <_puts_r+0x2e>
 800ef52:	e7df      	b.n	800ef14 <_puts_r+0x5c>
 800ef54:	6823      	ldr	r3, [r4, #0]
 800ef56:	250a      	movs	r5, #10
 800ef58:	1c5a      	adds	r2, r3, #1
 800ef5a:	6022      	str	r2, [r4, #0]
 800ef5c:	701d      	strb	r5, [r3, #0]
 800ef5e:	e7db      	b.n	800ef18 <_puts_r+0x60>

0800ef60 <puts>:
 800ef60:	4b02      	ldr	r3, [pc, #8]	; (800ef6c <puts+0xc>)
 800ef62:	4601      	mov	r1, r0
 800ef64:	6818      	ldr	r0, [r3, #0]
 800ef66:	f7ff bfa7 	b.w	800eeb8 <_puts_r>
 800ef6a:	bf00      	nop
 800ef6c:	200000a0 	.word	0x200000a0

0800ef70 <siprintf>:
 800ef70:	b40e      	push	{r1, r2, r3}
 800ef72:	b500      	push	{lr}
 800ef74:	b09c      	sub	sp, #112	; 0x70
 800ef76:	ab1d      	add	r3, sp, #116	; 0x74
 800ef78:	9002      	str	r0, [sp, #8]
 800ef7a:	9006      	str	r0, [sp, #24]
 800ef7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef80:	4809      	ldr	r0, [pc, #36]	; (800efa8 <siprintf+0x38>)
 800ef82:	9107      	str	r1, [sp, #28]
 800ef84:	9104      	str	r1, [sp, #16]
 800ef86:	4909      	ldr	r1, [pc, #36]	; (800efac <siprintf+0x3c>)
 800ef88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef8c:	9105      	str	r1, [sp, #20]
 800ef8e:	6800      	ldr	r0, [r0, #0]
 800ef90:	9301      	str	r3, [sp, #4]
 800ef92:	a902      	add	r1, sp, #8
 800ef94:	f001 fd2c 	bl	80109f0 <_svfiprintf_r>
 800ef98:	9b02      	ldr	r3, [sp, #8]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	701a      	strb	r2, [r3, #0]
 800ef9e:	b01c      	add	sp, #112	; 0x70
 800efa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efa4:	b003      	add	sp, #12
 800efa6:	4770      	bx	lr
 800efa8:	200000a0 	.word	0x200000a0
 800efac:	ffff0208 	.word	0xffff0208

0800efb0 <__sread>:
 800efb0:	b510      	push	{r4, lr}
 800efb2:	460c      	mov	r4, r1
 800efb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efb8:	f000 f96a 	bl	800f290 <_read_r>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	bfab      	itete	ge
 800efc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efc2:	89a3      	ldrhlt	r3, [r4, #12]
 800efc4:	181b      	addge	r3, r3, r0
 800efc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efca:	bfac      	ite	ge
 800efcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800efce:	81a3      	strhlt	r3, [r4, #12]
 800efd0:	bd10      	pop	{r4, pc}

0800efd2 <__swrite>:
 800efd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd6:	461f      	mov	r7, r3
 800efd8:	898b      	ldrh	r3, [r1, #12]
 800efda:	05db      	lsls	r3, r3, #23
 800efdc:	4605      	mov	r5, r0
 800efde:	460c      	mov	r4, r1
 800efe0:	4616      	mov	r6, r2
 800efe2:	d505      	bpl.n	800eff0 <__swrite+0x1e>
 800efe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efe8:	2302      	movs	r3, #2
 800efea:	2200      	movs	r2, #0
 800efec:	f000 f93e 	bl	800f26c <_lseek_r>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800effa:	81a3      	strh	r3, [r4, #12]
 800effc:	4632      	mov	r2, r6
 800effe:	463b      	mov	r3, r7
 800f000:	4628      	mov	r0, r5
 800f002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f006:	f000 b955 	b.w	800f2b4 <_write_r>

0800f00a <__sseek>:
 800f00a:	b510      	push	{r4, lr}
 800f00c:	460c      	mov	r4, r1
 800f00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f012:	f000 f92b 	bl	800f26c <_lseek_r>
 800f016:	1c43      	adds	r3, r0, #1
 800f018:	89a3      	ldrh	r3, [r4, #12]
 800f01a:	bf15      	itete	ne
 800f01c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f01e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f026:	81a3      	strheq	r3, [r4, #12]
 800f028:	bf18      	it	ne
 800f02a:	81a3      	strhne	r3, [r4, #12]
 800f02c:	bd10      	pop	{r4, pc}

0800f02e <__sclose>:
 800f02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f032:	f000 b8b5 	b.w	800f1a0 <_close_r>

0800f036 <__swbuf_r>:
 800f036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f038:	460e      	mov	r6, r1
 800f03a:	4614      	mov	r4, r2
 800f03c:	4605      	mov	r5, r0
 800f03e:	b118      	cbz	r0, 800f048 <__swbuf_r+0x12>
 800f040:	6a03      	ldr	r3, [r0, #32]
 800f042:	b90b      	cbnz	r3, 800f048 <__swbuf_r+0x12>
 800f044:	f7ff ff02 	bl	800ee4c <__sinit>
 800f048:	69a3      	ldr	r3, [r4, #24]
 800f04a:	60a3      	str	r3, [r4, #8]
 800f04c:	89a3      	ldrh	r3, [r4, #12]
 800f04e:	071a      	lsls	r2, r3, #28
 800f050:	d525      	bpl.n	800f09e <__swbuf_r+0x68>
 800f052:	6923      	ldr	r3, [r4, #16]
 800f054:	b31b      	cbz	r3, 800f09e <__swbuf_r+0x68>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	6922      	ldr	r2, [r4, #16]
 800f05a:	1a98      	subs	r0, r3, r2
 800f05c:	6963      	ldr	r3, [r4, #20]
 800f05e:	b2f6      	uxtb	r6, r6
 800f060:	4283      	cmp	r3, r0
 800f062:	4637      	mov	r7, r6
 800f064:	dc04      	bgt.n	800f070 <__swbuf_r+0x3a>
 800f066:	4621      	mov	r1, r4
 800f068:	4628      	mov	r0, r5
 800f06a:	f001 fe45 	bl	8010cf8 <_fflush_r>
 800f06e:	b9e0      	cbnz	r0, 800f0aa <__swbuf_r+0x74>
 800f070:	68a3      	ldr	r3, [r4, #8]
 800f072:	3b01      	subs	r3, #1
 800f074:	60a3      	str	r3, [r4, #8]
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	1c5a      	adds	r2, r3, #1
 800f07a:	6022      	str	r2, [r4, #0]
 800f07c:	701e      	strb	r6, [r3, #0]
 800f07e:	6962      	ldr	r2, [r4, #20]
 800f080:	1c43      	adds	r3, r0, #1
 800f082:	429a      	cmp	r2, r3
 800f084:	d004      	beq.n	800f090 <__swbuf_r+0x5a>
 800f086:	89a3      	ldrh	r3, [r4, #12]
 800f088:	07db      	lsls	r3, r3, #31
 800f08a:	d506      	bpl.n	800f09a <__swbuf_r+0x64>
 800f08c:	2e0a      	cmp	r6, #10
 800f08e:	d104      	bne.n	800f09a <__swbuf_r+0x64>
 800f090:	4621      	mov	r1, r4
 800f092:	4628      	mov	r0, r5
 800f094:	f001 fe30 	bl	8010cf8 <_fflush_r>
 800f098:	b938      	cbnz	r0, 800f0aa <__swbuf_r+0x74>
 800f09a:	4638      	mov	r0, r7
 800f09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f09e:	4621      	mov	r1, r4
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	f000 f805 	bl	800f0b0 <__swsetup_r>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d0d5      	beq.n	800f056 <__swbuf_r+0x20>
 800f0aa:	f04f 37ff 	mov.w	r7, #4294967295
 800f0ae:	e7f4      	b.n	800f09a <__swbuf_r+0x64>

0800f0b0 <__swsetup_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4b2a      	ldr	r3, [pc, #168]	; (800f15c <__swsetup_r+0xac>)
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	6818      	ldr	r0, [r3, #0]
 800f0b8:	460c      	mov	r4, r1
 800f0ba:	b118      	cbz	r0, 800f0c4 <__swsetup_r+0x14>
 800f0bc:	6a03      	ldr	r3, [r0, #32]
 800f0be:	b90b      	cbnz	r3, 800f0c4 <__swsetup_r+0x14>
 800f0c0:	f7ff fec4 	bl	800ee4c <__sinit>
 800f0c4:	89a3      	ldrh	r3, [r4, #12]
 800f0c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0ca:	0718      	lsls	r0, r3, #28
 800f0cc:	d422      	bmi.n	800f114 <__swsetup_r+0x64>
 800f0ce:	06d9      	lsls	r1, r3, #27
 800f0d0:	d407      	bmi.n	800f0e2 <__swsetup_r+0x32>
 800f0d2:	2309      	movs	r3, #9
 800f0d4:	602b      	str	r3, [r5, #0]
 800f0d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0da:	81a3      	strh	r3, [r4, #12]
 800f0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e0:	e034      	b.n	800f14c <__swsetup_r+0x9c>
 800f0e2:	0758      	lsls	r0, r3, #29
 800f0e4:	d512      	bpl.n	800f10c <__swsetup_r+0x5c>
 800f0e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0e8:	b141      	cbz	r1, 800f0fc <__swsetup_r+0x4c>
 800f0ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0ee:	4299      	cmp	r1, r3
 800f0f0:	d002      	beq.n	800f0f8 <__swsetup_r+0x48>
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	f000 ffa6 	bl	8010044 <_free_r>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	6363      	str	r3, [r4, #52]	; 0x34
 800f0fc:	89a3      	ldrh	r3, [r4, #12]
 800f0fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f102:	81a3      	strh	r3, [r4, #12]
 800f104:	2300      	movs	r3, #0
 800f106:	6063      	str	r3, [r4, #4]
 800f108:	6923      	ldr	r3, [r4, #16]
 800f10a:	6023      	str	r3, [r4, #0]
 800f10c:	89a3      	ldrh	r3, [r4, #12]
 800f10e:	f043 0308 	orr.w	r3, r3, #8
 800f112:	81a3      	strh	r3, [r4, #12]
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	b94b      	cbnz	r3, 800f12c <__swsetup_r+0x7c>
 800f118:	89a3      	ldrh	r3, [r4, #12]
 800f11a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f11e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f122:	d003      	beq.n	800f12c <__swsetup_r+0x7c>
 800f124:	4621      	mov	r1, r4
 800f126:	4628      	mov	r0, r5
 800f128:	f001 fe34 	bl	8010d94 <__smakebuf_r>
 800f12c:	89a0      	ldrh	r0, [r4, #12]
 800f12e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f132:	f010 0301 	ands.w	r3, r0, #1
 800f136:	d00a      	beq.n	800f14e <__swsetup_r+0x9e>
 800f138:	2300      	movs	r3, #0
 800f13a:	60a3      	str	r3, [r4, #8]
 800f13c:	6963      	ldr	r3, [r4, #20]
 800f13e:	425b      	negs	r3, r3
 800f140:	61a3      	str	r3, [r4, #24]
 800f142:	6923      	ldr	r3, [r4, #16]
 800f144:	b943      	cbnz	r3, 800f158 <__swsetup_r+0xa8>
 800f146:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f14a:	d1c4      	bne.n	800f0d6 <__swsetup_r+0x26>
 800f14c:	bd38      	pop	{r3, r4, r5, pc}
 800f14e:	0781      	lsls	r1, r0, #30
 800f150:	bf58      	it	pl
 800f152:	6963      	ldrpl	r3, [r4, #20]
 800f154:	60a3      	str	r3, [r4, #8]
 800f156:	e7f4      	b.n	800f142 <__swsetup_r+0x92>
 800f158:	2000      	movs	r0, #0
 800f15a:	e7f7      	b.n	800f14c <__swsetup_r+0x9c>
 800f15c:	200000a0 	.word	0x200000a0

0800f160 <memset>:
 800f160:	4402      	add	r2, r0
 800f162:	4603      	mov	r3, r0
 800f164:	4293      	cmp	r3, r2
 800f166:	d100      	bne.n	800f16a <memset+0xa>
 800f168:	4770      	bx	lr
 800f16a:	f803 1b01 	strb.w	r1, [r3], #1
 800f16e:	e7f9      	b.n	800f164 <memset+0x4>

0800f170 <strncpy>:
 800f170:	b510      	push	{r4, lr}
 800f172:	3901      	subs	r1, #1
 800f174:	4603      	mov	r3, r0
 800f176:	b132      	cbz	r2, 800f186 <strncpy+0x16>
 800f178:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f17c:	f803 4b01 	strb.w	r4, [r3], #1
 800f180:	3a01      	subs	r2, #1
 800f182:	2c00      	cmp	r4, #0
 800f184:	d1f7      	bne.n	800f176 <strncpy+0x6>
 800f186:	441a      	add	r2, r3
 800f188:	2100      	movs	r1, #0
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d100      	bne.n	800f190 <strncpy+0x20>
 800f18e:	bd10      	pop	{r4, pc}
 800f190:	f803 1b01 	strb.w	r1, [r3], #1
 800f194:	e7f9      	b.n	800f18a <strncpy+0x1a>
	...

0800f198 <_localeconv_r>:
 800f198:	4800      	ldr	r0, [pc, #0]	; (800f19c <_localeconv_r+0x4>)
 800f19a:	4770      	bx	lr
 800f19c:	20000194 	.word	0x20000194

0800f1a0 <_close_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d06      	ldr	r5, [pc, #24]	; (800f1bc <_close_r+0x1c>)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	602b      	str	r3, [r5, #0]
 800f1ac:	f7f4 f9eb 	bl	8003586 <_close>
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d102      	bne.n	800f1ba <_close_r+0x1a>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	b103      	cbz	r3, 800f1ba <_close_r+0x1a>
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	20009ffc 	.word	0x20009ffc

0800f1c0 <_reclaim_reent>:
 800f1c0:	4b29      	ldr	r3, [pc, #164]	; (800f268 <_reclaim_reent+0xa8>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4283      	cmp	r3, r0
 800f1c6:	b570      	push	{r4, r5, r6, lr}
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	d04b      	beq.n	800f264 <_reclaim_reent+0xa4>
 800f1cc:	69c3      	ldr	r3, [r0, #28]
 800f1ce:	b143      	cbz	r3, 800f1e2 <_reclaim_reent+0x22>
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d144      	bne.n	800f260 <_reclaim_reent+0xa0>
 800f1d6:	69e3      	ldr	r3, [r4, #28]
 800f1d8:	6819      	ldr	r1, [r3, #0]
 800f1da:	b111      	cbz	r1, 800f1e2 <_reclaim_reent+0x22>
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 ff31 	bl	8010044 <_free_r>
 800f1e2:	6961      	ldr	r1, [r4, #20]
 800f1e4:	b111      	cbz	r1, 800f1ec <_reclaim_reent+0x2c>
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f000 ff2c 	bl	8010044 <_free_r>
 800f1ec:	69e1      	ldr	r1, [r4, #28]
 800f1ee:	b111      	cbz	r1, 800f1f6 <_reclaim_reent+0x36>
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 ff27 	bl	8010044 <_free_r>
 800f1f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f1f8:	b111      	cbz	r1, 800f200 <_reclaim_reent+0x40>
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f000 ff22 	bl	8010044 <_free_r>
 800f200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f202:	b111      	cbz	r1, 800f20a <_reclaim_reent+0x4a>
 800f204:	4620      	mov	r0, r4
 800f206:	f000 ff1d 	bl	8010044 <_free_r>
 800f20a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f20c:	b111      	cbz	r1, 800f214 <_reclaim_reent+0x54>
 800f20e:	4620      	mov	r0, r4
 800f210:	f000 ff18 	bl	8010044 <_free_r>
 800f214:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f216:	b111      	cbz	r1, 800f21e <_reclaim_reent+0x5e>
 800f218:	4620      	mov	r0, r4
 800f21a:	f000 ff13 	bl	8010044 <_free_r>
 800f21e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f220:	b111      	cbz	r1, 800f228 <_reclaim_reent+0x68>
 800f222:	4620      	mov	r0, r4
 800f224:	f000 ff0e 	bl	8010044 <_free_r>
 800f228:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f22a:	b111      	cbz	r1, 800f232 <_reclaim_reent+0x72>
 800f22c:	4620      	mov	r0, r4
 800f22e:	f000 ff09 	bl	8010044 <_free_r>
 800f232:	6a23      	ldr	r3, [r4, #32]
 800f234:	b1b3      	cbz	r3, 800f264 <_reclaim_reent+0xa4>
 800f236:	4620      	mov	r0, r4
 800f238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f23c:	4718      	bx	r3
 800f23e:	5949      	ldr	r1, [r1, r5]
 800f240:	b941      	cbnz	r1, 800f254 <_reclaim_reent+0x94>
 800f242:	3504      	adds	r5, #4
 800f244:	69e3      	ldr	r3, [r4, #28]
 800f246:	2d80      	cmp	r5, #128	; 0x80
 800f248:	68d9      	ldr	r1, [r3, #12]
 800f24a:	d1f8      	bne.n	800f23e <_reclaim_reent+0x7e>
 800f24c:	4620      	mov	r0, r4
 800f24e:	f000 fef9 	bl	8010044 <_free_r>
 800f252:	e7c0      	b.n	800f1d6 <_reclaim_reent+0x16>
 800f254:	680e      	ldr	r6, [r1, #0]
 800f256:	4620      	mov	r0, r4
 800f258:	f000 fef4 	bl	8010044 <_free_r>
 800f25c:	4631      	mov	r1, r6
 800f25e:	e7ef      	b.n	800f240 <_reclaim_reent+0x80>
 800f260:	2500      	movs	r5, #0
 800f262:	e7ef      	b.n	800f244 <_reclaim_reent+0x84>
 800f264:	bd70      	pop	{r4, r5, r6, pc}
 800f266:	bf00      	nop
 800f268:	200000a0 	.word	0x200000a0

0800f26c <_lseek_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	4d07      	ldr	r5, [pc, #28]	; (800f28c <_lseek_r+0x20>)
 800f270:	4604      	mov	r4, r0
 800f272:	4608      	mov	r0, r1
 800f274:	4611      	mov	r1, r2
 800f276:	2200      	movs	r2, #0
 800f278:	602a      	str	r2, [r5, #0]
 800f27a:	461a      	mov	r2, r3
 800f27c:	f7f4 f9aa 	bl	80035d4 <_lseek>
 800f280:	1c43      	adds	r3, r0, #1
 800f282:	d102      	bne.n	800f28a <_lseek_r+0x1e>
 800f284:	682b      	ldr	r3, [r5, #0]
 800f286:	b103      	cbz	r3, 800f28a <_lseek_r+0x1e>
 800f288:	6023      	str	r3, [r4, #0]
 800f28a:	bd38      	pop	{r3, r4, r5, pc}
 800f28c:	20009ffc 	.word	0x20009ffc

0800f290 <_read_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4d07      	ldr	r5, [pc, #28]	; (800f2b0 <_read_r+0x20>)
 800f294:	4604      	mov	r4, r0
 800f296:	4608      	mov	r0, r1
 800f298:	4611      	mov	r1, r2
 800f29a:	2200      	movs	r2, #0
 800f29c:	602a      	str	r2, [r5, #0]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	f7f4 f938 	bl	8003514 <_read>
 800f2a4:	1c43      	adds	r3, r0, #1
 800f2a6:	d102      	bne.n	800f2ae <_read_r+0x1e>
 800f2a8:	682b      	ldr	r3, [r5, #0]
 800f2aa:	b103      	cbz	r3, 800f2ae <_read_r+0x1e>
 800f2ac:	6023      	str	r3, [r4, #0]
 800f2ae:	bd38      	pop	{r3, r4, r5, pc}
 800f2b0:	20009ffc 	.word	0x20009ffc

0800f2b4 <_write_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4d07      	ldr	r5, [pc, #28]	; (800f2d4 <_write_r+0x20>)
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	4608      	mov	r0, r1
 800f2bc:	4611      	mov	r1, r2
 800f2be:	2200      	movs	r2, #0
 800f2c0:	602a      	str	r2, [r5, #0]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	f7f4 f943 	bl	800354e <_write>
 800f2c8:	1c43      	adds	r3, r0, #1
 800f2ca:	d102      	bne.n	800f2d2 <_write_r+0x1e>
 800f2cc:	682b      	ldr	r3, [r5, #0]
 800f2ce:	b103      	cbz	r3, 800f2d2 <_write_r+0x1e>
 800f2d0:	6023      	str	r3, [r4, #0]
 800f2d2:	bd38      	pop	{r3, r4, r5, pc}
 800f2d4:	20009ffc 	.word	0x20009ffc

0800f2d8 <__errno>:
 800f2d8:	4b01      	ldr	r3, [pc, #4]	; (800f2e0 <__errno+0x8>)
 800f2da:	6818      	ldr	r0, [r3, #0]
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	200000a0 	.word	0x200000a0

0800f2e4 <__libc_init_array>:
 800f2e4:	b570      	push	{r4, r5, r6, lr}
 800f2e6:	4d0d      	ldr	r5, [pc, #52]	; (800f31c <__libc_init_array+0x38>)
 800f2e8:	4c0d      	ldr	r4, [pc, #52]	; (800f320 <__libc_init_array+0x3c>)
 800f2ea:	1b64      	subs	r4, r4, r5
 800f2ec:	10a4      	asrs	r4, r4, #2
 800f2ee:	2600      	movs	r6, #0
 800f2f0:	42a6      	cmp	r6, r4
 800f2f2:	d109      	bne.n	800f308 <__libc_init_array+0x24>
 800f2f4:	4d0b      	ldr	r5, [pc, #44]	; (800f324 <__libc_init_array+0x40>)
 800f2f6:	4c0c      	ldr	r4, [pc, #48]	; (800f328 <__libc_init_array+0x44>)
 800f2f8:	f001 fffe 	bl	80112f8 <_init>
 800f2fc:	1b64      	subs	r4, r4, r5
 800f2fe:	10a4      	asrs	r4, r4, #2
 800f300:	2600      	movs	r6, #0
 800f302:	42a6      	cmp	r6, r4
 800f304:	d105      	bne.n	800f312 <__libc_init_array+0x2e>
 800f306:	bd70      	pop	{r4, r5, r6, pc}
 800f308:	f855 3b04 	ldr.w	r3, [r5], #4
 800f30c:	4798      	blx	r3
 800f30e:	3601      	adds	r6, #1
 800f310:	e7ee      	b.n	800f2f0 <__libc_init_array+0xc>
 800f312:	f855 3b04 	ldr.w	r3, [r5], #4
 800f316:	4798      	blx	r3
 800f318:	3601      	adds	r6, #1
 800f31a:	e7f2      	b.n	800f302 <__libc_init_array+0x1e>
 800f31c:	08011e54 	.word	0x08011e54
 800f320:	08011e54 	.word	0x08011e54
 800f324:	08011e54 	.word	0x08011e54
 800f328:	08011e58 	.word	0x08011e58

0800f32c <__retarget_lock_acquire_recursive>:
 800f32c:	4770      	bx	lr

0800f32e <__retarget_lock_release_recursive>:
 800f32e:	4770      	bx	lr

0800f330 <memcpy>:
 800f330:	440a      	add	r2, r1
 800f332:	4291      	cmp	r1, r2
 800f334:	f100 33ff 	add.w	r3, r0, #4294967295
 800f338:	d100      	bne.n	800f33c <memcpy+0xc>
 800f33a:	4770      	bx	lr
 800f33c:	b510      	push	{r4, lr}
 800f33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f342:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f346:	4291      	cmp	r1, r2
 800f348:	d1f9      	bne.n	800f33e <memcpy+0xe>
 800f34a:	bd10      	pop	{r4, pc}

0800f34c <quorem>:
 800f34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f350:	6903      	ldr	r3, [r0, #16]
 800f352:	690c      	ldr	r4, [r1, #16]
 800f354:	42a3      	cmp	r3, r4
 800f356:	4607      	mov	r7, r0
 800f358:	db7e      	blt.n	800f458 <quorem+0x10c>
 800f35a:	3c01      	subs	r4, #1
 800f35c:	f101 0814 	add.w	r8, r1, #20
 800f360:	f100 0514 	add.w	r5, r0, #20
 800f364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f368:	9301      	str	r3, [sp, #4]
 800f36a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f36e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f372:	3301      	adds	r3, #1
 800f374:	429a      	cmp	r2, r3
 800f376:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f37a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f37e:	fbb2 f6f3 	udiv	r6, r2, r3
 800f382:	d331      	bcc.n	800f3e8 <quorem+0x9c>
 800f384:	f04f 0e00 	mov.w	lr, #0
 800f388:	4640      	mov	r0, r8
 800f38a:	46ac      	mov	ip, r5
 800f38c:	46f2      	mov	sl, lr
 800f38e:	f850 2b04 	ldr.w	r2, [r0], #4
 800f392:	b293      	uxth	r3, r2
 800f394:	fb06 e303 	mla	r3, r6, r3, lr
 800f398:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f39c:	0c1a      	lsrs	r2, r3, #16
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	ebaa 0303 	sub.w	r3, sl, r3
 800f3a4:	f8dc a000 	ldr.w	sl, [ip]
 800f3a8:	fa13 f38a 	uxtah	r3, r3, sl
 800f3ac:	fb06 220e 	mla	r2, r6, lr, r2
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	9b00      	ldr	r3, [sp, #0]
 800f3b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f3b8:	b292      	uxth	r2, r2
 800f3ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f3be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3c2:	f8bd 3000 	ldrh.w	r3, [sp]
 800f3c6:	4581      	cmp	r9, r0
 800f3c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3cc:	f84c 3b04 	str.w	r3, [ip], #4
 800f3d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f3d4:	d2db      	bcs.n	800f38e <quorem+0x42>
 800f3d6:	f855 300b 	ldr.w	r3, [r5, fp]
 800f3da:	b92b      	cbnz	r3, 800f3e8 <quorem+0x9c>
 800f3dc:	9b01      	ldr	r3, [sp, #4]
 800f3de:	3b04      	subs	r3, #4
 800f3e0:	429d      	cmp	r5, r3
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	d32c      	bcc.n	800f440 <quorem+0xf4>
 800f3e6:	613c      	str	r4, [r7, #16]
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	f001 f9a7 	bl	801073c <__mcmp>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	db22      	blt.n	800f438 <quorem+0xec>
 800f3f2:	3601      	adds	r6, #1
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3fc:	f8d1 c000 	ldr.w	ip, [r1]
 800f400:	b293      	uxth	r3, r2
 800f402:	1ac3      	subs	r3, r0, r3
 800f404:	0c12      	lsrs	r2, r2, #16
 800f406:	fa13 f38c 	uxtah	r3, r3, ip
 800f40a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f40e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f412:	b29b      	uxth	r3, r3
 800f414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f418:	45c1      	cmp	r9, r8
 800f41a:	f841 3b04 	str.w	r3, [r1], #4
 800f41e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f422:	d2e9      	bcs.n	800f3f8 <quorem+0xac>
 800f424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f428:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f42c:	b922      	cbnz	r2, 800f438 <quorem+0xec>
 800f42e:	3b04      	subs	r3, #4
 800f430:	429d      	cmp	r5, r3
 800f432:	461a      	mov	r2, r3
 800f434:	d30a      	bcc.n	800f44c <quorem+0x100>
 800f436:	613c      	str	r4, [r7, #16]
 800f438:	4630      	mov	r0, r6
 800f43a:	b003      	add	sp, #12
 800f43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f440:	6812      	ldr	r2, [r2, #0]
 800f442:	3b04      	subs	r3, #4
 800f444:	2a00      	cmp	r2, #0
 800f446:	d1ce      	bne.n	800f3e6 <quorem+0x9a>
 800f448:	3c01      	subs	r4, #1
 800f44a:	e7c9      	b.n	800f3e0 <quorem+0x94>
 800f44c:	6812      	ldr	r2, [r2, #0]
 800f44e:	3b04      	subs	r3, #4
 800f450:	2a00      	cmp	r2, #0
 800f452:	d1f0      	bne.n	800f436 <quorem+0xea>
 800f454:	3c01      	subs	r4, #1
 800f456:	e7eb      	b.n	800f430 <quorem+0xe4>
 800f458:	2000      	movs	r0, #0
 800f45a:	e7ee      	b.n	800f43a <quorem+0xee>
 800f45c:	0000      	movs	r0, r0
	...

0800f460 <_dtoa_r>:
 800f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f464:	ed2d 8b04 	vpush	{d8-d9}
 800f468:	69c5      	ldr	r5, [r0, #28]
 800f46a:	b093      	sub	sp, #76	; 0x4c
 800f46c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f470:	ec57 6b10 	vmov	r6, r7, d0
 800f474:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f478:	9107      	str	r1, [sp, #28]
 800f47a:	4604      	mov	r4, r0
 800f47c:	920a      	str	r2, [sp, #40]	; 0x28
 800f47e:	930d      	str	r3, [sp, #52]	; 0x34
 800f480:	b975      	cbnz	r5, 800f4a0 <_dtoa_r+0x40>
 800f482:	2010      	movs	r0, #16
 800f484:	f000 fe2a 	bl	80100dc <malloc>
 800f488:	4602      	mov	r2, r0
 800f48a:	61e0      	str	r0, [r4, #28]
 800f48c:	b920      	cbnz	r0, 800f498 <_dtoa_r+0x38>
 800f48e:	4bae      	ldr	r3, [pc, #696]	; (800f748 <_dtoa_r+0x2e8>)
 800f490:	21ef      	movs	r1, #239	; 0xef
 800f492:	48ae      	ldr	r0, [pc, #696]	; (800f74c <_dtoa_r+0x2ec>)
 800f494:	f001 fd06 	bl	8010ea4 <__assert_func>
 800f498:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f49c:	6005      	str	r5, [r0, #0]
 800f49e:	60c5      	str	r5, [r0, #12]
 800f4a0:	69e3      	ldr	r3, [r4, #28]
 800f4a2:	6819      	ldr	r1, [r3, #0]
 800f4a4:	b151      	cbz	r1, 800f4bc <_dtoa_r+0x5c>
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	604a      	str	r2, [r1, #4]
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	4093      	lsls	r3, r2
 800f4ae:	608b      	str	r3, [r1, #8]
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f000 ff07 	bl	80102c4 <_Bfree>
 800f4b6:	69e3      	ldr	r3, [r4, #28]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	601a      	str	r2, [r3, #0]
 800f4bc:	1e3b      	subs	r3, r7, #0
 800f4be:	bfbb      	ittet	lt
 800f4c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f4c4:	9303      	strlt	r3, [sp, #12]
 800f4c6:	2300      	movge	r3, #0
 800f4c8:	2201      	movlt	r2, #1
 800f4ca:	bfac      	ite	ge
 800f4cc:	f8c8 3000 	strge.w	r3, [r8]
 800f4d0:	f8c8 2000 	strlt.w	r2, [r8]
 800f4d4:	4b9e      	ldr	r3, [pc, #632]	; (800f750 <_dtoa_r+0x2f0>)
 800f4d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f4da:	ea33 0308 	bics.w	r3, r3, r8
 800f4de:	d11b      	bne.n	800f518 <_dtoa_r+0xb8>
 800f4e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f4e6:	6013      	str	r3, [r2, #0]
 800f4e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f4ec:	4333      	orrs	r3, r6
 800f4ee:	f000 8593 	beq.w	8010018 <_dtoa_r+0xbb8>
 800f4f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4f4:	b963      	cbnz	r3, 800f510 <_dtoa_r+0xb0>
 800f4f6:	4b97      	ldr	r3, [pc, #604]	; (800f754 <_dtoa_r+0x2f4>)
 800f4f8:	e027      	b.n	800f54a <_dtoa_r+0xea>
 800f4fa:	4b97      	ldr	r3, [pc, #604]	; (800f758 <_dtoa_r+0x2f8>)
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	3308      	adds	r3, #8
 800f500:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f502:	6013      	str	r3, [r2, #0]
 800f504:	9800      	ldr	r0, [sp, #0]
 800f506:	b013      	add	sp, #76	; 0x4c
 800f508:	ecbd 8b04 	vpop	{d8-d9}
 800f50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f510:	4b90      	ldr	r3, [pc, #576]	; (800f754 <_dtoa_r+0x2f4>)
 800f512:	9300      	str	r3, [sp, #0]
 800f514:	3303      	adds	r3, #3
 800f516:	e7f3      	b.n	800f500 <_dtoa_r+0xa0>
 800f518:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f51c:	2200      	movs	r2, #0
 800f51e:	ec51 0b17 	vmov	r0, r1, d7
 800f522:	eeb0 8a47 	vmov.f32	s16, s14
 800f526:	eef0 8a67 	vmov.f32	s17, s15
 800f52a:	2300      	movs	r3, #0
 800f52c:	f7f1 fafc 	bl	8000b28 <__aeabi_dcmpeq>
 800f530:	4681      	mov	r9, r0
 800f532:	b160      	cbz	r0, 800f54e <_dtoa_r+0xee>
 800f534:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f536:	2301      	movs	r3, #1
 800f538:	6013      	str	r3, [r2, #0]
 800f53a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	f000 8568 	beq.w	8010012 <_dtoa_r+0xbb2>
 800f542:	4b86      	ldr	r3, [pc, #536]	; (800f75c <_dtoa_r+0x2fc>)
 800f544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f546:	6013      	str	r3, [r2, #0]
 800f548:	3b01      	subs	r3, #1
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	e7da      	b.n	800f504 <_dtoa_r+0xa4>
 800f54e:	aa10      	add	r2, sp, #64	; 0x40
 800f550:	a911      	add	r1, sp, #68	; 0x44
 800f552:	4620      	mov	r0, r4
 800f554:	eeb0 0a48 	vmov.f32	s0, s16
 800f558:	eef0 0a68 	vmov.f32	s1, s17
 800f55c:	f001 f994 	bl	8010888 <__d2b>
 800f560:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f564:	4682      	mov	sl, r0
 800f566:	2d00      	cmp	r5, #0
 800f568:	d07f      	beq.n	800f66a <_dtoa_r+0x20a>
 800f56a:	ee18 3a90 	vmov	r3, s17
 800f56e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f572:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f576:	ec51 0b18 	vmov	r0, r1, d8
 800f57a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f57e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f582:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f586:	4619      	mov	r1, r3
 800f588:	2200      	movs	r2, #0
 800f58a:	4b75      	ldr	r3, [pc, #468]	; (800f760 <_dtoa_r+0x300>)
 800f58c:	f7f0 feac 	bl	80002e8 <__aeabi_dsub>
 800f590:	a367      	add	r3, pc, #412	; (adr r3, 800f730 <_dtoa_r+0x2d0>)
 800f592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f596:	f7f1 f85f 	bl	8000658 <__aeabi_dmul>
 800f59a:	a367      	add	r3, pc, #412	; (adr r3, 800f738 <_dtoa_r+0x2d8>)
 800f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a0:	f7f0 fea4 	bl	80002ec <__adddf3>
 800f5a4:	4606      	mov	r6, r0
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	460f      	mov	r7, r1
 800f5aa:	f7f0 ffeb 	bl	8000584 <__aeabi_i2d>
 800f5ae:	a364      	add	r3, pc, #400	; (adr r3, 800f740 <_dtoa_r+0x2e0>)
 800f5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b4:	f7f1 f850 	bl	8000658 <__aeabi_dmul>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4630      	mov	r0, r6
 800f5be:	4639      	mov	r1, r7
 800f5c0:	f7f0 fe94 	bl	80002ec <__adddf3>
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	460f      	mov	r7, r1
 800f5c8:	f7f1 faf6 	bl	8000bb8 <__aeabi_d2iz>
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4683      	mov	fp, r0
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	4639      	mov	r1, r7
 800f5d6:	f7f1 fab1 	bl	8000b3c <__aeabi_dcmplt>
 800f5da:	b148      	cbz	r0, 800f5f0 <_dtoa_r+0x190>
 800f5dc:	4658      	mov	r0, fp
 800f5de:	f7f0 ffd1 	bl	8000584 <__aeabi_i2d>
 800f5e2:	4632      	mov	r2, r6
 800f5e4:	463b      	mov	r3, r7
 800f5e6:	f7f1 fa9f 	bl	8000b28 <__aeabi_dcmpeq>
 800f5ea:	b908      	cbnz	r0, 800f5f0 <_dtoa_r+0x190>
 800f5ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f5f0:	f1bb 0f16 	cmp.w	fp, #22
 800f5f4:	d857      	bhi.n	800f6a6 <_dtoa_r+0x246>
 800f5f6:	4b5b      	ldr	r3, [pc, #364]	; (800f764 <_dtoa_r+0x304>)
 800f5f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f600:	ec51 0b18 	vmov	r0, r1, d8
 800f604:	f7f1 fa9a 	bl	8000b3c <__aeabi_dcmplt>
 800f608:	2800      	cmp	r0, #0
 800f60a:	d04e      	beq.n	800f6aa <_dtoa_r+0x24a>
 800f60c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f610:	2300      	movs	r3, #0
 800f612:	930c      	str	r3, [sp, #48]	; 0x30
 800f614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f616:	1b5b      	subs	r3, r3, r5
 800f618:	1e5a      	subs	r2, r3, #1
 800f61a:	bf45      	ittet	mi
 800f61c:	f1c3 0301 	rsbmi	r3, r3, #1
 800f620:	9305      	strmi	r3, [sp, #20]
 800f622:	2300      	movpl	r3, #0
 800f624:	2300      	movmi	r3, #0
 800f626:	9206      	str	r2, [sp, #24]
 800f628:	bf54      	ite	pl
 800f62a:	9305      	strpl	r3, [sp, #20]
 800f62c:	9306      	strmi	r3, [sp, #24]
 800f62e:	f1bb 0f00 	cmp.w	fp, #0
 800f632:	db3c      	blt.n	800f6ae <_dtoa_r+0x24e>
 800f634:	9b06      	ldr	r3, [sp, #24]
 800f636:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f63a:	445b      	add	r3, fp
 800f63c:	9306      	str	r3, [sp, #24]
 800f63e:	2300      	movs	r3, #0
 800f640:	9308      	str	r3, [sp, #32]
 800f642:	9b07      	ldr	r3, [sp, #28]
 800f644:	2b09      	cmp	r3, #9
 800f646:	d868      	bhi.n	800f71a <_dtoa_r+0x2ba>
 800f648:	2b05      	cmp	r3, #5
 800f64a:	bfc4      	itt	gt
 800f64c:	3b04      	subgt	r3, #4
 800f64e:	9307      	strgt	r3, [sp, #28]
 800f650:	9b07      	ldr	r3, [sp, #28]
 800f652:	f1a3 0302 	sub.w	r3, r3, #2
 800f656:	bfcc      	ite	gt
 800f658:	2500      	movgt	r5, #0
 800f65a:	2501      	movle	r5, #1
 800f65c:	2b03      	cmp	r3, #3
 800f65e:	f200 8085 	bhi.w	800f76c <_dtoa_r+0x30c>
 800f662:	e8df f003 	tbb	[pc, r3]
 800f666:	3b2e      	.short	0x3b2e
 800f668:	5839      	.short	0x5839
 800f66a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f66e:	441d      	add	r5, r3
 800f670:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f674:	2b20      	cmp	r3, #32
 800f676:	bfc1      	itttt	gt
 800f678:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f67c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f680:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f684:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f688:	bfd6      	itet	le
 800f68a:	f1c3 0320 	rsble	r3, r3, #32
 800f68e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f692:	fa06 f003 	lslle.w	r0, r6, r3
 800f696:	f7f0 ff65 	bl	8000564 <__aeabi_ui2d>
 800f69a:	2201      	movs	r2, #1
 800f69c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f6a0:	3d01      	subs	r5, #1
 800f6a2:	920e      	str	r2, [sp, #56]	; 0x38
 800f6a4:	e76f      	b.n	800f586 <_dtoa_r+0x126>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e7b3      	b.n	800f612 <_dtoa_r+0x1b2>
 800f6aa:	900c      	str	r0, [sp, #48]	; 0x30
 800f6ac:	e7b2      	b.n	800f614 <_dtoa_r+0x1b4>
 800f6ae:	9b05      	ldr	r3, [sp, #20]
 800f6b0:	eba3 030b 	sub.w	r3, r3, fp
 800f6b4:	9305      	str	r3, [sp, #20]
 800f6b6:	f1cb 0300 	rsb	r3, fp, #0
 800f6ba:	9308      	str	r3, [sp, #32]
 800f6bc:	2300      	movs	r3, #0
 800f6be:	930b      	str	r3, [sp, #44]	; 0x2c
 800f6c0:	e7bf      	b.n	800f642 <_dtoa_r+0x1e2>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	dc52      	bgt.n	800f772 <_dtoa_r+0x312>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	9301      	str	r3, [sp, #4]
 800f6d0:	9304      	str	r3, [sp, #16]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	920a      	str	r2, [sp, #40]	; 0x28
 800f6d6:	e00b      	b.n	800f6f0 <_dtoa_r+0x290>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	e7f3      	b.n	800f6c4 <_dtoa_r+0x264>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9309      	str	r3, [sp, #36]	; 0x24
 800f6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6e2:	445b      	add	r3, fp
 800f6e4:	9301      	str	r3, [sp, #4]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	9304      	str	r3, [sp, #16]
 800f6ec:	bfb8      	it	lt
 800f6ee:	2301      	movlt	r3, #1
 800f6f0:	69e0      	ldr	r0, [r4, #28]
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	2204      	movs	r2, #4
 800f6f6:	f102 0614 	add.w	r6, r2, #20
 800f6fa:	429e      	cmp	r6, r3
 800f6fc:	d93d      	bls.n	800f77a <_dtoa_r+0x31a>
 800f6fe:	6041      	str	r1, [r0, #4]
 800f700:	4620      	mov	r0, r4
 800f702:	f000 fd9f 	bl	8010244 <_Balloc>
 800f706:	9000      	str	r0, [sp, #0]
 800f708:	2800      	cmp	r0, #0
 800f70a:	d139      	bne.n	800f780 <_dtoa_r+0x320>
 800f70c:	4b16      	ldr	r3, [pc, #88]	; (800f768 <_dtoa_r+0x308>)
 800f70e:	4602      	mov	r2, r0
 800f710:	f240 11af 	movw	r1, #431	; 0x1af
 800f714:	e6bd      	b.n	800f492 <_dtoa_r+0x32>
 800f716:	2301      	movs	r3, #1
 800f718:	e7e1      	b.n	800f6de <_dtoa_r+0x27e>
 800f71a:	2501      	movs	r5, #1
 800f71c:	2300      	movs	r3, #0
 800f71e:	9307      	str	r3, [sp, #28]
 800f720:	9509      	str	r5, [sp, #36]	; 0x24
 800f722:	f04f 33ff 	mov.w	r3, #4294967295
 800f726:	9301      	str	r3, [sp, #4]
 800f728:	9304      	str	r3, [sp, #16]
 800f72a:	2200      	movs	r2, #0
 800f72c:	2312      	movs	r3, #18
 800f72e:	e7d1      	b.n	800f6d4 <_dtoa_r+0x274>
 800f730:	636f4361 	.word	0x636f4361
 800f734:	3fd287a7 	.word	0x3fd287a7
 800f738:	8b60c8b3 	.word	0x8b60c8b3
 800f73c:	3fc68a28 	.word	0x3fc68a28
 800f740:	509f79fb 	.word	0x509f79fb
 800f744:	3fd34413 	.word	0x3fd34413
 800f748:	08011b1d 	.word	0x08011b1d
 800f74c:	08011b34 	.word	0x08011b34
 800f750:	7ff00000 	.word	0x7ff00000
 800f754:	08011b19 	.word	0x08011b19
 800f758:	08011b10 	.word	0x08011b10
 800f75c:	08011aed 	.word	0x08011aed
 800f760:	3ff80000 	.word	0x3ff80000
 800f764:	08011c20 	.word	0x08011c20
 800f768:	08011b8c 	.word	0x08011b8c
 800f76c:	2301      	movs	r3, #1
 800f76e:	9309      	str	r3, [sp, #36]	; 0x24
 800f770:	e7d7      	b.n	800f722 <_dtoa_r+0x2c2>
 800f772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f774:	9301      	str	r3, [sp, #4]
 800f776:	9304      	str	r3, [sp, #16]
 800f778:	e7ba      	b.n	800f6f0 <_dtoa_r+0x290>
 800f77a:	3101      	adds	r1, #1
 800f77c:	0052      	lsls	r2, r2, #1
 800f77e:	e7ba      	b.n	800f6f6 <_dtoa_r+0x296>
 800f780:	69e3      	ldr	r3, [r4, #28]
 800f782:	9a00      	ldr	r2, [sp, #0]
 800f784:	601a      	str	r2, [r3, #0]
 800f786:	9b04      	ldr	r3, [sp, #16]
 800f788:	2b0e      	cmp	r3, #14
 800f78a:	f200 80a8 	bhi.w	800f8de <_dtoa_r+0x47e>
 800f78e:	2d00      	cmp	r5, #0
 800f790:	f000 80a5 	beq.w	800f8de <_dtoa_r+0x47e>
 800f794:	f1bb 0f00 	cmp.w	fp, #0
 800f798:	dd38      	ble.n	800f80c <_dtoa_r+0x3ac>
 800f79a:	4bc0      	ldr	r3, [pc, #768]	; (800fa9c <_dtoa_r+0x63c>)
 800f79c:	f00b 020f 	and.w	r2, fp, #15
 800f7a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f7a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f7ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f7b0:	d019      	beq.n	800f7e6 <_dtoa_r+0x386>
 800f7b2:	4bbb      	ldr	r3, [pc, #748]	; (800faa0 <_dtoa_r+0x640>)
 800f7b4:	ec51 0b18 	vmov	r0, r1, d8
 800f7b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f7bc:	f7f1 f876 	bl	80008ac <__aeabi_ddiv>
 800f7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7c4:	f008 080f 	and.w	r8, r8, #15
 800f7c8:	2503      	movs	r5, #3
 800f7ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800faa0 <_dtoa_r+0x640>
 800f7ce:	f1b8 0f00 	cmp.w	r8, #0
 800f7d2:	d10a      	bne.n	800f7ea <_dtoa_r+0x38a>
 800f7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7d8:	4632      	mov	r2, r6
 800f7da:	463b      	mov	r3, r7
 800f7dc:	f7f1 f866 	bl	80008ac <__aeabi_ddiv>
 800f7e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7e4:	e02b      	b.n	800f83e <_dtoa_r+0x3de>
 800f7e6:	2502      	movs	r5, #2
 800f7e8:	e7ef      	b.n	800f7ca <_dtoa_r+0x36a>
 800f7ea:	f018 0f01 	tst.w	r8, #1
 800f7ee:	d008      	beq.n	800f802 <_dtoa_r+0x3a2>
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f7f8:	f7f0 ff2e 	bl	8000658 <__aeabi_dmul>
 800f7fc:	3501      	adds	r5, #1
 800f7fe:	4606      	mov	r6, r0
 800f800:	460f      	mov	r7, r1
 800f802:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f806:	f109 0908 	add.w	r9, r9, #8
 800f80a:	e7e0      	b.n	800f7ce <_dtoa_r+0x36e>
 800f80c:	f000 809f 	beq.w	800f94e <_dtoa_r+0x4ee>
 800f810:	f1cb 0600 	rsb	r6, fp, #0
 800f814:	4ba1      	ldr	r3, [pc, #644]	; (800fa9c <_dtoa_r+0x63c>)
 800f816:	4fa2      	ldr	r7, [pc, #648]	; (800faa0 <_dtoa_r+0x640>)
 800f818:	f006 020f 	and.w	r2, r6, #15
 800f81c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f824:	ec51 0b18 	vmov	r0, r1, d8
 800f828:	f7f0 ff16 	bl	8000658 <__aeabi_dmul>
 800f82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f830:	1136      	asrs	r6, r6, #4
 800f832:	2300      	movs	r3, #0
 800f834:	2502      	movs	r5, #2
 800f836:	2e00      	cmp	r6, #0
 800f838:	d17e      	bne.n	800f938 <_dtoa_r+0x4d8>
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d1d0      	bne.n	800f7e0 <_dtoa_r+0x380>
 800f83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f840:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f844:	2b00      	cmp	r3, #0
 800f846:	f000 8084 	beq.w	800f952 <_dtoa_r+0x4f2>
 800f84a:	4b96      	ldr	r3, [pc, #600]	; (800faa4 <_dtoa_r+0x644>)
 800f84c:	2200      	movs	r2, #0
 800f84e:	4640      	mov	r0, r8
 800f850:	4649      	mov	r1, r9
 800f852:	f7f1 f973 	bl	8000b3c <__aeabi_dcmplt>
 800f856:	2800      	cmp	r0, #0
 800f858:	d07b      	beq.n	800f952 <_dtoa_r+0x4f2>
 800f85a:	9b04      	ldr	r3, [sp, #16]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d078      	beq.n	800f952 <_dtoa_r+0x4f2>
 800f860:	9b01      	ldr	r3, [sp, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	dd39      	ble.n	800f8da <_dtoa_r+0x47a>
 800f866:	4b90      	ldr	r3, [pc, #576]	; (800faa8 <_dtoa_r+0x648>)
 800f868:	2200      	movs	r2, #0
 800f86a:	4640      	mov	r0, r8
 800f86c:	4649      	mov	r1, r9
 800f86e:	f7f0 fef3 	bl	8000658 <__aeabi_dmul>
 800f872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f876:	9e01      	ldr	r6, [sp, #4]
 800f878:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f87c:	3501      	adds	r5, #1
 800f87e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f882:	4628      	mov	r0, r5
 800f884:	f7f0 fe7e 	bl	8000584 <__aeabi_i2d>
 800f888:	4642      	mov	r2, r8
 800f88a:	464b      	mov	r3, r9
 800f88c:	f7f0 fee4 	bl	8000658 <__aeabi_dmul>
 800f890:	4b86      	ldr	r3, [pc, #536]	; (800faac <_dtoa_r+0x64c>)
 800f892:	2200      	movs	r2, #0
 800f894:	f7f0 fd2a 	bl	80002ec <__adddf3>
 800f898:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f89c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8a0:	9303      	str	r3, [sp, #12]
 800f8a2:	2e00      	cmp	r6, #0
 800f8a4:	d158      	bne.n	800f958 <_dtoa_r+0x4f8>
 800f8a6:	4b82      	ldr	r3, [pc, #520]	; (800fab0 <_dtoa_r+0x650>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	4640      	mov	r0, r8
 800f8ac:	4649      	mov	r1, r9
 800f8ae:	f7f0 fd1b 	bl	80002e8 <__aeabi_dsub>
 800f8b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8b6:	4680      	mov	r8, r0
 800f8b8:	4689      	mov	r9, r1
 800f8ba:	f7f1 f95d 	bl	8000b78 <__aeabi_dcmpgt>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	f040 8296 	bne.w	800fdf0 <_dtoa_r+0x990>
 800f8c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8ce:	4649      	mov	r1, r9
 800f8d0:	f7f1 f934 	bl	8000b3c <__aeabi_dcmplt>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	f040 8289 	bne.w	800fdec <_dtoa_r+0x98c>
 800f8da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f8de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f2c0 814e 	blt.w	800fb82 <_dtoa_r+0x722>
 800f8e6:	f1bb 0f0e 	cmp.w	fp, #14
 800f8ea:	f300 814a 	bgt.w	800fb82 <_dtoa_r+0x722>
 800f8ee:	4b6b      	ldr	r3, [pc, #428]	; (800fa9c <_dtoa_r+0x63c>)
 800f8f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f280 80dc 	bge.w	800fab8 <_dtoa_r+0x658>
 800f900:	9b04      	ldr	r3, [sp, #16]
 800f902:	2b00      	cmp	r3, #0
 800f904:	f300 80d8 	bgt.w	800fab8 <_dtoa_r+0x658>
 800f908:	f040 826f 	bne.w	800fdea <_dtoa_r+0x98a>
 800f90c:	4b68      	ldr	r3, [pc, #416]	; (800fab0 <_dtoa_r+0x650>)
 800f90e:	2200      	movs	r2, #0
 800f910:	4640      	mov	r0, r8
 800f912:	4649      	mov	r1, r9
 800f914:	f7f0 fea0 	bl	8000658 <__aeabi_dmul>
 800f918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f91c:	f7f1 f922 	bl	8000b64 <__aeabi_dcmpge>
 800f920:	9e04      	ldr	r6, [sp, #16]
 800f922:	4637      	mov	r7, r6
 800f924:	2800      	cmp	r0, #0
 800f926:	f040 8245 	bne.w	800fdb4 <_dtoa_r+0x954>
 800f92a:	9d00      	ldr	r5, [sp, #0]
 800f92c:	2331      	movs	r3, #49	; 0x31
 800f92e:	f805 3b01 	strb.w	r3, [r5], #1
 800f932:	f10b 0b01 	add.w	fp, fp, #1
 800f936:	e241      	b.n	800fdbc <_dtoa_r+0x95c>
 800f938:	07f2      	lsls	r2, r6, #31
 800f93a:	d505      	bpl.n	800f948 <_dtoa_r+0x4e8>
 800f93c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f940:	f7f0 fe8a 	bl	8000658 <__aeabi_dmul>
 800f944:	3501      	adds	r5, #1
 800f946:	2301      	movs	r3, #1
 800f948:	1076      	asrs	r6, r6, #1
 800f94a:	3708      	adds	r7, #8
 800f94c:	e773      	b.n	800f836 <_dtoa_r+0x3d6>
 800f94e:	2502      	movs	r5, #2
 800f950:	e775      	b.n	800f83e <_dtoa_r+0x3de>
 800f952:	9e04      	ldr	r6, [sp, #16]
 800f954:	465f      	mov	r7, fp
 800f956:	e792      	b.n	800f87e <_dtoa_r+0x41e>
 800f958:	9900      	ldr	r1, [sp, #0]
 800f95a:	4b50      	ldr	r3, [pc, #320]	; (800fa9c <_dtoa_r+0x63c>)
 800f95c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f960:	4431      	add	r1, r6
 800f962:	9102      	str	r1, [sp, #8]
 800f964:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f966:	eeb0 9a47 	vmov.f32	s18, s14
 800f96a:	eef0 9a67 	vmov.f32	s19, s15
 800f96e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f972:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f976:	2900      	cmp	r1, #0
 800f978:	d044      	beq.n	800fa04 <_dtoa_r+0x5a4>
 800f97a:	494e      	ldr	r1, [pc, #312]	; (800fab4 <_dtoa_r+0x654>)
 800f97c:	2000      	movs	r0, #0
 800f97e:	f7f0 ff95 	bl	80008ac <__aeabi_ddiv>
 800f982:	ec53 2b19 	vmov	r2, r3, d9
 800f986:	f7f0 fcaf 	bl	80002e8 <__aeabi_dsub>
 800f98a:	9d00      	ldr	r5, [sp, #0]
 800f98c:	ec41 0b19 	vmov	d9, r0, r1
 800f990:	4649      	mov	r1, r9
 800f992:	4640      	mov	r0, r8
 800f994:	f7f1 f910 	bl	8000bb8 <__aeabi_d2iz>
 800f998:	4606      	mov	r6, r0
 800f99a:	f7f0 fdf3 	bl	8000584 <__aeabi_i2d>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	4640      	mov	r0, r8
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	f7f0 fc9f 	bl	80002e8 <__aeabi_dsub>
 800f9aa:	3630      	adds	r6, #48	; 0x30
 800f9ac:	f805 6b01 	strb.w	r6, [r5], #1
 800f9b0:	ec53 2b19 	vmov	r2, r3, d9
 800f9b4:	4680      	mov	r8, r0
 800f9b6:	4689      	mov	r9, r1
 800f9b8:	f7f1 f8c0 	bl	8000b3c <__aeabi_dcmplt>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d164      	bne.n	800fa8a <_dtoa_r+0x62a>
 800f9c0:	4642      	mov	r2, r8
 800f9c2:	464b      	mov	r3, r9
 800f9c4:	4937      	ldr	r1, [pc, #220]	; (800faa4 <_dtoa_r+0x644>)
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	f7f0 fc8e 	bl	80002e8 <__aeabi_dsub>
 800f9cc:	ec53 2b19 	vmov	r2, r3, d9
 800f9d0:	f7f1 f8b4 	bl	8000b3c <__aeabi_dcmplt>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	f040 80b6 	bne.w	800fb46 <_dtoa_r+0x6e6>
 800f9da:	9b02      	ldr	r3, [sp, #8]
 800f9dc:	429d      	cmp	r5, r3
 800f9de:	f43f af7c 	beq.w	800f8da <_dtoa_r+0x47a>
 800f9e2:	4b31      	ldr	r3, [pc, #196]	; (800faa8 <_dtoa_r+0x648>)
 800f9e4:	ec51 0b19 	vmov	r0, r1, d9
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f7f0 fe35 	bl	8000658 <__aeabi_dmul>
 800f9ee:	4b2e      	ldr	r3, [pc, #184]	; (800faa8 <_dtoa_r+0x648>)
 800f9f0:	ec41 0b19 	vmov	d9, r0, r1
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	4649      	mov	r1, r9
 800f9fa:	f7f0 fe2d 	bl	8000658 <__aeabi_dmul>
 800f9fe:	4680      	mov	r8, r0
 800fa00:	4689      	mov	r9, r1
 800fa02:	e7c5      	b.n	800f990 <_dtoa_r+0x530>
 800fa04:	ec51 0b17 	vmov	r0, r1, d7
 800fa08:	f7f0 fe26 	bl	8000658 <__aeabi_dmul>
 800fa0c:	9b02      	ldr	r3, [sp, #8]
 800fa0e:	9d00      	ldr	r5, [sp, #0]
 800fa10:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa12:	ec41 0b19 	vmov	d9, r0, r1
 800fa16:	4649      	mov	r1, r9
 800fa18:	4640      	mov	r0, r8
 800fa1a:	f7f1 f8cd 	bl	8000bb8 <__aeabi_d2iz>
 800fa1e:	4606      	mov	r6, r0
 800fa20:	f7f0 fdb0 	bl	8000584 <__aeabi_i2d>
 800fa24:	3630      	adds	r6, #48	; 0x30
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	4640      	mov	r0, r8
 800fa2c:	4649      	mov	r1, r9
 800fa2e:	f7f0 fc5b 	bl	80002e8 <__aeabi_dsub>
 800fa32:	f805 6b01 	strb.w	r6, [r5], #1
 800fa36:	9b02      	ldr	r3, [sp, #8]
 800fa38:	429d      	cmp	r5, r3
 800fa3a:	4680      	mov	r8, r0
 800fa3c:	4689      	mov	r9, r1
 800fa3e:	f04f 0200 	mov.w	r2, #0
 800fa42:	d124      	bne.n	800fa8e <_dtoa_r+0x62e>
 800fa44:	4b1b      	ldr	r3, [pc, #108]	; (800fab4 <_dtoa_r+0x654>)
 800fa46:	ec51 0b19 	vmov	r0, r1, d9
 800fa4a:	f7f0 fc4f 	bl	80002ec <__adddf3>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	4640      	mov	r0, r8
 800fa54:	4649      	mov	r1, r9
 800fa56:	f7f1 f88f 	bl	8000b78 <__aeabi_dcmpgt>
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d173      	bne.n	800fb46 <_dtoa_r+0x6e6>
 800fa5e:	ec53 2b19 	vmov	r2, r3, d9
 800fa62:	4914      	ldr	r1, [pc, #80]	; (800fab4 <_dtoa_r+0x654>)
 800fa64:	2000      	movs	r0, #0
 800fa66:	f7f0 fc3f 	bl	80002e8 <__aeabi_dsub>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	4640      	mov	r0, r8
 800fa70:	4649      	mov	r1, r9
 800fa72:	f7f1 f863 	bl	8000b3c <__aeabi_dcmplt>
 800fa76:	2800      	cmp	r0, #0
 800fa78:	f43f af2f 	beq.w	800f8da <_dtoa_r+0x47a>
 800fa7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fa7e:	1e6b      	subs	r3, r5, #1
 800fa80:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa86:	2b30      	cmp	r3, #48	; 0x30
 800fa88:	d0f8      	beq.n	800fa7c <_dtoa_r+0x61c>
 800fa8a:	46bb      	mov	fp, r7
 800fa8c:	e04a      	b.n	800fb24 <_dtoa_r+0x6c4>
 800fa8e:	4b06      	ldr	r3, [pc, #24]	; (800faa8 <_dtoa_r+0x648>)
 800fa90:	f7f0 fde2 	bl	8000658 <__aeabi_dmul>
 800fa94:	4680      	mov	r8, r0
 800fa96:	4689      	mov	r9, r1
 800fa98:	e7bd      	b.n	800fa16 <_dtoa_r+0x5b6>
 800fa9a:	bf00      	nop
 800fa9c:	08011c20 	.word	0x08011c20
 800faa0:	08011bf8 	.word	0x08011bf8
 800faa4:	3ff00000 	.word	0x3ff00000
 800faa8:	40240000 	.word	0x40240000
 800faac:	401c0000 	.word	0x401c0000
 800fab0:	40140000 	.word	0x40140000
 800fab4:	3fe00000 	.word	0x3fe00000
 800fab8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fabc:	9d00      	ldr	r5, [sp, #0]
 800fabe:	4642      	mov	r2, r8
 800fac0:	464b      	mov	r3, r9
 800fac2:	4630      	mov	r0, r6
 800fac4:	4639      	mov	r1, r7
 800fac6:	f7f0 fef1 	bl	80008ac <__aeabi_ddiv>
 800faca:	f7f1 f875 	bl	8000bb8 <__aeabi_d2iz>
 800face:	9001      	str	r0, [sp, #4]
 800fad0:	f7f0 fd58 	bl	8000584 <__aeabi_i2d>
 800fad4:	4642      	mov	r2, r8
 800fad6:	464b      	mov	r3, r9
 800fad8:	f7f0 fdbe 	bl	8000658 <__aeabi_dmul>
 800fadc:	4602      	mov	r2, r0
 800fade:	460b      	mov	r3, r1
 800fae0:	4630      	mov	r0, r6
 800fae2:	4639      	mov	r1, r7
 800fae4:	f7f0 fc00 	bl	80002e8 <__aeabi_dsub>
 800fae8:	9e01      	ldr	r6, [sp, #4]
 800faea:	9f04      	ldr	r7, [sp, #16]
 800faec:	3630      	adds	r6, #48	; 0x30
 800faee:	f805 6b01 	strb.w	r6, [r5], #1
 800faf2:	9e00      	ldr	r6, [sp, #0]
 800faf4:	1bae      	subs	r6, r5, r6
 800faf6:	42b7      	cmp	r7, r6
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	d134      	bne.n	800fb68 <_dtoa_r+0x708>
 800fafe:	f7f0 fbf5 	bl	80002ec <__adddf3>
 800fb02:	4642      	mov	r2, r8
 800fb04:	464b      	mov	r3, r9
 800fb06:	4606      	mov	r6, r0
 800fb08:	460f      	mov	r7, r1
 800fb0a:	f7f1 f835 	bl	8000b78 <__aeabi_dcmpgt>
 800fb0e:	b9c8      	cbnz	r0, 800fb44 <_dtoa_r+0x6e4>
 800fb10:	4642      	mov	r2, r8
 800fb12:	464b      	mov	r3, r9
 800fb14:	4630      	mov	r0, r6
 800fb16:	4639      	mov	r1, r7
 800fb18:	f7f1 f806 	bl	8000b28 <__aeabi_dcmpeq>
 800fb1c:	b110      	cbz	r0, 800fb24 <_dtoa_r+0x6c4>
 800fb1e:	9b01      	ldr	r3, [sp, #4]
 800fb20:	07db      	lsls	r3, r3, #31
 800fb22:	d40f      	bmi.n	800fb44 <_dtoa_r+0x6e4>
 800fb24:	4651      	mov	r1, sl
 800fb26:	4620      	mov	r0, r4
 800fb28:	f000 fbcc 	bl	80102c4 <_Bfree>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb30:	702b      	strb	r3, [r5, #0]
 800fb32:	f10b 0301 	add.w	r3, fp, #1
 800fb36:	6013      	str	r3, [r2, #0]
 800fb38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f43f ace2 	beq.w	800f504 <_dtoa_r+0xa4>
 800fb40:	601d      	str	r5, [r3, #0]
 800fb42:	e4df      	b.n	800f504 <_dtoa_r+0xa4>
 800fb44:	465f      	mov	r7, fp
 800fb46:	462b      	mov	r3, r5
 800fb48:	461d      	mov	r5, r3
 800fb4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb4e:	2a39      	cmp	r2, #57	; 0x39
 800fb50:	d106      	bne.n	800fb60 <_dtoa_r+0x700>
 800fb52:	9a00      	ldr	r2, [sp, #0]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d1f7      	bne.n	800fb48 <_dtoa_r+0x6e8>
 800fb58:	9900      	ldr	r1, [sp, #0]
 800fb5a:	2230      	movs	r2, #48	; 0x30
 800fb5c:	3701      	adds	r7, #1
 800fb5e:	700a      	strb	r2, [r1, #0]
 800fb60:	781a      	ldrb	r2, [r3, #0]
 800fb62:	3201      	adds	r2, #1
 800fb64:	701a      	strb	r2, [r3, #0]
 800fb66:	e790      	b.n	800fa8a <_dtoa_r+0x62a>
 800fb68:	4ba3      	ldr	r3, [pc, #652]	; (800fdf8 <_dtoa_r+0x998>)
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f7f0 fd74 	bl	8000658 <__aeabi_dmul>
 800fb70:	2200      	movs	r2, #0
 800fb72:	2300      	movs	r3, #0
 800fb74:	4606      	mov	r6, r0
 800fb76:	460f      	mov	r7, r1
 800fb78:	f7f0 ffd6 	bl	8000b28 <__aeabi_dcmpeq>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	d09e      	beq.n	800fabe <_dtoa_r+0x65e>
 800fb80:	e7d0      	b.n	800fb24 <_dtoa_r+0x6c4>
 800fb82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb84:	2a00      	cmp	r2, #0
 800fb86:	f000 80ca 	beq.w	800fd1e <_dtoa_r+0x8be>
 800fb8a:	9a07      	ldr	r2, [sp, #28]
 800fb8c:	2a01      	cmp	r2, #1
 800fb8e:	f300 80ad 	bgt.w	800fcec <_dtoa_r+0x88c>
 800fb92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb94:	2a00      	cmp	r2, #0
 800fb96:	f000 80a5 	beq.w	800fce4 <_dtoa_r+0x884>
 800fb9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fb9e:	9e08      	ldr	r6, [sp, #32]
 800fba0:	9d05      	ldr	r5, [sp, #20]
 800fba2:	9a05      	ldr	r2, [sp, #20]
 800fba4:	441a      	add	r2, r3
 800fba6:	9205      	str	r2, [sp, #20]
 800fba8:	9a06      	ldr	r2, [sp, #24]
 800fbaa:	2101      	movs	r1, #1
 800fbac:	441a      	add	r2, r3
 800fbae:	4620      	mov	r0, r4
 800fbb0:	9206      	str	r2, [sp, #24]
 800fbb2:	f000 fc3d 	bl	8010430 <__i2b>
 800fbb6:	4607      	mov	r7, r0
 800fbb8:	b165      	cbz	r5, 800fbd4 <_dtoa_r+0x774>
 800fbba:	9b06      	ldr	r3, [sp, #24]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	dd09      	ble.n	800fbd4 <_dtoa_r+0x774>
 800fbc0:	42ab      	cmp	r3, r5
 800fbc2:	9a05      	ldr	r2, [sp, #20]
 800fbc4:	bfa8      	it	ge
 800fbc6:	462b      	movge	r3, r5
 800fbc8:	1ad2      	subs	r2, r2, r3
 800fbca:	9205      	str	r2, [sp, #20]
 800fbcc:	9a06      	ldr	r2, [sp, #24]
 800fbce:	1aed      	subs	r5, r5, r3
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	9306      	str	r3, [sp, #24]
 800fbd4:	9b08      	ldr	r3, [sp, #32]
 800fbd6:	b1f3      	cbz	r3, 800fc16 <_dtoa_r+0x7b6>
 800fbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f000 80a3 	beq.w	800fd26 <_dtoa_r+0x8c6>
 800fbe0:	2e00      	cmp	r6, #0
 800fbe2:	dd10      	ble.n	800fc06 <_dtoa_r+0x7a6>
 800fbe4:	4639      	mov	r1, r7
 800fbe6:	4632      	mov	r2, r6
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 fce1 	bl	80105b0 <__pow5mult>
 800fbee:	4652      	mov	r2, sl
 800fbf0:	4601      	mov	r1, r0
 800fbf2:	4607      	mov	r7, r0
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f000 fc31 	bl	801045c <__multiply>
 800fbfa:	4651      	mov	r1, sl
 800fbfc:	4680      	mov	r8, r0
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f000 fb60 	bl	80102c4 <_Bfree>
 800fc04:	46c2      	mov	sl, r8
 800fc06:	9b08      	ldr	r3, [sp, #32]
 800fc08:	1b9a      	subs	r2, r3, r6
 800fc0a:	d004      	beq.n	800fc16 <_dtoa_r+0x7b6>
 800fc0c:	4651      	mov	r1, sl
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f000 fcce 	bl	80105b0 <__pow5mult>
 800fc14:	4682      	mov	sl, r0
 800fc16:	2101      	movs	r1, #1
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 fc09 	bl	8010430 <__i2b>
 800fc1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	4606      	mov	r6, r0
 800fc24:	f340 8081 	ble.w	800fd2a <_dtoa_r+0x8ca>
 800fc28:	461a      	mov	r2, r3
 800fc2a:	4601      	mov	r1, r0
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f000 fcbf 	bl	80105b0 <__pow5mult>
 800fc32:	9b07      	ldr	r3, [sp, #28]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	4606      	mov	r6, r0
 800fc38:	dd7a      	ble.n	800fd30 <_dtoa_r+0x8d0>
 800fc3a:	f04f 0800 	mov.w	r8, #0
 800fc3e:	6933      	ldr	r3, [r6, #16]
 800fc40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fc44:	6918      	ldr	r0, [r3, #16]
 800fc46:	f000 fba5 	bl	8010394 <__hi0bits>
 800fc4a:	f1c0 0020 	rsb	r0, r0, #32
 800fc4e:	9b06      	ldr	r3, [sp, #24]
 800fc50:	4418      	add	r0, r3
 800fc52:	f010 001f 	ands.w	r0, r0, #31
 800fc56:	f000 8094 	beq.w	800fd82 <_dtoa_r+0x922>
 800fc5a:	f1c0 0320 	rsb	r3, r0, #32
 800fc5e:	2b04      	cmp	r3, #4
 800fc60:	f340 8085 	ble.w	800fd6e <_dtoa_r+0x90e>
 800fc64:	9b05      	ldr	r3, [sp, #20]
 800fc66:	f1c0 001c 	rsb	r0, r0, #28
 800fc6a:	4403      	add	r3, r0
 800fc6c:	9305      	str	r3, [sp, #20]
 800fc6e:	9b06      	ldr	r3, [sp, #24]
 800fc70:	4403      	add	r3, r0
 800fc72:	4405      	add	r5, r0
 800fc74:	9306      	str	r3, [sp, #24]
 800fc76:	9b05      	ldr	r3, [sp, #20]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	dd05      	ble.n	800fc88 <_dtoa_r+0x828>
 800fc7c:	4651      	mov	r1, sl
 800fc7e:	461a      	mov	r2, r3
 800fc80:	4620      	mov	r0, r4
 800fc82:	f000 fcef 	bl	8010664 <__lshift>
 800fc86:	4682      	mov	sl, r0
 800fc88:	9b06      	ldr	r3, [sp, #24]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	dd05      	ble.n	800fc9a <_dtoa_r+0x83a>
 800fc8e:	4631      	mov	r1, r6
 800fc90:	461a      	mov	r2, r3
 800fc92:	4620      	mov	r0, r4
 800fc94:	f000 fce6 	bl	8010664 <__lshift>
 800fc98:	4606      	mov	r6, r0
 800fc9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d072      	beq.n	800fd86 <_dtoa_r+0x926>
 800fca0:	4631      	mov	r1, r6
 800fca2:	4650      	mov	r0, sl
 800fca4:	f000 fd4a 	bl	801073c <__mcmp>
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	da6c      	bge.n	800fd86 <_dtoa_r+0x926>
 800fcac:	2300      	movs	r3, #0
 800fcae:	4651      	mov	r1, sl
 800fcb0:	220a      	movs	r2, #10
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	f000 fb28 	bl	8010308 <__multadd>
 800fcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fcbe:	4682      	mov	sl, r0
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f000 81b0 	beq.w	8010026 <_dtoa_r+0xbc6>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	4639      	mov	r1, r7
 800fcca:	220a      	movs	r2, #10
 800fccc:	4620      	mov	r0, r4
 800fcce:	f000 fb1b 	bl	8010308 <__multadd>
 800fcd2:	9b01      	ldr	r3, [sp, #4]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	4607      	mov	r7, r0
 800fcd8:	f300 8096 	bgt.w	800fe08 <_dtoa_r+0x9a8>
 800fcdc:	9b07      	ldr	r3, [sp, #28]
 800fcde:	2b02      	cmp	r3, #2
 800fce0:	dc59      	bgt.n	800fd96 <_dtoa_r+0x936>
 800fce2:	e091      	b.n	800fe08 <_dtoa_r+0x9a8>
 800fce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fcea:	e758      	b.n	800fb9e <_dtoa_r+0x73e>
 800fcec:	9b04      	ldr	r3, [sp, #16]
 800fcee:	1e5e      	subs	r6, r3, #1
 800fcf0:	9b08      	ldr	r3, [sp, #32]
 800fcf2:	42b3      	cmp	r3, r6
 800fcf4:	bfbf      	itttt	lt
 800fcf6:	9b08      	ldrlt	r3, [sp, #32]
 800fcf8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fcfa:	9608      	strlt	r6, [sp, #32]
 800fcfc:	1af3      	sublt	r3, r6, r3
 800fcfe:	bfb4      	ite	lt
 800fd00:	18d2      	addlt	r2, r2, r3
 800fd02:	1b9e      	subge	r6, r3, r6
 800fd04:	9b04      	ldr	r3, [sp, #16]
 800fd06:	bfbc      	itt	lt
 800fd08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fd0a:	2600      	movlt	r6, #0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	bfb7      	itett	lt
 800fd10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fd14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fd18:	1a9d      	sublt	r5, r3, r2
 800fd1a:	2300      	movlt	r3, #0
 800fd1c:	e741      	b.n	800fba2 <_dtoa_r+0x742>
 800fd1e:	9e08      	ldr	r6, [sp, #32]
 800fd20:	9d05      	ldr	r5, [sp, #20]
 800fd22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fd24:	e748      	b.n	800fbb8 <_dtoa_r+0x758>
 800fd26:	9a08      	ldr	r2, [sp, #32]
 800fd28:	e770      	b.n	800fc0c <_dtoa_r+0x7ac>
 800fd2a:	9b07      	ldr	r3, [sp, #28]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	dc19      	bgt.n	800fd64 <_dtoa_r+0x904>
 800fd30:	9b02      	ldr	r3, [sp, #8]
 800fd32:	b9bb      	cbnz	r3, 800fd64 <_dtoa_r+0x904>
 800fd34:	9b03      	ldr	r3, [sp, #12]
 800fd36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd3a:	b99b      	cbnz	r3, 800fd64 <_dtoa_r+0x904>
 800fd3c:	9b03      	ldr	r3, [sp, #12]
 800fd3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd42:	0d1b      	lsrs	r3, r3, #20
 800fd44:	051b      	lsls	r3, r3, #20
 800fd46:	b183      	cbz	r3, 800fd6a <_dtoa_r+0x90a>
 800fd48:	9b05      	ldr	r3, [sp, #20]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	9305      	str	r3, [sp, #20]
 800fd4e:	9b06      	ldr	r3, [sp, #24]
 800fd50:	3301      	adds	r3, #1
 800fd52:	9306      	str	r3, [sp, #24]
 800fd54:	f04f 0801 	mov.w	r8, #1
 800fd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f47f af6f 	bne.w	800fc3e <_dtoa_r+0x7de>
 800fd60:	2001      	movs	r0, #1
 800fd62:	e774      	b.n	800fc4e <_dtoa_r+0x7ee>
 800fd64:	f04f 0800 	mov.w	r8, #0
 800fd68:	e7f6      	b.n	800fd58 <_dtoa_r+0x8f8>
 800fd6a:	4698      	mov	r8, r3
 800fd6c:	e7f4      	b.n	800fd58 <_dtoa_r+0x8f8>
 800fd6e:	d082      	beq.n	800fc76 <_dtoa_r+0x816>
 800fd70:	9a05      	ldr	r2, [sp, #20]
 800fd72:	331c      	adds	r3, #28
 800fd74:	441a      	add	r2, r3
 800fd76:	9205      	str	r2, [sp, #20]
 800fd78:	9a06      	ldr	r2, [sp, #24]
 800fd7a:	441a      	add	r2, r3
 800fd7c:	441d      	add	r5, r3
 800fd7e:	9206      	str	r2, [sp, #24]
 800fd80:	e779      	b.n	800fc76 <_dtoa_r+0x816>
 800fd82:	4603      	mov	r3, r0
 800fd84:	e7f4      	b.n	800fd70 <_dtoa_r+0x910>
 800fd86:	9b04      	ldr	r3, [sp, #16]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	dc37      	bgt.n	800fdfc <_dtoa_r+0x99c>
 800fd8c:	9b07      	ldr	r3, [sp, #28]
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	dd34      	ble.n	800fdfc <_dtoa_r+0x99c>
 800fd92:	9b04      	ldr	r3, [sp, #16]
 800fd94:	9301      	str	r3, [sp, #4]
 800fd96:	9b01      	ldr	r3, [sp, #4]
 800fd98:	b963      	cbnz	r3, 800fdb4 <_dtoa_r+0x954>
 800fd9a:	4631      	mov	r1, r6
 800fd9c:	2205      	movs	r2, #5
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f000 fab2 	bl	8010308 <__multadd>
 800fda4:	4601      	mov	r1, r0
 800fda6:	4606      	mov	r6, r0
 800fda8:	4650      	mov	r0, sl
 800fdaa:	f000 fcc7 	bl	801073c <__mcmp>
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	f73f adbb 	bgt.w	800f92a <_dtoa_r+0x4ca>
 800fdb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdb6:	9d00      	ldr	r5, [sp, #0]
 800fdb8:	ea6f 0b03 	mvn.w	fp, r3
 800fdbc:	f04f 0800 	mov.w	r8, #0
 800fdc0:	4631      	mov	r1, r6
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f000 fa7e 	bl	80102c4 <_Bfree>
 800fdc8:	2f00      	cmp	r7, #0
 800fdca:	f43f aeab 	beq.w	800fb24 <_dtoa_r+0x6c4>
 800fdce:	f1b8 0f00 	cmp.w	r8, #0
 800fdd2:	d005      	beq.n	800fde0 <_dtoa_r+0x980>
 800fdd4:	45b8      	cmp	r8, r7
 800fdd6:	d003      	beq.n	800fde0 <_dtoa_r+0x980>
 800fdd8:	4641      	mov	r1, r8
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 fa72 	bl	80102c4 <_Bfree>
 800fde0:	4639      	mov	r1, r7
 800fde2:	4620      	mov	r0, r4
 800fde4:	f000 fa6e 	bl	80102c4 <_Bfree>
 800fde8:	e69c      	b.n	800fb24 <_dtoa_r+0x6c4>
 800fdea:	2600      	movs	r6, #0
 800fdec:	4637      	mov	r7, r6
 800fdee:	e7e1      	b.n	800fdb4 <_dtoa_r+0x954>
 800fdf0:	46bb      	mov	fp, r7
 800fdf2:	4637      	mov	r7, r6
 800fdf4:	e599      	b.n	800f92a <_dtoa_r+0x4ca>
 800fdf6:	bf00      	nop
 800fdf8:	40240000 	.word	0x40240000
 800fdfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f000 80c8 	beq.w	800ff94 <_dtoa_r+0xb34>
 800fe04:	9b04      	ldr	r3, [sp, #16]
 800fe06:	9301      	str	r3, [sp, #4]
 800fe08:	2d00      	cmp	r5, #0
 800fe0a:	dd05      	ble.n	800fe18 <_dtoa_r+0x9b8>
 800fe0c:	4639      	mov	r1, r7
 800fe0e:	462a      	mov	r2, r5
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 fc27 	bl	8010664 <__lshift>
 800fe16:	4607      	mov	r7, r0
 800fe18:	f1b8 0f00 	cmp.w	r8, #0
 800fe1c:	d05b      	beq.n	800fed6 <_dtoa_r+0xa76>
 800fe1e:	6879      	ldr	r1, [r7, #4]
 800fe20:	4620      	mov	r0, r4
 800fe22:	f000 fa0f 	bl	8010244 <_Balloc>
 800fe26:	4605      	mov	r5, r0
 800fe28:	b928      	cbnz	r0, 800fe36 <_dtoa_r+0x9d6>
 800fe2a:	4b83      	ldr	r3, [pc, #524]	; (8010038 <_dtoa_r+0xbd8>)
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fe32:	f7ff bb2e 	b.w	800f492 <_dtoa_r+0x32>
 800fe36:	693a      	ldr	r2, [r7, #16]
 800fe38:	3202      	adds	r2, #2
 800fe3a:	0092      	lsls	r2, r2, #2
 800fe3c:	f107 010c 	add.w	r1, r7, #12
 800fe40:	300c      	adds	r0, #12
 800fe42:	f7ff fa75 	bl	800f330 <memcpy>
 800fe46:	2201      	movs	r2, #1
 800fe48:	4629      	mov	r1, r5
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f000 fc0a 	bl	8010664 <__lshift>
 800fe50:	9b00      	ldr	r3, [sp, #0]
 800fe52:	3301      	adds	r3, #1
 800fe54:	9304      	str	r3, [sp, #16]
 800fe56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	9308      	str	r3, [sp, #32]
 800fe5e:	9b02      	ldr	r3, [sp, #8]
 800fe60:	f003 0301 	and.w	r3, r3, #1
 800fe64:	46b8      	mov	r8, r7
 800fe66:	9306      	str	r3, [sp, #24]
 800fe68:	4607      	mov	r7, r0
 800fe6a:	9b04      	ldr	r3, [sp, #16]
 800fe6c:	4631      	mov	r1, r6
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	4650      	mov	r0, sl
 800fe72:	9301      	str	r3, [sp, #4]
 800fe74:	f7ff fa6a 	bl	800f34c <quorem>
 800fe78:	4641      	mov	r1, r8
 800fe7a:	9002      	str	r0, [sp, #8]
 800fe7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fe80:	4650      	mov	r0, sl
 800fe82:	f000 fc5b 	bl	801073c <__mcmp>
 800fe86:	463a      	mov	r2, r7
 800fe88:	9005      	str	r0, [sp, #20]
 800fe8a:	4631      	mov	r1, r6
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f000 fc71 	bl	8010774 <__mdiff>
 800fe92:	68c2      	ldr	r2, [r0, #12]
 800fe94:	4605      	mov	r5, r0
 800fe96:	bb02      	cbnz	r2, 800feda <_dtoa_r+0xa7a>
 800fe98:	4601      	mov	r1, r0
 800fe9a:	4650      	mov	r0, sl
 800fe9c:	f000 fc4e 	bl	801073c <__mcmp>
 800fea0:	4602      	mov	r2, r0
 800fea2:	4629      	mov	r1, r5
 800fea4:	4620      	mov	r0, r4
 800fea6:	9209      	str	r2, [sp, #36]	; 0x24
 800fea8:	f000 fa0c 	bl	80102c4 <_Bfree>
 800feac:	9b07      	ldr	r3, [sp, #28]
 800feae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feb0:	9d04      	ldr	r5, [sp, #16]
 800feb2:	ea43 0102 	orr.w	r1, r3, r2
 800feb6:	9b06      	ldr	r3, [sp, #24]
 800feb8:	4319      	orrs	r1, r3
 800feba:	d110      	bne.n	800fede <_dtoa_r+0xa7e>
 800febc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fec0:	d029      	beq.n	800ff16 <_dtoa_r+0xab6>
 800fec2:	9b05      	ldr	r3, [sp, #20]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	dd02      	ble.n	800fece <_dtoa_r+0xa6e>
 800fec8:	9b02      	ldr	r3, [sp, #8]
 800feca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	f883 9000 	strb.w	r9, [r3]
 800fed4:	e774      	b.n	800fdc0 <_dtoa_r+0x960>
 800fed6:	4638      	mov	r0, r7
 800fed8:	e7ba      	b.n	800fe50 <_dtoa_r+0x9f0>
 800feda:	2201      	movs	r2, #1
 800fedc:	e7e1      	b.n	800fea2 <_dtoa_r+0xa42>
 800fede:	9b05      	ldr	r3, [sp, #20]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	db04      	blt.n	800feee <_dtoa_r+0xa8e>
 800fee4:	9907      	ldr	r1, [sp, #28]
 800fee6:	430b      	orrs	r3, r1
 800fee8:	9906      	ldr	r1, [sp, #24]
 800feea:	430b      	orrs	r3, r1
 800feec:	d120      	bne.n	800ff30 <_dtoa_r+0xad0>
 800feee:	2a00      	cmp	r2, #0
 800fef0:	dded      	ble.n	800fece <_dtoa_r+0xa6e>
 800fef2:	4651      	mov	r1, sl
 800fef4:	2201      	movs	r2, #1
 800fef6:	4620      	mov	r0, r4
 800fef8:	f000 fbb4 	bl	8010664 <__lshift>
 800fefc:	4631      	mov	r1, r6
 800fefe:	4682      	mov	sl, r0
 800ff00:	f000 fc1c 	bl	801073c <__mcmp>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	dc03      	bgt.n	800ff10 <_dtoa_r+0xab0>
 800ff08:	d1e1      	bne.n	800fece <_dtoa_r+0xa6e>
 800ff0a:	f019 0f01 	tst.w	r9, #1
 800ff0e:	d0de      	beq.n	800fece <_dtoa_r+0xa6e>
 800ff10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ff14:	d1d8      	bne.n	800fec8 <_dtoa_r+0xa68>
 800ff16:	9a01      	ldr	r2, [sp, #4]
 800ff18:	2339      	movs	r3, #57	; 0x39
 800ff1a:	7013      	strb	r3, [r2, #0]
 800ff1c:	462b      	mov	r3, r5
 800ff1e:	461d      	mov	r5, r3
 800ff20:	3b01      	subs	r3, #1
 800ff22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ff26:	2a39      	cmp	r2, #57	; 0x39
 800ff28:	d06c      	beq.n	8010004 <_dtoa_r+0xba4>
 800ff2a:	3201      	adds	r2, #1
 800ff2c:	701a      	strb	r2, [r3, #0]
 800ff2e:	e747      	b.n	800fdc0 <_dtoa_r+0x960>
 800ff30:	2a00      	cmp	r2, #0
 800ff32:	dd07      	ble.n	800ff44 <_dtoa_r+0xae4>
 800ff34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ff38:	d0ed      	beq.n	800ff16 <_dtoa_r+0xab6>
 800ff3a:	9a01      	ldr	r2, [sp, #4]
 800ff3c:	f109 0301 	add.w	r3, r9, #1
 800ff40:	7013      	strb	r3, [r2, #0]
 800ff42:	e73d      	b.n	800fdc0 <_dtoa_r+0x960>
 800ff44:	9b04      	ldr	r3, [sp, #16]
 800ff46:	9a08      	ldr	r2, [sp, #32]
 800ff48:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d043      	beq.n	800ffd8 <_dtoa_r+0xb78>
 800ff50:	4651      	mov	r1, sl
 800ff52:	2300      	movs	r3, #0
 800ff54:	220a      	movs	r2, #10
 800ff56:	4620      	mov	r0, r4
 800ff58:	f000 f9d6 	bl	8010308 <__multadd>
 800ff5c:	45b8      	cmp	r8, r7
 800ff5e:	4682      	mov	sl, r0
 800ff60:	f04f 0300 	mov.w	r3, #0
 800ff64:	f04f 020a 	mov.w	r2, #10
 800ff68:	4641      	mov	r1, r8
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	d107      	bne.n	800ff7e <_dtoa_r+0xb1e>
 800ff6e:	f000 f9cb 	bl	8010308 <__multadd>
 800ff72:	4680      	mov	r8, r0
 800ff74:	4607      	mov	r7, r0
 800ff76:	9b04      	ldr	r3, [sp, #16]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	9304      	str	r3, [sp, #16]
 800ff7c:	e775      	b.n	800fe6a <_dtoa_r+0xa0a>
 800ff7e:	f000 f9c3 	bl	8010308 <__multadd>
 800ff82:	4639      	mov	r1, r7
 800ff84:	4680      	mov	r8, r0
 800ff86:	2300      	movs	r3, #0
 800ff88:	220a      	movs	r2, #10
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f000 f9bc 	bl	8010308 <__multadd>
 800ff90:	4607      	mov	r7, r0
 800ff92:	e7f0      	b.n	800ff76 <_dtoa_r+0xb16>
 800ff94:	9b04      	ldr	r3, [sp, #16]
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	9d00      	ldr	r5, [sp, #0]
 800ff9a:	4631      	mov	r1, r6
 800ff9c:	4650      	mov	r0, sl
 800ff9e:	f7ff f9d5 	bl	800f34c <quorem>
 800ffa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ffa6:	9b00      	ldr	r3, [sp, #0]
 800ffa8:	f805 9b01 	strb.w	r9, [r5], #1
 800ffac:	1aea      	subs	r2, r5, r3
 800ffae:	9b01      	ldr	r3, [sp, #4]
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	dd07      	ble.n	800ffc4 <_dtoa_r+0xb64>
 800ffb4:	4651      	mov	r1, sl
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	220a      	movs	r2, #10
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f000 f9a4 	bl	8010308 <__multadd>
 800ffc0:	4682      	mov	sl, r0
 800ffc2:	e7ea      	b.n	800ff9a <_dtoa_r+0xb3a>
 800ffc4:	9b01      	ldr	r3, [sp, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	bfc8      	it	gt
 800ffca:	461d      	movgt	r5, r3
 800ffcc:	9b00      	ldr	r3, [sp, #0]
 800ffce:	bfd8      	it	le
 800ffd0:	2501      	movle	r5, #1
 800ffd2:	441d      	add	r5, r3
 800ffd4:	f04f 0800 	mov.w	r8, #0
 800ffd8:	4651      	mov	r1, sl
 800ffda:	2201      	movs	r2, #1
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f000 fb41 	bl	8010664 <__lshift>
 800ffe2:	4631      	mov	r1, r6
 800ffe4:	4682      	mov	sl, r0
 800ffe6:	f000 fba9 	bl	801073c <__mcmp>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	dc96      	bgt.n	800ff1c <_dtoa_r+0xabc>
 800ffee:	d102      	bne.n	800fff6 <_dtoa_r+0xb96>
 800fff0:	f019 0f01 	tst.w	r9, #1
 800fff4:	d192      	bne.n	800ff1c <_dtoa_r+0xabc>
 800fff6:	462b      	mov	r3, r5
 800fff8:	461d      	mov	r5, r3
 800fffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fffe:	2a30      	cmp	r2, #48	; 0x30
 8010000:	d0fa      	beq.n	800fff8 <_dtoa_r+0xb98>
 8010002:	e6dd      	b.n	800fdc0 <_dtoa_r+0x960>
 8010004:	9a00      	ldr	r2, [sp, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d189      	bne.n	800ff1e <_dtoa_r+0xabe>
 801000a:	f10b 0b01 	add.w	fp, fp, #1
 801000e:	2331      	movs	r3, #49	; 0x31
 8010010:	e796      	b.n	800ff40 <_dtoa_r+0xae0>
 8010012:	4b0a      	ldr	r3, [pc, #40]	; (801003c <_dtoa_r+0xbdc>)
 8010014:	f7ff ba99 	b.w	800f54a <_dtoa_r+0xea>
 8010018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801001a:	2b00      	cmp	r3, #0
 801001c:	f47f aa6d 	bne.w	800f4fa <_dtoa_r+0x9a>
 8010020:	4b07      	ldr	r3, [pc, #28]	; (8010040 <_dtoa_r+0xbe0>)
 8010022:	f7ff ba92 	b.w	800f54a <_dtoa_r+0xea>
 8010026:	9b01      	ldr	r3, [sp, #4]
 8010028:	2b00      	cmp	r3, #0
 801002a:	dcb5      	bgt.n	800ff98 <_dtoa_r+0xb38>
 801002c:	9b07      	ldr	r3, [sp, #28]
 801002e:	2b02      	cmp	r3, #2
 8010030:	f73f aeb1 	bgt.w	800fd96 <_dtoa_r+0x936>
 8010034:	e7b0      	b.n	800ff98 <_dtoa_r+0xb38>
 8010036:	bf00      	nop
 8010038:	08011b8c 	.word	0x08011b8c
 801003c:	08011aec 	.word	0x08011aec
 8010040:	08011b10 	.word	0x08011b10

08010044 <_free_r>:
 8010044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010046:	2900      	cmp	r1, #0
 8010048:	d044      	beq.n	80100d4 <_free_r+0x90>
 801004a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801004e:	9001      	str	r0, [sp, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	f1a1 0404 	sub.w	r4, r1, #4
 8010056:	bfb8      	it	lt
 8010058:	18e4      	addlt	r4, r4, r3
 801005a:	f000 f8e7 	bl	801022c <__malloc_lock>
 801005e:	4a1e      	ldr	r2, [pc, #120]	; (80100d8 <_free_r+0x94>)
 8010060:	9801      	ldr	r0, [sp, #4]
 8010062:	6813      	ldr	r3, [r2, #0]
 8010064:	b933      	cbnz	r3, 8010074 <_free_r+0x30>
 8010066:	6063      	str	r3, [r4, #4]
 8010068:	6014      	str	r4, [r2, #0]
 801006a:	b003      	add	sp, #12
 801006c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010070:	f000 b8e2 	b.w	8010238 <__malloc_unlock>
 8010074:	42a3      	cmp	r3, r4
 8010076:	d908      	bls.n	801008a <_free_r+0x46>
 8010078:	6825      	ldr	r5, [r4, #0]
 801007a:	1961      	adds	r1, r4, r5
 801007c:	428b      	cmp	r3, r1
 801007e:	bf01      	itttt	eq
 8010080:	6819      	ldreq	r1, [r3, #0]
 8010082:	685b      	ldreq	r3, [r3, #4]
 8010084:	1949      	addeq	r1, r1, r5
 8010086:	6021      	streq	r1, [r4, #0]
 8010088:	e7ed      	b.n	8010066 <_free_r+0x22>
 801008a:	461a      	mov	r2, r3
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	b10b      	cbz	r3, 8010094 <_free_r+0x50>
 8010090:	42a3      	cmp	r3, r4
 8010092:	d9fa      	bls.n	801008a <_free_r+0x46>
 8010094:	6811      	ldr	r1, [r2, #0]
 8010096:	1855      	adds	r5, r2, r1
 8010098:	42a5      	cmp	r5, r4
 801009a:	d10b      	bne.n	80100b4 <_free_r+0x70>
 801009c:	6824      	ldr	r4, [r4, #0]
 801009e:	4421      	add	r1, r4
 80100a0:	1854      	adds	r4, r2, r1
 80100a2:	42a3      	cmp	r3, r4
 80100a4:	6011      	str	r1, [r2, #0]
 80100a6:	d1e0      	bne.n	801006a <_free_r+0x26>
 80100a8:	681c      	ldr	r4, [r3, #0]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	6053      	str	r3, [r2, #4]
 80100ae:	440c      	add	r4, r1
 80100b0:	6014      	str	r4, [r2, #0]
 80100b2:	e7da      	b.n	801006a <_free_r+0x26>
 80100b4:	d902      	bls.n	80100bc <_free_r+0x78>
 80100b6:	230c      	movs	r3, #12
 80100b8:	6003      	str	r3, [r0, #0]
 80100ba:	e7d6      	b.n	801006a <_free_r+0x26>
 80100bc:	6825      	ldr	r5, [r4, #0]
 80100be:	1961      	adds	r1, r4, r5
 80100c0:	428b      	cmp	r3, r1
 80100c2:	bf04      	itt	eq
 80100c4:	6819      	ldreq	r1, [r3, #0]
 80100c6:	685b      	ldreq	r3, [r3, #4]
 80100c8:	6063      	str	r3, [r4, #4]
 80100ca:	bf04      	itt	eq
 80100cc:	1949      	addeq	r1, r1, r5
 80100ce:	6021      	streq	r1, [r4, #0]
 80100d0:	6054      	str	r4, [r2, #4]
 80100d2:	e7ca      	b.n	801006a <_free_r+0x26>
 80100d4:	b003      	add	sp, #12
 80100d6:	bd30      	pop	{r4, r5, pc}
 80100d8:	2000a004 	.word	0x2000a004

080100dc <malloc>:
 80100dc:	4b02      	ldr	r3, [pc, #8]	; (80100e8 <malloc+0xc>)
 80100de:	4601      	mov	r1, r0
 80100e0:	6818      	ldr	r0, [r3, #0]
 80100e2:	f000 b823 	b.w	801012c <_malloc_r>
 80100e6:	bf00      	nop
 80100e8:	200000a0 	.word	0x200000a0

080100ec <sbrk_aligned>:
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	4e0e      	ldr	r6, [pc, #56]	; (8010128 <sbrk_aligned+0x3c>)
 80100f0:	460c      	mov	r4, r1
 80100f2:	6831      	ldr	r1, [r6, #0]
 80100f4:	4605      	mov	r5, r0
 80100f6:	b911      	cbnz	r1, 80100fe <sbrk_aligned+0x12>
 80100f8:	f000 fec4 	bl	8010e84 <_sbrk_r>
 80100fc:	6030      	str	r0, [r6, #0]
 80100fe:	4621      	mov	r1, r4
 8010100:	4628      	mov	r0, r5
 8010102:	f000 febf 	bl	8010e84 <_sbrk_r>
 8010106:	1c43      	adds	r3, r0, #1
 8010108:	d00a      	beq.n	8010120 <sbrk_aligned+0x34>
 801010a:	1cc4      	adds	r4, r0, #3
 801010c:	f024 0403 	bic.w	r4, r4, #3
 8010110:	42a0      	cmp	r0, r4
 8010112:	d007      	beq.n	8010124 <sbrk_aligned+0x38>
 8010114:	1a21      	subs	r1, r4, r0
 8010116:	4628      	mov	r0, r5
 8010118:	f000 feb4 	bl	8010e84 <_sbrk_r>
 801011c:	3001      	adds	r0, #1
 801011e:	d101      	bne.n	8010124 <sbrk_aligned+0x38>
 8010120:	f04f 34ff 	mov.w	r4, #4294967295
 8010124:	4620      	mov	r0, r4
 8010126:	bd70      	pop	{r4, r5, r6, pc}
 8010128:	2000a008 	.word	0x2000a008

0801012c <_malloc_r>:
 801012c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010130:	1ccd      	adds	r5, r1, #3
 8010132:	f025 0503 	bic.w	r5, r5, #3
 8010136:	3508      	adds	r5, #8
 8010138:	2d0c      	cmp	r5, #12
 801013a:	bf38      	it	cc
 801013c:	250c      	movcc	r5, #12
 801013e:	2d00      	cmp	r5, #0
 8010140:	4607      	mov	r7, r0
 8010142:	db01      	blt.n	8010148 <_malloc_r+0x1c>
 8010144:	42a9      	cmp	r1, r5
 8010146:	d905      	bls.n	8010154 <_malloc_r+0x28>
 8010148:	230c      	movs	r3, #12
 801014a:	603b      	str	r3, [r7, #0]
 801014c:	2600      	movs	r6, #0
 801014e:	4630      	mov	r0, r6
 8010150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010154:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010228 <_malloc_r+0xfc>
 8010158:	f000 f868 	bl	801022c <__malloc_lock>
 801015c:	f8d8 3000 	ldr.w	r3, [r8]
 8010160:	461c      	mov	r4, r3
 8010162:	bb5c      	cbnz	r4, 80101bc <_malloc_r+0x90>
 8010164:	4629      	mov	r1, r5
 8010166:	4638      	mov	r0, r7
 8010168:	f7ff ffc0 	bl	80100ec <sbrk_aligned>
 801016c:	1c43      	adds	r3, r0, #1
 801016e:	4604      	mov	r4, r0
 8010170:	d155      	bne.n	801021e <_malloc_r+0xf2>
 8010172:	f8d8 4000 	ldr.w	r4, [r8]
 8010176:	4626      	mov	r6, r4
 8010178:	2e00      	cmp	r6, #0
 801017a:	d145      	bne.n	8010208 <_malloc_r+0xdc>
 801017c:	2c00      	cmp	r4, #0
 801017e:	d048      	beq.n	8010212 <_malloc_r+0xe6>
 8010180:	6823      	ldr	r3, [r4, #0]
 8010182:	4631      	mov	r1, r6
 8010184:	4638      	mov	r0, r7
 8010186:	eb04 0903 	add.w	r9, r4, r3
 801018a:	f000 fe7b 	bl	8010e84 <_sbrk_r>
 801018e:	4581      	cmp	r9, r0
 8010190:	d13f      	bne.n	8010212 <_malloc_r+0xe6>
 8010192:	6821      	ldr	r1, [r4, #0]
 8010194:	1a6d      	subs	r5, r5, r1
 8010196:	4629      	mov	r1, r5
 8010198:	4638      	mov	r0, r7
 801019a:	f7ff ffa7 	bl	80100ec <sbrk_aligned>
 801019e:	3001      	adds	r0, #1
 80101a0:	d037      	beq.n	8010212 <_malloc_r+0xe6>
 80101a2:	6823      	ldr	r3, [r4, #0]
 80101a4:	442b      	add	r3, r5
 80101a6:	6023      	str	r3, [r4, #0]
 80101a8:	f8d8 3000 	ldr.w	r3, [r8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d038      	beq.n	8010222 <_malloc_r+0xf6>
 80101b0:	685a      	ldr	r2, [r3, #4]
 80101b2:	42a2      	cmp	r2, r4
 80101b4:	d12b      	bne.n	801020e <_malloc_r+0xe2>
 80101b6:	2200      	movs	r2, #0
 80101b8:	605a      	str	r2, [r3, #4]
 80101ba:	e00f      	b.n	80101dc <_malloc_r+0xb0>
 80101bc:	6822      	ldr	r2, [r4, #0]
 80101be:	1b52      	subs	r2, r2, r5
 80101c0:	d41f      	bmi.n	8010202 <_malloc_r+0xd6>
 80101c2:	2a0b      	cmp	r2, #11
 80101c4:	d917      	bls.n	80101f6 <_malloc_r+0xca>
 80101c6:	1961      	adds	r1, r4, r5
 80101c8:	42a3      	cmp	r3, r4
 80101ca:	6025      	str	r5, [r4, #0]
 80101cc:	bf18      	it	ne
 80101ce:	6059      	strne	r1, [r3, #4]
 80101d0:	6863      	ldr	r3, [r4, #4]
 80101d2:	bf08      	it	eq
 80101d4:	f8c8 1000 	streq.w	r1, [r8]
 80101d8:	5162      	str	r2, [r4, r5]
 80101da:	604b      	str	r3, [r1, #4]
 80101dc:	4638      	mov	r0, r7
 80101de:	f104 060b 	add.w	r6, r4, #11
 80101e2:	f000 f829 	bl	8010238 <__malloc_unlock>
 80101e6:	f026 0607 	bic.w	r6, r6, #7
 80101ea:	1d23      	adds	r3, r4, #4
 80101ec:	1af2      	subs	r2, r6, r3
 80101ee:	d0ae      	beq.n	801014e <_malloc_r+0x22>
 80101f0:	1b9b      	subs	r3, r3, r6
 80101f2:	50a3      	str	r3, [r4, r2]
 80101f4:	e7ab      	b.n	801014e <_malloc_r+0x22>
 80101f6:	42a3      	cmp	r3, r4
 80101f8:	6862      	ldr	r2, [r4, #4]
 80101fa:	d1dd      	bne.n	80101b8 <_malloc_r+0x8c>
 80101fc:	f8c8 2000 	str.w	r2, [r8]
 8010200:	e7ec      	b.n	80101dc <_malloc_r+0xb0>
 8010202:	4623      	mov	r3, r4
 8010204:	6864      	ldr	r4, [r4, #4]
 8010206:	e7ac      	b.n	8010162 <_malloc_r+0x36>
 8010208:	4634      	mov	r4, r6
 801020a:	6876      	ldr	r6, [r6, #4]
 801020c:	e7b4      	b.n	8010178 <_malloc_r+0x4c>
 801020e:	4613      	mov	r3, r2
 8010210:	e7cc      	b.n	80101ac <_malloc_r+0x80>
 8010212:	230c      	movs	r3, #12
 8010214:	603b      	str	r3, [r7, #0]
 8010216:	4638      	mov	r0, r7
 8010218:	f000 f80e 	bl	8010238 <__malloc_unlock>
 801021c:	e797      	b.n	801014e <_malloc_r+0x22>
 801021e:	6025      	str	r5, [r4, #0]
 8010220:	e7dc      	b.n	80101dc <_malloc_r+0xb0>
 8010222:	605b      	str	r3, [r3, #4]
 8010224:	deff      	udf	#255	; 0xff
 8010226:	bf00      	nop
 8010228:	2000a004 	.word	0x2000a004

0801022c <__malloc_lock>:
 801022c:	4801      	ldr	r0, [pc, #4]	; (8010234 <__malloc_lock+0x8>)
 801022e:	f7ff b87d 	b.w	800f32c <__retarget_lock_acquire_recursive>
 8010232:	bf00      	nop
 8010234:	2000a000 	.word	0x2000a000

08010238 <__malloc_unlock>:
 8010238:	4801      	ldr	r0, [pc, #4]	; (8010240 <__malloc_unlock+0x8>)
 801023a:	f7ff b878 	b.w	800f32e <__retarget_lock_release_recursive>
 801023e:	bf00      	nop
 8010240:	2000a000 	.word	0x2000a000

08010244 <_Balloc>:
 8010244:	b570      	push	{r4, r5, r6, lr}
 8010246:	69c6      	ldr	r6, [r0, #28]
 8010248:	4604      	mov	r4, r0
 801024a:	460d      	mov	r5, r1
 801024c:	b976      	cbnz	r6, 801026c <_Balloc+0x28>
 801024e:	2010      	movs	r0, #16
 8010250:	f7ff ff44 	bl	80100dc <malloc>
 8010254:	4602      	mov	r2, r0
 8010256:	61e0      	str	r0, [r4, #28]
 8010258:	b920      	cbnz	r0, 8010264 <_Balloc+0x20>
 801025a:	4b18      	ldr	r3, [pc, #96]	; (80102bc <_Balloc+0x78>)
 801025c:	4818      	ldr	r0, [pc, #96]	; (80102c0 <_Balloc+0x7c>)
 801025e:	216b      	movs	r1, #107	; 0x6b
 8010260:	f000 fe20 	bl	8010ea4 <__assert_func>
 8010264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010268:	6006      	str	r6, [r0, #0]
 801026a:	60c6      	str	r6, [r0, #12]
 801026c:	69e6      	ldr	r6, [r4, #28]
 801026e:	68f3      	ldr	r3, [r6, #12]
 8010270:	b183      	cbz	r3, 8010294 <_Balloc+0x50>
 8010272:	69e3      	ldr	r3, [r4, #28]
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801027a:	b9b8      	cbnz	r0, 80102ac <_Balloc+0x68>
 801027c:	2101      	movs	r1, #1
 801027e:	fa01 f605 	lsl.w	r6, r1, r5
 8010282:	1d72      	adds	r2, r6, #5
 8010284:	0092      	lsls	r2, r2, #2
 8010286:	4620      	mov	r0, r4
 8010288:	f000 fe2a 	bl	8010ee0 <_calloc_r>
 801028c:	b160      	cbz	r0, 80102a8 <_Balloc+0x64>
 801028e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010292:	e00e      	b.n	80102b2 <_Balloc+0x6e>
 8010294:	2221      	movs	r2, #33	; 0x21
 8010296:	2104      	movs	r1, #4
 8010298:	4620      	mov	r0, r4
 801029a:	f000 fe21 	bl	8010ee0 <_calloc_r>
 801029e:	69e3      	ldr	r3, [r4, #28]
 80102a0:	60f0      	str	r0, [r6, #12]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d1e4      	bne.n	8010272 <_Balloc+0x2e>
 80102a8:	2000      	movs	r0, #0
 80102aa:	bd70      	pop	{r4, r5, r6, pc}
 80102ac:	6802      	ldr	r2, [r0, #0]
 80102ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80102b2:	2300      	movs	r3, #0
 80102b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80102b8:	e7f7      	b.n	80102aa <_Balloc+0x66>
 80102ba:	bf00      	nop
 80102bc:	08011b1d 	.word	0x08011b1d
 80102c0:	08011b9d 	.word	0x08011b9d

080102c4 <_Bfree>:
 80102c4:	b570      	push	{r4, r5, r6, lr}
 80102c6:	69c6      	ldr	r6, [r0, #28]
 80102c8:	4605      	mov	r5, r0
 80102ca:	460c      	mov	r4, r1
 80102cc:	b976      	cbnz	r6, 80102ec <_Bfree+0x28>
 80102ce:	2010      	movs	r0, #16
 80102d0:	f7ff ff04 	bl	80100dc <malloc>
 80102d4:	4602      	mov	r2, r0
 80102d6:	61e8      	str	r0, [r5, #28]
 80102d8:	b920      	cbnz	r0, 80102e4 <_Bfree+0x20>
 80102da:	4b09      	ldr	r3, [pc, #36]	; (8010300 <_Bfree+0x3c>)
 80102dc:	4809      	ldr	r0, [pc, #36]	; (8010304 <_Bfree+0x40>)
 80102de:	218f      	movs	r1, #143	; 0x8f
 80102e0:	f000 fde0 	bl	8010ea4 <__assert_func>
 80102e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102e8:	6006      	str	r6, [r0, #0]
 80102ea:	60c6      	str	r6, [r0, #12]
 80102ec:	b13c      	cbz	r4, 80102fe <_Bfree+0x3a>
 80102ee:	69eb      	ldr	r3, [r5, #28]
 80102f0:	6862      	ldr	r2, [r4, #4]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102f8:	6021      	str	r1, [r4, #0]
 80102fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80102fe:	bd70      	pop	{r4, r5, r6, pc}
 8010300:	08011b1d 	.word	0x08011b1d
 8010304:	08011b9d 	.word	0x08011b9d

08010308 <__multadd>:
 8010308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801030c:	690d      	ldr	r5, [r1, #16]
 801030e:	4607      	mov	r7, r0
 8010310:	460c      	mov	r4, r1
 8010312:	461e      	mov	r6, r3
 8010314:	f101 0c14 	add.w	ip, r1, #20
 8010318:	2000      	movs	r0, #0
 801031a:	f8dc 3000 	ldr.w	r3, [ip]
 801031e:	b299      	uxth	r1, r3
 8010320:	fb02 6101 	mla	r1, r2, r1, r6
 8010324:	0c1e      	lsrs	r6, r3, #16
 8010326:	0c0b      	lsrs	r3, r1, #16
 8010328:	fb02 3306 	mla	r3, r2, r6, r3
 801032c:	b289      	uxth	r1, r1
 801032e:	3001      	adds	r0, #1
 8010330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010334:	4285      	cmp	r5, r0
 8010336:	f84c 1b04 	str.w	r1, [ip], #4
 801033a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801033e:	dcec      	bgt.n	801031a <__multadd+0x12>
 8010340:	b30e      	cbz	r6, 8010386 <__multadd+0x7e>
 8010342:	68a3      	ldr	r3, [r4, #8]
 8010344:	42ab      	cmp	r3, r5
 8010346:	dc19      	bgt.n	801037c <__multadd+0x74>
 8010348:	6861      	ldr	r1, [r4, #4]
 801034a:	4638      	mov	r0, r7
 801034c:	3101      	adds	r1, #1
 801034e:	f7ff ff79 	bl	8010244 <_Balloc>
 8010352:	4680      	mov	r8, r0
 8010354:	b928      	cbnz	r0, 8010362 <__multadd+0x5a>
 8010356:	4602      	mov	r2, r0
 8010358:	4b0c      	ldr	r3, [pc, #48]	; (801038c <__multadd+0x84>)
 801035a:	480d      	ldr	r0, [pc, #52]	; (8010390 <__multadd+0x88>)
 801035c:	21ba      	movs	r1, #186	; 0xba
 801035e:	f000 fda1 	bl	8010ea4 <__assert_func>
 8010362:	6922      	ldr	r2, [r4, #16]
 8010364:	3202      	adds	r2, #2
 8010366:	f104 010c 	add.w	r1, r4, #12
 801036a:	0092      	lsls	r2, r2, #2
 801036c:	300c      	adds	r0, #12
 801036e:	f7fe ffdf 	bl	800f330 <memcpy>
 8010372:	4621      	mov	r1, r4
 8010374:	4638      	mov	r0, r7
 8010376:	f7ff ffa5 	bl	80102c4 <_Bfree>
 801037a:	4644      	mov	r4, r8
 801037c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010380:	3501      	adds	r5, #1
 8010382:	615e      	str	r6, [r3, #20]
 8010384:	6125      	str	r5, [r4, #16]
 8010386:	4620      	mov	r0, r4
 8010388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801038c:	08011b8c 	.word	0x08011b8c
 8010390:	08011b9d 	.word	0x08011b9d

08010394 <__hi0bits>:
 8010394:	0c03      	lsrs	r3, r0, #16
 8010396:	041b      	lsls	r3, r3, #16
 8010398:	b9d3      	cbnz	r3, 80103d0 <__hi0bits+0x3c>
 801039a:	0400      	lsls	r0, r0, #16
 801039c:	2310      	movs	r3, #16
 801039e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80103a2:	bf04      	itt	eq
 80103a4:	0200      	lsleq	r0, r0, #8
 80103a6:	3308      	addeq	r3, #8
 80103a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80103ac:	bf04      	itt	eq
 80103ae:	0100      	lsleq	r0, r0, #4
 80103b0:	3304      	addeq	r3, #4
 80103b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80103b6:	bf04      	itt	eq
 80103b8:	0080      	lsleq	r0, r0, #2
 80103ba:	3302      	addeq	r3, #2
 80103bc:	2800      	cmp	r0, #0
 80103be:	db05      	blt.n	80103cc <__hi0bits+0x38>
 80103c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80103c4:	f103 0301 	add.w	r3, r3, #1
 80103c8:	bf08      	it	eq
 80103ca:	2320      	moveq	r3, #32
 80103cc:	4618      	mov	r0, r3
 80103ce:	4770      	bx	lr
 80103d0:	2300      	movs	r3, #0
 80103d2:	e7e4      	b.n	801039e <__hi0bits+0xa>

080103d4 <__lo0bits>:
 80103d4:	6803      	ldr	r3, [r0, #0]
 80103d6:	f013 0207 	ands.w	r2, r3, #7
 80103da:	d00c      	beq.n	80103f6 <__lo0bits+0x22>
 80103dc:	07d9      	lsls	r1, r3, #31
 80103de:	d422      	bmi.n	8010426 <__lo0bits+0x52>
 80103e0:	079a      	lsls	r2, r3, #30
 80103e2:	bf49      	itett	mi
 80103e4:	085b      	lsrmi	r3, r3, #1
 80103e6:	089b      	lsrpl	r3, r3, #2
 80103e8:	6003      	strmi	r3, [r0, #0]
 80103ea:	2201      	movmi	r2, #1
 80103ec:	bf5c      	itt	pl
 80103ee:	6003      	strpl	r3, [r0, #0]
 80103f0:	2202      	movpl	r2, #2
 80103f2:	4610      	mov	r0, r2
 80103f4:	4770      	bx	lr
 80103f6:	b299      	uxth	r1, r3
 80103f8:	b909      	cbnz	r1, 80103fe <__lo0bits+0x2a>
 80103fa:	0c1b      	lsrs	r3, r3, #16
 80103fc:	2210      	movs	r2, #16
 80103fe:	b2d9      	uxtb	r1, r3
 8010400:	b909      	cbnz	r1, 8010406 <__lo0bits+0x32>
 8010402:	3208      	adds	r2, #8
 8010404:	0a1b      	lsrs	r3, r3, #8
 8010406:	0719      	lsls	r1, r3, #28
 8010408:	bf04      	itt	eq
 801040a:	091b      	lsreq	r3, r3, #4
 801040c:	3204      	addeq	r2, #4
 801040e:	0799      	lsls	r1, r3, #30
 8010410:	bf04      	itt	eq
 8010412:	089b      	lsreq	r3, r3, #2
 8010414:	3202      	addeq	r2, #2
 8010416:	07d9      	lsls	r1, r3, #31
 8010418:	d403      	bmi.n	8010422 <__lo0bits+0x4e>
 801041a:	085b      	lsrs	r3, r3, #1
 801041c:	f102 0201 	add.w	r2, r2, #1
 8010420:	d003      	beq.n	801042a <__lo0bits+0x56>
 8010422:	6003      	str	r3, [r0, #0]
 8010424:	e7e5      	b.n	80103f2 <__lo0bits+0x1e>
 8010426:	2200      	movs	r2, #0
 8010428:	e7e3      	b.n	80103f2 <__lo0bits+0x1e>
 801042a:	2220      	movs	r2, #32
 801042c:	e7e1      	b.n	80103f2 <__lo0bits+0x1e>
	...

08010430 <__i2b>:
 8010430:	b510      	push	{r4, lr}
 8010432:	460c      	mov	r4, r1
 8010434:	2101      	movs	r1, #1
 8010436:	f7ff ff05 	bl	8010244 <_Balloc>
 801043a:	4602      	mov	r2, r0
 801043c:	b928      	cbnz	r0, 801044a <__i2b+0x1a>
 801043e:	4b05      	ldr	r3, [pc, #20]	; (8010454 <__i2b+0x24>)
 8010440:	4805      	ldr	r0, [pc, #20]	; (8010458 <__i2b+0x28>)
 8010442:	f240 1145 	movw	r1, #325	; 0x145
 8010446:	f000 fd2d 	bl	8010ea4 <__assert_func>
 801044a:	2301      	movs	r3, #1
 801044c:	6144      	str	r4, [r0, #20]
 801044e:	6103      	str	r3, [r0, #16]
 8010450:	bd10      	pop	{r4, pc}
 8010452:	bf00      	nop
 8010454:	08011b8c 	.word	0x08011b8c
 8010458:	08011b9d 	.word	0x08011b9d

0801045c <__multiply>:
 801045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010460:	4691      	mov	r9, r2
 8010462:	690a      	ldr	r2, [r1, #16]
 8010464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010468:	429a      	cmp	r2, r3
 801046a:	bfb8      	it	lt
 801046c:	460b      	movlt	r3, r1
 801046e:	460c      	mov	r4, r1
 8010470:	bfbc      	itt	lt
 8010472:	464c      	movlt	r4, r9
 8010474:	4699      	movlt	r9, r3
 8010476:	6927      	ldr	r7, [r4, #16]
 8010478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801047c:	68a3      	ldr	r3, [r4, #8]
 801047e:	6861      	ldr	r1, [r4, #4]
 8010480:	eb07 060a 	add.w	r6, r7, sl
 8010484:	42b3      	cmp	r3, r6
 8010486:	b085      	sub	sp, #20
 8010488:	bfb8      	it	lt
 801048a:	3101      	addlt	r1, #1
 801048c:	f7ff feda 	bl	8010244 <_Balloc>
 8010490:	b930      	cbnz	r0, 80104a0 <__multiply+0x44>
 8010492:	4602      	mov	r2, r0
 8010494:	4b44      	ldr	r3, [pc, #272]	; (80105a8 <__multiply+0x14c>)
 8010496:	4845      	ldr	r0, [pc, #276]	; (80105ac <__multiply+0x150>)
 8010498:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801049c:	f000 fd02 	bl	8010ea4 <__assert_func>
 80104a0:	f100 0514 	add.w	r5, r0, #20
 80104a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80104a8:	462b      	mov	r3, r5
 80104aa:	2200      	movs	r2, #0
 80104ac:	4543      	cmp	r3, r8
 80104ae:	d321      	bcc.n	80104f4 <__multiply+0x98>
 80104b0:	f104 0314 	add.w	r3, r4, #20
 80104b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80104b8:	f109 0314 	add.w	r3, r9, #20
 80104bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80104c0:	9202      	str	r2, [sp, #8]
 80104c2:	1b3a      	subs	r2, r7, r4
 80104c4:	3a15      	subs	r2, #21
 80104c6:	f022 0203 	bic.w	r2, r2, #3
 80104ca:	3204      	adds	r2, #4
 80104cc:	f104 0115 	add.w	r1, r4, #21
 80104d0:	428f      	cmp	r7, r1
 80104d2:	bf38      	it	cc
 80104d4:	2204      	movcc	r2, #4
 80104d6:	9201      	str	r2, [sp, #4]
 80104d8:	9a02      	ldr	r2, [sp, #8]
 80104da:	9303      	str	r3, [sp, #12]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d80c      	bhi.n	80104fa <__multiply+0x9e>
 80104e0:	2e00      	cmp	r6, #0
 80104e2:	dd03      	ble.n	80104ec <__multiply+0x90>
 80104e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d05b      	beq.n	80105a4 <__multiply+0x148>
 80104ec:	6106      	str	r6, [r0, #16]
 80104ee:	b005      	add	sp, #20
 80104f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f4:	f843 2b04 	str.w	r2, [r3], #4
 80104f8:	e7d8      	b.n	80104ac <__multiply+0x50>
 80104fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80104fe:	f1ba 0f00 	cmp.w	sl, #0
 8010502:	d024      	beq.n	801054e <__multiply+0xf2>
 8010504:	f104 0e14 	add.w	lr, r4, #20
 8010508:	46a9      	mov	r9, r5
 801050a:	f04f 0c00 	mov.w	ip, #0
 801050e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010512:	f8d9 1000 	ldr.w	r1, [r9]
 8010516:	fa1f fb82 	uxth.w	fp, r2
 801051a:	b289      	uxth	r1, r1
 801051c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010524:	f8d9 2000 	ldr.w	r2, [r9]
 8010528:	4461      	add	r1, ip
 801052a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801052e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010536:	b289      	uxth	r1, r1
 8010538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801053c:	4577      	cmp	r7, lr
 801053e:	f849 1b04 	str.w	r1, [r9], #4
 8010542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010546:	d8e2      	bhi.n	801050e <__multiply+0xb2>
 8010548:	9a01      	ldr	r2, [sp, #4]
 801054a:	f845 c002 	str.w	ip, [r5, r2]
 801054e:	9a03      	ldr	r2, [sp, #12]
 8010550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010554:	3304      	adds	r3, #4
 8010556:	f1b9 0f00 	cmp.w	r9, #0
 801055a:	d021      	beq.n	80105a0 <__multiply+0x144>
 801055c:	6829      	ldr	r1, [r5, #0]
 801055e:	f104 0c14 	add.w	ip, r4, #20
 8010562:	46ae      	mov	lr, r5
 8010564:	f04f 0a00 	mov.w	sl, #0
 8010568:	f8bc b000 	ldrh.w	fp, [ip]
 801056c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010570:	fb09 220b 	mla	r2, r9, fp, r2
 8010574:	4452      	add	r2, sl
 8010576:	b289      	uxth	r1, r1
 8010578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801057c:	f84e 1b04 	str.w	r1, [lr], #4
 8010580:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010584:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010588:	f8be 1000 	ldrh.w	r1, [lr]
 801058c:	fb09 110a 	mla	r1, r9, sl, r1
 8010590:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010594:	4567      	cmp	r7, ip
 8010596:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801059a:	d8e5      	bhi.n	8010568 <__multiply+0x10c>
 801059c:	9a01      	ldr	r2, [sp, #4]
 801059e:	50a9      	str	r1, [r5, r2]
 80105a0:	3504      	adds	r5, #4
 80105a2:	e799      	b.n	80104d8 <__multiply+0x7c>
 80105a4:	3e01      	subs	r6, #1
 80105a6:	e79b      	b.n	80104e0 <__multiply+0x84>
 80105a8:	08011b8c 	.word	0x08011b8c
 80105ac:	08011b9d 	.word	0x08011b9d

080105b0 <__pow5mult>:
 80105b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b4:	4615      	mov	r5, r2
 80105b6:	f012 0203 	ands.w	r2, r2, #3
 80105ba:	4606      	mov	r6, r0
 80105bc:	460f      	mov	r7, r1
 80105be:	d007      	beq.n	80105d0 <__pow5mult+0x20>
 80105c0:	4c25      	ldr	r4, [pc, #148]	; (8010658 <__pow5mult+0xa8>)
 80105c2:	3a01      	subs	r2, #1
 80105c4:	2300      	movs	r3, #0
 80105c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80105ca:	f7ff fe9d 	bl	8010308 <__multadd>
 80105ce:	4607      	mov	r7, r0
 80105d0:	10ad      	asrs	r5, r5, #2
 80105d2:	d03d      	beq.n	8010650 <__pow5mult+0xa0>
 80105d4:	69f4      	ldr	r4, [r6, #28]
 80105d6:	b97c      	cbnz	r4, 80105f8 <__pow5mult+0x48>
 80105d8:	2010      	movs	r0, #16
 80105da:	f7ff fd7f 	bl	80100dc <malloc>
 80105de:	4602      	mov	r2, r0
 80105e0:	61f0      	str	r0, [r6, #28]
 80105e2:	b928      	cbnz	r0, 80105f0 <__pow5mult+0x40>
 80105e4:	4b1d      	ldr	r3, [pc, #116]	; (801065c <__pow5mult+0xac>)
 80105e6:	481e      	ldr	r0, [pc, #120]	; (8010660 <__pow5mult+0xb0>)
 80105e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80105ec:	f000 fc5a 	bl	8010ea4 <__assert_func>
 80105f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80105f4:	6004      	str	r4, [r0, #0]
 80105f6:	60c4      	str	r4, [r0, #12]
 80105f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80105fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010600:	b94c      	cbnz	r4, 8010616 <__pow5mult+0x66>
 8010602:	f240 2171 	movw	r1, #625	; 0x271
 8010606:	4630      	mov	r0, r6
 8010608:	f7ff ff12 	bl	8010430 <__i2b>
 801060c:	2300      	movs	r3, #0
 801060e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010612:	4604      	mov	r4, r0
 8010614:	6003      	str	r3, [r0, #0]
 8010616:	f04f 0900 	mov.w	r9, #0
 801061a:	07eb      	lsls	r3, r5, #31
 801061c:	d50a      	bpl.n	8010634 <__pow5mult+0x84>
 801061e:	4639      	mov	r1, r7
 8010620:	4622      	mov	r2, r4
 8010622:	4630      	mov	r0, r6
 8010624:	f7ff ff1a 	bl	801045c <__multiply>
 8010628:	4639      	mov	r1, r7
 801062a:	4680      	mov	r8, r0
 801062c:	4630      	mov	r0, r6
 801062e:	f7ff fe49 	bl	80102c4 <_Bfree>
 8010632:	4647      	mov	r7, r8
 8010634:	106d      	asrs	r5, r5, #1
 8010636:	d00b      	beq.n	8010650 <__pow5mult+0xa0>
 8010638:	6820      	ldr	r0, [r4, #0]
 801063a:	b938      	cbnz	r0, 801064c <__pow5mult+0x9c>
 801063c:	4622      	mov	r2, r4
 801063e:	4621      	mov	r1, r4
 8010640:	4630      	mov	r0, r6
 8010642:	f7ff ff0b 	bl	801045c <__multiply>
 8010646:	6020      	str	r0, [r4, #0]
 8010648:	f8c0 9000 	str.w	r9, [r0]
 801064c:	4604      	mov	r4, r0
 801064e:	e7e4      	b.n	801061a <__pow5mult+0x6a>
 8010650:	4638      	mov	r0, r7
 8010652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010656:	bf00      	nop
 8010658:	08011ce8 	.word	0x08011ce8
 801065c:	08011b1d 	.word	0x08011b1d
 8010660:	08011b9d 	.word	0x08011b9d

08010664 <__lshift>:
 8010664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010668:	460c      	mov	r4, r1
 801066a:	6849      	ldr	r1, [r1, #4]
 801066c:	6923      	ldr	r3, [r4, #16]
 801066e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010672:	68a3      	ldr	r3, [r4, #8]
 8010674:	4607      	mov	r7, r0
 8010676:	4691      	mov	r9, r2
 8010678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801067c:	f108 0601 	add.w	r6, r8, #1
 8010680:	42b3      	cmp	r3, r6
 8010682:	db0b      	blt.n	801069c <__lshift+0x38>
 8010684:	4638      	mov	r0, r7
 8010686:	f7ff fddd 	bl	8010244 <_Balloc>
 801068a:	4605      	mov	r5, r0
 801068c:	b948      	cbnz	r0, 80106a2 <__lshift+0x3e>
 801068e:	4602      	mov	r2, r0
 8010690:	4b28      	ldr	r3, [pc, #160]	; (8010734 <__lshift+0xd0>)
 8010692:	4829      	ldr	r0, [pc, #164]	; (8010738 <__lshift+0xd4>)
 8010694:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010698:	f000 fc04 	bl	8010ea4 <__assert_func>
 801069c:	3101      	adds	r1, #1
 801069e:	005b      	lsls	r3, r3, #1
 80106a0:	e7ee      	b.n	8010680 <__lshift+0x1c>
 80106a2:	2300      	movs	r3, #0
 80106a4:	f100 0114 	add.w	r1, r0, #20
 80106a8:	f100 0210 	add.w	r2, r0, #16
 80106ac:	4618      	mov	r0, r3
 80106ae:	4553      	cmp	r3, sl
 80106b0:	db33      	blt.n	801071a <__lshift+0xb6>
 80106b2:	6920      	ldr	r0, [r4, #16]
 80106b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106b8:	f104 0314 	add.w	r3, r4, #20
 80106bc:	f019 091f 	ands.w	r9, r9, #31
 80106c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80106c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80106c8:	d02b      	beq.n	8010722 <__lshift+0xbe>
 80106ca:	f1c9 0e20 	rsb	lr, r9, #32
 80106ce:	468a      	mov	sl, r1
 80106d0:	2200      	movs	r2, #0
 80106d2:	6818      	ldr	r0, [r3, #0]
 80106d4:	fa00 f009 	lsl.w	r0, r0, r9
 80106d8:	4310      	orrs	r0, r2
 80106da:	f84a 0b04 	str.w	r0, [sl], #4
 80106de:	f853 2b04 	ldr.w	r2, [r3], #4
 80106e2:	459c      	cmp	ip, r3
 80106e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80106e8:	d8f3      	bhi.n	80106d2 <__lshift+0x6e>
 80106ea:	ebac 0304 	sub.w	r3, ip, r4
 80106ee:	3b15      	subs	r3, #21
 80106f0:	f023 0303 	bic.w	r3, r3, #3
 80106f4:	3304      	adds	r3, #4
 80106f6:	f104 0015 	add.w	r0, r4, #21
 80106fa:	4584      	cmp	ip, r0
 80106fc:	bf38      	it	cc
 80106fe:	2304      	movcc	r3, #4
 8010700:	50ca      	str	r2, [r1, r3]
 8010702:	b10a      	cbz	r2, 8010708 <__lshift+0xa4>
 8010704:	f108 0602 	add.w	r6, r8, #2
 8010708:	3e01      	subs	r6, #1
 801070a:	4638      	mov	r0, r7
 801070c:	612e      	str	r6, [r5, #16]
 801070e:	4621      	mov	r1, r4
 8010710:	f7ff fdd8 	bl	80102c4 <_Bfree>
 8010714:	4628      	mov	r0, r5
 8010716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801071a:	f842 0f04 	str.w	r0, [r2, #4]!
 801071e:	3301      	adds	r3, #1
 8010720:	e7c5      	b.n	80106ae <__lshift+0x4a>
 8010722:	3904      	subs	r1, #4
 8010724:	f853 2b04 	ldr.w	r2, [r3], #4
 8010728:	f841 2f04 	str.w	r2, [r1, #4]!
 801072c:	459c      	cmp	ip, r3
 801072e:	d8f9      	bhi.n	8010724 <__lshift+0xc0>
 8010730:	e7ea      	b.n	8010708 <__lshift+0xa4>
 8010732:	bf00      	nop
 8010734:	08011b8c 	.word	0x08011b8c
 8010738:	08011b9d 	.word	0x08011b9d

0801073c <__mcmp>:
 801073c:	b530      	push	{r4, r5, lr}
 801073e:	6902      	ldr	r2, [r0, #16]
 8010740:	690c      	ldr	r4, [r1, #16]
 8010742:	1b12      	subs	r2, r2, r4
 8010744:	d10e      	bne.n	8010764 <__mcmp+0x28>
 8010746:	f100 0314 	add.w	r3, r0, #20
 801074a:	3114      	adds	r1, #20
 801074c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010750:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010754:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010758:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801075c:	42a5      	cmp	r5, r4
 801075e:	d003      	beq.n	8010768 <__mcmp+0x2c>
 8010760:	d305      	bcc.n	801076e <__mcmp+0x32>
 8010762:	2201      	movs	r2, #1
 8010764:	4610      	mov	r0, r2
 8010766:	bd30      	pop	{r4, r5, pc}
 8010768:	4283      	cmp	r3, r0
 801076a:	d3f3      	bcc.n	8010754 <__mcmp+0x18>
 801076c:	e7fa      	b.n	8010764 <__mcmp+0x28>
 801076e:	f04f 32ff 	mov.w	r2, #4294967295
 8010772:	e7f7      	b.n	8010764 <__mcmp+0x28>

08010774 <__mdiff>:
 8010774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010778:	460c      	mov	r4, r1
 801077a:	4606      	mov	r6, r0
 801077c:	4611      	mov	r1, r2
 801077e:	4620      	mov	r0, r4
 8010780:	4690      	mov	r8, r2
 8010782:	f7ff ffdb 	bl	801073c <__mcmp>
 8010786:	1e05      	subs	r5, r0, #0
 8010788:	d110      	bne.n	80107ac <__mdiff+0x38>
 801078a:	4629      	mov	r1, r5
 801078c:	4630      	mov	r0, r6
 801078e:	f7ff fd59 	bl	8010244 <_Balloc>
 8010792:	b930      	cbnz	r0, 80107a2 <__mdiff+0x2e>
 8010794:	4b3a      	ldr	r3, [pc, #232]	; (8010880 <__mdiff+0x10c>)
 8010796:	4602      	mov	r2, r0
 8010798:	f240 2137 	movw	r1, #567	; 0x237
 801079c:	4839      	ldr	r0, [pc, #228]	; (8010884 <__mdiff+0x110>)
 801079e:	f000 fb81 	bl	8010ea4 <__assert_func>
 80107a2:	2301      	movs	r3, #1
 80107a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80107a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ac:	bfa4      	itt	ge
 80107ae:	4643      	movge	r3, r8
 80107b0:	46a0      	movge	r8, r4
 80107b2:	4630      	mov	r0, r6
 80107b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80107b8:	bfa6      	itte	ge
 80107ba:	461c      	movge	r4, r3
 80107bc:	2500      	movge	r5, #0
 80107be:	2501      	movlt	r5, #1
 80107c0:	f7ff fd40 	bl	8010244 <_Balloc>
 80107c4:	b920      	cbnz	r0, 80107d0 <__mdiff+0x5c>
 80107c6:	4b2e      	ldr	r3, [pc, #184]	; (8010880 <__mdiff+0x10c>)
 80107c8:	4602      	mov	r2, r0
 80107ca:	f240 2145 	movw	r1, #581	; 0x245
 80107ce:	e7e5      	b.n	801079c <__mdiff+0x28>
 80107d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80107d4:	6926      	ldr	r6, [r4, #16]
 80107d6:	60c5      	str	r5, [r0, #12]
 80107d8:	f104 0914 	add.w	r9, r4, #20
 80107dc:	f108 0514 	add.w	r5, r8, #20
 80107e0:	f100 0e14 	add.w	lr, r0, #20
 80107e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80107e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80107ec:	f108 0210 	add.w	r2, r8, #16
 80107f0:	46f2      	mov	sl, lr
 80107f2:	2100      	movs	r1, #0
 80107f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80107f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80107fc:	fa11 f88b 	uxtah	r8, r1, fp
 8010800:	b299      	uxth	r1, r3
 8010802:	0c1b      	lsrs	r3, r3, #16
 8010804:	eba8 0801 	sub.w	r8, r8, r1
 8010808:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801080c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010810:	fa1f f888 	uxth.w	r8, r8
 8010814:	1419      	asrs	r1, r3, #16
 8010816:	454e      	cmp	r6, r9
 8010818:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801081c:	f84a 3b04 	str.w	r3, [sl], #4
 8010820:	d8e8      	bhi.n	80107f4 <__mdiff+0x80>
 8010822:	1b33      	subs	r3, r6, r4
 8010824:	3b15      	subs	r3, #21
 8010826:	f023 0303 	bic.w	r3, r3, #3
 801082a:	3304      	adds	r3, #4
 801082c:	3415      	adds	r4, #21
 801082e:	42a6      	cmp	r6, r4
 8010830:	bf38      	it	cc
 8010832:	2304      	movcc	r3, #4
 8010834:	441d      	add	r5, r3
 8010836:	4473      	add	r3, lr
 8010838:	469e      	mov	lr, r3
 801083a:	462e      	mov	r6, r5
 801083c:	4566      	cmp	r6, ip
 801083e:	d30e      	bcc.n	801085e <__mdiff+0xea>
 8010840:	f10c 0203 	add.w	r2, ip, #3
 8010844:	1b52      	subs	r2, r2, r5
 8010846:	f022 0203 	bic.w	r2, r2, #3
 801084a:	3d03      	subs	r5, #3
 801084c:	45ac      	cmp	ip, r5
 801084e:	bf38      	it	cc
 8010850:	2200      	movcc	r2, #0
 8010852:	4413      	add	r3, r2
 8010854:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010858:	b17a      	cbz	r2, 801087a <__mdiff+0x106>
 801085a:	6107      	str	r7, [r0, #16]
 801085c:	e7a4      	b.n	80107a8 <__mdiff+0x34>
 801085e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010862:	fa11 f288 	uxtah	r2, r1, r8
 8010866:	1414      	asrs	r4, r2, #16
 8010868:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801086c:	b292      	uxth	r2, r2
 801086e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010872:	f84e 2b04 	str.w	r2, [lr], #4
 8010876:	1421      	asrs	r1, r4, #16
 8010878:	e7e0      	b.n	801083c <__mdiff+0xc8>
 801087a:	3f01      	subs	r7, #1
 801087c:	e7ea      	b.n	8010854 <__mdiff+0xe0>
 801087e:	bf00      	nop
 8010880:	08011b8c 	.word	0x08011b8c
 8010884:	08011b9d 	.word	0x08011b9d

08010888 <__d2b>:
 8010888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801088c:	460f      	mov	r7, r1
 801088e:	2101      	movs	r1, #1
 8010890:	ec59 8b10 	vmov	r8, r9, d0
 8010894:	4616      	mov	r6, r2
 8010896:	f7ff fcd5 	bl	8010244 <_Balloc>
 801089a:	4604      	mov	r4, r0
 801089c:	b930      	cbnz	r0, 80108ac <__d2b+0x24>
 801089e:	4602      	mov	r2, r0
 80108a0:	4b24      	ldr	r3, [pc, #144]	; (8010934 <__d2b+0xac>)
 80108a2:	4825      	ldr	r0, [pc, #148]	; (8010938 <__d2b+0xb0>)
 80108a4:	f240 310f 	movw	r1, #783	; 0x30f
 80108a8:	f000 fafc 	bl	8010ea4 <__assert_func>
 80108ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80108b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80108b4:	bb2d      	cbnz	r5, 8010902 <__d2b+0x7a>
 80108b6:	9301      	str	r3, [sp, #4]
 80108b8:	f1b8 0300 	subs.w	r3, r8, #0
 80108bc:	d026      	beq.n	801090c <__d2b+0x84>
 80108be:	4668      	mov	r0, sp
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	f7ff fd87 	bl	80103d4 <__lo0bits>
 80108c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80108ca:	b1e8      	cbz	r0, 8010908 <__d2b+0x80>
 80108cc:	f1c0 0320 	rsb	r3, r0, #32
 80108d0:	fa02 f303 	lsl.w	r3, r2, r3
 80108d4:	430b      	orrs	r3, r1
 80108d6:	40c2      	lsrs	r2, r0
 80108d8:	6163      	str	r3, [r4, #20]
 80108da:	9201      	str	r2, [sp, #4]
 80108dc:	9b01      	ldr	r3, [sp, #4]
 80108de:	61a3      	str	r3, [r4, #24]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	bf14      	ite	ne
 80108e4:	2202      	movne	r2, #2
 80108e6:	2201      	moveq	r2, #1
 80108e8:	6122      	str	r2, [r4, #16]
 80108ea:	b1bd      	cbz	r5, 801091c <__d2b+0x94>
 80108ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80108f0:	4405      	add	r5, r0
 80108f2:	603d      	str	r5, [r7, #0]
 80108f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80108f8:	6030      	str	r0, [r6, #0]
 80108fa:	4620      	mov	r0, r4
 80108fc:	b003      	add	sp, #12
 80108fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010906:	e7d6      	b.n	80108b6 <__d2b+0x2e>
 8010908:	6161      	str	r1, [r4, #20]
 801090a:	e7e7      	b.n	80108dc <__d2b+0x54>
 801090c:	a801      	add	r0, sp, #4
 801090e:	f7ff fd61 	bl	80103d4 <__lo0bits>
 8010912:	9b01      	ldr	r3, [sp, #4]
 8010914:	6163      	str	r3, [r4, #20]
 8010916:	3020      	adds	r0, #32
 8010918:	2201      	movs	r2, #1
 801091a:	e7e5      	b.n	80108e8 <__d2b+0x60>
 801091c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010920:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010924:	6038      	str	r0, [r7, #0]
 8010926:	6918      	ldr	r0, [r3, #16]
 8010928:	f7ff fd34 	bl	8010394 <__hi0bits>
 801092c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010930:	e7e2      	b.n	80108f8 <__d2b+0x70>
 8010932:	bf00      	nop
 8010934:	08011b8c 	.word	0x08011b8c
 8010938:	08011b9d 	.word	0x08011b9d

0801093c <__ssputs_r>:
 801093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010940:	688e      	ldr	r6, [r1, #8]
 8010942:	461f      	mov	r7, r3
 8010944:	42be      	cmp	r6, r7
 8010946:	680b      	ldr	r3, [r1, #0]
 8010948:	4682      	mov	sl, r0
 801094a:	460c      	mov	r4, r1
 801094c:	4690      	mov	r8, r2
 801094e:	d82c      	bhi.n	80109aa <__ssputs_r+0x6e>
 8010950:	898a      	ldrh	r2, [r1, #12]
 8010952:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010956:	d026      	beq.n	80109a6 <__ssputs_r+0x6a>
 8010958:	6965      	ldr	r5, [r4, #20]
 801095a:	6909      	ldr	r1, [r1, #16]
 801095c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010960:	eba3 0901 	sub.w	r9, r3, r1
 8010964:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010968:	1c7b      	adds	r3, r7, #1
 801096a:	444b      	add	r3, r9
 801096c:	106d      	asrs	r5, r5, #1
 801096e:	429d      	cmp	r5, r3
 8010970:	bf38      	it	cc
 8010972:	461d      	movcc	r5, r3
 8010974:	0553      	lsls	r3, r2, #21
 8010976:	d527      	bpl.n	80109c8 <__ssputs_r+0x8c>
 8010978:	4629      	mov	r1, r5
 801097a:	f7ff fbd7 	bl	801012c <_malloc_r>
 801097e:	4606      	mov	r6, r0
 8010980:	b360      	cbz	r0, 80109dc <__ssputs_r+0xa0>
 8010982:	6921      	ldr	r1, [r4, #16]
 8010984:	464a      	mov	r2, r9
 8010986:	f7fe fcd3 	bl	800f330 <memcpy>
 801098a:	89a3      	ldrh	r3, [r4, #12]
 801098c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010994:	81a3      	strh	r3, [r4, #12]
 8010996:	6126      	str	r6, [r4, #16]
 8010998:	6165      	str	r5, [r4, #20]
 801099a:	444e      	add	r6, r9
 801099c:	eba5 0509 	sub.w	r5, r5, r9
 80109a0:	6026      	str	r6, [r4, #0]
 80109a2:	60a5      	str	r5, [r4, #8]
 80109a4:	463e      	mov	r6, r7
 80109a6:	42be      	cmp	r6, r7
 80109a8:	d900      	bls.n	80109ac <__ssputs_r+0x70>
 80109aa:	463e      	mov	r6, r7
 80109ac:	6820      	ldr	r0, [r4, #0]
 80109ae:	4632      	mov	r2, r6
 80109b0:	4641      	mov	r1, r8
 80109b2:	f000 fa2b 	bl	8010e0c <memmove>
 80109b6:	68a3      	ldr	r3, [r4, #8]
 80109b8:	1b9b      	subs	r3, r3, r6
 80109ba:	60a3      	str	r3, [r4, #8]
 80109bc:	6823      	ldr	r3, [r4, #0]
 80109be:	4433      	add	r3, r6
 80109c0:	6023      	str	r3, [r4, #0]
 80109c2:	2000      	movs	r0, #0
 80109c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c8:	462a      	mov	r2, r5
 80109ca:	f000 fab1 	bl	8010f30 <_realloc_r>
 80109ce:	4606      	mov	r6, r0
 80109d0:	2800      	cmp	r0, #0
 80109d2:	d1e0      	bne.n	8010996 <__ssputs_r+0x5a>
 80109d4:	6921      	ldr	r1, [r4, #16]
 80109d6:	4650      	mov	r0, sl
 80109d8:	f7ff fb34 	bl	8010044 <_free_r>
 80109dc:	230c      	movs	r3, #12
 80109de:	f8ca 3000 	str.w	r3, [sl]
 80109e2:	89a3      	ldrh	r3, [r4, #12]
 80109e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109e8:	81a3      	strh	r3, [r4, #12]
 80109ea:	f04f 30ff 	mov.w	r0, #4294967295
 80109ee:	e7e9      	b.n	80109c4 <__ssputs_r+0x88>

080109f0 <_svfiprintf_r>:
 80109f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f4:	4698      	mov	r8, r3
 80109f6:	898b      	ldrh	r3, [r1, #12]
 80109f8:	061b      	lsls	r3, r3, #24
 80109fa:	b09d      	sub	sp, #116	; 0x74
 80109fc:	4607      	mov	r7, r0
 80109fe:	460d      	mov	r5, r1
 8010a00:	4614      	mov	r4, r2
 8010a02:	d50e      	bpl.n	8010a22 <_svfiprintf_r+0x32>
 8010a04:	690b      	ldr	r3, [r1, #16]
 8010a06:	b963      	cbnz	r3, 8010a22 <_svfiprintf_r+0x32>
 8010a08:	2140      	movs	r1, #64	; 0x40
 8010a0a:	f7ff fb8f 	bl	801012c <_malloc_r>
 8010a0e:	6028      	str	r0, [r5, #0]
 8010a10:	6128      	str	r0, [r5, #16]
 8010a12:	b920      	cbnz	r0, 8010a1e <_svfiprintf_r+0x2e>
 8010a14:	230c      	movs	r3, #12
 8010a16:	603b      	str	r3, [r7, #0]
 8010a18:	f04f 30ff 	mov.w	r0, #4294967295
 8010a1c:	e0d0      	b.n	8010bc0 <_svfiprintf_r+0x1d0>
 8010a1e:	2340      	movs	r3, #64	; 0x40
 8010a20:	616b      	str	r3, [r5, #20]
 8010a22:	2300      	movs	r3, #0
 8010a24:	9309      	str	r3, [sp, #36]	; 0x24
 8010a26:	2320      	movs	r3, #32
 8010a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a30:	2330      	movs	r3, #48	; 0x30
 8010a32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010bd8 <_svfiprintf_r+0x1e8>
 8010a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a3a:	f04f 0901 	mov.w	r9, #1
 8010a3e:	4623      	mov	r3, r4
 8010a40:	469a      	mov	sl, r3
 8010a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a46:	b10a      	cbz	r2, 8010a4c <_svfiprintf_r+0x5c>
 8010a48:	2a25      	cmp	r2, #37	; 0x25
 8010a4a:	d1f9      	bne.n	8010a40 <_svfiprintf_r+0x50>
 8010a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8010a50:	d00b      	beq.n	8010a6a <_svfiprintf_r+0x7a>
 8010a52:	465b      	mov	r3, fp
 8010a54:	4622      	mov	r2, r4
 8010a56:	4629      	mov	r1, r5
 8010a58:	4638      	mov	r0, r7
 8010a5a:	f7ff ff6f 	bl	801093c <__ssputs_r>
 8010a5e:	3001      	adds	r0, #1
 8010a60:	f000 80a9 	beq.w	8010bb6 <_svfiprintf_r+0x1c6>
 8010a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a66:	445a      	add	r2, fp
 8010a68:	9209      	str	r2, [sp, #36]	; 0x24
 8010a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f000 80a1 	beq.w	8010bb6 <_svfiprintf_r+0x1c6>
 8010a74:	2300      	movs	r3, #0
 8010a76:	f04f 32ff 	mov.w	r2, #4294967295
 8010a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a7e:	f10a 0a01 	add.w	sl, sl, #1
 8010a82:	9304      	str	r3, [sp, #16]
 8010a84:	9307      	str	r3, [sp, #28]
 8010a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8010a8c:	4654      	mov	r4, sl
 8010a8e:	2205      	movs	r2, #5
 8010a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a94:	4850      	ldr	r0, [pc, #320]	; (8010bd8 <_svfiprintf_r+0x1e8>)
 8010a96:	f7ef fbcb 	bl	8000230 <memchr>
 8010a9a:	9a04      	ldr	r2, [sp, #16]
 8010a9c:	b9d8      	cbnz	r0, 8010ad6 <_svfiprintf_r+0xe6>
 8010a9e:	06d0      	lsls	r0, r2, #27
 8010aa0:	bf44      	itt	mi
 8010aa2:	2320      	movmi	r3, #32
 8010aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010aa8:	0711      	lsls	r1, r2, #28
 8010aaa:	bf44      	itt	mi
 8010aac:	232b      	movmi	r3, #43	; 0x2b
 8010aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ab8:	d015      	beq.n	8010ae6 <_svfiprintf_r+0xf6>
 8010aba:	9a07      	ldr	r2, [sp, #28]
 8010abc:	4654      	mov	r4, sl
 8010abe:	2000      	movs	r0, #0
 8010ac0:	f04f 0c0a 	mov.w	ip, #10
 8010ac4:	4621      	mov	r1, r4
 8010ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010aca:	3b30      	subs	r3, #48	; 0x30
 8010acc:	2b09      	cmp	r3, #9
 8010ace:	d94d      	bls.n	8010b6c <_svfiprintf_r+0x17c>
 8010ad0:	b1b0      	cbz	r0, 8010b00 <_svfiprintf_r+0x110>
 8010ad2:	9207      	str	r2, [sp, #28]
 8010ad4:	e014      	b.n	8010b00 <_svfiprintf_r+0x110>
 8010ad6:	eba0 0308 	sub.w	r3, r0, r8
 8010ada:	fa09 f303 	lsl.w	r3, r9, r3
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	9304      	str	r3, [sp, #16]
 8010ae2:	46a2      	mov	sl, r4
 8010ae4:	e7d2      	b.n	8010a8c <_svfiprintf_r+0x9c>
 8010ae6:	9b03      	ldr	r3, [sp, #12]
 8010ae8:	1d19      	adds	r1, r3, #4
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	9103      	str	r1, [sp, #12]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	bfbb      	ittet	lt
 8010af2:	425b      	neglt	r3, r3
 8010af4:	f042 0202 	orrlt.w	r2, r2, #2
 8010af8:	9307      	strge	r3, [sp, #28]
 8010afa:	9307      	strlt	r3, [sp, #28]
 8010afc:	bfb8      	it	lt
 8010afe:	9204      	strlt	r2, [sp, #16]
 8010b00:	7823      	ldrb	r3, [r4, #0]
 8010b02:	2b2e      	cmp	r3, #46	; 0x2e
 8010b04:	d10c      	bne.n	8010b20 <_svfiprintf_r+0x130>
 8010b06:	7863      	ldrb	r3, [r4, #1]
 8010b08:	2b2a      	cmp	r3, #42	; 0x2a
 8010b0a:	d134      	bne.n	8010b76 <_svfiprintf_r+0x186>
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	1d1a      	adds	r2, r3, #4
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	9203      	str	r2, [sp, #12]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	bfb8      	it	lt
 8010b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b1c:	3402      	adds	r4, #2
 8010b1e:	9305      	str	r3, [sp, #20]
 8010b20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010be8 <_svfiprintf_r+0x1f8>
 8010b24:	7821      	ldrb	r1, [r4, #0]
 8010b26:	2203      	movs	r2, #3
 8010b28:	4650      	mov	r0, sl
 8010b2a:	f7ef fb81 	bl	8000230 <memchr>
 8010b2e:	b138      	cbz	r0, 8010b40 <_svfiprintf_r+0x150>
 8010b30:	9b04      	ldr	r3, [sp, #16]
 8010b32:	eba0 000a 	sub.w	r0, r0, sl
 8010b36:	2240      	movs	r2, #64	; 0x40
 8010b38:	4082      	lsls	r2, r0
 8010b3a:	4313      	orrs	r3, r2
 8010b3c:	3401      	adds	r4, #1
 8010b3e:	9304      	str	r3, [sp, #16]
 8010b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b44:	4825      	ldr	r0, [pc, #148]	; (8010bdc <_svfiprintf_r+0x1ec>)
 8010b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b4a:	2206      	movs	r2, #6
 8010b4c:	f7ef fb70 	bl	8000230 <memchr>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d038      	beq.n	8010bc6 <_svfiprintf_r+0x1d6>
 8010b54:	4b22      	ldr	r3, [pc, #136]	; (8010be0 <_svfiprintf_r+0x1f0>)
 8010b56:	bb1b      	cbnz	r3, 8010ba0 <_svfiprintf_r+0x1b0>
 8010b58:	9b03      	ldr	r3, [sp, #12]
 8010b5a:	3307      	adds	r3, #7
 8010b5c:	f023 0307 	bic.w	r3, r3, #7
 8010b60:	3308      	adds	r3, #8
 8010b62:	9303      	str	r3, [sp, #12]
 8010b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b66:	4433      	add	r3, r6
 8010b68:	9309      	str	r3, [sp, #36]	; 0x24
 8010b6a:	e768      	b.n	8010a3e <_svfiprintf_r+0x4e>
 8010b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b70:	460c      	mov	r4, r1
 8010b72:	2001      	movs	r0, #1
 8010b74:	e7a6      	b.n	8010ac4 <_svfiprintf_r+0xd4>
 8010b76:	2300      	movs	r3, #0
 8010b78:	3401      	adds	r4, #1
 8010b7a:	9305      	str	r3, [sp, #20]
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	f04f 0c0a 	mov.w	ip, #10
 8010b82:	4620      	mov	r0, r4
 8010b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b88:	3a30      	subs	r2, #48	; 0x30
 8010b8a:	2a09      	cmp	r2, #9
 8010b8c:	d903      	bls.n	8010b96 <_svfiprintf_r+0x1a6>
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d0c6      	beq.n	8010b20 <_svfiprintf_r+0x130>
 8010b92:	9105      	str	r1, [sp, #20]
 8010b94:	e7c4      	b.n	8010b20 <_svfiprintf_r+0x130>
 8010b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e7f0      	b.n	8010b82 <_svfiprintf_r+0x192>
 8010ba0:	ab03      	add	r3, sp, #12
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	462a      	mov	r2, r5
 8010ba6:	4b0f      	ldr	r3, [pc, #60]	; (8010be4 <_svfiprintf_r+0x1f4>)
 8010ba8:	a904      	add	r1, sp, #16
 8010baa:	4638      	mov	r0, r7
 8010bac:	f7fd fd0e 	bl	800e5cc <_printf_float>
 8010bb0:	1c42      	adds	r2, r0, #1
 8010bb2:	4606      	mov	r6, r0
 8010bb4:	d1d6      	bne.n	8010b64 <_svfiprintf_r+0x174>
 8010bb6:	89ab      	ldrh	r3, [r5, #12]
 8010bb8:	065b      	lsls	r3, r3, #25
 8010bba:	f53f af2d 	bmi.w	8010a18 <_svfiprintf_r+0x28>
 8010bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bc0:	b01d      	add	sp, #116	; 0x74
 8010bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc6:	ab03      	add	r3, sp, #12
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	462a      	mov	r2, r5
 8010bcc:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <_svfiprintf_r+0x1f4>)
 8010bce:	a904      	add	r1, sp, #16
 8010bd0:	4638      	mov	r0, r7
 8010bd2:	f7fd ff9f 	bl	800eb14 <_printf_i>
 8010bd6:	e7eb      	b.n	8010bb0 <_svfiprintf_r+0x1c0>
 8010bd8:	08011cf4 	.word	0x08011cf4
 8010bdc:	08011cfe 	.word	0x08011cfe
 8010be0:	0800e5cd 	.word	0x0800e5cd
 8010be4:	0801093d 	.word	0x0801093d
 8010be8:	08011cfa 	.word	0x08011cfa

08010bec <__sflush_r>:
 8010bec:	898a      	ldrh	r2, [r1, #12]
 8010bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf2:	4605      	mov	r5, r0
 8010bf4:	0710      	lsls	r0, r2, #28
 8010bf6:	460c      	mov	r4, r1
 8010bf8:	d458      	bmi.n	8010cac <__sflush_r+0xc0>
 8010bfa:	684b      	ldr	r3, [r1, #4]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	dc05      	bgt.n	8010c0c <__sflush_r+0x20>
 8010c00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	dc02      	bgt.n	8010c0c <__sflush_r+0x20>
 8010c06:	2000      	movs	r0, #0
 8010c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c0e:	2e00      	cmp	r6, #0
 8010c10:	d0f9      	beq.n	8010c06 <__sflush_r+0x1a>
 8010c12:	2300      	movs	r3, #0
 8010c14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c18:	682f      	ldr	r7, [r5, #0]
 8010c1a:	6a21      	ldr	r1, [r4, #32]
 8010c1c:	602b      	str	r3, [r5, #0]
 8010c1e:	d032      	beq.n	8010c86 <__sflush_r+0x9a>
 8010c20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c22:	89a3      	ldrh	r3, [r4, #12]
 8010c24:	075a      	lsls	r2, r3, #29
 8010c26:	d505      	bpl.n	8010c34 <__sflush_r+0x48>
 8010c28:	6863      	ldr	r3, [r4, #4]
 8010c2a:	1ac0      	subs	r0, r0, r3
 8010c2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c2e:	b10b      	cbz	r3, 8010c34 <__sflush_r+0x48>
 8010c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c32:	1ac0      	subs	r0, r0, r3
 8010c34:	2300      	movs	r3, #0
 8010c36:	4602      	mov	r2, r0
 8010c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c3a:	6a21      	ldr	r1, [r4, #32]
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	47b0      	blx	r6
 8010c40:	1c43      	adds	r3, r0, #1
 8010c42:	89a3      	ldrh	r3, [r4, #12]
 8010c44:	d106      	bne.n	8010c54 <__sflush_r+0x68>
 8010c46:	6829      	ldr	r1, [r5, #0]
 8010c48:	291d      	cmp	r1, #29
 8010c4a:	d82b      	bhi.n	8010ca4 <__sflush_r+0xb8>
 8010c4c:	4a29      	ldr	r2, [pc, #164]	; (8010cf4 <__sflush_r+0x108>)
 8010c4e:	410a      	asrs	r2, r1
 8010c50:	07d6      	lsls	r6, r2, #31
 8010c52:	d427      	bmi.n	8010ca4 <__sflush_r+0xb8>
 8010c54:	2200      	movs	r2, #0
 8010c56:	6062      	str	r2, [r4, #4]
 8010c58:	04d9      	lsls	r1, r3, #19
 8010c5a:	6922      	ldr	r2, [r4, #16]
 8010c5c:	6022      	str	r2, [r4, #0]
 8010c5e:	d504      	bpl.n	8010c6a <__sflush_r+0x7e>
 8010c60:	1c42      	adds	r2, r0, #1
 8010c62:	d101      	bne.n	8010c68 <__sflush_r+0x7c>
 8010c64:	682b      	ldr	r3, [r5, #0]
 8010c66:	b903      	cbnz	r3, 8010c6a <__sflush_r+0x7e>
 8010c68:	6560      	str	r0, [r4, #84]	; 0x54
 8010c6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c6c:	602f      	str	r7, [r5, #0]
 8010c6e:	2900      	cmp	r1, #0
 8010c70:	d0c9      	beq.n	8010c06 <__sflush_r+0x1a>
 8010c72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c76:	4299      	cmp	r1, r3
 8010c78:	d002      	beq.n	8010c80 <__sflush_r+0x94>
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	f7ff f9e2 	bl	8010044 <_free_r>
 8010c80:	2000      	movs	r0, #0
 8010c82:	6360      	str	r0, [r4, #52]	; 0x34
 8010c84:	e7c0      	b.n	8010c08 <__sflush_r+0x1c>
 8010c86:	2301      	movs	r3, #1
 8010c88:	4628      	mov	r0, r5
 8010c8a:	47b0      	blx	r6
 8010c8c:	1c41      	adds	r1, r0, #1
 8010c8e:	d1c8      	bne.n	8010c22 <__sflush_r+0x36>
 8010c90:	682b      	ldr	r3, [r5, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d0c5      	beq.n	8010c22 <__sflush_r+0x36>
 8010c96:	2b1d      	cmp	r3, #29
 8010c98:	d001      	beq.n	8010c9e <__sflush_r+0xb2>
 8010c9a:	2b16      	cmp	r3, #22
 8010c9c:	d101      	bne.n	8010ca2 <__sflush_r+0xb6>
 8010c9e:	602f      	str	r7, [r5, #0]
 8010ca0:	e7b1      	b.n	8010c06 <__sflush_r+0x1a>
 8010ca2:	89a3      	ldrh	r3, [r4, #12]
 8010ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ca8:	81a3      	strh	r3, [r4, #12]
 8010caa:	e7ad      	b.n	8010c08 <__sflush_r+0x1c>
 8010cac:	690f      	ldr	r7, [r1, #16]
 8010cae:	2f00      	cmp	r7, #0
 8010cb0:	d0a9      	beq.n	8010c06 <__sflush_r+0x1a>
 8010cb2:	0793      	lsls	r3, r2, #30
 8010cb4:	680e      	ldr	r6, [r1, #0]
 8010cb6:	bf08      	it	eq
 8010cb8:	694b      	ldreq	r3, [r1, #20]
 8010cba:	600f      	str	r7, [r1, #0]
 8010cbc:	bf18      	it	ne
 8010cbe:	2300      	movne	r3, #0
 8010cc0:	eba6 0807 	sub.w	r8, r6, r7
 8010cc4:	608b      	str	r3, [r1, #8]
 8010cc6:	f1b8 0f00 	cmp.w	r8, #0
 8010cca:	dd9c      	ble.n	8010c06 <__sflush_r+0x1a>
 8010ccc:	6a21      	ldr	r1, [r4, #32]
 8010cce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010cd0:	4643      	mov	r3, r8
 8010cd2:	463a      	mov	r2, r7
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	47b0      	blx	r6
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	dc06      	bgt.n	8010cea <__sflush_r+0xfe>
 8010cdc:	89a3      	ldrh	r3, [r4, #12]
 8010cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ce2:	81a3      	strh	r3, [r4, #12]
 8010ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce8:	e78e      	b.n	8010c08 <__sflush_r+0x1c>
 8010cea:	4407      	add	r7, r0
 8010cec:	eba8 0800 	sub.w	r8, r8, r0
 8010cf0:	e7e9      	b.n	8010cc6 <__sflush_r+0xda>
 8010cf2:	bf00      	nop
 8010cf4:	dfbffffe 	.word	0xdfbffffe

08010cf8 <_fflush_r>:
 8010cf8:	b538      	push	{r3, r4, r5, lr}
 8010cfa:	690b      	ldr	r3, [r1, #16]
 8010cfc:	4605      	mov	r5, r0
 8010cfe:	460c      	mov	r4, r1
 8010d00:	b913      	cbnz	r3, 8010d08 <_fflush_r+0x10>
 8010d02:	2500      	movs	r5, #0
 8010d04:	4628      	mov	r0, r5
 8010d06:	bd38      	pop	{r3, r4, r5, pc}
 8010d08:	b118      	cbz	r0, 8010d12 <_fflush_r+0x1a>
 8010d0a:	6a03      	ldr	r3, [r0, #32]
 8010d0c:	b90b      	cbnz	r3, 8010d12 <_fflush_r+0x1a>
 8010d0e:	f7fe f89d 	bl	800ee4c <__sinit>
 8010d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d0f3      	beq.n	8010d02 <_fflush_r+0xa>
 8010d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d1c:	07d0      	lsls	r0, r2, #31
 8010d1e:	d404      	bmi.n	8010d2a <_fflush_r+0x32>
 8010d20:	0599      	lsls	r1, r3, #22
 8010d22:	d402      	bmi.n	8010d2a <_fflush_r+0x32>
 8010d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d26:	f7fe fb01 	bl	800f32c <__retarget_lock_acquire_recursive>
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	4621      	mov	r1, r4
 8010d2e:	f7ff ff5d 	bl	8010bec <__sflush_r>
 8010d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d34:	07da      	lsls	r2, r3, #31
 8010d36:	4605      	mov	r5, r0
 8010d38:	d4e4      	bmi.n	8010d04 <_fflush_r+0xc>
 8010d3a:	89a3      	ldrh	r3, [r4, #12]
 8010d3c:	059b      	lsls	r3, r3, #22
 8010d3e:	d4e1      	bmi.n	8010d04 <_fflush_r+0xc>
 8010d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d42:	f7fe faf4 	bl	800f32e <__retarget_lock_release_recursive>
 8010d46:	e7dd      	b.n	8010d04 <_fflush_r+0xc>

08010d48 <__swhatbuf_r>:
 8010d48:	b570      	push	{r4, r5, r6, lr}
 8010d4a:	460c      	mov	r4, r1
 8010d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d50:	2900      	cmp	r1, #0
 8010d52:	b096      	sub	sp, #88	; 0x58
 8010d54:	4615      	mov	r5, r2
 8010d56:	461e      	mov	r6, r3
 8010d58:	da0d      	bge.n	8010d76 <__swhatbuf_r+0x2e>
 8010d5a:	89a3      	ldrh	r3, [r4, #12]
 8010d5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010d60:	f04f 0100 	mov.w	r1, #0
 8010d64:	bf0c      	ite	eq
 8010d66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010d6a:	2340      	movne	r3, #64	; 0x40
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	6031      	str	r1, [r6, #0]
 8010d70:	602b      	str	r3, [r5, #0]
 8010d72:	b016      	add	sp, #88	; 0x58
 8010d74:	bd70      	pop	{r4, r5, r6, pc}
 8010d76:	466a      	mov	r2, sp
 8010d78:	f000 f862 	bl	8010e40 <_fstat_r>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	dbec      	blt.n	8010d5a <__swhatbuf_r+0x12>
 8010d80:	9901      	ldr	r1, [sp, #4]
 8010d82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010d86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010d8a:	4259      	negs	r1, r3
 8010d8c:	4159      	adcs	r1, r3
 8010d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d92:	e7eb      	b.n	8010d6c <__swhatbuf_r+0x24>

08010d94 <__smakebuf_r>:
 8010d94:	898b      	ldrh	r3, [r1, #12]
 8010d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d98:	079d      	lsls	r5, r3, #30
 8010d9a:	4606      	mov	r6, r0
 8010d9c:	460c      	mov	r4, r1
 8010d9e:	d507      	bpl.n	8010db0 <__smakebuf_r+0x1c>
 8010da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010da4:	6023      	str	r3, [r4, #0]
 8010da6:	6123      	str	r3, [r4, #16]
 8010da8:	2301      	movs	r3, #1
 8010daa:	6163      	str	r3, [r4, #20]
 8010dac:	b002      	add	sp, #8
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
 8010db0:	ab01      	add	r3, sp, #4
 8010db2:	466a      	mov	r2, sp
 8010db4:	f7ff ffc8 	bl	8010d48 <__swhatbuf_r>
 8010db8:	9900      	ldr	r1, [sp, #0]
 8010dba:	4605      	mov	r5, r0
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	f7ff f9b5 	bl	801012c <_malloc_r>
 8010dc2:	b948      	cbnz	r0, 8010dd8 <__smakebuf_r+0x44>
 8010dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dc8:	059a      	lsls	r2, r3, #22
 8010dca:	d4ef      	bmi.n	8010dac <__smakebuf_r+0x18>
 8010dcc:	f023 0303 	bic.w	r3, r3, #3
 8010dd0:	f043 0302 	orr.w	r3, r3, #2
 8010dd4:	81a3      	strh	r3, [r4, #12]
 8010dd6:	e7e3      	b.n	8010da0 <__smakebuf_r+0xc>
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	6020      	str	r0, [r4, #0]
 8010ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010de0:	81a3      	strh	r3, [r4, #12]
 8010de2:	9b00      	ldr	r3, [sp, #0]
 8010de4:	6163      	str	r3, [r4, #20]
 8010de6:	9b01      	ldr	r3, [sp, #4]
 8010de8:	6120      	str	r0, [r4, #16]
 8010dea:	b15b      	cbz	r3, 8010e04 <__smakebuf_r+0x70>
 8010dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010df0:	4630      	mov	r0, r6
 8010df2:	f000 f837 	bl	8010e64 <_isatty_r>
 8010df6:	b128      	cbz	r0, 8010e04 <__smakebuf_r+0x70>
 8010df8:	89a3      	ldrh	r3, [r4, #12]
 8010dfa:	f023 0303 	bic.w	r3, r3, #3
 8010dfe:	f043 0301 	orr.w	r3, r3, #1
 8010e02:	81a3      	strh	r3, [r4, #12]
 8010e04:	89a3      	ldrh	r3, [r4, #12]
 8010e06:	431d      	orrs	r5, r3
 8010e08:	81a5      	strh	r5, [r4, #12]
 8010e0a:	e7cf      	b.n	8010dac <__smakebuf_r+0x18>

08010e0c <memmove>:
 8010e0c:	4288      	cmp	r0, r1
 8010e0e:	b510      	push	{r4, lr}
 8010e10:	eb01 0402 	add.w	r4, r1, r2
 8010e14:	d902      	bls.n	8010e1c <memmove+0x10>
 8010e16:	4284      	cmp	r4, r0
 8010e18:	4623      	mov	r3, r4
 8010e1a:	d807      	bhi.n	8010e2c <memmove+0x20>
 8010e1c:	1e43      	subs	r3, r0, #1
 8010e1e:	42a1      	cmp	r1, r4
 8010e20:	d008      	beq.n	8010e34 <memmove+0x28>
 8010e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e2a:	e7f8      	b.n	8010e1e <memmove+0x12>
 8010e2c:	4402      	add	r2, r0
 8010e2e:	4601      	mov	r1, r0
 8010e30:	428a      	cmp	r2, r1
 8010e32:	d100      	bne.n	8010e36 <memmove+0x2a>
 8010e34:	bd10      	pop	{r4, pc}
 8010e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e3e:	e7f7      	b.n	8010e30 <memmove+0x24>

08010e40 <_fstat_r>:
 8010e40:	b538      	push	{r3, r4, r5, lr}
 8010e42:	4d07      	ldr	r5, [pc, #28]	; (8010e60 <_fstat_r+0x20>)
 8010e44:	2300      	movs	r3, #0
 8010e46:	4604      	mov	r4, r0
 8010e48:	4608      	mov	r0, r1
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	602b      	str	r3, [r5, #0]
 8010e4e:	f7f2 fba6 	bl	800359e <_fstat>
 8010e52:	1c43      	adds	r3, r0, #1
 8010e54:	d102      	bne.n	8010e5c <_fstat_r+0x1c>
 8010e56:	682b      	ldr	r3, [r5, #0]
 8010e58:	b103      	cbz	r3, 8010e5c <_fstat_r+0x1c>
 8010e5a:	6023      	str	r3, [r4, #0]
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	bf00      	nop
 8010e60:	20009ffc 	.word	0x20009ffc

08010e64 <_isatty_r>:
 8010e64:	b538      	push	{r3, r4, r5, lr}
 8010e66:	4d06      	ldr	r5, [pc, #24]	; (8010e80 <_isatty_r+0x1c>)
 8010e68:	2300      	movs	r3, #0
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	4608      	mov	r0, r1
 8010e6e:	602b      	str	r3, [r5, #0]
 8010e70:	f7f2 fba5 	bl	80035be <_isatty>
 8010e74:	1c43      	adds	r3, r0, #1
 8010e76:	d102      	bne.n	8010e7e <_isatty_r+0x1a>
 8010e78:	682b      	ldr	r3, [r5, #0]
 8010e7a:	b103      	cbz	r3, 8010e7e <_isatty_r+0x1a>
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	bd38      	pop	{r3, r4, r5, pc}
 8010e80:	20009ffc 	.word	0x20009ffc

08010e84 <_sbrk_r>:
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4d06      	ldr	r5, [pc, #24]	; (8010ea0 <_sbrk_r+0x1c>)
 8010e88:	2300      	movs	r3, #0
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	4608      	mov	r0, r1
 8010e8e:	602b      	str	r3, [r5, #0]
 8010e90:	f7f2 fbae 	bl	80035f0 <_sbrk>
 8010e94:	1c43      	adds	r3, r0, #1
 8010e96:	d102      	bne.n	8010e9e <_sbrk_r+0x1a>
 8010e98:	682b      	ldr	r3, [r5, #0]
 8010e9a:	b103      	cbz	r3, 8010e9e <_sbrk_r+0x1a>
 8010e9c:	6023      	str	r3, [r4, #0]
 8010e9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ea0:	20009ffc 	.word	0x20009ffc

08010ea4 <__assert_func>:
 8010ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ea6:	4614      	mov	r4, r2
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	4b09      	ldr	r3, [pc, #36]	; (8010ed0 <__assert_func+0x2c>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4605      	mov	r5, r0
 8010eb0:	68d8      	ldr	r0, [r3, #12]
 8010eb2:	b14c      	cbz	r4, 8010ec8 <__assert_func+0x24>
 8010eb4:	4b07      	ldr	r3, [pc, #28]	; (8010ed4 <__assert_func+0x30>)
 8010eb6:	9100      	str	r1, [sp, #0]
 8010eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ebc:	4906      	ldr	r1, [pc, #24]	; (8010ed8 <__assert_func+0x34>)
 8010ebe:	462b      	mov	r3, r5
 8010ec0:	f000 f872 	bl	8010fa8 <fiprintf>
 8010ec4:	f000 f882 	bl	8010fcc <abort>
 8010ec8:	4b04      	ldr	r3, [pc, #16]	; (8010edc <__assert_func+0x38>)
 8010eca:	461c      	mov	r4, r3
 8010ecc:	e7f3      	b.n	8010eb6 <__assert_func+0x12>
 8010ece:	bf00      	nop
 8010ed0:	200000a0 	.word	0x200000a0
 8010ed4:	08011d0f 	.word	0x08011d0f
 8010ed8:	08011d1c 	.word	0x08011d1c
 8010edc:	08011d4a 	.word	0x08011d4a

08010ee0 <_calloc_r>:
 8010ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ee2:	fba1 2402 	umull	r2, r4, r1, r2
 8010ee6:	b94c      	cbnz	r4, 8010efc <_calloc_r+0x1c>
 8010ee8:	4611      	mov	r1, r2
 8010eea:	9201      	str	r2, [sp, #4]
 8010eec:	f7ff f91e 	bl	801012c <_malloc_r>
 8010ef0:	9a01      	ldr	r2, [sp, #4]
 8010ef2:	4605      	mov	r5, r0
 8010ef4:	b930      	cbnz	r0, 8010f04 <_calloc_r+0x24>
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	b003      	add	sp, #12
 8010efa:	bd30      	pop	{r4, r5, pc}
 8010efc:	220c      	movs	r2, #12
 8010efe:	6002      	str	r2, [r0, #0]
 8010f00:	2500      	movs	r5, #0
 8010f02:	e7f8      	b.n	8010ef6 <_calloc_r+0x16>
 8010f04:	4621      	mov	r1, r4
 8010f06:	f7fe f92b 	bl	800f160 <memset>
 8010f0a:	e7f4      	b.n	8010ef6 <_calloc_r+0x16>

08010f0c <__ascii_mbtowc>:
 8010f0c:	b082      	sub	sp, #8
 8010f0e:	b901      	cbnz	r1, 8010f12 <__ascii_mbtowc+0x6>
 8010f10:	a901      	add	r1, sp, #4
 8010f12:	b142      	cbz	r2, 8010f26 <__ascii_mbtowc+0x1a>
 8010f14:	b14b      	cbz	r3, 8010f2a <__ascii_mbtowc+0x1e>
 8010f16:	7813      	ldrb	r3, [r2, #0]
 8010f18:	600b      	str	r3, [r1, #0]
 8010f1a:	7812      	ldrb	r2, [r2, #0]
 8010f1c:	1e10      	subs	r0, r2, #0
 8010f1e:	bf18      	it	ne
 8010f20:	2001      	movne	r0, #1
 8010f22:	b002      	add	sp, #8
 8010f24:	4770      	bx	lr
 8010f26:	4610      	mov	r0, r2
 8010f28:	e7fb      	b.n	8010f22 <__ascii_mbtowc+0x16>
 8010f2a:	f06f 0001 	mvn.w	r0, #1
 8010f2e:	e7f8      	b.n	8010f22 <__ascii_mbtowc+0x16>

08010f30 <_realloc_r>:
 8010f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f34:	4680      	mov	r8, r0
 8010f36:	4614      	mov	r4, r2
 8010f38:	460e      	mov	r6, r1
 8010f3a:	b921      	cbnz	r1, 8010f46 <_realloc_r+0x16>
 8010f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f40:	4611      	mov	r1, r2
 8010f42:	f7ff b8f3 	b.w	801012c <_malloc_r>
 8010f46:	b92a      	cbnz	r2, 8010f54 <_realloc_r+0x24>
 8010f48:	f7ff f87c 	bl	8010044 <_free_r>
 8010f4c:	4625      	mov	r5, r4
 8010f4e:	4628      	mov	r0, r5
 8010f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f54:	f000 f841 	bl	8010fda <_malloc_usable_size_r>
 8010f58:	4284      	cmp	r4, r0
 8010f5a:	4607      	mov	r7, r0
 8010f5c:	d802      	bhi.n	8010f64 <_realloc_r+0x34>
 8010f5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f62:	d812      	bhi.n	8010f8a <_realloc_r+0x5a>
 8010f64:	4621      	mov	r1, r4
 8010f66:	4640      	mov	r0, r8
 8010f68:	f7ff f8e0 	bl	801012c <_malloc_r>
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	d0ed      	beq.n	8010f4e <_realloc_r+0x1e>
 8010f72:	42bc      	cmp	r4, r7
 8010f74:	4622      	mov	r2, r4
 8010f76:	4631      	mov	r1, r6
 8010f78:	bf28      	it	cs
 8010f7a:	463a      	movcs	r2, r7
 8010f7c:	f7fe f9d8 	bl	800f330 <memcpy>
 8010f80:	4631      	mov	r1, r6
 8010f82:	4640      	mov	r0, r8
 8010f84:	f7ff f85e 	bl	8010044 <_free_r>
 8010f88:	e7e1      	b.n	8010f4e <_realloc_r+0x1e>
 8010f8a:	4635      	mov	r5, r6
 8010f8c:	e7df      	b.n	8010f4e <_realloc_r+0x1e>

08010f8e <__ascii_wctomb>:
 8010f8e:	b149      	cbz	r1, 8010fa4 <__ascii_wctomb+0x16>
 8010f90:	2aff      	cmp	r2, #255	; 0xff
 8010f92:	bf85      	ittet	hi
 8010f94:	238a      	movhi	r3, #138	; 0x8a
 8010f96:	6003      	strhi	r3, [r0, #0]
 8010f98:	700a      	strbls	r2, [r1, #0]
 8010f9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8010f9e:	bf98      	it	ls
 8010fa0:	2001      	movls	r0, #1
 8010fa2:	4770      	bx	lr
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	4770      	bx	lr

08010fa8 <fiprintf>:
 8010fa8:	b40e      	push	{r1, r2, r3}
 8010faa:	b503      	push	{r0, r1, lr}
 8010fac:	4601      	mov	r1, r0
 8010fae:	ab03      	add	r3, sp, #12
 8010fb0:	4805      	ldr	r0, [pc, #20]	; (8010fc8 <fiprintf+0x20>)
 8010fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fb6:	6800      	ldr	r0, [r0, #0]
 8010fb8:	9301      	str	r3, [sp, #4]
 8010fba:	f000 f83f 	bl	801103c <_vfiprintf_r>
 8010fbe:	b002      	add	sp, #8
 8010fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fc4:	b003      	add	sp, #12
 8010fc6:	4770      	bx	lr
 8010fc8:	200000a0 	.word	0x200000a0

08010fcc <abort>:
 8010fcc:	b508      	push	{r3, lr}
 8010fce:	2006      	movs	r0, #6
 8010fd0:	f000 f976 	bl	80112c0 <raise>
 8010fd4:	2001      	movs	r0, #1
 8010fd6:	f7f2 fa93 	bl	8003500 <_exit>

08010fda <_malloc_usable_size_r>:
 8010fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fde:	1f18      	subs	r0, r3, #4
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	bfbc      	itt	lt
 8010fe4:	580b      	ldrlt	r3, [r1, r0]
 8010fe6:	18c0      	addlt	r0, r0, r3
 8010fe8:	4770      	bx	lr

08010fea <__sfputc_r>:
 8010fea:	6893      	ldr	r3, [r2, #8]
 8010fec:	3b01      	subs	r3, #1
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	b410      	push	{r4}
 8010ff2:	6093      	str	r3, [r2, #8]
 8010ff4:	da08      	bge.n	8011008 <__sfputc_r+0x1e>
 8010ff6:	6994      	ldr	r4, [r2, #24]
 8010ff8:	42a3      	cmp	r3, r4
 8010ffa:	db01      	blt.n	8011000 <__sfputc_r+0x16>
 8010ffc:	290a      	cmp	r1, #10
 8010ffe:	d103      	bne.n	8011008 <__sfputc_r+0x1e>
 8011000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011004:	f7fe b817 	b.w	800f036 <__swbuf_r>
 8011008:	6813      	ldr	r3, [r2, #0]
 801100a:	1c58      	adds	r0, r3, #1
 801100c:	6010      	str	r0, [r2, #0]
 801100e:	7019      	strb	r1, [r3, #0]
 8011010:	4608      	mov	r0, r1
 8011012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011016:	4770      	bx	lr

08011018 <__sfputs_r>:
 8011018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801101a:	4606      	mov	r6, r0
 801101c:	460f      	mov	r7, r1
 801101e:	4614      	mov	r4, r2
 8011020:	18d5      	adds	r5, r2, r3
 8011022:	42ac      	cmp	r4, r5
 8011024:	d101      	bne.n	801102a <__sfputs_r+0x12>
 8011026:	2000      	movs	r0, #0
 8011028:	e007      	b.n	801103a <__sfputs_r+0x22>
 801102a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801102e:	463a      	mov	r2, r7
 8011030:	4630      	mov	r0, r6
 8011032:	f7ff ffda 	bl	8010fea <__sfputc_r>
 8011036:	1c43      	adds	r3, r0, #1
 8011038:	d1f3      	bne.n	8011022 <__sfputs_r+0xa>
 801103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801103c <_vfiprintf_r>:
 801103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011040:	460d      	mov	r5, r1
 8011042:	b09d      	sub	sp, #116	; 0x74
 8011044:	4614      	mov	r4, r2
 8011046:	4698      	mov	r8, r3
 8011048:	4606      	mov	r6, r0
 801104a:	b118      	cbz	r0, 8011054 <_vfiprintf_r+0x18>
 801104c:	6a03      	ldr	r3, [r0, #32]
 801104e:	b90b      	cbnz	r3, 8011054 <_vfiprintf_r+0x18>
 8011050:	f7fd fefc 	bl	800ee4c <__sinit>
 8011054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011056:	07d9      	lsls	r1, r3, #31
 8011058:	d405      	bmi.n	8011066 <_vfiprintf_r+0x2a>
 801105a:	89ab      	ldrh	r3, [r5, #12]
 801105c:	059a      	lsls	r2, r3, #22
 801105e:	d402      	bmi.n	8011066 <_vfiprintf_r+0x2a>
 8011060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011062:	f7fe f963 	bl	800f32c <__retarget_lock_acquire_recursive>
 8011066:	89ab      	ldrh	r3, [r5, #12]
 8011068:	071b      	lsls	r3, r3, #28
 801106a:	d501      	bpl.n	8011070 <_vfiprintf_r+0x34>
 801106c:	692b      	ldr	r3, [r5, #16]
 801106e:	b99b      	cbnz	r3, 8011098 <_vfiprintf_r+0x5c>
 8011070:	4629      	mov	r1, r5
 8011072:	4630      	mov	r0, r6
 8011074:	f7fe f81c 	bl	800f0b0 <__swsetup_r>
 8011078:	b170      	cbz	r0, 8011098 <_vfiprintf_r+0x5c>
 801107a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801107c:	07dc      	lsls	r4, r3, #31
 801107e:	d504      	bpl.n	801108a <_vfiprintf_r+0x4e>
 8011080:	f04f 30ff 	mov.w	r0, #4294967295
 8011084:	b01d      	add	sp, #116	; 0x74
 8011086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801108a:	89ab      	ldrh	r3, [r5, #12]
 801108c:	0598      	lsls	r0, r3, #22
 801108e:	d4f7      	bmi.n	8011080 <_vfiprintf_r+0x44>
 8011090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011092:	f7fe f94c 	bl	800f32e <__retarget_lock_release_recursive>
 8011096:	e7f3      	b.n	8011080 <_vfiprintf_r+0x44>
 8011098:	2300      	movs	r3, #0
 801109a:	9309      	str	r3, [sp, #36]	; 0x24
 801109c:	2320      	movs	r3, #32
 801109e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80110a6:	2330      	movs	r3, #48	; 0x30
 80110a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801125c <_vfiprintf_r+0x220>
 80110ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110b0:	f04f 0901 	mov.w	r9, #1
 80110b4:	4623      	mov	r3, r4
 80110b6:	469a      	mov	sl, r3
 80110b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110bc:	b10a      	cbz	r2, 80110c2 <_vfiprintf_r+0x86>
 80110be:	2a25      	cmp	r2, #37	; 0x25
 80110c0:	d1f9      	bne.n	80110b6 <_vfiprintf_r+0x7a>
 80110c2:	ebba 0b04 	subs.w	fp, sl, r4
 80110c6:	d00b      	beq.n	80110e0 <_vfiprintf_r+0xa4>
 80110c8:	465b      	mov	r3, fp
 80110ca:	4622      	mov	r2, r4
 80110cc:	4629      	mov	r1, r5
 80110ce:	4630      	mov	r0, r6
 80110d0:	f7ff ffa2 	bl	8011018 <__sfputs_r>
 80110d4:	3001      	adds	r0, #1
 80110d6:	f000 80a9 	beq.w	801122c <_vfiprintf_r+0x1f0>
 80110da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110dc:	445a      	add	r2, fp
 80110de:	9209      	str	r2, [sp, #36]	; 0x24
 80110e0:	f89a 3000 	ldrb.w	r3, [sl]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f000 80a1 	beq.w	801122c <_vfiprintf_r+0x1f0>
 80110ea:	2300      	movs	r3, #0
 80110ec:	f04f 32ff 	mov.w	r2, #4294967295
 80110f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110f4:	f10a 0a01 	add.w	sl, sl, #1
 80110f8:	9304      	str	r3, [sp, #16]
 80110fa:	9307      	str	r3, [sp, #28]
 80110fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011100:	931a      	str	r3, [sp, #104]	; 0x68
 8011102:	4654      	mov	r4, sl
 8011104:	2205      	movs	r2, #5
 8011106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801110a:	4854      	ldr	r0, [pc, #336]	; (801125c <_vfiprintf_r+0x220>)
 801110c:	f7ef f890 	bl	8000230 <memchr>
 8011110:	9a04      	ldr	r2, [sp, #16]
 8011112:	b9d8      	cbnz	r0, 801114c <_vfiprintf_r+0x110>
 8011114:	06d1      	lsls	r1, r2, #27
 8011116:	bf44      	itt	mi
 8011118:	2320      	movmi	r3, #32
 801111a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801111e:	0713      	lsls	r3, r2, #28
 8011120:	bf44      	itt	mi
 8011122:	232b      	movmi	r3, #43	; 0x2b
 8011124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011128:	f89a 3000 	ldrb.w	r3, [sl]
 801112c:	2b2a      	cmp	r3, #42	; 0x2a
 801112e:	d015      	beq.n	801115c <_vfiprintf_r+0x120>
 8011130:	9a07      	ldr	r2, [sp, #28]
 8011132:	4654      	mov	r4, sl
 8011134:	2000      	movs	r0, #0
 8011136:	f04f 0c0a 	mov.w	ip, #10
 801113a:	4621      	mov	r1, r4
 801113c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011140:	3b30      	subs	r3, #48	; 0x30
 8011142:	2b09      	cmp	r3, #9
 8011144:	d94d      	bls.n	80111e2 <_vfiprintf_r+0x1a6>
 8011146:	b1b0      	cbz	r0, 8011176 <_vfiprintf_r+0x13a>
 8011148:	9207      	str	r2, [sp, #28]
 801114a:	e014      	b.n	8011176 <_vfiprintf_r+0x13a>
 801114c:	eba0 0308 	sub.w	r3, r0, r8
 8011150:	fa09 f303 	lsl.w	r3, r9, r3
 8011154:	4313      	orrs	r3, r2
 8011156:	9304      	str	r3, [sp, #16]
 8011158:	46a2      	mov	sl, r4
 801115a:	e7d2      	b.n	8011102 <_vfiprintf_r+0xc6>
 801115c:	9b03      	ldr	r3, [sp, #12]
 801115e:	1d19      	adds	r1, r3, #4
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	9103      	str	r1, [sp, #12]
 8011164:	2b00      	cmp	r3, #0
 8011166:	bfbb      	ittet	lt
 8011168:	425b      	neglt	r3, r3
 801116a:	f042 0202 	orrlt.w	r2, r2, #2
 801116e:	9307      	strge	r3, [sp, #28]
 8011170:	9307      	strlt	r3, [sp, #28]
 8011172:	bfb8      	it	lt
 8011174:	9204      	strlt	r2, [sp, #16]
 8011176:	7823      	ldrb	r3, [r4, #0]
 8011178:	2b2e      	cmp	r3, #46	; 0x2e
 801117a:	d10c      	bne.n	8011196 <_vfiprintf_r+0x15a>
 801117c:	7863      	ldrb	r3, [r4, #1]
 801117e:	2b2a      	cmp	r3, #42	; 0x2a
 8011180:	d134      	bne.n	80111ec <_vfiprintf_r+0x1b0>
 8011182:	9b03      	ldr	r3, [sp, #12]
 8011184:	1d1a      	adds	r2, r3, #4
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	9203      	str	r2, [sp, #12]
 801118a:	2b00      	cmp	r3, #0
 801118c:	bfb8      	it	lt
 801118e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011192:	3402      	adds	r4, #2
 8011194:	9305      	str	r3, [sp, #20]
 8011196:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801126c <_vfiprintf_r+0x230>
 801119a:	7821      	ldrb	r1, [r4, #0]
 801119c:	2203      	movs	r2, #3
 801119e:	4650      	mov	r0, sl
 80111a0:	f7ef f846 	bl	8000230 <memchr>
 80111a4:	b138      	cbz	r0, 80111b6 <_vfiprintf_r+0x17a>
 80111a6:	9b04      	ldr	r3, [sp, #16]
 80111a8:	eba0 000a 	sub.w	r0, r0, sl
 80111ac:	2240      	movs	r2, #64	; 0x40
 80111ae:	4082      	lsls	r2, r0
 80111b0:	4313      	orrs	r3, r2
 80111b2:	3401      	adds	r4, #1
 80111b4:	9304      	str	r3, [sp, #16]
 80111b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ba:	4829      	ldr	r0, [pc, #164]	; (8011260 <_vfiprintf_r+0x224>)
 80111bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111c0:	2206      	movs	r2, #6
 80111c2:	f7ef f835 	bl	8000230 <memchr>
 80111c6:	2800      	cmp	r0, #0
 80111c8:	d03f      	beq.n	801124a <_vfiprintf_r+0x20e>
 80111ca:	4b26      	ldr	r3, [pc, #152]	; (8011264 <_vfiprintf_r+0x228>)
 80111cc:	bb1b      	cbnz	r3, 8011216 <_vfiprintf_r+0x1da>
 80111ce:	9b03      	ldr	r3, [sp, #12]
 80111d0:	3307      	adds	r3, #7
 80111d2:	f023 0307 	bic.w	r3, r3, #7
 80111d6:	3308      	adds	r3, #8
 80111d8:	9303      	str	r3, [sp, #12]
 80111da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111dc:	443b      	add	r3, r7
 80111de:	9309      	str	r3, [sp, #36]	; 0x24
 80111e0:	e768      	b.n	80110b4 <_vfiprintf_r+0x78>
 80111e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80111e6:	460c      	mov	r4, r1
 80111e8:	2001      	movs	r0, #1
 80111ea:	e7a6      	b.n	801113a <_vfiprintf_r+0xfe>
 80111ec:	2300      	movs	r3, #0
 80111ee:	3401      	adds	r4, #1
 80111f0:	9305      	str	r3, [sp, #20]
 80111f2:	4619      	mov	r1, r3
 80111f4:	f04f 0c0a 	mov.w	ip, #10
 80111f8:	4620      	mov	r0, r4
 80111fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111fe:	3a30      	subs	r2, #48	; 0x30
 8011200:	2a09      	cmp	r2, #9
 8011202:	d903      	bls.n	801120c <_vfiprintf_r+0x1d0>
 8011204:	2b00      	cmp	r3, #0
 8011206:	d0c6      	beq.n	8011196 <_vfiprintf_r+0x15a>
 8011208:	9105      	str	r1, [sp, #20]
 801120a:	e7c4      	b.n	8011196 <_vfiprintf_r+0x15a>
 801120c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011210:	4604      	mov	r4, r0
 8011212:	2301      	movs	r3, #1
 8011214:	e7f0      	b.n	80111f8 <_vfiprintf_r+0x1bc>
 8011216:	ab03      	add	r3, sp, #12
 8011218:	9300      	str	r3, [sp, #0]
 801121a:	462a      	mov	r2, r5
 801121c:	4b12      	ldr	r3, [pc, #72]	; (8011268 <_vfiprintf_r+0x22c>)
 801121e:	a904      	add	r1, sp, #16
 8011220:	4630      	mov	r0, r6
 8011222:	f7fd f9d3 	bl	800e5cc <_printf_float>
 8011226:	4607      	mov	r7, r0
 8011228:	1c78      	adds	r0, r7, #1
 801122a:	d1d6      	bne.n	80111da <_vfiprintf_r+0x19e>
 801122c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801122e:	07d9      	lsls	r1, r3, #31
 8011230:	d405      	bmi.n	801123e <_vfiprintf_r+0x202>
 8011232:	89ab      	ldrh	r3, [r5, #12]
 8011234:	059a      	lsls	r2, r3, #22
 8011236:	d402      	bmi.n	801123e <_vfiprintf_r+0x202>
 8011238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801123a:	f7fe f878 	bl	800f32e <__retarget_lock_release_recursive>
 801123e:	89ab      	ldrh	r3, [r5, #12]
 8011240:	065b      	lsls	r3, r3, #25
 8011242:	f53f af1d 	bmi.w	8011080 <_vfiprintf_r+0x44>
 8011246:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011248:	e71c      	b.n	8011084 <_vfiprintf_r+0x48>
 801124a:	ab03      	add	r3, sp, #12
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	462a      	mov	r2, r5
 8011250:	4b05      	ldr	r3, [pc, #20]	; (8011268 <_vfiprintf_r+0x22c>)
 8011252:	a904      	add	r1, sp, #16
 8011254:	4630      	mov	r0, r6
 8011256:	f7fd fc5d 	bl	800eb14 <_printf_i>
 801125a:	e7e4      	b.n	8011226 <_vfiprintf_r+0x1ea>
 801125c:	08011cf4 	.word	0x08011cf4
 8011260:	08011cfe 	.word	0x08011cfe
 8011264:	0800e5cd 	.word	0x0800e5cd
 8011268:	08011019 	.word	0x08011019
 801126c:	08011cfa 	.word	0x08011cfa

08011270 <_raise_r>:
 8011270:	291f      	cmp	r1, #31
 8011272:	b538      	push	{r3, r4, r5, lr}
 8011274:	4604      	mov	r4, r0
 8011276:	460d      	mov	r5, r1
 8011278:	d904      	bls.n	8011284 <_raise_r+0x14>
 801127a:	2316      	movs	r3, #22
 801127c:	6003      	str	r3, [r0, #0]
 801127e:	f04f 30ff 	mov.w	r0, #4294967295
 8011282:	bd38      	pop	{r3, r4, r5, pc}
 8011284:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011286:	b112      	cbz	r2, 801128e <_raise_r+0x1e>
 8011288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801128c:	b94b      	cbnz	r3, 80112a2 <_raise_r+0x32>
 801128e:	4620      	mov	r0, r4
 8011290:	f000 f830 	bl	80112f4 <_getpid_r>
 8011294:	462a      	mov	r2, r5
 8011296:	4601      	mov	r1, r0
 8011298:	4620      	mov	r0, r4
 801129a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801129e:	f000 b817 	b.w	80112d0 <_kill_r>
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d00a      	beq.n	80112bc <_raise_r+0x4c>
 80112a6:	1c59      	adds	r1, r3, #1
 80112a8:	d103      	bne.n	80112b2 <_raise_r+0x42>
 80112aa:	2316      	movs	r3, #22
 80112ac:	6003      	str	r3, [r0, #0]
 80112ae:	2001      	movs	r0, #1
 80112b0:	e7e7      	b.n	8011282 <_raise_r+0x12>
 80112b2:	2400      	movs	r4, #0
 80112b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80112b8:	4628      	mov	r0, r5
 80112ba:	4798      	blx	r3
 80112bc:	2000      	movs	r0, #0
 80112be:	e7e0      	b.n	8011282 <_raise_r+0x12>

080112c0 <raise>:
 80112c0:	4b02      	ldr	r3, [pc, #8]	; (80112cc <raise+0xc>)
 80112c2:	4601      	mov	r1, r0
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	f7ff bfd3 	b.w	8011270 <_raise_r>
 80112ca:	bf00      	nop
 80112cc:	200000a0 	.word	0x200000a0

080112d0 <_kill_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4d07      	ldr	r5, [pc, #28]	; (80112f0 <_kill_r+0x20>)
 80112d4:	2300      	movs	r3, #0
 80112d6:	4604      	mov	r4, r0
 80112d8:	4608      	mov	r0, r1
 80112da:	4611      	mov	r1, r2
 80112dc:	602b      	str	r3, [r5, #0]
 80112de:	f7f2 f8ff 	bl	80034e0 <_kill>
 80112e2:	1c43      	adds	r3, r0, #1
 80112e4:	d102      	bne.n	80112ec <_kill_r+0x1c>
 80112e6:	682b      	ldr	r3, [r5, #0]
 80112e8:	b103      	cbz	r3, 80112ec <_kill_r+0x1c>
 80112ea:	6023      	str	r3, [r4, #0]
 80112ec:	bd38      	pop	{r3, r4, r5, pc}
 80112ee:	bf00      	nop
 80112f0:	20009ffc 	.word	0x20009ffc

080112f4 <_getpid_r>:
 80112f4:	f7f2 b8ec 	b.w	80034d0 <_getpid>

080112f8 <_init>:
 80112f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112fa:	bf00      	nop
 80112fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112fe:	bc08      	pop	{r3}
 8011300:	469e      	mov	lr, r3
 8011302:	4770      	bx	lr

08011304 <_fini>:
 8011304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011306:	bf00      	nop
 8011308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801130a:	bc08      	pop	{r3}
 801130c:	469e      	mov	lr, r3
 801130e:	4770      	bx	lr
