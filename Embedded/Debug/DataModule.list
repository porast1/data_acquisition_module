
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f414  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800f5e8  0800f5e8  0001f5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff0c  0800ff0c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff0c  0800ff0c  0001ff0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff14  0800ff14  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff14  0800ff14  0001ff14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff18  0800ff18  0001ff18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ff1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000092b8  200001f8  08010114  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200094b0  08010114  000294b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020cda  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005690  00000000  00000000  00040f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  000465d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001549  00000000  00000000  00048168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ec7  00000000  00000000  000496b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027341  00000000  00000000  00073578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec154  00000000  00000000  0009a8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000820c  00000000  00000000  00186a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0018ec1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f5cc 	.word	0x0800f5cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800f5cc 	.word	0x0800f5cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff f9df 	bl	80002d0 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <Send_Uart+0x28>)
 8000f1e:	f005 fdc4 	bl	8006aaa <HAL_UART_Transmit>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000554c 	.word	0x2000554c

08000f30 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <Mount_SD+0x38>)
 8000f3e:	f007 fffb 	bl	8008f38 <f_mount>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <Mount_SD+0x3c>)
 8000f48:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <Mount_SD+0x3c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <Mount_SD+0x2a>
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <Mount_SD+0x40>)
 8000f54:	f7ff ffd6 	bl	8000f04 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000f58:	e002      	b.n	8000f60 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <Mount_SD+0x44>)
 8000f5c:	f7ff ffd2 	bl	8000f04 <Send_Uart>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000214 	.word	0x20000214
 8000f6c:	20000690 	.word	0x20000690
 8000f70:	0800f5e8 	.word	0x0800f5e8
 8000f74:	0800f60c 	.word	0x0800f60c

08000f78 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2000      	movs	r0, #0
 8000f86:	f007 ffd7 	bl	8008f38 <f_mount>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <Unmount_SD+0x38>)
 8000f90:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <Unmount_SD+0x38>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <Unmount_SD+0x2a>
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <Unmount_SD+0x3c>)
 8000f9c:	f7ff ffb2 	bl	8000f04 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000fa0:	e002      	b.n	8000fa8 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <Unmount_SD+0x40>)
 8000fa4:	f7ff ffae 	bl	8000f04 <Send_Uart>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000690 	.word	0x20000690
 8000fb4:	0800f630 	.word	0x0800f630
 8000fb8:	0800f658 	.word	0x0800f658

08000fbc <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08e      	sub	sp, #56	; 0x38
 8000fc0:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 8000fc2:	2014      	movs	r0, #20
 8000fc4:	f00b fa40 	bl	800c448 <pvPortMalloc>
 8000fc8:	6378      	str	r0, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <Format_SD+0xb4>)
 8000fcc:	4929      	ldr	r1, [pc, #164]	; (8001074 <Format_SD+0xb8>)
 8000fce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fd0:	f00c f93a 	bl	800d248 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f008 fc32 	bl	8009842 <f_opendir>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <Format_SD+0xbc>)
 8000fe4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <Format_SD+0xbc>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d136      	bne.n	800105c <Format_SD+0xa0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4922      	ldr	r1, [pc, #136]	; (800107c <Format_SD+0xc0>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 fcc9 	bl	800998a <f_readdir>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <Format_SD+0xbc>)
 8000ffe:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <Format_SD+0xbc>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d125      	bne.n	8001054 <Format_SD+0x98>
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <Format_SD+0xc0>)
 800100a:	7a5b      	ldrb	r3, [r3, #9]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d021      	beq.n	8001054 <Format_SD+0x98>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <Format_SD+0xc0>)
 8001012:	7a1b      	ldrb	r3, [r3, #8]
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	2b00      	cmp	r3, #0
 800101a:	d011      	beq.n	8001040 <Format_SD+0x84>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800101c:	4918      	ldr	r1, [pc, #96]	; (8001080 <Format_SD+0xc4>)
 800101e:	4819      	ldr	r0, [pc, #100]	; (8001084 <Format_SD+0xc8>)
 8001020:	f7ff f8f6 	bl	8000210 <strcmp>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d012      	beq.n	8001050 <Format_SD+0x94>
            	fresult = f_unlink(fno.fname);
 800102a:	4815      	ldr	r0, [pc, #84]	; (8001080 <Format_SD+0xc4>)
 800102c:	f008 fd30 	bl	8009a90 <f_unlink>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <Format_SD+0xbc>)
 8001036:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <Format_SD+0xbc>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b07      	cmp	r3, #7
 800103e:	e7d6      	b.n	8000fee <Format_SD+0x32>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8001040:	480f      	ldr	r0, [pc, #60]	; (8001080 <Format_SD+0xc4>)
 8001042:	f008 fd25 	bl	8009a90 <f_unlink>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <Format_SD+0xbc>)
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e7ce      	b.n	8000fee <Format_SD+0x32>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001050:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001052:	e7cc      	b.n	8000fee <Format_SD+0x32>
            }
        }
        f_closedir(&dir);
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f008 fc6c 	bl	8009934 <f_closedir>
    }
    vPortFree(path);
 800105c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800105e:	f00b fabf 	bl	800c5e0 <vPortFree>
    return fresult;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <Format_SD+0xbc>)
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	0800f6ac 	.word	0x0800f6ac
 8001074:	0800f67c 	.word	0x0800f67c
 8001078:	20000690 	.word	0x20000690
 800107c:	20000678 	.word	0x20000678
 8001080:	20000681 	.word	0x20000681
 8001084:	0800f680 	.word	0x0800f680

08001088 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001090:	4940      	ldr	r1, [pc, #256]	; (8001194 <Create_File+0x10c>)
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f008 fcbc 	bl	8009a10 <f_stat>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <Create_File+0x110>)
 800109e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80010a0:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <Create_File+0x110>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d111      	bne.n	80010cc <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 80010a8:	2064      	movs	r0, #100	; 0x64
 80010aa:	f00b f9cd 	bl	800c448 <pvPortMalloc>
 80010ae:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	493a      	ldr	r1, [pc, #232]	; (800119c <Create_File+0x114>)
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f00c f8c7 	bl	800d248 <siprintf>
		Send_Uart(buf);
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff ff22 	bl	8000f04 <Send_Uart>
		vPortFree(buf);
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f00b fa8d 	bl	800c5e0 <vPortFree>
	    return fresult;
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <Create_File+0x110>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	e05f      	b.n	800118c <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80010cc:	220b      	movs	r2, #11
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4833      	ldr	r0, [pc, #204]	; (80011a0 <Create_File+0x118>)
 80010d2:	f007 ff95 	bl	8009000 <f_open>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <Create_File+0x110>)
 80010dc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <Create_File+0x110>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d014      	beq.n	8001110 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80010e6:	2064      	movs	r0, #100	; 0x64
 80010e8:	f00b f9ae 	bl	800c448 <pvPortMalloc>
 80010ec:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <Create_File+0x110>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	492b      	ldr	r1, [pc, #172]	; (80011a4 <Create_File+0x11c>)
 80010f8:	6938      	ldr	r0, [r7, #16]
 80010fa:	f00c f8a5 	bl	800d248 <siprintf>
			Send_Uart(buf);
 80010fe:	6938      	ldr	r0, [r7, #16]
 8001100:	f7ff ff00 	bl	8000f04 <Send_Uart>
			vPortFree(buf);
 8001104:	6938      	ldr	r0, [r7, #16]
 8001106:	f00b fa6b 	bl	800c5e0 <vPortFree>
		    return fresult;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <Create_File+0x110>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	e03d      	b.n	800118c <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001110:	2064      	movs	r0, #100	; 0x64
 8001112:	f00b f999 	bl	800c448 <pvPortMalloc>
 8001116:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4923      	ldr	r1, [pc, #140]	; (80011a8 <Create_File+0x120>)
 800111c:	69f8      	ldr	r0, [r7, #28]
 800111e:	f00c f893 	bl	800d248 <siprintf>
			Send_Uart(buf);
 8001122:	69f8      	ldr	r0, [r7, #28]
 8001124:	f7ff feee 	bl	8000f04 <Send_Uart>
			vPortFree(buf);
 8001128:	69f8      	ldr	r0, [r7, #28]
 800112a:	f00b fa59 	bl	800c5e0 <vPortFree>
		}

		fresult = f_close(&fil);
 800112e:	481c      	ldr	r0, [pc, #112]	; (80011a0 <Create_File+0x118>)
 8001130:	f008 fb58 	bl	80097e4 <f_close>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <Create_File+0x110>)
 800113a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <Create_File+0x110>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d012      	beq.n	800116a <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001144:	2064      	movs	r0, #100	; 0x64
 8001146:	f00b f97f 	bl	800c448 <pvPortMalloc>
 800114a:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <Create_File+0x110>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4915      	ldr	r1, [pc, #84]	; (80011ac <Create_File+0x124>)
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f00c f876 	bl	800d248 <siprintf>
			Send_Uart(buf);
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f7ff fed1 	bl	8000f04 <Send_Uart>
			vPortFree(buf);
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f00b fa3c 	bl	800c5e0 <vPortFree>
 8001168:	e00e      	b.n	8001188 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800116a:	2064      	movs	r0, #100	; 0x64
 800116c:	f00b f96c 	bl	800c448 <pvPortMalloc>
 8001170:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <Create_File+0x128>)
 8001176:	69b8      	ldr	r0, [r7, #24]
 8001178:	f00c f866 	bl	800d248 <siprintf>
			Send_Uart(buf);
 800117c:	69b8      	ldr	r0, [r7, #24]
 800117e:	f7ff fec1 	bl	8000f04 <Send_Uart>
			vPortFree(buf);
 8001182:	69b8      	ldr	r0, [r7, #24]
 8001184:	f00b fa2c 	bl	800c5e0 <vPortFree>
		}
	}
    return fresult;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <Create_File+0x110>)
 800118a:	781b      	ldrb	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000678 	.word	0x20000678
 8001198:	20000690 	.word	0x20000690
 800119c:	0800f828 	.word	0x0800f828
 80011a0:	20000448 	.word	0x20000448
 80011a4:	0800f860 	.word	0x0800f860
 80011a8:	0800f888 	.word	0x0800f888
 80011ac:	0800f8c8 	.word	0x0800f8c8
 80011b0:	0800f808 	.word	0x0800f808

080011b4 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80011be:	4953      	ldr	r1, [pc, #332]	; (800130c <Update_File+0x158>)
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f008 fc25 	bl	8009a10 <f_stat>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <Update_File+0x15c>)
 80011cc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <Update_File+0x15c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d011      	beq.n	80011fa <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 80011d6:	2064      	movs	r0, #100	; 0x64
 80011d8:	f00b f936 	bl	800c448 <pvPortMalloc>
 80011dc:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	494c      	ldr	r1, [pc, #304]	; (8001314 <Update_File+0x160>)
 80011e2:	68b8      	ldr	r0, [r7, #8]
 80011e4:	f00c f830 	bl	800d248 <siprintf>
		Send_Uart (buf);
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f7ff fe8b 	bl	8000f04 <Send_Uart>
		vPortFree(buf);
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f00b f9f6 	bl	800c5e0 <vPortFree>
	    return fresult;
 80011f4:	4b46      	ldr	r3, [pc, #280]	; (8001310 <Update_File+0x15c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	e083      	b.n	8001302 <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80011fa:	2232      	movs	r2, #50	; 0x32
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4846      	ldr	r0, [pc, #280]	; (8001318 <Update_File+0x164>)
 8001200:	f007 fefe 	bl	8009000 <f_open>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b41      	ldr	r3, [pc, #260]	; (8001310 <Update_File+0x15c>)
 800120a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800120c:	4b40      	ldr	r3, [pc, #256]	; (8001310 <Update_File+0x15c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d014      	beq.n	800123e <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001214:	2064      	movs	r0, #100	; 0x64
 8001216:	f00b f917 	bl	800c448 <pvPortMalloc>
 800121a:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800121c:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <Update_File+0x15c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	493d      	ldr	r1, [pc, #244]	; (800131c <Update_File+0x168>)
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f00c f80e 	bl	800d248 <siprintf>
	    	Send_Uart(buf);
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff fe69 	bl	8000f04 <Send_Uart>
	        vPortFree(buf);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f00b f9d4 	bl	800c5e0 <vPortFree>
	        return fresult;
 8001238:	4b35      	ldr	r3, [pc, #212]	; (8001310 <Update_File+0x15c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	e061      	b.n	8001302 <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff f846 	bl	80002d0 <strlen>
 8001244:	4602      	mov	r2, r0
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <Update_File+0x16c>)
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	4833      	ldr	r0, [pc, #204]	; (8001318 <Update_File+0x164>)
 800124c:	f008 f89d 	bl	800938a <f_write>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <Update_File+0x15c>)
 8001256:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <Update_File+0x15c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d012      	beq.n	8001286 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001260:	2064      	movs	r0, #100	; 0x64
 8001262:	f00b f8f1 	bl	800c448 <pvPortMalloc>
 8001266:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <Update_File+0x15c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	492c      	ldr	r1, [pc, #176]	; (8001324 <Update_File+0x170>)
 8001272:	69b8      	ldr	r0, [r7, #24]
 8001274:	f00b ffe8 	bl	800d248 <siprintf>
	    	Send_Uart(buf);
 8001278:	69b8      	ldr	r0, [r7, #24]
 800127a:	f7ff fe43 	bl	8000f04 <Send_Uart>
	    	vPortFree(buf);
 800127e:	69b8      	ldr	r0, [r7, #24]
 8001280:	f00b f9ae 	bl	800c5e0 <vPortFree>
 8001284:	e00e      	b.n	80012a4 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001286:	2064      	movs	r0, #100	; 0x64
 8001288:	f00b f8de 	bl	800c448 <pvPortMalloc>
 800128c:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4925      	ldr	r1, [pc, #148]	; (8001328 <Update_File+0x174>)
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f00b ffd8 	bl	800d248 <siprintf>
	    	Send_Uart(buf);
 8001298:	69f8      	ldr	r0, [r7, #28]
 800129a:	f7ff fe33 	bl	8000f04 <Send_Uart>
	    	vPortFree(buf);
 800129e:	69f8      	ldr	r0, [r7, #28]
 80012a0:	f00b f99e 	bl	800c5e0 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80012a4:	481c      	ldr	r0, [pc, #112]	; (8001318 <Update_File+0x164>)
 80012a6:	f008 fa9d 	bl	80097e4 <f_close>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <Update_File+0x15c>)
 80012b0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <Update_File+0x15c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d012      	beq.n	80012e0 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	f00b f8c4 	bl	800c448 <pvPortMalloc>
 80012c0:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <Update_File+0x15c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4918      	ldr	r1, [pc, #96]	; (800132c <Update_File+0x178>)
 80012cc:	6938      	ldr	r0, [r7, #16]
 80012ce:	f00b ffbb 	bl	800d248 <siprintf>
	    	Send_Uart(buf);
 80012d2:	6938      	ldr	r0, [r7, #16]
 80012d4:	f7ff fe16 	bl	8000f04 <Send_Uart>
	    	vPortFree(buf);
 80012d8:	6938      	ldr	r0, [r7, #16]
 80012da:	f00b f981 	bl	800c5e0 <vPortFree>
 80012de:	e00e      	b.n	80012fe <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f00b f8b1 	bl	800c448 <pvPortMalloc>
 80012e6:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4911      	ldr	r1, [pc, #68]	; (8001330 <Update_File+0x17c>)
 80012ec:	6978      	ldr	r0, [r7, #20]
 80012ee:	f00b ffab 	bl	800d248 <siprintf>
	    	Send_Uart(buf);
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff fe06 	bl	8000f04 <Send_Uart>
	    	vPortFree(buf);
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f00b f971 	bl	800c5e0 <vPortFree>
	     }
	}
    return fresult;
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <Update_File+0x15c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000678 	.word	0x20000678
 8001310:	20000690 	.word	0x20000690
 8001314:	0800f6b0 	.word	0x0800f6b0
 8001318:	20000448 	.word	0x20000448
 800131c:	0800f6d0 	.word	0x0800f6d0
 8001320:	20000694 	.word	0x20000694
 8001324:	0800f8ec 	.word	0x0800f8ec
 8001328:	0800f914 	.word	0x0800f914
 800132c:	0800f7e0 	.word	0x0800f7e0
 8001330:	0800f808 	.word	0x0800f808

08001334 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f008 fc59 	bl	8009bf4 <f_mkdir>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <Create_Dir+0x70>)
 8001348:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <Create_Dir+0x70>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f00b f878 	bl	800c448 <pvPortMalloc>
 8001358:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4912      	ldr	r1, [pc, #72]	; (80013a8 <Create_Dir+0x74>)
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f00b ff72 	bl	800d248 <siprintf>
    	Send_Uart (buf);
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff fdcd 	bl	8000f04 <Send_Uart>
    	vPortFree(buf);
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f00b f938 	bl	800c5e0 <vPortFree>
 8001370:	e011      	b.n	8001396 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8001372:	2064      	movs	r0, #100	; 0x64
 8001374:	f00b f868 	bl	800c448 <pvPortMalloc>
 8001378:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <Create_Dir+0x70>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	490a      	ldr	r1, [pc, #40]	; (80013ac <Create_Dir+0x78>)
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f00b ff5f 	bl	800d248 <siprintf>
    	Send_Uart(buf);
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff fdba 	bl	8000f04 <Send_Uart>
    	vPortFree(buf);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f00b f925 	bl	800c5e0 <vPortFree>
    }
    return fresult;
 8001396:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <Create_Dir+0x70>)
 8001398:	781b      	ldrb	r3, [r3, #0]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000690 	.word	0x20000690
 80013a8:	0800f974 	.word	0x0800f974
 80013ac:	0800f998 	.word	0x0800f998

080013b0 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013c4:	4a29      	ldr	r2, [pc, #164]	; (800146c <MX_ADC2_Init+0xbc>)
 80013c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013f2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_ADC2_Init+0xb8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_ADC2_Init+0xb8>)
 8001400:	2202      	movs	r2, #2
 8001402:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_ADC2_Init+0xb8>)
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_ADC2_Init+0xb8>)
 800140e:	2201      	movs	r2, #1
 8001410:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001412:	4815      	ldr	r0, [pc, #84]	; (8001468 <MX_ADC2_Init+0xb8>)
 8001414:	f001 fe8c 	bl	8003130 <HAL_ADC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800141e:	f000 ffed 	bl	80023fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001422:	230f      	movs	r3, #15
 8001424:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800142a:	2301      	movs	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_ADC2_Init+0xb8>)
 8001434:	f001 ffda 	bl	80033ec <HAL_ADC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 800143e:	f000 ffdd 	bl	80023fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001442:	230e      	movs	r3, #14
 8001444:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <MX_ADC2_Init+0xb8>)
 8001450:	f001 ffcc 	bl	80033ec <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 800145a:	f000 ffcf 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000698 	.word	0x20000698
 800146c:	40012100 	.word	0x40012100

08001470 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_ADC_MspInit+0xdc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d158      	bne.n	8001544 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <HAL_ADC_MspInit+0xe0>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <HAL_ADC_MspInit+0xe0>)
 800149c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_ADC_MspInit+0xe0>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_ADC_MspInit+0xe0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_ADC_MspInit+0xe0>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_ADC_MspInit+0xe0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN14
    PC5     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014ca:	2330      	movs	r3, #48	; 0x30
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ce:	2303      	movs	r3, #3
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	481d      	ldr	r0, [pc, #116]	; (8001554 <HAL_ADC_MspInit+0xe4>)
 80014de:	f002 fe87 	bl	80041f0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_ADC_MspInit+0xec>)
 80014e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 80014ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ee:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 80014fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001502:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 8001506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 800150e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001512:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 8001516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 800152a:	f002 faf1 	bl	8003b10 <HAL_DMA_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001534:	f000 ff62 	bl	80023fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 800153c:	639a      	str	r2, [r3, #56]	; 0x38
 800153e:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_ADC_MspInit+0xe8>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40012100 	.word	0x40012100
 8001550:	40023800 	.word	0x40023800
 8001554:	40020800 	.word	0x40020800
 8001558:	200006e0 	.word	0x200006e0
 800155c:	40026440 	.word	0x40026440

08001560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_DMA_Init+0x3c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <MX_DMA_Init+0x3c>)
 8001570:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_DMA_Init+0x3c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	203a      	movs	r0, #58	; 0x3a
 8001588:	f002 fa98 	bl	8003abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800158c:	203a      	movs	r0, #58	; 0x3a
 800158e:	f002 fab1 	bl	8003af4 <HAL_NVIC_EnableIRQ>

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2101      	movs	r1, #1
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <SELECT+0x14>)
 80015aa:	f002 ffb5 	bl	8004518 <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020400 	.word	0x40020400

080015b8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2101      	movs	r1, #1
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <DESELECT+0x14>)
 80015c2:	f002 ffa9 	bl	8004518 <HAL_GPIO_WritePin>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40020400 	.word	0x40020400

080015d0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80015da:	bf00      	nop
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <SPI_TxByte+0x30>)
 80015de:	f004 f936 	bl	800584e <HAL_SPI_GetState>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d1f9      	bne.n	80015dc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80015e8:	1df9      	adds	r1, r7, #7
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	2201      	movs	r2, #1
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <SPI_TxByte+0x30>)
 80015f2:	f003 fe4e 	bl	8005292 <HAL_SPI_Transmit>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20004fc8 	.word	0x20004fc8

08001604 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001612:	bf00      	nop
 8001614:	4809      	ldr	r0, [pc, #36]	; (800163c <SPI_RxByte+0x38>)
 8001616:	f004 f91a 	bl	800584e <HAL_SPI_GetState>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d1f9      	bne.n	8001614 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001620:	1dba      	adds	r2, r7, #6
 8001622:	1df9      	adds	r1, r7, #7
 8001624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <SPI_RxByte+0x38>)
 800162e:	f003 ff6c 	bl	800550a <HAL_SPI_TransmitReceive>
  
  return data;
 8001632:	79bb      	ldrb	r3, [r7, #6]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20004fc8 	.word	0x20004fc8

08001640 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001648:	f7ff ffdc 	bl	8001604 <SPI_RxByte>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	701a      	strb	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <SD_ReadyWait+0x34>)
 8001664:	2232      	movs	r2, #50	; 0x32
 8001666:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001668:	f7ff ffcc 	bl	8001604 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800166c:	f7ff ffca 	bl	8001604 <SPI_RxByte>
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d004      	beq.n	8001684 <SD_ReadyWait+0x28>
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SD_ReadyWait+0x34>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f3      	bne.n	800166c <SD_ReadyWait+0x10>
  
  return res;
 8001684:	79fb      	ldrb	r3, [r7, #7]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000506a 	.word	0x2000506a

08001694 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800169a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800169e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80016a0:	f7ff ff8a 	bl	80015b8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	e005      	b.n	80016b6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80016aa:	20ff      	movs	r0, #255	; 0xff
 80016ac:	f7ff ff90 	bl	80015d0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3301      	adds	r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	ddf6      	ble.n	80016aa <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80016bc:	f7ff ff70 	bl	80015a0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80016c0:	2340      	movs	r3, #64	; 0x40
 80016c2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80016d4:	2395      	movs	r3, #149	; 0x95
 80016d6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e009      	b.n	80016f2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80016de:	1d3a      	adds	r2, r7, #4
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff72 	bl	80015d0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	ddf2      	ble.n	80016de <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80016f8:	e002      	b.n	8001700 <SD_PowerOn+0x6c>
  {
    Count--;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001700:	f7ff ff80 	bl	8001604 <SPI_RxByte>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d002      	beq.n	8001710 <SD_PowerOn+0x7c>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f4      	bne.n	80016fa <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001710:	f7ff ff52 	bl	80015b8 <DESELECT>
  SPI_TxByte(0XFF);
 8001714:	20ff      	movs	r0, #255	; 0xff
 8001716:	f7ff ff5b 	bl	80015d0 <SPI_TxByte>
  
  PowerFlag = 1;
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <SD_PowerOn+0x94>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000741 	.word	0x20000741

0800172c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <SD_PowerOff+0x14>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000741 	.word	0x20000741

08001744 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <SD_CheckPower+0x14>)
 800174a:	781b      	ldrb	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000741 	.word	0x20000741

0800175c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <SD_RxDataBlock+0x68>)
 8001768:	220a      	movs	r2, #10
 800176a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800176c:	f7ff ff4a 	bl	8001604 <SPI_RxByte>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2bff      	cmp	r3, #255	; 0xff
 8001778:	d104      	bne.n	8001784 <SD_RxDataBlock+0x28>
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <SD_RxDataBlock+0x68>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f3      	bne.n	800176c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2bfe      	cmp	r3, #254	; 0xfe
 8001788:	d001      	beq.n	800178e <SD_RxDataBlock+0x32>
    return FALSE;
 800178a:	2300      	movs	r3, #0
 800178c:	e016      	b.n	80017bc <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff53 	bl	8001640 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff4d 	bl	8001640 <SPI_RxBytePtr>
  } while(btr -= 2);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3b02      	subs	r3, #2
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ed      	bne.n	800178e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80017b2:	f7ff ff27 	bl	8001604 <SPI_RxByte>
  SPI_RxByte();
 80017b6:	f7ff ff25 	bl	8001604 <SPI_RxByte>
  
  return TRUE;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20005069 	.word	0x20005069

080017c8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80017d8:	f7ff ff40 	bl	800165c <SD_ReadyWait>
 80017dc:	4603      	mov	r3, r0
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d001      	beq.n	80017e6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e040      	b.n	8001868 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fef1 	bl	80015d0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	2bfd      	cmp	r3, #253	; 0xfd
 80017f2:	d031      	beq.n	8001858 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fee5 	bl	80015d0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fede 	bl	80015d0 <SPI_TxByte>
    } while (--wc);
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	3b01      	subs	r3, #1
 8001818:	73bb      	strb	r3, [r7, #14]
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1eb      	bne.n	80017f8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001820:	f7ff fef0 	bl	8001604 <SPI_RxByte>
    SPI_RxByte();
 8001824:	f7ff feee 	bl	8001604 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001828:	e00b      	b.n	8001842 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800182a:	f7ff feeb 	bl	8001604 <SPI_RxByte>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2b05      	cmp	r3, #5
 800183a:	d006      	beq.n	800184a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800183c:	7b7b      	ldrb	r3, [r7, #13]
 800183e:	3301      	adds	r3, #1
 8001840:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001842:	7b7b      	ldrb	r3, [r7, #13]
 8001844:	2b40      	cmp	r3, #64	; 0x40
 8001846:	d9f0      	bls.n	800182a <SD_TxDataBlock+0x62>
 8001848:	e000      	b.n	800184c <SD_TxDataBlock+0x84>
        break;
 800184a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800184c:	bf00      	nop
 800184e:	f7ff fed9 	bl	8001604 <SPI_RxByte>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0fa      	beq.n	800184e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	2b05      	cmp	r3, #5
 8001860:	d101      	bne.n	8001866 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800187c:	f7ff feee 	bl	800165c <SD_ReadyWait>
 8001880:	4603      	mov	r3, r0
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d001      	beq.n	800188a <SD_SendCmd+0x1a>
    return 0xFF;
 8001886:	23ff      	movs	r3, #255	; 0xff
 8001888:	e040      	b.n	800190c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fe9f 	bl	80015d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	0e1b      	lsrs	r3, r3, #24
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fe99 	bl	80015d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe93 	bl	80015d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe8d 	bl	80015d0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe88 	bl	80015d0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b40      	cmp	r3, #64	; 0x40
 80018c8:	d101      	bne.n	80018ce <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80018ca:	2395      	movs	r3, #149	; 0x95
 80018cc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b48      	cmp	r3, #72	; 0x48
 80018d2:	d101      	bne.n	80018d8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80018d4:	2387      	movs	r3, #135	; 0x87
 80018d6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fe78 	bl	80015d0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2b4c      	cmp	r3, #76	; 0x4c
 80018e4:	d101      	bne.n	80018ea <SD_SendCmd+0x7a>
    SPI_RxByte();
 80018e6:	f7ff fe8d 	bl	8001604 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80018ea:	230a      	movs	r3, #10
 80018ec:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80018ee:	f7ff fe89 	bl	8001604 <SPI_RxByte>
 80018f2:	4603      	mov	r3, r0
 80018f4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80018f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da05      	bge.n	800190a <SD_SendCmd+0x9a>
 80018fe:	7bbb      	ldrb	r3, [r7, #14]
 8001900:	3b01      	subs	r3, #1
 8001902:	73bb      	strb	r3, [r7, #14]
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f1      	bne.n	80018ee <SD_SendCmd+0x7e>
  
  return res;
 800190a:	7b7b      	ldrb	r3, [r7, #13]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001924:	2301      	movs	r3, #1
 8001926:	e0d5      	b.n	8001ad4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001928:	4b6c      	ldr	r3, [pc, #432]	; (8001adc <SD_disk_initialize+0x1c8>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <SD_disk_initialize+0x2a>
    return Stat;        
 8001936:	4b69      	ldr	r3, [pc, #420]	; (8001adc <SD_disk_initialize+0x1c8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	e0ca      	b.n	8001ad4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800193e:	f7ff fea9 	bl	8001694 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001942:	f7ff fe2d 	bl	80015a0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800194a:	2100      	movs	r1, #0
 800194c:	2040      	movs	r0, #64	; 0x40
 800194e:	f7ff ff8f 	bl	8001870 <SD_SendCmd>
 8001952:	4603      	mov	r3, r0
 8001954:	2b01      	cmp	r3, #1
 8001956:	f040 80a5 	bne.w	8001aa4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800195a:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <SD_disk_initialize+0x1cc>)
 800195c:	2264      	movs	r2, #100	; 0x64
 800195e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001960:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001964:	2048      	movs	r0, #72	; 0x48
 8001966:	f7ff ff83 	bl	8001870 <SD_SendCmd>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	d158      	bne.n	8001a22 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e00c      	b.n	8001990 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001976:	7bfc      	ldrb	r4, [r7, #15]
 8001978:	f7ff fe44 	bl	8001604 <SPI_RxByte>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	f104 0310 	add.w	r3, r4, #16
 8001984:	443b      	add	r3, r7
 8001986:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	3301      	adds	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d9ef      	bls.n	8001976 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001996:	7abb      	ldrb	r3, [r7, #10]
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 8083 	bne.w	8001aa4 <SD_disk_initialize+0x190>
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	2baa      	cmp	r3, #170	; 0xaa
 80019a2:	d17f      	bne.n	8001aa4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80019a4:	2100      	movs	r1, #0
 80019a6:	2077      	movs	r0, #119	; 0x77
 80019a8:	f7ff ff62 	bl	8001870 <SD_SendCmd>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d807      	bhi.n	80019c2 <SD_disk_initialize+0xae>
 80019b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019b6:	2069      	movs	r0, #105	; 0x69
 80019b8:	f7ff ff5a 	bl	8001870 <SD_SendCmd>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <SD_disk_initialize+0x1cc>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1eb      	bne.n	80019a4 <SD_disk_initialize+0x90>
 80019cc:	e000      	b.n	80019d0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80019ce:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <SD_disk_initialize+0x1cc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d064      	beq.n	8001aa4 <SD_disk_initialize+0x190>
 80019da:	2100      	movs	r1, #0
 80019dc:	207a      	movs	r0, #122	; 0x7a
 80019de:	f7ff ff47 	bl	8001870 <SD_SendCmd>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d15d      	bne.n	8001aa4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e00c      	b.n	8001a08 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80019ee:	7bfc      	ldrb	r4, [r7, #15]
 80019f0:	f7ff fe08 	bl	8001604 <SPI_RxByte>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	f104 0310 	add.w	r3, r4, #16
 80019fc:	443b      	add	r3, r7
 80019fe:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	3301      	adds	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d9ef      	bls.n	80019ee <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001a0e:	7a3b      	ldrb	r3, [r7, #8]
 8001a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SD_disk_initialize+0x108>
 8001a18:	2306      	movs	r3, #6
 8001a1a:	e000      	b.n	8001a1e <SD_disk_initialize+0x10a>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	73bb      	strb	r3, [r7, #14]
 8001a20:	e040      	b.n	8001aa4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001a22:	2100      	movs	r1, #0
 8001a24:	2077      	movs	r0, #119	; 0x77
 8001a26:	f7ff ff23 	bl	8001870 <SD_SendCmd>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d808      	bhi.n	8001a42 <SD_disk_initialize+0x12e>
 8001a30:	2100      	movs	r1, #0
 8001a32:	2069      	movs	r0, #105	; 0x69
 8001a34:	f7ff ff1c 	bl	8001870 <SD_SendCmd>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d801      	bhi.n	8001a42 <SD_disk_initialize+0x12e>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e000      	b.n	8001a44 <SD_disk_initialize+0x130>
 8001a42:	2301      	movs	r3, #1
 8001a44:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d10e      	bne.n	8001a6a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2077      	movs	r0, #119	; 0x77
 8001a50:	f7ff ff0e 	bl	8001870 <SD_SendCmd>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d80e      	bhi.n	8001a78 <SD_disk_initialize+0x164>
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2069      	movs	r0, #105	; 0x69
 8001a5e:	f7ff ff07 	bl	8001870 <SD_SendCmd>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d107      	bne.n	8001a78 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001a68:	e00d      	b.n	8001a86 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2041      	movs	r0, #65	; 0x41
 8001a6e:	f7ff feff 	bl	8001870 <SD_SendCmd>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <SD_disk_initialize+0x1cc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e1      	bne.n	8001a46 <SD_disk_initialize+0x132>
 8001a82:	e000      	b.n	8001a86 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001a84:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <SD_disk_initialize+0x1cc>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <SD_disk_initialize+0x18c>
 8001a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a94:	2050      	movs	r0, #80	; 0x50
 8001a96:	f7ff feeb 	bl	8001870 <SD_SendCmd>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <SD_disk_initialize+0x1d0>)
 8001aa6:	7bbb      	ldrb	r3, [r7, #14]
 8001aa8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001aaa:	f7ff fd85 	bl	80015b8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001aae:	f7ff fda9 	bl	8001604 <SPI_RxByte>
  
  if (type) 
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <SD_disk_initialize+0x1c8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SD_disk_initialize+0x1c8>)
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e001      	b.n	8001ace <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001aca:	f7ff fe2f 	bl	800172c <SD_PowerOff>
  }
  
  return Stat;
 8001ace:	4b03      	ldr	r3, [pc, #12]	; (8001adc <SD_disk_initialize+0x1c8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b2db      	uxtb	r3, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20005069 	.word	0x20005069
 8001ae4:	20000740 	.word	0x20000740

08001ae8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001af8:	2301      	movs	r3, #1
 8001afa:	e002      	b.n	8001b02 <SD_disk_status+0x1a>
  
  return Stat;
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SD_disk_status+0x28>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000

08001b14 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <SD_disk_read+0x1c>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <SD_disk_read+0x20>
    return RES_PARERR;
 8001b30:	2304      	movs	r3, #4
 8001b32:	e051      	b.n	8001bd8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <SD_disk_read+0xcc>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e048      	b.n	8001bd8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001b46:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <SD_disk_read+0xd0>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	025b      	lsls	r3, r3, #9
 8001b56:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001b58:	f7ff fd22 	bl	80015a0 <SELECT>
  
  if (count == 1) 
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d111      	bne.n	8001b86 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	2051      	movs	r0, #81	; 0x51
 8001b66:	f7ff fe83 	bl	8001870 <SD_SendCmd>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d129      	bne.n	8001bc4 <SD_disk_read+0xb0>
 8001b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f7ff fdf1 	bl	800175c <SD_RxDataBlock>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d021      	beq.n	8001bc4 <SD_disk_read+0xb0>
      count = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	e01e      	b.n	8001bc4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	2052      	movs	r0, #82	; 0x52
 8001b8a:	f7ff fe71 	bl	8001870 <SD_SendCmd>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d117      	bne.n	8001bc4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b98:	68b8      	ldr	r0, [r7, #8]
 8001b9a:	f7ff fddf 	bl	800175c <SD_RxDataBlock>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00a      	beq.n	8001bba <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001baa:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ed      	bne.n	8001b94 <SD_disk_read+0x80>
 8001bb8:	e000      	b.n	8001bbc <SD_disk_read+0xa8>
          break;
 8001bba:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	204c      	movs	r0, #76	; 0x4c
 8001bc0:	f7ff fe56 	bl	8001870 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001bc4:	f7ff fcf8 	bl	80015b8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001bc8:	f7ff fd1c 	bl	8001604 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000740 	.word	0x20000740

08001be8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <SD_disk_write+0x1c>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <SD_disk_write+0x20>
    return RES_PARERR;
 8001c04:	2304      	movs	r3, #4
 8001c06:	e06b      	b.n	8001ce0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <SD_disk_write+0x100>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e062      	b.n	8001ce0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <SD_disk_write+0x100>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e059      	b.n	8001ce0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <SD_disk_write+0x104>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001c3e:	f7ff fcaf 	bl	80015a0 <SELECT>
  
  if (count == 1) 
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d110      	bne.n	8001c6a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	2058      	movs	r0, #88	; 0x58
 8001c4c:	f7ff fe10 	bl	8001870 <SD_SendCmd>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d13a      	bne.n	8001ccc <SD_disk_write+0xe4>
 8001c56:	21fe      	movs	r1, #254	; 0xfe
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f7ff fdb5 	bl	80017c8 <SD_TxDataBlock>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d033      	beq.n	8001ccc <SD_disk_write+0xe4>
      count = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	e030      	b.n	8001ccc <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <SD_disk_write+0x104>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001c76:	2100      	movs	r1, #0
 8001c78:	2077      	movs	r0, #119	; 0x77
 8001c7a:	f7ff fdf9 	bl	8001870 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c7e:	6839      	ldr	r1, [r7, #0]
 8001c80:	2057      	movs	r0, #87	; 0x57
 8001c82:	f7ff fdf5 	bl	8001870 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	2059      	movs	r0, #89	; 0x59
 8001c8a:	f7ff fdf1 	bl	8001870 <SD_SendCmd>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d11b      	bne.n	8001ccc <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001c94:	21fc      	movs	r1, #252	; 0xfc
 8001c96:	68b8      	ldr	r0, [r7, #8]
 8001c98:	f7ff fd96 	bl	80017c8 <SD_TxDataBlock>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ca8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ee      	bne.n	8001c94 <SD_disk_write+0xac>
 8001cb6:	e000      	b.n	8001cba <SD_disk_write+0xd2>
          break;
 8001cb8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001cba:	21fd      	movs	r1, #253	; 0xfd
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff fd83 	bl	80017c8 <SD_TxDataBlock>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <SD_disk_write+0xe4>
      {        
        count = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001ccc:	f7ff fc74 	bl	80015b8 <DESELECT>
  SPI_RxByte();
 8001cd0:	f7ff fc98 	bl	8001604 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bf14      	ite	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	2300      	moveq	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000740 	.word	0x20000740

08001cf0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	603a      	str	r2, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	e11b      	b.n	8001f46 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d129      	bne.n	8001d6e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d017      	beq.n	8001d52 <SD_disk_ioctl+0x62>
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	dc1f      	bgt.n	8001d66 <SD_disk_ioctl+0x76>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <SD_disk_ioctl+0x40>
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d00b      	beq.n	8001d46 <SD_disk_ioctl+0x56>
 8001d2e:	e01a      	b.n	8001d66 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001d30:	f7ff fd08 	bl	8001744 <SD_CheckPower>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001d3a:	f7ff fcf7 	bl	800172c <SD_PowerOff>
      res = RES_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001d44:	e0fd      	b.n	8001f42 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001d46:	f7ff fca5 	bl	8001694 <SD_PowerOn>
      res = RES_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001d50:	e0f7      	b.n	8001f42 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	1c5c      	adds	r4, r3, #1
 8001d56:	f7ff fcf5 	bl	8001744 <SD_CheckPower>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001d64:	e0ed      	b.n	8001f42 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001d66:	2304      	movs	r3, #4
 8001d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d6c:	e0e9      	b.n	8001f42 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <SD_disk_ioctl+0x260>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e0e2      	b.n	8001f46 <SD_disk_ioctl+0x256>
    
    SELECT();
 8001d80:	f7ff fc0e 	bl	80015a0 <SELECT>
    
    switch (ctrl) 
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	2b0d      	cmp	r3, #13
 8001d88:	f200 80cc 	bhi.w	8001f24 <SD_disk_ioctl+0x234>
 8001d8c:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <SD_disk_ioctl+0xa4>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001e8f 	.word	0x08001e8f
 8001d98:	08001dcd 	.word	0x08001dcd
 8001d9c:	08001e7f 	.word	0x08001e7f
 8001da0:	08001f25 	.word	0x08001f25
 8001da4:	08001f25 	.word	0x08001f25
 8001da8:	08001f25 	.word	0x08001f25
 8001dac:	08001f25 	.word	0x08001f25
 8001db0:	08001f25 	.word	0x08001f25
 8001db4:	08001f25 	.word	0x08001f25
 8001db8:	08001f25 	.word	0x08001f25
 8001dbc:	08001f25 	.word	0x08001f25
 8001dc0:	08001ea1 	.word	0x08001ea1
 8001dc4:	08001ec5 	.word	0x08001ec5
 8001dc8:	08001ee9 	.word	0x08001ee9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2049      	movs	r0, #73	; 0x49
 8001dd0:	f7ff fd4e 	bl	8001870 <SD_SendCmd>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 80a8 	bne.w	8001f2c <SD_disk_ioctl+0x23c>
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2110      	movs	r1, #16
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fcba 	bl	800175c <SD_RxDataBlock>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 809e 	beq.w	8001f2c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001df0:	7b3b      	ldrb	r3, [r7, #12]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10e      	bne.n	8001e18 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001dfa:	7d7b      	ldrb	r3, [r7, #21]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	7d3b      	ldrb	r3, [r7, #20]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	029a      	lsls	r2, r3, #10
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e02e      	b.n	8001e76 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e18:	7c7b      	ldrb	r3, [r7, #17]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	7dbb      	ldrb	r3, [r7, #22]
 8001e22:	09db      	lsrs	r3, r3, #7
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	7d7b      	ldrb	r3, [r7, #21]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f003 0306 	and.w	r3, r3, #6
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001e40:	7d3b      	ldrb	r3, [r7, #20]
 8001e42:	099b      	lsrs	r3, r3, #6
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	7cbb      	ldrb	r3, [r7, #18]
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001e68:	8bfa      	ldrh	r2, [r7, #30]
 8001e6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e6e:	3b09      	subs	r3, #9
 8001e70:	409a      	lsls	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001e7c:	e056      	b.n	8001f2c <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e84:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e8c:	e055      	b.n	8001f3a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001e8e:	f7ff fbe5 	bl	800165c <SD_ReadyWait>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2bff      	cmp	r3, #255	; 0xff
 8001e96:	d14b      	bne.n	8001f30 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e9e:	e047      	b.n	8001f30 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2049      	movs	r0, #73	; 0x49
 8001ea4:	f7ff fce4 	bl	8001870 <SD_SendCmd>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d142      	bne.n	8001f34 <SD_disk_ioctl+0x244>
 8001eae:	2110      	movs	r1, #16
 8001eb0:	6a38      	ldr	r0, [r7, #32]
 8001eb2:	f7ff fc53 	bl	800175c <SD_RxDataBlock>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03b      	beq.n	8001f34 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ec2:	e037      	b.n	8001f34 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	204a      	movs	r0, #74	; 0x4a
 8001ec8:	f7ff fcd2 	bl	8001870 <SD_SendCmd>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d132      	bne.n	8001f38 <SD_disk_ioctl+0x248>
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	6a38      	ldr	r0, [r7, #32]
 8001ed6:	f7ff fc41 	bl	800175c <SD_RxDataBlock>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d02b      	beq.n	8001f38 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ee6:	e027      	b.n	8001f38 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001ee8:	2100      	movs	r1, #0
 8001eea:	207a      	movs	r0, #122	; 0x7a
 8001eec:	f7ff fcc0 	bl	8001870 <SD_SendCmd>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001efc:	e00b      	b.n	8001f16 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001efe:	6a3c      	ldr	r4, [r7, #32]
 8001f00:	1c63      	adds	r3, r4, #1
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	f7ff fb7e 	bl	8001604 <SPI_RxByte>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f10:	3301      	adds	r3, #1
 8001f12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d9ef      	bls.n	8001efe <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001f24:	2304      	movs	r3, #4
 8001f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f2a:	e006      	b.n	8001f3a <SD_disk_ioctl+0x24a>
      break;
 8001f2c:	bf00      	nop
 8001f2e:	e004      	b.n	8001f3a <SD_disk_ioctl+0x24a>
      break;
 8001f30:	bf00      	nop
 8001f32:	e002      	b.n	8001f3a <SD_disk_ioctl+0x24a>
      break;
 8001f34:	bf00      	nop
 8001f36:	e000      	b.n	8001f3a <SD_disk_ioctl+0x24a>
      break;
 8001f38:	bf00      	nop
    }
    
    DESELECT();
 8001f3a:	f7ff fb3d 	bl	80015b8 <DESELECT>
    SPI_RxByte();
 8001f3e:	f7ff fb61 	bl	8001604 <SPI_RxByte>
  }
  
  return res;
 8001f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	372c      	adds	r7, #44	; 0x2c
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd90      	pop	{r4, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000000 	.word	0x20000000

08001f54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <vApplicationGetIdleTaskMemory+0x30>)
 8001f6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20004d28 	.word	0x20004d28
 8001f84:	20004dc8 	.word	0x20004dc8

08001f88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b09a      	sub	sp, #104	; 0x68
 8001f8c:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	663b      	str	r3, [r7, #96]	; 0x60
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <MX_FREERTOS_Init+0xb0>)
 8001f94:	667b      	str	r3, [r7, #100]	; 0x64
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8001f96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f008 f87f 	bl	800a0a0 <osSemaphoreCreate>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <MX_FREERTOS_Init+0xb4>)
 8001fa6:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <MX_FREERTOS_Init+0xb8>)
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 8001fb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f008 f872 	bl	800a0a0 <osSemaphoreCreate>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <MX_FREERTOS_Init+0xbc>)
 8001fc0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <MX_FREERTOS_Init+0xc0>)
 8001fc4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001fc8:	461d      	mov	r5, r3
 8001fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f007 ffff 	bl	8009fe0 <osThreadCreate>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <MX_FREERTOS_Init+0xc4>)
 8001fe6:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, initSensorRead, osPriorityNormal, 0, 4096, sensorReadBuffer, &sensorReadControlBlock);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <MX_FREERTOS_Init+0xc8>)
 8001fea:	f107 0420 	add.w	r4, r7, #32
 8001fee:	461d      	mov	r5, r3
 8001ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 8001ffc:	f107 0320 	add.w	r3, r7, #32
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f007 ffec 	bl	8009fe0 <osThreadCreate>
 8002008:	4603      	mov	r3, r0
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <MX_FREERTOS_Init+0xcc>)
 800200c:	6013      	str	r3, [r2, #0]

  /* definition and creation of SdCard */
  osThreadStaticDef(SdCard, SdCardInit, osPriorityHigh, 0, 256, SdCardBuffer, &SdCardControlBlock);
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <MX_FREERTOS_Init+0xd0>)
 8002010:	1d3c      	adds	r4, r7, #4
 8002012:	461d      	mov	r5, r3
 8002014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002018:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800201c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f007 ffdb 	bl	8009fe0 <osThreadCreate>
 800202a:	4603      	mov	r3, r0
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <MX_FREERTOS_Init+0xd4>)
 800202e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002030:	bf00      	nop
 8002032:	3768      	adds	r7, #104	; 0x68
 8002034:	46bd      	mov	sp, r7
 8002036:	bdb0      	pop	{r4, r5, r7, pc}
 8002038:	20004c94 	.word	0x20004c94
 800203c:	20004c90 	.word	0x20004c90
 8002040:	20004ce0 	.word	0x20004ce0
 8002044:	20004cdc 	.word	0x20004cdc
 8002048:	0800fa0c 	.word	0x0800fa0c
 800204c:	20000744 	.word	0x20000744
 8002050:	0800fa34 	.word	0x0800fa34
 8002054:	20000748 	.word	0x20000748
 8002058:	0800fa58 	.word	0x0800fa58
 800205c:	200047ec 	.word	0x200047ec

08002060 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002068:	2001      	movs	r0, #1
 800206a:	f008 f805 	bl	800a078 <osDelay>
 800206e:	e7fb      	b.n	8002068 <StartDefaultTask+0x8>

08002070 <initSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_initSensorRead */
void initSensorRead(void const * argument)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b092      	sub	sp, #72	; 0x48
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 * Create different file name per measurement
 */
	char dir[FILE_NAME_SIZE];
	char frontSensor[FILE_NAME_SIZE];
	char rearSensor[FILE_NAME_SIZE];
	sprintf(dir,"Data%d",path);
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <initSensorRead+0xa8>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002082:	4926      	ldr	r1, [pc, #152]	; (800211c <initSensorRead+0xac>)
 8002084:	4618      	mov	r0, r3
 8002086:	f00b f8df 	bl	800d248 <siprintf>
	sprintf(frontSensor,"Data%d/FRONT%d.txt",path,path);
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <initSensorRead+0xa8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <initSensorRead+0xa8>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f107 0020 	add.w	r0, r7, #32
 8002098:	4921      	ldr	r1, [pc, #132]	; (8002120 <initSensorRead+0xb0>)
 800209a:	f00b f8d5 	bl	800d248 <siprintf>
	sprintf(rearSensor,"Data%d/Rear%d.txt",path,path);
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <initSensorRead+0xa8>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <initSensorRead+0xa8>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f107 000c 	add.w	r0, r7, #12
 80020ac:	491d      	ldr	r1, [pc, #116]	; (8002124 <initSensorRead+0xb4>)
 80020ae:	f00b f8cb 	bl	800d248 <siprintf>
	path++;
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <initSensorRead+0xa8>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <initSensorRead+0xa8>)
 80020bc:	701a      	strb	r2, [r3, #0]
	/**
	 * Mount SD Card and create dir and files for Travel sensors
	 */
	Mount_SD("/");
 80020be:	481a      	ldr	r0, [pc, #104]	; (8002128 <initSensorRead+0xb8>)
 80020c0:	f7fe ff36 	bl	8000f30 <Mount_SD>
	Format_SD();
 80020c4:	f7fe ff7a 	bl	8000fbc <Format_SD>
	Create_Dir(dir);
 80020c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f931 	bl	8001334 <Create_Dir>
	Create_File(frontSensor);
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe ffd6 	bl	8001088 <Create_File>
	Create_File(rearSensor);
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe ffd1 	bl	8001088 <Create_File>
	Unmount_SD("/");
 80020e6:	4810      	ldr	r0, [pc, #64]	; (8002128 <initSensorRead+0xb8>)
 80020e8:	f7fe ff46 	bl	8000f78 <Unmount_SD>
	/**
	 * Wait for system initialize
	 */
	osDelayUntil((uint32_t*)osKernelSysTick(), SD_INIT_TIME);
 80020ec:	f007 ff68 	bl	8009fc0 <osKernelSysTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	210a      	movs	r1, #10
 80020f4:	4618      	mov	r0, r3
 80020f6:	f008 f89c 	bl	800a232 <osDelayUntil>
	startAdcDma();
 80020fa:	f000 fda5 	bl	8002c48 <startAdcDma>

  /* Infinite loop */
  for(;;)
  {

	processData(frontSensor,rearSensor);
 80020fe:	f107 020c 	add.w	r2, r7, #12
 8002102:	f107 0320 	add.w	r3, r7, #32
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fdb5 	bl	8002c78 <processData>
    osDelay(1);
 800210e:	2001      	movs	r0, #1
 8002110:	f007 ffb2 	bl	800a078 <osDelay>
	processData(frontSensor,rearSensor);
 8002114:	e7f3      	b.n	80020fe <initSensorRead+0x8e>
 8002116:	bf00      	nop
 8002118:	20000742 	.word	0x20000742
 800211c:	0800fa74 	.word	0x0800fa74
 8002120:	0800fa7c 	.word	0x0800fa7c
 8002124:	0800fa90 	.word	0x0800fa90
 8002128:	0800faa4 	.word	0x0800faa4

0800212c <SdCardInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

/* Infinite loop */
  for(;;)
  {

	  osDelay(200);
 8002134:	20c8      	movs	r0, #200	; 0xc8
 8002136:	f007 ff9f 	bl	800a078 <osDelay>
 800213a:	e7fb      	b.n	8002134 <SdCardInit+0x8>

0800213c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC5   ------> ADCx_IN15
*/
void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <MX_GPIO_Init+0x110>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a3c      	ldr	r2, [pc, #240]	; (800224c <MX_GPIO_Init+0x110>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b3a      	ldr	r3, [pc, #232]	; (800224c <MX_GPIO_Init+0x110>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <MX_GPIO_Init+0x110>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a35      	ldr	r2, [pc, #212]	; (800224c <MX_GPIO_Init+0x110>)
 8002178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <MX_GPIO_Init+0x110>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <MX_GPIO_Init+0x110>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a2e      	ldr	r2, [pc, #184]	; (800224c <MX_GPIO_Init+0x110>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b2c      	ldr	r3, [pc, #176]	; (800224c <MX_GPIO_Init+0x110>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <MX_GPIO_Init+0x110>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <MX_GPIO_Init+0x110>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b25      	ldr	r3, [pc, #148]	; (800224c <MX_GPIO_Init+0x110>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2120      	movs	r1, #32
 80021c6:	4822      	ldr	r0, [pc, #136]	; (8002250 <MX_GPIO_Init+0x114>)
 80021c8:	f002 f9a6 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2101      	movs	r1, #1
 80021d0:	4820      	ldr	r0, [pc, #128]	; (8002254 <MX_GPIO_Init+0x118>)
 80021d2:	f002 f9a1 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	481a      	ldr	r0, [pc, #104]	; (8002258 <MX_GPIO_Init+0x11c>)
 80021ee:	f001 ffff 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021f2:	2320      	movs	r3, #32
 80021f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4811      	ldr	r0, [pc, #68]	; (8002250 <MX_GPIO_Init+0x114>)
 800220a:	f001 fff1 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800220e:	2320      	movs	r3, #32
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002212:	2303      	movs	r3, #3
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <MX_GPIO_Init+0x11c>)
 8002222:	f001 ffe5 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002226:	2301      	movs	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_GPIO_Init+0x118>)
 800223e:	f001 ffd7 	bl	80041f0 <HAL_GPIO_Init>

}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	; 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40020800 	.word	0x40020800

0800225c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002268:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002274:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002278:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800227c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002284:	e000      	b.n	8002288 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002286:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f9      	beq.n	8002286 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002292:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ffd1 	bl	800225c <ITM_SendChar>
	return (ch);
 80022ba:	687b      	ldr	r3, [r7, #4]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c8:	f000 fef0 	bl	80030ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022cc:	f000 f818 	bl	8002300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d0:	f7ff ff34 	bl	800213c <MX_GPIO_Init>
  MX_DMA_Init();
 80022d4:	f7ff f944 	bl	8001560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80022d8:	f000 fe4c 	bl	8002f74 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80022dc:	f000 f894 	bl	8002408 <MX_SPI2_Init>
  MX_FATFS_Init();
 80022e0:	f004 ff58 	bl	8007194 <MX_FATFS_Init>
  MX_TIM6_Init();
 80022e4:	f000 fb90 	bl	8002a08 <MX_TIM6_Init>
  MX_TIM8_Init();
 80022e8:	f000 fbc4 	bl	8002a74 <MX_TIM8_Init>
  MX_TIM2_Init();
 80022ec:	f000 fb1a 	bl	8002924 <MX_TIM2_Init>
  MX_ADC2_Init();
 80022f0:	f7ff f85e 	bl	80013b0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80022f4:	f7ff fe48 	bl	8001f88 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80022f8:	f007 fe5b 	bl	8009fb2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <main+0x38>
	...

08002300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b094      	sub	sp, #80	; 0x50
 8002304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	2234      	movs	r2, #52	; 0x34
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f00a fffd 	bl	800d30e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <SystemClock_Config+0xd0>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a28      	ldr	r2, [pc, #160]	; (80023d0 <SystemClock_Config+0xd0>)
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <SystemClock_Config+0xd0>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002340:	2300      	movs	r3, #0
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <SystemClock_Config+0xd4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <SystemClock_Config+0xd4>)
 800234a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <SystemClock_Config+0xd4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800235c:	2302      	movs	r3, #2
 800235e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002360:	2301      	movs	r3, #1
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002364:	2310      	movs	r3, #16
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002368:	2302      	movs	r3, #2
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800236c:	2300      	movs	r3, #0
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002370:	2308      	movs	r3, #8
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002374:	2390      	movs	r3, #144	; 0x90
 8002376:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002378:	2302      	movs	r3, #2
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800237c:	2302      	movs	r3, #2
 800237e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002380:	2302      	movs	r3, #2
 8002382:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4618      	mov	r0, r3
 800238a:	f002 fc5b 	bl	8004c44 <HAL_RCC_OscConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002394:	f000 f832 	bl	80023fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002398:	230f      	movs	r3, #15
 800239a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800239c:	2302      	movs	r3, #2
 800239e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	2104      	movs	r1, #4
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 f8c8 	bl	800454c <HAL_RCC_ClockConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80023c2:	f000 f81b 	bl	80023fc <Error_Handler>
  }
}
 80023c6:	bf00      	nop
 80023c8:	3750      	adds	r7, #80	; 0x50
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40007000 	.word	0x40007000

080023d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023ea:	f000 fe81 	bl	80030f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40000400 	.word	0x40000400

080023fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002404:	e7fe      	b.n	8002404 <Error_Handler+0x8>
	...

08002408 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <MX_SPI2_Init+0x64>)
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <MX_SPI2_Init+0x68>)
 8002410:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <MX_SPI2_Init+0x64>)
 8002414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002418:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_SPI2_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <MX_SPI2_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_SPI2_Init+0x64>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_SPI2_Init+0x64>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_SPI2_Init+0x64>)
 8002434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002438:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_SPI2_Init+0x64>)
 800243c:	2218      	movs	r2, #24
 800243e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <MX_SPI2_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_SPI2_Init+0x64>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <MX_SPI2_Init+0x64>)
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_SPI2_Init+0x64>)
 8002454:	220a      	movs	r2, #10
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002458:	4804      	ldr	r0, [pc, #16]	; (800246c <MX_SPI2_Init+0x64>)
 800245a:	f002 fe91 	bl	8005180 <HAL_SPI_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002464:	f7ff ffca 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20004fc8 	.word	0x20004fc8
 8002470:	40003800 	.word	0x40003800

08002474 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a30      	ldr	r2, [pc, #192]	; (8002554 <HAL_SPI_MspInit+0xe0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d15a      	bne.n	800254c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_SPI_MspInit+0xe4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024ea:	2302      	movs	r3, #2
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80024fa:	2307      	movs	r3, #7
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4815      	ldr	r0, [pc, #84]	; (800255c <HAL_SPI_MspInit+0xe8>)
 8002506:	f001 fe73 	bl	80041f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800250a:	2304      	movs	r3, #4
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800251a:	2305      	movs	r3, #5
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	480d      	ldr	r0, [pc, #52]	; (800255c <HAL_SPI_MspInit+0xe8>)
 8002526:	f001 fe63 	bl	80041f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800252a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800253c:	2305      	movs	r3, #5
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4619      	mov	r1, r3
 8002546:	4806      	ldr	r0, [pc, #24]	; (8002560 <HAL_SPI_MspInit+0xec>)
 8002548:	f001 fe52 	bl	80041f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800254c:	bf00      	nop
 800254e:	3728      	adds	r7, #40	; 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40003800 	.word	0x40003800
 8002558:	40023800 	.word	0x40023800
 800255c:	40020800 	.word	0x40020800
 8002560:	40020400 	.word	0x40020400

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_MspInit+0x54>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_MspInit+0x54>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_MspInit+0x54>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_MspInit+0x54>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_MspInit+0x54>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_MspInit+0x54>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	210f      	movs	r1, #15
 80025a6:	f06f 0001 	mvn.w	r0, #1
 80025aa:	f001 fa87 	bl	8003abc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <HAL_InitTick+0xe4>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4a32      	ldr	r2, [pc, #200]	; (80026a0 <HAL_InitTick+0xe4>)
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	6413      	str	r3, [r2, #64]	; 0x40
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_InitTick+0xe4>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025e8:	f107 0210 	add.w	r2, r7, #16
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 f8c4 	bl	8004780 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002602:	f002 f895 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8002606:	6378      	str	r0, [r7, #52]	; 0x34
 8002608:	e004      	b.n	8002614 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800260a:	f002 f891 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 800260e:	4603      	mov	r3, r0
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_InitTick+0xe8>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	3b01      	subs	r3, #1
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_InitTick+0xec>)
 8002624:	4a21      	ldr	r2, [pc, #132]	; (80026ac <HAL_InitTick+0xf0>)
 8002626:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002628:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <HAL_InitTick+0xec>)
 800262a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800262e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_InitTick+0xec>)
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_InitTick+0xec>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_InitTick+0xec>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_InitTick+0xec>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002648:	4817      	ldr	r0, [pc, #92]	; (80026a8 <HAL_InitTick+0xec>)
 800264a:	f003 f9d9 	bl	8005a00 <HAL_TIM_Base_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002658:	2b00      	cmp	r3, #0
 800265a:	d11b      	bne.n	8002694 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800265c:	4812      	ldr	r0, [pc, #72]	; (80026a8 <HAL_InitTick+0xec>)
 800265e:	f003 fa87 	bl	8005b70 <HAL_TIM_Base_Start_IT>
 8002662:	4603      	mov	r3, r0
 8002664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002670:	201d      	movs	r0, #29
 8002672:	f001 fa3f 	bl	8003af4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d808      	bhi.n	800268e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800267c:	2200      	movs	r2, #0
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	201d      	movs	r0, #29
 8002682:	f001 fa1b 	bl	8003abc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_InitTick+0xf4>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e002      	b.n	8002694 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002694:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002698:	4618      	mov	r0, r3
 800269a:	3738      	adds	r7, #56	; 0x38
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	431bde83 	.word	0x431bde83
 80026a8:	20005020 	.word	0x20005020
 80026ac:	40000400 	.word	0x40000400
 80026b0:	20000010 	.word	0x20000010

080026b4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <SDTimer_Handler+0x40>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <SDTimer_Handler+0x1c>
    Timer1--;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <SDTimer_Handler+0x40>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <SDTimer_Handler+0x40>)
 80026ce:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <SDTimer_Handler+0x44>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d006      	beq.n	80026e8 <SDTimer_Handler+0x34>
    Timer2--;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <SDTimer_Handler+0x44>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <SDTimer_Handler+0x44>)
 80026e6:	701a      	strb	r2, [r3, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20005069 	.word	0x20005069
 80026f8:	2000506a 	.word	0x2000506a

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <MemManage_Handler+0x4>

0800270e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler+0x4>

0800271a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <TIM3_IRQHandler+0x30>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3301      	adds	r3, #1
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <TIM3_IRQHandler+0x30>)
 8002738:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <TIM3_IRQHandler+0x30>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b09      	cmp	r3, #9
 8002742:	d904      	bls.n	800274e <TIM3_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <TIM3_IRQHandler+0x30>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800274a:	f7ff ffb3 	bl	80026b4 <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800274e:	4803      	ldr	r0, [pc, #12]	; (800275c <TIM3_IRQHandler+0x34>)
 8002750:	f003 fad7 	bl	8005d02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20005068 	.word	0x20005068
 800275c:	20005020 	.word	0x20005020

08002760 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <DMA2_Stream2_IRQHandler+0x10>)
 8002766:	f001 fad9 	bl	8003d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200006e0 	.word	0x200006e0

08002774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return 1;
 8002778:	2301      	movs	r3, #1
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_kill>:

int _kill(int pid, int sig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800278e:	f00a fe79 	bl	800d484 <__errno>
 8002792:	4603      	mov	r3, r0
 8002794:	2216      	movs	r2, #22
 8002796:	601a      	str	r2, [r3, #0]
  return -1;
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_exit>:

void _exit (int status)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ffe7 	bl	8002784 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027b6:	e7fe      	b.n	80027b6 <_exit+0x12>

080027b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e00a      	b.n	80027e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027ca:	f3af 8000 	nop.w
 80027ce:	4601      	mov	r1, r0
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	60ba      	str	r2, [r7, #8]
 80027d6:	b2ca      	uxtb	r2, r1
 80027d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	dbf0      	blt.n	80027ca <_read+0x12>
  }

  return len;
 80027e8:	687b      	ldr	r3, [r7, #4]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e009      	b.n	8002818 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	60ba      	str	r2, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fd4c 	bl	80022aa <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	dbf1      	blt.n	8002804 <_write+0x12>
  }
  return len;
 8002820:	687b      	ldr	r3, [r7, #4]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_close>:

int _close(int file)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002852:	605a      	str	r2, [r3, #4]
  return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_isatty>:

int _isatty(int file)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <_sbrk+0x5c>)
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <_sbrk+0x60>)
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <_sbrk+0x64>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <_sbrk+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d207      	bcs.n	80028d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c4:	f00a fdde 	bl	800d484 <__errno>
 80028c8:	4603      	mov	r3, r0
 80028ca:	220c      	movs	r2, #12
 80028cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20020000 	.word	0x20020000
 80028f4:	00000400 	.word	0x00000400
 80028f8:	2000506c 	.word	0x2000506c
 80028fc:	200094b0 	.word	0x200094b0

08002900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <SystemInit+0x20>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <SystemInit+0x20>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	; 0x38
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002938:	f107 0320 	add.w	r3, r7, #32
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	615a      	str	r2, [r3, #20]
 8002952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002954:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <MX_TIM2_Init+0xe0>)
 8002956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800295a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 800295c:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <MX_TIM2_Init+0xe0>)
 800295e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002962:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <MX_TIM2_Init+0xe0>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <MX_TIM2_Init+0xe0>)
 800296c:	2263      	movs	r2, #99	; 0x63
 800296e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <MX_TIM2_Init+0xe0>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002976:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <MX_TIM2_Init+0xe0>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800297c:	4821      	ldr	r0, [pc, #132]	; (8002a04 <MX_TIM2_Init+0xe0>)
 800297e:	f003 f83f 	bl	8005a00 <HAL_TIM_Base_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002988:	f7ff fd38 	bl	80023fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002996:	4619      	mov	r1, r3
 8002998:	481a      	ldr	r0, [pc, #104]	; (8002a04 <MX_TIM2_Init+0xe0>)
 800299a:	f003 fb7d 	bl	8006098 <HAL_TIM_ConfigClockSource>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80029a4:	f7ff fd2a 	bl	80023fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029a8:	4816      	ldr	r0, [pc, #88]	; (8002a04 <MX_TIM2_Init+0xe0>)
 80029aa:	f003 f951 	bl	8005c50 <HAL_TIM_PWM_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80029b4:	f7ff fd22 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029b8:	2320      	movs	r3, #32
 80029ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c0:	f107 0320 	add.w	r3, r7, #32
 80029c4:	4619      	mov	r1, r3
 80029c6:	480f      	ldr	r0, [pc, #60]	; (8002a04 <MX_TIM2_Init+0xe0>)
 80029c8:	f003 ff40 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80029d2:	f7ff fd13 	bl	80023fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029d6:	2360      	movs	r3, #96	; 0x60
 80029d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	2200      	movs	r2, #0
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_TIM2_Init+0xe0>)
 80029ee:	f003 fa91 	bl	8005f14 <HAL_TIM_PWM_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80029f8:	f7ff fd00 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	3738      	adds	r7, #56	; 0x38
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20005070 	.word	0x20005070

08002a08 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0e:	463b      	mov	r3, r7
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <MX_TIM6_Init+0x68>)
 8002a1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a1e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002a22:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a30:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a3a:	f002 ffe1 	bl	8005a00 <HAL_TIM_Base_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a44:	f7ff fcda 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a50:	463b      	mov	r3, r7
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_TIM6_Init+0x64>)
 8002a56:	f003 fef9 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a60:	f7ff fccc 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200050b8 	.word	0x200050b8
 8002a70:	40001000 	.word	0x40001000

08002a74 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b096      	sub	sp, #88	; 0x58
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	615a      	str	r2, [r3, #20]
 8002aa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f00a fc2e 	bl	800d30e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002ab4:	4a3d      	ldr	r2, [pc, #244]	; (8002bac <MX_TIM8_Init+0x138>)
 8002ab6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002aba:	f240 7207 	movw	r2, #1799	; 0x707
 8002abe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002ac8:	f240 120d 	movw	r2, #269	; 0x10d
 8002acc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ada:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ae0:	4831      	ldr	r0, [pc, #196]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002ae2:	f002 ff8d 	bl	8005a00 <HAL_TIM_Base_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002aec:	f7ff fc86 	bl	80023fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002afa:	4619      	mov	r1, r3
 8002afc:	482a      	ldr	r0, [pc, #168]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002afe:	f003 facb 	bl	8006098 <HAL_TIM_ConfigClockSource>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002b08:	f7ff fc78 	bl	80023fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b0c:	4826      	ldr	r0, [pc, #152]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002b0e:	f003 f89f 	bl	8005c50 <HAL_TIM_PWM_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002b18:	f7ff fc70 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b28:	4619      	mov	r1, r3
 8002b2a:	481f      	ldr	r0, [pc, #124]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002b2c:	f003 fe8e 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8002b36:	f7ff fc61 	bl	80023fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3a:	2360      	movs	r3, #96	; 0x60
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b46:	2300      	movs	r3, #0
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4812      	ldr	r0, [pc, #72]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002b60:	f003 f9d8 	bl	8005f14 <HAL_TIM_PWM_ConfigChannel>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002b6a:	f7ff fc47 	bl	80023fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MX_TIM8_Init+0x134>)
 8002b92:	f003 fed7 	bl	8006944 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8002b9c:	f7ff fc2e 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	3758      	adds	r7, #88	; 0x58
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20005100 	.word	0x20005100
 8002bac:	40010400 	.word	0x40010400

08002bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002bde:	e026      	b.n	8002c2e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_TIM_Base_MspInit+0x90>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10e      	bne.n	8002c08 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002bf4:	f043 0310 	orr.w	r3, r3, #16
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
}
 8002c06:	e012      	b.n	8002c2e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <HAL_TIM_Base_MspInit+0x94>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10d      	bne.n	8002c2e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_TIM_Base_MspInit+0x8c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40001000 	.word	0x40001000
 8002c44:	40010400 	.word	0x40010400

08002c48 <startAdcDma>:
 */
static void  sendDataSD(char *file,volatile int16_t * sensor);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void startAdcDma (void){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*)adcDataWrite, BUFFER_SIZE);
 8002c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c50:	4905      	ldr	r1, [pc, #20]	; (8002c68 <startAdcDma+0x20>)
 8002c52:	4806      	ldr	r0, [pc, #24]	; (8002c6c <startAdcDma+0x24>)
 8002c54:	f000 fab0 	bl	80031b8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 8002c58:	4805      	ldr	r0, [pc, #20]	; (8002c70 <startAdcDma+0x28>)
 8002c5a:	f002 ff21 	bl	8005aa0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8002c5e:	4805      	ldr	r0, [pc, #20]	; (8002c74 <startAdcDma+0x2c>)
 8002c60:	f002 ff1e 	bl	8005aa0 <HAL_TIM_Base_Start>
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20005148 	.word	0x20005148
 8002c6c:	20000698 	.word	0x20000698
 8002c70:	200050b8 	.word	0x200050b8
 8002c74:	20005070 	.word	0x20005070

08002c78 <processData>:

void processData(char *sensorFront, char *sensorRear){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <processData+0x38>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f007 fa3a 	bl	800a104 <osSemaphoreWait>
#endif
	sendDataSD(sensorRear,outRearBufPtr);
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <processData+0x3c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	6838      	ldr	r0, [r7, #0]
 8002c98:	f000 f8ce 	bl	8002e38 <sendDataSD>
	sendDataSD(sensorFront,outFrontBufPtr);
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <processData+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8c8 	bl	8002e38 <sendDataSD>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20004c90 	.word	0x20004c90
 8002cb4:	20000008 	.word	0x20000008
 8002cb8:	2000000c 	.word	0x2000000c

08002cbc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 8002cc4:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8002cc8:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[0];
 8002cca:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8002ccc:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8002cce:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[0];
 8002cd0:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8002cd2:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8002cd4:	601a      	str	r2, [r3, #0]
		for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n+=2){
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e028      	b.n	8002d2e <HAL_ADC_ConvHalfCpltCallback+0x72>
		outRearBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n], REAR_SENSOR_TRAVEL);
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	18d0      	adds	r0, r2, r3
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	0fd9      	lsrs	r1, r3, #31
 8002cee:	440b      	add	r3, r1
 8002cf0:	105b      	asrs	r3, r3, #1
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	18d4      	adds	r4, r2, r3
 8002cf6:	217d      	movs	r1, #125	; 0x7d
 8002cf8:	f000 f888 	bl	8002e0c <convertAdcToTravel>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	8023      	strh	r3, [r4, #0]
		outFrontBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n + 1], FRONT_SENSOR_TRAVEL);
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	18d0      	adds	r0, r2, r3
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	0fd9      	lsrs	r1, r3, #31
 8002d14:	440b      	add	r3, r1
 8002d16:	105b      	asrs	r3, r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	18d4      	adds	r4, r2, r3
 8002d1c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d20:	f000 f874 	bl	8002e0c <convertAdcToTravel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	8023      	strh	r3, [r4, #0]
		for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n+=2){
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b7e      	cmp	r3, #126	; 0x7e
 8002d32:	d9d3      	bls.n	8002cdc <HAL_ADC_ConvHalfCpltCallback+0x20>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f007 fa31 	bl	800a1a0 <osSemaphoreRelease>
#endif
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20005548 	.word	0x20005548
 8002d4c:	20005148 	.word	0x20005148
 8002d50:	20000008 	.word	0x20000008
 8002d54:	20005348 	.word	0x20005348
 8002d58:	2000000c 	.word	0x2000000c
 8002d5c:	20005448 	.word	0x20005448
 8002d60:	20004c90 	.word	0x20004c90

08002d64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	previousTime = time_end;
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
	sample_time = ((time_end - previousTime)/2)/(float)(BUFFER_SIZE/2);
	printf("semFullTime: %f\n", sample_time);
#endif
	inBufPtr = &adcDataWrite[BUFFER_SIZE/2];
 8002d6c:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002d6e:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_ADC_ConvCpltCallback+0x90>)
 8002d70:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[BUFFER_SIZE/4];
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_ADC_ConvCpltCallback+0x94>)
 8002d74:	4a21      	ldr	r2, [pc, #132]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x98>)
 8002d76:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[BUFFER_SIZE/4];
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002d7a:	4a22      	ldr	r2, [pc, #136]	; (8002e04 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002d7c:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n+=2){
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e028      	b.n	8002dd6 <HAL_ADC_ConvCpltCallback+0x72>
		outRearBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n], REAR_SENSOR_TRAVEL);
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	18d0      	adds	r0, r2, r3
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <HAL_ADC_ConvCpltCallback+0x94>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	0fd9      	lsrs	r1, r3, #31
 8002d96:	440b      	add	r3, r1
 8002d98:	105b      	asrs	r3, r3, #1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	18d4      	adds	r4, r2, r3
 8002d9e:	217d      	movs	r1, #125	; 0x7d
 8002da0:	f000 f834 	bl	8002e0c <convertAdcToTravel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	8023      	strh	r3, [r4, #0]
		outFrontBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n + 1], FRONT_SENSOR_TRAVEL);
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3301      	adds	r3, #1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	18d0      	adds	r0, r2, r3
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	0fd9      	lsrs	r1, r3, #31
 8002dbc:	440b      	add	r3, r1
 8002dbe:	105b      	asrs	r3, r3, #1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	18d4      	adds	r4, r2, r3
 8002dc4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002dc8:	f000 f820 	bl	8002e0c <convertAdcToTravel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	8023      	strh	r3, [r4, #0]
	for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n+=2){
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b7e      	cmp	r3, #126	; 0x7e
 8002dda:	d9d3      	bls.n	8002d84 <HAL_ADC_ConvCpltCallback+0x20>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f007 f9dd 	bl	800a1a0 <osSemaphoreRelease>
#endif
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20005548 	.word	0x20005548
 8002df4:	20005248 	.word	0x20005248
 8002df8:	20000008 	.word	0x20000008
 8002dfc:	200053c8 	.word	0x200053c8
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	200054c8 	.word	0x200054c8
 8002e08:	20004c90 	.word	0x20004c90

08002e0c <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite, int16_t sensorTravel){
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite*sensorTravel/ADC_RESOLUTION);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	0b1b      	lsrs	r3, r3, #12
 8002e2a:	b21b      	sxth	r3, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <sendDataSD>:

static void sendDataSD(char *file,volatile int16_t * sensor){
 8002e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e3c:	b0c8      	sub	sp, #288	; 0x120
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e48:	6018      	str	r0, [r3, #0]
 8002e4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e52:	6019      	str	r1, [r3, #0]
 8002e54:	466b      	mov	r3, sp
 8002e56:	469a      	mov	sl, r3
	char buffer[BUFFER_SIZE+1];
	memset(buffer,0,BUFFER_SIZE+1);
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	f240 1201 	movw	r2, #257	; 0x101
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f00a fa53 	bl	800d30e <memset>
	int i;
	for (i = 0; i < (BUFFER_SIZE)/4; i++){
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e6e:	e01c      	b.n	8002eaa <sendDataSD+0x72>
		sprintf(buffer + strlen(buffer), "%d ", sensor[i]);
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fa2b 	bl	80002d0 <strlen>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	f107 030c 	add.w	r3, r7, #12
 8002e80:	1898      	adds	r0, r3, r2
 8002e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002e8c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4934      	ldr	r1, [pc, #208]	; (8002f6c <sendDataSD+0x134>)
 8002e9c:	f00a f9d4 	bl	800d248 <siprintf>
	for (i = 0; i < (BUFFER_SIZE)/4; i++){
 8002ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002eae:	2b3f      	cmp	r3, #63	; 0x3f
 8002eb0:	d9de      	bls.n	8002e70 <sendDataSD+0x38>
	}
	size_t size = strlen(buffer)+1;
 8002eb2:	f107 030c 	add.w	r3, r7, #12
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fa0a 	bl	80002d0 <strlen>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	char newBuff[size];
 8002ec4:	f8d7 6118 	ldr.w	r6, [r7, #280]	; 0x118
 8002ec8:	4633      	mov	r3, r6
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	46b0      	mov	r8, r6
 8002ed4:	4699      	mov	r9, r3
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eea:	2300      	movs	r3, #0
 8002eec:	4634      	mov	r4, r6
 8002eee:	461d      	mov	r5, r3
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	00eb      	lsls	r3, r5, #3
 8002efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efe:	00e2      	lsls	r2, r4, #3
 8002f00:	1df3      	adds	r3, r6, #7
 8002f02:	08db      	lsrs	r3, r3, #3
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	ebad 0d03 	sub.w	sp, sp, r3
 8002f0a:	466b      	mov	r3, sp
 8002f0c:	3300      	adds	r3, #0
 8002f0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	memset(newBuff,0,size);
 8002f12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f16:	2100      	movs	r1, #0
 8002f18:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002f1c:	f00a f9f7 	bl	800d30e <memset>
	strncpy(newBuff, buffer,sizeof(newBuff));
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4632      	mov	r2, r6
 8002f26:	4619      	mov	r1, r3
 8002f28:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002f2c:	f00a f9f7 	bl	800d31e <strncpy>
	newBuff[size] = '\0';
 8002f30:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002f34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002f38:	4413      	add	r3, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
	Mount_SD("/");
 8002f3e:	480c      	ldr	r0, [pc, #48]	; (8002f70 <sendDataSD+0x138>)
 8002f40:	f7fd fff6 	bl	8000f30 <Mount_SD>
	Update_File(file, newBuff);
 8002f44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f4c:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	f7fe f92f 	bl	80011b4 <Update_File>
	Unmount_SD("/");
 8002f56:	4806      	ldr	r0, [pc, #24]	; (8002f70 <sendDataSD+0x138>)
 8002f58:	f7fe f80e 	bl	8000f78 <Unmount_SD>
 8002f5c:	46d5      	mov	sp, sl
}
 8002f5e:	bf00      	nop
 8002f60:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002f64:	46bd      	mov	sp, r7
 8002f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f6a:	bf00      	nop
 8002f6c:	0800faa8 	.word	0x0800faa8
 8002f70:	0800faac 	.word	0x0800faac

08002f74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <MX_USART2_UART_Init+0x50>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fac:	f003 fd30 	bl	8006a10 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fb6:	f7ff fa21 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000554c 	.word	0x2000554c
 8002fc4:	40004400 	.word	0x40004400

08002fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_UART_MspInit+0x84>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12b      	bne.n	8003042 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	4b18      	ldr	r3, [pc, #96]	; (8003050 <HAL_UART_MspInit+0x88>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_UART_MspInit+0x88>)
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <HAL_UART_MspInit+0x88>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_UART_MspInit+0x88>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a10      	ldr	r2, [pc, #64]	; (8003050 <HAL_UART_MspInit+0x88>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <HAL_UART_MspInit+0x88>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003022:	230c      	movs	r3, #12
 8003024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003026:	2302      	movs	r3, #2
 8003028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302e:	2303      	movs	r3, #3
 8003030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003032:	2307      	movs	r3, #7
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	4805      	ldr	r0, [pc, #20]	; (8003054 <HAL_UART_MspInit+0x8c>)
 800303e:	f001 f8d7 	bl	80041f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003042:	bf00      	nop
 8003044:	3728      	adds	r7, #40	; 0x28
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40004400 	.word	0x40004400
 8003050:	40023800 	.word	0x40023800
 8003054:	40020000 	.word	0x40020000

08003058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800305c:	480d      	ldr	r0, [pc, #52]	; (8003094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800305e:	490e      	ldr	r1, [pc, #56]	; (8003098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800306c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003072:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003074:	4c0b      	ldr	r4, [pc, #44]	; (80030a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003082:	f7ff fc3d 	bl	8002900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003086:	f00a fa03 	bl	800d490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800308a:	f7ff f91b 	bl	80022c4 <main>
  bx  lr    
 800308e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003098:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800309c:	0800ff1c 	.word	0x0800ff1c
  ldr r2, =_sbss
 80030a0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80030a4:	200094b0 	.word	0x200094b0

080030a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a8:	e7fe      	b.n	80030a8 <ADC_IRQHandler>
	...

080030ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <HAL_Init+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <HAL_Init+0x40>)
 80030b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_Init+0x40>)
 80030c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_Init+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a07      	ldr	r2, [pc, #28]	; (80030ec <HAL_Init+0x40>)
 80030ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d4:	2003      	movs	r0, #3
 80030d6:	f000 fce6 	bl	8003aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030da:	200f      	movs	r0, #15
 80030dc:	f7ff fa6e 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e0:	f7ff fa40 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023c00 	.word	0x40023c00

080030f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_IncTick+0x20>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x24>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_IncTick+0x24>)
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000014 	.word	0x20000014
 8003114:	20005590 	.word	0x20005590

08003118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return uwTick;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <HAL_GetTick+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20005590 	.word	0x20005590

08003130 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e033      	b.n	80031ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe f98e 	bl	8001470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d118      	bne.n	80031a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003176:	f023 0302 	bic.w	r3, r3, #2
 800317a:	f043 0202 	orr.w	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa64 	bl	8003650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
 800319e:	e001      	b.n	80031a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Start_DMA+0x1e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0e9      	b.n	80033aa <HAL_ADC_Start_DMA+0x1f2>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d018      	beq.n	800321e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031fc:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_ADC_Start_DMA+0x1fc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6d      	ldr	r2, [pc, #436]	; (80033b8 <HAL_ADC_Start_DMA+0x200>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0c9a      	lsrs	r2, r3, #18
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003210:	e002      	b.n	8003218 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	3b01      	subs	r3, #1
 8003216:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f9      	bne.n	8003212 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322c:	d107      	bne.n	800323e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800323c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	f040 80a1 	bne.w	8003390 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003278:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328c:	d106      	bne.n	800329c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f023 0206 	bic.w	r2, r3, #6
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
 800329a:	e002      	b.n	80032a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032aa:	4b44      	ldr	r3, [pc, #272]	; (80033bc <HAL_ADC_Start_DMA+0x204>)
 80032ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	4a43      	ldr	r2, [pc, #268]	; (80033c0 <HAL_ADC_Start_DMA+0x208>)
 80032b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	4a42      	ldr	r2, [pc, #264]	; (80033c4 <HAL_ADC_Start_DMA+0x20c>)
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <HAL_ADC_Start_DMA+0x210>)
 80032c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	334c      	adds	r3, #76	; 0x4c
 80032fa:	4619      	mov	r1, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f000 fcb4 	bl	8003c6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2b00      	cmp	r3, #0
 800330e:	d12a      	bne.n	8003366 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2d      	ldr	r2, [pc, #180]	; (80033cc <HAL_ADC_Start_DMA+0x214>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d015      	beq.n	8003346 <HAL_ADC_Start_DMA+0x18e>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <HAL_ADC_Start_DMA+0x218>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d105      	bne.n	8003330 <HAL_ADC_Start_DMA+0x178>
 8003324:	4b25      	ldr	r3, [pc, #148]	; (80033bc <HAL_ADC_Start_DMA+0x204>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <HAL_ADC_Start_DMA+0x21c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d136      	bne.n	80033a8 <HAL_ADC_Start_DMA+0x1f0>
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_ADC_Start_DMA+0x204>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d130      	bne.n	80033a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d129      	bne.n	80033a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	e020      	b.n	80033a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_ADC_Start_DMA+0x214>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d11b      	bne.n	80033a8 <HAL_ADC_Start_DMA+0x1f0>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d114      	bne.n	80033a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800338c:	609a      	str	r2, [r3, #8]
 800338e:	e00b      	b.n	80033a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f043 0210 	orr.w	r2, r3, #16
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	f043 0201 	orr.w	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000004 	.word	0x20000004
 80033b8:	431bde83 	.word	0x431bde83
 80033bc:	40012300 	.word	0x40012300
 80033c0:	08003849 	.word	0x08003849
 80033c4:	08003903 	.word	0x08003903
 80033c8:	0800391f 	.word	0x0800391f
 80033cc:	40012000 	.word	0x40012000
 80033d0:	40012100 	.word	0x40012100
 80033d4:	40012200 	.word	0x40012200

080033d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1c>
 8003404:	2302      	movs	r3, #2
 8003406:	e113      	b.n	8003630 <HAL_ADC_ConfigChannel+0x244>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b09      	cmp	r3, #9
 8003416:	d925      	bls.n	8003464 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68d9      	ldr	r1, [r3, #12]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	3b1e      	subs	r3, #30
 800342e:	2207      	movs	r2, #7
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43da      	mvns	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	400a      	ands	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68d9      	ldr	r1, [r3, #12]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	4618      	mov	r0, r3
 8003450:	4603      	mov	r3, r0
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4403      	add	r3, r0
 8003456:	3b1e      	subs	r3, #30
 8003458:	409a      	lsls	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	e022      	b.n	80034aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6919      	ldr	r1, [r3, #16]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	2207      	movs	r2, #7
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	400a      	ands	r2, r1
 8003486:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6919      	ldr	r1, [r3, #16]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	4618      	mov	r0, r3
 800349a:	4603      	mov	r3, r0
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4403      	add	r3, r0
 80034a0:	409a      	lsls	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d824      	bhi.n	80034fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b05      	subs	r3, #5
 80034c4:	221f      	movs	r2, #31
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	400a      	ands	r2, r1
 80034d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b05      	subs	r3, #5
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34
 80034fa:	e04c      	b.n	8003596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b0c      	cmp	r3, #12
 8003502:	d824      	bhi.n	800354e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	3b23      	subs	r3, #35	; 0x23
 8003516:	221f      	movs	r2, #31
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43da      	mvns	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	400a      	ands	r2, r1
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	4618      	mov	r0, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	3b23      	subs	r3, #35	; 0x23
 8003540:	fa00 f203 	lsl.w	r2, r0, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
 800354c:	e023      	b.n	8003596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b41      	subs	r3, #65	; 0x41
 8003560:	221f      	movs	r2, #31
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	400a      	ands	r2, r1
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	4618      	mov	r0, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	3b41      	subs	r3, #65	; 0x41
 800358a:	fa00 f203 	lsl.w	r2, r0, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_ADC_ConfigChannel+0x250>)
 8003598:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_ADC_ConfigChannel+0x254>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10f      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x1d8>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b12      	cmp	r3, #18
 80035aa:	d10b      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <HAL_ADC_ConfigChannel+0x254>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d12b      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x23a>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_ADC_ConfigChannel+0x258>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <HAL_ADC_ConfigChannel+0x1f4>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b11      	cmp	r3, #17
 80035de:	d122      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_ADC_ConfigChannel+0x258>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d111      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_ADC_ConfigChannel+0x25c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a11      	ldr	r2, [pc, #68]	; (800364c <HAL_ADC_ConfigChannel+0x260>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	0c9a      	lsrs	r2, r3, #18
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003618:	e002      	b.n	8003620 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3b01      	subs	r3, #1
 800361e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f9      	bne.n	800361a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40012300 	.word	0x40012300
 8003640:	40012000 	.word	0x40012000
 8003644:	10000012 	.word	0x10000012
 8003648:	20000004 	.word	0x20000004
 800364c:	431bde83 	.word	0x431bde83

08003650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003658:	4b79      	ldr	r3, [pc, #484]	; (8003840 <ADC_Init+0x1f0>)
 800365a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6899      	ldr	r1, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	4a58      	ldr	r2, [pc, #352]	; (8003844 <ADC_Init+0x1f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6899      	ldr	r1, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6899      	ldr	r1, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e00f      	b.n	800374e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800373c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800374c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0202 	bic.w	r2, r2, #2
 800375c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7e1b      	ldrb	r3, [r3, #24]
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800379a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	3b01      	subs	r3, #1
 80037a8:	035a      	lsls	r2, r3, #13
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	e007      	b.n	80037c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	3b01      	subs	r3, #1
 80037e0:	051a      	lsls	r2, r3, #20
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003806:	025a      	lsls	r2, r3, #9
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6899      	ldr	r1, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	029a      	lsls	r2, r3, #10
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40012300 	.word	0x40012300
 8003844:	0f000001 	.word	0x0f000001

08003848 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800385e:	2b00      	cmp	r3, #0
 8003860:	d13c      	bne.n	80038dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d12b      	bne.n	80038d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003880:	2b00      	cmp	r3, #0
 8003882:	d127      	bne.n	80038d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d006      	beq.n	80038a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800389c:	2b00      	cmp	r3, #0
 800389e:	d119      	bne.n	80038d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0220 	bic.w	r2, r2, #32
 80038ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7ff fa45 	bl	8002d64 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038da:	e00e      	b.n	80038fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff fd75 	bl	80033d8 <HAL_ADC_ErrorCallback>
}
 80038ee:	e004      	b.n	80038fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff f9d3 	bl	8002cbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2240      	movs	r2, #64	; 0x40
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f043 0204 	orr.w	r2, r3, #4
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff fd4a 	bl	80033d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <__NVIC_SetPriorityGrouping>:
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <__NVIC_SetPriorityGrouping+0x44>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003968:	4013      	ands	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397e:	4a04      	ldr	r2, [pc, #16]	; (8003990 <__NVIC_SetPriorityGrouping+0x44>)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	60d3      	str	r3, [r2, #12]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <__NVIC_GetPriorityGrouping>:
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <__NVIC_GetPriorityGrouping+0x18>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	f003 0307 	and.w	r3, r3, #7
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <__NVIC_EnableIRQ>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	db0b      	blt.n	80039da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	4907      	ldr	r1, [pc, #28]	; (80039e8 <__NVIC_EnableIRQ+0x38>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2001      	movs	r0, #1
 80039d2:	fa00 f202 	lsl.w	r2, r0, r2
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000e100 	.word	0xe000e100

080039ec <__NVIC_SetPriority>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db0a      	blt.n	8003a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	490c      	ldr	r1, [pc, #48]	; (8003a38 <__NVIC_SetPriority+0x4c>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	0112      	lsls	r2, r2, #4
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a14:	e00a      	b.n	8003a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4908      	ldr	r1, [pc, #32]	; (8003a3c <__NVIC_SetPriority+0x50>)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3b04      	subs	r3, #4
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	440b      	add	r3, r1
 8003a2a:	761a      	strb	r2, [r3, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <NVIC_EncodePriority>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f1c3 0307 	rsb	r3, r3, #7
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf28      	it	cs
 8003a5e:	2304      	movcs	r3, #4
 8003a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d902      	bls.n	8003a70 <NVIC_EncodePriority+0x30>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3b03      	subs	r3, #3
 8003a6e:	e000      	b.n	8003a72 <NVIC_EncodePriority+0x32>
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	401a      	ands	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a88:	f04f 31ff 	mov.w	r1, #4294967295
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43d9      	mvns	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	4313      	orrs	r3, r2
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	; 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ff4c 	bl	800394c <__NVIC_SetPriorityGrouping>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ace:	f7ff ff61 	bl	8003994 <__NVIC_GetPriorityGrouping>
 8003ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f7ff ffb1 	bl	8003a40 <NVIC_EncodePriority>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ff80 	bl	80039ec <__NVIC_SetPriority>
}
 8003aec:	bf00      	nop
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ff54 	bl	80039b0 <__NVIC_EnableIRQ>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff fafc 	bl	8003118 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e099      	b.n	8003c60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4c:	e00f      	b.n	8003b6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b4e:	f7ff fae3 	bl	8003118 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b05      	cmp	r3, #5
 8003b5a:	d908      	bls.n	8003b6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2203      	movs	r2, #3
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e078      	b.n	8003c60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e8      	bne.n	8003b4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <HAL_DMA_Init+0x158>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d107      	bne.n	8003bd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0307 	bic.w	r3, r3, #7
 8003bee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d117      	bne.n	8003c32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00e      	beq.n	8003c32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fa6f 	bl	80040f8 <DMA_CheckFifoParam>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2240      	movs	r2, #64	; 0x40
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e016      	b.n	8003c60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fa26 	bl	800408c <DMA_CalcBaseAndBitshift>
 8003c40:	4603      	mov	r3, r0
 8003c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	223f      	movs	r2, #63	; 0x3f
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	f010803f 	.word	0xf010803f

08003c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_DMA_Start_IT+0x26>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e040      	b.n	8003d14 <HAL_DMA_Start_IT+0xa8>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d12f      	bne.n	8003d06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f9b8 	bl	8004030 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	223f      	movs	r2, #63	; 0x3f
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0216 	orr.w	r2, r2, #22
 8003cda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e005      	b.n	8003d12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d28:	4b8e      	ldr	r3, [pc, #568]	; (8003f64 <HAL_DMA_IRQHandler+0x248>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a8e      	ldr	r2, [pc, #568]	; (8003f68 <HAL_DMA_IRQHandler+0x24c>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0a9b      	lsrs	r3, r3, #10
 8003d34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	2208      	movs	r2, #8
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01a      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d013      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0204 	bic.w	r2, r2, #4
 8003d6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	2208      	movs	r2, #8
 8003d76:	409a      	lsls	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f043 0201 	orr.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d012      	beq.n	8003dbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	2201      	movs	r2, #1
 8003dac:	409a      	lsls	r2, r3
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f043 0202 	orr.w	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d012      	beq.n	8003df4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de0:	2204      	movs	r2, #4
 8003de2:	409a      	lsls	r2, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f043 0204 	orr.w	r2, r3, #4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	2210      	movs	r2, #16
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d043      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d03c      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	2210      	movs	r2, #16
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d018      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d024      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
 8003e4a:	e01f      	b.n	8003e8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01b      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
 8003e5c:	e016      	b.n	8003e8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0208 	bic.w	r2, r2, #8
 8003e7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	2220      	movs	r2, #32
 8003e92:	409a      	lsls	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 808f 	beq.w	8003fbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8087 	beq.w	8003fbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d136      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0216 	bic.w	r2, r2, #22
 8003ed4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d103      	bne.n	8003ef6 <HAL_DMA_IRQHandler+0x1da>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0208 	bic.w	r2, r2, #8
 8003f04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	223f      	movs	r2, #63	; 0x3f
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d07e      	beq.n	8004028 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
        }
        return;
 8003f32:	e079      	b.n	8004028 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01d      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10d      	bne.n	8003f6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d031      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
 8003f60:	e02c      	b.n	8003fbc <HAL_DMA_IRQHandler+0x2a0>
 8003f62:	bf00      	nop
 8003f64:	20000004 	.word	0x20000004
 8003f68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d023      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
 8003f7c:	e01e      	b.n	8003fbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0210 	bic.w	r2, r2, #16
 8003f9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d032      	beq.n	800402a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d022      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d307      	bcc.n	8004004 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f2      	bne.n	8003fe8 <HAL_DMA_IRQHandler+0x2cc>
 8004002:	e000      	b.n	8004006 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004004:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
 8004026:	e000      	b.n	800402a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004028:	bf00      	nop
    }
  }
}
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800404c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d108      	bne.n	8004070 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800406e:	e007      	b.n	8004080 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	3b10      	subs	r3, #16
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <DMA_CalcBaseAndBitshift+0x64>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <DMA_CalcBaseAndBitshift+0x68>)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d909      	bls.n	80040ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040c2:	f023 0303 	bic.w	r3, r3, #3
 80040c6:	1d1a      	adds	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	659a      	str	r2, [r3, #88]	; 0x58
 80040cc:	e007      	b.n	80040de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	aaaaaaab 	.word	0xaaaaaaab
 80040f4:	0800fb14 	.word	0x0800fb14

080040f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11f      	bne.n	8004152 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d856      	bhi.n	80041c6 <DMA_CheckFifoParam+0xce>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <DMA_CheckFifoParam+0x28>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004131 	.word	0x08004131
 8004124:	08004143 	.word	0x08004143
 8004128:	08004131 	.word	0x08004131
 800412c:	080041c7 	.word	0x080041c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d046      	beq.n	80041ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004140:	e043      	b.n	80041ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800414a:	d140      	bne.n	80041ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004150:	e03d      	b.n	80041ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415a:	d121      	bne.n	80041a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d837      	bhi.n	80041d2 <DMA_CheckFifoParam+0xda>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <DMA_CheckFifoParam+0x70>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	08004179 	.word	0x08004179
 800416c:	0800417f 	.word	0x0800417f
 8004170:	08004179 	.word	0x08004179
 8004174:	08004191 	.word	0x08004191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      break;
 800417c:	e030      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d025      	beq.n	80041d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418e:	e022      	b.n	80041d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004198:	d11f      	bne.n	80041da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800419e:	e01c      	b.n	80041da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d903      	bls.n	80041ae <DMA_CheckFifoParam+0xb6>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d003      	beq.n	80041b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041ac:	e018      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      break;
 80041b2:	e015      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	e00b      	b.n	80041de <DMA_CheckFifoParam+0xe6>
      break;
 80041c6:	bf00      	nop
 80041c8:	e00a      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e008      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e006      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e004      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041de:	bf00      	nop
    }
  } 
  
  return status; 
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop

080041f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	; 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	e165      	b.n	80044d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800420c:	2201      	movs	r2, #1
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	429a      	cmp	r2, r3
 8004226:	f040 8154 	bne.w	80044d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d005      	beq.n	8004242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800423e:	2b02      	cmp	r3, #2
 8004240:	d130      	bne.n	80042a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004278:	2201      	movs	r2, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 0201 	and.w	r2, r3, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d017      	beq.n	80042e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	2203      	movs	r2, #3
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d123      	bne.n	8004334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	08da      	lsrs	r2, r3, #3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3208      	adds	r2, #8
 80042f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	220f      	movs	r2, #15
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	08da      	lsrs	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3208      	adds	r2, #8
 800432e:	69b9      	ldr	r1, [r7, #24]
 8004330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 0203 	and.w	r2, r3, #3
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80ae 	beq.w	80044d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	4b5d      	ldr	r3, [pc, #372]	; (80044f0 <HAL_GPIO_Init+0x300>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	4a5c      	ldr	r2, [pc, #368]	; (80044f0 <HAL_GPIO_Init+0x300>)
 8004380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004384:	6453      	str	r3, [r2, #68]	; 0x44
 8004386:	4b5a      	ldr	r3, [pc, #360]	; (80044f0 <HAL_GPIO_Init+0x300>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004392:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <HAL_GPIO_Init+0x304>)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	089b      	lsrs	r3, r3, #2
 8004398:	3302      	adds	r3, #2
 800439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	220f      	movs	r2, #15
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4f      	ldr	r2, [pc, #316]	; (80044f8 <HAL_GPIO_Init+0x308>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d025      	beq.n	800440a <HAL_GPIO_Init+0x21a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4e      	ldr	r2, [pc, #312]	; (80044fc <HAL_GPIO_Init+0x30c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01f      	beq.n	8004406 <HAL_GPIO_Init+0x216>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4d      	ldr	r2, [pc, #308]	; (8004500 <HAL_GPIO_Init+0x310>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d019      	beq.n	8004402 <HAL_GPIO_Init+0x212>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4c      	ldr	r2, [pc, #304]	; (8004504 <HAL_GPIO_Init+0x314>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_GPIO_Init+0x20e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a4b      	ldr	r2, [pc, #300]	; (8004508 <HAL_GPIO_Init+0x318>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00d      	beq.n	80043fa <HAL_GPIO_Init+0x20a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a4a      	ldr	r2, [pc, #296]	; (800450c <HAL_GPIO_Init+0x31c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <HAL_GPIO_Init+0x206>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a49      	ldr	r2, [pc, #292]	; (8004510 <HAL_GPIO_Init+0x320>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_GPIO_Init+0x202>
 80043ee:	2306      	movs	r3, #6
 80043f0:	e00c      	b.n	800440c <HAL_GPIO_Init+0x21c>
 80043f2:	2307      	movs	r3, #7
 80043f4:	e00a      	b.n	800440c <HAL_GPIO_Init+0x21c>
 80043f6:	2305      	movs	r3, #5
 80043f8:	e008      	b.n	800440c <HAL_GPIO_Init+0x21c>
 80043fa:	2304      	movs	r3, #4
 80043fc:	e006      	b.n	800440c <HAL_GPIO_Init+0x21c>
 80043fe:	2303      	movs	r3, #3
 8004400:	e004      	b.n	800440c <HAL_GPIO_Init+0x21c>
 8004402:	2302      	movs	r3, #2
 8004404:	e002      	b.n	800440c <HAL_GPIO_Init+0x21c>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_GPIO_Init+0x21c>
 800440a:	2300      	movs	r3, #0
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	f002 0203 	and.w	r2, r2, #3
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	4093      	lsls	r3, r2
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800441c:	4935      	ldr	r1, [pc, #212]	; (80044f4 <HAL_GPIO_Init+0x304>)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	3302      	adds	r3, #2
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800442a:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <HAL_GPIO_Init+0x324>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800444e:	4a31      	ldr	r2, [pc, #196]	; (8004514 <HAL_GPIO_Init+0x324>)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004454:	4b2f      	ldr	r3, [pc, #188]	; (8004514 <HAL_GPIO_Init+0x324>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004478:	4a26      	ldr	r2, [pc, #152]	; (8004514 <HAL_GPIO_Init+0x324>)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800447e:	4b25      	ldr	r3, [pc, #148]	; (8004514 <HAL_GPIO_Init+0x324>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_GPIO_Init+0x324>)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_GPIO_Init+0x324>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044cc:	4a11      	ldr	r2, [pc, #68]	; (8004514 <HAL_GPIO_Init+0x324>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	f67f ae96 	bls.w	800420c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40020000 	.word	0x40020000
 80044fc:	40020400 	.word	0x40020400
 8004500:	40020800 	.word	0x40020800
 8004504:	40020c00 	.word	0x40020c00
 8004508:	40021000 	.word	0x40021000
 800450c:	40021400 	.word	0x40021400
 8004510:	40021800 	.word	0x40021800
 8004514:	40013c00 	.word	0x40013c00

08004518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	807b      	strh	r3, [r7, #2]
 8004524:	4613      	mov	r3, r2
 8004526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004528:	787b      	ldrb	r3, [r7, #1]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800452e:	887a      	ldrh	r2, [r7, #2]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004534:	e003      	b.n	800453e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	041a      	lsls	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	619a      	str	r2, [r3, #24]
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0cc      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004560:	4b68      	ldr	r3, [pc, #416]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d90c      	bls.n	8004588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b65      	ldr	r3, [pc, #404]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b63      	ldr	r3, [pc, #396]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0b8      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d020      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045a0:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a58      	ldr	r2, [pc, #352]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c4:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	494d      	ldr	r1, [pc, #308]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d044      	beq.n	800466c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d119      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e07f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d003      	beq.n	800460a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004606:	2b03      	cmp	r3, #3
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460a:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e06f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e067      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4934      	ldr	r1, [pc, #208]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800463c:	f7fe fd6c 	bl	8003118 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	e00a      	b.n	800465a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004644:	f7fe fd68 	bl	8003118 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e04f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 020c 	and.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	429a      	cmp	r2, r3
 800466a:	d1eb      	bne.n	8004644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d20c      	bcs.n	8004694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e032      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a0:	4b19      	ldr	r3, [pc, #100]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4916      	ldr	r1, [pc, #88]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	490e      	ldr	r1, [pc, #56]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046d2:	f000 f887 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80046d6:	4602      	mov	r2, r0
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	490a      	ldr	r1, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x1c0>)
 80046e4:	5ccb      	ldrb	r3, [r1, r3]
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fd ff62 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023c00 	.word	0x40023c00
 8004708:	40023800 	.word	0x40023800
 800470c:	0800fafc 	.word	0x0800fafc
 8004710:	20000004 	.word	0x20000004
 8004714:	20000010 	.word	0x20000010

08004718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <HAL_RCC_GetHCLKFreq+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000004 	.word	0x20000004

08004730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004734:	f7ff fff0 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0a9b      	lsrs	r3, r3, #10
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	0800fb0c 	.word	0x0800fb0c

08004758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800475c:	f7ff ffdc 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	0b5b      	lsrs	r3, r3, #13
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4903      	ldr	r1, [pc, #12]	; (800477c <HAL_RCC_GetPCLK2Freq+0x24>)
 800476e:	5ccb      	ldrb	r3, [r1, r3]
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40023800 	.word	0x40023800
 800477c:	0800fb0c 	.word	0x0800fb0c

08004780 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	220f      	movs	r2, #15
 800478e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0203 	and.w	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCC_GetClockConfig+0x5c>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	08db      	lsrs	r3, r3, #3
 80047ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <HAL_RCC_GetClockConfig+0x60>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	601a      	str	r2, [r3, #0]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40023c00 	.word	0x40023c00

080047e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e8:	b0ae      	sub	sp, #184	; 0xb8
 80047ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480a:	4bcb      	ldr	r3, [pc, #812]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b0c      	cmp	r3, #12
 8004814:	f200 8206 	bhi.w	8004c24 <HAL_RCC_GetSysClockFreq+0x440>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_RCC_GetSysClockFreq+0x3c>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004855 	.word	0x08004855
 8004824:	08004c25 	.word	0x08004c25
 8004828:	08004c25 	.word	0x08004c25
 800482c:	08004c25 	.word	0x08004c25
 8004830:	0800485d 	.word	0x0800485d
 8004834:	08004c25 	.word	0x08004c25
 8004838:	08004c25 	.word	0x08004c25
 800483c:	08004c25 	.word	0x08004c25
 8004840:	08004865 	.word	0x08004865
 8004844:	08004c25 	.word	0x08004c25
 8004848:	08004c25 	.word	0x08004c25
 800484c:	08004c25 	.word	0x08004c25
 8004850:	08004a55 	.word	0x08004a55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4bb9      	ldr	r3, [pc, #740]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x358>)
 8004856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800485a:	e1e7      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485c:	4bb8      	ldr	r3, [pc, #736]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800485e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004862:	e1e3      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004864:	4bb4      	ldr	r3, [pc, #720]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800486c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004870:	4bb1      	ldr	r3, [pc, #708]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d071      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487c:	4bae      	ldr	r3, [pc, #696]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004888:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800488c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800489e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	f04f 0000 	mov.w	r0, #0
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	0159      	lsls	r1, r3, #5
 80048b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b4:	0150      	lsls	r0, r2, #5
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4621      	mov	r1, r4
 80048bc:	1a51      	subs	r1, r2, r1
 80048be:	6439      	str	r1, [r7, #64]	; 0x40
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb63 0301 	sbc.w	r3, r3, r1
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80048d4:	4649      	mov	r1, r9
 80048d6:	018b      	lsls	r3, r1, #6
 80048d8:	4641      	mov	r1, r8
 80048da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048de:	4641      	mov	r1, r8
 80048e0:	018a      	lsls	r2, r1, #6
 80048e2:	4641      	mov	r1, r8
 80048e4:	1a51      	subs	r1, r2, r1
 80048e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048e8:	4649      	mov	r1, r9
 80048ea:	eb63 0301 	sbc.w	r3, r3, r1
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80048fc:	4649      	mov	r1, r9
 80048fe:	00cb      	lsls	r3, r1, #3
 8004900:	4641      	mov	r1, r8
 8004902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004906:	4641      	mov	r1, r8
 8004908:	00ca      	lsls	r2, r1, #3
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	4603      	mov	r3, r0
 8004910:	4622      	mov	r2, r4
 8004912:	189b      	adds	r3, r3, r2
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
 8004916:	462b      	mov	r3, r5
 8004918:	460a      	mov	r2, r1
 800491a:	eb42 0303 	adc.w	r3, r2, r3
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800492c:	4629      	mov	r1, r5
 800492e:	024b      	lsls	r3, r1, #9
 8004930:	4621      	mov	r1, r4
 8004932:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004936:	4621      	mov	r1, r4
 8004938:	024a      	lsls	r2, r1, #9
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004948:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800494c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004950:	f7fc f95a 	bl	8000c08 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800495e:	e067      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004960:	4b75      	ldr	r3, [pc, #468]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800496c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004978:	67bb      	str	r3, [r7, #120]	; 0x78
 800497a:	2300      	movs	r3, #0
 800497c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800497e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004982:	4622      	mov	r2, r4
 8004984:	462b      	mov	r3, r5
 8004986:	f04f 0000 	mov.w	r0, #0
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	0159      	lsls	r1, r3, #5
 8004990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004994:	0150      	lsls	r0, r2, #5
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4621      	mov	r1, r4
 800499c:	1a51      	subs	r1, r2, r1
 800499e:	62b9      	str	r1, [r7, #40]	; 0x28
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb63 0301 	sbc.w	r3, r3, r1
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80049b4:	4649      	mov	r1, r9
 80049b6:	018b      	lsls	r3, r1, #6
 80049b8:	4641      	mov	r1, r8
 80049ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049be:	4641      	mov	r1, r8
 80049c0:	018a      	lsls	r2, r1, #6
 80049c2:	4641      	mov	r1, r8
 80049c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80049c8:	4649      	mov	r1, r9
 80049ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e2:	4692      	mov	sl, r2
 80049e4:	469b      	mov	fp, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	eb1a 0303 	adds.w	r3, sl, r3
 80049ec:	623b      	str	r3, [r7, #32]
 80049ee:	462b      	mov	r3, r5
 80049f0:	eb4b 0303 	adc.w	r3, fp, r3
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a02:	4629      	mov	r1, r5
 8004a04:	028b      	lsls	r3, r1, #10
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	028a      	lsls	r2, r1, #10
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a18:	2200      	movs	r2, #0
 8004a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a1c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004a22:	f7fc f8f1 	bl	8000c08 <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a30:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a52:	e0eb      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a54:	4b38      	ldr	r3, [pc, #224]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d06b      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6c:	4b32      	ldr	r3, [pc, #200]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	099b      	lsrs	r3, r3, #6
 8004a72:	2200      	movs	r2, #0
 8004a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a80:	2300      	movs	r3, #0
 8004a82:	667b      	str	r3, [r7, #100]	; 0x64
 8004a84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a88:	4622      	mov	r2, r4
 8004a8a:	462b      	mov	r3, r5
 8004a8c:	f04f 0000 	mov.w	r0, #0
 8004a90:	f04f 0100 	mov.w	r1, #0
 8004a94:	0159      	lsls	r1, r3, #5
 8004a96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9a:	0150      	lsls	r0, r2, #5
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	1a51      	subs	r1, r2, r1
 8004aa4:	61b9      	str	r1, [r7, #24]
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	eb63 0301 	sbc.w	r3, r3, r1
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004aba:	4659      	mov	r1, fp
 8004abc:	018b      	lsls	r3, r1, #6
 8004abe:	4651      	mov	r1, sl
 8004ac0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	018a      	lsls	r2, r1, #6
 8004ac8:	4651      	mov	r1, sl
 8004aca:	ebb2 0801 	subs.w	r8, r2, r1
 8004ace:	4659      	mov	r1, fp
 8004ad0:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae8:	4690      	mov	r8, r2
 8004aea:	4699      	mov	r9, r3
 8004aec:	4623      	mov	r3, r4
 8004aee:	eb18 0303 	adds.w	r3, r8, r3
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	462b      	mov	r3, r5
 8004af6:	eb49 0303 	adc.w	r3, r9, r3
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b08:	4629      	mov	r1, r5
 8004b0a:	024b      	lsls	r3, r1, #9
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b12:	4621      	mov	r1, r4
 8004b14:	024a      	lsls	r2, r1, #9
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b1e:	2200      	movs	r2, #0
 8004b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004b24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b28:	f7fc f86e 	bl	8000c08 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b36:	e065      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x420>
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b44:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x458>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	4611      	mov	r1, r2
 8004b50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b54:	653b      	str	r3, [r7, #80]	; 0x50
 8004b56:	2300      	movs	r3, #0
 8004b58:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004b5e:	4642      	mov	r2, r8
 8004b60:	464b      	mov	r3, r9
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	0159      	lsls	r1, r3, #5
 8004b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b70:	0150      	lsls	r0, r2, #5
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4641      	mov	r1, r8
 8004b78:	1a51      	subs	r1, r2, r1
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b90:	4659      	mov	r1, fp
 8004b92:	018b      	lsls	r3, r1, #6
 8004b94:	4651      	mov	r1, sl
 8004b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b9a:	4651      	mov	r1, sl
 8004b9c:	018a      	lsls	r2, r1, #6
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	1a54      	subs	r4, r2, r1
 8004ba2:	4659      	mov	r1, fp
 8004ba4:	eb63 0501 	sbc.w	r5, r3, r1
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	00eb      	lsls	r3, r5, #3
 8004bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb6:	00e2      	lsls	r2, r4, #3
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	4643      	mov	r3, r8
 8004bbe:	18e3      	adds	r3, r4, r3
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	eb45 0303 	adc.w	r3, r5, r3
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	028b      	lsls	r3, r1, #10
 8004bda:	4621      	mov	r1, r4
 8004bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be0:	4621      	mov	r1, r4
 8004be2:	028a      	lsls	r2, r1, #10
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bec:	2200      	movs	r2, #0
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004bf2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bf6:	f7fc f807 	bl	8000c08 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4613      	mov	r3, r2
 8004c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c04:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x458>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	0f1b      	lsrs	r3, r3, #28
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c22:	e003      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	37b8      	adds	r7, #184	; 0xb8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400

08004c44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e28d      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8083 	beq.w	8004d6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c64:	4b94      	ldr	r3, [pc, #592]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d019      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c70:	4b91      	ldr	r3, [pc, #580]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c7c:	4b8e      	ldr	r3, [pc, #568]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c88:	d00c      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8a:	4b8b      	ldr	r3, [pc, #556]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d112      	bne.n	8004cbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c96:	4b88      	ldr	r3, [pc, #544]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	4b84      	ldr	r3, [pc, #528]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x124>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d157      	bne.n	8004d68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e25a      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x90>
 8004cc6:	4b7c      	ldr	r3, [pc, #496]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7b      	ldr	r2, [pc, #492]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e01d      	b.n	8004d10 <HAL_RCC_OscConfig+0xcc>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0xb4>
 8004cde:	4b76      	ldr	r3, [pc, #472]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a75      	ldr	r2, [pc, #468]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b73      	ldr	r3, [pc, #460]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a72      	ldr	r2, [pc, #456]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0xcc>
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6e      	ldr	r2, [pc, #440]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6b      	ldr	r2, [pc, #428]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe f9fe 	bl	8003118 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fe f9fa 	bl	8003118 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e21f      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d32:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0xdc>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe f9ea 	bl	8003118 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fe f9e6 	bl	8003118 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e20b      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5a:	4b57      	ldr	r3, [pc, #348]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x104>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d06f      	beq.n	8004e56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d76:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d82:	4b4d      	ldr	r3, [pc, #308]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d8e:	4b4a      	ldr	r3, [pc, #296]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d11c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004da6:	4b44      	ldr	r3, [pc, #272]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d116      	bne.n	8004de0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db2:	4b41      	ldr	r3, [pc, #260]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCC_OscConfig+0x186>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e1d3      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dca:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4937      	ldr	r1, [pc, #220]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	e03a      	b.n	8004e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de8:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <HAL_RCC_OscConfig+0x278>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fe f993 	bl	8003118 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df6:	f7fe f98f 	bl	8003118 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e1b4      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b28      	ldr	r3, [pc, #160]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4925      	ldr	r1, [pc, #148]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]
 8004e28:	e015      	b.n	8004e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_RCC_OscConfig+0x278>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fe f972 	bl	8003118 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fe f96e 	bl	8003118 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e193      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d036      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d016      	beq.n	8004e98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <HAL_RCC_OscConfig+0x27c>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e70:	f7fe f952 	bl	8003118 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e78:	f7fe f94e 	bl	8003118 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e173      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x234>
 8004e96:	e01b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fe f93b 	bl	8003118 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea4:	e00e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea6:	f7fe f937 	bl	8003118 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d907      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e15c      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	42470000 	.word	0x42470000
 8004ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec4:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ea      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8097 	beq.w	800500c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee2:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	4b7f      	ldr	r3, [pc, #508]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	4a7e      	ldr	r2, [pc, #504]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efc:	6413      	str	r3, [r2, #64]	; 0x40
 8004efe:	4b7c      	ldr	r3, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d118      	bne.n	8004f4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1a:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a75      	ldr	r2, [pc, #468]	; (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f26:	f7fe f8f7 	bl	8003118 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2e:	f7fe f8f3 	bl	8003118 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e118      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	4b6c      	ldr	r3, [pc, #432]	; (80050f4 <HAL_RCC_OscConfig+0x4b0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x31e>
 8004f54:	4b66      	ldr	r3, [pc, #408]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a65      	ldr	r2, [pc, #404]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f60:	e01c      	b.n	8004f9c <HAL_RCC_OscConfig+0x358>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x340>
 8004f6a:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a60      	ldr	r2, [pc, #384]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	6713      	str	r3, [r2, #112]	; 0x70
 8004f76:	4b5e      	ldr	r3, [pc, #376]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	4a5d      	ldr	r2, [pc, #372]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	6713      	str	r3, [r2, #112]	; 0x70
 8004f82:	e00b      	b.n	8004f9c <HAL_RCC_OscConfig+0x358>
 8004f84:	4b5a      	ldr	r3, [pc, #360]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	4a59      	ldr	r2, [pc, #356]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f90:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	4a56      	ldr	r2, [pc, #344]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004f96:	f023 0304 	bic.w	r3, r3, #4
 8004f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d015      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fe f8b8 	bl	8003118 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fac:	f7fe f8b4 	bl	8003118 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e0d7      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ee      	beq.n	8004fac <HAL_RCC_OscConfig+0x368>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fe f8a2 	bl	8003118 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fe f89e 	bl	8003118 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0c1      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ee      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d105      	bne.n	800500c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	4a3a      	ldr	r2, [pc, #232]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800500a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80ad 	beq.w	8005170 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005016:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b08      	cmp	r3, #8
 8005020:	d060      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d145      	bne.n	80050b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502a:	4b33      	ldr	r3, [pc, #204]	; (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fe f872 	bl	8003118 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005038:	f7fe f86e 	bl	8003118 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e093      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	4b29      	ldr	r3, [pc, #164]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	019b      	lsls	r3, r3, #6
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	3b01      	subs	r3, #1
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	071b      	lsls	r3, r3, #28
 8005082:	491b      	ldr	r1, [pc, #108]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fe f843 	bl	8003118 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005096:	f7fe f83f 	bl	8003118 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e064      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x452>
 80050b4:	e05c      	b.n	8005170 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCC_OscConfig+0x4b4>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fe f82c 	bl	8003118 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fe f828 	bl	8003118 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e04d      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_RCC_OscConfig+0x4ac>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x480>
 80050e2:	e045      	b.n	8005170 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e040      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40007000 	.word	0x40007000
 80050f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <HAL_RCC_OscConfig+0x538>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d030      	beq.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d129      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d122      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005134:	4293      	cmp	r3, r2
 8005136:	d119      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	3b01      	subs	r3, #1
 8005146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d10f      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d107      	bne.n	800516c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800

08005180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e07b      	b.n	800528a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d108      	bne.n	80051ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d009      	beq.n	80051b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	61da      	str	r2, [r3, #28]
 80051aa:	e005      	b.n	80051b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fd f94e 	bl	8002474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	ea42 0103 	orr.w	r1, r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	f003 0104 	and.w	r1, r3, #4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	f003 0210 	and.w	r2, r3, #16
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005278:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b088      	sub	sp, #32
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	4613      	mov	r3, r2
 80052a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_SPI_Transmit+0x22>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e126      	b.n	8005502 <HAL_SPI_Transmit+0x270>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052bc:	f7fd ff2c 	bl	8003118 <HAL_GetTick>
 80052c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d002      	beq.n	80052d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
 80052d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052d6:	e10b      	b.n	80054f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_SPI_Transmit+0x52>
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052e8:	e102      	b.n	80054f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2203      	movs	r2, #3
 80052ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	88fa      	ldrh	r2, [r7, #6]
 8005302:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005330:	d10f      	bne.n	8005352 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005340:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005350:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d007      	beq.n	8005370 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005378:	d14b      	bne.n	8005412 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_SPI_Transmit+0xf6>
 8005382:	8afb      	ldrh	r3, [r7, #22]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d13e      	bne.n	8005406 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	881a      	ldrh	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	1c9a      	adds	r2, r3, #2
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053ac:	e02b      	b.n	8005406 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d112      	bne.n	80053e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	881a      	ldrh	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	1c9a      	adds	r2, r3, #2
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	86da      	strh	r2, [r3, #54]	; 0x36
 80053e0:	e011      	b.n	8005406 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e2:	f7fd fe99 	bl	8003118 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d803      	bhi.n	80053fa <HAL_SPI_Transmit+0x168>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d102      	bne.n	8005400 <HAL_SPI_Transmit+0x16e>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005404:	e074      	b.n	80054f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1ce      	bne.n	80053ae <HAL_SPI_Transmit+0x11c>
 8005410:	e04c      	b.n	80054ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_SPI_Transmit+0x18e>
 800541a:	8afb      	ldrh	r3, [r7, #22]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d140      	bne.n	80054a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005446:	e02c      	b.n	80054a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d113      	bne.n	800547e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	86da      	strh	r2, [r3, #54]	; 0x36
 800547c:	e011      	b.n	80054a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547e:	f7fd fe4b 	bl	8003118 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d803      	bhi.n	8005496 <HAL_SPI_Transmit+0x204>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d102      	bne.n	800549c <HAL_SPI_Transmit+0x20a>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054a0:	e026      	b.n	80054f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1cd      	bne.n	8005448 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fa63 	bl	800597c <SPI_EndRxTxTransaction>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e000      	b.n	80054f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80054ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005500:	7ffb      	ldrb	r3, [r7, #31]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b08c      	sub	sp, #48	; 0x30
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005518:	2301      	movs	r3, #1
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x26>
 800552c:	2302      	movs	r3, #2
 800552e:	e18a      	b.n	8005846 <HAL_SPI_TransmitReceive+0x33c>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fd fdee 	bl	8003118 <HAL_GetTick>
 800553c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800554e:	887b      	ldrh	r3, [r7, #2]
 8005550:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005556:	2b01      	cmp	r3, #1
 8005558:	d00f      	beq.n	800557a <HAL_SPI_TransmitReceive+0x70>
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005560:	d107      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x68>
 800556a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800556e:	2b04      	cmp	r3, #4
 8005570:	d003      	beq.n	800557a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005572:	2302      	movs	r3, #2
 8005574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005578:	e15b      	b.n	8005832 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_SPI_TransmitReceive+0x82>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_TransmitReceive+0x82>
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005592:	e14e      	b.n	8005832 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b04      	cmp	r3, #4
 800559e:	d003      	beq.n	80055a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2205      	movs	r2, #5
 80055a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	887a      	ldrh	r2, [r7, #2]
 80055b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	887a      	ldrh	r2, [r7, #2]
 80055be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	887a      	ldrh	r2, [r7, #2]
 80055ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	887a      	ldrh	r2, [r7, #2]
 80055d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d007      	beq.n	80055fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005604:	d178      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_SPI_TransmitReceive+0x10a>
 800560e:	8b7b      	ldrh	r3, [r7, #26]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d166      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	881a      	ldrh	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005638:	e053      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	d11b      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x176>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <HAL_SPI_TransmitReceive+0x176>
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d113      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	d119      	bne.n	80056c2 <HAL_SPI_TransmitReceive+0x1b8>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d014      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	b292      	uxth	r2, r2
 80056a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	1c9a      	adds	r2, r3, #2
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056be:	2301      	movs	r3, #1
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056c2:	f7fd fd29 	bl	8003118 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d807      	bhi.n	80056e2 <HAL_SPI_TransmitReceive+0x1d8>
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d003      	beq.n	80056e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056e0:	e0a7      	b.n	8005832 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1a6      	bne.n	800563a <HAL_SPI_TransmitReceive+0x130>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1a1      	bne.n	800563a <HAL_SPI_TransmitReceive+0x130>
 80056f6:	e07c      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_SPI_TransmitReceive+0x1fc>
 8005700:	8b7b      	ldrh	r3, [r7, #26]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d16b      	bne.n	80057de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800572c:	e057      	b.n	80057de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d11c      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x26c>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d017      	beq.n	8005776 <HAL_SPI_TransmitReceive+0x26c>
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d114      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	7812      	ldrb	r2, [r2, #0]
 8005758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d119      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x2ae>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d014      	beq.n	80057b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057b4:	2301      	movs	r3, #1
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057b8:	f7fd fcae 	bl	8003118 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d803      	bhi.n	80057d0 <HAL_SPI_TransmitReceive+0x2c6>
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d102      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x2cc>
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d103      	bne.n	80057de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057dc:	e029      	b.n	8005832 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1a2      	bne.n	800572e <HAL_SPI_TransmitReceive+0x224>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d19d      	bne.n	800572e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f8c0 	bl	800597c <SPI_EndRxTxTransaction>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d006      	beq.n	8005810 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800580e:	e010      	b.n	8005832 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	e000      	b.n	8005832 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005830:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005846:	4618      	mov	r0, r3
 8005848:	3730      	adds	r7, #48	; 0x30
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800585c:	b2db      	uxtb	r3, r3
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	4613      	mov	r3, r2
 800587a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800587c:	f7fd fc4c 	bl	8003118 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	4413      	add	r3, r2
 800588a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800588c:	f7fd fc44 	bl	8003118 <HAL_GetTick>
 8005890:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005892:	4b39      	ldr	r3, [pc, #228]	; (8005978 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	015b      	lsls	r3, r3, #5
 8005898:	0d1b      	lsrs	r3, r3, #20
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	fb02 f303 	mul.w	r3, r2, r3
 80058a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058a2:	e054      	b.n	800594e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d050      	beq.n	800594e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058ac:	f7fd fc34 	bl	8003118 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d902      	bls.n	80058c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d13d      	bne.n	800593e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058da:	d111      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e4:	d004      	beq.n	80058f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ee:	d107      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005908:	d10f      	bne.n	800592a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e017      	b.n	800596e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	3b01      	subs	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	429a      	cmp	r2, r3
 800596a:	d19b      	bne.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000004 	.word	0x20000004

0800597c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005988:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <SPI_EndRxTxTransaction+0x7c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <SPI_EndRxTxTransaction+0x80>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	0d5b      	lsrs	r3, r3, #21
 8005994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a6:	d112      	bne.n	80059ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ff5a 	bl	800586c <SPI_WaitFlagStateUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e00f      	b.n	80059ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d0f2      	beq.n	80059ce <SPI_EndRxTxTransaction+0x52>
 80059e8:	e000      	b.n	80059ec <SPI_EndRxTxTransaction+0x70>
        break;
 80059ea:	bf00      	nop
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000004 	.word	0x20000004
 80059fc:	165e9f81 	.word	0x165e9f81

08005a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e041      	b.n	8005a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd f8c2 	bl	8002bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 fc1a 	bl	8006278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d001      	beq.n	8005ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e046      	b.n	8005b46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a23      	ldr	r2, [pc, #140]	; (8005b54 <HAL_TIM_Base_Start+0xb4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d022      	beq.n	8005b10 <HAL_TIM_Base_Start+0x70>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d01d      	beq.n	8005b10 <HAL_TIM_Base_Start+0x70>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_TIM_Base_Start+0xb8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_TIM_Base_Start+0x70>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_TIM_Base_Start+0xbc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_TIM_Base_Start+0x70>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <HAL_TIM_Base_Start+0xc0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_TIM_Base_Start+0x70>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <HAL_TIM_Base_Start+0xc4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_TIM_Base_Start+0x70>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_TIM_Base_Start+0xc8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_TIM_Base_Start+0x70>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <HAL_TIM_Base_Start+0xcc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d111      	bne.n	8005b34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d010      	beq.n	8005b44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b32:	e007      	b.n	8005b44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40000800 	.word	0x40000800
 8005b60:	40000c00 	.word	0x40000c00
 8005b64:	40010400 	.word	0x40010400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40001800 	.word	0x40001800

08005b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d001      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e04e      	b.n	8005c26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a23      	ldr	r2, [pc, #140]	; (8005c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d022      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x80>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d01d      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x80>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d018      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x80>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1e      	ldr	r2, [pc, #120]	; (8005c3c <HAL_TIM_Base_Start_IT+0xcc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x80>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00e      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x80>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1b      	ldr	r2, [pc, #108]	; (8005c44 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x80>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <HAL_TIM_Base_Start_IT+0xd8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x80>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <HAL_TIM_Base_Start_IT+0xdc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d111      	bne.n	8005c14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b06      	cmp	r3, #6
 8005c00:	d010      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 0201 	orr.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c12:	e007      	b.n	8005c24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40010000 	.word	0x40010000
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40000c00 	.word	0x40000c00
 8005c44:	40010400 	.word	0x40010400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40001800 	.word	0x40001800

08005c50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e041      	b.n	8005ce6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f839 	bl	8005cee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f000 faf2 	bl	8006278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d122      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d11b      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f06f 0202 	mvn.w	r2, #2
 8005d2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fa78 	bl	800623a <HAL_TIM_IC_CaptureCallback>
 8005d4a:	e005      	b.n	8005d58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fa6a 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa7b 	bl	800624e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d122      	bne.n	8005db2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d11b      	bne.n	8005db2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f06f 0204 	mvn.w	r2, #4
 8005d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa4e 	bl	800623a <HAL_TIM_IC_CaptureCallback>
 8005d9e:	e005      	b.n	8005dac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa40 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa51 	bl	800624e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d122      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d11b      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f06f 0208 	mvn.w	r2, #8
 8005dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fa24 	bl	800623a <HAL_TIM_IC_CaptureCallback>
 8005df2:	e005      	b.n	8005e00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa16 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa27 	bl	800624e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d122      	bne.n	8005e5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b10      	cmp	r3, #16
 8005e20:	d11b      	bne.n	8005e5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f06f 0210 	mvn.w	r2, #16
 8005e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2208      	movs	r2, #8
 8005e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9fa 	bl	800623a <HAL_TIM_IC_CaptureCallback>
 8005e46:	e005      	b.n	8005e54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f9ec 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f9fd 	bl	800624e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d10e      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d107      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f06f 0201 	mvn.w	r2, #1
 8005e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fc faa9 	bl	80023d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d10e      	bne.n	8005eb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b80      	cmp	r3, #128	; 0x80
 8005ea0:	d107      	bne.n	8005eb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fda5 	bl	80069fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d10e      	bne.n	8005ede <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d107      	bne.n	8005ede <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f9c2 	bl	8006262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d10e      	bne.n	8005f0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d107      	bne.n	8005f0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f06f 0220 	mvn.w	r2, #32
 8005f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fd6f 	bl	80069e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e0ae      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	f200 809f 	bhi.w	8006080 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08006081 	.word	0x08006081
 8005f50:	08006081 	.word	0x08006081
 8005f54:	08006081 	.word	0x08006081
 8005f58:	08005fbd 	.word	0x08005fbd
 8005f5c:	08006081 	.word	0x08006081
 8005f60:	08006081 	.word	0x08006081
 8005f64:	08006081 	.word	0x08006081
 8005f68:	08005fff 	.word	0x08005fff
 8005f6c:	08006081 	.word	0x08006081
 8005f70:	08006081 	.word	0x08006081
 8005f74:	08006081 	.word	0x08006081
 8005f78:	0800603f 	.word	0x0800603f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fa18 	bl	80063b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0208 	orr.w	r2, r2, #8
 8005f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0204 	bic.w	r2, r2, #4
 8005fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6999      	ldr	r1, [r3, #24]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	619a      	str	r2, [r3, #24]
      break;
 8005fba:	e064      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fa68 	bl	8006498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6999      	ldr	r1, [r3, #24]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	021a      	lsls	r2, r3, #8
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	619a      	str	r2, [r3, #24]
      break;
 8005ffc:	e043      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fabd 	bl	8006584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0208 	orr.w	r2, r2, #8
 8006018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0204 	bic.w	r2, r2, #4
 8006028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69d9      	ldr	r1, [r3, #28]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	61da      	str	r2, [r3, #28]
      break;
 800603c:	e023      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fb11 	bl	800666c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69d9      	ldr	r1, [r3, #28]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	021a      	lsls	r2, r3, #8
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	61da      	str	r2, [r3, #28]
      break;
 800607e:	e002      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	75fb      	strb	r3, [r7, #23]
      break;
 8006084:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800608e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_TIM_ConfigClockSource+0x1c>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e0b4      	b.n	800621e <HAL_TIM_ConfigClockSource+0x186>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ec:	d03e      	beq.n	800616c <HAL_TIM_ConfigClockSource+0xd4>
 80060ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f2:	f200 8087 	bhi.w	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fa:	f000 8086 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x172>
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006102:	d87f      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b70      	cmp	r3, #112	; 0x70
 8006106:	d01a      	beq.n	800613e <HAL_TIM_ConfigClockSource+0xa6>
 8006108:	2b70      	cmp	r3, #112	; 0x70
 800610a:	d87b      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b60      	cmp	r3, #96	; 0x60
 800610e:	d050      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006110:	2b60      	cmp	r3, #96	; 0x60
 8006112:	d877      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b50      	cmp	r3, #80	; 0x50
 8006116:	d03c      	beq.n	8006192 <HAL_TIM_ConfigClockSource+0xfa>
 8006118:	2b50      	cmp	r3, #80	; 0x50
 800611a:	d873      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d058      	beq.n	80061d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d86f      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b30      	cmp	r3, #48	; 0x30
 8006126:	d064      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b30      	cmp	r3, #48	; 0x30
 800612a:	d86b      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b20      	cmp	r3, #32
 800612e:	d060      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006130:	2b20      	cmp	r3, #32
 8006132:	d867      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d05c      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006138:	2b10      	cmp	r3, #16
 800613a:	d05a      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x15a>
 800613c:	e062      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6899      	ldr	r1, [r3, #8]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f000 fb5d 	bl	800680c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	609a      	str	r2, [r3, #8]
      break;
 800616a:	e04f      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6899      	ldr	r1, [r3, #8]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f000 fb46 	bl	800680c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800618e:	609a      	str	r2, [r3, #8]
      break;
 8006190:	e03c      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6859      	ldr	r1, [r3, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	461a      	mov	r2, r3
 80061a0:	f000 faba 	bl	8006718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2150      	movs	r1, #80	; 0x50
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fb13 	bl	80067d6 <TIM_ITRx_SetConfig>
      break;
 80061b0:	e02c      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6859      	ldr	r1, [r3, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	461a      	mov	r2, r3
 80061c0:	f000 fad9 	bl	8006776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2160      	movs	r1, #96	; 0x60
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fb03 	bl	80067d6 <TIM_ITRx_SetConfig>
      break;
 80061d0:	e01c      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	461a      	mov	r2, r3
 80061e0:	f000 fa9a 	bl	8006718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2140      	movs	r1, #64	; 0x40
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 faf3 	bl	80067d6 <TIM_ITRx_SetConfig>
      break;
 80061f0:	e00c      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f000 faea 	bl	80067d6 <TIM_ITRx_SetConfig>
      break;
 8006202:	e003      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
      break;
 8006208:	e000      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800620a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a40      	ldr	r2, [pc, #256]	; (800638c <TIM_Base_SetConfig+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006296:	d00f      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a3d      	ldr	r2, [pc, #244]	; (8006390 <TIM_Base_SetConfig+0x118>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a3c      	ldr	r2, [pc, #240]	; (8006394 <TIM_Base_SetConfig+0x11c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3b      	ldr	r2, [pc, #236]	; (8006398 <TIM_Base_SetConfig+0x120>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a3a      	ldr	r2, [pc, #232]	; (800639c <TIM_Base_SetConfig+0x124>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a2f      	ldr	r2, [pc, #188]	; (800638c <TIM_Base_SetConfig+0x114>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d027      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2c      	ldr	r2, [pc, #176]	; (8006390 <TIM_Base_SetConfig+0x118>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d023      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2b      	ldr	r2, [pc, #172]	; (8006394 <TIM_Base_SetConfig+0x11c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01f      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <TIM_Base_SetConfig+0x120>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a29      	ldr	r2, [pc, #164]	; (800639c <TIM_Base_SetConfig+0x124>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d017      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a28      	ldr	r2, [pc, #160]	; (80063a0 <TIM_Base_SetConfig+0x128>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <TIM_Base_SetConfig+0x12c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00f      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a26      	ldr	r2, [pc, #152]	; (80063a8 <TIM_Base_SetConfig+0x130>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a25      	ldr	r2, [pc, #148]	; (80063ac <TIM_Base_SetConfig+0x134>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d007      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a24      	ldr	r2, [pc, #144]	; (80063b0 <TIM_Base_SetConfig+0x138>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a23      	ldr	r2, [pc, #140]	; (80063b4 <TIM_Base_SetConfig+0x13c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d108      	bne.n	800633c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a0a      	ldr	r2, [pc, #40]	; (800638c <TIM_Base_SetConfig+0x114>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_Base_SetConfig+0xf8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a0c      	ldr	r2, [pc, #48]	; (800639c <TIM_Base_SetConfig+0x124>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d103      	bne.n	8006378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	615a      	str	r2, [r3, #20]
}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40010000 	.word	0x40010000
 8006390:	40000400 	.word	0x40000400
 8006394:	40000800 	.word	0x40000800
 8006398:	40000c00 	.word	0x40000c00
 800639c:	40010400 	.word	0x40010400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800
 80063ac:	40001800 	.word	0x40001800
 80063b0:	40001c00 	.word	0x40001c00
 80063b4:	40002000 	.word	0x40002000

080063b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0201 	bic.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0303 	bic.w	r3, r3, #3
 80063ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f023 0302 	bic.w	r3, r3, #2
 8006400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a20      	ldr	r2, [pc, #128]	; (8006490 <TIM_OC1_SetConfig+0xd8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_OC1_SetConfig+0x64>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <TIM_OC1_SetConfig+0xdc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d10c      	bne.n	8006436 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 0308 	bic.w	r3, r3, #8
 8006422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f023 0304 	bic.w	r3, r3, #4
 8006434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a15      	ldr	r2, [pc, #84]	; (8006490 <TIM_OC1_SetConfig+0xd8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_OC1_SetConfig+0x8e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a14      	ldr	r2, [pc, #80]	; (8006494 <TIM_OC1_SetConfig+0xdc>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d111      	bne.n	800646a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800644c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	621a      	str	r2, [r3, #32]
}
 8006484:	bf00      	nop
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40010000 	.word	0x40010000
 8006494:	40010400 	.word	0x40010400

08006498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 0210 	bic.w	r2, r3, #16
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0320 	bic.w	r3, r3, #32
 80064e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <TIM_OC2_SetConfig+0xe4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_OC2_SetConfig+0x68>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a21      	ldr	r2, [pc, #132]	; (8006580 <TIM_OC2_SetConfig+0xe8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10d      	bne.n	800651c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a17      	ldr	r2, [pc, #92]	; (800657c <TIM_OC2_SetConfig+0xe4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_OC2_SetConfig+0x94>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a16      	ldr	r2, [pc, #88]	; (8006580 <TIM_OC2_SetConfig+0xe8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d113      	bne.n	8006554 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800653a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40010000 	.word	0x40010000
 8006580:	40010400 	.word	0x40010400

08006584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0303 	bic.w	r3, r3, #3
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	021b      	lsls	r3, r3, #8
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a21      	ldr	r2, [pc, #132]	; (8006664 <TIM_OC3_SetConfig+0xe0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_OC3_SetConfig+0x66>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a20      	ldr	r2, [pc, #128]	; (8006668 <TIM_OC3_SetConfig+0xe4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d10d      	bne.n	8006606 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	021b      	lsls	r3, r3, #8
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a16      	ldr	r2, [pc, #88]	; (8006664 <TIM_OC3_SetConfig+0xe0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_OC3_SetConfig+0x92>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a15      	ldr	r2, [pc, #84]	; (8006668 <TIM_OC3_SetConfig+0xe4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d113      	bne.n	800663e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800661c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	621a      	str	r2, [r3, #32]
}
 8006658:	bf00      	nop
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	40010000 	.word	0x40010000
 8006668:	40010400 	.word	0x40010400

0800666c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	031b      	lsls	r3, r3, #12
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a12      	ldr	r2, [pc, #72]	; (8006710 <TIM_OC4_SetConfig+0xa4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_OC4_SetConfig+0x68>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a11      	ldr	r2, [pc, #68]	; (8006714 <TIM_OC4_SetConfig+0xa8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d109      	bne.n	80066e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000
 8006714:	40010400 	.word	0x40010400

08006718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f023 0201 	bic.w	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 030a 	bic.w	r3, r3, #10
 8006754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006776:	b480      	push	{r7}
 8006778:	b087      	sub	sp, #28
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f023 0210 	bic.w	r2, r3, #16
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	031b      	lsls	r3, r3, #12
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	621a      	str	r2, [r3, #32]
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f043 0307 	orr.w	r3, r3, #7
 80067f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	609a      	str	r2, [r3, #8]
}
 8006800:	bf00      	nop
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	021a      	lsls	r2, r3, #8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	431a      	orrs	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4313      	orrs	r3, r2
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	609a      	str	r2, [r3, #8]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006860:	2302      	movs	r3, #2
 8006862:	e05a      	b.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a21      	ldr	r2, [pc, #132]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b0:	d01d      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a18      	ldr	r2, [pc, #96]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a17      	ldr	r2, [pc, #92]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d10c      	bne.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40010400 	.word	0x40010400
 800693c:	40014000 	.word	0x40014000
 8006940:	40001800 	.word	0x40001800

08006944 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800695c:	2302      	movs	r3, #2
 800695e:	e03d      	b.n	80069dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e03f      	b.n	8006aa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fc fac6 	bl	8002fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	; 0x24
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f929 	bl	8006cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b08a      	sub	sp, #40	; 0x28
 8006aae:	af02      	add	r7, sp, #8
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d17c      	bne.n	8006bc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_UART_Transmit+0x2c>
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e075      	b.n	8006bc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_UART_Transmit+0x3e>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e06e      	b.n	8006bc6 <HAL_UART_Transmit+0x11c>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006afe:	f7fc fb0b 	bl	8003118 <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	88fa      	ldrh	r2, [r7, #6]
 8006b08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b18:	d108      	bne.n	8006b2c <HAL_UART_Transmit+0x82>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	e003      	b.n	8006b34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b3c:	e02a      	b.n	8006b94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2200      	movs	r2, #0
 8006b46:	2180      	movs	r1, #128	; 0x80
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f840 	bl	8006bce <UART_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e036      	b.n	8006bc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10b      	bne.n	8006b76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	3302      	adds	r3, #2
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e007      	b.n	8006b86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3301      	adds	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1cf      	bne.n	8006b3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2140      	movs	r1, #64	; 0x40
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f810 	bl	8006bce <UART_WaitOnFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e006      	b.n	8006bc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b090      	sub	sp, #64	; 0x40
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bde:	e050      	b.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d04c      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8006bee:	f7fc fa93 	bl	8003118 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d241      	bcs.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c1e:	637a      	str	r2, [r7, #52]	; 0x34
 8006c20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e5      	bne.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3314      	adds	r3, #20
 8006c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	613b      	str	r3, [r7, #16]
   return(result);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3314      	adds	r3, #20
 8006c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c52:	623a      	str	r2, [r7, #32]
 8006c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	69f9      	ldr	r1, [r7, #28]
 8006c58:	6a3a      	ldr	r2, [r7, #32]
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e5      	bne.n	8006c32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e00f      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d09f      	beq.n	8006be0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3740      	adds	r7, #64	; 0x40
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb0:	b0c0      	sub	sp, #256	; 0x100
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	68d9      	ldr	r1, [r3, #12]
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	ea40 0301 	orr.w	r3, r0, r1
 8006cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d04:	f021 010c 	bic.w	r1, r1, #12
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d12:	430b      	orrs	r3, r1
 8006d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d26:	6999      	ldr	r1, [r3, #24]
 8006d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	ea40 0301 	orr.w	r3, r0, r1
 8006d32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b8f      	ldr	r3, [pc, #572]	; (8006f78 <UART_SetConfig+0x2cc>)
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d005      	beq.n	8006d4c <UART_SetConfig+0xa0>
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b8d      	ldr	r3, [pc, #564]	; (8006f7c <UART_SetConfig+0x2d0>)
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d104      	bne.n	8006d56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d4c:	f7fd fd04 	bl	8004758 <HAL_RCC_GetPCLK2Freq>
 8006d50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d54:	e003      	b.n	8006d5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d56:	f7fd fceb 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8006d5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d68:	f040 810c 	bne.w	8006f84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d7e:	4622      	mov	r2, r4
 8006d80:	462b      	mov	r3, r5
 8006d82:	1891      	adds	r1, r2, r2
 8006d84:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d86:	415b      	adcs	r3, r3
 8006d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d8e:	4621      	mov	r1, r4
 8006d90:	eb12 0801 	adds.w	r8, r2, r1
 8006d94:	4629      	mov	r1, r5
 8006d96:	eb43 0901 	adc.w	r9, r3, r1
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dae:	4690      	mov	r8, r2
 8006db0:	4699      	mov	r9, r3
 8006db2:	4623      	mov	r3, r4
 8006db4:	eb18 0303 	adds.w	r3, r8, r3
 8006db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	eb49 0303 	adc.w	r3, r9, r3
 8006dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006dda:	460b      	mov	r3, r1
 8006ddc:	18db      	adds	r3, r3, r3
 8006dde:	653b      	str	r3, [r7, #80]	; 0x50
 8006de0:	4613      	mov	r3, r2
 8006de2:	eb42 0303 	adc.w	r3, r2, r3
 8006de6:	657b      	str	r3, [r7, #84]	; 0x54
 8006de8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006dec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006df0:	f7f9 ff0a 	bl	8000c08 <__aeabi_uldivmod>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4b61      	ldr	r3, [pc, #388]	; (8006f80 <UART_SetConfig+0x2d4>)
 8006dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	011c      	lsls	r4, r3, #4
 8006e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e14:	4642      	mov	r2, r8
 8006e16:	464b      	mov	r3, r9
 8006e18:	1891      	adds	r1, r2, r2
 8006e1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e1c:	415b      	adcs	r3, r3
 8006e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e24:	4641      	mov	r1, r8
 8006e26:	eb12 0a01 	adds.w	sl, r2, r1
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	eb43 0b01 	adc.w	fp, r3, r1
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	f04f 0300 	mov.w	r3, #0
 8006e38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e44:	4692      	mov	sl, r2
 8006e46:	469b      	mov	fp, r3
 8006e48:	4643      	mov	r3, r8
 8006e4a:	eb1a 0303 	adds.w	r3, sl, r3
 8006e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e52:	464b      	mov	r3, r9
 8006e54:	eb4b 0303 	adc.w	r3, fp, r3
 8006e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e70:	460b      	mov	r3, r1
 8006e72:	18db      	adds	r3, r3, r3
 8006e74:	643b      	str	r3, [r7, #64]	; 0x40
 8006e76:	4613      	mov	r3, r2
 8006e78:	eb42 0303 	adc.w	r3, r2, r3
 8006e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e86:	f7f9 febf 	bl	8000c08 <__aeabi_uldivmod>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4b3b      	ldr	r3, [pc, #236]	; (8006f80 <UART_SetConfig+0x2d4>)
 8006e92:	fba3 2301 	umull	r2, r3, r3, r1
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	2264      	movs	r2, #100	; 0x64
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
 8006e9e:	1acb      	subs	r3, r1, r3
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ea6:	4b36      	ldr	r3, [pc, #216]	; (8006f80 <UART_SetConfig+0x2d4>)
 8006ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006eb4:	441c      	add	r4, r3
 8006eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ec0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	1891      	adds	r1, r2, r2
 8006ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ed0:	415b      	adcs	r3, r3
 8006ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ed8:	4641      	mov	r1, r8
 8006eda:	1851      	adds	r1, r2, r1
 8006edc:	6339      	str	r1, [r7, #48]	; 0x30
 8006ede:	4649      	mov	r1, r9
 8006ee0:	414b      	adcs	r3, r1
 8006ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ef0:	4659      	mov	r1, fp
 8006ef2:	00cb      	lsls	r3, r1, #3
 8006ef4:	4651      	mov	r1, sl
 8006ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006efa:	4651      	mov	r1, sl
 8006efc:	00ca      	lsls	r2, r1, #3
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	4642      	mov	r2, r8
 8006f06:	189b      	adds	r3, r3, r2
 8006f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f0c:	464b      	mov	r3, r9
 8006f0e:	460a      	mov	r2, r1
 8006f10:	eb42 0303 	adc.w	r3, r2, r3
 8006f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	18db      	adds	r3, r3, r3
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f32:	4613      	mov	r3, r2
 8006f34:	eb42 0303 	adc.w	r3, r2, r3
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f42:	f7f9 fe61 	bl	8000c08 <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <UART_SetConfig+0x2d4>)
 8006f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	2164      	movs	r1, #100	; 0x64
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	3332      	adds	r3, #50	; 0x32
 8006f5e:	4a08      	ldr	r2, [pc, #32]	; (8006f80 <UART_SetConfig+0x2d4>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f003 0207 	and.w	r2, r3, #7
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4422      	add	r2, r4
 8006f72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f74:	e106      	b.n	8007184 <UART_SetConfig+0x4d8>
 8006f76:	bf00      	nop
 8006f78:	40011000 	.word	0x40011000
 8006f7c:	40011400 	.word	0x40011400
 8006f80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f96:	4642      	mov	r2, r8
 8006f98:	464b      	mov	r3, r9
 8006f9a:	1891      	adds	r1, r2, r2
 8006f9c:	6239      	str	r1, [r7, #32]
 8006f9e:	415b      	adcs	r3, r3
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	1854      	adds	r4, r2, r1
 8006faa:	4649      	mov	r1, r9
 8006fac:	eb43 0501 	adc.w	r5, r3, r1
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	00eb      	lsls	r3, r5, #3
 8006fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fbe:	00e2      	lsls	r2, r4, #3
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	461d      	mov	r5, r3
 8006fc4:	4643      	mov	r3, r8
 8006fc6:	18e3      	adds	r3, r4, r3
 8006fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fcc:	464b      	mov	r3, r9
 8006fce:	eb45 0303 	adc.w	r3, r5, r3
 8006fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	008b      	lsls	r3, r1, #2
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	008a      	lsls	r2, r1, #2
 8007000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007004:	f7f9 fe00 	bl	8000c08 <__aeabi_uldivmod>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4b60      	ldr	r3, [pc, #384]	; (8007190 <UART_SetConfig+0x4e4>)
 800700e:	fba3 2302 	umull	r2, r3, r3, r2
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	011c      	lsls	r4, r3, #4
 8007016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800701a:	2200      	movs	r2, #0
 800701c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007020:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007028:	4642      	mov	r2, r8
 800702a:	464b      	mov	r3, r9
 800702c:	1891      	adds	r1, r2, r2
 800702e:	61b9      	str	r1, [r7, #24]
 8007030:	415b      	adcs	r3, r3
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007038:	4641      	mov	r1, r8
 800703a:	1851      	adds	r1, r2, r1
 800703c:	6139      	str	r1, [r7, #16]
 800703e:	4649      	mov	r1, r9
 8007040:	414b      	adcs	r3, r1
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007050:	4659      	mov	r1, fp
 8007052:	00cb      	lsls	r3, r1, #3
 8007054:	4651      	mov	r1, sl
 8007056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800705a:	4651      	mov	r1, sl
 800705c:	00ca      	lsls	r2, r1, #3
 800705e:	4610      	mov	r0, r2
 8007060:	4619      	mov	r1, r3
 8007062:	4603      	mov	r3, r0
 8007064:	4642      	mov	r2, r8
 8007066:	189b      	adds	r3, r3, r2
 8007068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800706c:	464b      	mov	r3, r9
 800706e:	460a      	mov	r2, r1
 8007070:	eb42 0303 	adc.w	r3, r2, r3
 8007074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	67bb      	str	r3, [r7, #120]	; 0x78
 8007082:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007090:	4649      	mov	r1, r9
 8007092:	008b      	lsls	r3, r1, #2
 8007094:	4641      	mov	r1, r8
 8007096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800709a:	4641      	mov	r1, r8
 800709c:	008a      	lsls	r2, r1, #2
 800709e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80070a2:	f7f9 fdb1 	bl	8000c08 <__aeabi_uldivmod>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	4b38      	ldr	r3, [pc, #224]	; (8007190 <UART_SetConfig+0x4e4>)
 80070ae:	fba3 2301 	umull	r2, r3, r3, r1
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2264      	movs	r2, #100	; 0x64
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	1acb      	subs	r3, r1, r3
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	3332      	adds	r3, #50	; 0x32
 80070c0:	4a33      	ldr	r2, [pc, #204]	; (8007190 <UART_SetConfig+0x4e4>)
 80070c2:	fba2 2303 	umull	r2, r3, r2, r3
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070cc:	441c      	add	r4, r3
 80070ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d2:	2200      	movs	r2, #0
 80070d4:	673b      	str	r3, [r7, #112]	; 0x70
 80070d6:	677a      	str	r2, [r7, #116]	; 0x74
 80070d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070dc:	4642      	mov	r2, r8
 80070de:	464b      	mov	r3, r9
 80070e0:	1891      	adds	r1, r2, r2
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	415b      	adcs	r3, r3
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070ec:	4641      	mov	r1, r8
 80070ee:	1851      	adds	r1, r2, r1
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	4649      	mov	r1, r9
 80070f4:	414b      	adcs	r3, r1
 80070f6:	607b      	str	r3, [r7, #4]
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007104:	4659      	mov	r1, fp
 8007106:	00cb      	lsls	r3, r1, #3
 8007108:	4651      	mov	r1, sl
 800710a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710e:	4651      	mov	r1, sl
 8007110:	00ca      	lsls	r2, r1, #3
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	4603      	mov	r3, r0
 8007118:	4642      	mov	r2, r8
 800711a:	189b      	adds	r3, r3, r2
 800711c:	66bb      	str	r3, [r7, #104]	; 0x68
 800711e:	464b      	mov	r3, r9
 8007120:	460a      	mov	r2, r1
 8007122:	eb42 0303 	adc.w	r3, r2, r3
 8007126:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	663b      	str	r3, [r7, #96]	; 0x60
 8007132:	667a      	str	r2, [r7, #100]	; 0x64
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007140:	4649      	mov	r1, r9
 8007142:	008b      	lsls	r3, r1, #2
 8007144:	4641      	mov	r1, r8
 8007146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800714a:	4641      	mov	r1, r8
 800714c:	008a      	lsls	r2, r1, #2
 800714e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007152:	f7f9 fd59 	bl	8000c08 <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <UART_SetConfig+0x4e4>)
 800715c:	fba3 1302 	umull	r1, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	2164      	movs	r1, #100	; 0x64
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	3332      	adds	r3, #50	; 0x32
 800716e:	4a08      	ldr	r2, [pc, #32]	; (8007190 <UART_SetConfig+0x4e4>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	f003 020f 	and.w	r2, r3, #15
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4422      	add	r2, r4
 8007182:	609a      	str	r2, [r3, #8]
}
 8007184:	bf00      	nop
 8007186:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800718a:	46bd      	mov	sp, r7
 800718c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007190:	51eb851f 	.word	0x51eb851f

08007194 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007198:	4904      	ldr	r1, [pc, #16]	; (80071ac <MX_FATFS_Init+0x18>)
 800719a:	4805      	ldr	r0, [pc, #20]	; (80071b0 <MX_FATFS_Init+0x1c>)
 800719c:	f002 fe84 	bl	8009ea8 <FATFS_LinkDriver>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	4b03      	ldr	r3, [pc, #12]	; (80071b4 <MX_FATFS_Init+0x20>)
 80071a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80071a8:	bf00      	nop
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20005598 	.word	0x20005598
 80071b0:	20000018 	.word	0x20000018
 80071b4:	20005594 	.word	0x20005594

080071b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80071bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80071be:	4618      	mov	r0, r3
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (SD_disk_initialize(pdrv));
 80071d2:	79fb      	ldrb	r3, [r7, #7]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fa fb9d 	bl	8001914 <SD_disk_initialize>
 80071da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return (SD_disk_status(pdrv));
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fa fc79 	bl	8001ae8 <SD_disk_status>
 80071f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (SD_disk_read(pdrv,buff, sector, count));
 8007210:	7bf8      	ldrb	r0, [r7, #15]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	f7fa fc7c 	bl	8001b14 <SD_disk_read>
 800721c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return (SD_disk_write(pdrv, buff, sector, count));
 8007236:	7bf8      	ldrb	r0, [r7, #15]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	f7fa fcd3 	bl	8001be8 <SD_disk_write>
 8007242:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	603a      	str	r2, [r7, #0]
 8007256:	71fb      	strb	r3, [r7, #7]
 8007258:	460b      	mov	r3, r1
 800725a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return (SD_disk_ioctl(pdrv, cmd, buff));
 800725c:	79b9      	ldrb	r1, [r7, #6]
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7fa fd44 	bl	8001cf0 <SD_disk_ioctl>
 8007268:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <disk_status+0x30>)
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	79fa      	ldrb	r2, [r7, #7]
 800728c:	4905      	ldr	r1, [pc, #20]	; (80072a4 <disk_status+0x30>)
 800728e:	440a      	add	r2, r1
 8007290:	7a12      	ldrb	r2, [r2, #8]
 8007292:	4610      	mov	r0, r2
 8007294:	4798      	blx	r3
 8007296:	4603      	mov	r3, r0
 8007298:	73fb      	strb	r3, [r7, #15]
  return stat;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	200055c4 	.word	0x200055c4

080072a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	4a0d      	ldr	r2, [pc, #52]	; (80072f0 <disk_initialize+0x48>)
 80072ba:	5cd3      	ldrb	r3, [r2, r3]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d111      	bne.n	80072e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	4a0b      	ldr	r2, [pc, #44]	; (80072f0 <disk_initialize+0x48>)
 80072c4:	2101      	movs	r1, #1
 80072c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <disk_initialize+0x48>)
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	79fa      	ldrb	r2, [r7, #7]
 80072d6:	4906      	ldr	r1, [pc, #24]	; (80072f0 <disk_initialize+0x48>)
 80072d8:	440a      	add	r2, r1
 80072da:	7a12      	ldrb	r2, [r2, #8]
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	200055c4 	.word	0x200055c4

080072f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	4a0a      	ldr	r2, [pc, #40]	; (8007330 <disk_read+0x3c>)
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	689c      	ldr	r4, [r3, #8]
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	4a07      	ldr	r2, [pc, #28]	; (8007330 <disk_read+0x3c>)
 8007314:	4413      	add	r3, r2
 8007316:	7a18      	ldrb	r0, [r3, #8]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	47a0      	blx	r4
 8007320:	4603      	mov	r3, r0
 8007322:	75fb      	strb	r3, [r7, #23]
  return res;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
}
 8007326:	4618      	mov	r0, r3
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	bd90      	pop	{r4, r7, pc}
 800732e:	bf00      	nop
 8007330:	200055c4 	.word	0x200055c4

08007334 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007334:	b590      	push	{r4, r7, lr}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <disk_write+0x3c>)
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68dc      	ldr	r4, [r3, #12]
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	4a07      	ldr	r2, [pc, #28]	; (8007370 <disk_write+0x3c>)
 8007354:	4413      	add	r3, r2
 8007356:	7a18      	ldrb	r0, [r3, #8]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	47a0      	blx	r4
 8007360:	4603      	mov	r3, r0
 8007362:	75fb      	strb	r3, [r7, #23]
  return res;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
}
 8007366:	4618      	mov	r0, r3
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	bd90      	pop	{r4, r7, pc}
 800736e:	bf00      	nop
 8007370:	200055c4 	.word	0x200055c4

08007374 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	603a      	str	r2, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
 8007380:	460b      	mov	r3, r1
 8007382:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <disk_ioctl+0x38>)
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	79fa      	ldrb	r2, [r7, #7]
 8007392:	4906      	ldr	r1, [pc, #24]	; (80073ac <disk_ioctl+0x38>)
 8007394:	440a      	add	r2, r1
 8007396:	7a10      	ldrb	r0, [r2, #8]
 8007398:	79b9      	ldrb	r1, [r7, #6]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	4798      	blx	r3
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200055c4 	.word	0x200055c4

080073b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3301      	adds	r3, #1
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80073c0:	89fb      	ldrh	r3, [r7, #14]
 80073c2:	021b      	lsls	r3, r3, #8
 80073c4:	b21a      	sxth	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	b21b      	sxth	r3, r3
 80073cc:	4313      	orrs	r3, r2
 80073ce:	b21b      	sxth	r3, r3
 80073d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80073d2:	89fb      	ldrh	r3, [r7, #14]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3303      	adds	r3, #3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	3202      	adds	r2, #2
 80073f8:	7812      	ldrb	r2, [r2, #0]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	021b      	lsls	r3, r3, #8
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	3201      	adds	r2, #1
 8007406:	7812      	ldrb	r2, [r2, #0]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
	return rv;
 8007418:	68fb      	ldr	r3, [r7, #12]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	887a      	ldrh	r2, [r7, #2]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	887b      	ldrh	r3, [r7, #2]
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	887a      	ldrh	r2, [r7, #2]
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	701a      	strb	r2, [r3, #0]
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	0a1b      	lsrs	r3, r3, #8
 8007476:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	0a1b      	lsrs	r3, r3, #8
 800749a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	607a      	str	r2, [r7, #4]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00d      	beq.n	80074ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	1c53      	adds	r3, r2, #1
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	1c59      	adds	r1, r3, #1
 80074d8:	6179      	str	r1, [r7, #20]
 80074da:	7812      	ldrb	r2, [r2, #0]
 80074dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f1      	bne.n	80074ce <mem_cpy+0x1a>
	}
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80074f6:	b480      	push	{r7}
 80074f8:	b087      	sub	sp, #28
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	617a      	str	r2, [r7, #20]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3b01      	subs	r3, #1
 8007516:	607b      	str	r3, [r7, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1f3      	bne.n	8007506 <mem_set+0x10>
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800752c:	b480      	push	{r7}
 800752e:	b089      	sub	sp, #36	; 0x24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	61fa      	str	r2, [r7, #28]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	4619      	mov	r1, r3
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	61ba      	str	r2, [r7, #24]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	1acb      	subs	r3, r1, r3
 8007558:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3b01      	subs	r3, #1
 800755e:	607b      	str	r3, [r7, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <mem_cmp+0x40>
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0eb      	beq.n	8007544 <mem_cmp+0x18>

	return r;
 800756c:	697b      	ldr	r3, [r7, #20]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3724      	adds	r7, #36	; 0x24
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007584:	e002      	b.n	800758c <chk_chr+0x12>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3301      	adds	r3, #1
 800758a:	607b      	str	r3, [r7, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <chk_chr+0x26>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	4293      	cmp	r3, r2
 800759e:	d1f2      	bne.n	8007586 <chk_chr+0xc>
	return *str;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	781b      	ldrb	r3, [r3, #0]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <lock_fs+0x22>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f002 fcab 	bl	8009f1e <ff_req_grant>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <lock_fs+0x22>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <lock_fs+0x24>
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00d      	beq.n	800760a <unlock_fs+0x2e>
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	2b0c      	cmp	r3, #12
 80075f2:	d00a      	beq.n	800760a <unlock_fs+0x2e>
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	2b0b      	cmp	r3, #11
 80075f8:	d007      	beq.n	800760a <unlock_fs+0x2e>
 80075fa:	78fb      	ldrb	r3, [r7, #3]
 80075fc:	2b0f      	cmp	r3, #15
 80075fe:	d004      	beq.n	800760a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	4618      	mov	r0, r3
 8007606:	f002 fc9f 	bl	8009f48 <ff_rel_grant>
	}
}
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	e029      	b.n	800767c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007628:	4a27      	ldr	r2, [pc, #156]	; (80076c8 <chk_lock+0xb4>)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	4413      	add	r3, r2
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01d      	beq.n	8007672 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007636:	4a24      	ldr	r2, [pc, #144]	; (80076c8 <chk_lock+0xb4>)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	4413      	add	r3, r2
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d116      	bne.n	8007676 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007648:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <chk_lock+0xb4>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	4413      	add	r3, r2
 8007650:	3304      	adds	r3, #4
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007658:	429a      	cmp	r2, r3
 800765a:	d10c      	bne.n	8007676 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800765c:	4a1a      	ldr	r2, [pc, #104]	; (80076c8 <chk_lock+0xb4>)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	4413      	add	r3, r2
 8007664:	3308      	adds	r3, #8
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800766c:	429a      	cmp	r2, r3
 800766e:	d102      	bne.n	8007676 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007670:	e007      	b.n	8007682 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007672:	2301      	movs	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d9d2      	bls.n	8007628 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b02      	cmp	r3, #2
 8007686:	d109      	bne.n	800769c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d102      	bne.n	8007694 <chk_lock+0x80>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d101      	bne.n	8007698 <chk_lock+0x84>
 8007694:	2300      	movs	r3, #0
 8007696:	e010      	b.n	80076ba <chk_lock+0xa6>
 8007698:	2312      	movs	r3, #18
 800769a:	e00e      	b.n	80076ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d108      	bne.n	80076b4 <chk_lock+0xa0>
 80076a2:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <chk_lock+0xb4>)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	330c      	adds	r3, #12
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b2:	d101      	bne.n	80076b8 <chk_lock+0xa4>
 80076b4:	2310      	movs	r3, #16
 80076b6:	e000      	b.n	80076ba <chk_lock+0xa6>
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	200055a4 	.word	0x200055a4

080076cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	e002      	b.n	80076de <enq_lock+0x12>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3301      	adds	r3, #1
 80076dc:	607b      	str	r3, [r7, #4]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d806      	bhi.n	80076f2 <enq_lock+0x26>
 80076e4:	4a09      	ldr	r2, [pc, #36]	; (800770c <enq_lock+0x40>)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	4413      	add	r3, r2
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f2      	bne.n	80076d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	bf14      	ite	ne
 80076f8:	2301      	movne	r3, #1
 80076fa:	2300      	moveq	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	200055a4 	.word	0x200055a4

08007710 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	e01f      	b.n	8007760 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007720:	4a41      	ldr	r2, [pc, #260]	; (8007828 <inc_lock+0x118>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	4413      	add	r3, r2
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d113      	bne.n	800775a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007732:	4a3d      	ldr	r2, [pc, #244]	; (8007828 <inc_lock+0x118>)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	4413      	add	r3, r2
 800773a:	3304      	adds	r3, #4
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007742:	429a      	cmp	r2, r3
 8007744:	d109      	bne.n	800775a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007746:	4a38      	ldr	r2, [pc, #224]	; (8007828 <inc_lock+0x118>)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	4413      	add	r3, r2
 800774e:	3308      	adds	r3, #8
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007756:	429a      	cmp	r2, r3
 8007758:	d006      	beq.n	8007768 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d9dc      	bls.n	8007720 <inc_lock+0x10>
 8007766:	e000      	b.n	800776a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007768:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d132      	bne.n	80077d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e002      	b.n	800777c <inc_lock+0x6c>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3301      	adds	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d806      	bhi.n	8007790 <inc_lock+0x80>
 8007782:	4a29      	ldr	r2, [pc, #164]	; (8007828 <inc_lock+0x118>)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	4413      	add	r3, r2
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1f2      	bne.n	8007776 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d101      	bne.n	800779a <inc_lock+0x8a>
 8007796:	2300      	movs	r3, #0
 8007798:	e040      	b.n	800781c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4922      	ldr	r1, [pc, #136]	; (8007828 <inc_lock+0x118>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	440b      	add	r3, r1
 80077a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	491e      	ldr	r1, [pc, #120]	; (8007828 <inc_lock+0x118>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	440b      	add	r3, r1
 80077b4:	3304      	adds	r3, #4
 80077b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695a      	ldr	r2, [r3, #20]
 80077bc:	491a      	ldr	r1, [pc, #104]	; (8007828 <inc_lock+0x118>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	440b      	add	r3, r1
 80077c4:	3308      	adds	r3, #8
 80077c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80077c8:	4a17      	ldr	r2, [pc, #92]	; (8007828 <inc_lock+0x118>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	4413      	add	r3, r2
 80077d0:	330c      	adds	r3, #12
 80077d2:	2200      	movs	r2, #0
 80077d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d009      	beq.n	80077f0 <inc_lock+0xe0>
 80077dc:	4a12      	ldr	r2, [pc, #72]	; (8007828 <inc_lock+0x118>)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	4413      	add	r3, r2
 80077e4:	330c      	adds	r3, #12
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <inc_lock+0xe0>
 80077ec:	2300      	movs	r3, #0
 80077ee:	e015      	b.n	800781c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d108      	bne.n	8007808 <inc_lock+0xf8>
 80077f6:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <inc_lock+0x118>)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	4413      	add	r3, r2
 80077fe:	330c      	adds	r3, #12
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	e001      	b.n	800780c <inc_lock+0xfc>
 8007808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800780c:	4906      	ldr	r1, [pc, #24]	; (8007828 <inc_lock+0x118>)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	440b      	add	r3, r1
 8007814:	330c      	adds	r3, #12
 8007816:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3301      	adds	r3, #1
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	200055a4 	.word	0x200055a4

0800782c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3b01      	subs	r3, #1
 8007838:	607b      	str	r3, [r7, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d825      	bhi.n	800788c <dec_lock+0x60>
		n = Files[i].ctr;
 8007840:	4a17      	ldr	r2, [pc, #92]	; (80078a0 <dec_lock+0x74>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	4413      	add	r3, r2
 8007848:	330c      	adds	r3, #12
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800784e:	89fb      	ldrh	r3, [r7, #14]
 8007850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007854:	d101      	bne.n	800785a <dec_lock+0x2e>
 8007856:	2300      	movs	r3, #0
 8007858:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800785a:	89fb      	ldrh	r3, [r7, #14]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <dec_lock+0x3a>
 8007860:	89fb      	ldrh	r3, [r7, #14]
 8007862:	3b01      	subs	r3, #1
 8007864:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007866:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <dec_lock+0x74>)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	4413      	add	r3, r2
 800786e:	330c      	adds	r3, #12
 8007870:	89fa      	ldrh	r2, [r7, #14]
 8007872:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <dec_lock+0x5a>
 800787a:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <dec_lock+0x74>)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	4413      	add	r3, r2
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	737b      	strb	r3, [r7, #13]
 800788a:	e001      	b.n	8007890 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800788c:	2302      	movs	r3, #2
 800788e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007890:	7b7b      	ldrb	r3, [r7, #13]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	200055a4 	.word	0x200055a4

080078a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	e010      	b.n	80078d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078b2:	4a0d      	ldr	r2, [pc, #52]	; (80078e8 <clear_lock+0x44>)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	4413      	add	r3, r2
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d105      	bne.n	80078ce <clear_lock+0x2a>
 80078c2:	4a09      	ldr	r2, [pc, #36]	; (80078e8 <clear_lock+0x44>)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	4413      	add	r3, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d9eb      	bls.n	80078b2 <clear_lock+0xe>
	}
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	200055a4 	.word	0x200055a4

080078ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	78db      	ldrb	r3, [r3, #3]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d034      	beq.n	800796a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7858      	ldrb	r0, [r3, #1]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007910:	2301      	movs	r3, #1
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	f7ff fd0e 	bl	8007334 <disk_write>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <sync_window+0x38>
			res = FR_DISK_ERR;
 800791e:	2301      	movs	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
 8007922:	e022      	b.n	800796a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	1ad2      	subs	r2, r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	429a      	cmp	r2, r3
 8007938:	d217      	bcs.n	800796a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	789b      	ldrb	r3, [r3, #2]
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	e010      	b.n	8007964 <sync_window+0x78>
					wsect += fs->fsize;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4413      	add	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7858      	ldrb	r0, [r3, #1]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007956:	2301      	movs	r3, #1
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	f7ff fceb 	bl	8007334 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3b01      	subs	r3, #1
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d8eb      	bhi.n	8007942 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d01b      	beq.n	80079c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ffad 	bl	80078ec <sync_window>
 8007992:	4603      	mov	r3, r0
 8007994:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d113      	bne.n	80079c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	7858      	ldrb	r0, [r3, #1]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079a6:	2301      	movs	r3, #1
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	f7ff fca3 	bl	80072f4 <disk_read>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff ff87 	bl	80078ec <sync_window>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d158      	bne.n	8007a9a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d148      	bne.n	8007a82 <sync_fs+0xb2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d144      	bne.n	8007a82 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3334      	adds	r3, #52	; 0x34
 80079fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a00:	2100      	movs	r1, #0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff fd77 	bl	80074f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3334      	adds	r3, #52	; 0x34
 8007a0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a10:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fd06 	bl	8007426 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3334      	adds	r3, #52	; 0x34
 8007a1e:	4921      	ldr	r1, [pc, #132]	; (8007aa4 <sync_fs+0xd4>)
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff fd1b 	bl	800745c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3334      	adds	r3, #52	; 0x34
 8007a2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a2e:	491e      	ldr	r1, [pc, #120]	; (8007aa8 <sync_fs+0xd8>)
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fd13 	bl	800745c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3334      	adds	r3, #52	; 0x34
 8007a3a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7ff fd09 	bl	800745c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3334      	adds	r3, #52	; 0x34
 8007a4e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7ff fcff 	bl	800745c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7858      	ldrb	r0, [r3, #1]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a76:	2301      	movs	r3, #1
 8007a78:	f7ff fc5c 	bl	8007334 <disk_write>
			fs->fsi_flag = 0;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff fc72 	bl	8007374 <disk_ioctl>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <sync_fs+0xca>
 8007a96:	2301      	movs	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	41615252 	.word	0x41615252
 8007aa8:	61417272 	.word	0x61417272

08007aac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	3b02      	subs	r3, #2
 8007aba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	3b02      	subs	r3, #2
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d301      	bcc.n	8007acc <clust2sect+0x20>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e008      	b.n	8007ade <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	895b      	ldrh	r3, [r3, #10]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	fb03 f202 	mul.w	r2, r3, r2
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4413      	add	r3, r2
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d904      	bls.n	8007b0a <get_fat+0x20>
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	e08f      	b.n	8007c30 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b10:	f04f 33ff 	mov.w	r3, #4294967295
 8007b14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d062      	beq.n	8007be4 <get_fat+0xfa>
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	dc7c      	bgt.n	8007c1c <get_fat+0x132>
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d002      	beq.n	8007b2c <get_fat+0x42>
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d042      	beq.n	8007bb0 <get_fat+0xc6>
 8007b2a:	e077      	b.n	8007c1c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	0a5b      	lsrs	r3, r3, #9
 8007b42:	4413      	add	r3, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	6938      	ldr	r0, [r7, #16]
 8007b48:	f7ff ff14 	bl	8007974 <move_window>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d167      	bne.n	8007c22 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	60fa      	str	r2, [r7, #12]
 8007b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	0a5b      	lsrs	r3, r3, #9
 8007b6e:	4413      	add	r3, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	6938      	ldr	r0, [r7, #16]
 8007b74:	f7ff fefe 	bl	8007974 <move_window>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d153      	bne.n	8007c26 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4413      	add	r3, r2
 8007b88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <get_fat+0xbc>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	e002      	b.n	8007bac <get_fat+0xc2>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bac:	617b      	str	r3, [r7, #20]
			break;
 8007bae:	e03f      	b.n	8007c30 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	0a1b      	lsrs	r3, r3, #8
 8007bb8:	4413      	add	r3, r2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6938      	ldr	r0, [r7, #16]
 8007bbe:	f7ff fed9 	bl	8007974 <move_window>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d130      	bne.n	8007c2a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007bd6:	4413      	add	r3, r2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff fbe9 	bl	80073b0 <ld_word>
 8007bde:	4603      	mov	r3, r0
 8007be0:	617b      	str	r3, [r7, #20]
			break;
 8007be2:	e025      	b.n	8007c30 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	09db      	lsrs	r3, r3, #7
 8007bec:	4413      	add	r3, r2
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6938      	ldr	r0, [r7, #16]
 8007bf2:	f7ff febf 	bl	8007974 <move_window>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d118      	bne.n	8007c2e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c0a:	4413      	add	r3, r2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff fbe7 	bl	80073e0 <ld_dword>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c18:	617b      	str	r3, [r7, #20]
			break;
 8007c1a:	e009      	b.n	8007c30 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e006      	b.n	8007c30 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c22:	bf00      	nop
 8007c24:	e004      	b.n	8007c30 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c26:	bf00      	nop
 8007c28:	e002      	b.n	8007c30 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c2e:	bf00      	nop
		}
	}

	return val;
 8007c30:	697b      	ldr	r3, [r7, #20]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007c3a:	b590      	push	{r4, r7, lr}
 8007c3c:	b089      	sub	sp, #36	; 0x24
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	f240 80d9 	bls.w	8007e04 <put_fat+0x1ca>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	f080 80d3 	bcs.w	8007e04 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	f000 8096 	beq.w	8007d94 <put_fat+0x15a>
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	f300 80cb 	bgt.w	8007e04 <put_fat+0x1ca>
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d002      	beq.n	8007c78 <put_fat+0x3e>
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d06e      	beq.n	8007d54 <put_fat+0x11a>
 8007c76:	e0c5      	b.n	8007e04 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	61bb      	str	r3, [r7, #24]
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4413      	add	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	0a5b      	lsrs	r3, r3, #9
 8007c8e:	4413      	add	r3, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fe6e 	bl	8007974 <move_window>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c9c:	7ffb      	ldrb	r3, [r7, #31]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 80a9 	bne.w	8007df6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	1c59      	adds	r1, r3, #1
 8007cae:	61b9      	str	r1, [r7, #24]
 8007cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb4:	4413      	add	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00d      	beq.n	8007cde <put_fat+0xa4>
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b25b      	sxtb	r3, r3
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	b25a      	sxtb	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	b25b      	sxtb	r3, r3
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	b25b      	sxtb	r3, r3
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	e001      	b.n	8007ce2 <put_fat+0xa8>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	0a5b      	lsrs	r3, r3, #9
 8007cf4:	4413      	add	r3, r2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff fe3b 	bl	8007974 <move_window>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d02:	7ffb      	ldrb	r3, [r7, #31]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d178      	bne.n	8007dfa <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d14:	4413      	add	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <put_fat+0xf0>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	091b      	lsrs	r3, r3, #4
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	e00e      	b.n	8007d48 <put_fat+0x10e>
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b25b      	sxtb	r3, r3
 8007d30:	f023 030f 	bic.w	r3, r3, #15
 8007d34:	b25a      	sxtb	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	0a1b      	lsrs	r3, r3, #8
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b25b      	sxtb	r3, r3
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	70da      	strb	r2, [r3, #3]
			break;
 8007d52:	e057      	b.n	8007e04 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	0a1b      	lsrs	r3, r3, #8
 8007d5c:	4413      	add	r3, r2
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fe07 	bl	8007974 <move_window>
 8007d66:	4603      	mov	r3, r0
 8007d68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d6a:	7ffb      	ldrb	r3, [r7, #31]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d146      	bne.n	8007dfe <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007d7e:	4413      	add	r3, r2
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	b292      	uxth	r2, r2
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fb4d 	bl	8007426 <st_word>
			fs->wflag = 1;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	70da      	strb	r2, [r3, #3]
			break;
 8007d92:	e037      	b.n	8007e04 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	09db      	lsrs	r3, r3, #7
 8007d9c:	4413      	add	r3, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff fde7 	bl	8007974 <move_window>
 8007da6:	4603      	mov	r3, r0
 8007da8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007daa:	7ffb      	ldrb	r3, [r7, #31]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d128      	bne.n	8007e02 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007dc4:	4413      	add	r3, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff fb0a 	bl	80073e0 <ld_dword>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007dd2:	4323      	orrs	r3, r4
 8007dd4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007de4:	4413      	add	r3, r2
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fb37 	bl	800745c <st_dword>
			fs->wflag = 1;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	70da      	strb	r2, [r3, #3]
			break;
 8007df4:	e006      	b.n	8007e04 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007df6:	bf00      	nop
 8007df8:	e004      	b.n	8007e04 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007dfa:	bf00      	nop
 8007dfc:	e002      	b.n	8007e04 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007dfe:	bf00      	nop
 8007e00:	e000      	b.n	8007e04 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e02:	bf00      	nop
		}
	}
	return res;
 8007e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3724      	adds	r7, #36	; 0x24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd90      	pop	{r4, r7, pc}

08007e0e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b088      	sub	sp, #32
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d904      	bls.n	8007e34 <remove_chain+0x26>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d301      	bcc.n	8007e38 <remove_chain+0x2a>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e04b      	b.n	8007ed0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00c      	beq.n	8007e58 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	69b8      	ldr	r0, [r7, #24]
 8007e46:	f7ff fef8 	bl	8007c3a <put_fat>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007e4e:	7ffb      	ldrb	r3, [r7, #31]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <remove_chain+0x4a>
 8007e54:	7ffb      	ldrb	r3, [r7, #31]
 8007e56:	e03b      	b.n	8007ed0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fe45 	bl	8007aea <get_fat>
 8007e60:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d031      	beq.n	8007ecc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <remove_chain+0x64>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e02e      	b.n	8007ed0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e78:	d101      	bne.n	8007e7e <remove_chain+0x70>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e028      	b.n	8007ed0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007e7e:	2200      	movs	r2, #0
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	69b8      	ldr	r0, [r7, #24]
 8007e84:	f7ff fed9 	bl	8007c3a <put_fat>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007e8c:	7ffb      	ldrb	r3, [r7, #31]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <remove_chain+0x88>
 8007e92:	7ffb      	ldrb	r3, [r7, #31]
 8007e94:	e01c      	b.n	8007ed0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	3b02      	subs	r3, #2
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d20b      	bcs.n	8007ebc <remove_chain+0xae>
			fs->free_clst++;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d3c6      	bcc.n	8007e58 <remove_chain+0x4a>
 8007eca:	e000      	b.n	8007ece <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007ecc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <create_chain+0x2c>
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d31b      	bcc.n	8007f3c <create_chain+0x64>
 8007f04:	2301      	movs	r3, #1
 8007f06:	61bb      	str	r3, [r7, #24]
 8007f08:	e018      	b.n	8007f3c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff fdec 	bl	8007aea <get_fat>
 8007f12:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d801      	bhi.n	8007f1e <create_chain+0x46>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e070      	b.n	8008000 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f24:	d101      	bne.n	8007f2a <create_chain+0x52>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	e06a      	b.n	8008000 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d201      	bcs.n	8007f38 <create_chain+0x60>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	e063      	b.n	8008000 <create_chain+0x128>
		scl = clst;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	3301      	adds	r3, #1
 8007f44:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d307      	bcc.n	8007f60 <create_chain+0x88>
				ncl = 2;
 8007f50:	2302      	movs	r3, #2
 8007f52:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d901      	bls.n	8007f60 <create_chain+0x88>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e04f      	b.n	8008000 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007f60:	69f9      	ldr	r1, [r7, #28]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fdc1 	bl	8007aea <get_fat>
 8007f68:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00e      	beq.n	8007f8e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d003      	beq.n	8007f7e <create_chain+0xa6>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d101      	bne.n	8007f82 <create_chain+0xaa>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	e03e      	b.n	8008000 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d1da      	bne.n	8007f40 <create_chain+0x68>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e038      	b.n	8008000 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007f8e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007f90:	f04f 32ff 	mov.w	r2, #4294967295
 8007f94:	69f9      	ldr	r1, [r7, #28]
 8007f96:	6938      	ldr	r0, [r7, #16]
 8007f98:	f7ff fe4f 	bl	8007c3a <put_fat>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <create_chain+0xe2>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d006      	beq.n	8007fba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6938      	ldr	r0, [r7, #16]
 8007fb2:	f7ff fe42 	bl	8007c3a <put_fat>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d116      	bne.n	8007fee <create_chain+0x116>
		fs->last_clst = ncl;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	695a      	ldr	r2, [r3, #20]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	3b02      	subs	r3, #2
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d804      	bhi.n	8007fde <create_chain+0x106>
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	1e5a      	subs	r2, r3, #1
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	f043 0301 	orr.w	r3, r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	711a      	strb	r2, [r3, #4]
 8007fec:	e007      	b.n	8007ffe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d102      	bne.n	8007ffa <create_chain+0x122>
 8007ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff8:	e000      	b.n	8007ffc <create_chain+0x124>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007ffe:	69fb      	ldr	r3, [r7, #28]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3720      	adds	r7, #32
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	3304      	adds	r3, #4
 800801e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	0a5b      	lsrs	r3, r3, #9
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	8952      	ldrh	r2, [r2, #10]
 8008028:	fbb3 f3f2 	udiv	r3, r3, r2
 800802c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1d1a      	adds	r2, r3, #4
 8008032:	613a      	str	r2, [r7, #16]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <clmt_clust+0x3a>
 800803e:	2300      	movs	r3, #0
 8008040:	e010      	b.n	8008064 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	429a      	cmp	r2, r3
 8008048:	d307      	bcc.n	800805a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	3304      	adds	r3, #4
 8008056:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008058:	e7e9      	b.n	800802e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800805a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	4413      	add	r3, r2
}
 8008064:	4618      	mov	r0, r3
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008086:	d204      	bcs.n	8008092 <dir_sdi+0x22>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f003 031f 	and.w	r3, r3, #31
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008092:	2302      	movs	r3, #2
 8008094:	e063      	b.n	800815e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <dir_sdi+0x46>
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d902      	bls.n	80080b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10c      	bne.n	80080d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	8912      	ldrh	r2, [r2, #8]
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d301      	bcc.n	80080cc <dir_sdi+0x5c>
 80080c8:	2302      	movs	r3, #2
 80080ca:	e048      	b.n	800815e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	61da      	str	r2, [r3, #28]
 80080d4:	e029      	b.n	800812a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	895b      	ldrh	r3, [r3, #10]
 80080da:	025b      	lsls	r3, r3, #9
 80080dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80080de:	e019      	b.n	8008114 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6979      	ldr	r1, [r7, #20]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fd00 	bl	8007aea <get_fat>
 80080ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d101      	bne.n	80080f8 <dir_sdi+0x88>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e032      	b.n	800815e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d904      	bls.n	8008108 <dir_sdi+0x98>
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	429a      	cmp	r2, r3
 8008106:	d301      	bcc.n	800810c <dir_sdi+0x9c>
 8008108:	2302      	movs	r3, #2
 800810a:	e028      	b.n	800815e <dir_sdi+0xee>
			ofs -= csz;
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	429a      	cmp	r2, r3
 800811a:	d2e1      	bcs.n	80080e0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800811c:	6979      	ldr	r1, [r7, #20]
 800811e:	6938      	ldr	r0, [r7, #16]
 8008120:	f7ff fcc4 	bl	8007aac <clust2sect>
 8008124:	4602      	mov	r2, r0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <dir_sdi+0xcc>
 8008138:	2302      	movs	r3, #2
 800813a:	e010      	b.n	800815e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69da      	ldr	r2, [r3, #28]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	0a5b      	lsrs	r3, r3, #9
 8008144:	441a      	add	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	441a      	add	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	3320      	adds	r3, #32
 800817c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <dir_next+0x28>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800818c:	d301      	bcc.n	8008192 <dir_next+0x2c>
 800818e:	2304      	movs	r3, #4
 8008190:	e0aa      	b.n	80082e8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 8098 	bne.w	80082ce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	095b      	lsrs	r3, r3, #5
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	8912      	ldrh	r2, [r2, #8]
 80081b8:	4293      	cmp	r3, r2
 80081ba:	f0c0 8088 	bcc.w	80082ce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	61da      	str	r2, [r3, #28]
 80081c4:	2304      	movs	r3, #4
 80081c6:	e08f      	b.n	80082e8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	0a5b      	lsrs	r3, r3, #9
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	8952      	ldrh	r2, [r2, #10]
 80081d0:	3a01      	subs	r2, #1
 80081d2:	4013      	ands	r3, r2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d17a      	bne.n	80082ce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7ff fc82 	bl	8007aea <get_fat>
 80081e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d801      	bhi.n	80081f2 <dir_next+0x8c>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e07a      	b.n	80082e8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f8:	d101      	bne.n	80081fe <dir_next+0x98>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e074      	b.n	80082e8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	429a      	cmp	r2, r3
 8008206:	d358      	bcc.n	80082ba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d104      	bne.n	8008218 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	61da      	str	r2, [r3, #28]
 8008214:	2304      	movs	r3, #4
 8008216:	e067      	b.n	80082e8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f7ff fe59 	bl	8007ed8 <create_chain>
 8008226:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <dir_next+0xcc>
 800822e:	2307      	movs	r3, #7
 8008230:	e05a      	b.n	80082e8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <dir_next+0xd6>
 8008238:	2302      	movs	r3, #2
 800823a:	e055      	b.n	80082e8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008242:	d101      	bne.n	8008248 <dir_next+0xe2>
 8008244:	2301      	movs	r3, #1
 8008246:	e04f      	b.n	80082e8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f7ff fb4f 	bl	80078ec <sync_window>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <dir_next+0xf2>
 8008254:	2301      	movs	r3, #1
 8008256:	e047      	b.n	80082e8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3334      	adds	r3, #52	; 0x34
 800825c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008260:	2100      	movs	r1, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff f947 	bl	80074f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008268:	2300      	movs	r3, #0
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	6979      	ldr	r1, [r7, #20]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7ff fc1c 	bl	8007aac <clust2sect>
 8008274:	4602      	mov	r2, r0
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
 800827a:	e012      	b.n	80082a2 <dir_next+0x13c>
						fs->wflag = 1;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff fb32 	bl	80078ec <sync_window>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <dir_next+0x12c>
 800828e:	2301      	movs	r3, #1
 8008290:	e02a      	b.n	80082e8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3301      	adds	r3, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	631a      	str	r2, [r3, #48]	; 0x30
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	895b      	ldrh	r3, [r3, #10]
 80082a6:	461a      	mov	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d3e6      	bcc.n	800827c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	1ad2      	subs	r2, r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80082c0:	6979      	ldr	r1, [r7, #20]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff fbf2 	bl	8007aac <clust2sect>
 80082c8:	4602      	mov	r2, r0
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e0:	441a      	add	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008300:	2100      	movs	r1, #0
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff feb4 	bl	8008070 <dir_sdi>
 8008308:	4603      	mov	r3, r0
 800830a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d12b      	bne.n	800836a <dir_alloc+0x7a>
		n = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	4619      	mov	r1, r3
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fb29 	bl	8007974 <move_window>
 8008322:	4603      	mov	r3, r0
 8008324:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d11d      	bne.n	8008368 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2be5      	cmp	r3, #229	; 0xe5
 8008334:	d004      	beq.n	8008340 <dir_alloc+0x50>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d107      	bne.n	8008350 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	3301      	adds	r3, #1
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d102      	bne.n	8008354 <dir_alloc+0x64>
 800834e:	e00c      	b.n	800836a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008354:	2101      	movs	r1, #1
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff ff05 	bl	8008166 <dir_next>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0d7      	beq.n	8008316 <dir_alloc+0x26>
 8008366:	e000      	b.n	800836a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008368:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	2b04      	cmp	r3, #4
 800836e:	d101      	bne.n	8008374 <dir_alloc+0x84>
 8008370:	2307      	movs	r3, #7
 8008372:	75fb      	strb	r3, [r7, #23]
	return res;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	331a      	adds	r3, #26
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff f80f 	bl	80073b0 <ld_word>
 8008392:	4603      	mov	r3, r0
 8008394:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b03      	cmp	r3, #3
 800839c:	d109      	bne.n	80083b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	3314      	adds	r3, #20
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff f804 	bl	80073b0 <ld_word>
 80083a8:	4603      	mov	r3, r0
 80083aa:	041b      	lsls	r3, r3, #16
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80083b2:	68fb      	ldr	r3, [r7, #12]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	331a      	adds	r3, #26
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	b292      	uxth	r2, r2
 80083d0:	4611      	mov	r1, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff f827 	bl	8007426 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d109      	bne.n	80083f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f103 0214 	add.w	r2, r3, #20
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7ff f819 	bl	8007426 <st_word>
	}
}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008406:	2304      	movs	r3, #4
 8008408:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008410:	e03c      	b.n	800848c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	4619      	mov	r1, r3
 8008418:	6938      	ldr	r0, [r7, #16]
 800841a:	f7ff faab 	bl	8007974 <move_window>
 800841e:	4603      	mov	r3, r0
 8008420:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008422:	7dfb      	ldrb	r3, [r7, #23]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d136      	bne.n	8008496 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008436:	2304      	movs	r3, #4
 8008438:	75fb      	strb	r3, [r7, #23]
 800843a:	e031      	b.n	80084a0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	330b      	adds	r3, #11
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008448:	73bb      	strb	r3, [r7, #14]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7bba      	ldrb	r2, [r7, #14]
 800844e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	2be5      	cmp	r3, #229	; 0xe5
 8008454:	d011      	beq.n	800847a <dir_read+0x7e>
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	2b2e      	cmp	r3, #46	; 0x2e
 800845a:	d00e      	beq.n	800847a <dir_read+0x7e>
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b0f      	cmp	r3, #15
 8008460:	d00b      	beq.n	800847a <dir_read+0x7e>
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	f023 0320 	bic.w	r3, r3, #32
 8008468:	2b08      	cmp	r3, #8
 800846a:	bf0c      	ite	eq
 800846c:	2301      	moveq	r3, #1
 800846e:	2300      	movne	r3, #0
 8008470:	b2db      	uxtb	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	4293      	cmp	r3, r2
 8008478:	d00f      	beq.n	800849a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800847a:	2100      	movs	r1, #0
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff fe72 	bl	8008166 <dir_next>
 8008482:	4603      	mov	r3, r0
 8008484:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <dir_read+0xa2>
	while (dp->sect) {
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1be      	bne.n	8008412 <dir_read+0x16>
 8008494:	e004      	b.n	80084a0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008496:	bf00      	nop
 8008498:	e002      	b.n	80084a0 <dir_read+0xa4>
				break;
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <dir_read+0xa4>
		if (res != FR_OK) break;
 800849e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <dir_read+0xb0>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	61da      	str	r2, [r3, #28]
	return res;
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b086      	sub	sp, #24
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80084c4:	2100      	movs	r1, #0
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff fdd2 	bl	8008070 <dir_sdi>
 80084cc:	4603      	mov	r3, r0
 80084ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <dir_find+0x24>
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	e03e      	b.n	8008558 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	4619      	mov	r1, r3
 80084e0:	6938      	ldr	r0, [r7, #16]
 80084e2:	f7ff fa47 	bl	8007974 <move_window>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d12f      	bne.n	8008550 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <dir_find+0x4e>
 80084fe:	2304      	movs	r3, #4
 8008500:	75fb      	strb	r3, [r7, #23]
 8008502:	e028      	b.n	8008556 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	330b      	adds	r3, #11
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008510:	b2da      	uxtb	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	330b      	adds	r3, #11
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <dir_find+0x86>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a18      	ldr	r0, [r3, #32]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3324      	adds	r3, #36	; 0x24
 800852e:	220b      	movs	r2, #11
 8008530:	4619      	mov	r1, r3
 8008532:	f7fe fffb 	bl	800752c <mem_cmp>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800853c:	2100      	movs	r1, #0
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff fe11 	bl	8008166 <dir_next>
 8008544:	4603      	mov	r3, r0
 8008546:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0c5      	beq.n	80084da <dir_find+0x24>
 800854e:	e002      	b.n	8008556 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008550:	bf00      	nop
 8008552:	e000      	b.n	8008556 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008554:	bf00      	nop

	return res;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3718      	adds	r7, #24
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800856e:	2101      	movs	r1, #1
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff febd 	bl	80082f0 <dir_alloc>
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d11c      	bne.n	80085ba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	4619      	mov	r1, r3
 8008586:	68b8      	ldr	r0, [r7, #8]
 8008588:	f7ff f9f4 	bl	8007974 <move_window>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d111      	bne.n	80085ba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	2220      	movs	r2, #32
 800859c:	2100      	movs	r1, #0
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe ffa9 	bl	80074f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a18      	ldr	r0, [r3, #32]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3324      	adds	r3, #36	; 0x24
 80085ac:	220b      	movs	r2, #11
 80085ae:	4619      	mov	r1, r3
 80085b0:	f7fe ff80 	bl	80074b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2201      	movs	r2, #1
 80085b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff f9cb 	bl	8007974 <move_window>
 80085de:	4603      	mov	r3, r0
 80085e0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80085e2:	7afb      	ldrb	r3, [r7, #11]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	22e5      	movs	r2, #229	; 0xe5
 80085ee:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80085f6:	7afb      	ldrb	r3, [r7, #11]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2200      	movs	r2, #0
 800860e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d04e      	beq.n	80086b6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008620:	e021      	b.n	8008666 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1a      	ldr	r2, [r3, #32]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	1c59      	adds	r1, r3, #1
 800862a:	6179      	str	r1, [r7, #20]
 800862c:	4413      	add	r3, r2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	2b20      	cmp	r3, #32
 8008636:	d100      	bne.n	800863a <get_fileinfo+0x3a>
 8008638:	e015      	b.n	8008666 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	2b05      	cmp	r3, #5
 800863e:	d101      	bne.n	8008644 <get_fileinfo+0x44>
 8008640:	23e5      	movs	r3, #229	; 0xe5
 8008642:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b09      	cmp	r3, #9
 8008648:	d106      	bne.n	8008658 <get_fileinfo+0x58>
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	613a      	str	r2, [r7, #16]
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	4413      	add	r3, r2
 8008654:	222e      	movs	r2, #46	; 0x2e
 8008656:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	613a      	str	r2, [r7, #16]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	4413      	add	r3, r2
 8008662:	7bfa      	ldrb	r2, [r7, #15]
 8008664:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2b0a      	cmp	r3, #10
 800866a:	d9da      	bls.n	8008622 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	4413      	add	r3, r2
 8008672:	3309      	adds	r3, #9
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	7ada      	ldrb	r2, [r3, #11]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	331c      	adds	r3, #28
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fea9 	bl	80073e0 <ld_dword>
 800868e:	4602      	mov	r2, r0
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	3316      	adds	r3, #22
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fea0 	bl	80073e0 <ld_dword>
 80086a0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	80da      	strh	r2, [r3, #6]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	0c1b      	lsrs	r3, r3, #16
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	809a      	strh	r2, [r3, #4]
 80086b4:	e000      	b.n	80086b8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80086b6:	bf00      	nop
}
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3324      	adds	r3, #36	; 0x24
 80086d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80086d6:	220b      	movs	r2, #11
 80086d8:	2120      	movs	r1, #32
 80086da:	68b8      	ldr	r0, [r7, #8]
 80086dc:	f7fe ff0b 	bl	80074f6 <mem_set>
	si = i = 0; ni = 8;
 80086e0:	2300      	movs	r3, #0
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	2308      	movs	r3, #8
 80086ea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	61fa      	str	r2, [r7, #28]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4413      	add	r3, r2
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80086fa:	7efb      	ldrb	r3, [r7, #27]
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d94e      	bls.n	800879e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008700:	7efb      	ldrb	r3, [r7, #27]
 8008702:	2b2f      	cmp	r3, #47	; 0x2f
 8008704:	d006      	beq.n	8008714 <create_name+0x54>
 8008706:	7efb      	ldrb	r3, [r7, #27]
 8008708:	2b5c      	cmp	r3, #92	; 0x5c
 800870a:	d110      	bne.n	800872e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800870c:	e002      	b.n	8008714 <create_name+0x54>
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	3301      	adds	r3, #1
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	4413      	add	r3, r2
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b2f      	cmp	r3, #47	; 0x2f
 800871e:	d0f6      	beq.n	800870e <create_name+0x4e>
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b5c      	cmp	r3, #92	; 0x5c
 800872a:	d0f0      	beq.n	800870e <create_name+0x4e>
			break;
 800872c:	e038      	b.n	80087a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800872e:	7efb      	ldrb	r3, [r7, #27]
 8008730:	2b2e      	cmp	r3, #46	; 0x2e
 8008732:	d003      	beq.n	800873c <create_name+0x7c>
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	429a      	cmp	r2, r3
 800873a:	d30c      	bcc.n	8008756 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b0b      	cmp	r3, #11
 8008740:	d002      	beq.n	8008748 <create_name+0x88>
 8008742:	7efb      	ldrb	r3, [r7, #27]
 8008744:	2b2e      	cmp	r3, #46	; 0x2e
 8008746:	d001      	beq.n	800874c <create_name+0x8c>
 8008748:	2306      	movs	r3, #6
 800874a:	e044      	b.n	80087d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800874c:	2308      	movs	r3, #8
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	230b      	movs	r3, #11
 8008752:	617b      	str	r3, [r7, #20]
			continue;
 8008754:	e022      	b.n	800879c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008756:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800875a:	2b00      	cmp	r3, #0
 800875c:	da04      	bge.n	8008768 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800875e:	7efb      	ldrb	r3, [r7, #27]
 8008760:	3b80      	subs	r3, #128	; 0x80
 8008762:	4a1f      	ldr	r2, [pc, #124]	; (80087e0 <create_name+0x120>)
 8008764:	5cd3      	ldrb	r3, [r2, r3]
 8008766:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008768:	7efb      	ldrb	r3, [r7, #27]
 800876a:	4619      	mov	r1, r3
 800876c:	481d      	ldr	r0, [pc, #116]	; (80087e4 <create_name+0x124>)
 800876e:	f7fe ff04 	bl	800757a <chk_chr>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <create_name+0xbc>
 8008778:	2306      	movs	r3, #6
 800877a:	e02c      	b.n	80087d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800877c:	7efb      	ldrb	r3, [r7, #27]
 800877e:	2b60      	cmp	r3, #96	; 0x60
 8008780:	d905      	bls.n	800878e <create_name+0xce>
 8008782:	7efb      	ldrb	r3, [r7, #27]
 8008784:	2b7a      	cmp	r3, #122	; 0x7a
 8008786:	d802      	bhi.n	800878e <create_name+0xce>
 8008788:	7efb      	ldrb	r3, [r7, #27]
 800878a:	3b20      	subs	r3, #32
 800878c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	613a      	str	r2, [r7, #16]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	4413      	add	r3, r2
 8008798:	7efa      	ldrb	r2, [r7, #27]
 800879a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800879c:	e7a6      	b.n	80086ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800879e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	441a      	add	r2, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <create_name+0xf4>
 80087b0:	2306      	movs	r3, #6
 80087b2:	e010      	b.n	80087d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2be5      	cmp	r3, #229	; 0xe5
 80087ba:	d102      	bne.n	80087c2 <create_name+0x102>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2205      	movs	r2, #5
 80087c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80087c2:	7efb      	ldrb	r3, [r7, #27]
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	d801      	bhi.n	80087cc <create_name+0x10c>
 80087c8:	2204      	movs	r2, #4
 80087ca:	e000      	b.n	80087ce <create_name+0x10e>
 80087cc:	2200      	movs	r2, #0
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	330b      	adds	r3, #11
 80087d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80087d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	0800fb1c 	.word	0x0800fb1c
 80087e4:	0800fab0 	.word	0x0800fab0

080087e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80087fc:	e002      	b.n	8008804 <follow_path+0x1c>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b2f      	cmp	r3, #47	; 0x2f
 800880a:	d0f8      	beq.n	80087fe <follow_path+0x16>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b5c      	cmp	r3, #92	; 0x5c
 8008812:	d0f4      	beq.n	80087fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2200      	movs	r2, #0
 8008818:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b1f      	cmp	r3, #31
 8008820:	d80a      	bhi.n	8008838 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2280      	movs	r2, #128	; 0x80
 8008826:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fc1f 	bl	8008070 <dir_sdi>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]
 8008836:	e043      	b.n	80088c0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008838:	463b      	mov	r3, r7
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ff3f 	bl	80086c0 <create_name>
 8008842:	4603      	mov	r3, r0
 8008844:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d134      	bne.n	80088b6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff fe32 	bl	80084b6 <dir_find>
 8008852:	4603      	mov	r3, r0
 8008854:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800885c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b04      	cmp	r3, #4
 8008868:	d127      	bne.n	80088ba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800886a:	7afb      	ldrb	r3, [r7, #11]
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d122      	bne.n	80088ba <follow_path+0xd2>
 8008874:	2305      	movs	r3, #5
 8008876:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008878:	e01f      	b.n	80088ba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11c      	bne.n	80088be <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	799b      	ldrb	r3, [r3, #6]
 8008888:	f003 0310 	and.w	r3, r3, #16
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008890:	2305      	movs	r3, #5
 8008892:	75fb      	strb	r3, [r7, #23]
 8008894:	e014      	b.n	80088c0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a4:	4413      	add	r3, r2
 80088a6:	4619      	mov	r1, r3
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff fd68 	bl	800837e <ld_clust>
 80088ae:	4602      	mov	r2, r0
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80088b4:	e7c0      	b.n	8008838 <follow_path+0x50>
			if (res != FR_OK) break;
 80088b6:	bf00      	nop
 80088b8:	e002      	b.n	80088c0 <follow_path+0xd8>
				break;
 80088ba:	bf00      	nop
 80088bc:	e000      	b.n	80088c0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088be:	bf00      	nop
			}
		}
	}

	return res;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b087      	sub	sp, #28
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295
 80088d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d031      	beq.n	8008944 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	e002      	b.n	80088ee <get_ldnumber+0x24>
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	3301      	adds	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	d903      	bls.n	80088fe <get_ldnumber+0x34>
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b3a      	cmp	r3, #58	; 0x3a
 80088fc:	d1f4      	bne.n	80088e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b3a      	cmp	r3, #58	; 0x3a
 8008904:	d11c      	bne.n	8008940 <get_ldnumber+0x76>
			tp = *path;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	60fa      	str	r2, [r7, #12]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	3b30      	subs	r3, #48	; 0x30
 8008916:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b09      	cmp	r3, #9
 800891c:	d80e      	bhi.n	800893c <get_ldnumber+0x72>
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	429a      	cmp	r2, r3
 8008924:	d10a      	bne.n	800893c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d107      	bne.n	800893c <get_ldnumber+0x72>
					vol = (int)i;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3301      	adds	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	e002      	b.n	8008946 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008940:	2300      	movs	r3, #0
 8008942:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008944:	693b      	ldr	r3, [r7, #16]
}
 8008946:	4618      	mov	r0, r3
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	70da      	strb	r2, [r3, #3]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff f800 	bl	8007974 <move_window>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <check_fs+0x2a>
 800897a:	2304      	movs	r3, #4
 800897c:	e038      	b.n	80089f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3334      	adds	r3, #52	; 0x34
 8008982:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe fd12 	bl	80073b0 <ld_word>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008994:	429a      	cmp	r2, r3
 8008996:	d001      	beq.n	800899c <check_fs+0x48>
 8008998:	2303      	movs	r3, #3
 800899a:	e029      	b.n	80089f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089a2:	2be9      	cmp	r3, #233	; 0xe9
 80089a4:	d009      	beq.n	80089ba <check_fs+0x66>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089ac:	2beb      	cmp	r3, #235	; 0xeb
 80089ae:	d11e      	bne.n	80089ee <check_fs+0x9a>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80089b6:	2b90      	cmp	r3, #144	; 0x90
 80089b8:	d119      	bne.n	80089ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3334      	adds	r3, #52	; 0x34
 80089be:	3336      	adds	r3, #54	; 0x36
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fd0d 	bl	80073e0 <ld_dword>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089cc:	4a0a      	ldr	r2, [pc, #40]	; (80089f8 <check_fs+0xa4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d101      	bne.n	80089d6 <check_fs+0x82>
 80089d2:	2300      	movs	r3, #0
 80089d4:	e00c      	b.n	80089f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3334      	adds	r3, #52	; 0x34
 80089da:	3352      	adds	r3, #82	; 0x52
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe fcff 	bl	80073e0 <ld_dword>
 80089e2:	4603      	mov	r3, r0
 80089e4:	4a05      	ldr	r2, [pc, #20]	; (80089fc <check_fs+0xa8>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d101      	bne.n	80089ee <check_fs+0x9a>
 80089ea:	2300      	movs	r3, #0
 80089ec:	e000      	b.n	80089f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80089ee:	2302      	movs	r3, #2
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	00544146 	.word	0x00544146
 80089fc:	33544146 	.word	0x33544146

08008a00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b096      	sub	sp, #88	; 0x58
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f7ff ff58 	bl	80088ca <get_ldnumber>
 8008a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	da01      	bge.n	8008a26 <find_volume+0x26>
 8008a22:	230b      	movs	r3, #11
 8008a24:	e235      	b.n	8008e92 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a26:	4aa5      	ldr	r2, [pc, #660]	; (8008cbc <find_volume+0x2bc>)
 8008a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <find_volume+0x3a>
 8008a36:	230c      	movs	r3, #12
 8008a38:	e22b      	b.n	8008e92 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8008a3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a3c:	f7fe fdb8 	bl	80075b0 <lock_fs>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <find_volume+0x4a>
 8008a46:	230f      	movs	r3, #15
 8008a48:	e223      	b.n	8008e92 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	f023 0301 	bic.w	r3, r3, #1
 8008a56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01a      	beq.n	8008a96 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe fc05 	bl	8007274 <disk_status>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10c      	bne.n	8008a96 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d007      	beq.n	8008a92 <find_volume+0x92>
 8008a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008a8e:	230a      	movs	r3, #10
 8008a90:	e1ff      	b.n	8008e92 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8008a92:	2300      	movs	r3, #0
 8008a94:	e1fd      	b.n	8008e92 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	2200      	movs	r2, #0
 8008a9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fe fbfd 	bl	80072a8 <disk_initialize>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e1e6      	b.n	8008e92 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d007      	beq.n	8008ada <find_volume+0xda>
 8008aca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008ad6:	230a      	movs	r3, #10
 8008ad8:	e1db      	b.n	8008e92 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008ade:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ae2:	f7ff ff37 	bl	8008954 <check_fs>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008aec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d149      	bne.n	8008b88 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008af4:	2300      	movs	r3, #0
 8008af6:	643b      	str	r3, [r7, #64]	; 0x40
 8008af8:	e01e      	b.n	8008b38 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008b08:	4413      	add	r3, r2
 8008b0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	3304      	adds	r3, #4
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d006      	beq.n	8008b24 <find_volume+0x124>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	3308      	adds	r3, #8
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fc60 	bl	80073e0 <ld_dword>
 8008b20:	4602      	mov	r2, r0
 8008b22:	e000      	b.n	8008b26 <find_volume+0x126>
 8008b24:	2200      	movs	r2, #0
 8008b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	3358      	adds	r3, #88	; 0x58
 8008b2c:	443b      	add	r3, r7
 8008b2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b34:	3301      	adds	r3, #1
 8008b36:	643b      	str	r3, [r7, #64]	; 0x40
 8008b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d9dd      	bls.n	8008afa <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b3e:	2300      	movs	r3, #0
 8008b40:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <find_volume+0x14e>
 8008b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	3358      	adds	r3, #88	; 0x58
 8008b54:	443b      	add	r3, r7
 8008b56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d005      	beq.n	8008b6e <find_volume+0x16e>
 8008b62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b66:	f7ff fef5 	bl	8008954 <check_fs>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	e000      	b.n	8008b70 <find_volume+0x170>
 8008b6e:	2303      	movs	r3, #3
 8008b70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d905      	bls.n	8008b88 <find_volume+0x188>
 8008b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7e:	3301      	adds	r3, #1
 8008b80:	643b      	str	r3, [r7, #64]	; 0x40
 8008b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d9e2      	bls.n	8008b4e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d101      	bne.n	8008b94 <find_volume+0x194>
 8008b90:	2301      	movs	r3, #1
 8008b92:	e17e      	b.n	8008e92 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d901      	bls.n	8008ba0 <find_volume+0x1a0>
 8008b9c:	230d      	movs	r3, #13
 8008b9e:	e178      	b.n	8008e92 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	3334      	adds	r3, #52	; 0x34
 8008ba4:	330b      	adds	r3, #11
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fc02 	bl	80073b0 <ld_word>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bb2:	d001      	beq.n	8008bb8 <find_volume+0x1b8>
 8008bb4:	230d      	movs	r3, #13
 8008bb6:	e16c      	b.n	8008e92 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	3334      	adds	r3, #52	; 0x34
 8008bbc:	3316      	adds	r3, #22
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fe fbf6 	bl	80073b0 <ld_word>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <find_volume+0x1dc>
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	3334      	adds	r3, #52	; 0x34
 8008bd2:	3324      	adds	r3, #36	; 0x24
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe fc03 	bl	80073e0 <ld_dword>
 8008bda:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008be0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	789b      	ldrb	r3, [r3, #2]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d005      	beq.n	8008c00 <find_volume+0x200>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	789b      	ldrb	r3, [r3, #2]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d001      	beq.n	8008c00 <find_volume+0x200>
 8008bfc:	230d      	movs	r3, #13
 8008bfe:	e148      	b.n	8008e92 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	789b      	ldrb	r3, [r3, #2]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c08:	fb02 f303 	mul.w	r3, r2, r3
 8008c0c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	895b      	ldrh	r3, [r3, #10]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d008      	beq.n	8008c34 <find_volume+0x234>
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	895b      	ldrh	r3, [r3, #10]
 8008c26:	461a      	mov	r2, r3
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	895b      	ldrh	r3, [r3, #10]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	4013      	ands	r3, r2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <find_volume+0x238>
 8008c34:	230d      	movs	r3, #13
 8008c36:	e12c      	b.n	8008e92 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	3334      	adds	r3, #52	; 0x34
 8008c3c:	3311      	adds	r3, #17
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe fbb6 	bl	80073b0 <ld_word>
 8008c44:	4603      	mov	r3, r0
 8008c46:	461a      	mov	r2, r3
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4e:	891b      	ldrh	r3, [r3, #8]
 8008c50:	f003 030f 	and.w	r3, r3, #15
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <find_volume+0x25e>
 8008c5a:	230d      	movs	r3, #13
 8008c5c:	e119      	b.n	8008e92 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	3334      	adds	r3, #52	; 0x34
 8008c62:	3313      	adds	r3, #19
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe fba3 	bl	80073b0 <ld_word>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <find_volume+0x282>
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	3334      	adds	r3, #52	; 0x34
 8008c78:	3320      	adds	r3, #32
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fbb0 	bl	80073e0 <ld_dword>
 8008c80:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c84:	3334      	adds	r3, #52	; 0x34
 8008c86:	330e      	adds	r3, #14
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe fb91 	bl	80073b0 <ld_word>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <find_volume+0x29c>
 8008c98:	230d      	movs	r3, #13
 8008c9a:	e0fa      	b.n	8008e92 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca0:	4413      	add	r3, r2
 8008ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca4:	8912      	ldrh	r2, [r2, #8]
 8008ca6:	0912      	lsrs	r2, r2, #4
 8008ca8:	b292      	uxth	r2, r2
 8008caa:	4413      	add	r3, r2
 8008cac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d204      	bcs.n	8008cc0 <find_volume+0x2c0>
 8008cb6:	230d      	movs	r3, #13
 8008cb8:	e0eb      	b.n	8008e92 <find_volume+0x492>
 8008cba:	bf00      	nop
 8008cbc:	2000559c 	.word	0x2000559c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cc8:	8952      	ldrh	r2, [r2, #10]
 8008cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <find_volume+0x2da>
 8008cd6:	230d      	movs	r3, #13
 8008cd8:	e0db      	b.n	8008e92 <find_volume+0x492>
		fmt = FS_FAT32;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d802      	bhi.n	8008cf0 <find_volume+0x2f0>
 8008cea:	2302      	movs	r3, #2
 8008cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d802      	bhi.n	8008d00 <find_volume+0x300>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	1c9a      	adds	r2, r3, #2
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d0c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008d0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d12:	441a      	add	r2, r3
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	441a      	add	r2, r3
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008d22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d11e      	bne.n	8008d68 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	3334      	adds	r3, #52	; 0x34
 8008d2e:	332a      	adds	r3, #42	; 0x2a
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fb3d 	bl	80073b0 <ld_word>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <find_volume+0x340>
 8008d3c:	230d      	movs	r3, #13
 8008d3e:	e0a8      	b.n	8008e92 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	891b      	ldrh	r3, [r3, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <find_volume+0x34c>
 8008d48:	230d      	movs	r3, #13
 8008d4a:	e0a2      	b.n	8008e92 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	3334      	adds	r3, #52	; 0x34
 8008d50:	332c      	adds	r3, #44	; 0x2c
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fb44 	bl	80073e0 <ld_dword>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	647b      	str	r3, [r7, #68]	; 0x44
 8008d66:	e01f      	b.n	8008da8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	891b      	ldrh	r3, [r3, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <find_volume+0x374>
 8008d70:	230d      	movs	r3, #13
 8008d72:	e08e      	b.n	8008e92 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7a:	441a      	add	r2, r3
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d103      	bne.n	8008d90 <find_volume+0x390>
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	e00a      	b.n	8008da6 <find_volume+0x3a6>
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	4613      	mov	r3, r2
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	4413      	add	r3, r2
 8008d9a:	085a      	lsrs	r2, r3, #1
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008da6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	69da      	ldr	r2, [r3, #28]
 8008dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008db2:	0a5b      	lsrs	r3, r3, #9
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d201      	bcs.n	8008dbc <find_volume+0x3bc>
 8008db8:	230d      	movs	r3, #13
 8008dba:	e06a      	b.n	8008e92 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	615a      	str	r2, [r3, #20]
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc6:	695a      	ldr	r2, [r3, #20]
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	2280      	movs	r2, #128	; 0x80
 8008dd0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008dd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d149      	bne.n	8008e6e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	3334      	adds	r3, #52	; 0x34
 8008dde:	3330      	adds	r3, #48	; 0x30
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe fae5 	bl	80073b0 <ld_word>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d140      	bne.n	8008e6e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dee:	3301      	adds	r3, #1
 8008df0:	4619      	mov	r1, r3
 8008df2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008df4:	f7fe fdbe 	bl	8007974 <move_window>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d137      	bne.n	8008e6e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	2200      	movs	r2, #0
 8008e02:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	3334      	adds	r3, #52	; 0x34
 8008e08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fe facf 	bl	80073b0 <ld_word>
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d127      	bne.n	8008e6e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	3334      	adds	r3, #52	; 0x34
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe fadc 	bl	80073e0 <ld_dword>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4a1c      	ldr	r2, [pc, #112]	; (8008e9c <find_volume+0x49c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d11e      	bne.n	8008e6e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	3334      	adds	r3, #52	; 0x34
 8008e34:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fe fad1 	bl	80073e0 <ld_dword>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	4a17      	ldr	r2, [pc, #92]	; (8008ea0 <find_volume+0x4a0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d113      	bne.n	8008e6e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	3334      	adds	r3, #52	; 0x34
 8008e4a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fac6 	bl	80073e0 <ld_dword>
 8008e54:	4602      	mov	r2, r0
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	3334      	adds	r3, #52	; 0x34
 8008e5e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fabc 	bl	80073e0 <ld_dword>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008e74:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e76:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <find_volume+0x4a4>)
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <find_volume+0x4a4>)
 8008e80:	801a      	strh	r2, [r3, #0]
 8008e82:	4b08      	ldr	r3, [pc, #32]	; (8008ea4 <find_volume+0x4a4>)
 8008e84:	881a      	ldrh	r2, [r3, #0]
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008e8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e8c:	f7fe fd0a 	bl	80078a4 <clear_lock>
#endif
	return FR_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3758      	adds	r7, #88	; 0x58
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	41615252 	.word	0x41615252
 8008ea0:	61417272 	.word	0x61417272
 8008ea4:	200055a0 	.word	0x200055a0

08008ea8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008eb2:	2309      	movs	r3, #9
 8008eb4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d02e      	beq.n	8008f1a <validate+0x72>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d02a      	beq.n	8008f1a <validate+0x72>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d025      	beq.n	8008f1a <validate+0x72>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	889a      	ldrh	r2, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	88db      	ldrh	r3, [r3, #6]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d11e      	bne.n	8008f1a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fb65 	bl	80075b0 <lock_fs>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d014      	beq.n	8008f16 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe f9be 	bl	8007274 <disk_status>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <validate+0x60>
				res = FR_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
 8008f06:	e008      	b.n	8008f1a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fb64 	bl	80075dc <unlock_fs>
 8008f14:	e001      	b.n	8008f1a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008f16:	230f      	movs	r3, #15
 8008f18:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d102      	bne.n	8008f26 <validate+0x7e>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	e000      	b.n	8008f28 <validate+0x80>
 8008f26:	2300      	movs	r3, #0
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	6013      	str	r3, [r2, #0]
	return res;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f4a:	f107 0310 	add.w	r3, r7, #16
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff fcbb 	bl	80088ca <get_ldnumber>
 8008f54:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	da01      	bge.n	8008f60 <f_mount+0x28>
 8008f5c:	230b      	movs	r3, #11
 8008f5e:	e048      	b.n	8008ff2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008f60:	4a26      	ldr	r2, [pc, #152]	; (8008ffc <f_mount+0xc4>)
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f68:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00f      	beq.n	8008f90 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f70:	69b8      	ldr	r0, [r7, #24]
 8008f72:	f7fe fc97 	bl	80078a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 ffc3 	bl	8009f06 <ff_del_syncobj>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <f_mount+0x52>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e033      	b.n	8008ff2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00f      	beq.n	8008fb6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	330c      	adds	r3, #12
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f000 ff8d 	bl	8009ec6 <ff_cre_syncobj>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <f_mount+0x7e>
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e01d      	b.n	8008ff2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	4910      	ldr	r1, [pc, #64]	; (8008ffc <f_mount+0xc4>)
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <f_mount+0x94>
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d001      	beq.n	8008fd0 <f_mount+0x98>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e010      	b.n	8008ff2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008fd0:	f107 010c 	add.w	r1, r7, #12
 8008fd4:	f107 0308 	add.w	r3, r7, #8
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fd10 	bl	8008a00 <find_volume>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	7dfa      	ldrb	r2, [r7, #23]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe faf6 	bl	80075dc <unlock_fs>
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2000559c 	.word	0x2000559c

08009000 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b098      	sub	sp, #96	; 0x60
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <f_open+0x18>
 8009014:	2309      	movs	r3, #9
 8009016:	e1b4      	b.n	8009382 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800901e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009020:	79fa      	ldrb	r2, [r7, #7]
 8009022:	f107 0110 	add.w	r1, r7, #16
 8009026:	f107 0308 	add.w	r3, r7, #8
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff fce8 	bl	8008a00 <find_volume>
 8009030:	4603      	mov	r3, r0
 8009032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 8191 	bne.w	8009362 <f_open+0x362>
		dj.obj.fs = fs;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	f107 0314 	add.w	r3, r7, #20
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff fbcb 	bl	80087e8 <follow_path>
 8009052:	4603      	mov	r3, r0
 8009054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800905c:	2b00      	cmp	r3, #0
 800905e:	d11a      	bne.n	8009096 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009060:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009064:	b25b      	sxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	da03      	bge.n	8009072 <f_open+0x72>
				res = FR_INVALID_NAME;
 800906a:	2306      	movs	r3, #6
 800906c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009070:	e011      	b.n	8009096 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009072:	79fb      	ldrb	r3, [r7, #7]
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	bf14      	ite	ne
 800907c:	2301      	movne	r3, #1
 800907e:	2300      	moveq	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	f107 0314 	add.w	r3, r7, #20
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fac2 	bl	8007614 <chk_lock>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	f003 031c 	and.w	r3, r3, #28
 800909c:	2b00      	cmp	r3, #0
 800909e:	d07f      	beq.n	80091a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80090a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d017      	beq.n	80090d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80090a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d10e      	bne.n	80090ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80090b0:	f7fe fb0c 	bl	80076cc <enq_lock>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d006      	beq.n	80090c8 <f_open+0xc8>
 80090ba:	f107 0314 	add.w	r3, r7, #20
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff fa4e 	bl	8008560 <dir_register>
 80090c4:	4603      	mov	r3, r0
 80090c6:	e000      	b.n	80090ca <f_open+0xca>
 80090c8:	2312      	movs	r3, #18
 80090ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	f043 0308 	orr.w	r3, r3, #8
 80090d4:	71fb      	strb	r3, [r7, #7]
 80090d6:	e010      	b.n	80090fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80090d8:	7ebb      	ldrb	r3, [r7, #26]
 80090da:	f003 0311 	and.w	r3, r3, #17
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <f_open+0xea>
					res = FR_DENIED;
 80090e2:	2307      	movs	r3, #7
 80090e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80090e8:	e007      	b.n	80090fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <f_open+0xfa>
 80090f4:	2308      	movs	r3, #8
 80090f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80090fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d168      	bne.n	80091d4 <f_open+0x1d4>
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b00      	cmp	r3, #0
 800910a:	d063      	beq.n	80091d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800910c:	f7fe f854 	bl	80071b8 <get_fattime>
 8009110:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	330e      	adds	r3, #14
 8009116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009118:	4618      	mov	r0, r3
 800911a:	f7fe f99f 	bl	800745c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800911e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009120:	3316      	adds	r3, #22
 8009122:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe f999 	bl	800745c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800912a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912c:	330b      	adds	r3, #11
 800912e:	2220      	movs	r2, #32
 8009130:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009136:	4611      	mov	r1, r2
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff f920 	bl	800837e <ld_clust>
 800913e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009144:	2200      	movs	r2, #0
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff f938 	bl	80083bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800914c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914e:	331c      	adds	r3, #28
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe f982 	bl	800745c <st_dword>
					fs->wflag = 1;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	2201      	movs	r2, #1
 800915c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800915e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d037      	beq.n	80091d4 <f_open+0x1d4>
						dw = fs->winsect;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800916a:	f107 0314 	add.w	r3, r7, #20
 800916e:	2200      	movs	r2, #0
 8009170:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fe4b 	bl	8007e0e <remove_chain>
 8009178:	4603      	mov	r3, r0
 800917a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800917e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009182:	2b00      	cmp	r3, #0
 8009184:	d126      	bne.n	80091d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fbf2 	bl	8007974 <move_window>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800919a:	3a01      	subs	r2, #1
 800919c:	611a      	str	r2, [r3, #16]
 800919e:	e019      	b.n	80091d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80091a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d115      	bne.n	80091d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80091a8:	7ebb      	ldrb	r3, [r7, #26]
 80091aa:	f003 0310 	and.w	r3, r3, #16
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <f_open+0x1ba>
					res = FR_NO_FILE;
 80091b2:	2304      	movs	r3, #4
 80091b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80091b8:	e00c      	b.n	80091d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <f_open+0x1d4>
 80091c4:	7ebb      	ldrb	r3, [r7, #26]
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d002      	beq.n	80091d4 <f_open+0x1d4>
						res = FR_DENIED;
 80091ce:	2307      	movs	r3, #7
 80091d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80091d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d128      	bne.n	800922e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80091f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	f023 0301 	bic.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	bf14      	ite	ne
 8009206:	2301      	movne	r3, #1
 8009208:	2300      	moveq	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	461a      	mov	r2, r3
 800920e:	f107 0314 	add.w	r3, r7, #20
 8009212:	4611      	mov	r1, r2
 8009214:	4618      	mov	r0, r3
 8009216:	f7fe fa7b 	bl	8007710 <inc_lock>
 800921a:	4602      	mov	r2, r0
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <f_open+0x22e>
 8009228:	2302      	movs	r3, #2
 800922a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800922e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009232:	2b00      	cmp	r3, #0
 8009234:	f040 8095 	bne.w	8009362 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff f89d 	bl	800837e <ld_clust>
 8009244:	4602      	mov	r2, r0
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	331c      	adds	r3, #28
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe f8c6 	bl	80073e0 <ld_dword>
 8009254:	4602      	mov	r2, r0
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	88da      	ldrh	r2, [r3, #6]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	79fa      	ldrb	r2, [r7, #7]
 8009272:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3330      	adds	r3, #48	; 0x30
 800928a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800928e:	2100      	movs	r1, #0
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe f930 	bl	80074f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	f003 0320 	and.w	r3, r3, #32
 800929c:	2b00      	cmp	r3, #0
 800929e:	d060      	beq.n	8009362 <f_open+0x362>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d05c      	beq.n	8009362 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	895b      	ldrh	r3, [r3, #10]
 80092b4:	025b      	lsls	r3, r3, #9
 80092b6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	657b      	str	r3, [r7, #84]	; 0x54
 80092c4:	e016      	b.n	80092f4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe fc0d 	bl	8007aea <get_fat>
 80092d0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80092d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d802      	bhi.n	80092de <f_open+0x2de>
 80092d8:	2302      	movs	r3, #2
 80092da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80092de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e4:	d102      	bne.n	80092ec <f_open+0x2ec>
 80092e6:	2301      	movs	r3, #1
 80092e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80092ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	657b      	str	r3, [r7, #84]	; 0x54
 80092f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d103      	bne.n	8009304 <f_open+0x304>
 80092fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009300:	429a      	cmp	r2, r3
 8009302:	d8e0      	bhi.n	80092c6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009308:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800930a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800930e:	2b00      	cmp	r3, #0
 8009310:	d127      	bne.n	8009362 <f_open+0x362>
 8009312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009318:	2b00      	cmp	r3, #0
 800931a:	d022      	beq.n	8009362 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe fbc3 	bl	8007aac <clust2sect>
 8009326:	6478      	str	r0, [r7, #68]	; 0x44
 8009328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800932a:	2b00      	cmp	r3, #0
 800932c:	d103      	bne.n	8009336 <f_open+0x336>
						res = FR_INT_ERR;
 800932e:	2302      	movs	r3, #2
 8009330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009334:	e015      	b.n	8009362 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009338:	0a5a      	lsrs	r2, r3, #9
 800933a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800933c:	441a      	add	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	7858      	ldrb	r0, [r3, #1]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	2301      	movs	r3, #1
 8009352:	f7fd ffcf 	bl	80072f4 <disk_read>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <f_open+0x362>
 800935c:	2301      	movs	r3, #1
 800935e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <f_open+0x370>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe f92f 	bl	80075dc <unlock_fs>
 800937e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009382:	4618      	mov	r0, r3
 8009384:	3760      	adds	r7, #96	; 0x60
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b08c      	sub	sp, #48	; 0x30
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	607a      	str	r2, [r7, #4]
 8009396:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f107 0210 	add.w	r2, r7, #16
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff fd7c 	bl	8008ea8 <validate>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80093b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d107      	bne.n	80093ce <f_write+0x44>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	7d5b      	ldrb	r3, [r3, #21]
 80093c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80093c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d009      	beq.n	80093e2 <f_write+0x58>
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe f900 	bl	80075dc <unlock_fs>
 80093dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093e0:	e173      	b.n	80096ca <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	7d1b      	ldrb	r3, [r3, #20]
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d106      	bne.n	80093fc <f_write+0x72>
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2107      	movs	r1, #7
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe f8f2 	bl	80075dc <unlock_fs>
 80093f8:	2307      	movs	r3, #7
 80093fa:	e166      	b.n	80096ca <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	441a      	add	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	429a      	cmp	r2, r3
 800940a:	f080 814b 	bcs.w	80096a4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	43db      	mvns	r3, r3
 8009414:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009416:	e145      	b.n	80096a4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 8101 	bne.w	8009628 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	0a5b      	lsrs	r3, r3, #9
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	8952      	ldrh	r2, [r2, #10]
 8009430:	3a01      	subs	r2, #1
 8009432:	4013      	ands	r3, r2
 8009434:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d14d      	bne.n	80094d8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10c      	bne.n	800945e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	2b00      	cmp	r3, #0
 800944e:	d11a      	bne.n	8009486 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe fd3f 	bl	8007ed8 <create_chain>
 800945a:	62b8      	str	r0, [r7, #40]	; 0x28
 800945c:	e013      	b.n	8009486 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	4619      	mov	r1, r3
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7fe fdcb 	bl	8008008 <clmt_clust>
 8009472:	62b8      	str	r0, [r7, #40]	; 0x28
 8009474:	e007      	b.n	8009486 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fe fd2a 	bl	8007ed8 <create_chain>
 8009484:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 8110 	beq.w	80096ae <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	2b01      	cmp	r3, #1
 8009492:	d109      	bne.n	80094a8 <f_write+0x11e>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2202      	movs	r2, #2
 8009498:	755a      	strb	r2, [r3, #21]
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2102      	movs	r1, #2
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe f89c 	bl	80075dc <unlock_fs>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e110      	b.n	80096ca <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d109      	bne.n	80094c4 <f_write+0x13a>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	755a      	strb	r2, [r3, #21]
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	2101      	movs	r1, #1
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe f88e 	bl	80075dc <unlock_fs>
 80094c0:	2301      	movs	r3, #1
 80094c2:	e102      	b.n	80096ca <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094c8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d102      	bne.n	80094d8 <f_write+0x14e>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094d6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	7d1b      	ldrb	r3, [r3, #20]
 80094dc:	b25b      	sxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	da1d      	bge.n	800951e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	7858      	ldrb	r0, [r3, #1]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a1a      	ldr	r2, [r3, #32]
 80094f0:	2301      	movs	r3, #1
 80094f2:	f7fd ff1f 	bl	8007334 <disk_write>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d009      	beq.n	8009510 <f_write+0x186>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2201      	movs	r2, #1
 8009500:	755a      	strb	r2, [r3, #21]
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	2101      	movs	r1, #1
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe f868 	bl	80075dc <unlock_fs>
 800950c:	2301      	movs	r3, #1
 800950e:	e0dc      	b.n	80096ca <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	7d1b      	ldrb	r3, [r3, #20]
 8009514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009518:	b2da      	uxtb	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7fe fac0 	bl	8007aac <clust2sect>
 800952c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d109      	bne.n	8009548 <f_write+0x1be>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2202      	movs	r2, #2
 8009538:	755a      	strb	r2, [r3, #21]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2102      	movs	r1, #2
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe f84c 	bl	80075dc <unlock_fs>
 8009544:	2302      	movs	r3, #2
 8009546:	e0c0      	b.n	80096ca <f_write+0x340>
			sect += csect;
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	4413      	add	r3, r2
 800954e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	0a5b      	lsrs	r3, r3, #9
 8009554:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d041      	beq.n	80095e0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	4413      	add	r3, r2
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	8952      	ldrh	r2, [r2, #10]
 8009566:	4293      	cmp	r3, r2
 8009568:	d905      	bls.n	8009576 <f_write+0x1ec>
					cc = fs->csize - csect;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	895b      	ldrh	r3, [r3, #10]
 800956e:	461a      	mov	r2, r3
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	7858      	ldrb	r0, [r3, #1]
 800957a:	6a3b      	ldr	r3, [r7, #32]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	69f9      	ldr	r1, [r7, #28]
 8009580:	f7fd fed8 	bl	8007334 <disk_write>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d009      	beq.n	800959e <f_write+0x214>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	755a      	strb	r2, [r3, #21]
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	2101      	movs	r1, #1
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe f821 	bl	80075dc <unlock_fs>
 800959a:	2301      	movs	r3, #1
 800959c:	e095      	b.n	80096ca <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6a1a      	ldr	r2, [r3, #32]
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d915      	bls.n	80095d8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a1a      	ldr	r2, [r3, #32]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	025b      	lsls	r3, r3, #9
 80095bc:	69fa      	ldr	r2, [r7, #28]
 80095be:	4413      	add	r3, r2
 80095c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095c4:	4619      	mov	r1, r3
 80095c6:	f7fd ff75 	bl	80074b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	7d1b      	ldrb	r3, [r3, #20]
 80095ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	025b      	lsls	r3, r3, #9
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80095de:	e044      	b.n	800966a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d01b      	beq.n	8009622 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d215      	bcs.n	8009622 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	7858      	ldrb	r0, [r3, #1]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009600:	2301      	movs	r3, #1
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	f7fd fe76 	bl	80072f4 <disk_read>
 8009608:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800960a:	2b00      	cmp	r3, #0
 800960c:	d009      	beq.n	8009622 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2201      	movs	r2, #1
 8009612:	755a      	strb	r2, [r3, #21]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2101      	movs	r1, #1
 8009618:	4618      	mov	r0, r3
 800961a:	f7fd ffdf 	bl	80075dc <unlock_fs>
 800961e:	2301      	movs	r3, #1
 8009620:	e053      	b.n	80096ca <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009630:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	429a      	cmp	r2, r3
 800963c:	d901      	bls.n	8009642 <f_write+0x2b8>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009650:	4413      	add	r3, r2
 8009652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009654:	69f9      	ldr	r1, [r7, #28]
 8009656:	4618      	mov	r0, r3
 8009658:	f7fd ff2c 	bl	80074b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	7d1b      	ldrb	r3, [r3, #20]
 8009660:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009664:	b2da      	uxtb	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800966a:	69fa      	ldr	r2, [r7, #28]
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	4413      	add	r3, r2
 8009670:	61fb      	str	r3, [r7, #28]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	699a      	ldr	r2, [r3, #24]
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	441a      	add	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	619a      	str	r2, [r3, #24]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	429a      	cmp	r2, r3
 8009688:	bf38      	it	cc
 800968a:	461a      	movcc	r2, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	60da      	str	r2, [r3, #12]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	441a      	add	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f47f aeb6 	bne.w	8009418 <f_write+0x8e>
 80096ac:	e000      	b.n	80096b0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80096ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	7d1b      	ldrb	r3, [r3, #20]
 80096b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2100      	movs	r1, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fd ff8a 	bl	80075dc <unlock_fs>
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3730      	adds	r7, #48	; 0x30
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b086      	sub	sp, #24
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f107 0208 	add.w	r2, r7, #8
 80096e0:	4611      	mov	r1, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fbe0 	bl	8008ea8 <validate>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d16d      	bne.n	80097ce <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	7d1b      	ldrb	r3, [r3, #20]
 80096f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d067      	beq.n	80097ce <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	7d1b      	ldrb	r3, [r3, #20]
 8009702:	b25b      	sxtb	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	da1a      	bge.n	800973e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	7858      	ldrb	r0, [r3, #1]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1a      	ldr	r2, [r3, #32]
 8009716:	2301      	movs	r3, #1
 8009718:	f7fd fe0c 	bl	8007334 <disk_write>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d006      	beq.n	8009730 <f_sync+0x5e>
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2101      	movs	r1, #1
 8009726:	4618      	mov	r0, r3
 8009728:	f7fd ff58 	bl	80075dc <unlock_fs>
 800972c:	2301      	movs	r3, #1
 800972e:	e055      	b.n	80097dc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	7d1b      	ldrb	r3, [r3, #20]
 8009734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009738:	b2da      	uxtb	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800973e:	f7fd fd3b 	bl	80071b8 <get_fattime>
 8009742:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f7fe f911 	bl	8007974 <move_window>
 8009752:	4603      	mov	r3, r0
 8009754:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d138      	bne.n	80097ce <f_sync+0xfc>
					dir = fp->dir_ptr;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	330b      	adds	r3, #11
 8009766:	781a      	ldrb	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	330b      	adds	r3, #11
 800976c:	f042 0220 	orr.w	r2, r2, #32
 8009770:	b2d2      	uxtb	r2, r2
 8009772:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	461a      	mov	r2, r3
 800977e:	68f9      	ldr	r1, [r7, #12]
 8009780:	f7fe fe1c 	bl	80083bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f103 021c 	add.w	r2, r3, #28
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	4619      	mov	r1, r3
 8009790:	4610      	mov	r0, r2
 8009792:	f7fd fe63 	bl	800745c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3316      	adds	r3, #22
 800979a:	6939      	ldr	r1, [r7, #16]
 800979c:	4618      	mov	r0, r3
 800979e:	f7fd fe5d 	bl	800745c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3312      	adds	r3, #18
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fd fe3c 	bl	8007426 <st_word>
					fs->wflag = 1;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2201      	movs	r2, #1
 80097b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe f90a 	bl	80079d0 <sync_fs>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7d1b      	ldrb	r3, [r3, #20]
 80097c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	7dfa      	ldrb	r2, [r7, #23]
 80097d2:	4611      	mov	r1, r2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fd ff01 	bl	80075dc <unlock_fs>
 80097da:	7dfb      	ldrb	r3, [r7, #23]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ff70 	bl	80096d2 <f_sync>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d11d      	bne.n	8009838 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f107 0208 	add.w	r2, r7, #8
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff fb4f 	bl	8008ea8 <validate>
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800980e:	7bfb      	ldrb	r3, [r7, #15]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d111      	bne.n	8009838 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe f807 	bl	800782c <dec_lock>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2100      	movs	r1, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f7fd fed2 	bl	80075dc <unlock_fs>
#endif
		}
	}
	return res;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b086      	sub	sp, #24
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <f_opendir+0x14>
 8009852:	2309      	movs	r3, #9
 8009854:	e06a      	b.n	800992c <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800985a:	f107 010c 	add.w	r1, r7, #12
 800985e:	463b      	mov	r3, r7
 8009860:	2200      	movs	r2, #0
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff f8cc 	bl	8008a00 <find_volume>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d14f      	bne.n	8009912 <f_opendir+0xd0>
		obj->fs = fs;
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7fe ffb3 	bl	80087e8 <follow_path>
 8009882:	4603      	mov	r3, r0
 8009884:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d13d      	bne.n	8009908 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009892:	b25b      	sxtb	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	db12      	blt.n	80098be <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	799b      	ldrb	r3, [r3, #6]
 800989c:	f003 0310 	and.w	r3, r3, #16
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00a      	beq.n	80098ba <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7fe fd66 	bl	800837e <ld_clust>
 80098b2:	4602      	mov	r2, r0
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	609a      	str	r2, [r3, #8]
 80098b8:	e001      	b.n	80098be <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80098ba:	2305      	movs	r3, #5
 80098bc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d121      	bne.n	8009908 <f_opendir+0xc6>
				obj->id = fs->id;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88da      	ldrh	r2, [r3, #6]
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80098cc:	2100      	movs	r1, #0
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7fe fbce 	bl	8008070 <dir_sdi>
 80098d4:	4603      	mov	r3, r0
 80098d6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d114      	bne.n	8009908 <f_opendir+0xc6>
					if (obj->sclust) {
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00d      	beq.n	8009902 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80098e6:	2100      	movs	r1, #0
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7fd ff11 	bl	8007710 <inc_lock>
 80098ee:	4602      	mov	r2, r0
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d105      	bne.n	8009908 <f_opendir+0xc6>
 80098fc:	2312      	movs	r3, #18
 80098fe:	75fb      	strb	r3, [r7, #23]
 8009900:	e002      	b.n	8009908 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2200      	movs	r2, #0
 8009906:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	2b04      	cmp	r3, #4
 800990c:	d101      	bne.n	8009912 <f_opendir+0xd0>
 800990e:	2305      	movs	r3, #5
 8009910:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <f_opendir+0xdc>
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	7dfa      	ldrb	r2, [r7, #23]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7fd fe59 	bl	80075dc <unlock_fs>
 800992a:	7dfb      	ldrb	r3, [r7, #23]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f107 0208 	add.w	r2, r7, #8
 8009942:	4611      	mov	r1, r2
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff faaf 	bl	8008ea8 <validate>
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d115      	bne.n	8009980 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d006      	beq.n	800996a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	4618      	mov	r0, r3
 8009962:	f7fd ff63 	bl	800782c <dec_lock>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f7fd fe2e 	bl	80075dc <unlock_fs>
#endif
	}
	return res;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f107 0208 	add.w	r2, r7, #8
 800999a:	4611      	mov	r1, r2
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fa83 	bl	8008ea8 <validate>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d126      	bne.n	80099fa <f_readdir+0x70>
		if (!fno) {
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d106      	bne.n	80099c0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80099b2:	2100      	movs	r1, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7fe fb5b 	bl	8008070 <dir_sdi>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73fb      	strb	r3, [r7, #15]
 80099be:	e01c      	b.n	80099fa <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80099c0:	2100      	movs	r1, #0
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7fe fd1a 	bl	80083fc <dir_read>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d101      	bne.n	80099d6 <f_readdir+0x4c>
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10e      	bne.n	80099fa <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80099dc:	6839      	ldr	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7fe fe0e 	bl	8008600 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80099e4:	2100      	movs	r1, #0
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7fe fbbd 	bl	8008166 <dir_next>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	2b04      	cmp	r3, #4
 80099f4:	d101      	bne.n	80099fa <f_readdir+0x70>
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	7bfa      	ldrb	r2, [r7, #15]
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fd fdeb 	bl	80075dc <unlock_fs>
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b090      	sub	sp, #64	; 0x40
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009a1a:	f107 010c 	add.w	r1, r7, #12
 8009a1e:	1d3b      	adds	r3, r7, #4
 8009a20:	2200      	movs	r2, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe ffec 	bl	8008a00 <find_volume>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8009a2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d11f      	bne.n	8009a76 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	f107 030c 	add.w	r3, r7, #12
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fed2 	bl	80087e8 <follow_path>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d111      	bne.n	8009a76 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009a52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009a56:	b25b      	sxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	da03      	bge.n	8009a64 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009a5c:	2306      	movs	r3, #6
 8009a5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009a62:	e008      	b.n	8009a76 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <f_stat+0x66>
 8009a6a:	f107 030c 	add.w	r3, r7, #12
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fdc5 	bl	8008600 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fd fdac 	bl	80075dc <unlock_fs>
 8009a84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3740      	adds	r7, #64	; 0x40
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b09e      	sub	sp, #120	; 0x78
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009a9c:	f107 010c 	add.w	r1, r7, #12
 8009aa0:	1d3b      	adds	r3, r7, #4
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe ffab 	bl	8008a00 <find_volume>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8009ab4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f040 808e 	bne.w	8009bda <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe fe8e 	bl	80087e8 <follow_path>
 8009acc:	4603      	mov	r3, r0
 8009ace:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009ad2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d108      	bne.n	8009aec <f_unlink+0x5c>
 8009ada:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ade:	2102      	movs	r1, #2
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fd fd97 	bl	8007614 <chk_lock>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009aec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d172      	bne.n	8009bda <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009af4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009af8:	b25b      	sxtb	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	da03      	bge.n	8009b06 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009afe:	2306      	movs	r3, #6
 8009b00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009b04:	e008      	b.n	8009b18 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009b06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d002      	beq.n	8009b18 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009b12:	2307      	movs	r3, #7
 8009b14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8009b18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d134      	bne.n	8009b8a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fc29 	bl	800837e <ld_clust>
 8009b2c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009b2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009b32:	f003 0310 	and.w	r3, r3, #16
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d027      	beq.n	8009b8a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b40:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009b42:	f107 0310 	add.w	r3, r7, #16
 8009b46:	2100      	movs	r1, #0
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fa91 	bl	8008070 <dir_sdi>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8009b54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d116      	bne.n	8009b8a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009b5c:	f107 0310 	add.w	r3, r7, #16
 8009b60:	2100      	movs	r1, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fc4a 	bl	80083fc <dir_read>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009b6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <f_unlink+0xec>
 8009b76:	2307      	movs	r3, #7
 8009b78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009b7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	d102      	bne.n	8009b8a <f_unlink+0xfa>
 8009b84:	2300      	movs	r3, #0
 8009b86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8009b8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d123      	bne.n	8009bda <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fd14 	bl	80085c4 <dir_remove>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009ba2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10c      	bne.n	8009bc4 <f_unlink+0x134>
 8009baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d009      	beq.n	8009bc4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8009bb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe f928 	bl	8007e0e <remove_chain>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009bc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <f_unlink+0x14a>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fd fefe 	bl	80079d0 <sync_fs>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fd fcfa 	bl	80075dc <unlock_fs>
 8009be8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3778      	adds	r7, #120	; 0x78
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b096      	sub	sp, #88	; 0x58
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009bfc:	f107 0108 	add.w	r1, r7, #8
 8009c00:	1d3b      	adds	r3, r7, #4
 8009c02:	2202      	movs	r2, #2
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe fefb 	bl	8008a00 <find_volume>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8009c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f040 80ec 	bne.w	8009df6 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	f107 030c 	add.w	r3, r7, #12
 8009c24:	4611      	mov	r1, r2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe fdde 	bl	80087e8 <follow_path>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009c32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <f_mkdir+0x4c>
 8009c3a:	2308      	movs	r3, #8
 8009c3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c44:	2b04      	cmp	r3, #4
 8009c46:	f040 80d6 	bne.w	8009df6 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8009c4a:	f107 030c 	add.w	r3, r7, #12
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe f941 	bl	8007ed8 <create_chain>
 8009c56:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	895b      	ldrh	r3, [r3, #10]
 8009c5c:	025b      	lsls	r3, r3, #9
 8009c5e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8009c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <f_mkdir+0x7e>
 8009c6c:	2307      	movs	r3, #7
 8009c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8009c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d102      	bne.n	8009c7e <f_mkdir+0x8a>
 8009c78:	2302      	movs	r3, #2
 8009c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d102      	bne.n	8009c8c <f_mkdir+0x98>
 8009c86:	2301      	movs	r3, #1
 8009c88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8009c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d106      	bne.n	8009ca2 <f_mkdir+0xae>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fd fe28 	bl	80078ec <sync_window>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8009ca2:	f7fd fa89 	bl	80071b8 <get_fattime>
 8009ca6:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8009ca8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d16a      	bne.n	8009d86 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fd fef9 	bl	8007aac <clust2sect>
 8009cba:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	3334      	adds	r3, #52	; 0x34
 8009cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8009cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009cca:	f7fd fc14 	bl	80074f6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8009cce:	220b      	movs	r2, #11
 8009cd0:	2120      	movs	r1, #32
 8009cd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009cd4:	f7fd fc0f 	bl	80074f6 <mem_set>
					dir[DIR_Name] = '.';
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cda:	222e      	movs	r2, #46	; 0x2e
 8009cdc:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8009cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce0:	330b      	adds	r3, #11
 8009ce2:	2210      	movs	r2, #16
 8009ce4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce8:	3316      	adds	r3, #22
 8009cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fd fbb5 	bl	800745c <st_dword>
					st_clust(fs, dir, dcl);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fb5f 	bl	80083bc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8009cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d00:	3320      	adds	r3, #32
 8009d02:	2220      	movs	r2, #32
 8009d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fd fbd4 	bl	80074b4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8009d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0e:	3321      	adds	r3, #33	; 0x21
 8009d10:	222e      	movs	r2, #46	; 0x2e
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d106      	bne.n	8009d2e <f_mkdir+0x13a>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d101      	bne.n	8009d2e <f_mkdir+0x13a>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8009d2e:	68b8      	ldr	r0, [r7, #8]
 8009d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d32:	3320      	adds	r3, #32
 8009d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d36:	4619      	mov	r1, r3
 8009d38:	f7fe fb40 	bl	80083bc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	895b      	ldrh	r3, [r3, #10]
 8009d40:	653b      	str	r3, [r7, #80]	; 0x50
 8009d42:	e01b      	b.n	8009d7c <f_mkdir+0x188>
					fs->winsect = dsc++;
 8009d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2201      	movs	r2, #1
 8009d52:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fd fdc8 	bl	80078ec <sync_window>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8009d62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10c      	bne.n	8009d84 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8009d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d6e:	2100      	movs	r1, #0
 8009d70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d72:	f7fd fbc0 	bl	80074f6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8009d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e0      	bne.n	8009d44 <f_mkdir+0x150>
 8009d82:	e000      	b.n	8009d86 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8009d84:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d107      	bne.n	8009d9e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8009d8e:	f107 030c 	add.w	r3, r7, #12
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe fbe4 	bl	8008560 <dir_register>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8009d9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d120      	bne.n	8009de8 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8009daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dac:	3316      	adds	r3, #22
 8009dae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fd fb53 	bl	800745c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fe fafd 	bl	80083bc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc4:	330b      	adds	r3, #11
 8009dc6:	2210      	movs	r2, #16
 8009dc8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8009dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10e      	bne.n	8009df6 <f_mkdir+0x202>
					res = sync_fs(fs);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fd fdf8 	bl	80079d0 <sync_fs>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009de6:	e006      	b.n	8009df6 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009de8:	f107 030c 	add.w	r3, r7, #12
 8009dec:	2200      	movs	r2, #0
 8009dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe f80c 	bl	8007e0e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fd fbec 	bl	80075dc <unlock_fs>
 8009e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3758      	adds	r7, #88	; 0x58
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e26:	4b1f      	ldr	r3, [pc, #124]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e28:	7a5b      	ldrb	r3, [r3, #9]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d131      	bne.n	8009e94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e30:	4b1c      	ldr	r3, [pc, #112]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e32:	7a5b      	ldrb	r3, [r3, #9]
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	4b1a      	ldr	r3, [pc, #104]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e3e:	4b19      	ldr	r3, [pc, #100]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e40:	7a5b      	ldrb	r3, [r3, #9]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	4a17      	ldr	r2, [pc, #92]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e4e:	4b15      	ldr	r3, [pc, #84]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e50:	7a5b      	ldrb	r3, [r3, #9]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	461a      	mov	r2, r3
 8009e56:	4b13      	ldr	r3, [pc, #76]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e58:	4413      	add	r3, r2
 8009e5a:	79fa      	ldrb	r2, [r7, #7]
 8009e5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e5e:	4b11      	ldr	r3, [pc, #68]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e60:	7a5b      	ldrb	r3, [r3, #9]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	b2d1      	uxtb	r1, r2
 8009e68:	4a0e      	ldr	r2, [pc, #56]	; (8009ea4 <FATFS_LinkDriverEx+0x94>)
 8009e6a:	7251      	strb	r1, [r2, #9]
 8009e6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e6e:	7dbb      	ldrb	r3, [r7, #22]
 8009e70:	3330      	adds	r3, #48	; 0x30
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	223a      	movs	r2, #58	; 0x3a
 8009e7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	3302      	adds	r3, #2
 8009e84:	222f      	movs	r2, #47	; 0x2f
 8009e86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	3303      	adds	r3, #3
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	200055c4 	.word	0x200055c4

08009ea8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff ffaa 	bl	8009e10 <FATFS_LinkDriverEx>
 8009ebc:	4603      	mov	r3, r0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b086      	sub	sp, #24
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	4603      	mov	r3, r0
 8009ece:	6039      	str	r1, [r7, #0]
 8009ed0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009eda:	f107 030c 	add.w	r3, r7, #12
 8009ede:	2101      	movs	r1, #1
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 f8dd 	bl	800a0a0 <osSemaphoreCreate>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	bf14      	ite	ne
 8009ef4:	2301      	movne	r3, #1
 8009ef6:	2300      	moveq	r3, #0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	617b      	str	r3, [r7, #20]

    return ret;
 8009efc:	697b      	ldr	r3, [r7, #20]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f97c 	bl	800a20c <osSemaphoreDelete>
#endif
    return 1;
 8009f14:	2301      	movs	r3, #1
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009f2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f8e8 	bl	800a104 <osSemaphoreWait>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f925 	bl	800a1a0 <osSemaphoreRelease>
#endif
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	4603      	mov	r3, r0
 8009f66:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f70:	2b84      	cmp	r3, #132	; 0x84
 8009f72:	d005      	beq.n	8009f80 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009f74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3303      	adds	r3, #3
 8009f7e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009f80:	68fb      	ldr	r3, [r7, #12]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f94:	f3ef 8305 	mrs	r3, IPSR
 8009f98:	607b      	str	r3, [r7, #4]
  return(result);
 8009f9a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bf14      	ite	ne
 8009fa0:	2301      	movne	r3, #1
 8009fa2:	2300      	moveq	r3, #0
 8009fa4:	b2db      	uxtb	r3, r3
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009fb6:	f001 f9a3 	bl	800b300 <vTaskStartScheduler>
  
  return osOK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009fc4:	f7ff ffe3 	bl	8009f8e <inHandlerMode>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009fce:	f001 fabb 	bl	800b548 <xTaskGetTickCountFromISR>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	e002      	b.n	8009fdc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009fd6:	f001 faa7 	bl	800b528 <xTaskGetTickCount>
 8009fda:	4603      	mov	r3, r0
  }
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fe2:	b089      	sub	sp, #36	; 0x24
 8009fe4:	af04      	add	r7, sp, #16
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d020      	beq.n	800a034 <osThreadCreate+0x54>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d01c      	beq.n	800a034 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685c      	ldr	r4, [r3, #4]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	691e      	ldr	r6, [r3, #16]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7ff ffa6 	bl	8009f5e <makeFreeRtosPriority>
 800a012:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a01c:	9202      	str	r2, [sp, #8]
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	9100      	str	r1, [sp, #0]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	4632      	mov	r2, r6
 800a026:	4629      	mov	r1, r5
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 ff8b 	bl	800af44 <xTaskCreateStatic>
 800a02e:	4603      	mov	r3, r0
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	e01c      	b.n	800a06e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685c      	ldr	r4, [r3, #4]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a040:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff ff88 	bl	8009f5e <makeFreeRtosPriority>
 800a04e:	4602      	mov	r2, r0
 800a050:	f107 030c 	add.w	r3, r7, #12
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	9200      	str	r2, [sp, #0]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	4632      	mov	r2, r6
 800a05c:	4629      	mov	r1, r5
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 ffcd 	bl	800affe <xTaskCreate>
 800a064:	4603      	mov	r3, r0
 800a066:	2b01      	cmp	r3, #1
 800a068:	d001      	beq.n	800a06e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	e000      	b.n	800a070 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a06e:	68fb      	ldr	r3, [r7, #12]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a078 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <osDelay+0x16>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	e000      	b.n	800a090 <osDelay+0x18>
 800a08e:	2301      	movs	r3, #1
 800a090:	4618      	mov	r0, r3
 800a092:	f001 f901 	bl	800b298 <vTaskDelay>
  
  return osOK;
 800a096:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af02      	add	r7, sp, #8
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00f      	beq.n	800a0d2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d10a      	bne.n	800a0ce <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	2203      	movs	r2, #3
 800a0be:	9200      	str	r2, [sp, #0]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	2001      	movs	r0, #1
 800a0c6:	f000 f9dd 	bl	800a484 <xQueueGenericCreateStatic>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	e016      	b.n	800a0fc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e014      	b.n	800a0fc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d110      	bne.n	800a0fa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a0d8:	2203      	movs	r2, #3
 800a0da:	2100      	movs	r1, #0
 800a0dc:	2001      	movs	r0, #1
 800a0de:	f000 fa49 	bl	800a574 <xQueueGenericCreate>
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d005      	beq.n	800a0f6 <osSemaphoreCreate+0x56>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 fa99 	bl	800a628 <xQueueGenericSend>
      return sema;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	e000      	b.n	800a0fc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a0fa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a10e:	2300      	movs	r3, #0
 800a110:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	e03a      	b.n	800a192 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d103      	bne.n	800a130 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a128:	f04f 33ff 	mov.w	r3, #4294967295
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	e009      	b.n	800a144 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d006      	beq.n	800a144 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <osSemaphoreWait+0x40>
      ticks = 1;
 800a140:	2301      	movs	r3, #1
 800a142:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a144:	f7ff ff23 	bl	8009f8e <inHandlerMode>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d017      	beq.n	800a17e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a14e:	f107 0308 	add.w	r3, r7, #8
 800a152:	461a      	mov	r2, r3
 800a154:	2100      	movs	r1, #0
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fcfe 	bl	800ab58 <xQueueReceiveFromISR>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d001      	beq.n	800a166 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a162:	23ff      	movs	r3, #255	; 0xff
 800a164:	e015      	b.n	800a192 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d011      	beq.n	800a190 <osSemaphoreWait+0x8c>
 800a16c:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <osSemaphoreWait+0x98>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	e008      	b.n	800a190 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fbdd 	bl	800a940 <xQueueSemaphoreTake>
 800a186:	4603      	mov	r3, r0
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d001      	beq.n	800a190 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a18c:	23ff      	movs	r3, #255	; 0xff
 800a18e:	e000      	b.n	800a192 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	e000ed04 	.word	0xe000ed04

0800a1a0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a1b0:	f7ff feed 	bl	8009f8e <inHandlerMode>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d016      	beq.n	800a1e8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a1ba:	f107 0308 	add.w	r3, r7, #8
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fb2f 	bl	800a824 <xQueueGiveFromISR>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d001      	beq.n	800a1d0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a1cc:	23ff      	movs	r3, #255	; 0xff
 800a1ce:	e017      	b.n	800a200 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d013      	beq.n	800a1fe <osSemaphoreRelease+0x5e>
 800a1d6:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <osSemaphoreRelease+0x68>)
 800a1d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	e00a      	b.n	800a1fe <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa1a 	bl	800a628 <xQueueGenericSend>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d001      	beq.n	800a1fe <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a1fa:	23ff      	movs	r3, #255	; 0xff
 800a1fc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a214:	f7ff febb 	bl	8009f8e <inHandlerMode>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a21e:	2382      	movs	r3, #130	; 0x82
 800a220:	e003      	b.n	800a22a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fd18 	bl	800ac58 <vQueueDelete>

  return osOK; 
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800a23c:	2381      	movs	r3, #129	; 0x81
#endif
}
 800a23e:	4618      	mov	r0, r3
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f103 0208 	add.w	r2, r3, #8
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f04f 32ff 	mov.w	r2, #4294967295
 800a262:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f103 0208 	add.w	r2, r3, #8
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f103 0208 	add.w	r2, r3, #8
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a28a:	b480      	push	{r7}
 800a28c:	b083      	sub	sp, #12
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	601a      	str	r2, [r3, #0]
}
 800a2e0:	bf00      	nop
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d103      	bne.n	800a30c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	e00c      	b.n	800a326 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3308      	adds	r3, #8
 800a310:	60fb      	str	r3, [r7, #12]
 800a312:	e002      	b.n	800a31a <vListInsert+0x2e>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	429a      	cmp	r2, r3
 800a324:	d2f6      	bcs.n	800a314 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	601a      	str	r2, [r3, #0]
}
 800a352:	bf00      	nop
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a35e:	b480      	push	{r7}
 800a360:	b085      	sub	sp, #20
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6892      	ldr	r2, [r2, #8]
 800a374:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	6852      	ldr	r2, [r2, #4]
 800a37e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	429a      	cmp	r2, r3
 800a388:	d103      	bne.n	800a392 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	1e5a      	subs	r2, r3, #1
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
	...

0800a3b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3da:	bf00      	nop
 800a3dc:	e7fe      	b.n	800a3dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3de:	f001 ff11 	bl	800c204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3ee:	fb01 f303 	mul.w	r3, r1, r3
 800a3f2:	441a      	add	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40e:	3b01      	subs	r3, #1
 800a410:	68f9      	ldr	r1, [r7, #12]
 800a412:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a414:	fb01 f303 	mul.w	r3, r1, r3
 800a418:	441a      	add	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	22ff      	movs	r2, #255	; 0xff
 800a422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	22ff      	movs	r2, #255	; 0xff
 800a42a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d114      	bne.n	800a45e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01a      	beq.n	800a472 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3310      	adds	r3, #16
 800a440:	4618      	mov	r0, r3
 800a442:	f001 f9d1 	bl	800b7e8 <xTaskRemoveFromEventList>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d012      	beq.n	800a472 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a44c:	4b0c      	ldr	r3, [pc, #48]	; (800a480 <xQueueGenericReset+0xcc>)
 800a44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	e009      	b.n	800a472 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3310      	adds	r3, #16
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff fef1 	bl	800a24a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3324      	adds	r3, #36	; 0x24
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff feec 	bl	800a24a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a472:	f001 fef7 	bl	800c264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a476:	2301      	movs	r3, #1
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	e000ed04 	.word	0xe000ed04

0800a484 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08e      	sub	sp, #56	; 0x38
 800a488:	af02      	add	r7, sp, #8
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10a      	bne.n	800a4ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4aa:	bf00      	nop
 800a4ac:	e7fe      	b.n	800a4ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <xQueueGenericCreateStatic+0x52>
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <xQueueGenericCreateStatic+0x56>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e000      	b.n	800a4dc <xQueueGenericCreateStatic+0x58>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10a      	bne.n	800a4f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	623b      	str	r3, [r7, #32]
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d102      	bne.n	800a502 <xQueueGenericCreateStatic+0x7e>
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <xQueueGenericCreateStatic+0x82>
 800a502:	2301      	movs	r3, #1
 800a504:	e000      	b.n	800a508 <xQueueGenericCreateStatic+0x84>
 800a506:	2300      	movs	r3, #0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10a      	bne.n	800a522 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	61fb      	str	r3, [r7, #28]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a522:	2348      	movs	r3, #72	; 0x48
 800a524:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2b48      	cmp	r3, #72	; 0x48
 800a52a:	d00a      	beq.n	800a542 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	61bb      	str	r3, [r7, #24]
}
 800a53e:	bf00      	nop
 800a540:	e7fe      	b.n	800a540 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a542:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00d      	beq.n	800a56a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a556:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	4613      	mov	r3, r2
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 f83f 	bl	800a5e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3730      	adds	r7, #48	; 0x30
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08a      	sub	sp, #40	; 0x28
 800a578:	af02      	add	r7, sp, #8
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	613b      	str	r3, [r7, #16]
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	fb02 f303 	mul.w	r3, r2, r3
 800a5a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	3348      	adds	r3, #72	; 0x48
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 ff4b 	bl	800c448 <pvPortMalloc>
 800a5b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d011      	beq.n	800a5de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	3348      	adds	r3, #72	; 0x48
 800a5c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5cc:	79fa      	ldrb	r2, [r7, #7]
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 f805 	bl	800a5e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5de:	69bb      	ldr	r3, [r7, #24]
	}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d103      	bne.n	800a604 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	e002      	b.n	800a60a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a616:	2101      	movs	r1, #1
 800a618:	69b8      	ldr	r0, [r7, #24]
 800a61a:	f7ff fecb 	bl	800a3b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a61e:	bf00      	nop
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08e      	sub	sp, #56	; 0x38
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a636:	2300      	movs	r3, #0
 800a638:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <xQueueGenericSend+0x32>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d103      	bne.n	800a668 <xQueueGenericSend+0x40>
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <xQueueGenericSend+0x44>
 800a668:	2301      	movs	r3, #1
 800a66a:	e000      	b.n	800a66e <xQueueGenericSend+0x46>
 800a66c:	2300      	movs	r3, #0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <xQueueGenericSend+0x60>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a684:	bf00      	nop
 800a686:	e7fe      	b.n	800a686 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d103      	bne.n	800a696 <xQueueGenericSend+0x6e>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <xQueueGenericSend+0x72>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <xQueueGenericSend+0x74>
 800a69a:	2300      	movs	r3, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	623b      	str	r3, [r7, #32]
}
 800a6b2:	bf00      	nop
 800a6b4:	e7fe      	b.n	800a6b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b6:	f001 fa57 	bl	800bb68 <xTaskGetSchedulerState>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <xQueueGenericSend+0x9e>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <xQueueGenericSend+0xa2>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e000      	b.n	800a6cc <xQueueGenericSend+0xa4>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10a      	bne.n	800a6e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	61fb      	str	r3, [r7, #28]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e6:	f001 fd8d 	bl	800c204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d302      	bcc.n	800a6fc <xQueueGenericSend+0xd4>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d129      	bne.n	800a750 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	68b9      	ldr	r1, [r7, #8]
 800a700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a702:	f000 fae4 	bl	800acce <prvCopyDataToQueue>
 800a706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d010      	beq.n	800a732 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	3324      	adds	r3, #36	; 0x24
 800a714:	4618      	mov	r0, r3
 800a716:	f001 f867 	bl	800b7e8 <xTaskRemoveFromEventList>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d013      	beq.n	800a748 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a720:	4b3f      	ldr	r3, [pc, #252]	; (800a820 <xQueueGenericSend+0x1f8>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	e00a      	b.n	800a748 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d007      	beq.n	800a748 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a738:	4b39      	ldr	r3, [pc, #228]	; (800a820 <xQueueGenericSend+0x1f8>)
 800a73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a748:	f001 fd8c 	bl	800c264 <vPortExitCritical>
				return pdPASS;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e063      	b.n	800a818 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d103      	bne.n	800a75e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a756:	f001 fd85 	bl	800c264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	e05c      	b.n	800a818 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	2b00      	cmp	r3, #0
 800a762:	d106      	bne.n	800a772 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a764:	f107 0314 	add.w	r3, r7, #20
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 f89f 	bl	800b8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a76e:	2301      	movs	r3, #1
 800a770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a772:	f001 fd77 	bl	800c264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a776:	f000 fe2d 	bl	800b3d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a77a:	f001 fd43 	bl	800c204 <vPortEnterCritical>
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a784:	b25b      	sxtb	r3, r3
 800a786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78a:	d103      	bne.n	800a794 <xQueueGenericSend+0x16c>
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a79a:	b25b      	sxtb	r3, r3
 800a79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a0:	d103      	bne.n	800a7aa <xQueueGenericSend+0x182>
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7aa:	f001 fd5b 	bl	800c264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7ae:	1d3a      	adds	r2, r7, #4
 800a7b0:	f107 0314 	add.w	r3, r7, #20
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 f88e 	bl	800b8d8 <xTaskCheckForTimeOut>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d124      	bne.n	800a80c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c4:	f000 fb7b 	bl	800aebe <prvIsQueueFull>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d018      	beq.n	800a800 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	3310      	adds	r3, #16
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 ffe2 	bl	800b7a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7de:	f000 fb06 	bl	800adee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7e2:	f000 fe05 	bl	800b3f0 <xTaskResumeAll>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f47f af7c 	bne.w	800a6e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a7ee:	4b0c      	ldr	r3, [pc, #48]	; (800a820 <xQueueGenericSend+0x1f8>)
 800a7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	e772      	b.n	800a6e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a802:	f000 faf4 	bl	800adee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a806:	f000 fdf3 	bl	800b3f0 <xTaskResumeAll>
 800a80a:	e76c      	b.n	800a6e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a80e:	f000 faee 	bl	800adee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a812:	f000 fded 	bl	800b3f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3738      	adds	r7, #56	; 0x38
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08e      	sub	sp, #56	; 0x38
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	623b      	str	r3, [r7, #32]
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <xQueueGiveFromISR+0x48>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	61fb      	str	r3, [r7, #28]
}
 800a868:	bf00      	nop
 800a86a:	e7fe      	b.n	800a86a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d103      	bne.n	800a87c <xQueueGiveFromISR+0x58>
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <xQueueGiveFromISR+0x5c>
 800a87c:	2301      	movs	r3, #1
 800a87e:	e000      	b.n	800a882 <xQueueGiveFromISR+0x5e>
 800a880:	2300      	movs	r3, #0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10a      	bne.n	800a89c <xQueueGiveFromISR+0x78>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	61bb      	str	r3, [r7, #24]
}
 800a898:	bf00      	nop
 800a89a:	e7fe      	b.n	800a89a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a89c:	f001 fd94 	bl	800c3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8a0:	f3ef 8211 	mrs	r2, BASEPRI
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	617a      	str	r2, [r7, #20]
 800a8b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d22b      	bcs.n	800a924 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e6:	d112      	bne.n	800a90e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d016      	beq.n	800a91e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	3324      	adds	r3, #36	; 0x24
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 ff77 	bl	800b7e8 <xTaskRemoveFromEventList>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00e      	beq.n	800a91e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00b      	beq.n	800a91e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2201      	movs	r2, #1
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	e007      	b.n	800a91e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a90e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a912:	3301      	adds	r3, #1
 800a914:	b2db      	uxtb	r3, r3
 800a916:	b25a      	sxtb	r2, r3
 800a918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a91e:	2301      	movs	r3, #1
 800a920:	637b      	str	r3, [r7, #52]	; 0x34
 800a922:	e001      	b.n	800a928 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a924:	2300      	movs	r3, #0
 800a926:	637b      	str	r3, [r7, #52]	; 0x34
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a932:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a936:	4618      	mov	r0, r3
 800a938:	3738      	adds	r7, #56	; 0x38
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08e      	sub	sp, #56	; 0x38
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a952:	2300      	movs	r3, #0
 800a954:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	623b      	str	r3, [r7, #32]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	61fb      	str	r3, [r7, #28]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a990:	f001 f8ea 	bl	800bb68 <xTaskGetSchedulerState>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d102      	bne.n	800a9a0 <xQueueSemaphoreTake+0x60>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <xQueueSemaphoreTake+0x64>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e000      	b.n	800a9a6 <xQueueSemaphoreTake+0x66>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10a      	bne.n	800a9c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	61bb      	str	r3, [r7, #24]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9c0:	f001 fc20 	bl	800c204 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d024      	beq.n	800aa1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	1e5a      	subs	r2, r3, #1
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d104      	bne.n	800a9ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a9e0:	f001 fa6a 	bl	800beb8 <pvTaskIncrementMutexHeldCount>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00f      	beq.n	800aa12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f4:	3310      	adds	r3, #16
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fef6 	bl	800b7e8 <xTaskRemoveFromEventList>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d007      	beq.n	800aa12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa02:	4b54      	ldr	r3, [pc, #336]	; (800ab54 <xQueueSemaphoreTake+0x214>)
 800aa04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa12:	f001 fc27 	bl	800c264 <vPortExitCritical>
				return pdPASS;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e097      	b.n	800ab4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d111      	bne.n	800aa44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00a      	beq.n	800aa3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	617b      	str	r3, [r7, #20]
}
 800aa38:	bf00      	nop
 800aa3a:	e7fe      	b.n	800aa3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa3c:	f001 fc12 	bl	800c264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa40:	2300      	movs	r3, #0
 800aa42:	e082      	b.n	800ab4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa4a:	f107 030c 	add.w	r3, r7, #12
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 ff2c 	bl	800b8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa54:	2301      	movs	r3, #1
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa58:	f001 fc04 	bl	800c264 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa5c:	f000 fcba 	bl	800b3d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa60:	f001 fbd0 	bl	800c204 <vPortEnterCritical>
 800aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa6a:	b25b      	sxtb	r3, r3
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa70:	d103      	bne.n	800aa7a <xQueueSemaphoreTake+0x13a>
 800aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa80:	b25b      	sxtb	r3, r3
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d103      	bne.n	800aa90 <xQueueSemaphoreTake+0x150>
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa90:	f001 fbe8 	bl	800c264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa94:	463a      	mov	r2, r7
 800aa96:	f107 030c 	add.w	r3, r7, #12
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 ff1b 	bl	800b8d8 <xTaskCheckForTimeOut>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d132      	bne.n	800ab0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaaa:	f000 f9f2 	bl	800ae92 <prvIsQueueEmpty>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d026      	beq.n	800ab02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aabc:	f001 fba2 	bl	800c204 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f001 f86d 	bl	800bba4 <xTaskPriorityInherit>
 800aaca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aacc:	f001 fbca 	bl	800c264 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad2:	3324      	adds	r3, #36	; 0x24
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 fe61 	bl	800b7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aae0:	f000 f985 	bl	800adee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aae4:	f000 fc84 	bl	800b3f0 <xTaskResumeAll>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f47f af68 	bne.w	800a9c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aaf0:	4b18      	ldr	r3, [pc, #96]	; (800ab54 <xQueueSemaphoreTake+0x214>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	e75e      	b.n	800a9c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab04:	f000 f973 	bl	800adee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab08:	f000 fc72 	bl	800b3f0 <xTaskResumeAll>
 800ab0c:	e758      	b.n	800a9c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab10:	f000 f96d 	bl	800adee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab14:	f000 fc6c 	bl	800b3f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab1a:	f000 f9ba 	bl	800ae92 <prvIsQueueEmpty>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f43f af4d 	beq.w	800a9c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00d      	beq.n	800ab48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ab2c:	f001 fb6a 	bl	800c204 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab32:	f000 f8b4 	bl	800ac9e <prvGetDisinheritPriorityAfterTimeout>
 800ab36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f001 f92c 	bl	800bd9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab44:	f001 fb8e 	bl	800c264 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3738      	adds	r7, #56	; 0x38
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	e000ed04 	.word	0xe000ed04

0800ab58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08e      	sub	sp, #56	; 0x38
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10a      	bne.n	800ab84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	623b      	str	r3, [r7, #32]
}
 800ab80:	bf00      	nop
 800ab82:	e7fe      	b.n	800ab82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d103      	bne.n	800ab92 <xQueueReceiveFromISR+0x3a>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <xQueueReceiveFromISR+0x3e>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e000      	b.n	800ab98 <xQueueReceiveFromISR+0x40>
 800ab96:	2300      	movs	r3, #0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	61fb      	str	r3, [r7, #28]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abb2:	f001 fc09 	bl	800c3c8 <vPortValidateInterruptPriority>
	__asm volatile
 800abb6:	f3ef 8211 	mrs	r2, BASEPRI
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	61ba      	str	r2, [r7, #24]
 800abcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800abce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d02f      	beq.n	800ac3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abec:	f000 f8d9 	bl	800ada2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	1e5a      	subs	r2, r3, #1
 800abf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800abf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac00:	d112      	bne.n	800ac28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d016      	beq.n	800ac38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	3310      	adds	r3, #16
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 fdea 	bl	800b7e8 <xTaskRemoveFromEventList>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00e      	beq.n	800ac38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00b      	beq.n	800ac38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	e007      	b.n	800ac38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	b25a      	sxtb	r2, r3
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac3c:	e001      	b.n	800ac42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	637b      	str	r3, [r7, #52]	; 0x34
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f383 8811 	msr	BASEPRI, r3
}
 800ac4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3738      	adds	r7, #56	; 0x38
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10a      	bne.n	800ac80 <vQueueDelete+0x28>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	60bb      	str	r3, [r7, #8]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f935 	bl	800aef0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d102      	bne.n	800ac96 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f001 fca5 	bl	800c5e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ac96:	bf00      	nop
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac9e:	b480      	push	{r7}
 800aca0:	b085      	sub	sp, #20
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d006      	beq.n	800acbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f1c3 0307 	rsb	r3, r3, #7
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	e001      	b.n	800acc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800acc0:	68fb      	ldr	r3, [r7, #12]
	}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b086      	sub	sp, #24
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800acda:	2300      	movs	r3, #0
 800acdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10d      	bne.n	800ad08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d14d      	bne.n	800ad90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 ffc9 	bl	800bc90 <xTaskPriorityDisinherit>
 800acfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	609a      	str	r2, [r3, #8]
 800ad06:	e043      	b.n	800ad90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d119      	bne.n	800ad42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6858      	ldr	r0, [r3, #4]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad16:	461a      	mov	r2, r3
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	f002 fbdf 	bl	800d4dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad26:	441a      	add	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d32b      	bcc.n	800ad90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	605a      	str	r2, [r3, #4]
 800ad40:	e026      	b.n	800ad90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	68d8      	ldr	r0, [r3, #12]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	f002 fbc5 	bl	800d4dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	425b      	negs	r3, r3
 800ad5c:	441a      	add	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d207      	bcs.n	800ad7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	689a      	ldr	r2, [r3, #8]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad76:	425b      	negs	r3, r3
 800ad78:	441a      	add	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d105      	bne.n	800ad90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad98:	697b      	ldr	r3, [r7, #20]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d018      	beq.n	800ade6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68da      	ldr	r2, [r3, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbc:	441a      	add	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68da      	ldr	r2, [r3, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d303      	bcc.n	800add6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68d9      	ldr	r1, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	461a      	mov	r2, r3
 800ade0:	6838      	ldr	r0, [r7, #0]
 800ade2:	f002 fb7b 	bl	800d4dc <memcpy>
	}
}
 800ade6:	bf00      	nop
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800adf6:	f001 fa05 	bl	800c204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae02:	e011      	b.n	800ae28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d012      	beq.n	800ae32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3324      	adds	r3, #36	; 0x24
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fce9 	bl	800b7e8 <xTaskRemoveFromEventList>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae1c:	f000 fdbe 	bl	800b99c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dce9      	bgt.n	800ae04 <prvUnlockQueue+0x16>
 800ae30:	e000      	b.n	800ae34 <prvUnlockQueue+0x46>
					break;
 800ae32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	22ff      	movs	r2, #255	; 0xff
 800ae38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae3c:	f001 fa12 	bl	800c264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae40:	f001 f9e0 	bl	800c204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae4c:	e011      	b.n	800ae72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d012      	beq.n	800ae7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3310      	adds	r3, #16
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fcc4 	bl	800b7e8 <xTaskRemoveFromEventList>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae66:	f000 fd99 	bl	800b99c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	dce9      	bgt.n	800ae4e <prvUnlockQueue+0x60>
 800ae7a:	e000      	b.n	800ae7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	22ff      	movs	r2, #255	; 0xff
 800ae82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae86:	f001 f9ed 	bl	800c264 <vPortExitCritical>
}
 800ae8a:	bf00      	nop
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae9a:	f001 f9b3 	bl	800c204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d102      	bne.n	800aeac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aea6:	2301      	movs	r3, #1
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	e001      	b.n	800aeb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aeac:	2300      	movs	r3, #0
 800aeae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aeb0:	f001 f9d8 	bl	800c264 <vPortExitCritical>

	return xReturn;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aec6:	f001 f99d 	bl	800c204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d102      	bne.n	800aedc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aed6:	2301      	movs	r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	e001      	b.n	800aee0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aee0:	f001 f9c0 	bl	800c264 <vPortExitCritical>

	return xReturn;
 800aee4:	68fb      	ldr	r3, [r7, #12]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	e016      	b.n	800af2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aefe:	4a10      	ldr	r2, [pc, #64]	; (800af40 <vQueueUnregisterQueue+0x50>)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	00db      	lsls	r3, r3, #3
 800af04:	4413      	add	r3, r2
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d10b      	bne.n	800af26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800af0e:	4a0c      	ldr	r2, [pc, #48]	; (800af40 <vQueueUnregisterQueue+0x50>)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2100      	movs	r1, #0
 800af14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800af18:	4a09      	ldr	r2, [pc, #36]	; (800af40 <vQueueUnregisterQueue+0x50>)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	4413      	add	r3, r2
 800af20:	2200      	movs	r2, #0
 800af22:	605a      	str	r2, [r3, #4]
				break;
 800af24:	e006      	b.n	800af34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	3301      	adds	r3, #1
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b07      	cmp	r3, #7
 800af30:	d9e5      	bls.n	800aefe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr
 800af40:	200055d0 	.word	0x200055d0

0800af44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08e      	sub	sp, #56	; 0x38
 800af48:	af04      	add	r7, sp, #16
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <xTaskCreateStatic+0x2a>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	623b      	str	r3, [r7, #32]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <xTaskCreateStatic+0x46>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	61fb      	str	r3, [r7, #28]
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af8a:	23a0      	movs	r3, #160	; 0xa0
 800af8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	2ba0      	cmp	r3, #160	; 0xa0
 800af92:	d00a      	beq.n	800afaa <xTaskCreateStatic+0x66>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	61bb      	str	r3, [r7, #24]
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d01e      	beq.n	800aff0 <xTaskCreateStatic+0xac>
 800afb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01b      	beq.n	800aff0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	2202      	movs	r2, #2
 800afc6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afca:	2300      	movs	r3, #0
 800afcc:	9303      	str	r3, [sp, #12]
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	9302      	str	r3, [sp, #8]
 800afd2:	f107 0314 	add.w	r3, r7, #20
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 f850 	bl	800b088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afea:	f000 f8eb 	bl	800b1c4 <prvAddNewTaskToReadyList>
 800afee:	e001      	b.n	800aff4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aff4:	697b      	ldr	r3, [r7, #20]
	}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3728      	adds	r7, #40	; 0x28
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800affe:	b580      	push	{r7, lr}
 800b000:	b08c      	sub	sp, #48	; 0x30
 800b002:	af04      	add	r7, sp, #16
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	603b      	str	r3, [r7, #0]
 800b00a:	4613      	mov	r3, r2
 800b00c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b00e:	88fb      	ldrh	r3, [r7, #6]
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4618      	mov	r0, r3
 800b014:	f001 fa18 	bl	800c448 <pvPortMalloc>
 800b018:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00e      	beq.n	800b03e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b020:	20a0      	movs	r0, #160	; 0xa0
 800b022:	f001 fa11 	bl	800c448 <pvPortMalloc>
 800b026:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	631a      	str	r2, [r3, #48]	; 0x30
 800b034:	e005      	b.n	800b042 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b036:	6978      	ldr	r0, [r7, #20]
 800b038:	f001 fad2 	bl	800c5e0 <vPortFree>
 800b03c:	e001      	b.n	800b042 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d017      	beq.n	800b078 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b050:	88fa      	ldrh	r2, [r7, #6]
 800b052:	2300      	movs	r3, #0
 800b054:	9303      	str	r3, [sp, #12]
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	9302      	str	r3, [sp, #8]
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	68b9      	ldr	r1, [r7, #8]
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 f80e 	bl	800b088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b06c:	69f8      	ldr	r0, [r7, #28]
 800b06e:	f000 f8a9 	bl	800b1c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b072:	2301      	movs	r3, #1
 800b074:	61bb      	str	r3, [r7, #24]
 800b076:	e002      	b.n	800b07e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b078:	f04f 33ff 	mov.w	r3, #4294967295
 800b07c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b07e:	69bb      	ldr	r3, [r7, #24]
	}
 800b080:	4618      	mov	r0, r3
 800b082:	3720      	adds	r7, #32
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	f023 0307 	bic.w	r3, r3, #7
 800b0ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	617b      	str	r3, [r7, #20]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d01f      	beq.n	800b116 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61fb      	str	r3, [r7, #28]
 800b0da:	e012      	b.n	800b102 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	7819      	ldrb	r1, [r3, #0]
 800b0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	3334      	adds	r3, #52	; 0x34
 800b0ec:	460a      	mov	r2, r1
 800b0ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d006      	beq.n	800b10a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	3301      	adds	r3, #1
 800b100:	61fb      	str	r3, [r7, #28]
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	2b0f      	cmp	r3, #15
 800b106:	d9e9      	bls.n	800b0dc <prvInitialiseNewTask+0x54>
 800b108:	e000      	b.n	800b10c <prvInitialiseNewTask+0x84>
			{
				break;
 800b10a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b114:	e003      	b.n	800b11e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	2b06      	cmp	r3, #6
 800b122:	d901      	bls.n	800b128 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b124:	2306      	movs	r3, #6
 800b126:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b12c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b132:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	2200      	movs	r2, #0
 800b138:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	3304      	adds	r3, #4
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff f8a3 	bl	800a28a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b146:	3318      	adds	r3, #24
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff f89e 	bl	800a28a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b152:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	f1c3 0207 	rsb	r2, r3, #7
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b162:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	2200      	movs	r2, #0
 800b168:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	334c      	adds	r3, #76	; 0x4c
 800b178:	224c      	movs	r2, #76	; 0x4c
 800b17a:	2100      	movs	r1, #0
 800b17c:	4618      	mov	r0, r3
 800b17e:	f002 f8c6 	bl	800d30e <memset>
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	4a0c      	ldr	r2, [pc, #48]	; (800b1b8 <prvInitialiseNewTask+0x130>)
 800b186:	651a      	str	r2, [r3, #80]	; 0x50
 800b188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18a:	4a0c      	ldr	r2, [pc, #48]	; (800b1bc <prvInitialiseNewTask+0x134>)
 800b18c:	655a      	str	r2, [r3, #84]	; 0x54
 800b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b190:	4a0b      	ldr	r2, [pc, #44]	; (800b1c0 <prvInitialiseNewTask+0x138>)
 800b192:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	68f9      	ldr	r1, [r7, #12]
 800b198:	69b8      	ldr	r0, [r7, #24]
 800b19a:	f000 ff07 	bl	800bfac <pxPortInitialiseStack>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b0:	bf00      	nop
 800b1b2:	3720      	adds	r7, #32
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20009364 	.word	0x20009364
 800b1bc:	200093cc 	.word	0x200093cc
 800b1c0:	20009434 	.word	0x20009434

0800b1c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1cc:	f001 f81a 	bl	800c204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1d0:	4b2a      	ldr	r3, [pc, #168]	; (800b27c <prvAddNewTaskToReadyList+0xb8>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	4a29      	ldr	r2, [pc, #164]	; (800b27c <prvAddNewTaskToReadyList+0xb8>)
 800b1d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1da:	4b29      	ldr	r3, [pc, #164]	; (800b280 <prvAddNewTaskToReadyList+0xbc>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d109      	bne.n	800b1f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1e2:	4a27      	ldr	r2, [pc, #156]	; (800b280 <prvAddNewTaskToReadyList+0xbc>)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1e8:	4b24      	ldr	r3, [pc, #144]	; (800b27c <prvAddNewTaskToReadyList+0xb8>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d110      	bne.n	800b212 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1f0:	f000 fbf8 	bl	800b9e4 <prvInitialiseTaskLists>
 800b1f4:	e00d      	b.n	800b212 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1f6:	4b23      	ldr	r3, [pc, #140]	; (800b284 <prvAddNewTaskToReadyList+0xc0>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d109      	bne.n	800b212 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1fe:	4b20      	ldr	r3, [pc, #128]	; (800b280 <prvAddNewTaskToReadyList+0xbc>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b208:	429a      	cmp	r2, r3
 800b20a:	d802      	bhi.n	800b212 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b20c:	4a1c      	ldr	r2, [pc, #112]	; (800b280 <prvAddNewTaskToReadyList+0xbc>)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b212:	4b1d      	ldr	r3, [pc, #116]	; (800b288 <prvAddNewTaskToReadyList+0xc4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	4a1b      	ldr	r2, [pc, #108]	; (800b288 <prvAddNewTaskToReadyList+0xc4>)
 800b21a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b220:	2201      	movs	r2, #1
 800b222:	409a      	lsls	r2, r3
 800b224:	4b19      	ldr	r3, [pc, #100]	; (800b28c <prvAddNewTaskToReadyList+0xc8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4313      	orrs	r3, r2
 800b22a:	4a18      	ldr	r2, [pc, #96]	; (800b28c <prvAddNewTaskToReadyList+0xc8>)
 800b22c:	6013      	str	r3, [r2, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b232:	4613      	mov	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4413      	add	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4a15      	ldr	r2, [pc, #84]	; (800b290 <prvAddNewTaskToReadyList+0xcc>)
 800b23c:	441a      	add	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3304      	adds	r3, #4
 800b242:	4619      	mov	r1, r3
 800b244:	4610      	mov	r0, r2
 800b246:	f7ff f82d 	bl	800a2a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b24a:	f001 f80b 	bl	800c264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b24e:	4b0d      	ldr	r3, [pc, #52]	; (800b284 <prvAddNewTaskToReadyList+0xc0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00e      	beq.n	800b274 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b256:	4b0a      	ldr	r3, [pc, #40]	; (800b280 <prvAddNewTaskToReadyList+0xbc>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	429a      	cmp	r2, r3
 800b262:	d207      	bcs.n	800b274 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b264:	4b0b      	ldr	r3, [pc, #44]	; (800b294 <prvAddNewTaskToReadyList+0xd0>)
 800b266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	20005710 	.word	0x20005710
 800b280:	20005610 	.word	0x20005610
 800b284:	2000571c 	.word	0x2000571c
 800b288:	2000572c 	.word	0x2000572c
 800b28c:	20005718 	.word	0x20005718
 800b290:	20005614 	.word	0x20005614
 800b294:	e000ed04 	.word	0xe000ed04

0800b298 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d017      	beq.n	800b2da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2aa:	4b13      	ldr	r3, [pc, #76]	; (800b2f8 <vTaskDelay+0x60>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00a      	beq.n	800b2c8 <vTaskDelay+0x30>
	__asm volatile
 800b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	60bb      	str	r3, [r7, #8]
}
 800b2c4:	bf00      	nop
 800b2c6:	e7fe      	b.n	800b2c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2c8:	f000 f884 	bl	800b3d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fe06 	bl	800bee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2d4:	f000 f88c 	bl	800b3f0 <xTaskResumeAll>
 800b2d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d107      	bne.n	800b2f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b2e0:	4b06      	ldr	r3, [pc, #24]	; (800b2fc <vTaskDelay+0x64>)
 800b2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2f0:	bf00      	nop
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20005738 	.word	0x20005738
 800b2fc:	e000ed04 	.word	0xe000ed04

0800b300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	; 0x28
 800b304:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b306:	2300      	movs	r3, #0
 800b308:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b30e:	463a      	mov	r2, r7
 800b310:	1d39      	adds	r1, r7, #4
 800b312:	f107 0308 	add.w	r3, r7, #8
 800b316:	4618      	mov	r0, r3
 800b318:	f7f6 fe1c 	bl	8001f54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	9202      	str	r2, [sp, #8]
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	2300      	movs	r3, #0
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	2300      	movs	r3, #0
 800b32c:	460a      	mov	r2, r1
 800b32e:	4921      	ldr	r1, [pc, #132]	; (800b3b4 <vTaskStartScheduler+0xb4>)
 800b330:	4821      	ldr	r0, [pc, #132]	; (800b3b8 <vTaskStartScheduler+0xb8>)
 800b332:	f7ff fe07 	bl	800af44 <xTaskCreateStatic>
 800b336:	4603      	mov	r3, r0
 800b338:	4a20      	ldr	r2, [pc, #128]	; (800b3bc <vTaskStartScheduler+0xbc>)
 800b33a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b33c:	4b1f      	ldr	r3, [pc, #124]	; (800b3bc <vTaskStartScheduler+0xbc>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b344:	2301      	movs	r3, #1
 800b346:	617b      	str	r3, [r7, #20]
 800b348:	e001      	b.n	800b34e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d11b      	bne.n	800b38c <vTaskStartScheduler+0x8c>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	613b      	str	r3, [r7, #16]
}
 800b366:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b368:	4b15      	ldr	r3, [pc, #84]	; (800b3c0 <vTaskStartScheduler+0xc0>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	334c      	adds	r3, #76	; 0x4c
 800b36e:	4a15      	ldr	r2, [pc, #84]	; (800b3c4 <vTaskStartScheduler+0xc4>)
 800b370:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b372:	4b15      	ldr	r3, [pc, #84]	; (800b3c8 <vTaskStartScheduler+0xc8>)
 800b374:	f04f 32ff 	mov.w	r2, #4294967295
 800b378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b37a:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <vTaskStartScheduler+0xcc>)
 800b37c:	2201      	movs	r2, #1
 800b37e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b380:	4b13      	ldr	r3, [pc, #76]	; (800b3d0 <vTaskStartScheduler+0xd0>)
 800b382:	2200      	movs	r2, #0
 800b384:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b386:	f000 fe9b 	bl	800c0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b38a:	e00e      	b.n	800b3aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d10a      	bne.n	800b3aa <vTaskStartScheduler+0xaa>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	60fb      	str	r3, [r7, #12]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <vTaskStartScheduler+0xa8>
}
 800b3aa:	bf00      	nop
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	0800faf4 	.word	0x0800faf4
 800b3b8:	0800b9b5 	.word	0x0800b9b5
 800b3bc:	20005734 	.word	0x20005734
 800b3c0:	20005610 	.word	0x20005610
 800b3c4:	20000088 	.word	0x20000088
 800b3c8:	20005730 	.word	0x20005730
 800b3cc:	2000571c 	.word	0x2000571c
 800b3d0:	20005714 	.word	0x20005714

0800b3d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <vTaskSuspendAll+0x18>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	4a03      	ldr	r2, [pc, #12]	; (800b3ec <vTaskSuspendAll+0x18>)
 800b3e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3e2:	bf00      	nop
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	20005738 	.word	0x20005738

0800b3f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3fe:	4b41      	ldr	r3, [pc, #260]	; (800b504 <xTaskResumeAll+0x114>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10a      	bne.n	800b41c <xTaskResumeAll+0x2c>
	__asm volatile
 800b406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40a:	f383 8811 	msr	BASEPRI, r3
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	603b      	str	r3, [r7, #0]
}
 800b418:	bf00      	nop
 800b41a:	e7fe      	b.n	800b41a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b41c:	f000 fef2 	bl	800c204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b420:	4b38      	ldr	r3, [pc, #224]	; (800b504 <xTaskResumeAll+0x114>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3b01      	subs	r3, #1
 800b426:	4a37      	ldr	r2, [pc, #220]	; (800b504 <xTaskResumeAll+0x114>)
 800b428:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b42a:	4b36      	ldr	r3, [pc, #216]	; (800b504 <xTaskResumeAll+0x114>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d161      	bne.n	800b4f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b432:	4b35      	ldr	r3, [pc, #212]	; (800b508 <xTaskResumeAll+0x118>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d05d      	beq.n	800b4f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b43a:	e02e      	b.n	800b49a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b43c:	4b33      	ldr	r3, [pc, #204]	; (800b50c <xTaskResumeAll+0x11c>)
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	3318      	adds	r3, #24
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe ff88 	bl	800a35e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3304      	adds	r3, #4
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe ff83 	bl	800a35e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	2201      	movs	r2, #1
 800b45e:	409a      	lsls	r2, r3
 800b460:	4b2b      	ldr	r3, [pc, #172]	; (800b510 <xTaskResumeAll+0x120>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4313      	orrs	r3, r2
 800b466:	4a2a      	ldr	r2, [pc, #168]	; (800b510 <xTaskResumeAll+0x120>)
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4a27      	ldr	r2, [pc, #156]	; (800b514 <xTaskResumeAll+0x124>)
 800b478:	441a      	add	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4619      	mov	r1, r3
 800b480:	4610      	mov	r0, r2
 800b482:	f7fe ff0f 	bl	800a2a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48a:	4b23      	ldr	r3, [pc, #140]	; (800b518 <xTaskResumeAll+0x128>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b490:	429a      	cmp	r2, r3
 800b492:	d302      	bcc.n	800b49a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b494:	4b21      	ldr	r3, [pc, #132]	; (800b51c <xTaskResumeAll+0x12c>)
 800b496:	2201      	movs	r2, #1
 800b498:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b49a:	4b1c      	ldr	r3, [pc, #112]	; (800b50c <xTaskResumeAll+0x11c>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1cc      	bne.n	800b43c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4a8:	f000 fb3e 	bl	800bb28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b4ac:	4b1c      	ldr	r3, [pc, #112]	; (800b520 <xTaskResumeAll+0x130>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d010      	beq.n	800b4da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4b8:	f000 f858 	bl	800b56c <xTaskIncrementTick>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b4c2:	4b16      	ldr	r3, [pc, #88]	; (800b51c <xTaskResumeAll+0x12c>)
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1f1      	bne.n	800b4b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b4d4:	4b12      	ldr	r3, [pc, #72]	; (800b520 <xTaskResumeAll+0x130>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4da:	4b10      	ldr	r3, [pc, #64]	; (800b51c <xTaskResumeAll+0x12c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4e6:	4b0f      	ldr	r3, [pc, #60]	; (800b524 <xTaskResumeAll+0x134>)
 800b4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4f6:	f000 feb5 	bl	800c264 <vPortExitCritical>

	return xAlreadyYielded;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20005738 	.word	0x20005738
 800b508:	20005710 	.word	0x20005710
 800b50c:	200056d0 	.word	0x200056d0
 800b510:	20005718 	.word	0x20005718
 800b514:	20005614 	.word	0x20005614
 800b518:	20005610 	.word	0x20005610
 800b51c:	20005724 	.word	0x20005724
 800b520:	20005720 	.word	0x20005720
 800b524:	e000ed04 	.word	0xe000ed04

0800b528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b52e:	4b05      	ldr	r3, [pc, #20]	; (800b544 <xTaskGetTickCount+0x1c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b534:	687b      	ldr	r3, [r7, #4]
}
 800b536:	4618      	mov	r0, r3
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	20005714 	.word	0x20005714

0800b548 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b54e:	f000 ff3b 	bl	800c3c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b552:	2300      	movs	r3, #0
 800b554:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b556:	4b04      	ldr	r3, [pc, #16]	; (800b568 <xTaskGetTickCountFromISR+0x20>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b55c:	683b      	ldr	r3, [r7, #0]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	20005714 	.word	0x20005714

0800b56c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b576:	4b4e      	ldr	r3, [pc, #312]	; (800b6b0 <xTaskIncrementTick+0x144>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f040 808e 	bne.w	800b69c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b580:	4b4c      	ldr	r3, [pc, #304]	; (800b6b4 <xTaskIncrementTick+0x148>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b588:	4a4a      	ldr	r2, [pc, #296]	; (800b6b4 <xTaskIncrementTick+0x148>)
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d120      	bne.n	800b5d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b594:	4b48      	ldr	r3, [pc, #288]	; (800b6b8 <xTaskIncrementTick+0x14c>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00a      	beq.n	800b5b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	603b      	str	r3, [r7, #0]
}
 800b5b0:	bf00      	nop
 800b5b2:	e7fe      	b.n	800b5b2 <xTaskIncrementTick+0x46>
 800b5b4:	4b40      	ldr	r3, [pc, #256]	; (800b6b8 <xTaskIncrementTick+0x14c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	60fb      	str	r3, [r7, #12]
 800b5ba:	4b40      	ldr	r3, [pc, #256]	; (800b6bc <xTaskIncrementTick+0x150>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a3e      	ldr	r2, [pc, #248]	; (800b6b8 <xTaskIncrementTick+0x14c>)
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	4a3e      	ldr	r2, [pc, #248]	; (800b6bc <xTaskIncrementTick+0x150>)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	4b3d      	ldr	r3, [pc, #244]	; (800b6c0 <xTaskIncrementTick+0x154>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	4a3c      	ldr	r2, [pc, #240]	; (800b6c0 <xTaskIncrementTick+0x154>)
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	f000 faa9 	bl	800bb28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5d6:	4b3b      	ldr	r3, [pc, #236]	; (800b6c4 <xTaskIncrementTick+0x158>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d348      	bcc.n	800b672 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5e0:	4b35      	ldr	r3, [pc, #212]	; (800b6b8 <xTaskIncrementTick+0x14c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d104      	bne.n	800b5f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ea:	4b36      	ldr	r3, [pc, #216]	; (800b6c4 <xTaskIncrementTick+0x158>)
 800b5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f0:	601a      	str	r2, [r3, #0]
					break;
 800b5f2:	e03e      	b.n	800b672 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f4:	4b30      	ldr	r3, [pc, #192]	; (800b6b8 <xTaskIncrementTick+0x14c>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d203      	bcs.n	800b614 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b60c:	4a2d      	ldr	r2, [pc, #180]	; (800b6c4 <xTaskIncrementTick+0x158>)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b612:	e02e      	b.n	800b672 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	3304      	adds	r3, #4
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fe fea0 	bl	800a35e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b622:	2b00      	cmp	r3, #0
 800b624:	d004      	beq.n	800b630 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	3318      	adds	r3, #24
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fe97 	bl	800a35e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	2201      	movs	r2, #1
 800b636:	409a      	lsls	r2, r3
 800b638:	4b23      	ldr	r3, [pc, #140]	; (800b6c8 <xTaskIncrementTick+0x15c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	4a22      	ldr	r2, [pc, #136]	; (800b6c8 <xTaskIncrementTick+0x15c>)
 800b640:	6013      	str	r3, [r2, #0]
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b646:	4613      	mov	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4a1f      	ldr	r2, [pc, #124]	; (800b6cc <xTaskIncrementTick+0x160>)
 800b650:	441a      	add	r2, r3
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	3304      	adds	r3, #4
 800b656:	4619      	mov	r1, r3
 800b658:	4610      	mov	r0, r2
 800b65a:	f7fe fe23 	bl	800a2a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b662:	4b1b      	ldr	r3, [pc, #108]	; (800b6d0 <xTaskIncrementTick+0x164>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	429a      	cmp	r2, r3
 800b66a:	d3b9      	bcc.n	800b5e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b66c:	2301      	movs	r3, #1
 800b66e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b670:	e7b6      	b.n	800b5e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b672:	4b17      	ldr	r3, [pc, #92]	; (800b6d0 <xTaskIncrementTick+0x164>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b678:	4914      	ldr	r1, [pc, #80]	; (800b6cc <xTaskIncrementTick+0x160>)
 800b67a:	4613      	mov	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4413      	add	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	440b      	add	r3, r1
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d901      	bls.n	800b68e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b68a:	2301      	movs	r3, #1
 800b68c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b68e:	4b11      	ldr	r3, [pc, #68]	; (800b6d4 <xTaskIncrementTick+0x168>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d007      	beq.n	800b6a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b696:	2301      	movs	r3, #1
 800b698:	617b      	str	r3, [r7, #20]
 800b69a:	e004      	b.n	800b6a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b69c:	4b0e      	ldr	r3, [pc, #56]	; (800b6d8 <xTaskIncrementTick+0x16c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	4a0d      	ldr	r2, [pc, #52]	; (800b6d8 <xTaskIncrementTick+0x16c>)
 800b6a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b6a6:	697b      	ldr	r3, [r7, #20]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	20005738 	.word	0x20005738
 800b6b4:	20005714 	.word	0x20005714
 800b6b8:	200056c8 	.word	0x200056c8
 800b6bc:	200056cc 	.word	0x200056cc
 800b6c0:	20005728 	.word	0x20005728
 800b6c4:	20005730 	.word	0x20005730
 800b6c8:	20005718 	.word	0x20005718
 800b6cc:	20005614 	.word	0x20005614
 800b6d0:	20005610 	.word	0x20005610
 800b6d4:	20005724 	.word	0x20005724
 800b6d8:	20005720 	.word	0x20005720

0800b6dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b087      	sub	sp, #28
 800b6e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6e2:	4b29      	ldr	r3, [pc, #164]	; (800b788 <vTaskSwitchContext+0xac>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6ea:	4b28      	ldr	r3, [pc, #160]	; (800b78c <vTaskSwitchContext+0xb0>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6f0:	e044      	b.n	800b77c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b6f2:	4b26      	ldr	r3, [pc, #152]	; (800b78c <vTaskSwitchContext+0xb0>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f8:	4b25      	ldr	r3, [pc, #148]	; (800b790 <vTaskSwitchContext+0xb4>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	fab3 f383 	clz	r3, r3
 800b704:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b706:	7afb      	ldrb	r3, [r7, #11]
 800b708:	f1c3 031f 	rsb	r3, r3, #31
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	4921      	ldr	r1, [pc, #132]	; (800b794 <vTaskSwitchContext+0xb8>)
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	4613      	mov	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	440b      	add	r3, r1
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10a      	bne.n	800b738 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	607b      	str	r3, [r7, #4]
}
 800b734:	bf00      	nop
 800b736:	e7fe      	b.n	800b736 <vTaskSwitchContext+0x5a>
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	4613      	mov	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4a14      	ldr	r2, [pc, #80]	; (800b794 <vTaskSwitchContext+0xb8>)
 800b744:	4413      	add	r3, r2
 800b746:	613b      	str	r3, [r7, #16]
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	605a      	str	r2, [r3, #4]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	3308      	adds	r3, #8
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d104      	bne.n	800b768 <vTaskSwitchContext+0x8c>
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	605a      	str	r2, [r3, #4]
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	4a0a      	ldr	r2, [pc, #40]	; (800b798 <vTaskSwitchContext+0xbc>)
 800b770:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b772:	4b09      	ldr	r3, [pc, #36]	; (800b798 <vTaskSwitchContext+0xbc>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	334c      	adds	r3, #76	; 0x4c
 800b778:	4a08      	ldr	r2, [pc, #32]	; (800b79c <vTaskSwitchContext+0xc0>)
 800b77a:	6013      	str	r3, [r2, #0]
}
 800b77c:	bf00      	nop
 800b77e:	371c      	adds	r7, #28
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	20005738 	.word	0x20005738
 800b78c:	20005724 	.word	0x20005724
 800b790:	20005718 	.word	0x20005718
 800b794:	20005614 	.word	0x20005614
 800b798:	20005610 	.word	0x20005610
 800b79c:	20000088 	.word	0x20000088

0800b7a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	60fb      	str	r3, [r7, #12]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7c6:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <vTaskPlaceOnEventList+0x44>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3318      	adds	r3, #24
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7fe fd8c 	bl	800a2ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	6838      	ldr	r0, [r7, #0]
 800b7d8:	f000 fb82 	bl	800bee0 <prvAddCurrentTaskToDelayedList>
}
 800b7dc:	bf00      	nop
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20005610 	.word	0x20005610

0800b7e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	60fb      	str	r3, [r7, #12]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	3318      	adds	r3, #24
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fda0 	bl	800a35e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b81e:	4b1d      	ldr	r3, [pc, #116]	; (800b894 <xTaskRemoveFromEventList+0xac>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d11c      	bne.n	800b860 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	3304      	adds	r3, #4
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fd97 	bl	800a35e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	2201      	movs	r2, #1
 800b836:	409a      	lsls	r2, r3
 800b838:	4b17      	ldr	r3, [pc, #92]	; (800b898 <xTaskRemoveFromEventList+0xb0>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	4a16      	ldr	r2, [pc, #88]	; (800b898 <xTaskRemoveFromEventList+0xb0>)
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b846:	4613      	mov	r3, r2
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4413      	add	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4a13      	ldr	r2, [pc, #76]	; (800b89c <xTaskRemoveFromEventList+0xb4>)
 800b850:	441a      	add	r2, r3
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	3304      	adds	r3, #4
 800b856:	4619      	mov	r1, r3
 800b858:	4610      	mov	r0, r2
 800b85a:	f7fe fd23 	bl	800a2a4 <vListInsertEnd>
 800b85e:	e005      	b.n	800b86c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	3318      	adds	r3, #24
 800b864:	4619      	mov	r1, r3
 800b866:	480e      	ldr	r0, [pc, #56]	; (800b8a0 <xTaskRemoveFromEventList+0xb8>)
 800b868:	f7fe fd1c 	bl	800a2a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b870:	4b0c      	ldr	r3, [pc, #48]	; (800b8a4 <xTaskRemoveFromEventList+0xbc>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b876:	429a      	cmp	r2, r3
 800b878:	d905      	bls.n	800b886 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b87a:	2301      	movs	r3, #1
 800b87c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b87e:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <xTaskRemoveFromEventList+0xc0>)
 800b880:	2201      	movs	r2, #1
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	e001      	b.n	800b88a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b88a:	697b      	ldr	r3, [r7, #20]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20005738 	.word	0x20005738
 800b898:	20005718 	.word	0x20005718
 800b89c:	20005614 	.word	0x20005614
 800b8a0:	200056d0 	.word	0x200056d0
 800b8a4:	20005610 	.word	0x20005610
 800b8a8:	20005724 	.word	0x20005724

0800b8ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8b4:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <vTaskInternalSetTimeOutState+0x24>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8bc:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <vTaskInternalSetTimeOutState+0x28>)
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	605a      	str	r2, [r3, #4]
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	20005728 	.word	0x20005728
 800b8d4:	20005714 	.word	0x20005714

0800b8d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	613b      	str	r3, [r7, #16]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	60fb      	str	r3, [r7, #12]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b91a:	f000 fc73 	bl	800c204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b91e:	4b1d      	ldr	r3, [pc, #116]	; (800b994 <xTaskCheckForTimeOut+0xbc>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	69ba      	ldr	r2, [r7, #24]
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b936:	d102      	bne.n	800b93e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b938:	2300      	movs	r3, #0
 800b93a:	61fb      	str	r3, [r7, #28]
 800b93c:	e023      	b.n	800b986 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b15      	ldr	r3, [pc, #84]	; (800b998 <xTaskCheckForTimeOut+0xc0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d007      	beq.n	800b95a <xTaskCheckForTimeOut+0x82>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	429a      	cmp	r2, r3
 800b952:	d302      	bcc.n	800b95a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	e015      	b.n	800b986 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	429a      	cmp	r2, r3
 800b962:	d20b      	bcs.n	800b97c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	1ad2      	subs	r2, r2, r3
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff ff9b 	bl	800b8ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b976:	2300      	movs	r3, #0
 800b978:	61fb      	str	r3, [r7, #28]
 800b97a:	e004      	b.n	800b986 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2200      	movs	r2, #0
 800b980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b986:	f000 fc6d 	bl	800c264 <vPortExitCritical>

	return xReturn;
 800b98a:	69fb      	ldr	r3, [r7, #28]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20005714 	.word	0x20005714
 800b998:	20005728 	.word	0x20005728

0800b99c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9a0:	4b03      	ldr	r3, [pc, #12]	; (800b9b0 <vTaskMissedYield+0x14>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	20005724 	.word	0x20005724

0800b9b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9bc:	f000 f852 	bl	800ba64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9c0:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <prvIdleTask+0x28>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d9f9      	bls.n	800b9bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9c8:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <prvIdleTask+0x2c>)
 800b9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9d8:	e7f0      	b.n	800b9bc <prvIdleTask+0x8>
 800b9da:	bf00      	nop
 800b9dc:	20005614 	.word	0x20005614
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	607b      	str	r3, [r7, #4]
 800b9ee:	e00c      	b.n	800ba0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4a12      	ldr	r2, [pc, #72]	; (800ba44 <prvInitialiseTaskLists+0x60>)
 800b9fc:	4413      	add	r3, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe fc23 	bl	800a24a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3301      	adds	r3, #1
 800ba08:	607b      	str	r3, [r7, #4]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b06      	cmp	r3, #6
 800ba0e:	d9ef      	bls.n	800b9f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba10:	480d      	ldr	r0, [pc, #52]	; (800ba48 <prvInitialiseTaskLists+0x64>)
 800ba12:	f7fe fc1a 	bl	800a24a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba16:	480d      	ldr	r0, [pc, #52]	; (800ba4c <prvInitialiseTaskLists+0x68>)
 800ba18:	f7fe fc17 	bl	800a24a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba1c:	480c      	ldr	r0, [pc, #48]	; (800ba50 <prvInitialiseTaskLists+0x6c>)
 800ba1e:	f7fe fc14 	bl	800a24a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba22:	480c      	ldr	r0, [pc, #48]	; (800ba54 <prvInitialiseTaskLists+0x70>)
 800ba24:	f7fe fc11 	bl	800a24a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba28:	480b      	ldr	r0, [pc, #44]	; (800ba58 <prvInitialiseTaskLists+0x74>)
 800ba2a:	f7fe fc0e 	bl	800a24a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba2e:	4b0b      	ldr	r3, [pc, #44]	; (800ba5c <prvInitialiseTaskLists+0x78>)
 800ba30:	4a05      	ldr	r2, [pc, #20]	; (800ba48 <prvInitialiseTaskLists+0x64>)
 800ba32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba34:	4b0a      	ldr	r3, [pc, #40]	; (800ba60 <prvInitialiseTaskLists+0x7c>)
 800ba36:	4a05      	ldr	r2, [pc, #20]	; (800ba4c <prvInitialiseTaskLists+0x68>)
 800ba38:	601a      	str	r2, [r3, #0]
}
 800ba3a:	bf00      	nop
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20005614 	.word	0x20005614
 800ba48:	200056a0 	.word	0x200056a0
 800ba4c:	200056b4 	.word	0x200056b4
 800ba50:	200056d0 	.word	0x200056d0
 800ba54:	200056e4 	.word	0x200056e4
 800ba58:	200056fc 	.word	0x200056fc
 800ba5c:	200056c8 	.word	0x200056c8
 800ba60:	200056cc 	.word	0x200056cc

0800ba64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba6a:	e019      	b.n	800baa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba6c:	f000 fbca 	bl	800c204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba70:	4b10      	ldr	r3, [pc, #64]	; (800bab4 <prvCheckTasksWaitingTermination+0x50>)
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe fc6e 	bl	800a35e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba82:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <prvCheckTasksWaitingTermination+0x54>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	4a0b      	ldr	r2, [pc, #44]	; (800bab8 <prvCheckTasksWaitingTermination+0x54>)
 800ba8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba8c:	4b0b      	ldr	r3, [pc, #44]	; (800babc <prvCheckTasksWaitingTermination+0x58>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	4a0a      	ldr	r2, [pc, #40]	; (800babc <prvCheckTasksWaitingTermination+0x58>)
 800ba94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba96:	f000 fbe5 	bl	800c264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f810 	bl	800bac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baa0:	4b06      	ldr	r3, [pc, #24]	; (800babc <prvCheckTasksWaitingTermination+0x58>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e1      	bne.n	800ba6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800baa8:	bf00      	nop
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	200056e4 	.word	0x200056e4
 800bab8:	20005710 	.word	0x20005710
 800babc:	200056f8 	.word	0x200056f8

0800bac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	334c      	adds	r3, #76	; 0x4c
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 fc4d 	bl	800d36c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d108      	bne.n	800baee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fd7d 	bl	800c5e0 <vPortFree>
				vPortFree( pxTCB );
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fd7a 	bl	800c5e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800baec:	e018      	b.n	800bb20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d103      	bne.n	800bb00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fd71 	bl	800c5e0 <vPortFree>
	}
 800bafe:	e00f      	b.n	800bb20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d00a      	beq.n	800bb20 <prvDeleteTCB+0x60>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	60fb      	str	r3, [r7, #12]
}
 800bb1c:	bf00      	nop
 800bb1e:	e7fe      	b.n	800bb1e <prvDeleteTCB+0x5e>
	}
 800bb20:	bf00      	nop
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb2e:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <prvResetNextTaskUnblockTime+0x38>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d104      	bne.n	800bb42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb38:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <prvResetNextTaskUnblockTime+0x3c>)
 800bb3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb40:	e008      	b.n	800bb54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb42:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <prvResetNextTaskUnblockTime+0x38>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	4a04      	ldr	r2, [pc, #16]	; (800bb64 <prvResetNextTaskUnblockTime+0x3c>)
 800bb52:	6013      	str	r3, [r2, #0]
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	200056c8 	.word	0x200056c8
 800bb64:	20005730 	.word	0x20005730

0800bb68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb6e:	4b0b      	ldr	r3, [pc, #44]	; (800bb9c <xTaskGetSchedulerState+0x34>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb76:	2301      	movs	r3, #1
 800bb78:	607b      	str	r3, [r7, #4]
 800bb7a:	e008      	b.n	800bb8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb7c:	4b08      	ldr	r3, [pc, #32]	; (800bba0 <xTaskGetSchedulerState+0x38>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d102      	bne.n	800bb8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb84:	2302      	movs	r3, #2
 800bb86:	607b      	str	r3, [r7, #4]
 800bb88:	e001      	b.n	800bb8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb8e:	687b      	ldr	r3, [r7, #4]
	}
 800bb90:	4618      	mov	r0, r3
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	2000571c 	.word	0x2000571c
 800bba0:	20005738 	.word	0x20005738

0800bba4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d05e      	beq.n	800bc78 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbbe:	4b31      	ldr	r3, [pc, #196]	; (800bc84 <xTaskPriorityInherit+0xe0>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d24e      	bcs.n	800bc66 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	db06      	blt.n	800bbde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbd0:	4b2c      	ldr	r3, [pc, #176]	; (800bc84 <xTaskPriorityInherit+0xe0>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd6:	f1c3 0207 	rsb	r2, r3, #7
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	6959      	ldr	r1, [r3, #20]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4a26      	ldr	r2, [pc, #152]	; (800bc88 <xTaskPriorityInherit+0xe4>)
 800bbf0:	4413      	add	r3, r2
 800bbf2:	4299      	cmp	r1, r3
 800bbf4:	d12f      	bne.n	800bc56 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe fbaf 	bl	800a35e <uxListRemove>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10a      	bne.n	800bc1c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc10:	43da      	mvns	r2, r3
 800bc12:	4b1e      	ldr	r3, [pc, #120]	; (800bc8c <xTaskPriorityInherit+0xe8>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4013      	ands	r3, r2
 800bc18:	4a1c      	ldr	r2, [pc, #112]	; (800bc8c <xTaskPriorityInherit+0xe8>)
 800bc1a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc1c:	4b19      	ldr	r3, [pc, #100]	; (800bc84 <xTaskPriorityInherit+0xe0>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	409a      	lsls	r2, r3
 800bc2e:	4b17      	ldr	r3, [pc, #92]	; (800bc8c <xTaskPriorityInherit+0xe8>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	4a15      	ldr	r2, [pc, #84]	; (800bc8c <xTaskPriorityInherit+0xe8>)
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4a10      	ldr	r2, [pc, #64]	; (800bc88 <xTaskPriorityInherit+0xe4>)
 800bc46:	441a      	add	r2, r3
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f7fe fb28 	bl	800a2a4 <vListInsertEnd>
 800bc54:	e004      	b.n	800bc60 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc56:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <xTaskPriorityInherit+0xe0>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc60:	2301      	movs	r3, #1
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	e008      	b.n	800bc78 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc6a:	4b06      	ldr	r3, [pc, #24]	; (800bc84 <xTaskPriorityInherit+0xe0>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d201      	bcs.n	800bc78 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc74:	2301      	movs	r3, #1
 800bc76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc78:	68fb      	ldr	r3, [r7, #12]
	}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20005610 	.word	0x20005610
 800bc88:	20005614 	.word	0x20005614
 800bc8c:	20005718 	.word	0x20005718

0800bc90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d06e      	beq.n	800bd84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bca6:	4b3a      	ldr	r3, [pc, #232]	; (800bd90 <xTaskPriorityDisinherit+0x100>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	693a      	ldr	r2, [r7, #16]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d00a      	beq.n	800bcc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	60fb      	str	r3, [r7, #12]
}
 800bcc2:	bf00      	nop
 800bcc4:	e7fe      	b.n	800bcc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10a      	bne.n	800bce4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	60bb      	str	r3, [r7, #8]
}
 800bce0:	bf00      	nop
 800bce2:	e7fe      	b.n	800bce2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce8:	1e5a      	subs	r2, r3, #1
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d044      	beq.n	800bd84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d140      	bne.n	800bd84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	3304      	adds	r3, #4
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fb29 	bl	800a35e <uxListRemove>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d115      	bne.n	800bd3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	491f      	ldr	r1, [pc, #124]	; (800bd94 <xTaskPriorityDisinherit+0x104>)
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	440b      	add	r3, r1
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <xTaskPriorityDisinherit+0xae>
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd32:	43da      	mvns	r2, r3
 800bd34:	4b18      	ldr	r3, [pc, #96]	; (800bd98 <xTaskPriorityDisinherit+0x108>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4013      	ands	r3, r2
 800bd3a:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <xTaskPriorityDisinherit+0x108>)
 800bd3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4a:	f1c3 0207 	rsb	r2, r3, #7
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd56:	2201      	movs	r2, #1
 800bd58:	409a      	lsls	r2, r3
 800bd5a:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <xTaskPriorityDisinherit+0x108>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	4a0d      	ldr	r2, [pc, #52]	; (800bd98 <xTaskPriorityDisinherit+0x108>)
 800bd62:	6013      	str	r3, [r2, #0]
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd68:	4613      	mov	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4a08      	ldr	r2, [pc, #32]	; (800bd94 <xTaskPriorityDisinherit+0x104>)
 800bd72:	441a      	add	r2, r3
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	3304      	adds	r3, #4
 800bd78:	4619      	mov	r1, r3
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	f7fe fa92 	bl	800a2a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd80:	2301      	movs	r3, #1
 800bd82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd84:	697b      	ldr	r3, [r7, #20]
	}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3718      	adds	r7, #24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	20005610 	.word	0x20005610
 800bd94:	20005614 	.word	0x20005614
 800bd98:	20005718 	.word	0x20005718

0800bd9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b088      	sub	sp, #32
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d077      	beq.n	800bea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10a      	bne.n	800bdd2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	60fb      	str	r3, [r7, #12]
}
 800bdce:	bf00      	nop
 800bdd0:	e7fe      	b.n	800bdd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d902      	bls.n	800bde2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	61fb      	str	r3, [r7, #28]
 800bde0:	e002      	b.n	800bde8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bde6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	69fa      	ldr	r2, [r7, #28]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d058      	beq.n	800bea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d153      	bne.n	800bea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bdfc:	4b2b      	ldr	r3, [pc, #172]	; (800beac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	429a      	cmp	r2, r3
 800be04:	d10a      	bne.n	800be1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800be06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	60bb      	str	r3, [r7, #8]
}
 800be18:	bf00      	nop
 800be1a:	e7fe      	b.n	800be1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	69fa      	ldr	r2, [r7, #28]
 800be26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	db04      	blt.n	800be3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	f1c3 0207 	rsb	r2, r3, #7
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	6959      	ldr	r1, [r3, #20]
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	4613      	mov	r3, r2
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4413      	add	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4a19      	ldr	r2, [pc, #100]	; (800beb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800be4a:	4413      	add	r3, r2
 800be4c:	4299      	cmp	r1, r3
 800be4e:	d129      	bne.n	800bea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	3304      	adds	r3, #4
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe fa82 	bl	800a35e <uxListRemove>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10a      	bne.n	800be76 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be64:	2201      	movs	r2, #1
 800be66:	fa02 f303 	lsl.w	r3, r2, r3
 800be6a:	43da      	mvns	r2, r3
 800be6c:	4b11      	ldr	r3, [pc, #68]	; (800beb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4013      	ands	r3, r2
 800be72:	4a10      	ldr	r2, [pc, #64]	; (800beb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800be74:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7a:	2201      	movs	r2, #1
 800be7c:	409a      	lsls	r2, r3
 800be7e:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4313      	orrs	r3, r2
 800be84:	4a0b      	ldr	r2, [pc, #44]	; (800beb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800be86:	6013      	str	r3, [r2, #0]
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4a06      	ldr	r2, [pc, #24]	; (800beb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800be96:	441a      	add	r2, r3
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	3304      	adds	r3, #4
 800be9c:	4619      	mov	r1, r3
 800be9e:	4610      	mov	r0, r2
 800bea0:	f7fe fa00 	bl	800a2a4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bea4:	bf00      	nop
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20005610 	.word	0x20005610
 800beb0:	20005614 	.word	0x20005614
 800beb4:	20005718 	.word	0x20005718

0800beb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800beb8:	b480      	push	{r7}
 800beba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bebc:	4b07      	ldr	r3, [pc, #28]	; (800bedc <pvTaskIncrementMutexHeldCount+0x24>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d004      	beq.n	800bece <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bec4:	4b05      	ldr	r3, [pc, #20]	; (800bedc <pvTaskIncrementMutexHeldCount+0x24>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800beca:	3201      	adds	r2, #1
 800becc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bece:	4b03      	ldr	r3, [pc, #12]	; (800bedc <pvTaskIncrementMutexHeldCount+0x24>)
 800bed0:	681b      	ldr	r3, [r3, #0]
	}
 800bed2:	4618      	mov	r0, r3
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	20005610 	.word	0x20005610

0800bee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800beea:	4b29      	ldr	r3, [pc, #164]	; (800bf90 <prvAddCurrentTaskToDelayedList+0xb0>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bef0:	4b28      	ldr	r3, [pc, #160]	; (800bf94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fa31 	bl	800a35e <uxListRemove>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10b      	bne.n	800bf1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bf02:	4b24      	ldr	r3, [pc, #144]	; (800bf94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	2201      	movs	r2, #1
 800bf0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0e:	43da      	mvns	r2, r3
 800bf10:	4b21      	ldr	r3, [pc, #132]	; (800bf98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4013      	ands	r3, r2
 800bf16:	4a20      	ldr	r2, [pc, #128]	; (800bf98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf20:	d10a      	bne.n	800bf38 <prvAddCurrentTaskToDelayedList+0x58>
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d007      	beq.n	800bf38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf28:	4b1a      	ldr	r3, [pc, #104]	; (800bf94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4619      	mov	r1, r3
 800bf30:	481a      	ldr	r0, [pc, #104]	; (800bf9c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf32:	f7fe f9b7 	bl	800a2a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf36:	e026      	b.n	800bf86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf40:	4b14      	ldr	r3, [pc, #80]	; (800bf94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d209      	bcs.n	800bf64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf50:	4b13      	ldr	r3, [pc, #76]	; (800bfa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	4b0f      	ldr	r3, [pc, #60]	; (800bf94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3304      	adds	r3, #4
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	f7fe f9c5 	bl	800a2ec <vListInsert>
}
 800bf62:	e010      	b.n	800bf86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf64:	4b0f      	ldr	r3, [pc, #60]	; (800bfa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4610      	mov	r0, r2
 800bf72:	f7fe f9bb 	bl	800a2ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf76:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d202      	bcs.n	800bf86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf80:	4a09      	ldr	r2, [pc, #36]	; (800bfa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	6013      	str	r3, [r2, #0]
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	20005714 	.word	0x20005714
 800bf94:	20005610 	.word	0x20005610
 800bf98:	20005718 	.word	0x20005718
 800bf9c:	200056fc 	.word	0x200056fc
 800bfa0:	200056cc 	.word	0x200056cc
 800bfa4:	200056c8 	.word	0x200056c8
 800bfa8:	20005730 	.word	0x20005730

0800bfac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	3b04      	subs	r3, #4
 800bfbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bfc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	3b04      	subs	r3, #4
 800bfca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	f023 0201 	bic.w	r2, r3, #1
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3b04      	subs	r3, #4
 800bfda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfdc:	4a0c      	ldr	r2, [pc, #48]	; (800c010 <pxPortInitialiseStack+0x64>)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	3b14      	subs	r3, #20
 800bfe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3b04      	subs	r3, #4
 800bff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f06f 0202 	mvn.w	r2, #2
 800bffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3b20      	subs	r3, #32
 800c000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c002:	68fb      	ldr	r3, [r7, #12]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	0800c015 	.word	0x0800c015

0800c014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c01e:	4b12      	ldr	r3, [pc, #72]	; (800c068 <prvTaskExitError+0x54>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c026:	d00a      	beq.n	800c03e <prvTaskExitError+0x2a>
	__asm volatile
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	60fb      	str	r3, [r7, #12]
}
 800c03a:	bf00      	nop
 800c03c:	e7fe      	b.n	800c03c <prvTaskExitError+0x28>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	60bb      	str	r3, [r7, #8]
}
 800c050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c052:	bf00      	nop
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0fc      	beq.n	800c054 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c05a:	bf00      	nop
 800c05c:	bf00      	nop
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	2000002c 	.word	0x2000002c
 800c06c:	00000000 	.word	0x00000000

0800c070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <pxCurrentTCBConst2>)
 800c072:	6819      	ldr	r1, [r3, #0]
 800c074:	6808      	ldr	r0, [r1, #0]
 800c076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07a:	f380 8809 	msr	PSP, r0
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f04f 0000 	mov.w	r0, #0
 800c086:	f380 8811 	msr	BASEPRI, r0
 800c08a:	4770      	bx	lr
 800c08c:	f3af 8000 	nop.w

0800c090 <pxCurrentTCBConst2>:
 800c090:	20005610 	.word	0x20005610
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop

0800c098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c098:	4808      	ldr	r0, [pc, #32]	; (800c0bc <prvPortStartFirstTask+0x24>)
 800c09a:	6800      	ldr	r0, [r0, #0]
 800c09c:	6800      	ldr	r0, [r0, #0]
 800c09e:	f380 8808 	msr	MSP, r0
 800c0a2:	f04f 0000 	mov.w	r0, #0
 800c0a6:	f380 8814 	msr	CONTROL, r0
 800c0aa:	b662      	cpsie	i
 800c0ac:	b661      	cpsie	f
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	df00      	svc	0
 800c0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0ba:	bf00      	nop
 800c0bc:	e000ed08 	.word	0xe000ed08

0800c0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0c6:	4b46      	ldr	r3, [pc, #280]	; (800c1e0 <xPortStartScheduler+0x120>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a46      	ldr	r2, [pc, #280]	; (800c1e4 <xPortStartScheduler+0x124>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d10a      	bne.n	800c0e6 <xPortStartScheduler+0x26>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	613b      	str	r3, [r7, #16]
}
 800c0e2:	bf00      	nop
 800c0e4:	e7fe      	b.n	800c0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0e6:	4b3e      	ldr	r3, [pc, #248]	; (800c1e0 <xPortStartScheduler+0x120>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a3f      	ldr	r2, [pc, #252]	; (800c1e8 <xPortStartScheduler+0x128>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d10a      	bne.n	800c106 <xPortStartScheduler+0x46>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	60fb      	str	r3, [r7, #12]
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c106:	4b39      	ldr	r3, [pc, #228]	; (800c1ec <xPortStartScheduler+0x12c>)
 800c108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	22ff      	movs	r2, #255	; 0xff
 800c116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c120:	78fb      	ldrb	r3, [r7, #3]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	4b31      	ldr	r3, [pc, #196]	; (800c1f0 <xPortStartScheduler+0x130>)
 800c12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c12e:	4b31      	ldr	r3, [pc, #196]	; (800c1f4 <xPortStartScheduler+0x134>)
 800c130:	2207      	movs	r2, #7
 800c132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c134:	e009      	b.n	800c14a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c136:	4b2f      	ldr	r3, [pc, #188]	; (800c1f4 <xPortStartScheduler+0x134>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	4a2d      	ldr	r2, [pc, #180]	; (800c1f4 <xPortStartScheduler+0x134>)
 800c13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	b2db      	uxtb	r3, r3
 800c148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c14a:	78fb      	ldrb	r3, [r7, #3]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c152:	2b80      	cmp	r3, #128	; 0x80
 800c154:	d0ef      	beq.n	800c136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c156:	4b27      	ldr	r3, [pc, #156]	; (800c1f4 <xPortStartScheduler+0x134>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f1c3 0307 	rsb	r3, r3, #7
 800c15e:	2b04      	cmp	r3, #4
 800c160:	d00a      	beq.n	800c178 <xPortStartScheduler+0xb8>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	60bb      	str	r3, [r7, #8]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c178:	4b1e      	ldr	r3, [pc, #120]	; (800c1f4 <xPortStartScheduler+0x134>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	021b      	lsls	r3, r3, #8
 800c17e:	4a1d      	ldr	r2, [pc, #116]	; (800c1f4 <xPortStartScheduler+0x134>)
 800c180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c182:	4b1c      	ldr	r3, [pc, #112]	; (800c1f4 <xPortStartScheduler+0x134>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c18a:	4a1a      	ldr	r2, [pc, #104]	; (800c1f4 <xPortStartScheduler+0x134>)
 800c18c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	b2da      	uxtb	r2, r3
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c196:	4b18      	ldr	r3, [pc, #96]	; (800c1f8 <xPortStartScheduler+0x138>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a17      	ldr	r2, [pc, #92]	; (800c1f8 <xPortStartScheduler+0x138>)
 800c19c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1a2:	4b15      	ldr	r3, [pc, #84]	; (800c1f8 <xPortStartScheduler+0x138>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a14      	ldr	r2, [pc, #80]	; (800c1f8 <xPortStartScheduler+0x138>)
 800c1a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c1ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1ae:	f000 f8dd 	bl	800c36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1b2:	4b12      	ldr	r3, [pc, #72]	; (800c1fc <xPortStartScheduler+0x13c>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1b8:	f000 f8fc 	bl	800c3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1bc:	4b10      	ldr	r3, [pc, #64]	; (800c200 <xPortStartScheduler+0x140>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a0f      	ldr	r2, [pc, #60]	; (800c200 <xPortStartScheduler+0x140>)
 800c1c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c1c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1c8:	f7ff ff66 	bl	800c098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1cc:	f7ff fa86 	bl	800b6dc <vTaskSwitchContext>
	prvTaskExitError();
 800c1d0:	f7ff ff20 	bl	800c014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	e000ed00 	.word	0xe000ed00
 800c1e4:	410fc271 	.word	0x410fc271
 800c1e8:	410fc270 	.word	0x410fc270
 800c1ec:	e000e400 	.word	0xe000e400
 800c1f0:	2000573c 	.word	0x2000573c
 800c1f4:	20005740 	.word	0x20005740
 800c1f8:	e000ed20 	.word	0xe000ed20
 800c1fc:	2000002c 	.word	0x2000002c
 800c200:	e000ef34 	.word	0xe000ef34

0800c204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	607b      	str	r3, [r7, #4]
}
 800c21c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c21e:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <vPortEnterCritical+0x58>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3301      	adds	r3, #1
 800c224:	4a0d      	ldr	r2, [pc, #52]	; (800c25c <vPortEnterCritical+0x58>)
 800c226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c228:	4b0c      	ldr	r3, [pc, #48]	; (800c25c <vPortEnterCritical+0x58>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d10f      	bne.n	800c250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c230:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <vPortEnterCritical+0x5c>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00a      	beq.n	800c250 <vPortEnterCritical+0x4c>
	__asm volatile
 800c23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	603b      	str	r3, [r7, #0]
}
 800c24c:	bf00      	nop
 800c24e:	e7fe      	b.n	800c24e <vPortEnterCritical+0x4a>
	}
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	2000002c 	.word	0x2000002c
 800c260:	e000ed04 	.word	0xe000ed04

0800c264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c26a:	4b12      	ldr	r3, [pc, #72]	; (800c2b4 <vPortExitCritical+0x50>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10a      	bne.n	800c288 <vPortExitCritical+0x24>
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	607b      	str	r3, [r7, #4]
}
 800c284:	bf00      	nop
 800c286:	e7fe      	b.n	800c286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c288:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <vPortExitCritical+0x50>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	4a09      	ldr	r2, [pc, #36]	; (800c2b4 <vPortExitCritical+0x50>)
 800c290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c292:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <vPortExitCritical+0x50>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d105      	bne.n	800c2a6 <vPortExitCritical+0x42>
 800c29a:	2300      	movs	r3, #0
 800c29c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	f383 8811 	msr	BASEPRI, r3
}
 800c2a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2a6:	bf00      	nop
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	2000002c 	.word	0x2000002c
	...

0800c2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2c0:	f3ef 8009 	mrs	r0, PSP
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	4b15      	ldr	r3, [pc, #84]	; (800c320 <pxCurrentTCBConst>)
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	f01e 0f10 	tst.w	lr, #16
 800c2d0:	bf08      	it	eq
 800c2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2da:	6010      	str	r0, [r2, #0]
 800c2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2e4:	f380 8811 	msr	BASEPRI, r0
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f7ff f9f4 	bl	800b6dc <vTaskSwitchContext>
 800c2f4:	f04f 0000 	mov.w	r0, #0
 800c2f8:	f380 8811 	msr	BASEPRI, r0
 800c2fc:	bc09      	pop	{r0, r3}
 800c2fe:	6819      	ldr	r1, [r3, #0]
 800c300:	6808      	ldr	r0, [r1, #0]
 800c302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c306:	f01e 0f10 	tst.w	lr, #16
 800c30a:	bf08      	it	eq
 800c30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c310:	f380 8809 	msr	PSP, r0
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	f3af 8000 	nop.w

0800c320 <pxCurrentTCBConst>:
 800c320:	20005610 	.word	0x20005610
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c324:	bf00      	nop
 800c326:	bf00      	nop

0800c328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	607b      	str	r3, [r7, #4]
}
 800c340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c342:	f7ff f913 	bl	800b56c <xTaskIncrementTick>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c34c:	4b06      	ldr	r3, [pc, #24]	; (800c368 <SysTick_Handler+0x40>)
 800c34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	2300      	movs	r3, #0
 800c356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	f383 8811 	msr	BASEPRI, r3
}
 800c35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	e000ed04 	.word	0xe000ed04

0800c36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c36c:	b480      	push	{r7}
 800c36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c370:	4b0b      	ldr	r3, [pc, #44]	; (800c3a0 <vPortSetupTimerInterrupt+0x34>)
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c376:	4b0b      	ldr	r3, [pc, #44]	; (800c3a4 <vPortSetupTimerInterrupt+0x38>)
 800c378:	2200      	movs	r2, #0
 800c37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c37c:	4b0a      	ldr	r3, [pc, #40]	; (800c3a8 <vPortSetupTimerInterrupt+0x3c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a0a      	ldr	r2, [pc, #40]	; (800c3ac <vPortSetupTimerInterrupt+0x40>)
 800c382:	fba2 2303 	umull	r2, r3, r2, r3
 800c386:	099b      	lsrs	r3, r3, #6
 800c388:	4a09      	ldr	r2, [pc, #36]	; (800c3b0 <vPortSetupTimerInterrupt+0x44>)
 800c38a:	3b01      	subs	r3, #1
 800c38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c38e:	4b04      	ldr	r3, [pc, #16]	; (800c3a0 <vPortSetupTimerInterrupt+0x34>)
 800c390:	2207      	movs	r2, #7
 800c392:	601a      	str	r2, [r3, #0]
}
 800c394:	bf00      	nop
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	e000e010 	.word	0xe000e010
 800c3a4:	e000e018 	.word	0xe000e018
 800c3a8:	20000004 	.word	0x20000004
 800c3ac:	10624dd3 	.word	0x10624dd3
 800c3b0:	e000e014 	.word	0xe000e014

0800c3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c3c4 <vPortEnableVFP+0x10>
 800c3b8:	6801      	ldr	r1, [r0, #0]
 800c3ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c3be:	6001      	str	r1, [r0, #0]
 800c3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3c2:	bf00      	nop
 800c3c4:	e000ed88 	.word	0xe000ed88

0800c3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3ce:	f3ef 8305 	mrs	r3, IPSR
 800c3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b0f      	cmp	r3, #15
 800c3d8:	d914      	bls.n	800c404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3da:	4a17      	ldr	r2, [pc, #92]	; (800c438 <vPortValidateInterruptPriority+0x70>)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4413      	add	r3, r2
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3e4:	4b15      	ldr	r3, [pc, #84]	; (800c43c <vPortValidateInterruptPriority+0x74>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	7afa      	ldrb	r2, [r7, #11]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d20a      	bcs.n	800c404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	607b      	str	r3, [r7, #4]
}
 800c400:	bf00      	nop
 800c402:	e7fe      	b.n	800c402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c404:	4b0e      	ldr	r3, [pc, #56]	; (800c440 <vPortValidateInterruptPriority+0x78>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c40c:	4b0d      	ldr	r3, [pc, #52]	; (800c444 <vPortValidateInterruptPriority+0x7c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	429a      	cmp	r2, r3
 800c412:	d90a      	bls.n	800c42a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c418:	f383 8811 	msr	BASEPRI, r3
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	603b      	str	r3, [r7, #0]
}
 800c426:	bf00      	nop
 800c428:	e7fe      	b.n	800c428 <vPortValidateInterruptPriority+0x60>
	}
 800c42a:	bf00      	nop
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	e000e3f0 	.word	0xe000e3f0
 800c43c:	2000573c 	.word	0x2000573c
 800c440:	e000ed0c 	.word	0xe000ed0c
 800c444:	20005740 	.word	0x20005740

0800c448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08a      	sub	sp, #40	; 0x28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c450:	2300      	movs	r3, #0
 800c452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c454:	f7fe ffbe 	bl	800b3d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c458:	4b5b      	ldr	r3, [pc, #364]	; (800c5c8 <pvPortMalloc+0x180>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c460:	f000 f920 	bl	800c6a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c464:	4b59      	ldr	r3, [pc, #356]	; (800c5cc <pvPortMalloc+0x184>)
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4013      	ands	r3, r2
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f040 8093 	bne.w	800c598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d01d      	beq.n	800c4b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c478:	2208      	movs	r2, #8
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4413      	add	r3, r2
 800c47e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	2b00      	cmp	r3, #0
 800c488:	d014      	beq.n	800c4b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f023 0307 	bic.w	r3, r3, #7
 800c490:	3308      	adds	r3, #8
 800c492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f003 0307 	and.w	r3, r3, #7
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <pvPortMalloc+0x6c>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	617b      	str	r3, [r7, #20]
}
 800c4b0:	bf00      	nop
 800c4b2:	e7fe      	b.n	800c4b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d06e      	beq.n	800c598 <pvPortMalloc+0x150>
 800c4ba:	4b45      	ldr	r3, [pc, #276]	; (800c5d0 <pvPortMalloc+0x188>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d869      	bhi.n	800c598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4c4:	4b43      	ldr	r3, [pc, #268]	; (800c5d4 <pvPortMalloc+0x18c>)
 800c4c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4c8:	4b42      	ldr	r3, [pc, #264]	; (800c5d4 <pvPortMalloc+0x18c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4ce:	e004      	b.n	800c4da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d903      	bls.n	800c4ec <pvPortMalloc+0xa4>
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1f1      	bne.n	800c4d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4ec:	4b36      	ldr	r3, [pc, #216]	; (800c5c8 <pvPortMalloc+0x180>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d050      	beq.n	800c598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4f6:	6a3b      	ldr	r3, [r7, #32]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2208      	movs	r2, #8
 800c4fc:	4413      	add	r3, r2
 800c4fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	6a3b      	ldr	r3, [r7, #32]
 800c506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	1ad2      	subs	r2, r2, r3
 800c510:	2308      	movs	r3, #8
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	429a      	cmp	r2, r3
 800c516:	d91f      	bls.n	800c558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4413      	add	r3, r2
 800c51e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	f003 0307 	and.w	r3, r3, #7
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00a      	beq.n	800c540 <pvPortMalloc+0xf8>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	613b      	str	r3, [r7, #16]
}
 800c53c:	bf00      	nop
 800c53e:	e7fe      	b.n	800c53e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c542:	685a      	ldr	r2, [r3, #4]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	1ad2      	subs	r2, r2, r3
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c552:	69b8      	ldr	r0, [r7, #24]
 800c554:	f000 f908 	bl	800c768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c558:	4b1d      	ldr	r3, [pc, #116]	; (800c5d0 <pvPortMalloc+0x188>)
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	4a1b      	ldr	r2, [pc, #108]	; (800c5d0 <pvPortMalloc+0x188>)
 800c564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c566:	4b1a      	ldr	r3, [pc, #104]	; (800c5d0 <pvPortMalloc+0x188>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4b1b      	ldr	r3, [pc, #108]	; (800c5d8 <pvPortMalloc+0x190>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d203      	bcs.n	800c57a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c572:	4b17      	ldr	r3, [pc, #92]	; (800c5d0 <pvPortMalloc+0x188>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a18      	ldr	r2, [pc, #96]	; (800c5d8 <pvPortMalloc+0x190>)
 800c578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	4b13      	ldr	r3, [pc, #76]	; (800c5cc <pvPortMalloc+0x184>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	431a      	orrs	r2, r3
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c58e:	4b13      	ldr	r3, [pc, #76]	; (800c5dc <pvPortMalloc+0x194>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3301      	adds	r3, #1
 800c594:	4a11      	ldr	r2, [pc, #68]	; (800c5dc <pvPortMalloc+0x194>)
 800c596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c598:	f7fe ff2a 	bl	800b3f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	f003 0307 	and.w	r3, r3, #7
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00a      	beq.n	800c5bc <pvPortMalloc+0x174>
	__asm volatile
 800c5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5aa:	f383 8811 	msr	BASEPRI, r3
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	60fb      	str	r3, [r7, #12]
}
 800c5b8:	bf00      	nop
 800c5ba:	e7fe      	b.n	800c5ba <pvPortMalloc+0x172>
	return pvReturn;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3728      	adds	r7, #40	; 0x28
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	2000934c 	.word	0x2000934c
 800c5cc:	20009360 	.word	0x20009360
 800c5d0:	20009350 	.word	0x20009350
 800c5d4:	20009344 	.word	0x20009344
 800c5d8:	20009354 	.word	0x20009354
 800c5dc:	20009358 	.word	0x20009358

0800c5e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d04d      	beq.n	800c68e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5f2:	2308      	movs	r3, #8
 800c5f4:	425b      	negs	r3, r3
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	4b24      	ldr	r3, [pc, #144]	; (800c698 <vPortFree+0xb8>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4013      	ands	r3, r2
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <vPortFree+0x44>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	60fb      	str	r3, [r7, #12]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00a      	beq.n	800c642 <vPortFree+0x62>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	60bb      	str	r3, [r7, #8]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	4b14      	ldr	r3, [pc, #80]	; (800c698 <vPortFree+0xb8>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4013      	ands	r3, r2
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d01e      	beq.n	800c68e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d11a      	bne.n	800c68e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	4b0e      	ldr	r3, [pc, #56]	; (800c698 <vPortFree+0xb8>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	43db      	mvns	r3, r3
 800c662:	401a      	ands	r2, r3
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c668:	f7fe feb4 	bl	800b3d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <vPortFree+0xbc>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4413      	add	r3, r2
 800c676:	4a09      	ldr	r2, [pc, #36]	; (800c69c <vPortFree+0xbc>)
 800c678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c67a:	6938      	ldr	r0, [r7, #16]
 800c67c:	f000 f874 	bl	800c768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c680:	4b07      	ldr	r3, [pc, #28]	; (800c6a0 <vPortFree+0xc0>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3301      	adds	r3, #1
 800c686:	4a06      	ldr	r2, [pc, #24]	; (800c6a0 <vPortFree+0xc0>)
 800c688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c68a:	f7fe feb1 	bl	800b3f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c68e:	bf00      	nop
 800c690:	3718      	adds	r7, #24
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	20009360 	.word	0x20009360
 800c69c:	20009350 	.word	0x20009350
 800c6a0:	2000935c 	.word	0x2000935c

0800c6a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c6ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6b0:	4b27      	ldr	r3, [pc, #156]	; (800c750 <prvHeapInit+0xac>)
 800c6b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00c      	beq.n	800c6d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3307      	adds	r3, #7
 800c6c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f023 0307 	bic.w	r3, r3, #7
 800c6ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	4a1f      	ldr	r2, [pc, #124]	; (800c750 <prvHeapInit+0xac>)
 800c6d4:	4413      	add	r3, r2
 800c6d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6dc:	4a1d      	ldr	r2, [pc, #116]	; (800c754 <prvHeapInit+0xb0>)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6e2:	4b1c      	ldr	r3, [pc, #112]	; (800c754 <prvHeapInit+0xb0>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6f0:	2208      	movs	r2, #8
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	1a9b      	subs	r3, r3, r2
 800c6f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f023 0307 	bic.w	r3, r3, #7
 800c6fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4a15      	ldr	r2, [pc, #84]	; (800c758 <prvHeapInit+0xb4>)
 800c704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c706:	4b14      	ldr	r3, [pc, #80]	; (800c758 <prvHeapInit+0xb4>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2200      	movs	r2, #0
 800c70c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c70e:	4b12      	ldr	r3, [pc, #72]	; (800c758 <prvHeapInit+0xb4>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	1ad2      	subs	r2, r2, r3
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c724:	4b0c      	ldr	r3, [pc, #48]	; (800c758 <prvHeapInit+0xb4>)
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	4a0a      	ldr	r2, [pc, #40]	; (800c75c <prvHeapInit+0xb8>)
 800c732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	4a09      	ldr	r2, [pc, #36]	; (800c760 <prvHeapInit+0xbc>)
 800c73a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c73c:	4b09      	ldr	r3, [pc, #36]	; (800c764 <prvHeapInit+0xc0>)
 800c73e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c742:	601a      	str	r2, [r3, #0]
}
 800c744:	bf00      	nop
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	20005744 	.word	0x20005744
 800c754:	20009344 	.word	0x20009344
 800c758:	2000934c 	.word	0x2000934c
 800c75c:	20009354 	.word	0x20009354
 800c760:	20009350 	.word	0x20009350
 800c764:	20009360 	.word	0x20009360

0800c768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c770:	4b28      	ldr	r3, [pc, #160]	; (800c814 <prvInsertBlockIntoFreeList+0xac>)
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	e002      	b.n	800c77c <prvInsertBlockIntoFreeList+0x14>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60fb      	str	r3, [r7, #12]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d8f7      	bhi.n	800c776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	4413      	add	r3, r2
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	429a      	cmp	r2, r3
 800c796:	d108      	bne.n	800c7aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	441a      	add	r2, r3
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	441a      	add	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d118      	bne.n	800c7f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	4b15      	ldr	r3, [pc, #84]	; (800c818 <prvInsertBlockIntoFreeList+0xb0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d00d      	beq.n	800c7e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685a      	ldr	r2, [r3, #4]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	441a      	add	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	e008      	b.n	800c7f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7e6:	4b0c      	ldr	r3, [pc, #48]	; (800c818 <prvInsertBlockIntoFreeList+0xb0>)
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	e003      	b.n	800c7f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d002      	beq.n	800c806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c806:	bf00      	nop
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	20009344 	.word	0x20009344
 800c818:	2000934c 	.word	0x2000934c

0800c81c <__cvt>:
 800c81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c820:	ec55 4b10 	vmov	r4, r5, d0
 800c824:	2d00      	cmp	r5, #0
 800c826:	460e      	mov	r6, r1
 800c828:	4619      	mov	r1, r3
 800c82a:	462b      	mov	r3, r5
 800c82c:	bfbb      	ittet	lt
 800c82e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c832:	461d      	movlt	r5, r3
 800c834:	2300      	movge	r3, #0
 800c836:	232d      	movlt	r3, #45	; 0x2d
 800c838:	700b      	strb	r3, [r1, #0]
 800c83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c83c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c840:	4691      	mov	r9, r2
 800c842:	f023 0820 	bic.w	r8, r3, #32
 800c846:	bfbc      	itt	lt
 800c848:	4622      	movlt	r2, r4
 800c84a:	4614      	movlt	r4, r2
 800c84c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c850:	d005      	beq.n	800c85e <__cvt+0x42>
 800c852:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c856:	d100      	bne.n	800c85a <__cvt+0x3e>
 800c858:	3601      	adds	r6, #1
 800c85a:	2102      	movs	r1, #2
 800c85c:	e000      	b.n	800c860 <__cvt+0x44>
 800c85e:	2103      	movs	r1, #3
 800c860:	ab03      	add	r3, sp, #12
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	ab02      	add	r3, sp, #8
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	ec45 4b10 	vmov	d0, r4, r5
 800c86c:	4653      	mov	r3, sl
 800c86e:	4632      	mov	r2, r6
 800c870:	f000 feca 	bl	800d608 <_dtoa_r>
 800c874:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c878:	4607      	mov	r7, r0
 800c87a:	d102      	bne.n	800c882 <__cvt+0x66>
 800c87c:	f019 0f01 	tst.w	r9, #1
 800c880:	d022      	beq.n	800c8c8 <__cvt+0xac>
 800c882:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c886:	eb07 0906 	add.w	r9, r7, r6
 800c88a:	d110      	bne.n	800c8ae <__cvt+0x92>
 800c88c:	783b      	ldrb	r3, [r7, #0]
 800c88e:	2b30      	cmp	r3, #48	; 0x30
 800c890:	d10a      	bne.n	800c8a8 <__cvt+0x8c>
 800c892:	2200      	movs	r2, #0
 800c894:	2300      	movs	r3, #0
 800c896:	4620      	mov	r0, r4
 800c898:	4629      	mov	r1, r5
 800c89a:	f7f4 f945 	bl	8000b28 <__aeabi_dcmpeq>
 800c89e:	b918      	cbnz	r0, 800c8a8 <__cvt+0x8c>
 800c8a0:	f1c6 0601 	rsb	r6, r6, #1
 800c8a4:	f8ca 6000 	str.w	r6, [sl]
 800c8a8:	f8da 3000 	ldr.w	r3, [sl]
 800c8ac:	4499      	add	r9, r3
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	f7f4 f937 	bl	8000b28 <__aeabi_dcmpeq>
 800c8ba:	b108      	cbz	r0, 800c8c0 <__cvt+0xa4>
 800c8bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8c0:	2230      	movs	r2, #48	; 0x30
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	454b      	cmp	r3, r9
 800c8c6:	d307      	bcc.n	800c8d8 <__cvt+0xbc>
 800c8c8:	9b03      	ldr	r3, [sp, #12]
 800c8ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8cc:	1bdb      	subs	r3, r3, r7
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	b004      	add	sp, #16
 800c8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d8:	1c59      	adds	r1, r3, #1
 800c8da:	9103      	str	r1, [sp, #12]
 800c8dc:	701a      	strb	r2, [r3, #0]
 800c8de:	e7f0      	b.n	800c8c2 <__cvt+0xa6>

0800c8e0 <__exponent>:
 800c8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2900      	cmp	r1, #0
 800c8e6:	bfb8      	it	lt
 800c8e8:	4249      	neglt	r1, r1
 800c8ea:	f803 2b02 	strb.w	r2, [r3], #2
 800c8ee:	bfb4      	ite	lt
 800c8f0:	222d      	movlt	r2, #45	; 0x2d
 800c8f2:	222b      	movge	r2, #43	; 0x2b
 800c8f4:	2909      	cmp	r1, #9
 800c8f6:	7042      	strb	r2, [r0, #1]
 800c8f8:	dd2a      	ble.n	800c950 <__exponent+0x70>
 800c8fa:	f10d 0207 	add.w	r2, sp, #7
 800c8fe:	4617      	mov	r7, r2
 800c900:	260a      	movs	r6, #10
 800c902:	4694      	mov	ip, r2
 800c904:	fb91 f5f6 	sdiv	r5, r1, r6
 800c908:	fb06 1415 	mls	r4, r6, r5, r1
 800c90c:	3430      	adds	r4, #48	; 0x30
 800c90e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c912:	460c      	mov	r4, r1
 800c914:	2c63      	cmp	r4, #99	; 0x63
 800c916:	f102 32ff 	add.w	r2, r2, #4294967295
 800c91a:	4629      	mov	r1, r5
 800c91c:	dcf1      	bgt.n	800c902 <__exponent+0x22>
 800c91e:	3130      	adds	r1, #48	; 0x30
 800c920:	f1ac 0402 	sub.w	r4, ip, #2
 800c924:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c928:	1c41      	adds	r1, r0, #1
 800c92a:	4622      	mov	r2, r4
 800c92c:	42ba      	cmp	r2, r7
 800c92e:	d30a      	bcc.n	800c946 <__exponent+0x66>
 800c930:	f10d 0209 	add.w	r2, sp, #9
 800c934:	eba2 020c 	sub.w	r2, r2, ip
 800c938:	42bc      	cmp	r4, r7
 800c93a:	bf88      	it	hi
 800c93c:	2200      	movhi	r2, #0
 800c93e:	4413      	add	r3, r2
 800c940:	1a18      	subs	r0, r3, r0
 800c942:	b003      	add	sp, #12
 800c944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c946:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c94a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c94e:	e7ed      	b.n	800c92c <__exponent+0x4c>
 800c950:	2330      	movs	r3, #48	; 0x30
 800c952:	3130      	adds	r1, #48	; 0x30
 800c954:	7083      	strb	r3, [r0, #2]
 800c956:	70c1      	strb	r1, [r0, #3]
 800c958:	1d03      	adds	r3, r0, #4
 800c95a:	e7f1      	b.n	800c940 <__exponent+0x60>

0800c95c <_printf_float>:
 800c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c960:	ed2d 8b02 	vpush	{d8}
 800c964:	b08d      	sub	sp, #52	; 0x34
 800c966:	460c      	mov	r4, r1
 800c968:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c96c:	4616      	mov	r6, r2
 800c96e:	461f      	mov	r7, r3
 800c970:	4605      	mov	r5, r0
 800c972:	f000 fce7 	bl	800d344 <_localeconv_r>
 800c976:	f8d0 a000 	ldr.w	sl, [r0]
 800c97a:	4650      	mov	r0, sl
 800c97c:	f7f3 fca8 	bl	80002d0 <strlen>
 800c980:	2300      	movs	r3, #0
 800c982:	930a      	str	r3, [sp, #40]	; 0x28
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	9305      	str	r3, [sp, #20]
 800c988:	f8d8 3000 	ldr.w	r3, [r8]
 800c98c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c990:	3307      	adds	r3, #7
 800c992:	f023 0307 	bic.w	r3, r3, #7
 800c996:	f103 0208 	add.w	r2, r3, #8
 800c99a:	f8c8 2000 	str.w	r2, [r8]
 800c99e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9a6:	9307      	str	r3, [sp, #28]
 800c9a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c9ac:	ee08 0a10 	vmov	s16, r0
 800c9b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c9b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9b8:	4b9e      	ldr	r3, [pc, #632]	; (800cc34 <_printf_float+0x2d8>)
 800c9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c9be:	f7f4 f8e5 	bl	8000b8c <__aeabi_dcmpun>
 800c9c2:	bb88      	cbnz	r0, 800ca28 <_printf_float+0xcc>
 800c9c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9c8:	4b9a      	ldr	r3, [pc, #616]	; (800cc34 <_printf_float+0x2d8>)
 800c9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ce:	f7f4 f8bf 	bl	8000b50 <__aeabi_dcmple>
 800c9d2:	bb48      	cbnz	r0, 800ca28 <_printf_float+0xcc>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	4640      	mov	r0, r8
 800c9da:	4649      	mov	r1, r9
 800c9dc:	f7f4 f8ae 	bl	8000b3c <__aeabi_dcmplt>
 800c9e0:	b110      	cbz	r0, 800c9e8 <_printf_float+0x8c>
 800c9e2:	232d      	movs	r3, #45	; 0x2d
 800c9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e8:	4a93      	ldr	r2, [pc, #588]	; (800cc38 <_printf_float+0x2dc>)
 800c9ea:	4b94      	ldr	r3, [pc, #592]	; (800cc3c <_printf_float+0x2e0>)
 800c9ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c9f0:	bf94      	ite	ls
 800c9f2:	4690      	movls	r8, r2
 800c9f4:	4698      	movhi	r8, r3
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	6123      	str	r3, [r4, #16]
 800c9fa:	9b05      	ldr	r3, [sp, #20]
 800c9fc:	f023 0304 	bic.w	r3, r3, #4
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	f04f 0900 	mov.w	r9, #0
 800ca06:	9700      	str	r7, [sp, #0]
 800ca08:	4633      	mov	r3, r6
 800ca0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	4628      	mov	r0, r5
 800ca10:	f000 f9da 	bl	800cdc8 <_printf_common>
 800ca14:	3001      	adds	r0, #1
 800ca16:	f040 8090 	bne.w	800cb3a <_printf_float+0x1de>
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1e:	b00d      	add	sp, #52	; 0x34
 800ca20:	ecbd 8b02 	vpop	{d8}
 800ca24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca28:	4642      	mov	r2, r8
 800ca2a:	464b      	mov	r3, r9
 800ca2c:	4640      	mov	r0, r8
 800ca2e:	4649      	mov	r1, r9
 800ca30:	f7f4 f8ac 	bl	8000b8c <__aeabi_dcmpun>
 800ca34:	b140      	cbz	r0, 800ca48 <_printf_float+0xec>
 800ca36:	464b      	mov	r3, r9
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	bfbc      	itt	lt
 800ca3c:	232d      	movlt	r3, #45	; 0x2d
 800ca3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca42:	4a7f      	ldr	r2, [pc, #508]	; (800cc40 <_printf_float+0x2e4>)
 800ca44:	4b7f      	ldr	r3, [pc, #508]	; (800cc44 <_printf_float+0x2e8>)
 800ca46:	e7d1      	b.n	800c9ec <_printf_float+0x90>
 800ca48:	6863      	ldr	r3, [r4, #4]
 800ca4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ca4e:	9206      	str	r2, [sp, #24]
 800ca50:	1c5a      	adds	r2, r3, #1
 800ca52:	d13f      	bne.n	800cad4 <_printf_float+0x178>
 800ca54:	2306      	movs	r3, #6
 800ca56:	6063      	str	r3, [r4, #4]
 800ca58:	9b05      	ldr	r3, [sp, #20]
 800ca5a:	6861      	ldr	r1, [r4, #4]
 800ca5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca60:	2300      	movs	r3, #0
 800ca62:	9303      	str	r3, [sp, #12]
 800ca64:	ab0a      	add	r3, sp, #40	; 0x28
 800ca66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca6a:	ab09      	add	r3, sp, #36	; 0x24
 800ca6c:	ec49 8b10 	vmov	d0, r8, r9
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	6022      	str	r2, [r4, #0]
 800ca74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f7ff fecf 	bl	800c81c <__cvt>
 800ca7e:	9b06      	ldr	r3, [sp, #24]
 800ca80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca82:	2b47      	cmp	r3, #71	; 0x47
 800ca84:	4680      	mov	r8, r0
 800ca86:	d108      	bne.n	800ca9a <_printf_float+0x13e>
 800ca88:	1cc8      	adds	r0, r1, #3
 800ca8a:	db02      	blt.n	800ca92 <_printf_float+0x136>
 800ca8c:	6863      	ldr	r3, [r4, #4]
 800ca8e:	4299      	cmp	r1, r3
 800ca90:	dd41      	ble.n	800cb16 <_printf_float+0x1ba>
 800ca92:	f1ab 0302 	sub.w	r3, fp, #2
 800ca96:	fa5f fb83 	uxtb.w	fp, r3
 800ca9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca9e:	d820      	bhi.n	800cae2 <_printf_float+0x186>
 800caa0:	3901      	subs	r1, #1
 800caa2:	465a      	mov	r2, fp
 800caa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800caa8:	9109      	str	r1, [sp, #36]	; 0x24
 800caaa:	f7ff ff19 	bl	800c8e0 <__exponent>
 800caae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cab0:	1813      	adds	r3, r2, r0
 800cab2:	2a01      	cmp	r2, #1
 800cab4:	4681      	mov	r9, r0
 800cab6:	6123      	str	r3, [r4, #16]
 800cab8:	dc02      	bgt.n	800cac0 <_printf_float+0x164>
 800caba:	6822      	ldr	r2, [r4, #0]
 800cabc:	07d2      	lsls	r2, r2, #31
 800cabe:	d501      	bpl.n	800cac4 <_printf_float+0x168>
 800cac0:	3301      	adds	r3, #1
 800cac2:	6123      	str	r3, [r4, #16]
 800cac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d09c      	beq.n	800ca06 <_printf_float+0xaa>
 800cacc:	232d      	movs	r3, #45	; 0x2d
 800cace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cad2:	e798      	b.n	800ca06 <_printf_float+0xaa>
 800cad4:	9a06      	ldr	r2, [sp, #24]
 800cad6:	2a47      	cmp	r2, #71	; 0x47
 800cad8:	d1be      	bne.n	800ca58 <_printf_float+0xfc>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1bc      	bne.n	800ca58 <_printf_float+0xfc>
 800cade:	2301      	movs	r3, #1
 800cae0:	e7b9      	b.n	800ca56 <_printf_float+0xfa>
 800cae2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cae6:	d118      	bne.n	800cb1a <_printf_float+0x1be>
 800cae8:	2900      	cmp	r1, #0
 800caea:	6863      	ldr	r3, [r4, #4]
 800caec:	dd0b      	ble.n	800cb06 <_printf_float+0x1aa>
 800caee:	6121      	str	r1, [r4, #16]
 800caf0:	b913      	cbnz	r3, 800caf8 <_printf_float+0x19c>
 800caf2:	6822      	ldr	r2, [r4, #0]
 800caf4:	07d0      	lsls	r0, r2, #31
 800caf6:	d502      	bpl.n	800cafe <_printf_float+0x1a2>
 800caf8:	3301      	adds	r3, #1
 800cafa:	440b      	add	r3, r1
 800cafc:	6123      	str	r3, [r4, #16]
 800cafe:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb00:	f04f 0900 	mov.w	r9, #0
 800cb04:	e7de      	b.n	800cac4 <_printf_float+0x168>
 800cb06:	b913      	cbnz	r3, 800cb0e <_printf_float+0x1b2>
 800cb08:	6822      	ldr	r2, [r4, #0]
 800cb0a:	07d2      	lsls	r2, r2, #31
 800cb0c:	d501      	bpl.n	800cb12 <_printf_float+0x1b6>
 800cb0e:	3302      	adds	r3, #2
 800cb10:	e7f4      	b.n	800cafc <_printf_float+0x1a0>
 800cb12:	2301      	movs	r3, #1
 800cb14:	e7f2      	b.n	800cafc <_printf_float+0x1a0>
 800cb16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cb1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb1c:	4299      	cmp	r1, r3
 800cb1e:	db05      	blt.n	800cb2c <_printf_float+0x1d0>
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	6121      	str	r1, [r4, #16]
 800cb24:	07d8      	lsls	r0, r3, #31
 800cb26:	d5ea      	bpl.n	800cafe <_printf_float+0x1a2>
 800cb28:	1c4b      	adds	r3, r1, #1
 800cb2a:	e7e7      	b.n	800cafc <_printf_float+0x1a0>
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	bfd4      	ite	le
 800cb30:	f1c1 0202 	rsble	r2, r1, #2
 800cb34:	2201      	movgt	r2, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	e7e0      	b.n	800cafc <_printf_float+0x1a0>
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	055a      	lsls	r2, r3, #21
 800cb3e:	d407      	bmi.n	800cb50 <_printf_float+0x1f4>
 800cb40:	6923      	ldr	r3, [r4, #16]
 800cb42:	4642      	mov	r2, r8
 800cb44:	4631      	mov	r1, r6
 800cb46:	4628      	mov	r0, r5
 800cb48:	47b8      	blx	r7
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	d12c      	bne.n	800cba8 <_printf_float+0x24c>
 800cb4e:	e764      	b.n	800ca1a <_printf_float+0xbe>
 800cb50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb54:	f240 80e0 	bls.w	800cd18 <_printf_float+0x3bc>
 800cb58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f7f3 ffe2 	bl	8000b28 <__aeabi_dcmpeq>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d034      	beq.n	800cbd2 <_printf_float+0x276>
 800cb68:	4a37      	ldr	r2, [pc, #220]	; (800cc48 <_printf_float+0x2ec>)
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	4631      	mov	r1, r6
 800cb6e:	4628      	mov	r0, r5
 800cb70:	47b8      	blx	r7
 800cb72:	3001      	adds	r0, #1
 800cb74:	f43f af51 	beq.w	800ca1a <_printf_float+0xbe>
 800cb78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	db02      	blt.n	800cb86 <_printf_float+0x22a>
 800cb80:	6823      	ldr	r3, [r4, #0]
 800cb82:	07d8      	lsls	r0, r3, #31
 800cb84:	d510      	bpl.n	800cba8 <_printf_float+0x24c>
 800cb86:	ee18 3a10 	vmov	r3, s16
 800cb8a:	4652      	mov	r2, sl
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	4628      	mov	r0, r5
 800cb90:	47b8      	blx	r7
 800cb92:	3001      	adds	r0, #1
 800cb94:	f43f af41 	beq.w	800ca1a <_printf_float+0xbe>
 800cb98:	f04f 0800 	mov.w	r8, #0
 800cb9c:	f104 091a 	add.w	r9, r4, #26
 800cba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba2:	3b01      	subs	r3, #1
 800cba4:	4543      	cmp	r3, r8
 800cba6:	dc09      	bgt.n	800cbbc <_printf_float+0x260>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	079b      	lsls	r3, r3, #30
 800cbac:	f100 8107 	bmi.w	800cdbe <_printf_float+0x462>
 800cbb0:	68e0      	ldr	r0, [r4, #12]
 800cbb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbb4:	4298      	cmp	r0, r3
 800cbb6:	bfb8      	it	lt
 800cbb8:	4618      	movlt	r0, r3
 800cbba:	e730      	b.n	800ca1e <_printf_float+0xc2>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	464a      	mov	r2, r9
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	47b8      	blx	r7
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	f43f af27 	beq.w	800ca1a <_printf_float+0xbe>
 800cbcc:	f108 0801 	add.w	r8, r8, #1
 800cbd0:	e7e6      	b.n	800cba0 <_printf_float+0x244>
 800cbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	dc39      	bgt.n	800cc4c <_printf_float+0x2f0>
 800cbd8:	4a1b      	ldr	r2, [pc, #108]	; (800cc48 <_printf_float+0x2ec>)
 800cbda:	2301      	movs	r3, #1
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4628      	mov	r0, r5
 800cbe0:	47b8      	blx	r7
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	f43f af19 	beq.w	800ca1a <_printf_float+0xbe>
 800cbe8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cbec:	4313      	orrs	r3, r2
 800cbee:	d102      	bne.n	800cbf6 <_printf_float+0x29a>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	07d9      	lsls	r1, r3, #31
 800cbf4:	d5d8      	bpl.n	800cba8 <_printf_float+0x24c>
 800cbf6:	ee18 3a10 	vmov	r3, s16
 800cbfa:	4652      	mov	r2, sl
 800cbfc:	4631      	mov	r1, r6
 800cbfe:	4628      	mov	r0, r5
 800cc00:	47b8      	blx	r7
 800cc02:	3001      	adds	r0, #1
 800cc04:	f43f af09 	beq.w	800ca1a <_printf_float+0xbe>
 800cc08:	f04f 0900 	mov.w	r9, #0
 800cc0c:	f104 0a1a 	add.w	sl, r4, #26
 800cc10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc12:	425b      	negs	r3, r3
 800cc14:	454b      	cmp	r3, r9
 800cc16:	dc01      	bgt.n	800cc1c <_printf_float+0x2c0>
 800cc18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc1a:	e792      	b.n	800cb42 <_printf_float+0x1e6>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	4652      	mov	r2, sl
 800cc20:	4631      	mov	r1, r6
 800cc22:	4628      	mov	r0, r5
 800cc24:	47b8      	blx	r7
 800cc26:	3001      	adds	r0, #1
 800cc28:	f43f aef7 	beq.w	800ca1a <_printf_float+0xbe>
 800cc2c:	f109 0901 	add.w	r9, r9, #1
 800cc30:	e7ee      	b.n	800cc10 <_printf_float+0x2b4>
 800cc32:	bf00      	nop
 800cc34:	7fefffff 	.word	0x7fefffff
 800cc38:	0800fb9c 	.word	0x0800fb9c
 800cc3c:	0800fba0 	.word	0x0800fba0
 800cc40:	0800fba4 	.word	0x0800fba4
 800cc44:	0800fba8 	.word	0x0800fba8
 800cc48:	0800fbac 	.word	0x0800fbac
 800cc4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc50:	429a      	cmp	r2, r3
 800cc52:	bfa8      	it	ge
 800cc54:	461a      	movge	r2, r3
 800cc56:	2a00      	cmp	r2, #0
 800cc58:	4691      	mov	r9, r2
 800cc5a:	dc37      	bgt.n	800cccc <_printf_float+0x370>
 800cc5c:	f04f 0b00 	mov.w	fp, #0
 800cc60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc64:	f104 021a 	add.w	r2, r4, #26
 800cc68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc6a:	9305      	str	r3, [sp, #20]
 800cc6c:	eba3 0309 	sub.w	r3, r3, r9
 800cc70:	455b      	cmp	r3, fp
 800cc72:	dc33      	bgt.n	800ccdc <_printf_float+0x380>
 800cc74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	db3b      	blt.n	800ccf4 <_printf_float+0x398>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	07da      	lsls	r2, r3, #31
 800cc80:	d438      	bmi.n	800ccf4 <_printf_float+0x398>
 800cc82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cc86:	eba2 0903 	sub.w	r9, r2, r3
 800cc8a:	9b05      	ldr	r3, [sp, #20]
 800cc8c:	1ad2      	subs	r2, r2, r3
 800cc8e:	4591      	cmp	r9, r2
 800cc90:	bfa8      	it	ge
 800cc92:	4691      	movge	r9, r2
 800cc94:	f1b9 0f00 	cmp.w	r9, #0
 800cc98:	dc35      	bgt.n	800cd06 <_printf_float+0x3aa>
 800cc9a:	f04f 0800 	mov.w	r8, #0
 800cc9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cca2:	f104 0a1a 	add.w	sl, r4, #26
 800cca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccaa:	1a9b      	subs	r3, r3, r2
 800ccac:	eba3 0309 	sub.w	r3, r3, r9
 800ccb0:	4543      	cmp	r3, r8
 800ccb2:	f77f af79 	ble.w	800cba8 <_printf_float+0x24c>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4652      	mov	r2, sl
 800ccba:	4631      	mov	r1, r6
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	47b8      	blx	r7
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	f43f aeaa 	beq.w	800ca1a <_printf_float+0xbe>
 800ccc6:	f108 0801 	add.w	r8, r8, #1
 800ccca:	e7ec      	b.n	800cca6 <_printf_float+0x34a>
 800cccc:	4613      	mov	r3, r2
 800ccce:	4631      	mov	r1, r6
 800ccd0:	4642      	mov	r2, r8
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	47b8      	blx	r7
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	d1c0      	bne.n	800cc5c <_printf_float+0x300>
 800ccda:	e69e      	b.n	800ca1a <_printf_float+0xbe>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	4631      	mov	r1, r6
 800cce0:	4628      	mov	r0, r5
 800cce2:	9205      	str	r2, [sp, #20]
 800cce4:	47b8      	blx	r7
 800cce6:	3001      	adds	r0, #1
 800cce8:	f43f ae97 	beq.w	800ca1a <_printf_float+0xbe>
 800ccec:	9a05      	ldr	r2, [sp, #20]
 800ccee:	f10b 0b01 	add.w	fp, fp, #1
 800ccf2:	e7b9      	b.n	800cc68 <_printf_float+0x30c>
 800ccf4:	ee18 3a10 	vmov	r3, s16
 800ccf8:	4652      	mov	r2, sl
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	47b8      	blx	r7
 800cd00:	3001      	adds	r0, #1
 800cd02:	d1be      	bne.n	800cc82 <_printf_float+0x326>
 800cd04:	e689      	b.n	800ca1a <_printf_float+0xbe>
 800cd06:	9a05      	ldr	r2, [sp, #20]
 800cd08:	464b      	mov	r3, r9
 800cd0a:	4442      	add	r2, r8
 800cd0c:	4631      	mov	r1, r6
 800cd0e:	4628      	mov	r0, r5
 800cd10:	47b8      	blx	r7
 800cd12:	3001      	adds	r0, #1
 800cd14:	d1c1      	bne.n	800cc9a <_printf_float+0x33e>
 800cd16:	e680      	b.n	800ca1a <_printf_float+0xbe>
 800cd18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd1a:	2a01      	cmp	r2, #1
 800cd1c:	dc01      	bgt.n	800cd22 <_printf_float+0x3c6>
 800cd1e:	07db      	lsls	r3, r3, #31
 800cd20:	d53a      	bpl.n	800cd98 <_printf_float+0x43c>
 800cd22:	2301      	movs	r3, #1
 800cd24:	4642      	mov	r2, r8
 800cd26:	4631      	mov	r1, r6
 800cd28:	4628      	mov	r0, r5
 800cd2a:	47b8      	blx	r7
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	f43f ae74 	beq.w	800ca1a <_printf_float+0xbe>
 800cd32:	ee18 3a10 	vmov	r3, s16
 800cd36:	4652      	mov	r2, sl
 800cd38:	4631      	mov	r1, r6
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	47b8      	blx	r7
 800cd3e:	3001      	adds	r0, #1
 800cd40:	f43f ae6b 	beq.w	800ca1a <_printf_float+0xbe>
 800cd44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cd50:	f7f3 feea 	bl	8000b28 <__aeabi_dcmpeq>
 800cd54:	b9d8      	cbnz	r0, 800cd8e <_printf_float+0x432>
 800cd56:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cd5a:	f108 0201 	add.w	r2, r8, #1
 800cd5e:	4631      	mov	r1, r6
 800cd60:	4628      	mov	r0, r5
 800cd62:	47b8      	blx	r7
 800cd64:	3001      	adds	r0, #1
 800cd66:	d10e      	bne.n	800cd86 <_printf_float+0x42a>
 800cd68:	e657      	b.n	800ca1a <_printf_float+0xbe>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	4652      	mov	r2, sl
 800cd6e:	4631      	mov	r1, r6
 800cd70:	4628      	mov	r0, r5
 800cd72:	47b8      	blx	r7
 800cd74:	3001      	adds	r0, #1
 800cd76:	f43f ae50 	beq.w	800ca1a <_printf_float+0xbe>
 800cd7a:	f108 0801 	add.w	r8, r8, #1
 800cd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd80:	3b01      	subs	r3, #1
 800cd82:	4543      	cmp	r3, r8
 800cd84:	dcf1      	bgt.n	800cd6a <_printf_float+0x40e>
 800cd86:	464b      	mov	r3, r9
 800cd88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd8c:	e6da      	b.n	800cb44 <_printf_float+0x1e8>
 800cd8e:	f04f 0800 	mov.w	r8, #0
 800cd92:	f104 0a1a 	add.w	sl, r4, #26
 800cd96:	e7f2      	b.n	800cd7e <_printf_float+0x422>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	4642      	mov	r2, r8
 800cd9c:	e7df      	b.n	800cd5e <_printf_float+0x402>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	464a      	mov	r2, r9
 800cda2:	4631      	mov	r1, r6
 800cda4:	4628      	mov	r0, r5
 800cda6:	47b8      	blx	r7
 800cda8:	3001      	adds	r0, #1
 800cdaa:	f43f ae36 	beq.w	800ca1a <_printf_float+0xbe>
 800cdae:	f108 0801 	add.w	r8, r8, #1
 800cdb2:	68e3      	ldr	r3, [r4, #12]
 800cdb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdb6:	1a5b      	subs	r3, r3, r1
 800cdb8:	4543      	cmp	r3, r8
 800cdba:	dcf0      	bgt.n	800cd9e <_printf_float+0x442>
 800cdbc:	e6f8      	b.n	800cbb0 <_printf_float+0x254>
 800cdbe:	f04f 0800 	mov.w	r8, #0
 800cdc2:	f104 0919 	add.w	r9, r4, #25
 800cdc6:	e7f4      	b.n	800cdb2 <_printf_float+0x456>

0800cdc8 <_printf_common>:
 800cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdcc:	4616      	mov	r6, r2
 800cdce:	4699      	mov	r9, r3
 800cdd0:	688a      	ldr	r2, [r1, #8]
 800cdd2:	690b      	ldr	r3, [r1, #16]
 800cdd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	bfb8      	it	lt
 800cddc:	4613      	movlt	r3, r2
 800cdde:	6033      	str	r3, [r6, #0]
 800cde0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cde4:	4607      	mov	r7, r0
 800cde6:	460c      	mov	r4, r1
 800cde8:	b10a      	cbz	r2, 800cdee <_printf_common+0x26>
 800cdea:	3301      	adds	r3, #1
 800cdec:	6033      	str	r3, [r6, #0]
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	0699      	lsls	r1, r3, #26
 800cdf2:	bf42      	ittt	mi
 800cdf4:	6833      	ldrmi	r3, [r6, #0]
 800cdf6:	3302      	addmi	r3, #2
 800cdf8:	6033      	strmi	r3, [r6, #0]
 800cdfa:	6825      	ldr	r5, [r4, #0]
 800cdfc:	f015 0506 	ands.w	r5, r5, #6
 800ce00:	d106      	bne.n	800ce10 <_printf_common+0x48>
 800ce02:	f104 0a19 	add.w	sl, r4, #25
 800ce06:	68e3      	ldr	r3, [r4, #12]
 800ce08:	6832      	ldr	r2, [r6, #0]
 800ce0a:	1a9b      	subs	r3, r3, r2
 800ce0c:	42ab      	cmp	r3, r5
 800ce0e:	dc26      	bgt.n	800ce5e <_printf_common+0x96>
 800ce10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce14:	1e13      	subs	r3, r2, #0
 800ce16:	6822      	ldr	r2, [r4, #0]
 800ce18:	bf18      	it	ne
 800ce1a:	2301      	movne	r3, #1
 800ce1c:	0692      	lsls	r2, r2, #26
 800ce1e:	d42b      	bmi.n	800ce78 <_printf_common+0xb0>
 800ce20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce24:	4649      	mov	r1, r9
 800ce26:	4638      	mov	r0, r7
 800ce28:	47c0      	blx	r8
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	d01e      	beq.n	800ce6c <_printf_common+0xa4>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	6922      	ldr	r2, [r4, #16]
 800ce32:	f003 0306 	and.w	r3, r3, #6
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	bf02      	ittt	eq
 800ce3a:	68e5      	ldreq	r5, [r4, #12]
 800ce3c:	6833      	ldreq	r3, [r6, #0]
 800ce3e:	1aed      	subeq	r5, r5, r3
 800ce40:	68a3      	ldr	r3, [r4, #8]
 800ce42:	bf0c      	ite	eq
 800ce44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce48:	2500      	movne	r5, #0
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	bfc4      	itt	gt
 800ce4e:	1a9b      	subgt	r3, r3, r2
 800ce50:	18ed      	addgt	r5, r5, r3
 800ce52:	2600      	movs	r6, #0
 800ce54:	341a      	adds	r4, #26
 800ce56:	42b5      	cmp	r5, r6
 800ce58:	d11a      	bne.n	800ce90 <_printf_common+0xc8>
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	e008      	b.n	800ce70 <_printf_common+0xa8>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4652      	mov	r2, sl
 800ce62:	4649      	mov	r1, r9
 800ce64:	4638      	mov	r0, r7
 800ce66:	47c0      	blx	r8
 800ce68:	3001      	adds	r0, #1
 800ce6a:	d103      	bne.n	800ce74 <_printf_common+0xac>
 800ce6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce74:	3501      	adds	r5, #1
 800ce76:	e7c6      	b.n	800ce06 <_printf_common+0x3e>
 800ce78:	18e1      	adds	r1, r4, r3
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	2030      	movs	r0, #48	; 0x30
 800ce7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce82:	4422      	add	r2, r4
 800ce84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce8c:	3302      	adds	r3, #2
 800ce8e:	e7c7      	b.n	800ce20 <_printf_common+0x58>
 800ce90:	2301      	movs	r3, #1
 800ce92:	4622      	mov	r2, r4
 800ce94:	4649      	mov	r1, r9
 800ce96:	4638      	mov	r0, r7
 800ce98:	47c0      	blx	r8
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	d0e6      	beq.n	800ce6c <_printf_common+0xa4>
 800ce9e:	3601      	adds	r6, #1
 800cea0:	e7d9      	b.n	800ce56 <_printf_common+0x8e>
	...

0800cea4 <_printf_i>:
 800cea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cea8:	7e0f      	ldrb	r7, [r1, #24]
 800ceaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ceac:	2f78      	cmp	r7, #120	; 0x78
 800ceae:	4691      	mov	r9, r2
 800ceb0:	4680      	mov	r8, r0
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	469a      	mov	sl, r3
 800ceb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ceba:	d807      	bhi.n	800cecc <_printf_i+0x28>
 800cebc:	2f62      	cmp	r7, #98	; 0x62
 800cebe:	d80a      	bhi.n	800ced6 <_printf_i+0x32>
 800cec0:	2f00      	cmp	r7, #0
 800cec2:	f000 80d4 	beq.w	800d06e <_printf_i+0x1ca>
 800cec6:	2f58      	cmp	r7, #88	; 0x58
 800cec8:	f000 80c0 	beq.w	800d04c <_printf_i+0x1a8>
 800cecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ced0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ced4:	e03a      	b.n	800cf4c <_printf_i+0xa8>
 800ced6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceda:	2b15      	cmp	r3, #21
 800cedc:	d8f6      	bhi.n	800cecc <_printf_i+0x28>
 800cede:	a101      	add	r1, pc, #4	; (adr r1, 800cee4 <_printf_i+0x40>)
 800cee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cee4:	0800cf3d 	.word	0x0800cf3d
 800cee8:	0800cf51 	.word	0x0800cf51
 800ceec:	0800cecd 	.word	0x0800cecd
 800cef0:	0800cecd 	.word	0x0800cecd
 800cef4:	0800cecd 	.word	0x0800cecd
 800cef8:	0800cecd 	.word	0x0800cecd
 800cefc:	0800cf51 	.word	0x0800cf51
 800cf00:	0800cecd 	.word	0x0800cecd
 800cf04:	0800cecd 	.word	0x0800cecd
 800cf08:	0800cecd 	.word	0x0800cecd
 800cf0c:	0800cecd 	.word	0x0800cecd
 800cf10:	0800d055 	.word	0x0800d055
 800cf14:	0800cf7d 	.word	0x0800cf7d
 800cf18:	0800d00f 	.word	0x0800d00f
 800cf1c:	0800cecd 	.word	0x0800cecd
 800cf20:	0800cecd 	.word	0x0800cecd
 800cf24:	0800d077 	.word	0x0800d077
 800cf28:	0800cecd 	.word	0x0800cecd
 800cf2c:	0800cf7d 	.word	0x0800cf7d
 800cf30:	0800cecd 	.word	0x0800cecd
 800cf34:	0800cecd 	.word	0x0800cecd
 800cf38:	0800d017 	.word	0x0800d017
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	1d1a      	adds	r2, r3, #4
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	602a      	str	r2, [r5, #0]
 800cf44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e09f      	b.n	800d090 <_printf_i+0x1ec>
 800cf50:	6820      	ldr	r0, [r4, #0]
 800cf52:	682b      	ldr	r3, [r5, #0]
 800cf54:	0607      	lsls	r7, r0, #24
 800cf56:	f103 0104 	add.w	r1, r3, #4
 800cf5a:	6029      	str	r1, [r5, #0]
 800cf5c:	d501      	bpl.n	800cf62 <_printf_i+0xbe>
 800cf5e:	681e      	ldr	r6, [r3, #0]
 800cf60:	e003      	b.n	800cf6a <_printf_i+0xc6>
 800cf62:	0646      	lsls	r6, r0, #25
 800cf64:	d5fb      	bpl.n	800cf5e <_printf_i+0xba>
 800cf66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cf6a:	2e00      	cmp	r6, #0
 800cf6c:	da03      	bge.n	800cf76 <_printf_i+0xd2>
 800cf6e:	232d      	movs	r3, #45	; 0x2d
 800cf70:	4276      	negs	r6, r6
 800cf72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf76:	485a      	ldr	r0, [pc, #360]	; (800d0e0 <_printf_i+0x23c>)
 800cf78:	230a      	movs	r3, #10
 800cf7a:	e012      	b.n	800cfa2 <_printf_i+0xfe>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	6820      	ldr	r0, [r4, #0]
 800cf80:	1d19      	adds	r1, r3, #4
 800cf82:	6029      	str	r1, [r5, #0]
 800cf84:	0605      	lsls	r5, r0, #24
 800cf86:	d501      	bpl.n	800cf8c <_printf_i+0xe8>
 800cf88:	681e      	ldr	r6, [r3, #0]
 800cf8a:	e002      	b.n	800cf92 <_printf_i+0xee>
 800cf8c:	0641      	lsls	r1, r0, #25
 800cf8e:	d5fb      	bpl.n	800cf88 <_printf_i+0xe4>
 800cf90:	881e      	ldrh	r6, [r3, #0]
 800cf92:	4853      	ldr	r0, [pc, #332]	; (800d0e0 <_printf_i+0x23c>)
 800cf94:	2f6f      	cmp	r7, #111	; 0x6f
 800cf96:	bf0c      	ite	eq
 800cf98:	2308      	moveq	r3, #8
 800cf9a:	230a      	movne	r3, #10
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfa2:	6865      	ldr	r5, [r4, #4]
 800cfa4:	60a5      	str	r5, [r4, #8]
 800cfa6:	2d00      	cmp	r5, #0
 800cfa8:	bfa2      	ittt	ge
 800cfaa:	6821      	ldrge	r1, [r4, #0]
 800cfac:	f021 0104 	bicge.w	r1, r1, #4
 800cfb0:	6021      	strge	r1, [r4, #0]
 800cfb2:	b90e      	cbnz	r6, 800cfb8 <_printf_i+0x114>
 800cfb4:	2d00      	cmp	r5, #0
 800cfb6:	d04b      	beq.n	800d050 <_printf_i+0x1ac>
 800cfb8:	4615      	mov	r5, r2
 800cfba:	fbb6 f1f3 	udiv	r1, r6, r3
 800cfbe:	fb03 6711 	mls	r7, r3, r1, r6
 800cfc2:	5dc7      	ldrb	r7, [r0, r7]
 800cfc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfc8:	4637      	mov	r7, r6
 800cfca:	42bb      	cmp	r3, r7
 800cfcc:	460e      	mov	r6, r1
 800cfce:	d9f4      	bls.n	800cfba <_printf_i+0x116>
 800cfd0:	2b08      	cmp	r3, #8
 800cfd2:	d10b      	bne.n	800cfec <_printf_i+0x148>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	07de      	lsls	r6, r3, #31
 800cfd8:	d508      	bpl.n	800cfec <_printf_i+0x148>
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	6861      	ldr	r1, [r4, #4]
 800cfde:	4299      	cmp	r1, r3
 800cfe0:	bfde      	ittt	le
 800cfe2:	2330      	movle	r3, #48	; 0x30
 800cfe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cfe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cfec:	1b52      	subs	r2, r2, r5
 800cfee:	6122      	str	r2, [r4, #16]
 800cff0:	f8cd a000 	str.w	sl, [sp]
 800cff4:	464b      	mov	r3, r9
 800cff6:	aa03      	add	r2, sp, #12
 800cff8:	4621      	mov	r1, r4
 800cffa:	4640      	mov	r0, r8
 800cffc:	f7ff fee4 	bl	800cdc8 <_printf_common>
 800d000:	3001      	adds	r0, #1
 800d002:	d14a      	bne.n	800d09a <_printf_i+0x1f6>
 800d004:	f04f 30ff 	mov.w	r0, #4294967295
 800d008:	b004      	add	sp, #16
 800d00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	f043 0320 	orr.w	r3, r3, #32
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	4833      	ldr	r0, [pc, #204]	; (800d0e4 <_printf_i+0x240>)
 800d018:	2778      	movs	r7, #120	; 0x78
 800d01a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	6829      	ldr	r1, [r5, #0]
 800d022:	061f      	lsls	r7, r3, #24
 800d024:	f851 6b04 	ldr.w	r6, [r1], #4
 800d028:	d402      	bmi.n	800d030 <_printf_i+0x18c>
 800d02a:	065f      	lsls	r7, r3, #25
 800d02c:	bf48      	it	mi
 800d02e:	b2b6      	uxthmi	r6, r6
 800d030:	07df      	lsls	r7, r3, #31
 800d032:	bf48      	it	mi
 800d034:	f043 0320 	orrmi.w	r3, r3, #32
 800d038:	6029      	str	r1, [r5, #0]
 800d03a:	bf48      	it	mi
 800d03c:	6023      	strmi	r3, [r4, #0]
 800d03e:	b91e      	cbnz	r6, 800d048 <_printf_i+0x1a4>
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	f023 0320 	bic.w	r3, r3, #32
 800d046:	6023      	str	r3, [r4, #0]
 800d048:	2310      	movs	r3, #16
 800d04a:	e7a7      	b.n	800cf9c <_printf_i+0xf8>
 800d04c:	4824      	ldr	r0, [pc, #144]	; (800d0e0 <_printf_i+0x23c>)
 800d04e:	e7e4      	b.n	800d01a <_printf_i+0x176>
 800d050:	4615      	mov	r5, r2
 800d052:	e7bd      	b.n	800cfd0 <_printf_i+0x12c>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	6826      	ldr	r6, [r4, #0]
 800d058:	6961      	ldr	r1, [r4, #20]
 800d05a:	1d18      	adds	r0, r3, #4
 800d05c:	6028      	str	r0, [r5, #0]
 800d05e:	0635      	lsls	r5, r6, #24
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	d501      	bpl.n	800d068 <_printf_i+0x1c4>
 800d064:	6019      	str	r1, [r3, #0]
 800d066:	e002      	b.n	800d06e <_printf_i+0x1ca>
 800d068:	0670      	lsls	r0, r6, #25
 800d06a:	d5fb      	bpl.n	800d064 <_printf_i+0x1c0>
 800d06c:	8019      	strh	r1, [r3, #0]
 800d06e:	2300      	movs	r3, #0
 800d070:	6123      	str	r3, [r4, #16]
 800d072:	4615      	mov	r5, r2
 800d074:	e7bc      	b.n	800cff0 <_printf_i+0x14c>
 800d076:	682b      	ldr	r3, [r5, #0]
 800d078:	1d1a      	adds	r2, r3, #4
 800d07a:	602a      	str	r2, [r5, #0]
 800d07c:	681d      	ldr	r5, [r3, #0]
 800d07e:	6862      	ldr	r2, [r4, #4]
 800d080:	2100      	movs	r1, #0
 800d082:	4628      	mov	r0, r5
 800d084:	f7f3 f8d4 	bl	8000230 <memchr>
 800d088:	b108      	cbz	r0, 800d08e <_printf_i+0x1ea>
 800d08a:	1b40      	subs	r0, r0, r5
 800d08c:	6060      	str	r0, [r4, #4]
 800d08e:	6863      	ldr	r3, [r4, #4]
 800d090:	6123      	str	r3, [r4, #16]
 800d092:	2300      	movs	r3, #0
 800d094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d098:	e7aa      	b.n	800cff0 <_printf_i+0x14c>
 800d09a:	6923      	ldr	r3, [r4, #16]
 800d09c:	462a      	mov	r2, r5
 800d09e:	4649      	mov	r1, r9
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	47d0      	blx	sl
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d0ad      	beq.n	800d004 <_printf_i+0x160>
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	079b      	lsls	r3, r3, #30
 800d0ac:	d413      	bmi.n	800d0d6 <_printf_i+0x232>
 800d0ae:	68e0      	ldr	r0, [r4, #12]
 800d0b0:	9b03      	ldr	r3, [sp, #12]
 800d0b2:	4298      	cmp	r0, r3
 800d0b4:	bfb8      	it	lt
 800d0b6:	4618      	movlt	r0, r3
 800d0b8:	e7a6      	b.n	800d008 <_printf_i+0x164>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	4632      	mov	r2, r6
 800d0be:	4649      	mov	r1, r9
 800d0c0:	4640      	mov	r0, r8
 800d0c2:	47d0      	blx	sl
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d09d      	beq.n	800d004 <_printf_i+0x160>
 800d0c8:	3501      	adds	r5, #1
 800d0ca:	68e3      	ldr	r3, [r4, #12]
 800d0cc:	9903      	ldr	r1, [sp, #12]
 800d0ce:	1a5b      	subs	r3, r3, r1
 800d0d0:	42ab      	cmp	r3, r5
 800d0d2:	dcf2      	bgt.n	800d0ba <_printf_i+0x216>
 800d0d4:	e7eb      	b.n	800d0ae <_printf_i+0x20a>
 800d0d6:	2500      	movs	r5, #0
 800d0d8:	f104 0619 	add.w	r6, r4, #25
 800d0dc:	e7f5      	b.n	800d0ca <_printf_i+0x226>
 800d0de:	bf00      	nop
 800d0e0:	0800fbae 	.word	0x0800fbae
 800d0e4:	0800fbbf 	.word	0x0800fbbf

0800d0e8 <std>:
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d0f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0f6:	6083      	str	r3, [r0, #8]
 800d0f8:	8181      	strh	r1, [r0, #12]
 800d0fa:	6643      	str	r3, [r0, #100]	; 0x64
 800d0fc:	81c2      	strh	r2, [r0, #14]
 800d0fe:	6183      	str	r3, [r0, #24]
 800d100:	4619      	mov	r1, r3
 800d102:	2208      	movs	r2, #8
 800d104:	305c      	adds	r0, #92	; 0x5c
 800d106:	f000 f902 	bl	800d30e <memset>
 800d10a:	4b05      	ldr	r3, [pc, #20]	; (800d120 <std+0x38>)
 800d10c:	6263      	str	r3, [r4, #36]	; 0x24
 800d10e:	4b05      	ldr	r3, [pc, #20]	; (800d124 <std+0x3c>)
 800d110:	62a3      	str	r3, [r4, #40]	; 0x28
 800d112:	4b05      	ldr	r3, [pc, #20]	; (800d128 <std+0x40>)
 800d114:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d116:	4b05      	ldr	r3, [pc, #20]	; (800d12c <std+0x44>)
 800d118:	6224      	str	r4, [r4, #32]
 800d11a:	6323      	str	r3, [r4, #48]	; 0x30
 800d11c:	bd10      	pop	{r4, pc}
 800d11e:	bf00      	nop
 800d120:	0800d289 	.word	0x0800d289
 800d124:	0800d2ab 	.word	0x0800d2ab
 800d128:	0800d2e3 	.word	0x0800d2e3
 800d12c:	0800d307 	.word	0x0800d307

0800d130 <stdio_exit_handler>:
 800d130:	4a02      	ldr	r2, [pc, #8]	; (800d13c <stdio_exit_handler+0xc>)
 800d132:	4903      	ldr	r1, [pc, #12]	; (800d140 <stdio_exit_handler+0x10>)
 800d134:	4803      	ldr	r0, [pc, #12]	; (800d144 <stdio_exit_handler+0x14>)
 800d136:	f000 b869 	b.w	800d20c <_fwalk_sglue>
 800d13a:	bf00      	nop
 800d13c:	20000030 	.word	0x20000030
 800d140:	0800eea1 	.word	0x0800eea1
 800d144:	2000003c 	.word	0x2000003c

0800d148 <cleanup_stdio>:
 800d148:	6841      	ldr	r1, [r0, #4]
 800d14a:	4b0c      	ldr	r3, [pc, #48]	; (800d17c <cleanup_stdio+0x34>)
 800d14c:	4299      	cmp	r1, r3
 800d14e:	b510      	push	{r4, lr}
 800d150:	4604      	mov	r4, r0
 800d152:	d001      	beq.n	800d158 <cleanup_stdio+0x10>
 800d154:	f001 fea4 	bl	800eea0 <_fflush_r>
 800d158:	68a1      	ldr	r1, [r4, #8]
 800d15a:	4b09      	ldr	r3, [pc, #36]	; (800d180 <cleanup_stdio+0x38>)
 800d15c:	4299      	cmp	r1, r3
 800d15e:	d002      	beq.n	800d166 <cleanup_stdio+0x1e>
 800d160:	4620      	mov	r0, r4
 800d162:	f001 fe9d 	bl	800eea0 <_fflush_r>
 800d166:	68e1      	ldr	r1, [r4, #12]
 800d168:	4b06      	ldr	r3, [pc, #24]	; (800d184 <cleanup_stdio+0x3c>)
 800d16a:	4299      	cmp	r1, r3
 800d16c:	d004      	beq.n	800d178 <cleanup_stdio+0x30>
 800d16e:	4620      	mov	r0, r4
 800d170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d174:	f001 be94 	b.w	800eea0 <_fflush_r>
 800d178:	bd10      	pop	{r4, pc}
 800d17a:	bf00      	nop
 800d17c:	20009364 	.word	0x20009364
 800d180:	200093cc 	.word	0x200093cc
 800d184:	20009434 	.word	0x20009434

0800d188 <global_stdio_init.part.0>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	4b0b      	ldr	r3, [pc, #44]	; (800d1b8 <global_stdio_init.part.0+0x30>)
 800d18c:	4c0b      	ldr	r4, [pc, #44]	; (800d1bc <global_stdio_init.part.0+0x34>)
 800d18e:	4a0c      	ldr	r2, [pc, #48]	; (800d1c0 <global_stdio_init.part.0+0x38>)
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	4620      	mov	r0, r4
 800d194:	2200      	movs	r2, #0
 800d196:	2104      	movs	r1, #4
 800d198:	f7ff ffa6 	bl	800d0e8 <std>
 800d19c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	2109      	movs	r1, #9
 800d1a4:	f7ff ffa0 	bl	800d0e8 <std>
 800d1a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1b2:	2112      	movs	r1, #18
 800d1b4:	f7ff bf98 	b.w	800d0e8 <std>
 800d1b8:	2000949c 	.word	0x2000949c
 800d1bc:	20009364 	.word	0x20009364
 800d1c0:	0800d131 	.word	0x0800d131

0800d1c4 <__sfp_lock_acquire>:
 800d1c4:	4801      	ldr	r0, [pc, #4]	; (800d1cc <__sfp_lock_acquire+0x8>)
 800d1c6:	f000 b987 	b.w	800d4d8 <__retarget_lock_acquire_recursive>
 800d1ca:	bf00      	nop
 800d1cc:	200094a5 	.word	0x200094a5

0800d1d0 <__sfp_lock_release>:
 800d1d0:	4801      	ldr	r0, [pc, #4]	; (800d1d8 <__sfp_lock_release+0x8>)
 800d1d2:	f000 b982 	b.w	800d4da <__retarget_lock_release_recursive>
 800d1d6:	bf00      	nop
 800d1d8:	200094a5 	.word	0x200094a5

0800d1dc <__sinit>:
 800d1dc:	b510      	push	{r4, lr}
 800d1de:	4604      	mov	r4, r0
 800d1e0:	f7ff fff0 	bl	800d1c4 <__sfp_lock_acquire>
 800d1e4:	6a23      	ldr	r3, [r4, #32]
 800d1e6:	b11b      	cbz	r3, 800d1f0 <__sinit+0x14>
 800d1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1ec:	f7ff bff0 	b.w	800d1d0 <__sfp_lock_release>
 800d1f0:	4b04      	ldr	r3, [pc, #16]	; (800d204 <__sinit+0x28>)
 800d1f2:	6223      	str	r3, [r4, #32]
 800d1f4:	4b04      	ldr	r3, [pc, #16]	; (800d208 <__sinit+0x2c>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1f5      	bne.n	800d1e8 <__sinit+0xc>
 800d1fc:	f7ff ffc4 	bl	800d188 <global_stdio_init.part.0>
 800d200:	e7f2      	b.n	800d1e8 <__sinit+0xc>
 800d202:	bf00      	nop
 800d204:	0800d149 	.word	0x0800d149
 800d208:	2000949c 	.word	0x2000949c

0800d20c <_fwalk_sglue>:
 800d20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d210:	4607      	mov	r7, r0
 800d212:	4688      	mov	r8, r1
 800d214:	4614      	mov	r4, r2
 800d216:	2600      	movs	r6, #0
 800d218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d21c:	f1b9 0901 	subs.w	r9, r9, #1
 800d220:	d505      	bpl.n	800d22e <_fwalk_sglue+0x22>
 800d222:	6824      	ldr	r4, [r4, #0]
 800d224:	2c00      	cmp	r4, #0
 800d226:	d1f7      	bne.n	800d218 <_fwalk_sglue+0xc>
 800d228:	4630      	mov	r0, r6
 800d22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d22e:	89ab      	ldrh	r3, [r5, #12]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d907      	bls.n	800d244 <_fwalk_sglue+0x38>
 800d234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d238:	3301      	adds	r3, #1
 800d23a:	d003      	beq.n	800d244 <_fwalk_sglue+0x38>
 800d23c:	4629      	mov	r1, r5
 800d23e:	4638      	mov	r0, r7
 800d240:	47c0      	blx	r8
 800d242:	4306      	orrs	r6, r0
 800d244:	3568      	adds	r5, #104	; 0x68
 800d246:	e7e9      	b.n	800d21c <_fwalk_sglue+0x10>

0800d248 <siprintf>:
 800d248:	b40e      	push	{r1, r2, r3}
 800d24a:	b500      	push	{lr}
 800d24c:	b09c      	sub	sp, #112	; 0x70
 800d24e:	ab1d      	add	r3, sp, #116	; 0x74
 800d250:	9002      	str	r0, [sp, #8]
 800d252:	9006      	str	r0, [sp, #24]
 800d254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d258:	4809      	ldr	r0, [pc, #36]	; (800d280 <siprintf+0x38>)
 800d25a:	9107      	str	r1, [sp, #28]
 800d25c:	9104      	str	r1, [sp, #16]
 800d25e:	4909      	ldr	r1, [pc, #36]	; (800d284 <siprintf+0x3c>)
 800d260:	f853 2b04 	ldr.w	r2, [r3], #4
 800d264:	9105      	str	r1, [sp, #20]
 800d266:	6800      	ldr	r0, [r0, #0]
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	a902      	add	r1, sp, #8
 800d26c:	f001 fc94 	bl	800eb98 <_svfiprintf_r>
 800d270:	9b02      	ldr	r3, [sp, #8]
 800d272:	2200      	movs	r2, #0
 800d274:	701a      	strb	r2, [r3, #0]
 800d276:	b01c      	add	sp, #112	; 0x70
 800d278:	f85d eb04 	ldr.w	lr, [sp], #4
 800d27c:	b003      	add	sp, #12
 800d27e:	4770      	bx	lr
 800d280:	20000088 	.word	0x20000088
 800d284:	ffff0208 	.word	0xffff0208

0800d288 <__sread>:
 800d288:	b510      	push	{r4, lr}
 800d28a:	460c      	mov	r4, r1
 800d28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d290:	f000 f8d4 	bl	800d43c <_read_r>
 800d294:	2800      	cmp	r0, #0
 800d296:	bfab      	itete	ge
 800d298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d29a:	89a3      	ldrhlt	r3, [r4, #12]
 800d29c:	181b      	addge	r3, r3, r0
 800d29e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2a2:	bfac      	ite	ge
 800d2a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2a6:	81a3      	strhlt	r3, [r4, #12]
 800d2a8:	bd10      	pop	{r4, pc}

0800d2aa <__swrite>:
 800d2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ae:	461f      	mov	r7, r3
 800d2b0:	898b      	ldrh	r3, [r1, #12]
 800d2b2:	05db      	lsls	r3, r3, #23
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	460c      	mov	r4, r1
 800d2b8:	4616      	mov	r6, r2
 800d2ba:	d505      	bpl.n	800d2c8 <__swrite+0x1e>
 800d2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f000 f8a8 	bl	800d418 <_lseek_r>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2d2:	81a3      	strh	r3, [r4, #12]
 800d2d4:	4632      	mov	r2, r6
 800d2d6:	463b      	mov	r3, r7
 800d2d8:	4628      	mov	r0, r5
 800d2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2de:	f000 b8bf 	b.w	800d460 <_write_r>

0800d2e2 <__sseek>:
 800d2e2:	b510      	push	{r4, lr}
 800d2e4:	460c      	mov	r4, r1
 800d2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ea:	f000 f895 	bl	800d418 <_lseek_r>
 800d2ee:	1c43      	adds	r3, r0, #1
 800d2f0:	89a3      	ldrh	r3, [r4, #12]
 800d2f2:	bf15      	itete	ne
 800d2f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2fe:	81a3      	strheq	r3, [r4, #12]
 800d300:	bf18      	it	ne
 800d302:	81a3      	strhne	r3, [r4, #12]
 800d304:	bd10      	pop	{r4, pc}

0800d306 <__sclose>:
 800d306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d30a:	f000 b81f 	b.w	800d34c <_close_r>

0800d30e <memset>:
 800d30e:	4402      	add	r2, r0
 800d310:	4603      	mov	r3, r0
 800d312:	4293      	cmp	r3, r2
 800d314:	d100      	bne.n	800d318 <memset+0xa>
 800d316:	4770      	bx	lr
 800d318:	f803 1b01 	strb.w	r1, [r3], #1
 800d31c:	e7f9      	b.n	800d312 <memset+0x4>

0800d31e <strncpy>:
 800d31e:	b510      	push	{r4, lr}
 800d320:	3901      	subs	r1, #1
 800d322:	4603      	mov	r3, r0
 800d324:	b132      	cbz	r2, 800d334 <strncpy+0x16>
 800d326:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d32a:	f803 4b01 	strb.w	r4, [r3], #1
 800d32e:	3a01      	subs	r2, #1
 800d330:	2c00      	cmp	r4, #0
 800d332:	d1f7      	bne.n	800d324 <strncpy+0x6>
 800d334:	441a      	add	r2, r3
 800d336:	2100      	movs	r1, #0
 800d338:	4293      	cmp	r3, r2
 800d33a:	d100      	bne.n	800d33e <strncpy+0x20>
 800d33c:	bd10      	pop	{r4, pc}
 800d33e:	f803 1b01 	strb.w	r1, [r3], #1
 800d342:	e7f9      	b.n	800d338 <strncpy+0x1a>

0800d344 <_localeconv_r>:
 800d344:	4800      	ldr	r0, [pc, #0]	; (800d348 <_localeconv_r+0x4>)
 800d346:	4770      	bx	lr
 800d348:	2000017c 	.word	0x2000017c

0800d34c <_close_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4d06      	ldr	r5, [pc, #24]	; (800d368 <_close_r+0x1c>)
 800d350:	2300      	movs	r3, #0
 800d352:	4604      	mov	r4, r0
 800d354:	4608      	mov	r0, r1
 800d356:	602b      	str	r3, [r5, #0]
 800d358:	f7f5 fa67 	bl	800282a <_close>
 800d35c:	1c43      	adds	r3, r0, #1
 800d35e:	d102      	bne.n	800d366 <_close_r+0x1a>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	b103      	cbz	r3, 800d366 <_close_r+0x1a>
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	bd38      	pop	{r3, r4, r5, pc}
 800d368:	200094a0 	.word	0x200094a0

0800d36c <_reclaim_reent>:
 800d36c:	4b29      	ldr	r3, [pc, #164]	; (800d414 <_reclaim_reent+0xa8>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4283      	cmp	r3, r0
 800d372:	b570      	push	{r4, r5, r6, lr}
 800d374:	4604      	mov	r4, r0
 800d376:	d04b      	beq.n	800d410 <_reclaim_reent+0xa4>
 800d378:	69c3      	ldr	r3, [r0, #28]
 800d37a:	b143      	cbz	r3, 800d38e <_reclaim_reent+0x22>
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d144      	bne.n	800d40c <_reclaim_reent+0xa0>
 800d382:	69e3      	ldr	r3, [r4, #28]
 800d384:	6819      	ldr	r1, [r3, #0]
 800d386:	b111      	cbz	r1, 800d38e <_reclaim_reent+0x22>
 800d388:	4620      	mov	r0, r4
 800d38a:	f000 ff2f 	bl	800e1ec <_free_r>
 800d38e:	6961      	ldr	r1, [r4, #20]
 800d390:	b111      	cbz	r1, 800d398 <_reclaim_reent+0x2c>
 800d392:	4620      	mov	r0, r4
 800d394:	f000 ff2a 	bl	800e1ec <_free_r>
 800d398:	69e1      	ldr	r1, [r4, #28]
 800d39a:	b111      	cbz	r1, 800d3a2 <_reclaim_reent+0x36>
 800d39c:	4620      	mov	r0, r4
 800d39e:	f000 ff25 	bl	800e1ec <_free_r>
 800d3a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d3a4:	b111      	cbz	r1, 800d3ac <_reclaim_reent+0x40>
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f000 ff20 	bl	800e1ec <_free_r>
 800d3ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3ae:	b111      	cbz	r1, 800d3b6 <_reclaim_reent+0x4a>
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f000 ff1b 	bl	800e1ec <_free_r>
 800d3b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d3b8:	b111      	cbz	r1, 800d3c0 <_reclaim_reent+0x54>
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f000 ff16 	bl	800e1ec <_free_r>
 800d3c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d3c2:	b111      	cbz	r1, 800d3ca <_reclaim_reent+0x5e>
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f000 ff11 	bl	800e1ec <_free_r>
 800d3ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d3cc:	b111      	cbz	r1, 800d3d4 <_reclaim_reent+0x68>
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 ff0c 	bl	800e1ec <_free_r>
 800d3d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d3d6:	b111      	cbz	r1, 800d3de <_reclaim_reent+0x72>
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f000 ff07 	bl	800e1ec <_free_r>
 800d3de:	6a23      	ldr	r3, [r4, #32]
 800d3e0:	b1b3      	cbz	r3, 800d410 <_reclaim_reent+0xa4>
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3e8:	4718      	bx	r3
 800d3ea:	5949      	ldr	r1, [r1, r5]
 800d3ec:	b941      	cbnz	r1, 800d400 <_reclaim_reent+0x94>
 800d3ee:	3504      	adds	r5, #4
 800d3f0:	69e3      	ldr	r3, [r4, #28]
 800d3f2:	2d80      	cmp	r5, #128	; 0x80
 800d3f4:	68d9      	ldr	r1, [r3, #12]
 800d3f6:	d1f8      	bne.n	800d3ea <_reclaim_reent+0x7e>
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f000 fef7 	bl	800e1ec <_free_r>
 800d3fe:	e7c0      	b.n	800d382 <_reclaim_reent+0x16>
 800d400:	680e      	ldr	r6, [r1, #0]
 800d402:	4620      	mov	r0, r4
 800d404:	f000 fef2 	bl	800e1ec <_free_r>
 800d408:	4631      	mov	r1, r6
 800d40a:	e7ef      	b.n	800d3ec <_reclaim_reent+0x80>
 800d40c:	2500      	movs	r5, #0
 800d40e:	e7ef      	b.n	800d3f0 <_reclaim_reent+0x84>
 800d410:	bd70      	pop	{r4, r5, r6, pc}
 800d412:	bf00      	nop
 800d414:	20000088 	.word	0x20000088

0800d418 <_lseek_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4d07      	ldr	r5, [pc, #28]	; (800d438 <_lseek_r+0x20>)
 800d41c:	4604      	mov	r4, r0
 800d41e:	4608      	mov	r0, r1
 800d420:	4611      	mov	r1, r2
 800d422:	2200      	movs	r2, #0
 800d424:	602a      	str	r2, [r5, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	f7f5 fa26 	bl	8002878 <_lseek>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_lseek_r+0x1e>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_lseek_r+0x1e>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	200094a0 	.word	0x200094a0

0800d43c <_read_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d07      	ldr	r5, [pc, #28]	; (800d45c <_read_r+0x20>)
 800d440:	4604      	mov	r4, r0
 800d442:	4608      	mov	r0, r1
 800d444:	4611      	mov	r1, r2
 800d446:	2200      	movs	r2, #0
 800d448:	602a      	str	r2, [r5, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	f7f5 f9b4 	bl	80027b8 <_read>
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	d102      	bne.n	800d45a <_read_r+0x1e>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	b103      	cbz	r3, 800d45a <_read_r+0x1e>
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	200094a0 	.word	0x200094a0

0800d460 <_write_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d07      	ldr	r5, [pc, #28]	; (800d480 <_write_r+0x20>)
 800d464:	4604      	mov	r4, r0
 800d466:	4608      	mov	r0, r1
 800d468:	4611      	mov	r1, r2
 800d46a:	2200      	movs	r2, #0
 800d46c:	602a      	str	r2, [r5, #0]
 800d46e:	461a      	mov	r2, r3
 800d470:	f7f5 f9bf 	bl	80027f2 <_write>
 800d474:	1c43      	adds	r3, r0, #1
 800d476:	d102      	bne.n	800d47e <_write_r+0x1e>
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	b103      	cbz	r3, 800d47e <_write_r+0x1e>
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	bd38      	pop	{r3, r4, r5, pc}
 800d480:	200094a0 	.word	0x200094a0

0800d484 <__errno>:
 800d484:	4b01      	ldr	r3, [pc, #4]	; (800d48c <__errno+0x8>)
 800d486:	6818      	ldr	r0, [r3, #0]
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	20000088 	.word	0x20000088

0800d490 <__libc_init_array>:
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	4d0d      	ldr	r5, [pc, #52]	; (800d4c8 <__libc_init_array+0x38>)
 800d494:	4c0d      	ldr	r4, [pc, #52]	; (800d4cc <__libc_init_array+0x3c>)
 800d496:	1b64      	subs	r4, r4, r5
 800d498:	10a4      	asrs	r4, r4, #2
 800d49a:	2600      	movs	r6, #0
 800d49c:	42a6      	cmp	r6, r4
 800d49e:	d109      	bne.n	800d4b4 <__libc_init_array+0x24>
 800d4a0:	4d0b      	ldr	r5, [pc, #44]	; (800d4d0 <__libc_init_array+0x40>)
 800d4a2:	4c0c      	ldr	r4, [pc, #48]	; (800d4d4 <__libc_init_array+0x44>)
 800d4a4:	f002 f892 	bl	800f5cc <_init>
 800d4a8:	1b64      	subs	r4, r4, r5
 800d4aa:	10a4      	asrs	r4, r4, #2
 800d4ac:	2600      	movs	r6, #0
 800d4ae:	42a6      	cmp	r6, r4
 800d4b0:	d105      	bne.n	800d4be <__libc_init_array+0x2e>
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
 800d4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4b8:	4798      	blx	r3
 800d4ba:	3601      	adds	r6, #1
 800d4bc:	e7ee      	b.n	800d49c <__libc_init_array+0xc>
 800d4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4c2:	4798      	blx	r3
 800d4c4:	3601      	adds	r6, #1
 800d4c6:	e7f2      	b.n	800d4ae <__libc_init_array+0x1e>
 800d4c8:	0800ff14 	.word	0x0800ff14
 800d4cc:	0800ff14 	.word	0x0800ff14
 800d4d0:	0800ff14 	.word	0x0800ff14
 800d4d4:	0800ff18 	.word	0x0800ff18

0800d4d8 <__retarget_lock_acquire_recursive>:
 800d4d8:	4770      	bx	lr

0800d4da <__retarget_lock_release_recursive>:
 800d4da:	4770      	bx	lr

0800d4dc <memcpy>:
 800d4dc:	440a      	add	r2, r1
 800d4de:	4291      	cmp	r1, r2
 800d4e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4e4:	d100      	bne.n	800d4e8 <memcpy+0xc>
 800d4e6:	4770      	bx	lr
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4f2:	4291      	cmp	r1, r2
 800d4f4:	d1f9      	bne.n	800d4ea <memcpy+0xe>
 800d4f6:	bd10      	pop	{r4, pc}

0800d4f8 <quorem>:
 800d4f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4fc:	6903      	ldr	r3, [r0, #16]
 800d4fe:	690c      	ldr	r4, [r1, #16]
 800d500:	42a3      	cmp	r3, r4
 800d502:	4607      	mov	r7, r0
 800d504:	db7e      	blt.n	800d604 <quorem+0x10c>
 800d506:	3c01      	subs	r4, #1
 800d508:	f101 0814 	add.w	r8, r1, #20
 800d50c:	f100 0514 	add.w	r5, r0, #20
 800d510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d514:	9301      	str	r3, [sp, #4]
 800d516:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d51a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d51e:	3301      	adds	r3, #1
 800d520:	429a      	cmp	r2, r3
 800d522:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d526:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d52a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d52e:	d331      	bcc.n	800d594 <quorem+0x9c>
 800d530:	f04f 0e00 	mov.w	lr, #0
 800d534:	4640      	mov	r0, r8
 800d536:	46ac      	mov	ip, r5
 800d538:	46f2      	mov	sl, lr
 800d53a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d53e:	b293      	uxth	r3, r2
 800d540:	fb06 e303 	mla	r3, r6, r3, lr
 800d544:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d548:	0c1a      	lsrs	r2, r3, #16
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	ebaa 0303 	sub.w	r3, sl, r3
 800d550:	f8dc a000 	ldr.w	sl, [ip]
 800d554:	fa13 f38a 	uxtah	r3, r3, sl
 800d558:	fb06 220e 	mla	r2, r6, lr, r2
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	9b00      	ldr	r3, [sp, #0]
 800d560:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d564:	b292      	uxth	r2, r2
 800d566:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d56a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d56e:	f8bd 3000 	ldrh.w	r3, [sp]
 800d572:	4581      	cmp	r9, r0
 800d574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d578:	f84c 3b04 	str.w	r3, [ip], #4
 800d57c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d580:	d2db      	bcs.n	800d53a <quorem+0x42>
 800d582:	f855 300b 	ldr.w	r3, [r5, fp]
 800d586:	b92b      	cbnz	r3, 800d594 <quorem+0x9c>
 800d588:	9b01      	ldr	r3, [sp, #4]
 800d58a:	3b04      	subs	r3, #4
 800d58c:	429d      	cmp	r5, r3
 800d58e:	461a      	mov	r2, r3
 800d590:	d32c      	bcc.n	800d5ec <quorem+0xf4>
 800d592:	613c      	str	r4, [r7, #16]
 800d594:	4638      	mov	r0, r7
 800d596:	f001 f9a5 	bl	800e8e4 <__mcmp>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	db22      	blt.n	800d5e4 <quorem+0xec>
 800d59e:	3601      	adds	r6, #1
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5a8:	f8d1 c000 	ldr.w	ip, [r1]
 800d5ac:	b293      	uxth	r3, r2
 800d5ae:	1ac3      	subs	r3, r0, r3
 800d5b0:	0c12      	lsrs	r2, r2, #16
 800d5b2:	fa13 f38c 	uxtah	r3, r3, ip
 800d5b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d5ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5c4:	45c1      	cmp	r9, r8
 800d5c6:	f841 3b04 	str.w	r3, [r1], #4
 800d5ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d5ce:	d2e9      	bcs.n	800d5a4 <quorem+0xac>
 800d5d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5d8:	b922      	cbnz	r2, 800d5e4 <quorem+0xec>
 800d5da:	3b04      	subs	r3, #4
 800d5dc:	429d      	cmp	r5, r3
 800d5de:	461a      	mov	r2, r3
 800d5e0:	d30a      	bcc.n	800d5f8 <quorem+0x100>
 800d5e2:	613c      	str	r4, [r7, #16]
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	b003      	add	sp, #12
 800d5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ec:	6812      	ldr	r2, [r2, #0]
 800d5ee:	3b04      	subs	r3, #4
 800d5f0:	2a00      	cmp	r2, #0
 800d5f2:	d1ce      	bne.n	800d592 <quorem+0x9a>
 800d5f4:	3c01      	subs	r4, #1
 800d5f6:	e7c9      	b.n	800d58c <quorem+0x94>
 800d5f8:	6812      	ldr	r2, [r2, #0]
 800d5fa:	3b04      	subs	r3, #4
 800d5fc:	2a00      	cmp	r2, #0
 800d5fe:	d1f0      	bne.n	800d5e2 <quorem+0xea>
 800d600:	3c01      	subs	r4, #1
 800d602:	e7eb      	b.n	800d5dc <quorem+0xe4>
 800d604:	2000      	movs	r0, #0
 800d606:	e7ee      	b.n	800d5e6 <quorem+0xee>

0800d608 <_dtoa_r>:
 800d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	ed2d 8b04 	vpush	{d8-d9}
 800d610:	69c5      	ldr	r5, [r0, #28]
 800d612:	b093      	sub	sp, #76	; 0x4c
 800d614:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d618:	ec57 6b10 	vmov	r6, r7, d0
 800d61c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d620:	9107      	str	r1, [sp, #28]
 800d622:	4604      	mov	r4, r0
 800d624:	920a      	str	r2, [sp, #40]	; 0x28
 800d626:	930d      	str	r3, [sp, #52]	; 0x34
 800d628:	b975      	cbnz	r5, 800d648 <_dtoa_r+0x40>
 800d62a:	2010      	movs	r0, #16
 800d62c:	f000 fe2a 	bl	800e284 <malloc>
 800d630:	4602      	mov	r2, r0
 800d632:	61e0      	str	r0, [r4, #28]
 800d634:	b920      	cbnz	r0, 800d640 <_dtoa_r+0x38>
 800d636:	4bae      	ldr	r3, [pc, #696]	; (800d8f0 <_dtoa_r+0x2e8>)
 800d638:	21ef      	movs	r1, #239	; 0xef
 800d63a:	48ae      	ldr	r0, [pc, #696]	; (800d8f4 <_dtoa_r+0x2ec>)
 800d63c:	f001 fc82 	bl	800ef44 <__assert_func>
 800d640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d644:	6005      	str	r5, [r0, #0]
 800d646:	60c5      	str	r5, [r0, #12]
 800d648:	69e3      	ldr	r3, [r4, #28]
 800d64a:	6819      	ldr	r1, [r3, #0]
 800d64c:	b151      	cbz	r1, 800d664 <_dtoa_r+0x5c>
 800d64e:	685a      	ldr	r2, [r3, #4]
 800d650:	604a      	str	r2, [r1, #4]
 800d652:	2301      	movs	r3, #1
 800d654:	4093      	lsls	r3, r2
 800d656:	608b      	str	r3, [r1, #8]
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 ff07 	bl	800e46c <_Bfree>
 800d65e:	69e3      	ldr	r3, [r4, #28]
 800d660:	2200      	movs	r2, #0
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	1e3b      	subs	r3, r7, #0
 800d666:	bfbb      	ittet	lt
 800d668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d66c:	9303      	strlt	r3, [sp, #12]
 800d66e:	2300      	movge	r3, #0
 800d670:	2201      	movlt	r2, #1
 800d672:	bfac      	ite	ge
 800d674:	f8c8 3000 	strge.w	r3, [r8]
 800d678:	f8c8 2000 	strlt.w	r2, [r8]
 800d67c:	4b9e      	ldr	r3, [pc, #632]	; (800d8f8 <_dtoa_r+0x2f0>)
 800d67e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d682:	ea33 0308 	bics.w	r3, r3, r8
 800d686:	d11b      	bne.n	800d6c0 <_dtoa_r+0xb8>
 800d688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d68a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d68e:	6013      	str	r3, [r2, #0]
 800d690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d694:	4333      	orrs	r3, r6
 800d696:	f000 8593 	beq.w	800e1c0 <_dtoa_r+0xbb8>
 800d69a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d69c:	b963      	cbnz	r3, 800d6b8 <_dtoa_r+0xb0>
 800d69e:	4b97      	ldr	r3, [pc, #604]	; (800d8fc <_dtoa_r+0x2f4>)
 800d6a0:	e027      	b.n	800d6f2 <_dtoa_r+0xea>
 800d6a2:	4b97      	ldr	r3, [pc, #604]	; (800d900 <_dtoa_r+0x2f8>)
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	3308      	adds	r3, #8
 800d6a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6aa:	6013      	str	r3, [r2, #0]
 800d6ac:	9800      	ldr	r0, [sp, #0]
 800d6ae:	b013      	add	sp, #76	; 0x4c
 800d6b0:	ecbd 8b04 	vpop	{d8-d9}
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b8:	4b90      	ldr	r3, [pc, #576]	; (800d8fc <_dtoa_r+0x2f4>)
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	3303      	adds	r3, #3
 800d6be:	e7f3      	b.n	800d6a8 <_dtoa_r+0xa0>
 800d6c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	ec51 0b17 	vmov	r0, r1, d7
 800d6ca:	eeb0 8a47 	vmov.f32	s16, s14
 800d6ce:	eef0 8a67 	vmov.f32	s17, s15
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f7f3 fa28 	bl	8000b28 <__aeabi_dcmpeq>
 800d6d8:	4681      	mov	r9, r0
 800d6da:	b160      	cbz	r0, 800d6f6 <_dtoa_r+0xee>
 800d6dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6de:	2301      	movs	r3, #1
 800d6e0:	6013      	str	r3, [r2, #0]
 800d6e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 8568 	beq.w	800e1ba <_dtoa_r+0xbb2>
 800d6ea:	4b86      	ldr	r3, [pc, #536]	; (800d904 <_dtoa_r+0x2fc>)
 800d6ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	3b01      	subs	r3, #1
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	e7da      	b.n	800d6ac <_dtoa_r+0xa4>
 800d6f6:	aa10      	add	r2, sp, #64	; 0x40
 800d6f8:	a911      	add	r1, sp, #68	; 0x44
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	eeb0 0a48 	vmov.f32	s0, s16
 800d700:	eef0 0a68 	vmov.f32	s1, s17
 800d704:	f001 f994 	bl	800ea30 <__d2b>
 800d708:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d70c:	4682      	mov	sl, r0
 800d70e:	2d00      	cmp	r5, #0
 800d710:	d07f      	beq.n	800d812 <_dtoa_r+0x20a>
 800d712:	ee18 3a90 	vmov	r3, s17
 800d716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d71a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d71e:	ec51 0b18 	vmov	r0, r1, d8
 800d722:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d72a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d72e:	4619      	mov	r1, r3
 800d730:	2200      	movs	r2, #0
 800d732:	4b75      	ldr	r3, [pc, #468]	; (800d908 <_dtoa_r+0x300>)
 800d734:	f7f2 fdd8 	bl	80002e8 <__aeabi_dsub>
 800d738:	a367      	add	r3, pc, #412	; (adr r3, 800d8d8 <_dtoa_r+0x2d0>)
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	f7f2 ff8b 	bl	8000658 <__aeabi_dmul>
 800d742:	a367      	add	r3, pc, #412	; (adr r3, 800d8e0 <_dtoa_r+0x2d8>)
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	f7f2 fdd0 	bl	80002ec <__adddf3>
 800d74c:	4606      	mov	r6, r0
 800d74e:	4628      	mov	r0, r5
 800d750:	460f      	mov	r7, r1
 800d752:	f7f2 ff17 	bl	8000584 <__aeabi_i2d>
 800d756:	a364      	add	r3, pc, #400	; (adr r3, 800d8e8 <_dtoa_r+0x2e0>)
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	f7f2 ff7c 	bl	8000658 <__aeabi_dmul>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	4630      	mov	r0, r6
 800d766:	4639      	mov	r1, r7
 800d768:	f7f2 fdc0 	bl	80002ec <__adddf3>
 800d76c:	4606      	mov	r6, r0
 800d76e:	460f      	mov	r7, r1
 800d770:	f7f3 fa22 	bl	8000bb8 <__aeabi_d2iz>
 800d774:	2200      	movs	r2, #0
 800d776:	4683      	mov	fp, r0
 800d778:	2300      	movs	r3, #0
 800d77a:	4630      	mov	r0, r6
 800d77c:	4639      	mov	r1, r7
 800d77e:	f7f3 f9dd 	bl	8000b3c <__aeabi_dcmplt>
 800d782:	b148      	cbz	r0, 800d798 <_dtoa_r+0x190>
 800d784:	4658      	mov	r0, fp
 800d786:	f7f2 fefd 	bl	8000584 <__aeabi_i2d>
 800d78a:	4632      	mov	r2, r6
 800d78c:	463b      	mov	r3, r7
 800d78e:	f7f3 f9cb 	bl	8000b28 <__aeabi_dcmpeq>
 800d792:	b908      	cbnz	r0, 800d798 <_dtoa_r+0x190>
 800d794:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d798:	f1bb 0f16 	cmp.w	fp, #22
 800d79c:	d857      	bhi.n	800d84e <_dtoa_r+0x246>
 800d79e:	4b5b      	ldr	r3, [pc, #364]	; (800d90c <_dtoa_r+0x304>)
 800d7a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	ec51 0b18 	vmov	r0, r1, d8
 800d7ac:	f7f3 f9c6 	bl	8000b3c <__aeabi_dcmplt>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d04e      	beq.n	800d852 <_dtoa_r+0x24a>
 800d7b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	930c      	str	r3, [sp, #48]	; 0x30
 800d7bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7be:	1b5b      	subs	r3, r3, r5
 800d7c0:	1e5a      	subs	r2, r3, #1
 800d7c2:	bf45      	ittet	mi
 800d7c4:	f1c3 0301 	rsbmi	r3, r3, #1
 800d7c8:	9305      	strmi	r3, [sp, #20]
 800d7ca:	2300      	movpl	r3, #0
 800d7cc:	2300      	movmi	r3, #0
 800d7ce:	9206      	str	r2, [sp, #24]
 800d7d0:	bf54      	ite	pl
 800d7d2:	9305      	strpl	r3, [sp, #20]
 800d7d4:	9306      	strmi	r3, [sp, #24]
 800d7d6:	f1bb 0f00 	cmp.w	fp, #0
 800d7da:	db3c      	blt.n	800d856 <_dtoa_r+0x24e>
 800d7dc:	9b06      	ldr	r3, [sp, #24]
 800d7de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d7e2:	445b      	add	r3, fp
 800d7e4:	9306      	str	r3, [sp, #24]
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	9308      	str	r3, [sp, #32]
 800d7ea:	9b07      	ldr	r3, [sp, #28]
 800d7ec:	2b09      	cmp	r3, #9
 800d7ee:	d868      	bhi.n	800d8c2 <_dtoa_r+0x2ba>
 800d7f0:	2b05      	cmp	r3, #5
 800d7f2:	bfc4      	itt	gt
 800d7f4:	3b04      	subgt	r3, #4
 800d7f6:	9307      	strgt	r3, [sp, #28]
 800d7f8:	9b07      	ldr	r3, [sp, #28]
 800d7fa:	f1a3 0302 	sub.w	r3, r3, #2
 800d7fe:	bfcc      	ite	gt
 800d800:	2500      	movgt	r5, #0
 800d802:	2501      	movle	r5, #1
 800d804:	2b03      	cmp	r3, #3
 800d806:	f200 8085 	bhi.w	800d914 <_dtoa_r+0x30c>
 800d80a:	e8df f003 	tbb	[pc, r3]
 800d80e:	3b2e      	.short	0x3b2e
 800d810:	5839      	.short	0x5839
 800d812:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d816:	441d      	add	r5, r3
 800d818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d81c:	2b20      	cmp	r3, #32
 800d81e:	bfc1      	itttt	gt
 800d820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d824:	fa08 f803 	lslgt.w	r8, r8, r3
 800d828:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d82c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d830:	bfd6      	itet	le
 800d832:	f1c3 0320 	rsble	r3, r3, #32
 800d836:	ea48 0003 	orrgt.w	r0, r8, r3
 800d83a:	fa06 f003 	lslle.w	r0, r6, r3
 800d83e:	f7f2 fe91 	bl	8000564 <__aeabi_ui2d>
 800d842:	2201      	movs	r2, #1
 800d844:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d848:	3d01      	subs	r5, #1
 800d84a:	920e      	str	r2, [sp, #56]	; 0x38
 800d84c:	e76f      	b.n	800d72e <_dtoa_r+0x126>
 800d84e:	2301      	movs	r3, #1
 800d850:	e7b3      	b.n	800d7ba <_dtoa_r+0x1b2>
 800d852:	900c      	str	r0, [sp, #48]	; 0x30
 800d854:	e7b2      	b.n	800d7bc <_dtoa_r+0x1b4>
 800d856:	9b05      	ldr	r3, [sp, #20]
 800d858:	eba3 030b 	sub.w	r3, r3, fp
 800d85c:	9305      	str	r3, [sp, #20]
 800d85e:	f1cb 0300 	rsb	r3, fp, #0
 800d862:	9308      	str	r3, [sp, #32]
 800d864:	2300      	movs	r3, #0
 800d866:	930b      	str	r3, [sp, #44]	; 0x2c
 800d868:	e7bf      	b.n	800d7ea <_dtoa_r+0x1e2>
 800d86a:	2300      	movs	r3, #0
 800d86c:	9309      	str	r3, [sp, #36]	; 0x24
 800d86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d870:	2b00      	cmp	r3, #0
 800d872:	dc52      	bgt.n	800d91a <_dtoa_r+0x312>
 800d874:	2301      	movs	r3, #1
 800d876:	9301      	str	r3, [sp, #4]
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	461a      	mov	r2, r3
 800d87c:	920a      	str	r2, [sp, #40]	; 0x28
 800d87e:	e00b      	b.n	800d898 <_dtoa_r+0x290>
 800d880:	2301      	movs	r3, #1
 800d882:	e7f3      	b.n	800d86c <_dtoa_r+0x264>
 800d884:	2300      	movs	r3, #0
 800d886:	9309      	str	r3, [sp, #36]	; 0x24
 800d888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d88a:	445b      	add	r3, fp
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	3301      	adds	r3, #1
 800d890:	2b01      	cmp	r3, #1
 800d892:	9304      	str	r3, [sp, #16]
 800d894:	bfb8      	it	lt
 800d896:	2301      	movlt	r3, #1
 800d898:	69e0      	ldr	r0, [r4, #28]
 800d89a:	2100      	movs	r1, #0
 800d89c:	2204      	movs	r2, #4
 800d89e:	f102 0614 	add.w	r6, r2, #20
 800d8a2:	429e      	cmp	r6, r3
 800d8a4:	d93d      	bls.n	800d922 <_dtoa_r+0x31a>
 800d8a6:	6041      	str	r1, [r0, #4]
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f000 fd9f 	bl	800e3ec <_Balloc>
 800d8ae:	9000      	str	r0, [sp, #0]
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d139      	bne.n	800d928 <_dtoa_r+0x320>
 800d8b4:	4b16      	ldr	r3, [pc, #88]	; (800d910 <_dtoa_r+0x308>)
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	f240 11af 	movw	r1, #431	; 0x1af
 800d8bc:	e6bd      	b.n	800d63a <_dtoa_r+0x32>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e7e1      	b.n	800d886 <_dtoa_r+0x27e>
 800d8c2:	2501      	movs	r5, #1
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	9307      	str	r3, [sp, #28]
 800d8c8:	9509      	str	r5, [sp, #36]	; 0x24
 800d8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	9304      	str	r3, [sp, #16]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	2312      	movs	r3, #18
 800d8d6:	e7d1      	b.n	800d87c <_dtoa_r+0x274>
 800d8d8:	636f4361 	.word	0x636f4361
 800d8dc:	3fd287a7 	.word	0x3fd287a7
 800d8e0:	8b60c8b3 	.word	0x8b60c8b3
 800d8e4:	3fc68a28 	.word	0x3fc68a28
 800d8e8:	509f79fb 	.word	0x509f79fb
 800d8ec:	3fd34413 	.word	0x3fd34413
 800d8f0:	0800fbdd 	.word	0x0800fbdd
 800d8f4:	0800fbf4 	.word	0x0800fbf4
 800d8f8:	7ff00000 	.word	0x7ff00000
 800d8fc:	0800fbd9 	.word	0x0800fbd9
 800d900:	0800fbd0 	.word	0x0800fbd0
 800d904:	0800fbad 	.word	0x0800fbad
 800d908:	3ff80000 	.word	0x3ff80000
 800d90c:	0800fce0 	.word	0x0800fce0
 800d910:	0800fc4c 	.word	0x0800fc4c
 800d914:	2301      	movs	r3, #1
 800d916:	9309      	str	r3, [sp, #36]	; 0x24
 800d918:	e7d7      	b.n	800d8ca <_dtoa_r+0x2c2>
 800d91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d91c:	9301      	str	r3, [sp, #4]
 800d91e:	9304      	str	r3, [sp, #16]
 800d920:	e7ba      	b.n	800d898 <_dtoa_r+0x290>
 800d922:	3101      	adds	r1, #1
 800d924:	0052      	lsls	r2, r2, #1
 800d926:	e7ba      	b.n	800d89e <_dtoa_r+0x296>
 800d928:	69e3      	ldr	r3, [r4, #28]
 800d92a:	9a00      	ldr	r2, [sp, #0]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	9b04      	ldr	r3, [sp, #16]
 800d930:	2b0e      	cmp	r3, #14
 800d932:	f200 80a8 	bhi.w	800da86 <_dtoa_r+0x47e>
 800d936:	2d00      	cmp	r5, #0
 800d938:	f000 80a5 	beq.w	800da86 <_dtoa_r+0x47e>
 800d93c:	f1bb 0f00 	cmp.w	fp, #0
 800d940:	dd38      	ble.n	800d9b4 <_dtoa_r+0x3ac>
 800d942:	4bc0      	ldr	r3, [pc, #768]	; (800dc44 <_dtoa_r+0x63c>)
 800d944:	f00b 020f 	and.w	r2, fp, #15
 800d948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d94c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d950:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d954:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d958:	d019      	beq.n	800d98e <_dtoa_r+0x386>
 800d95a:	4bbb      	ldr	r3, [pc, #748]	; (800dc48 <_dtoa_r+0x640>)
 800d95c:	ec51 0b18 	vmov	r0, r1, d8
 800d960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d964:	f7f2 ffa2 	bl	80008ac <__aeabi_ddiv>
 800d968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d96c:	f008 080f 	and.w	r8, r8, #15
 800d970:	2503      	movs	r5, #3
 800d972:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dc48 <_dtoa_r+0x640>
 800d976:	f1b8 0f00 	cmp.w	r8, #0
 800d97a:	d10a      	bne.n	800d992 <_dtoa_r+0x38a>
 800d97c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d980:	4632      	mov	r2, r6
 800d982:	463b      	mov	r3, r7
 800d984:	f7f2 ff92 	bl	80008ac <__aeabi_ddiv>
 800d988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d98c:	e02b      	b.n	800d9e6 <_dtoa_r+0x3de>
 800d98e:	2502      	movs	r5, #2
 800d990:	e7ef      	b.n	800d972 <_dtoa_r+0x36a>
 800d992:	f018 0f01 	tst.w	r8, #1
 800d996:	d008      	beq.n	800d9aa <_dtoa_r+0x3a2>
 800d998:	4630      	mov	r0, r6
 800d99a:	4639      	mov	r1, r7
 800d99c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d9a0:	f7f2 fe5a 	bl	8000658 <__aeabi_dmul>
 800d9a4:	3501      	adds	r5, #1
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	460f      	mov	r7, r1
 800d9aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9ae:	f109 0908 	add.w	r9, r9, #8
 800d9b2:	e7e0      	b.n	800d976 <_dtoa_r+0x36e>
 800d9b4:	f000 809f 	beq.w	800daf6 <_dtoa_r+0x4ee>
 800d9b8:	f1cb 0600 	rsb	r6, fp, #0
 800d9bc:	4ba1      	ldr	r3, [pc, #644]	; (800dc44 <_dtoa_r+0x63c>)
 800d9be:	4fa2      	ldr	r7, [pc, #648]	; (800dc48 <_dtoa_r+0x640>)
 800d9c0:	f006 020f 	and.w	r2, r6, #15
 800d9c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	ec51 0b18 	vmov	r0, r1, d8
 800d9d0:	f7f2 fe42 	bl	8000658 <__aeabi_dmul>
 800d9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9d8:	1136      	asrs	r6, r6, #4
 800d9da:	2300      	movs	r3, #0
 800d9dc:	2502      	movs	r5, #2
 800d9de:	2e00      	cmp	r6, #0
 800d9e0:	d17e      	bne.n	800dae0 <_dtoa_r+0x4d8>
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1d0      	bne.n	800d988 <_dtoa_r+0x380>
 800d9e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f000 8084 	beq.w	800dafa <_dtoa_r+0x4f2>
 800d9f2:	4b96      	ldr	r3, [pc, #600]	; (800dc4c <_dtoa_r+0x644>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	4649      	mov	r1, r9
 800d9fa:	f7f3 f89f 	bl	8000b3c <__aeabi_dcmplt>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d07b      	beq.n	800dafa <_dtoa_r+0x4f2>
 800da02:	9b04      	ldr	r3, [sp, #16]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d078      	beq.n	800dafa <_dtoa_r+0x4f2>
 800da08:	9b01      	ldr	r3, [sp, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	dd39      	ble.n	800da82 <_dtoa_r+0x47a>
 800da0e:	4b90      	ldr	r3, [pc, #576]	; (800dc50 <_dtoa_r+0x648>)
 800da10:	2200      	movs	r2, #0
 800da12:	4640      	mov	r0, r8
 800da14:	4649      	mov	r1, r9
 800da16:	f7f2 fe1f 	bl	8000658 <__aeabi_dmul>
 800da1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da1e:	9e01      	ldr	r6, [sp, #4]
 800da20:	f10b 37ff 	add.w	r7, fp, #4294967295
 800da24:	3501      	adds	r5, #1
 800da26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da2a:	4628      	mov	r0, r5
 800da2c:	f7f2 fdaa 	bl	8000584 <__aeabi_i2d>
 800da30:	4642      	mov	r2, r8
 800da32:	464b      	mov	r3, r9
 800da34:	f7f2 fe10 	bl	8000658 <__aeabi_dmul>
 800da38:	4b86      	ldr	r3, [pc, #536]	; (800dc54 <_dtoa_r+0x64c>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	f7f2 fc56 	bl	80002ec <__adddf3>
 800da40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800da44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da48:	9303      	str	r3, [sp, #12]
 800da4a:	2e00      	cmp	r6, #0
 800da4c:	d158      	bne.n	800db00 <_dtoa_r+0x4f8>
 800da4e:	4b82      	ldr	r3, [pc, #520]	; (800dc58 <_dtoa_r+0x650>)
 800da50:	2200      	movs	r2, #0
 800da52:	4640      	mov	r0, r8
 800da54:	4649      	mov	r1, r9
 800da56:	f7f2 fc47 	bl	80002e8 <__aeabi_dsub>
 800da5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da5e:	4680      	mov	r8, r0
 800da60:	4689      	mov	r9, r1
 800da62:	f7f3 f889 	bl	8000b78 <__aeabi_dcmpgt>
 800da66:	2800      	cmp	r0, #0
 800da68:	f040 8296 	bne.w	800df98 <_dtoa_r+0x990>
 800da6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da70:	4640      	mov	r0, r8
 800da72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da76:	4649      	mov	r1, r9
 800da78:	f7f3 f860 	bl	8000b3c <__aeabi_dcmplt>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	f040 8289 	bne.w	800df94 <_dtoa_r+0x98c>
 800da82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800da86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f2c0 814e 	blt.w	800dd2a <_dtoa_r+0x722>
 800da8e:	f1bb 0f0e 	cmp.w	fp, #14
 800da92:	f300 814a 	bgt.w	800dd2a <_dtoa_r+0x722>
 800da96:	4b6b      	ldr	r3, [pc, #428]	; (800dc44 <_dtoa_r+0x63c>)
 800da98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800daa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f280 80dc 	bge.w	800dc60 <_dtoa_r+0x658>
 800daa8:	9b04      	ldr	r3, [sp, #16]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f300 80d8 	bgt.w	800dc60 <_dtoa_r+0x658>
 800dab0:	f040 826f 	bne.w	800df92 <_dtoa_r+0x98a>
 800dab4:	4b68      	ldr	r3, [pc, #416]	; (800dc58 <_dtoa_r+0x650>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	4640      	mov	r0, r8
 800daba:	4649      	mov	r1, r9
 800dabc:	f7f2 fdcc 	bl	8000658 <__aeabi_dmul>
 800dac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dac4:	f7f3 f84e 	bl	8000b64 <__aeabi_dcmpge>
 800dac8:	9e04      	ldr	r6, [sp, #16]
 800daca:	4637      	mov	r7, r6
 800dacc:	2800      	cmp	r0, #0
 800dace:	f040 8245 	bne.w	800df5c <_dtoa_r+0x954>
 800dad2:	9d00      	ldr	r5, [sp, #0]
 800dad4:	2331      	movs	r3, #49	; 0x31
 800dad6:	f805 3b01 	strb.w	r3, [r5], #1
 800dada:	f10b 0b01 	add.w	fp, fp, #1
 800dade:	e241      	b.n	800df64 <_dtoa_r+0x95c>
 800dae0:	07f2      	lsls	r2, r6, #31
 800dae2:	d505      	bpl.n	800daf0 <_dtoa_r+0x4e8>
 800dae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dae8:	f7f2 fdb6 	bl	8000658 <__aeabi_dmul>
 800daec:	3501      	adds	r5, #1
 800daee:	2301      	movs	r3, #1
 800daf0:	1076      	asrs	r6, r6, #1
 800daf2:	3708      	adds	r7, #8
 800daf4:	e773      	b.n	800d9de <_dtoa_r+0x3d6>
 800daf6:	2502      	movs	r5, #2
 800daf8:	e775      	b.n	800d9e6 <_dtoa_r+0x3de>
 800dafa:	9e04      	ldr	r6, [sp, #16]
 800dafc:	465f      	mov	r7, fp
 800dafe:	e792      	b.n	800da26 <_dtoa_r+0x41e>
 800db00:	9900      	ldr	r1, [sp, #0]
 800db02:	4b50      	ldr	r3, [pc, #320]	; (800dc44 <_dtoa_r+0x63c>)
 800db04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db08:	4431      	add	r1, r6
 800db0a:	9102      	str	r1, [sp, #8]
 800db0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db0e:	eeb0 9a47 	vmov.f32	s18, s14
 800db12:	eef0 9a67 	vmov.f32	s19, s15
 800db16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db1e:	2900      	cmp	r1, #0
 800db20:	d044      	beq.n	800dbac <_dtoa_r+0x5a4>
 800db22:	494e      	ldr	r1, [pc, #312]	; (800dc5c <_dtoa_r+0x654>)
 800db24:	2000      	movs	r0, #0
 800db26:	f7f2 fec1 	bl	80008ac <__aeabi_ddiv>
 800db2a:	ec53 2b19 	vmov	r2, r3, d9
 800db2e:	f7f2 fbdb 	bl	80002e8 <__aeabi_dsub>
 800db32:	9d00      	ldr	r5, [sp, #0]
 800db34:	ec41 0b19 	vmov	d9, r0, r1
 800db38:	4649      	mov	r1, r9
 800db3a:	4640      	mov	r0, r8
 800db3c:	f7f3 f83c 	bl	8000bb8 <__aeabi_d2iz>
 800db40:	4606      	mov	r6, r0
 800db42:	f7f2 fd1f 	bl	8000584 <__aeabi_i2d>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	4640      	mov	r0, r8
 800db4c:	4649      	mov	r1, r9
 800db4e:	f7f2 fbcb 	bl	80002e8 <__aeabi_dsub>
 800db52:	3630      	adds	r6, #48	; 0x30
 800db54:	f805 6b01 	strb.w	r6, [r5], #1
 800db58:	ec53 2b19 	vmov	r2, r3, d9
 800db5c:	4680      	mov	r8, r0
 800db5e:	4689      	mov	r9, r1
 800db60:	f7f2 ffec 	bl	8000b3c <__aeabi_dcmplt>
 800db64:	2800      	cmp	r0, #0
 800db66:	d164      	bne.n	800dc32 <_dtoa_r+0x62a>
 800db68:	4642      	mov	r2, r8
 800db6a:	464b      	mov	r3, r9
 800db6c:	4937      	ldr	r1, [pc, #220]	; (800dc4c <_dtoa_r+0x644>)
 800db6e:	2000      	movs	r0, #0
 800db70:	f7f2 fbba 	bl	80002e8 <__aeabi_dsub>
 800db74:	ec53 2b19 	vmov	r2, r3, d9
 800db78:	f7f2 ffe0 	bl	8000b3c <__aeabi_dcmplt>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	f040 80b6 	bne.w	800dcee <_dtoa_r+0x6e6>
 800db82:	9b02      	ldr	r3, [sp, #8]
 800db84:	429d      	cmp	r5, r3
 800db86:	f43f af7c 	beq.w	800da82 <_dtoa_r+0x47a>
 800db8a:	4b31      	ldr	r3, [pc, #196]	; (800dc50 <_dtoa_r+0x648>)
 800db8c:	ec51 0b19 	vmov	r0, r1, d9
 800db90:	2200      	movs	r2, #0
 800db92:	f7f2 fd61 	bl	8000658 <__aeabi_dmul>
 800db96:	4b2e      	ldr	r3, [pc, #184]	; (800dc50 <_dtoa_r+0x648>)
 800db98:	ec41 0b19 	vmov	d9, r0, r1
 800db9c:	2200      	movs	r2, #0
 800db9e:	4640      	mov	r0, r8
 800dba0:	4649      	mov	r1, r9
 800dba2:	f7f2 fd59 	bl	8000658 <__aeabi_dmul>
 800dba6:	4680      	mov	r8, r0
 800dba8:	4689      	mov	r9, r1
 800dbaa:	e7c5      	b.n	800db38 <_dtoa_r+0x530>
 800dbac:	ec51 0b17 	vmov	r0, r1, d7
 800dbb0:	f7f2 fd52 	bl	8000658 <__aeabi_dmul>
 800dbb4:	9b02      	ldr	r3, [sp, #8]
 800dbb6:	9d00      	ldr	r5, [sp, #0]
 800dbb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbba:	ec41 0b19 	vmov	d9, r0, r1
 800dbbe:	4649      	mov	r1, r9
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	f7f2 fff9 	bl	8000bb8 <__aeabi_d2iz>
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	f7f2 fcdc 	bl	8000584 <__aeabi_i2d>
 800dbcc:	3630      	adds	r6, #48	; 0x30
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	4649      	mov	r1, r9
 800dbd6:	f7f2 fb87 	bl	80002e8 <__aeabi_dsub>
 800dbda:	f805 6b01 	strb.w	r6, [r5], #1
 800dbde:	9b02      	ldr	r3, [sp, #8]
 800dbe0:	429d      	cmp	r5, r3
 800dbe2:	4680      	mov	r8, r0
 800dbe4:	4689      	mov	r9, r1
 800dbe6:	f04f 0200 	mov.w	r2, #0
 800dbea:	d124      	bne.n	800dc36 <_dtoa_r+0x62e>
 800dbec:	4b1b      	ldr	r3, [pc, #108]	; (800dc5c <_dtoa_r+0x654>)
 800dbee:	ec51 0b19 	vmov	r0, r1, d9
 800dbf2:	f7f2 fb7b 	bl	80002ec <__adddf3>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4640      	mov	r0, r8
 800dbfc:	4649      	mov	r1, r9
 800dbfe:	f7f2 ffbb 	bl	8000b78 <__aeabi_dcmpgt>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d173      	bne.n	800dcee <_dtoa_r+0x6e6>
 800dc06:	ec53 2b19 	vmov	r2, r3, d9
 800dc0a:	4914      	ldr	r1, [pc, #80]	; (800dc5c <_dtoa_r+0x654>)
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	f7f2 fb6b 	bl	80002e8 <__aeabi_dsub>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4640      	mov	r0, r8
 800dc18:	4649      	mov	r1, r9
 800dc1a:	f7f2 ff8f 	bl	8000b3c <__aeabi_dcmplt>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	f43f af2f 	beq.w	800da82 <_dtoa_r+0x47a>
 800dc24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc26:	1e6b      	subs	r3, r5, #1
 800dc28:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc2e:	2b30      	cmp	r3, #48	; 0x30
 800dc30:	d0f8      	beq.n	800dc24 <_dtoa_r+0x61c>
 800dc32:	46bb      	mov	fp, r7
 800dc34:	e04a      	b.n	800dccc <_dtoa_r+0x6c4>
 800dc36:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <_dtoa_r+0x648>)
 800dc38:	f7f2 fd0e 	bl	8000658 <__aeabi_dmul>
 800dc3c:	4680      	mov	r8, r0
 800dc3e:	4689      	mov	r9, r1
 800dc40:	e7bd      	b.n	800dbbe <_dtoa_r+0x5b6>
 800dc42:	bf00      	nop
 800dc44:	0800fce0 	.word	0x0800fce0
 800dc48:	0800fcb8 	.word	0x0800fcb8
 800dc4c:	3ff00000 	.word	0x3ff00000
 800dc50:	40240000 	.word	0x40240000
 800dc54:	401c0000 	.word	0x401c0000
 800dc58:	40140000 	.word	0x40140000
 800dc5c:	3fe00000 	.word	0x3fe00000
 800dc60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc64:	9d00      	ldr	r5, [sp, #0]
 800dc66:	4642      	mov	r2, r8
 800dc68:	464b      	mov	r3, r9
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	4639      	mov	r1, r7
 800dc6e:	f7f2 fe1d 	bl	80008ac <__aeabi_ddiv>
 800dc72:	f7f2 ffa1 	bl	8000bb8 <__aeabi_d2iz>
 800dc76:	9001      	str	r0, [sp, #4]
 800dc78:	f7f2 fc84 	bl	8000584 <__aeabi_i2d>
 800dc7c:	4642      	mov	r2, r8
 800dc7e:	464b      	mov	r3, r9
 800dc80:	f7f2 fcea 	bl	8000658 <__aeabi_dmul>
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	4630      	mov	r0, r6
 800dc8a:	4639      	mov	r1, r7
 800dc8c:	f7f2 fb2c 	bl	80002e8 <__aeabi_dsub>
 800dc90:	9e01      	ldr	r6, [sp, #4]
 800dc92:	9f04      	ldr	r7, [sp, #16]
 800dc94:	3630      	adds	r6, #48	; 0x30
 800dc96:	f805 6b01 	strb.w	r6, [r5], #1
 800dc9a:	9e00      	ldr	r6, [sp, #0]
 800dc9c:	1bae      	subs	r6, r5, r6
 800dc9e:	42b7      	cmp	r7, r6
 800dca0:	4602      	mov	r2, r0
 800dca2:	460b      	mov	r3, r1
 800dca4:	d134      	bne.n	800dd10 <_dtoa_r+0x708>
 800dca6:	f7f2 fb21 	bl	80002ec <__adddf3>
 800dcaa:	4642      	mov	r2, r8
 800dcac:	464b      	mov	r3, r9
 800dcae:	4606      	mov	r6, r0
 800dcb0:	460f      	mov	r7, r1
 800dcb2:	f7f2 ff61 	bl	8000b78 <__aeabi_dcmpgt>
 800dcb6:	b9c8      	cbnz	r0, 800dcec <_dtoa_r+0x6e4>
 800dcb8:	4642      	mov	r2, r8
 800dcba:	464b      	mov	r3, r9
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	f7f2 ff32 	bl	8000b28 <__aeabi_dcmpeq>
 800dcc4:	b110      	cbz	r0, 800dccc <_dtoa_r+0x6c4>
 800dcc6:	9b01      	ldr	r3, [sp, #4]
 800dcc8:	07db      	lsls	r3, r3, #31
 800dcca:	d40f      	bmi.n	800dcec <_dtoa_r+0x6e4>
 800dccc:	4651      	mov	r1, sl
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f000 fbcc 	bl	800e46c <_Bfree>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcd8:	702b      	strb	r3, [r5, #0]
 800dcda:	f10b 0301 	add.w	r3, fp, #1
 800dcde:	6013      	str	r3, [r2, #0]
 800dce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f43f ace2 	beq.w	800d6ac <_dtoa_r+0xa4>
 800dce8:	601d      	str	r5, [r3, #0]
 800dcea:	e4df      	b.n	800d6ac <_dtoa_r+0xa4>
 800dcec:	465f      	mov	r7, fp
 800dcee:	462b      	mov	r3, r5
 800dcf0:	461d      	mov	r5, r3
 800dcf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcf6:	2a39      	cmp	r2, #57	; 0x39
 800dcf8:	d106      	bne.n	800dd08 <_dtoa_r+0x700>
 800dcfa:	9a00      	ldr	r2, [sp, #0]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d1f7      	bne.n	800dcf0 <_dtoa_r+0x6e8>
 800dd00:	9900      	ldr	r1, [sp, #0]
 800dd02:	2230      	movs	r2, #48	; 0x30
 800dd04:	3701      	adds	r7, #1
 800dd06:	700a      	strb	r2, [r1, #0]
 800dd08:	781a      	ldrb	r2, [r3, #0]
 800dd0a:	3201      	adds	r2, #1
 800dd0c:	701a      	strb	r2, [r3, #0]
 800dd0e:	e790      	b.n	800dc32 <_dtoa_r+0x62a>
 800dd10:	4ba3      	ldr	r3, [pc, #652]	; (800dfa0 <_dtoa_r+0x998>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	f7f2 fca0 	bl	8000658 <__aeabi_dmul>
 800dd18:	2200      	movs	r2, #0
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	4606      	mov	r6, r0
 800dd1e:	460f      	mov	r7, r1
 800dd20:	f7f2 ff02 	bl	8000b28 <__aeabi_dcmpeq>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d09e      	beq.n	800dc66 <_dtoa_r+0x65e>
 800dd28:	e7d0      	b.n	800dccc <_dtoa_r+0x6c4>
 800dd2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd2c:	2a00      	cmp	r2, #0
 800dd2e:	f000 80ca 	beq.w	800dec6 <_dtoa_r+0x8be>
 800dd32:	9a07      	ldr	r2, [sp, #28]
 800dd34:	2a01      	cmp	r2, #1
 800dd36:	f300 80ad 	bgt.w	800de94 <_dtoa_r+0x88c>
 800dd3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd3c:	2a00      	cmp	r2, #0
 800dd3e:	f000 80a5 	beq.w	800de8c <_dtoa_r+0x884>
 800dd42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd46:	9e08      	ldr	r6, [sp, #32]
 800dd48:	9d05      	ldr	r5, [sp, #20]
 800dd4a:	9a05      	ldr	r2, [sp, #20]
 800dd4c:	441a      	add	r2, r3
 800dd4e:	9205      	str	r2, [sp, #20]
 800dd50:	9a06      	ldr	r2, [sp, #24]
 800dd52:	2101      	movs	r1, #1
 800dd54:	441a      	add	r2, r3
 800dd56:	4620      	mov	r0, r4
 800dd58:	9206      	str	r2, [sp, #24]
 800dd5a:	f000 fc3d 	bl	800e5d8 <__i2b>
 800dd5e:	4607      	mov	r7, r0
 800dd60:	b165      	cbz	r5, 800dd7c <_dtoa_r+0x774>
 800dd62:	9b06      	ldr	r3, [sp, #24]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	dd09      	ble.n	800dd7c <_dtoa_r+0x774>
 800dd68:	42ab      	cmp	r3, r5
 800dd6a:	9a05      	ldr	r2, [sp, #20]
 800dd6c:	bfa8      	it	ge
 800dd6e:	462b      	movge	r3, r5
 800dd70:	1ad2      	subs	r2, r2, r3
 800dd72:	9205      	str	r2, [sp, #20]
 800dd74:	9a06      	ldr	r2, [sp, #24]
 800dd76:	1aed      	subs	r5, r5, r3
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	9306      	str	r3, [sp, #24]
 800dd7c:	9b08      	ldr	r3, [sp, #32]
 800dd7e:	b1f3      	cbz	r3, 800ddbe <_dtoa_r+0x7b6>
 800dd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f000 80a3 	beq.w	800dece <_dtoa_r+0x8c6>
 800dd88:	2e00      	cmp	r6, #0
 800dd8a:	dd10      	ble.n	800ddae <_dtoa_r+0x7a6>
 800dd8c:	4639      	mov	r1, r7
 800dd8e:	4632      	mov	r2, r6
 800dd90:	4620      	mov	r0, r4
 800dd92:	f000 fce1 	bl	800e758 <__pow5mult>
 800dd96:	4652      	mov	r2, sl
 800dd98:	4601      	mov	r1, r0
 800dd9a:	4607      	mov	r7, r0
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 fc31 	bl	800e604 <__multiply>
 800dda2:	4651      	mov	r1, sl
 800dda4:	4680      	mov	r8, r0
 800dda6:	4620      	mov	r0, r4
 800dda8:	f000 fb60 	bl	800e46c <_Bfree>
 800ddac:	46c2      	mov	sl, r8
 800ddae:	9b08      	ldr	r3, [sp, #32]
 800ddb0:	1b9a      	subs	r2, r3, r6
 800ddb2:	d004      	beq.n	800ddbe <_dtoa_r+0x7b6>
 800ddb4:	4651      	mov	r1, sl
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 fcce 	bl	800e758 <__pow5mult>
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	2101      	movs	r1, #1
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f000 fc09 	bl	800e5d8 <__i2b>
 800ddc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	4606      	mov	r6, r0
 800ddcc:	f340 8081 	ble.w	800ded2 <_dtoa_r+0x8ca>
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	4601      	mov	r1, r0
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f000 fcbf 	bl	800e758 <__pow5mult>
 800ddda:	9b07      	ldr	r3, [sp, #28]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	4606      	mov	r6, r0
 800dde0:	dd7a      	ble.n	800ded8 <_dtoa_r+0x8d0>
 800dde2:	f04f 0800 	mov.w	r8, #0
 800dde6:	6933      	ldr	r3, [r6, #16]
 800dde8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ddec:	6918      	ldr	r0, [r3, #16]
 800ddee:	f000 fba5 	bl	800e53c <__hi0bits>
 800ddf2:	f1c0 0020 	rsb	r0, r0, #32
 800ddf6:	9b06      	ldr	r3, [sp, #24]
 800ddf8:	4418      	add	r0, r3
 800ddfa:	f010 001f 	ands.w	r0, r0, #31
 800ddfe:	f000 8094 	beq.w	800df2a <_dtoa_r+0x922>
 800de02:	f1c0 0320 	rsb	r3, r0, #32
 800de06:	2b04      	cmp	r3, #4
 800de08:	f340 8085 	ble.w	800df16 <_dtoa_r+0x90e>
 800de0c:	9b05      	ldr	r3, [sp, #20]
 800de0e:	f1c0 001c 	rsb	r0, r0, #28
 800de12:	4403      	add	r3, r0
 800de14:	9305      	str	r3, [sp, #20]
 800de16:	9b06      	ldr	r3, [sp, #24]
 800de18:	4403      	add	r3, r0
 800de1a:	4405      	add	r5, r0
 800de1c:	9306      	str	r3, [sp, #24]
 800de1e:	9b05      	ldr	r3, [sp, #20]
 800de20:	2b00      	cmp	r3, #0
 800de22:	dd05      	ble.n	800de30 <_dtoa_r+0x828>
 800de24:	4651      	mov	r1, sl
 800de26:	461a      	mov	r2, r3
 800de28:	4620      	mov	r0, r4
 800de2a:	f000 fcef 	bl	800e80c <__lshift>
 800de2e:	4682      	mov	sl, r0
 800de30:	9b06      	ldr	r3, [sp, #24]
 800de32:	2b00      	cmp	r3, #0
 800de34:	dd05      	ble.n	800de42 <_dtoa_r+0x83a>
 800de36:	4631      	mov	r1, r6
 800de38:	461a      	mov	r2, r3
 800de3a:	4620      	mov	r0, r4
 800de3c:	f000 fce6 	bl	800e80c <__lshift>
 800de40:	4606      	mov	r6, r0
 800de42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de44:	2b00      	cmp	r3, #0
 800de46:	d072      	beq.n	800df2e <_dtoa_r+0x926>
 800de48:	4631      	mov	r1, r6
 800de4a:	4650      	mov	r0, sl
 800de4c:	f000 fd4a 	bl	800e8e4 <__mcmp>
 800de50:	2800      	cmp	r0, #0
 800de52:	da6c      	bge.n	800df2e <_dtoa_r+0x926>
 800de54:	2300      	movs	r3, #0
 800de56:	4651      	mov	r1, sl
 800de58:	220a      	movs	r2, #10
 800de5a:	4620      	mov	r0, r4
 800de5c:	f000 fb28 	bl	800e4b0 <__multadd>
 800de60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de62:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de66:	4682      	mov	sl, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f000 81b0 	beq.w	800e1ce <_dtoa_r+0xbc6>
 800de6e:	2300      	movs	r3, #0
 800de70:	4639      	mov	r1, r7
 800de72:	220a      	movs	r2, #10
 800de74:	4620      	mov	r0, r4
 800de76:	f000 fb1b 	bl	800e4b0 <__multadd>
 800de7a:	9b01      	ldr	r3, [sp, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	4607      	mov	r7, r0
 800de80:	f300 8096 	bgt.w	800dfb0 <_dtoa_r+0x9a8>
 800de84:	9b07      	ldr	r3, [sp, #28]
 800de86:	2b02      	cmp	r3, #2
 800de88:	dc59      	bgt.n	800df3e <_dtoa_r+0x936>
 800de8a:	e091      	b.n	800dfb0 <_dtoa_r+0x9a8>
 800de8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de92:	e758      	b.n	800dd46 <_dtoa_r+0x73e>
 800de94:	9b04      	ldr	r3, [sp, #16]
 800de96:	1e5e      	subs	r6, r3, #1
 800de98:	9b08      	ldr	r3, [sp, #32]
 800de9a:	42b3      	cmp	r3, r6
 800de9c:	bfbf      	itttt	lt
 800de9e:	9b08      	ldrlt	r3, [sp, #32]
 800dea0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dea2:	9608      	strlt	r6, [sp, #32]
 800dea4:	1af3      	sublt	r3, r6, r3
 800dea6:	bfb4      	ite	lt
 800dea8:	18d2      	addlt	r2, r2, r3
 800deaa:	1b9e      	subge	r6, r3, r6
 800deac:	9b04      	ldr	r3, [sp, #16]
 800deae:	bfbc      	itt	lt
 800deb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800deb2:	2600      	movlt	r6, #0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	bfb7      	itett	lt
 800deb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800debc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800dec0:	1a9d      	sublt	r5, r3, r2
 800dec2:	2300      	movlt	r3, #0
 800dec4:	e741      	b.n	800dd4a <_dtoa_r+0x742>
 800dec6:	9e08      	ldr	r6, [sp, #32]
 800dec8:	9d05      	ldr	r5, [sp, #20]
 800deca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800decc:	e748      	b.n	800dd60 <_dtoa_r+0x758>
 800dece:	9a08      	ldr	r2, [sp, #32]
 800ded0:	e770      	b.n	800ddb4 <_dtoa_r+0x7ac>
 800ded2:	9b07      	ldr	r3, [sp, #28]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	dc19      	bgt.n	800df0c <_dtoa_r+0x904>
 800ded8:	9b02      	ldr	r3, [sp, #8]
 800deda:	b9bb      	cbnz	r3, 800df0c <_dtoa_r+0x904>
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dee2:	b99b      	cbnz	r3, 800df0c <_dtoa_r+0x904>
 800dee4:	9b03      	ldr	r3, [sp, #12]
 800dee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800deea:	0d1b      	lsrs	r3, r3, #20
 800deec:	051b      	lsls	r3, r3, #20
 800deee:	b183      	cbz	r3, 800df12 <_dtoa_r+0x90a>
 800def0:	9b05      	ldr	r3, [sp, #20]
 800def2:	3301      	adds	r3, #1
 800def4:	9305      	str	r3, [sp, #20]
 800def6:	9b06      	ldr	r3, [sp, #24]
 800def8:	3301      	adds	r3, #1
 800defa:	9306      	str	r3, [sp, #24]
 800defc:	f04f 0801 	mov.w	r8, #1
 800df00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df02:	2b00      	cmp	r3, #0
 800df04:	f47f af6f 	bne.w	800dde6 <_dtoa_r+0x7de>
 800df08:	2001      	movs	r0, #1
 800df0a:	e774      	b.n	800ddf6 <_dtoa_r+0x7ee>
 800df0c:	f04f 0800 	mov.w	r8, #0
 800df10:	e7f6      	b.n	800df00 <_dtoa_r+0x8f8>
 800df12:	4698      	mov	r8, r3
 800df14:	e7f4      	b.n	800df00 <_dtoa_r+0x8f8>
 800df16:	d082      	beq.n	800de1e <_dtoa_r+0x816>
 800df18:	9a05      	ldr	r2, [sp, #20]
 800df1a:	331c      	adds	r3, #28
 800df1c:	441a      	add	r2, r3
 800df1e:	9205      	str	r2, [sp, #20]
 800df20:	9a06      	ldr	r2, [sp, #24]
 800df22:	441a      	add	r2, r3
 800df24:	441d      	add	r5, r3
 800df26:	9206      	str	r2, [sp, #24]
 800df28:	e779      	b.n	800de1e <_dtoa_r+0x816>
 800df2a:	4603      	mov	r3, r0
 800df2c:	e7f4      	b.n	800df18 <_dtoa_r+0x910>
 800df2e:	9b04      	ldr	r3, [sp, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	dc37      	bgt.n	800dfa4 <_dtoa_r+0x99c>
 800df34:	9b07      	ldr	r3, [sp, #28]
 800df36:	2b02      	cmp	r3, #2
 800df38:	dd34      	ble.n	800dfa4 <_dtoa_r+0x99c>
 800df3a:	9b04      	ldr	r3, [sp, #16]
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	9b01      	ldr	r3, [sp, #4]
 800df40:	b963      	cbnz	r3, 800df5c <_dtoa_r+0x954>
 800df42:	4631      	mov	r1, r6
 800df44:	2205      	movs	r2, #5
 800df46:	4620      	mov	r0, r4
 800df48:	f000 fab2 	bl	800e4b0 <__multadd>
 800df4c:	4601      	mov	r1, r0
 800df4e:	4606      	mov	r6, r0
 800df50:	4650      	mov	r0, sl
 800df52:	f000 fcc7 	bl	800e8e4 <__mcmp>
 800df56:	2800      	cmp	r0, #0
 800df58:	f73f adbb 	bgt.w	800dad2 <_dtoa_r+0x4ca>
 800df5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df5e:	9d00      	ldr	r5, [sp, #0]
 800df60:	ea6f 0b03 	mvn.w	fp, r3
 800df64:	f04f 0800 	mov.w	r8, #0
 800df68:	4631      	mov	r1, r6
 800df6a:	4620      	mov	r0, r4
 800df6c:	f000 fa7e 	bl	800e46c <_Bfree>
 800df70:	2f00      	cmp	r7, #0
 800df72:	f43f aeab 	beq.w	800dccc <_dtoa_r+0x6c4>
 800df76:	f1b8 0f00 	cmp.w	r8, #0
 800df7a:	d005      	beq.n	800df88 <_dtoa_r+0x980>
 800df7c:	45b8      	cmp	r8, r7
 800df7e:	d003      	beq.n	800df88 <_dtoa_r+0x980>
 800df80:	4641      	mov	r1, r8
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fa72 	bl	800e46c <_Bfree>
 800df88:	4639      	mov	r1, r7
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 fa6e 	bl	800e46c <_Bfree>
 800df90:	e69c      	b.n	800dccc <_dtoa_r+0x6c4>
 800df92:	2600      	movs	r6, #0
 800df94:	4637      	mov	r7, r6
 800df96:	e7e1      	b.n	800df5c <_dtoa_r+0x954>
 800df98:	46bb      	mov	fp, r7
 800df9a:	4637      	mov	r7, r6
 800df9c:	e599      	b.n	800dad2 <_dtoa_r+0x4ca>
 800df9e:	bf00      	nop
 800dfa0:	40240000 	.word	0x40240000
 800dfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f000 80c8 	beq.w	800e13c <_dtoa_r+0xb34>
 800dfac:	9b04      	ldr	r3, [sp, #16]
 800dfae:	9301      	str	r3, [sp, #4]
 800dfb0:	2d00      	cmp	r5, #0
 800dfb2:	dd05      	ble.n	800dfc0 <_dtoa_r+0x9b8>
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	462a      	mov	r2, r5
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f000 fc27 	bl	800e80c <__lshift>
 800dfbe:	4607      	mov	r7, r0
 800dfc0:	f1b8 0f00 	cmp.w	r8, #0
 800dfc4:	d05b      	beq.n	800e07e <_dtoa_r+0xa76>
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f000 fa0f 	bl	800e3ec <_Balloc>
 800dfce:	4605      	mov	r5, r0
 800dfd0:	b928      	cbnz	r0, 800dfde <_dtoa_r+0x9d6>
 800dfd2:	4b83      	ldr	r3, [pc, #524]	; (800e1e0 <_dtoa_r+0xbd8>)
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dfda:	f7ff bb2e 	b.w	800d63a <_dtoa_r+0x32>
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	3202      	adds	r2, #2
 800dfe2:	0092      	lsls	r2, r2, #2
 800dfe4:	f107 010c 	add.w	r1, r7, #12
 800dfe8:	300c      	adds	r0, #12
 800dfea:	f7ff fa77 	bl	800d4dc <memcpy>
 800dfee:	2201      	movs	r2, #1
 800dff0:	4629      	mov	r1, r5
 800dff2:	4620      	mov	r0, r4
 800dff4:	f000 fc0a 	bl	800e80c <__lshift>
 800dff8:	9b00      	ldr	r3, [sp, #0]
 800dffa:	3301      	adds	r3, #1
 800dffc:	9304      	str	r3, [sp, #16]
 800dffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e002:	4413      	add	r3, r2
 800e004:	9308      	str	r3, [sp, #32]
 800e006:	9b02      	ldr	r3, [sp, #8]
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	46b8      	mov	r8, r7
 800e00e:	9306      	str	r3, [sp, #24]
 800e010:	4607      	mov	r7, r0
 800e012:	9b04      	ldr	r3, [sp, #16]
 800e014:	4631      	mov	r1, r6
 800e016:	3b01      	subs	r3, #1
 800e018:	4650      	mov	r0, sl
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	f7ff fa6c 	bl	800d4f8 <quorem>
 800e020:	4641      	mov	r1, r8
 800e022:	9002      	str	r0, [sp, #8]
 800e024:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e028:	4650      	mov	r0, sl
 800e02a:	f000 fc5b 	bl	800e8e4 <__mcmp>
 800e02e:	463a      	mov	r2, r7
 800e030:	9005      	str	r0, [sp, #20]
 800e032:	4631      	mov	r1, r6
 800e034:	4620      	mov	r0, r4
 800e036:	f000 fc71 	bl	800e91c <__mdiff>
 800e03a:	68c2      	ldr	r2, [r0, #12]
 800e03c:	4605      	mov	r5, r0
 800e03e:	bb02      	cbnz	r2, 800e082 <_dtoa_r+0xa7a>
 800e040:	4601      	mov	r1, r0
 800e042:	4650      	mov	r0, sl
 800e044:	f000 fc4e 	bl	800e8e4 <__mcmp>
 800e048:	4602      	mov	r2, r0
 800e04a:	4629      	mov	r1, r5
 800e04c:	4620      	mov	r0, r4
 800e04e:	9209      	str	r2, [sp, #36]	; 0x24
 800e050:	f000 fa0c 	bl	800e46c <_Bfree>
 800e054:	9b07      	ldr	r3, [sp, #28]
 800e056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e058:	9d04      	ldr	r5, [sp, #16]
 800e05a:	ea43 0102 	orr.w	r1, r3, r2
 800e05e:	9b06      	ldr	r3, [sp, #24]
 800e060:	4319      	orrs	r1, r3
 800e062:	d110      	bne.n	800e086 <_dtoa_r+0xa7e>
 800e064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e068:	d029      	beq.n	800e0be <_dtoa_r+0xab6>
 800e06a:	9b05      	ldr	r3, [sp, #20]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	dd02      	ble.n	800e076 <_dtoa_r+0xa6e>
 800e070:	9b02      	ldr	r3, [sp, #8]
 800e072:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e076:	9b01      	ldr	r3, [sp, #4]
 800e078:	f883 9000 	strb.w	r9, [r3]
 800e07c:	e774      	b.n	800df68 <_dtoa_r+0x960>
 800e07e:	4638      	mov	r0, r7
 800e080:	e7ba      	b.n	800dff8 <_dtoa_r+0x9f0>
 800e082:	2201      	movs	r2, #1
 800e084:	e7e1      	b.n	800e04a <_dtoa_r+0xa42>
 800e086:	9b05      	ldr	r3, [sp, #20]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	db04      	blt.n	800e096 <_dtoa_r+0xa8e>
 800e08c:	9907      	ldr	r1, [sp, #28]
 800e08e:	430b      	orrs	r3, r1
 800e090:	9906      	ldr	r1, [sp, #24]
 800e092:	430b      	orrs	r3, r1
 800e094:	d120      	bne.n	800e0d8 <_dtoa_r+0xad0>
 800e096:	2a00      	cmp	r2, #0
 800e098:	dded      	ble.n	800e076 <_dtoa_r+0xa6e>
 800e09a:	4651      	mov	r1, sl
 800e09c:	2201      	movs	r2, #1
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f000 fbb4 	bl	800e80c <__lshift>
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4682      	mov	sl, r0
 800e0a8:	f000 fc1c 	bl	800e8e4 <__mcmp>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	dc03      	bgt.n	800e0b8 <_dtoa_r+0xab0>
 800e0b0:	d1e1      	bne.n	800e076 <_dtoa_r+0xa6e>
 800e0b2:	f019 0f01 	tst.w	r9, #1
 800e0b6:	d0de      	beq.n	800e076 <_dtoa_r+0xa6e>
 800e0b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0bc:	d1d8      	bne.n	800e070 <_dtoa_r+0xa68>
 800e0be:	9a01      	ldr	r2, [sp, #4]
 800e0c0:	2339      	movs	r3, #57	; 0x39
 800e0c2:	7013      	strb	r3, [r2, #0]
 800e0c4:	462b      	mov	r3, r5
 800e0c6:	461d      	mov	r5, r3
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0ce:	2a39      	cmp	r2, #57	; 0x39
 800e0d0:	d06c      	beq.n	800e1ac <_dtoa_r+0xba4>
 800e0d2:	3201      	adds	r2, #1
 800e0d4:	701a      	strb	r2, [r3, #0]
 800e0d6:	e747      	b.n	800df68 <_dtoa_r+0x960>
 800e0d8:	2a00      	cmp	r2, #0
 800e0da:	dd07      	ble.n	800e0ec <_dtoa_r+0xae4>
 800e0dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0e0:	d0ed      	beq.n	800e0be <_dtoa_r+0xab6>
 800e0e2:	9a01      	ldr	r2, [sp, #4]
 800e0e4:	f109 0301 	add.w	r3, r9, #1
 800e0e8:	7013      	strb	r3, [r2, #0]
 800e0ea:	e73d      	b.n	800df68 <_dtoa_r+0x960>
 800e0ec:	9b04      	ldr	r3, [sp, #16]
 800e0ee:	9a08      	ldr	r2, [sp, #32]
 800e0f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d043      	beq.n	800e180 <_dtoa_r+0xb78>
 800e0f8:	4651      	mov	r1, sl
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	220a      	movs	r2, #10
 800e0fe:	4620      	mov	r0, r4
 800e100:	f000 f9d6 	bl	800e4b0 <__multadd>
 800e104:	45b8      	cmp	r8, r7
 800e106:	4682      	mov	sl, r0
 800e108:	f04f 0300 	mov.w	r3, #0
 800e10c:	f04f 020a 	mov.w	r2, #10
 800e110:	4641      	mov	r1, r8
 800e112:	4620      	mov	r0, r4
 800e114:	d107      	bne.n	800e126 <_dtoa_r+0xb1e>
 800e116:	f000 f9cb 	bl	800e4b0 <__multadd>
 800e11a:	4680      	mov	r8, r0
 800e11c:	4607      	mov	r7, r0
 800e11e:	9b04      	ldr	r3, [sp, #16]
 800e120:	3301      	adds	r3, #1
 800e122:	9304      	str	r3, [sp, #16]
 800e124:	e775      	b.n	800e012 <_dtoa_r+0xa0a>
 800e126:	f000 f9c3 	bl	800e4b0 <__multadd>
 800e12a:	4639      	mov	r1, r7
 800e12c:	4680      	mov	r8, r0
 800e12e:	2300      	movs	r3, #0
 800e130:	220a      	movs	r2, #10
 800e132:	4620      	mov	r0, r4
 800e134:	f000 f9bc 	bl	800e4b0 <__multadd>
 800e138:	4607      	mov	r7, r0
 800e13a:	e7f0      	b.n	800e11e <_dtoa_r+0xb16>
 800e13c:	9b04      	ldr	r3, [sp, #16]
 800e13e:	9301      	str	r3, [sp, #4]
 800e140:	9d00      	ldr	r5, [sp, #0]
 800e142:	4631      	mov	r1, r6
 800e144:	4650      	mov	r0, sl
 800e146:	f7ff f9d7 	bl	800d4f8 <quorem>
 800e14a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e14e:	9b00      	ldr	r3, [sp, #0]
 800e150:	f805 9b01 	strb.w	r9, [r5], #1
 800e154:	1aea      	subs	r2, r5, r3
 800e156:	9b01      	ldr	r3, [sp, #4]
 800e158:	4293      	cmp	r3, r2
 800e15a:	dd07      	ble.n	800e16c <_dtoa_r+0xb64>
 800e15c:	4651      	mov	r1, sl
 800e15e:	2300      	movs	r3, #0
 800e160:	220a      	movs	r2, #10
 800e162:	4620      	mov	r0, r4
 800e164:	f000 f9a4 	bl	800e4b0 <__multadd>
 800e168:	4682      	mov	sl, r0
 800e16a:	e7ea      	b.n	800e142 <_dtoa_r+0xb3a>
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	bfc8      	it	gt
 800e172:	461d      	movgt	r5, r3
 800e174:	9b00      	ldr	r3, [sp, #0]
 800e176:	bfd8      	it	le
 800e178:	2501      	movle	r5, #1
 800e17a:	441d      	add	r5, r3
 800e17c:	f04f 0800 	mov.w	r8, #0
 800e180:	4651      	mov	r1, sl
 800e182:	2201      	movs	r2, #1
 800e184:	4620      	mov	r0, r4
 800e186:	f000 fb41 	bl	800e80c <__lshift>
 800e18a:	4631      	mov	r1, r6
 800e18c:	4682      	mov	sl, r0
 800e18e:	f000 fba9 	bl	800e8e4 <__mcmp>
 800e192:	2800      	cmp	r0, #0
 800e194:	dc96      	bgt.n	800e0c4 <_dtoa_r+0xabc>
 800e196:	d102      	bne.n	800e19e <_dtoa_r+0xb96>
 800e198:	f019 0f01 	tst.w	r9, #1
 800e19c:	d192      	bne.n	800e0c4 <_dtoa_r+0xabc>
 800e19e:	462b      	mov	r3, r5
 800e1a0:	461d      	mov	r5, r3
 800e1a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1a6:	2a30      	cmp	r2, #48	; 0x30
 800e1a8:	d0fa      	beq.n	800e1a0 <_dtoa_r+0xb98>
 800e1aa:	e6dd      	b.n	800df68 <_dtoa_r+0x960>
 800e1ac:	9a00      	ldr	r2, [sp, #0]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d189      	bne.n	800e0c6 <_dtoa_r+0xabe>
 800e1b2:	f10b 0b01 	add.w	fp, fp, #1
 800e1b6:	2331      	movs	r3, #49	; 0x31
 800e1b8:	e796      	b.n	800e0e8 <_dtoa_r+0xae0>
 800e1ba:	4b0a      	ldr	r3, [pc, #40]	; (800e1e4 <_dtoa_r+0xbdc>)
 800e1bc:	f7ff ba99 	b.w	800d6f2 <_dtoa_r+0xea>
 800e1c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f47f aa6d 	bne.w	800d6a2 <_dtoa_r+0x9a>
 800e1c8:	4b07      	ldr	r3, [pc, #28]	; (800e1e8 <_dtoa_r+0xbe0>)
 800e1ca:	f7ff ba92 	b.w	800d6f2 <_dtoa_r+0xea>
 800e1ce:	9b01      	ldr	r3, [sp, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	dcb5      	bgt.n	800e140 <_dtoa_r+0xb38>
 800e1d4:	9b07      	ldr	r3, [sp, #28]
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	f73f aeb1 	bgt.w	800df3e <_dtoa_r+0x936>
 800e1dc:	e7b0      	b.n	800e140 <_dtoa_r+0xb38>
 800e1de:	bf00      	nop
 800e1e0:	0800fc4c 	.word	0x0800fc4c
 800e1e4:	0800fbac 	.word	0x0800fbac
 800e1e8:	0800fbd0 	.word	0x0800fbd0

0800e1ec <_free_r>:
 800e1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1ee:	2900      	cmp	r1, #0
 800e1f0:	d044      	beq.n	800e27c <_free_r+0x90>
 800e1f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1f6:	9001      	str	r0, [sp, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e1fe:	bfb8      	it	lt
 800e200:	18e4      	addlt	r4, r4, r3
 800e202:	f000 f8e7 	bl	800e3d4 <__malloc_lock>
 800e206:	4a1e      	ldr	r2, [pc, #120]	; (800e280 <_free_r+0x94>)
 800e208:	9801      	ldr	r0, [sp, #4]
 800e20a:	6813      	ldr	r3, [r2, #0]
 800e20c:	b933      	cbnz	r3, 800e21c <_free_r+0x30>
 800e20e:	6063      	str	r3, [r4, #4]
 800e210:	6014      	str	r4, [r2, #0]
 800e212:	b003      	add	sp, #12
 800e214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e218:	f000 b8e2 	b.w	800e3e0 <__malloc_unlock>
 800e21c:	42a3      	cmp	r3, r4
 800e21e:	d908      	bls.n	800e232 <_free_r+0x46>
 800e220:	6825      	ldr	r5, [r4, #0]
 800e222:	1961      	adds	r1, r4, r5
 800e224:	428b      	cmp	r3, r1
 800e226:	bf01      	itttt	eq
 800e228:	6819      	ldreq	r1, [r3, #0]
 800e22a:	685b      	ldreq	r3, [r3, #4]
 800e22c:	1949      	addeq	r1, r1, r5
 800e22e:	6021      	streq	r1, [r4, #0]
 800e230:	e7ed      	b.n	800e20e <_free_r+0x22>
 800e232:	461a      	mov	r2, r3
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	b10b      	cbz	r3, 800e23c <_free_r+0x50>
 800e238:	42a3      	cmp	r3, r4
 800e23a:	d9fa      	bls.n	800e232 <_free_r+0x46>
 800e23c:	6811      	ldr	r1, [r2, #0]
 800e23e:	1855      	adds	r5, r2, r1
 800e240:	42a5      	cmp	r5, r4
 800e242:	d10b      	bne.n	800e25c <_free_r+0x70>
 800e244:	6824      	ldr	r4, [r4, #0]
 800e246:	4421      	add	r1, r4
 800e248:	1854      	adds	r4, r2, r1
 800e24a:	42a3      	cmp	r3, r4
 800e24c:	6011      	str	r1, [r2, #0]
 800e24e:	d1e0      	bne.n	800e212 <_free_r+0x26>
 800e250:	681c      	ldr	r4, [r3, #0]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	6053      	str	r3, [r2, #4]
 800e256:	440c      	add	r4, r1
 800e258:	6014      	str	r4, [r2, #0]
 800e25a:	e7da      	b.n	800e212 <_free_r+0x26>
 800e25c:	d902      	bls.n	800e264 <_free_r+0x78>
 800e25e:	230c      	movs	r3, #12
 800e260:	6003      	str	r3, [r0, #0]
 800e262:	e7d6      	b.n	800e212 <_free_r+0x26>
 800e264:	6825      	ldr	r5, [r4, #0]
 800e266:	1961      	adds	r1, r4, r5
 800e268:	428b      	cmp	r3, r1
 800e26a:	bf04      	itt	eq
 800e26c:	6819      	ldreq	r1, [r3, #0]
 800e26e:	685b      	ldreq	r3, [r3, #4]
 800e270:	6063      	str	r3, [r4, #4]
 800e272:	bf04      	itt	eq
 800e274:	1949      	addeq	r1, r1, r5
 800e276:	6021      	streq	r1, [r4, #0]
 800e278:	6054      	str	r4, [r2, #4]
 800e27a:	e7ca      	b.n	800e212 <_free_r+0x26>
 800e27c:	b003      	add	sp, #12
 800e27e:	bd30      	pop	{r4, r5, pc}
 800e280:	200094a8 	.word	0x200094a8

0800e284 <malloc>:
 800e284:	4b02      	ldr	r3, [pc, #8]	; (800e290 <malloc+0xc>)
 800e286:	4601      	mov	r1, r0
 800e288:	6818      	ldr	r0, [r3, #0]
 800e28a:	f000 b823 	b.w	800e2d4 <_malloc_r>
 800e28e:	bf00      	nop
 800e290:	20000088 	.word	0x20000088

0800e294 <sbrk_aligned>:
 800e294:	b570      	push	{r4, r5, r6, lr}
 800e296:	4e0e      	ldr	r6, [pc, #56]	; (800e2d0 <sbrk_aligned+0x3c>)
 800e298:	460c      	mov	r4, r1
 800e29a:	6831      	ldr	r1, [r6, #0]
 800e29c:	4605      	mov	r5, r0
 800e29e:	b911      	cbnz	r1, 800e2a6 <sbrk_aligned+0x12>
 800e2a0:	f000 fe40 	bl	800ef24 <_sbrk_r>
 800e2a4:	6030      	str	r0, [r6, #0]
 800e2a6:	4621      	mov	r1, r4
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	f000 fe3b 	bl	800ef24 <_sbrk_r>
 800e2ae:	1c43      	adds	r3, r0, #1
 800e2b0:	d00a      	beq.n	800e2c8 <sbrk_aligned+0x34>
 800e2b2:	1cc4      	adds	r4, r0, #3
 800e2b4:	f024 0403 	bic.w	r4, r4, #3
 800e2b8:	42a0      	cmp	r0, r4
 800e2ba:	d007      	beq.n	800e2cc <sbrk_aligned+0x38>
 800e2bc:	1a21      	subs	r1, r4, r0
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f000 fe30 	bl	800ef24 <_sbrk_r>
 800e2c4:	3001      	adds	r0, #1
 800e2c6:	d101      	bne.n	800e2cc <sbrk_aligned+0x38>
 800e2c8:	f04f 34ff 	mov.w	r4, #4294967295
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	bd70      	pop	{r4, r5, r6, pc}
 800e2d0:	200094ac 	.word	0x200094ac

0800e2d4 <_malloc_r>:
 800e2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2d8:	1ccd      	adds	r5, r1, #3
 800e2da:	f025 0503 	bic.w	r5, r5, #3
 800e2de:	3508      	adds	r5, #8
 800e2e0:	2d0c      	cmp	r5, #12
 800e2e2:	bf38      	it	cc
 800e2e4:	250c      	movcc	r5, #12
 800e2e6:	2d00      	cmp	r5, #0
 800e2e8:	4607      	mov	r7, r0
 800e2ea:	db01      	blt.n	800e2f0 <_malloc_r+0x1c>
 800e2ec:	42a9      	cmp	r1, r5
 800e2ee:	d905      	bls.n	800e2fc <_malloc_r+0x28>
 800e2f0:	230c      	movs	r3, #12
 800e2f2:	603b      	str	r3, [r7, #0]
 800e2f4:	2600      	movs	r6, #0
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e3d0 <_malloc_r+0xfc>
 800e300:	f000 f868 	bl	800e3d4 <__malloc_lock>
 800e304:	f8d8 3000 	ldr.w	r3, [r8]
 800e308:	461c      	mov	r4, r3
 800e30a:	bb5c      	cbnz	r4, 800e364 <_malloc_r+0x90>
 800e30c:	4629      	mov	r1, r5
 800e30e:	4638      	mov	r0, r7
 800e310:	f7ff ffc0 	bl	800e294 <sbrk_aligned>
 800e314:	1c43      	adds	r3, r0, #1
 800e316:	4604      	mov	r4, r0
 800e318:	d155      	bne.n	800e3c6 <_malloc_r+0xf2>
 800e31a:	f8d8 4000 	ldr.w	r4, [r8]
 800e31e:	4626      	mov	r6, r4
 800e320:	2e00      	cmp	r6, #0
 800e322:	d145      	bne.n	800e3b0 <_malloc_r+0xdc>
 800e324:	2c00      	cmp	r4, #0
 800e326:	d048      	beq.n	800e3ba <_malloc_r+0xe6>
 800e328:	6823      	ldr	r3, [r4, #0]
 800e32a:	4631      	mov	r1, r6
 800e32c:	4638      	mov	r0, r7
 800e32e:	eb04 0903 	add.w	r9, r4, r3
 800e332:	f000 fdf7 	bl	800ef24 <_sbrk_r>
 800e336:	4581      	cmp	r9, r0
 800e338:	d13f      	bne.n	800e3ba <_malloc_r+0xe6>
 800e33a:	6821      	ldr	r1, [r4, #0]
 800e33c:	1a6d      	subs	r5, r5, r1
 800e33e:	4629      	mov	r1, r5
 800e340:	4638      	mov	r0, r7
 800e342:	f7ff ffa7 	bl	800e294 <sbrk_aligned>
 800e346:	3001      	adds	r0, #1
 800e348:	d037      	beq.n	800e3ba <_malloc_r+0xe6>
 800e34a:	6823      	ldr	r3, [r4, #0]
 800e34c:	442b      	add	r3, r5
 800e34e:	6023      	str	r3, [r4, #0]
 800e350:	f8d8 3000 	ldr.w	r3, [r8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d038      	beq.n	800e3ca <_malloc_r+0xf6>
 800e358:	685a      	ldr	r2, [r3, #4]
 800e35a:	42a2      	cmp	r2, r4
 800e35c:	d12b      	bne.n	800e3b6 <_malloc_r+0xe2>
 800e35e:	2200      	movs	r2, #0
 800e360:	605a      	str	r2, [r3, #4]
 800e362:	e00f      	b.n	800e384 <_malloc_r+0xb0>
 800e364:	6822      	ldr	r2, [r4, #0]
 800e366:	1b52      	subs	r2, r2, r5
 800e368:	d41f      	bmi.n	800e3aa <_malloc_r+0xd6>
 800e36a:	2a0b      	cmp	r2, #11
 800e36c:	d917      	bls.n	800e39e <_malloc_r+0xca>
 800e36e:	1961      	adds	r1, r4, r5
 800e370:	42a3      	cmp	r3, r4
 800e372:	6025      	str	r5, [r4, #0]
 800e374:	bf18      	it	ne
 800e376:	6059      	strne	r1, [r3, #4]
 800e378:	6863      	ldr	r3, [r4, #4]
 800e37a:	bf08      	it	eq
 800e37c:	f8c8 1000 	streq.w	r1, [r8]
 800e380:	5162      	str	r2, [r4, r5]
 800e382:	604b      	str	r3, [r1, #4]
 800e384:	4638      	mov	r0, r7
 800e386:	f104 060b 	add.w	r6, r4, #11
 800e38a:	f000 f829 	bl	800e3e0 <__malloc_unlock>
 800e38e:	f026 0607 	bic.w	r6, r6, #7
 800e392:	1d23      	adds	r3, r4, #4
 800e394:	1af2      	subs	r2, r6, r3
 800e396:	d0ae      	beq.n	800e2f6 <_malloc_r+0x22>
 800e398:	1b9b      	subs	r3, r3, r6
 800e39a:	50a3      	str	r3, [r4, r2]
 800e39c:	e7ab      	b.n	800e2f6 <_malloc_r+0x22>
 800e39e:	42a3      	cmp	r3, r4
 800e3a0:	6862      	ldr	r2, [r4, #4]
 800e3a2:	d1dd      	bne.n	800e360 <_malloc_r+0x8c>
 800e3a4:	f8c8 2000 	str.w	r2, [r8]
 800e3a8:	e7ec      	b.n	800e384 <_malloc_r+0xb0>
 800e3aa:	4623      	mov	r3, r4
 800e3ac:	6864      	ldr	r4, [r4, #4]
 800e3ae:	e7ac      	b.n	800e30a <_malloc_r+0x36>
 800e3b0:	4634      	mov	r4, r6
 800e3b2:	6876      	ldr	r6, [r6, #4]
 800e3b4:	e7b4      	b.n	800e320 <_malloc_r+0x4c>
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	e7cc      	b.n	800e354 <_malloc_r+0x80>
 800e3ba:	230c      	movs	r3, #12
 800e3bc:	603b      	str	r3, [r7, #0]
 800e3be:	4638      	mov	r0, r7
 800e3c0:	f000 f80e 	bl	800e3e0 <__malloc_unlock>
 800e3c4:	e797      	b.n	800e2f6 <_malloc_r+0x22>
 800e3c6:	6025      	str	r5, [r4, #0]
 800e3c8:	e7dc      	b.n	800e384 <_malloc_r+0xb0>
 800e3ca:	605b      	str	r3, [r3, #4]
 800e3cc:	deff      	udf	#255	; 0xff
 800e3ce:	bf00      	nop
 800e3d0:	200094a8 	.word	0x200094a8

0800e3d4 <__malloc_lock>:
 800e3d4:	4801      	ldr	r0, [pc, #4]	; (800e3dc <__malloc_lock+0x8>)
 800e3d6:	f7ff b87f 	b.w	800d4d8 <__retarget_lock_acquire_recursive>
 800e3da:	bf00      	nop
 800e3dc:	200094a4 	.word	0x200094a4

0800e3e0 <__malloc_unlock>:
 800e3e0:	4801      	ldr	r0, [pc, #4]	; (800e3e8 <__malloc_unlock+0x8>)
 800e3e2:	f7ff b87a 	b.w	800d4da <__retarget_lock_release_recursive>
 800e3e6:	bf00      	nop
 800e3e8:	200094a4 	.word	0x200094a4

0800e3ec <_Balloc>:
 800e3ec:	b570      	push	{r4, r5, r6, lr}
 800e3ee:	69c6      	ldr	r6, [r0, #28]
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	b976      	cbnz	r6, 800e414 <_Balloc+0x28>
 800e3f6:	2010      	movs	r0, #16
 800e3f8:	f7ff ff44 	bl	800e284 <malloc>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	61e0      	str	r0, [r4, #28]
 800e400:	b920      	cbnz	r0, 800e40c <_Balloc+0x20>
 800e402:	4b18      	ldr	r3, [pc, #96]	; (800e464 <_Balloc+0x78>)
 800e404:	4818      	ldr	r0, [pc, #96]	; (800e468 <_Balloc+0x7c>)
 800e406:	216b      	movs	r1, #107	; 0x6b
 800e408:	f000 fd9c 	bl	800ef44 <__assert_func>
 800e40c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e410:	6006      	str	r6, [r0, #0]
 800e412:	60c6      	str	r6, [r0, #12]
 800e414:	69e6      	ldr	r6, [r4, #28]
 800e416:	68f3      	ldr	r3, [r6, #12]
 800e418:	b183      	cbz	r3, 800e43c <_Balloc+0x50>
 800e41a:	69e3      	ldr	r3, [r4, #28]
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e422:	b9b8      	cbnz	r0, 800e454 <_Balloc+0x68>
 800e424:	2101      	movs	r1, #1
 800e426:	fa01 f605 	lsl.w	r6, r1, r5
 800e42a:	1d72      	adds	r2, r6, #5
 800e42c:	0092      	lsls	r2, r2, #2
 800e42e:	4620      	mov	r0, r4
 800e430:	f000 fda6 	bl	800ef80 <_calloc_r>
 800e434:	b160      	cbz	r0, 800e450 <_Balloc+0x64>
 800e436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e43a:	e00e      	b.n	800e45a <_Balloc+0x6e>
 800e43c:	2221      	movs	r2, #33	; 0x21
 800e43e:	2104      	movs	r1, #4
 800e440:	4620      	mov	r0, r4
 800e442:	f000 fd9d 	bl	800ef80 <_calloc_r>
 800e446:	69e3      	ldr	r3, [r4, #28]
 800e448:	60f0      	str	r0, [r6, #12]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1e4      	bne.n	800e41a <_Balloc+0x2e>
 800e450:	2000      	movs	r0, #0
 800e452:	bd70      	pop	{r4, r5, r6, pc}
 800e454:	6802      	ldr	r2, [r0, #0]
 800e456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e45a:	2300      	movs	r3, #0
 800e45c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e460:	e7f7      	b.n	800e452 <_Balloc+0x66>
 800e462:	bf00      	nop
 800e464:	0800fbdd 	.word	0x0800fbdd
 800e468:	0800fc5d 	.word	0x0800fc5d

0800e46c <_Bfree>:
 800e46c:	b570      	push	{r4, r5, r6, lr}
 800e46e:	69c6      	ldr	r6, [r0, #28]
 800e470:	4605      	mov	r5, r0
 800e472:	460c      	mov	r4, r1
 800e474:	b976      	cbnz	r6, 800e494 <_Bfree+0x28>
 800e476:	2010      	movs	r0, #16
 800e478:	f7ff ff04 	bl	800e284 <malloc>
 800e47c:	4602      	mov	r2, r0
 800e47e:	61e8      	str	r0, [r5, #28]
 800e480:	b920      	cbnz	r0, 800e48c <_Bfree+0x20>
 800e482:	4b09      	ldr	r3, [pc, #36]	; (800e4a8 <_Bfree+0x3c>)
 800e484:	4809      	ldr	r0, [pc, #36]	; (800e4ac <_Bfree+0x40>)
 800e486:	218f      	movs	r1, #143	; 0x8f
 800e488:	f000 fd5c 	bl	800ef44 <__assert_func>
 800e48c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e490:	6006      	str	r6, [r0, #0]
 800e492:	60c6      	str	r6, [r0, #12]
 800e494:	b13c      	cbz	r4, 800e4a6 <_Bfree+0x3a>
 800e496:	69eb      	ldr	r3, [r5, #28]
 800e498:	6862      	ldr	r2, [r4, #4]
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4a0:	6021      	str	r1, [r4, #0]
 800e4a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4a6:	bd70      	pop	{r4, r5, r6, pc}
 800e4a8:	0800fbdd 	.word	0x0800fbdd
 800e4ac:	0800fc5d 	.word	0x0800fc5d

0800e4b0 <__multadd>:
 800e4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b4:	690d      	ldr	r5, [r1, #16]
 800e4b6:	4607      	mov	r7, r0
 800e4b8:	460c      	mov	r4, r1
 800e4ba:	461e      	mov	r6, r3
 800e4bc:	f101 0c14 	add.w	ip, r1, #20
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	f8dc 3000 	ldr.w	r3, [ip]
 800e4c6:	b299      	uxth	r1, r3
 800e4c8:	fb02 6101 	mla	r1, r2, r1, r6
 800e4cc:	0c1e      	lsrs	r6, r3, #16
 800e4ce:	0c0b      	lsrs	r3, r1, #16
 800e4d0:	fb02 3306 	mla	r3, r2, r6, r3
 800e4d4:	b289      	uxth	r1, r1
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e4dc:	4285      	cmp	r5, r0
 800e4de:	f84c 1b04 	str.w	r1, [ip], #4
 800e4e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e4e6:	dcec      	bgt.n	800e4c2 <__multadd+0x12>
 800e4e8:	b30e      	cbz	r6, 800e52e <__multadd+0x7e>
 800e4ea:	68a3      	ldr	r3, [r4, #8]
 800e4ec:	42ab      	cmp	r3, r5
 800e4ee:	dc19      	bgt.n	800e524 <__multadd+0x74>
 800e4f0:	6861      	ldr	r1, [r4, #4]
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	3101      	adds	r1, #1
 800e4f6:	f7ff ff79 	bl	800e3ec <_Balloc>
 800e4fa:	4680      	mov	r8, r0
 800e4fc:	b928      	cbnz	r0, 800e50a <__multadd+0x5a>
 800e4fe:	4602      	mov	r2, r0
 800e500:	4b0c      	ldr	r3, [pc, #48]	; (800e534 <__multadd+0x84>)
 800e502:	480d      	ldr	r0, [pc, #52]	; (800e538 <__multadd+0x88>)
 800e504:	21ba      	movs	r1, #186	; 0xba
 800e506:	f000 fd1d 	bl	800ef44 <__assert_func>
 800e50a:	6922      	ldr	r2, [r4, #16]
 800e50c:	3202      	adds	r2, #2
 800e50e:	f104 010c 	add.w	r1, r4, #12
 800e512:	0092      	lsls	r2, r2, #2
 800e514:	300c      	adds	r0, #12
 800e516:	f7fe ffe1 	bl	800d4dc <memcpy>
 800e51a:	4621      	mov	r1, r4
 800e51c:	4638      	mov	r0, r7
 800e51e:	f7ff ffa5 	bl	800e46c <_Bfree>
 800e522:	4644      	mov	r4, r8
 800e524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e528:	3501      	adds	r5, #1
 800e52a:	615e      	str	r6, [r3, #20]
 800e52c:	6125      	str	r5, [r4, #16]
 800e52e:	4620      	mov	r0, r4
 800e530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e534:	0800fc4c 	.word	0x0800fc4c
 800e538:	0800fc5d 	.word	0x0800fc5d

0800e53c <__hi0bits>:
 800e53c:	0c03      	lsrs	r3, r0, #16
 800e53e:	041b      	lsls	r3, r3, #16
 800e540:	b9d3      	cbnz	r3, 800e578 <__hi0bits+0x3c>
 800e542:	0400      	lsls	r0, r0, #16
 800e544:	2310      	movs	r3, #16
 800e546:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e54a:	bf04      	itt	eq
 800e54c:	0200      	lsleq	r0, r0, #8
 800e54e:	3308      	addeq	r3, #8
 800e550:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e554:	bf04      	itt	eq
 800e556:	0100      	lsleq	r0, r0, #4
 800e558:	3304      	addeq	r3, #4
 800e55a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e55e:	bf04      	itt	eq
 800e560:	0080      	lsleq	r0, r0, #2
 800e562:	3302      	addeq	r3, #2
 800e564:	2800      	cmp	r0, #0
 800e566:	db05      	blt.n	800e574 <__hi0bits+0x38>
 800e568:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e56c:	f103 0301 	add.w	r3, r3, #1
 800e570:	bf08      	it	eq
 800e572:	2320      	moveq	r3, #32
 800e574:	4618      	mov	r0, r3
 800e576:	4770      	bx	lr
 800e578:	2300      	movs	r3, #0
 800e57a:	e7e4      	b.n	800e546 <__hi0bits+0xa>

0800e57c <__lo0bits>:
 800e57c:	6803      	ldr	r3, [r0, #0]
 800e57e:	f013 0207 	ands.w	r2, r3, #7
 800e582:	d00c      	beq.n	800e59e <__lo0bits+0x22>
 800e584:	07d9      	lsls	r1, r3, #31
 800e586:	d422      	bmi.n	800e5ce <__lo0bits+0x52>
 800e588:	079a      	lsls	r2, r3, #30
 800e58a:	bf49      	itett	mi
 800e58c:	085b      	lsrmi	r3, r3, #1
 800e58e:	089b      	lsrpl	r3, r3, #2
 800e590:	6003      	strmi	r3, [r0, #0]
 800e592:	2201      	movmi	r2, #1
 800e594:	bf5c      	itt	pl
 800e596:	6003      	strpl	r3, [r0, #0]
 800e598:	2202      	movpl	r2, #2
 800e59a:	4610      	mov	r0, r2
 800e59c:	4770      	bx	lr
 800e59e:	b299      	uxth	r1, r3
 800e5a0:	b909      	cbnz	r1, 800e5a6 <__lo0bits+0x2a>
 800e5a2:	0c1b      	lsrs	r3, r3, #16
 800e5a4:	2210      	movs	r2, #16
 800e5a6:	b2d9      	uxtb	r1, r3
 800e5a8:	b909      	cbnz	r1, 800e5ae <__lo0bits+0x32>
 800e5aa:	3208      	adds	r2, #8
 800e5ac:	0a1b      	lsrs	r3, r3, #8
 800e5ae:	0719      	lsls	r1, r3, #28
 800e5b0:	bf04      	itt	eq
 800e5b2:	091b      	lsreq	r3, r3, #4
 800e5b4:	3204      	addeq	r2, #4
 800e5b6:	0799      	lsls	r1, r3, #30
 800e5b8:	bf04      	itt	eq
 800e5ba:	089b      	lsreq	r3, r3, #2
 800e5bc:	3202      	addeq	r2, #2
 800e5be:	07d9      	lsls	r1, r3, #31
 800e5c0:	d403      	bmi.n	800e5ca <__lo0bits+0x4e>
 800e5c2:	085b      	lsrs	r3, r3, #1
 800e5c4:	f102 0201 	add.w	r2, r2, #1
 800e5c8:	d003      	beq.n	800e5d2 <__lo0bits+0x56>
 800e5ca:	6003      	str	r3, [r0, #0]
 800e5cc:	e7e5      	b.n	800e59a <__lo0bits+0x1e>
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	e7e3      	b.n	800e59a <__lo0bits+0x1e>
 800e5d2:	2220      	movs	r2, #32
 800e5d4:	e7e1      	b.n	800e59a <__lo0bits+0x1e>
	...

0800e5d8 <__i2b>:
 800e5d8:	b510      	push	{r4, lr}
 800e5da:	460c      	mov	r4, r1
 800e5dc:	2101      	movs	r1, #1
 800e5de:	f7ff ff05 	bl	800e3ec <_Balloc>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	b928      	cbnz	r0, 800e5f2 <__i2b+0x1a>
 800e5e6:	4b05      	ldr	r3, [pc, #20]	; (800e5fc <__i2b+0x24>)
 800e5e8:	4805      	ldr	r0, [pc, #20]	; (800e600 <__i2b+0x28>)
 800e5ea:	f240 1145 	movw	r1, #325	; 0x145
 800e5ee:	f000 fca9 	bl	800ef44 <__assert_func>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	6144      	str	r4, [r0, #20]
 800e5f6:	6103      	str	r3, [r0, #16]
 800e5f8:	bd10      	pop	{r4, pc}
 800e5fa:	bf00      	nop
 800e5fc:	0800fc4c 	.word	0x0800fc4c
 800e600:	0800fc5d 	.word	0x0800fc5d

0800e604 <__multiply>:
 800e604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e608:	4691      	mov	r9, r2
 800e60a:	690a      	ldr	r2, [r1, #16]
 800e60c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e610:	429a      	cmp	r2, r3
 800e612:	bfb8      	it	lt
 800e614:	460b      	movlt	r3, r1
 800e616:	460c      	mov	r4, r1
 800e618:	bfbc      	itt	lt
 800e61a:	464c      	movlt	r4, r9
 800e61c:	4699      	movlt	r9, r3
 800e61e:	6927      	ldr	r7, [r4, #16]
 800e620:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e624:	68a3      	ldr	r3, [r4, #8]
 800e626:	6861      	ldr	r1, [r4, #4]
 800e628:	eb07 060a 	add.w	r6, r7, sl
 800e62c:	42b3      	cmp	r3, r6
 800e62e:	b085      	sub	sp, #20
 800e630:	bfb8      	it	lt
 800e632:	3101      	addlt	r1, #1
 800e634:	f7ff feda 	bl	800e3ec <_Balloc>
 800e638:	b930      	cbnz	r0, 800e648 <__multiply+0x44>
 800e63a:	4602      	mov	r2, r0
 800e63c:	4b44      	ldr	r3, [pc, #272]	; (800e750 <__multiply+0x14c>)
 800e63e:	4845      	ldr	r0, [pc, #276]	; (800e754 <__multiply+0x150>)
 800e640:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e644:	f000 fc7e 	bl	800ef44 <__assert_func>
 800e648:	f100 0514 	add.w	r5, r0, #20
 800e64c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e650:	462b      	mov	r3, r5
 800e652:	2200      	movs	r2, #0
 800e654:	4543      	cmp	r3, r8
 800e656:	d321      	bcc.n	800e69c <__multiply+0x98>
 800e658:	f104 0314 	add.w	r3, r4, #20
 800e65c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e660:	f109 0314 	add.w	r3, r9, #20
 800e664:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e668:	9202      	str	r2, [sp, #8]
 800e66a:	1b3a      	subs	r2, r7, r4
 800e66c:	3a15      	subs	r2, #21
 800e66e:	f022 0203 	bic.w	r2, r2, #3
 800e672:	3204      	adds	r2, #4
 800e674:	f104 0115 	add.w	r1, r4, #21
 800e678:	428f      	cmp	r7, r1
 800e67a:	bf38      	it	cc
 800e67c:	2204      	movcc	r2, #4
 800e67e:	9201      	str	r2, [sp, #4]
 800e680:	9a02      	ldr	r2, [sp, #8]
 800e682:	9303      	str	r3, [sp, #12]
 800e684:	429a      	cmp	r2, r3
 800e686:	d80c      	bhi.n	800e6a2 <__multiply+0x9e>
 800e688:	2e00      	cmp	r6, #0
 800e68a:	dd03      	ble.n	800e694 <__multiply+0x90>
 800e68c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e690:	2b00      	cmp	r3, #0
 800e692:	d05b      	beq.n	800e74c <__multiply+0x148>
 800e694:	6106      	str	r6, [r0, #16]
 800e696:	b005      	add	sp, #20
 800e698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69c:	f843 2b04 	str.w	r2, [r3], #4
 800e6a0:	e7d8      	b.n	800e654 <__multiply+0x50>
 800e6a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6a6:	f1ba 0f00 	cmp.w	sl, #0
 800e6aa:	d024      	beq.n	800e6f6 <__multiply+0xf2>
 800e6ac:	f104 0e14 	add.w	lr, r4, #20
 800e6b0:	46a9      	mov	r9, r5
 800e6b2:	f04f 0c00 	mov.w	ip, #0
 800e6b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e6ba:	f8d9 1000 	ldr.w	r1, [r9]
 800e6be:	fa1f fb82 	uxth.w	fp, r2
 800e6c2:	b289      	uxth	r1, r1
 800e6c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e6c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e6cc:	f8d9 2000 	ldr.w	r2, [r9]
 800e6d0:	4461      	add	r1, ip
 800e6d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e6da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e6de:	b289      	uxth	r1, r1
 800e6e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6e4:	4577      	cmp	r7, lr
 800e6e6:	f849 1b04 	str.w	r1, [r9], #4
 800e6ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6ee:	d8e2      	bhi.n	800e6b6 <__multiply+0xb2>
 800e6f0:	9a01      	ldr	r2, [sp, #4]
 800e6f2:	f845 c002 	str.w	ip, [r5, r2]
 800e6f6:	9a03      	ldr	r2, [sp, #12]
 800e6f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	f1b9 0f00 	cmp.w	r9, #0
 800e702:	d021      	beq.n	800e748 <__multiply+0x144>
 800e704:	6829      	ldr	r1, [r5, #0]
 800e706:	f104 0c14 	add.w	ip, r4, #20
 800e70a:	46ae      	mov	lr, r5
 800e70c:	f04f 0a00 	mov.w	sl, #0
 800e710:	f8bc b000 	ldrh.w	fp, [ip]
 800e714:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e718:	fb09 220b 	mla	r2, r9, fp, r2
 800e71c:	4452      	add	r2, sl
 800e71e:	b289      	uxth	r1, r1
 800e720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e724:	f84e 1b04 	str.w	r1, [lr], #4
 800e728:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e72c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e730:	f8be 1000 	ldrh.w	r1, [lr]
 800e734:	fb09 110a 	mla	r1, r9, sl, r1
 800e738:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e73c:	4567      	cmp	r7, ip
 800e73e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e742:	d8e5      	bhi.n	800e710 <__multiply+0x10c>
 800e744:	9a01      	ldr	r2, [sp, #4]
 800e746:	50a9      	str	r1, [r5, r2]
 800e748:	3504      	adds	r5, #4
 800e74a:	e799      	b.n	800e680 <__multiply+0x7c>
 800e74c:	3e01      	subs	r6, #1
 800e74e:	e79b      	b.n	800e688 <__multiply+0x84>
 800e750:	0800fc4c 	.word	0x0800fc4c
 800e754:	0800fc5d 	.word	0x0800fc5d

0800e758 <__pow5mult>:
 800e758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e75c:	4615      	mov	r5, r2
 800e75e:	f012 0203 	ands.w	r2, r2, #3
 800e762:	4606      	mov	r6, r0
 800e764:	460f      	mov	r7, r1
 800e766:	d007      	beq.n	800e778 <__pow5mult+0x20>
 800e768:	4c25      	ldr	r4, [pc, #148]	; (800e800 <__pow5mult+0xa8>)
 800e76a:	3a01      	subs	r2, #1
 800e76c:	2300      	movs	r3, #0
 800e76e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e772:	f7ff fe9d 	bl	800e4b0 <__multadd>
 800e776:	4607      	mov	r7, r0
 800e778:	10ad      	asrs	r5, r5, #2
 800e77a:	d03d      	beq.n	800e7f8 <__pow5mult+0xa0>
 800e77c:	69f4      	ldr	r4, [r6, #28]
 800e77e:	b97c      	cbnz	r4, 800e7a0 <__pow5mult+0x48>
 800e780:	2010      	movs	r0, #16
 800e782:	f7ff fd7f 	bl	800e284 <malloc>
 800e786:	4602      	mov	r2, r0
 800e788:	61f0      	str	r0, [r6, #28]
 800e78a:	b928      	cbnz	r0, 800e798 <__pow5mult+0x40>
 800e78c:	4b1d      	ldr	r3, [pc, #116]	; (800e804 <__pow5mult+0xac>)
 800e78e:	481e      	ldr	r0, [pc, #120]	; (800e808 <__pow5mult+0xb0>)
 800e790:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e794:	f000 fbd6 	bl	800ef44 <__assert_func>
 800e798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e79c:	6004      	str	r4, [r0, #0]
 800e79e:	60c4      	str	r4, [r0, #12]
 800e7a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e7a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7a8:	b94c      	cbnz	r4, 800e7be <__pow5mult+0x66>
 800e7aa:	f240 2171 	movw	r1, #625	; 0x271
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f7ff ff12 	bl	800e5d8 <__i2b>
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	6003      	str	r3, [r0, #0]
 800e7be:	f04f 0900 	mov.w	r9, #0
 800e7c2:	07eb      	lsls	r3, r5, #31
 800e7c4:	d50a      	bpl.n	800e7dc <__pow5mult+0x84>
 800e7c6:	4639      	mov	r1, r7
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	f7ff ff1a 	bl	800e604 <__multiply>
 800e7d0:	4639      	mov	r1, r7
 800e7d2:	4680      	mov	r8, r0
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f7ff fe49 	bl	800e46c <_Bfree>
 800e7da:	4647      	mov	r7, r8
 800e7dc:	106d      	asrs	r5, r5, #1
 800e7de:	d00b      	beq.n	800e7f8 <__pow5mult+0xa0>
 800e7e0:	6820      	ldr	r0, [r4, #0]
 800e7e2:	b938      	cbnz	r0, 800e7f4 <__pow5mult+0x9c>
 800e7e4:	4622      	mov	r2, r4
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	f7ff ff0b 	bl	800e604 <__multiply>
 800e7ee:	6020      	str	r0, [r4, #0]
 800e7f0:	f8c0 9000 	str.w	r9, [r0]
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	e7e4      	b.n	800e7c2 <__pow5mult+0x6a>
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7fe:	bf00      	nop
 800e800:	0800fda8 	.word	0x0800fda8
 800e804:	0800fbdd 	.word	0x0800fbdd
 800e808:	0800fc5d 	.word	0x0800fc5d

0800e80c <__lshift>:
 800e80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e810:	460c      	mov	r4, r1
 800e812:	6849      	ldr	r1, [r1, #4]
 800e814:	6923      	ldr	r3, [r4, #16]
 800e816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e81a:	68a3      	ldr	r3, [r4, #8]
 800e81c:	4607      	mov	r7, r0
 800e81e:	4691      	mov	r9, r2
 800e820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e824:	f108 0601 	add.w	r6, r8, #1
 800e828:	42b3      	cmp	r3, r6
 800e82a:	db0b      	blt.n	800e844 <__lshift+0x38>
 800e82c:	4638      	mov	r0, r7
 800e82e:	f7ff fddd 	bl	800e3ec <_Balloc>
 800e832:	4605      	mov	r5, r0
 800e834:	b948      	cbnz	r0, 800e84a <__lshift+0x3e>
 800e836:	4602      	mov	r2, r0
 800e838:	4b28      	ldr	r3, [pc, #160]	; (800e8dc <__lshift+0xd0>)
 800e83a:	4829      	ldr	r0, [pc, #164]	; (800e8e0 <__lshift+0xd4>)
 800e83c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e840:	f000 fb80 	bl	800ef44 <__assert_func>
 800e844:	3101      	adds	r1, #1
 800e846:	005b      	lsls	r3, r3, #1
 800e848:	e7ee      	b.n	800e828 <__lshift+0x1c>
 800e84a:	2300      	movs	r3, #0
 800e84c:	f100 0114 	add.w	r1, r0, #20
 800e850:	f100 0210 	add.w	r2, r0, #16
 800e854:	4618      	mov	r0, r3
 800e856:	4553      	cmp	r3, sl
 800e858:	db33      	blt.n	800e8c2 <__lshift+0xb6>
 800e85a:	6920      	ldr	r0, [r4, #16]
 800e85c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e860:	f104 0314 	add.w	r3, r4, #20
 800e864:	f019 091f 	ands.w	r9, r9, #31
 800e868:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e86c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e870:	d02b      	beq.n	800e8ca <__lshift+0xbe>
 800e872:	f1c9 0e20 	rsb	lr, r9, #32
 800e876:	468a      	mov	sl, r1
 800e878:	2200      	movs	r2, #0
 800e87a:	6818      	ldr	r0, [r3, #0]
 800e87c:	fa00 f009 	lsl.w	r0, r0, r9
 800e880:	4310      	orrs	r0, r2
 800e882:	f84a 0b04 	str.w	r0, [sl], #4
 800e886:	f853 2b04 	ldr.w	r2, [r3], #4
 800e88a:	459c      	cmp	ip, r3
 800e88c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e890:	d8f3      	bhi.n	800e87a <__lshift+0x6e>
 800e892:	ebac 0304 	sub.w	r3, ip, r4
 800e896:	3b15      	subs	r3, #21
 800e898:	f023 0303 	bic.w	r3, r3, #3
 800e89c:	3304      	adds	r3, #4
 800e89e:	f104 0015 	add.w	r0, r4, #21
 800e8a2:	4584      	cmp	ip, r0
 800e8a4:	bf38      	it	cc
 800e8a6:	2304      	movcc	r3, #4
 800e8a8:	50ca      	str	r2, [r1, r3]
 800e8aa:	b10a      	cbz	r2, 800e8b0 <__lshift+0xa4>
 800e8ac:	f108 0602 	add.w	r6, r8, #2
 800e8b0:	3e01      	subs	r6, #1
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	612e      	str	r6, [r5, #16]
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	f7ff fdd8 	bl	800e46c <_Bfree>
 800e8bc:	4628      	mov	r0, r5
 800e8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	e7c5      	b.n	800e856 <__lshift+0x4a>
 800e8ca:	3904      	subs	r1, #4
 800e8cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8d4:	459c      	cmp	ip, r3
 800e8d6:	d8f9      	bhi.n	800e8cc <__lshift+0xc0>
 800e8d8:	e7ea      	b.n	800e8b0 <__lshift+0xa4>
 800e8da:	bf00      	nop
 800e8dc:	0800fc4c 	.word	0x0800fc4c
 800e8e0:	0800fc5d 	.word	0x0800fc5d

0800e8e4 <__mcmp>:
 800e8e4:	b530      	push	{r4, r5, lr}
 800e8e6:	6902      	ldr	r2, [r0, #16]
 800e8e8:	690c      	ldr	r4, [r1, #16]
 800e8ea:	1b12      	subs	r2, r2, r4
 800e8ec:	d10e      	bne.n	800e90c <__mcmp+0x28>
 800e8ee:	f100 0314 	add.w	r3, r0, #20
 800e8f2:	3114      	adds	r1, #20
 800e8f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e8f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e8fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e900:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e904:	42a5      	cmp	r5, r4
 800e906:	d003      	beq.n	800e910 <__mcmp+0x2c>
 800e908:	d305      	bcc.n	800e916 <__mcmp+0x32>
 800e90a:	2201      	movs	r2, #1
 800e90c:	4610      	mov	r0, r2
 800e90e:	bd30      	pop	{r4, r5, pc}
 800e910:	4283      	cmp	r3, r0
 800e912:	d3f3      	bcc.n	800e8fc <__mcmp+0x18>
 800e914:	e7fa      	b.n	800e90c <__mcmp+0x28>
 800e916:	f04f 32ff 	mov.w	r2, #4294967295
 800e91a:	e7f7      	b.n	800e90c <__mcmp+0x28>

0800e91c <__mdiff>:
 800e91c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	460c      	mov	r4, r1
 800e922:	4606      	mov	r6, r0
 800e924:	4611      	mov	r1, r2
 800e926:	4620      	mov	r0, r4
 800e928:	4690      	mov	r8, r2
 800e92a:	f7ff ffdb 	bl	800e8e4 <__mcmp>
 800e92e:	1e05      	subs	r5, r0, #0
 800e930:	d110      	bne.n	800e954 <__mdiff+0x38>
 800e932:	4629      	mov	r1, r5
 800e934:	4630      	mov	r0, r6
 800e936:	f7ff fd59 	bl	800e3ec <_Balloc>
 800e93a:	b930      	cbnz	r0, 800e94a <__mdiff+0x2e>
 800e93c:	4b3a      	ldr	r3, [pc, #232]	; (800ea28 <__mdiff+0x10c>)
 800e93e:	4602      	mov	r2, r0
 800e940:	f240 2137 	movw	r1, #567	; 0x237
 800e944:	4839      	ldr	r0, [pc, #228]	; (800ea2c <__mdiff+0x110>)
 800e946:	f000 fafd 	bl	800ef44 <__assert_func>
 800e94a:	2301      	movs	r3, #1
 800e94c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e954:	bfa4      	itt	ge
 800e956:	4643      	movge	r3, r8
 800e958:	46a0      	movge	r8, r4
 800e95a:	4630      	mov	r0, r6
 800e95c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e960:	bfa6      	itte	ge
 800e962:	461c      	movge	r4, r3
 800e964:	2500      	movge	r5, #0
 800e966:	2501      	movlt	r5, #1
 800e968:	f7ff fd40 	bl	800e3ec <_Balloc>
 800e96c:	b920      	cbnz	r0, 800e978 <__mdiff+0x5c>
 800e96e:	4b2e      	ldr	r3, [pc, #184]	; (800ea28 <__mdiff+0x10c>)
 800e970:	4602      	mov	r2, r0
 800e972:	f240 2145 	movw	r1, #581	; 0x245
 800e976:	e7e5      	b.n	800e944 <__mdiff+0x28>
 800e978:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e97c:	6926      	ldr	r6, [r4, #16]
 800e97e:	60c5      	str	r5, [r0, #12]
 800e980:	f104 0914 	add.w	r9, r4, #20
 800e984:	f108 0514 	add.w	r5, r8, #20
 800e988:	f100 0e14 	add.w	lr, r0, #20
 800e98c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e990:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e994:	f108 0210 	add.w	r2, r8, #16
 800e998:	46f2      	mov	sl, lr
 800e99a:	2100      	movs	r1, #0
 800e99c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9a4:	fa11 f88b 	uxtah	r8, r1, fp
 800e9a8:	b299      	uxth	r1, r3
 800e9aa:	0c1b      	lsrs	r3, r3, #16
 800e9ac:	eba8 0801 	sub.w	r8, r8, r1
 800e9b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e9b8:	fa1f f888 	uxth.w	r8, r8
 800e9bc:	1419      	asrs	r1, r3, #16
 800e9be:	454e      	cmp	r6, r9
 800e9c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e9c4:	f84a 3b04 	str.w	r3, [sl], #4
 800e9c8:	d8e8      	bhi.n	800e99c <__mdiff+0x80>
 800e9ca:	1b33      	subs	r3, r6, r4
 800e9cc:	3b15      	subs	r3, #21
 800e9ce:	f023 0303 	bic.w	r3, r3, #3
 800e9d2:	3304      	adds	r3, #4
 800e9d4:	3415      	adds	r4, #21
 800e9d6:	42a6      	cmp	r6, r4
 800e9d8:	bf38      	it	cc
 800e9da:	2304      	movcc	r3, #4
 800e9dc:	441d      	add	r5, r3
 800e9de:	4473      	add	r3, lr
 800e9e0:	469e      	mov	lr, r3
 800e9e2:	462e      	mov	r6, r5
 800e9e4:	4566      	cmp	r6, ip
 800e9e6:	d30e      	bcc.n	800ea06 <__mdiff+0xea>
 800e9e8:	f10c 0203 	add.w	r2, ip, #3
 800e9ec:	1b52      	subs	r2, r2, r5
 800e9ee:	f022 0203 	bic.w	r2, r2, #3
 800e9f2:	3d03      	subs	r5, #3
 800e9f4:	45ac      	cmp	ip, r5
 800e9f6:	bf38      	it	cc
 800e9f8:	2200      	movcc	r2, #0
 800e9fa:	4413      	add	r3, r2
 800e9fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ea00:	b17a      	cbz	r2, 800ea22 <__mdiff+0x106>
 800ea02:	6107      	str	r7, [r0, #16]
 800ea04:	e7a4      	b.n	800e950 <__mdiff+0x34>
 800ea06:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea0a:	fa11 f288 	uxtah	r2, r1, r8
 800ea0e:	1414      	asrs	r4, r2, #16
 800ea10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea14:	b292      	uxth	r2, r2
 800ea16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea1a:	f84e 2b04 	str.w	r2, [lr], #4
 800ea1e:	1421      	asrs	r1, r4, #16
 800ea20:	e7e0      	b.n	800e9e4 <__mdiff+0xc8>
 800ea22:	3f01      	subs	r7, #1
 800ea24:	e7ea      	b.n	800e9fc <__mdiff+0xe0>
 800ea26:	bf00      	nop
 800ea28:	0800fc4c 	.word	0x0800fc4c
 800ea2c:	0800fc5d 	.word	0x0800fc5d

0800ea30 <__d2b>:
 800ea30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea34:	460f      	mov	r7, r1
 800ea36:	2101      	movs	r1, #1
 800ea38:	ec59 8b10 	vmov	r8, r9, d0
 800ea3c:	4616      	mov	r6, r2
 800ea3e:	f7ff fcd5 	bl	800e3ec <_Balloc>
 800ea42:	4604      	mov	r4, r0
 800ea44:	b930      	cbnz	r0, 800ea54 <__d2b+0x24>
 800ea46:	4602      	mov	r2, r0
 800ea48:	4b24      	ldr	r3, [pc, #144]	; (800eadc <__d2b+0xac>)
 800ea4a:	4825      	ldr	r0, [pc, #148]	; (800eae0 <__d2b+0xb0>)
 800ea4c:	f240 310f 	movw	r1, #783	; 0x30f
 800ea50:	f000 fa78 	bl	800ef44 <__assert_func>
 800ea54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea5c:	bb2d      	cbnz	r5, 800eaaa <__d2b+0x7a>
 800ea5e:	9301      	str	r3, [sp, #4]
 800ea60:	f1b8 0300 	subs.w	r3, r8, #0
 800ea64:	d026      	beq.n	800eab4 <__d2b+0x84>
 800ea66:	4668      	mov	r0, sp
 800ea68:	9300      	str	r3, [sp, #0]
 800ea6a:	f7ff fd87 	bl	800e57c <__lo0bits>
 800ea6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea72:	b1e8      	cbz	r0, 800eab0 <__d2b+0x80>
 800ea74:	f1c0 0320 	rsb	r3, r0, #32
 800ea78:	fa02 f303 	lsl.w	r3, r2, r3
 800ea7c:	430b      	orrs	r3, r1
 800ea7e:	40c2      	lsrs	r2, r0
 800ea80:	6163      	str	r3, [r4, #20]
 800ea82:	9201      	str	r2, [sp, #4]
 800ea84:	9b01      	ldr	r3, [sp, #4]
 800ea86:	61a3      	str	r3, [r4, #24]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	bf14      	ite	ne
 800ea8c:	2202      	movne	r2, #2
 800ea8e:	2201      	moveq	r2, #1
 800ea90:	6122      	str	r2, [r4, #16]
 800ea92:	b1bd      	cbz	r5, 800eac4 <__d2b+0x94>
 800ea94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea98:	4405      	add	r5, r0
 800ea9a:	603d      	str	r5, [r7, #0]
 800ea9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eaa0:	6030      	str	r0, [r6, #0]
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	b003      	add	sp, #12
 800eaa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaae:	e7d6      	b.n	800ea5e <__d2b+0x2e>
 800eab0:	6161      	str	r1, [r4, #20]
 800eab2:	e7e7      	b.n	800ea84 <__d2b+0x54>
 800eab4:	a801      	add	r0, sp, #4
 800eab6:	f7ff fd61 	bl	800e57c <__lo0bits>
 800eaba:	9b01      	ldr	r3, [sp, #4]
 800eabc:	6163      	str	r3, [r4, #20]
 800eabe:	3020      	adds	r0, #32
 800eac0:	2201      	movs	r2, #1
 800eac2:	e7e5      	b.n	800ea90 <__d2b+0x60>
 800eac4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eac8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eacc:	6038      	str	r0, [r7, #0]
 800eace:	6918      	ldr	r0, [r3, #16]
 800ead0:	f7ff fd34 	bl	800e53c <__hi0bits>
 800ead4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ead8:	e7e2      	b.n	800eaa0 <__d2b+0x70>
 800eada:	bf00      	nop
 800eadc:	0800fc4c 	.word	0x0800fc4c
 800eae0:	0800fc5d 	.word	0x0800fc5d

0800eae4 <__ssputs_r>:
 800eae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae8:	688e      	ldr	r6, [r1, #8]
 800eaea:	461f      	mov	r7, r3
 800eaec:	42be      	cmp	r6, r7
 800eaee:	680b      	ldr	r3, [r1, #0]
 800eaf0:	4682      	mov	sl, r0
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	4690      	mov	r8, r2
 800eaf6:	d82c      	bhi.n	800eb52 <__ssputs_r+0x6e>
 800eaf8:	898a      	ldrh	r2, [r1, #12]
 800eafa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eafe:	d026      	beq.n	800eb4e <__ssputs_r+0x6a>
 800eb00:	6965      	ldr	r5, [r4, #20]
 800eb02:	6909      	ldr	r1, [r1, #16]
 800eb04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb08:	eba3 0901 	sub.w	r9, r3, r1
 800eb0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb10:	1c7b      	adds	r3, r7, #1
 800eb12:	444b      	add	r3, r9
 800eb14:	106d      	asrs	r5, r5, #1
 800eb16:	429d      	cmp	r5, r3
 800eb18:	bf38      	it	cc
 800eb1a:	461d      	movcc	r5, r3
 800eb1c:	0553      	lsls	r3, r2, #21
 800eb1e:	d527      	bpl.n	800eb70 <__ssputs_r+0x8c>
 800eb20:	4629      	mov	r1, r5
 800eb22:	f7ff fbd7 	bl	800e2d4 <_malloc_r>
 800eb26:	4606      	mov	r6, r0
 800eb28:	b360      	cbz	r0, 800eb84 <__ssputs_r+0xa0>
 800eb2a:	6921      	ldr	r1, [r4, #16]
 800eb2c:	464a      	mov	r2, r9
 800eb2e:	f7fe fcd5 	bl	800d4dc <memcpy>
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb3c:	81a3      	strh	r3, [r4, #12]
 800eb3e:	6126      	str	r6, [r4, #16]
 800eb40:	6165      	str	r5, [r4, #20]
 800eb42:	444e      	add	r6, r9
 800eb44:	eba5 0509 	sub.w	r5, r5, r9
 800eb48:	6026      	str	r6, [r4, #0]
 800eb4a:	60a5      	str	r5, [r4, #8]
 800eb4c:	463e      	mov	r6, r7
 800eb4e:	42be      	cmp	r6, r7
 800eb50:	d900      	bls.n	800eb54 <__ssputs_r+0x70>
 800eb52:	463e      	mov	r6, r7
 800eb54:	6820      	ldr	r0, [r4, #0]
 800eb56:	4632      	mov	r2, r6
 800eb58:	4641      	mov	r1, r8
 800eb5a:	f000 f9c9 	bl	800eef0 <memmove>
 800eb5e:	68a3      	ldr	r3, [r4, #8]
 800eb60:	1b9b      	subs	r3, r3, r6
 800eb62:	60a3      	str	r3, [r4, #8]
 800eb64:	6823      	ldr	r3, [r4, #0]
 800eb66:	4433      	add	r3, r6
 800eb68:	6023      	str	r3, [r4, #0]
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb70:	462a      	mov	r2, r5
 800eb72:	f000 fa2d 	bl	800efd0 <_realloc_r>
 800eb76:	4606      	mov	r6, r0
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d1e0      	bne.n	800eb3e <__ssputs_r+0x5a>
 800eb7c:	6921      	ldr	r1, [r4, #16]
 800eb7e:	4650      	mov	r0, sl
 800eb80:	f7ff fb34 	bl	800e1ec <_free_r>
 800eb84:	230c      	movs	r3, #12
 800eb86:	f8ca 3000 	str.w	r3, [sl]
 800eb8a:	89a3      	ldrh	r3, [r4, #12]
 800eb8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb90:	81a3      	strh	r3, [r4, #12]
 800eb92:	f04f 30ff 	mov.w	r0, #4294967295
 800eb96:	e7e9      	b.n	800eb6c <__ssputs_r+0x88>

0800eb98 <_svfiprintf_r>:
 800eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9c:	4698      	mov	r8, r3
 800eb9e:	898b      	ldrh	r3, [r1, #12]
 800eba0:	061b      	lsls	r3, r3, #24
 800eba2:	b09d      	sub	sp, #116	; 0x74
 800eba4:	4607      	mov	r7, r0
 800eba6:	460d      	mov	r5, r1
 800eba8:	4614      	mov	r4, r2
 800ebaa:	d50e      	bpl.n	800ebca <_svfiprintf_r+0x32>
 800ebac:	690b      	ldr	r3, [r1, #16]
 800ebae:	b963      	cbnz	r3, 800ebca <_svfiprintf_r+0x32>
 800ebb0:	2140      	movs	r1, #64	; 0x40
 800ebb2:	f7ff fb8f 	bl	800e2d4 <_malloc_r>
 800ebb6:	6028      	str	r0, [r5, #0]
 800ebb8:	6128      	str	r0, [r5, #16]
 800ebba:	b920      	cbnz	r0, 800ebc6 <_svfiprintf_r+0x2e>
 800ebbc:	230c      	movs	r3, #12
 800ebbe:	603b      	str	r3, [r7, #0]
 800ebc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc4:	e0d0      	b.n	800ed68 <_svfiprintf_r+0x1d0>
 800ebc6:	2340      	movs	r3, #64	; 0x40
 800ebc8:	616b      	str	r3, [r5, #20]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	9309      	str	r3, [sp, #36]	; 0x24
 800ebce:	2320      	movs	r3, #32
 800ebd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebd8:	2330      	movs	r3, #48	; 0x30
 800ebda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ed80 <_svfiprintf_r+0x1e8>
 800ebde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebe2:	f04f 0901 	mov.w	r9, #1
 800ebe6:	4623      	mov	r3, r4
 800ebe8:	469a      	mov	sl, r3
 800ebea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebee:	b10a      	cbz	r2, 800ebf4 <_svfiprintf_r+0x5c>
 800ebf0:	2a25      	cmp	r2, #37	; 0x25
 800ebf2:	d1f9      	bne.n	800ebe8 <_svfiprintf_r+0x50>
 800ebf4:	ebba 0b04 	subs.w	fp, sl, r4
 800ebf8:	d00b      	beq.n	800ec12 <_svfiprintf_r+0x7a>
 800ebfa:	465b      	mov	r3, fp
 800ebfc:	4622      	mov	r2, r4
 800ebfe:	4629      	mov	r1, r5
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7ff ff6f 	bl	800eae4 <__ssputs_r>
 800ec06:	3001      	adds	r0, #1
 800ec08:	f000 80a9 	beq.w	800ed5e <_svfiprintf_r+0x1c6>
 800ec0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec0e:	445a      	add	r2, fp
 800ec10:	9209      	str	r2, [sp, #36]	; 0x24
 800ec12:	f89a 3000 	ldrb.w	r3, [sl]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f000 80a1 	beq.w	800ed5e <_svfiprintf_r+0x1c6>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec26:	f10a 0a01 	add.w	sl, sl, #1
 800ec2a:	9304      	str	r3, [sp, #16]
 800ec2c:	9307      	str	r3, [sp, #28]
 800ec2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec32:	931a      	str	r3, [sp, #104]	; 0x68
 800ec34:	4654      	mov	r4, sl
 800ec36:	2205      	movs	r2, #5
 800ec38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec3c:	4850      	ldr	r0, [pc, #320]	; (800ed80 <_svfiprintf_r+0x1e8>)
 800ec3e:	f7f1 faf7 	bl	8000230 <memchr>
 800ec42:	9a04      	ldr	r2, [sp, #16]
 800ec44:	b9d8      	cbnz	r0, 800ec7e <_svfiprintf_r+0xe6>
 800ec46:	06d0      	lsls	r0, r2, #27
 800ec48:	bf44      	itt	mi
 800ec4a:	2320      	movmi	r3, #32
 800ec4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec50:	0711      	lsls	r1, r2, #28
 800ec52:	bf44      	itt	mi
 800ec54:	232b      	movmi	r3, #43	; 0x2b
 800ec56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ec60:	d015      	beq.n	800ec8e <_svfiprintf_r+0xf6>
 800ec62:	9a07      	ldr	r2, [sp, #28]
 800ec64:	4654      	mov	r4, sl
 800ec66:	2000      	movs	r0, #0
 800ec68:	f04f 0c0a 	mov.w	ip, #10
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec72:	3b30      	subs	r3, #48	; 0x30
 800ec74:	2b09      	cmp	r3, #9
 800ec76:	d94d      	bls.n	800ed14 <_svfiprintf_r+0x17c>
 800ec78:	b1b0      	cbz	r0, 800eca8 <_svfiprintf_r+0x110>
 800ec7a:	9207      	str	r2, [sp, #28]
 800ec7c:	e014      	b.n	800eca8 <_svfiprintf_r+0x110>
 800ec7e:	eba0 0308 	sub.w	r3, r0, r8
 800ec82:	fa09 f303 	lsl.w	r3, r9, r3
 800ec86:	4313      	orrs	r3, r2
 800ec88:	9304      	str	r3, [sp, #16]
 800ec8a:	46a2      	mov	sl, r4
 800ec8c:	e7d2      	b.n	800ec34 <_svfiprintf_r+0x9c>
 800ec8e:	9b03      	ldr	r3, [sp, #12]
 800ec90:	1d19      	adds	r1, r3, #4
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	9103      	str	r1, [sp, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	bfbb      	ittet	lt
 800ec9a:	425b      	neglt	r3, r3
 800ec9c:	f042 0202 	orrlt.w	r2, r2, #2
 800eca0:	9307      	strge	r3, [sp, #28]
 800eca2:	9307      	strlt	r3, [sp, #28]
 800eca4:	bfb8      	it	lt
 800eca6:	9204      	strlt	r2, [sp, #16]
 800eca8:	7823      	ldrb	r3, [r4, #0]
 800ecaa:	2b2e      	cmp	r3, #46	; 0x2e
 800ecac:	d10c      	bne.n	800ecc8 <_svfiprintf_r+0x130>
 800ecae:	7863      	ldrb	r3, [r4, #1]
 800ecb0:	2b2a      	cmp	r3, #42	; 0x2a
 800ecb2:	d134      	bne.n	800ed1e <_svfiprintf_r+0x186>
 800ecb4:	9b03      	ldr	r3, [sp, #12]
 800ecb6:	1d1a      	adds	r2, r3, #4
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	9203      	str	r2, [sp, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	bfb8      	it	lt
 800ecc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecc4:	3402      	adds	r4, #2
 800ecc6:	9305      	str	r3, [sp, #20]
 800ecc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ed90 <_svfiprintf_r+0x1f8>
 800eccc:	7821      	ldrb	r1, [r4, #0]
 800ecce:	2203      	movs	r2, #3
 800ecd0:	4650      	mov	r0, sl
 800ecd2:	f7f1 faad 	bl	8000230 <memchr>
 800ecd6:	b138      	cbz	r0, 800ece8 <_svfiprintf_r+0x150>
 800ecd8:	9b04      	ldr	r3, [sp, #16]
 800ecda:	eba0 000a 	sub.w	r0, r0, sl
 800ecde:	2240      	movs	r2, #64	; 0x40
 800ece0:	4082      	lsls	r2, r0
 800ece2:	4313      	orrs	r3, r2
 800ece4:	3401      	adds	r4, #1
 800ece6:	9304      	str	r3, [sp, #16]
 800ece8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecec:	4825      	ldr	r0, [pc, #148]	; (800ed84 <_svfiprintf_r+0x1ec>)
 800ecee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecf2:	2206      	movs	r2, #6
 800ecf4:	f7f1 fa9c 	bl	8000230 <memchr>
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	d038      	beq.n	800ed6e <_svfiprintf_r+0x1d6>
 800ecfc:	4b22      	ldr	r3, [pc, #136]	; (800ed88 <_svfiprintf_r+0x1f0>)
 800ecfe:	bb1b      	cbnz	r3, 800ed48 <_svfiprintf_r+0x1b0>
 800ed00:	9b03      	ldr	r3, [sp, #12]
 800ed02:	3307      	adds	r3, #7
 800ed04:	f023 0307 	bic.w	r3, r3, #7
 800ed08:	3308      	adds	r3, #8
 800ed0a:	9303      	str	r3, [sp, #12]
 800ed0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed0e:	4433      	add	r3, r6
 800ed10:	9309      	str	r3, [sp, #36]	; 0x24
 800ed12:	e768      	b.n	800ebe6 <_svfiprintf_r+0x4e>
 800ed14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed18:	460c      	mov	r4, r1
 800ed1a:	2001      	movs	r0, #1
 800ed1c:	e7a6      	b.n	800ec6c <_svfiprintf_r+0xd4>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	3401      	adds	r4, #1
 800ed22:	9305      	str	r3, [sp, #20]
 800ed24:	4619      	mov	r1, r3
 800ed26:	f04f 0c0a 	mov.w	ip, #10
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed30:	3a30      	subs	r2, #48	; 0x30
 800ed32:	2a09      	cmp	r2, #9
 800ed34:	d903      	bls.n	800ed3e <_svfiprintf_r+0x1a6>
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d0c6      	beq.n	800ecc8 <_svfiprintf_r+0x130>
 800ed3a:	9105      	str	r1, [sp, #20]
 800ed3c:	e7c4      	b.n	800ecc8 <_svfiprintf_r+0x130>
 800ed3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed42:	4604      	mov	r4, r0
 800ed44:	2301      	movs	r3, #1
 800ed46:	e7f0      	b.n	800ed2a <_svfiprintf_r+0x192>
 800ed48:	ab03      	add	r3, sp, #12
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	4b0f      	ldr	r3, [pc, #60]	; (800ed8c <_svfiprintf_r+0x1f4>)
 800ed50:	a904      	add	r1, sp, #16
 800ed52:	4638      	mov	r0, r7
 800ed54:	f7fd fe02 	bl	800c95c <_printf_float>
 800ed58:	1c42      	adds	r2, r0, #1
 800ed5a:	4606      	mov	r6, r0
 800ed5c:	d1d6      	bne.n	800ed0c <_svfiprintf_r+0x174>
 800ed5e:	89ab      	ldrh	r3, [r5, #12]
 800ed60:	065b      	lsls	r3, r3, #25
 800ed62:	f53f af2d 	bmi.w	800ebc0 <_svfiprintf_r+0x28>
 800ed66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed68:	b01d      	add	sp, #116	; 0x74
 800ed6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed6e:	ab03      	add	r3, sp, #12
 800ed70:	9300      	str	r3, [sp, #0]
 800ed72:	462a      	mov	r2, r5
 800ed74:	4b05      	ldr	r3, [pc, #20]	; (800ed8c <_svfiprintf_r+0x1f4>)
 800ed76:	a904      	add	r1, sp, #16
 800ed78:	4638      	mov	r0, r7
 800ed7a:	f7fe f893 	bl	800cea4 <_printf_i>
 800ed7e:	e7eb      	b.n	800ed58 <_svfiprintf_r+0x1c0>
 800ed80:	0800fdb4 	.word	0x0800fdb4
 800ed84:	0800fdbe 	.word	0x0800fdbe
 800ed88:	0800c95d 	.word	0x0800c95d
 800ed8c:	0800eae5 	.word	0x0800eae5
 800ed90:	0800fdba 	.word	0x0800fdba

0800ed94 <__sflush_r>:
 800ed94:	898a      	ldrh	r2, [r1, #12]
 800ed96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed9a:	4605      	mov	r5, r0
 800ed9c:	0710      	lsls	r0, r2, #28
 800ed9e:	460c      	mov	r4, r1
 800eda0:	d458      	bmi.n	800ee54 <__sflush_r+0xc0>
 800eda2:	684b      	ldr	r3, [r1, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	dc05      	bgt.n	800edb4 <__sflush_r+0x20>
 800eda8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800edaa:	2b00      	cmp	r3, #0
 800edac:	dc02      	bgt.n	800edb4 <__sflush_r+0x20>
 800edae:	2000      	movs	r0, #0
 800edb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edb6:	2e00      	cmp	r6, #0
 800edb8:	d0f9      	beq.n	800edae <__sflush_r+0x1a>
 800edba:	2300      	movs	r3, #0
 800edbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800edc0:	682f      	ldr	r7, [r5, #0]
 800edc2:	6a21      	ldr	r1, [r4, #32]
 800edc4:	602b      	str	r3, [r5, #0]
 800edc6:	d032      	beq.n	800ee2e <__sflush_r+0x9a>
 800edc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800edca:	89a3      	ldrh	r3, [r4, #12]
 800edcc:	075a      	lsls	r2, r3, #29
 800edce:	d505      	bpl.n	800eddc <__sflush_r+0x48>
 800edd0:	6863      	ldr	r3, [r4, #4]
 800edd2:	1ac0      	subs	r0, r0, r3
 800edd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edd6:	b10b      	cbz	r3, 800eddc <__sflush_r+0x48>
 800edd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edda:	1ac0      	subs	r0, r0, r3
 800eddc:	2300      	movs	r3, #0
 800edde:	4602      	mov	r2, r0
 800ede0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ede2:	6a21      	ldr	r1, [r4, #32]
 800ede4:	4628      	mov	r0, r5
 800ede6:	47b0      	blx	r6
 800ede8:	1c43      	adds	r3, r0, #1
 800edea:	89a3      	ldrh	r3, [r4, #12]
 800edec:	d106      	bne.n	800edfc <__sflush_r+0x68>
 800edee:	6829      	ldr	r1, [r5, #0]
 800edf0:	291d      	cmp	r1, #29
 800edf2:	d82b      	bhi.n	800ee4c <__sflush_r+0xb8>
 800edf4:	4a29      	ldr	r2, [pc, #164]	; (800ee9c <__sflush_r+0x108>)
 800edf6:	410a      	asrs	r2, r1
 800edf8:	07d6      	lsls	r6, r2, #31
 800edfa:	d427      	bmi.n	800ee4c <__sflush_r+0xb8>
 800edfc:	2200      	movs	r2, #0
 800edfe:	6062      	str	r2, [r4, #4]
 800ee00:	04d9      	lsls	r1, r3, #19
 800ee02:	6922      	ldr	r2, [r4, #16]
 800ee04:	6022      	str	r2, [r4, #0]
 800ee06:	d504      	bpl.n	800ee12 <__sflush_r+0x7e>
 800ee08:	1c42      	adds	r2, r0, #1
 800ee0a:	d101      	bne.n	800ee10 <__sflush_r+0x7c>
 800ee0c:	682b      	ldr	r3, [r5, #0]
 800ee0e:	b903      	cbnz	r3, 800ee12 <__sflush_r+0x7e>
 800ee10:	6560      	str	r0, [r4, #84]	; 0x54
 800ee12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee14:	602f      	str	r7, [r5, #0]
 800ee16:	2900      	cmp	r1, #0
 800ee18:	d0c9      	beq.n	800edae <__sflush_r+0x1a>
 800ee1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee1e:	4299      	cmp	r1, r3
 800ee20:	d002      	beq.n	800ee28 <__sflush_r+0x94>
 800ee22:	4628      	mov	r0, r5
 800ee24:	f7ff f9e2 	bl	800e1ec <_free_r>
 800ee28:	2000      	movs	r0, #0
 800ee2a:	6360      	str	r0, [r4, #52]	; 0x34
 800ee2c:	e7c0      	b.n	800edb0 <__sflush_r+0x1c>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	4628      	mov	r0, r5
 800ee32:	47b0      	blx	r6
 800ee34:	1c41      	adds	r1, r0, #1
 800ee36:	d1c8      	bne.n	800edca <__sflush_r+0x36>
 800ee38:	682b      	ldr	r3, [r5, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d0c5      	beq.n	800edca <__sflush_r+0x36>
 800ee3e:	2b1d      	cmp	r3, #29
 800ee40:	d001      	beq.n	800ee46 <__sflush_r+0xb2>
 800ee42:	2b16      	cmp	r3, #22
 800ee44:	d101      	bne.n	800ee4a <__sflush_r+0xb6>
 800ee46:	602f      	str	r7, [r5, #0]
 800ee48:	e7b1      	b.n	800edae <__sflush_r+0x1a>
 800ee4a:	89a3      	ldrh	r3, [r4, #12]
 800ee4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee50:	81a3      	strh	r3, [r4, #12]
 800ee52:	e7ad      	b.n	800edb0 <__sflush_r+0x1c>
 800ee54:	690f      	ldr	r7, [r1, #16]
 800ee56:	2f00      	cmp	r7, #0
 800ee58:	d0a9      	beq.n	800edae <__sflush_r+0x1a>
 800ee5a:	0793      	lsls	r3, r2, #30
 800ee5c:	680e      	ldr	r6, [r1, #0]
 800ee5e:	bf08      	it	eq
 800ee60:	694b      	ldreq	r3, [r1, #20]
 800ee62:	600f      	str	r7, [r1, #0]
 800ee64:	bf18      	it	ne
 800ee66:	2300      	movne	r3, #0
 800ee68:	eba6 0807 	sub.w	r8, r6, r7
 800ee6c:	608b      	str	r3, [r1, #8]
 800ee6e:	f1b8 0f00 	cmp.w	r8, #0
 800ee72:	dd9c      	ble.n	800edae <__sflush_r+0x1a>
 800ee74:	6a21      	ldr	r1, [r4, #32]
 800ee76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee78:	4643      	mov	r3, r8
 800ee7a:	463a      	mov	r2, r7
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	47b0      	blx	r6
 800ee80:	2800      	cmp	r0, #0
 800ee82:	dc06      	bgt.n	800ee92 <__sflush_r+0xfe>
 800ee84:	89a3      	ldrh	r3, [r4, #12]
 800ee86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee8a:	81a3      	strh	r3, [r4, #12]
 800ee8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee90:	e78e      	b.n	800edb0 <__sflush_r+0x1c>
 800ee92:	4407      	add	r7, r0
 800ee94:	eba8 0800 	sub.w	r8, r8, r0
 800ee98:	e7e9      	b.n	800ee6e <__sflush_r+0xda>
 800ee9a:	bf00      	nop
 800ee9c:	dfbffffe 	.word	0xdfbffffe

0800eea0 <_fflush_r>:
 800eea0:	b538      	push	{r3, r4, r5, lr}
 800eea2:	690b      	ldr	r3, [r1, #16]
 800eea4:	4605      	mov	r5, r0
 800eea6:	460c      	mov	r4, r1
 800eea8:	b913      	cbnz	r3, 800eeb0 <_fflush_r+0x10>
 800eeaa:	2500      	movs	r5, #0
 800eeac:	4628      	mov	r0, r5
 800eeae:	bd38      	pop	{r3, r4, r5, pc}
 800eeb0:	b118      	cbz	r0, 800eeba <_fflush_r+0x1a>
 800eeb2:	6a03      	ldr	r3, [r0, #32]
 800eeb4:	b90b      	cbnz	r3, 800eeba <_fflush_r+0x1a>
 800eeb6:	f7fe f991 	bl	800d1dc <__sinit>
 800eeba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d0f3      	beq.n	800eeaa <_fflush_r+0xa>
 800eec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eec4:	07d0      	lsls	r0, r2, #31
 800eec6:	d404      	bmi.n	800eed2 <_fflush_r+0x32>
 800eec8:	0599      	lsls	r1, r3, #22
 800eeca:	d402      	bmi.n	800eed2 <_fflush_r+0x32>
 800eecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eece:	f7fe fb03 	bl	800d4d8 <__retarget_lock_acquire_recursive>
 800eed2:	4628      	mov	r0, r5
 800eed4:	4621      	mov	r1, r4
 800eed6:	f7ff ff5d 	bl	800ed94 <__sflush_r>
 800eeda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eedc:	07da      	lsls	r2, r3, #31
 800eede:	4605      	mov	r5, r0
 800eee0:	d4e4      	bmi.n	800eeac <_fflush_r+0xc>
 800eee2:	89a3      	ldrh	r3, [r4, #12]
 800eee4:	059b      	lsls	r3, r3, #22
 800eee6:	d4e1      	bmi.n	800eeac <_fflush_r+0xc>
 800eee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeea:	f7fe faf6 	bl	800d4da <__retarget_lock_release_recursive>
 800eeee:	e7dd      	b.n	800eeac <_fflush_r+0xc>

0800eef0 <memmove>:
 800eef0:	4288      	cmp	r0, r1
 800eef2:	b510      	push	{r4, lr}
 800eef4:	eb01 0402 	add.w	r4, r1, r2
 800eef8:	d902      	bls.n	800ef00 <memmove+0x10>
 800eefa:	4284      	cmp	r4, r0
 800eefc:	4623      	mov	r3, r4
 800eefe:	d807      	bhi.n	800ef10 <memmove+0x20>
 800ef00:	1e43      	subs	r3, r0, #1
 800ef02:	42a1      	cmp	r1, r4
 800ef04:	d008      	beq.n	800ef18 <memmove+0x28>
 800ef06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef0e:	e7f8      	b.n	800ef02 <memmove+0x12>
 800ef10:	4402      	add	r2, r0
 800ef12:	4601      	mov	r1, r0
 800ef14:	428a      	cmp	r2, r1
 800ef16:	d100      	bne.n	800ef1a <memmove+0x2a>
 800ef18:	bd10      	pop	{r4, pc}
 800ef1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef22:	e7f7      	b.n	800ef14 <memmove+0x24>

0800ef24 <_sbrk_r>:
 800ef24:	b538      	push	{r3, r4, r5, lr}
 800ef26:	4d06      	ldr	r5, [pc, #24]	; (800ef40 <_sbrk_r+0x1c>)
 800ef28:	2300      	movs	r3, #0
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	4608      	mov	r0, r1
 800ef2e:	602b      	str	r3, [r5, #0]
 800ef30:	f7f3 fcb0 	bl	8002894 <_sbrk>
 800ef34:	1c43      	adds	r3, r0, #1
 800ef36:	d102      	bne.n	800ef3e <_sbrk_r+0x1a>
 800ef38:	682b      	ldr	r3, [r5, #0]
 800ef3a:	b103      	cbz	r3, 800ef3e <_sbrk_r+0x1a>
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
 800ef40:	200094a0 	.word	0x200094a0

0800ef44 <__assert_func>:
 800ef44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef46:	4614      	mov	r4, r2
 800ef48:	461a      	mov	r2, r3
 800ef4a:	4b09      	ldr	r3, [pc, #36]	; (800ef70 <__assert_func+0x2c>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4605      	mov	r5, r0
 800ef50:	68d8      	ldr	r0, [r3, #12]
 800ef52:	b14c      	cbz	r4, 800ef68 <__assert_func+0x24>
 800ef54:	4b07      	ldr	r3, [pc, #28]	; (800ef74 <__assert_func+0x30>)
 800ef56:	9100      	str	r1, [sp, #0]
 800ef58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef5c:	4906      	ldr	r1, [pc, #24]	; (800ef78 <__assert_func+0x34>)
 800ef5e:	462b      	mov	r3, r5
 800ef60:	f000 f872 	bl	800f048 <fiprintf>
 800ef64:	f000 f882 	bl	800f06c <abort>
 800ef68:	4b04      	ldr	r3, [pc, #16]	; (800ef7c <__assert_func+0x38>)
 800ef6a:	461c      	mov	r4, r3
 800ef6c:	e7f3      	b.n	800ef56 <__assert_func+0x12>
 800ef6e:	bf00      	nop
 800ef70:	20000088 	.word	0x20000088
 800ef74:	0800fdcf 	.word	0x0800fdcf
 800ef78:	0800fddc 	.word	0x0800fddc
 800ef7c:	0800fe0a 	.word	0x0800fe0a

0800ef80 <_calloc_r>:
 800ef80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef82:	fba1 2402 	umull	r2, r4, r1, r2
 800ef86:	b94c      	cbnz	r4, 800ef9c <_calloc_r+0x1c>
 800ef88:	4611      	mov	r1, r2
 800ef8a:	9201      	str	r2, [sp, #4]
 800ef8c:	f7ff f9a2 	bl	800e2d4 <_malloc_r>
 800ef90:	9a01      	ldr	r2, [sp, #4]
 800ef92:	4605      	mov	r5, r0
 800ef94:	b930      	cbnz	r0, 800efa4 <_calloc_r+0x24>
 800ef96:	4628      	mov	r0, r5
 800ef98:	b003      	add	sp, #12
 800ef9a:	bd30      	pop	{r4, r5, pc}
 800ef9c:	220c      	movs	r2, #12
 800ef9e:	6002      	str	r2, [r0, #0]
 800efa0:	2500      	movs	r5, #0
 800efa2:	e7f8      	b.n	800ef96 <_calloc_r+0x16>
 800efa4:	4621      	mov	r1, r4
 800efa6:	f7fe f9b2 	bl	800d30e <memset>
 800efaa:	e7f4      	b.n	800ef96 <_calloc_r+0x16>

0800efac <__ascii_mbtowc>:
 800efac:	b082      	sub	sp, #8
 800efae:	b901      	cbnz	r1, 800efb2 <__ascii_mbtowc+0x6>
 800efb0:	a901      	add	r1, sp, #4
 800efb2:	b142      	cbz	r2, 800efc6 <__ascii_mbtowc+0x1a>
 800efb4:	b14b      	cbz	r3, 800efca <__ascii_mbtowc+0x1e>
 800efb6:	7813      	ldrb	r3, [r2, #0]
 800efb8:	600b      	str	r3, [r1, #0]
 800efba:	7812      	ldrb	r2, [r2, #0]
 800efbc:	1e10      	subs	r0, r2, #0
 800efbe:	bf18      	it	ne
 800efc0:	2001      	movne	r0, #1
 800efc2:	b002      	add	sp, #8
 800efc4:	4770      	bx	lr
 800efc6:	4610      	mov	r0, r2
 800efc8:	e7fb      	b.n	800efc2 <__ascii_mbtowc+0x16>
 800efca:	f06f 0001 	mvn.w	r0, #1
 800efce:	e7f8      	b.n	800efc2 <__ascii_mbtowc+0x16>

0800efd0 <_realloc_r>:
 800efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	4680      	mov	r8, r0
 800efd6:	4614      	mov	r4, r2
 800efd8:	460e      	mov	r6, r1
 800efda:	b921      	cbnz	r1, 800efe6 <_realloc_r+0x16>
 800efdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efe0:	4611      	mov	r1, r2
 800efe2:	f7ff b977 	b.w	800e2d4 <_malloc_r>
 800efe6:	b92a      	cbnz	r2, 800eff4 <_realloc_r+0x24>
 800efe8:	f7ff f900 	bl	800e1ec <_free_r>
 800efec:	4625      	mov	r5, r4
 800efee:	4628      	mov	r0, r5
 800eff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff4:	f000 f841 	bl	800f07a <_malloc_usable_size_r>
 800eff8:	4284      	cmp	r4, r0
 800effa:	4607      	mov	r7, r0
 800effc:	d802      	bhi.n	800f004 <_realloc_r+0x34>
 800effe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f002:	d812      	bhi.n	800f02a <_realloc_r+0x5a>
 800f004:	4621      	mov	r1, r4
 800f006:	4640      	mov	r0, r8
 800f008:	f7ff f964 	bl	800e2d4 <_malloc_r>
 800f00c:	4605      	mov	r5, r0
 800f00e:	2800      	cmp	r0, #0
 800f010:	d0ed      	beq.n	800efee <_realloc_r+0x1e>
 800f012:	42bc      	cmp	r4, r7
 800f014:	4622      	mov	r2, r4
 800f016:	4631      	mov	r1, r6
 800f018:	bf28      	it	cs
 800f01a:	463a      	movcs	r2, r7
 800f01c:	f7fe fa5e 	bl	800d4dc <memcpy>
 800f020:	4631      	mov	r1, r6
 800f022:	4640      	mov	r0, r8
 800f024:	f7ff f8e2 	bl	800e1ec <_free_r>
 800f028:	e7e1      	b.n	800efee <_realloc_r+0x1e>
 800f02a:	4635      	mov	r5, r6
 800f02c:	e7df      	b.n	800efee <_realloc_r+0x1e>

0800f02e <__ascii_wctomb>:
 800f02e:	b149      	cbz	r1, 800f044 <__ascii_wctomb+0x16>
 800f030:	2aff      	cmp	r2, #255	; 0xff
 800f032:	bf85      	ittet	hi
 800f034:	238a      	movhi	r3, #138	; 0x8a
 800f036:	6003      	strhi	r3, [r0, #0]
 800f038:	700a      	strbls	r2, [r1, #0]
 800f03a:	f04f 30ff 	movhi.w	r0, #4294967295
 800f03e:	bf98      	it	ls
 800f040:	2001      	movls	r0, #1
 800f042:	4770      	bx	lr
 800f044:	4608      	mov	r0, r1
 800f046:	4770      	bx	lr

0800f048 <fiprintf>:
 800f048:	b40e      	push	{r1, r2, r3}
 800f04a:	b503      	push	{r0, r1, lr}
 800f04c:	4601      	mov	r1, r0
 800f04e:	ab03      	add	r3, sp, #12
 800f050:	4805      	ldr	r0, [pc, #20]	; (800f068 <fiprintf+0x20>)
 800f052:	f853 2b04 	ldr.w	r2, [r3], #4
 800f056:	6800      	ldr	r0, [r0, #0]
 800f058:	9301      	str	r3, [sp, #4]
 800f05a:	f000 f83f 	bl	800f0dc <_vfiprintf_r>
 800f05e:	b002      	add	sp, #8
 800f060:	f85d eb04 	ldr.w	lr, [sp], #4
 800f064:	b003      	add	sp, #12
 800f066:	4770      	bx	lr
 800f068:	20000088 	.word	0x20000088

0800f06c <abort>:
 800f06c:	b508      	push	{r3, lr}
 800f06e:	2006      	movs	r0, #6
 800f070:	f000 fa0c 	bl	800f48c <raise>
 800f074:	2001      	movs	r0, #1
 800f076:	f7f3 fb95 	bl	80027a4 <_exit>

0800f07a <_malloc_usable_size_r>:
 800f07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f07e:	1f18      	subs	r0, r3, #4
 800f080:	2b00      	cmp	r3, #0
 800f082:	bfbc      	itt	lt
 800f084:	580b      	ldrlt	r3, [r1, r0]
 800f086:	18c0      	addlt	r0, r0, r3
 800f088:	4770      	bx	lr

0800f08a <__sfputc_r>:
 800f08a:	6893      	ldr	r3, [r2, #8]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	2b00      	cmp	r3, #0
 800f090:	b410      	push	{r4}
 800f092:	6093      	str	r3, [r2, #8]
 800f094:	da08      	bge.n	800f0a8 <__sfputc_r+0x1e>
 800f096:	6994      	ldr	r4, [r2, #24]
 800f098:	42a3      	cmp	r3, r4
 800f09a:	db01      	blt.n	800f0a0 <__sfputc_r+0x16>
 800f09c:	290a      	cmp	r1, #10
 800f09e:	d103      	bne.n	800f0a8 <__sfputc_r+0x1e>
 800f0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0a4:	f000 b934 	b.w	800f310 <__swbuf_r>
 800f0a8:	6813      	ldr	r3, [r2, #0]
 800f0aa:	1c58      	adds	r0, r3, #1
 800f0ac:	6010      	str	r0, [r2, #0]
 800f0ae:	7019      	strb	r1, [r3, #0]
 800f0b0:	4608      	mov	r0, r1
 800f0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <__sfputs_r>:
 800f0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	460f      	mov	r7, r1
 800f0be:	4614      	mov	r4, r2
 800f0c0:	18d5      	adds	r5, r2, r3
 800f0c2:	42ac      	cmp	r4, r5
 800f0c4:	d101      	bne.n	800f0ca <__sfputs_r+0x12>
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	e007      	b.n	800f0da <__sfputs_r+0x22>
 800f0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ce:	463a      	mov	r2, r7
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	f7ff ffda 	bl	800f08a <__sfputc_r>
 800f0d6:	1c43      	adds	r3, r0, #1
 800f0d8:	d1f3      	bne.n	800f0c2 <__sfputs_r+0xa>
 800f0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0dc <_vfiprintf_r>:
 800f0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e0:	460d      	mov	r5, r1
 800f0e2:	b09d      	sub	sp, #116	; 0x74
 800f0e4:	4614      	mov	r4, r2
 800f0e6:	4698      	mov	r8, r3
 800f0e8:	4606      	mov	r6, r0
 800f0ea:	b118      	cbz	r0, 800f0f4 <_vfiprintf_r+0x18>
 800f0ec:	6a03      	ldr	r3, [r0, #32]
 800f0ee:	b90b      	cbnz	r3, 800f0f4 <_vfiprintf_r+0x18>
 800f0f0:	f7fe f874 	bl	800d1dc <__sinit>
 800f0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0f6:	07d9      	lsls	r1, r3, #31
 800f0f8:	d405      	bmi.n	800f106 <_vfiprintf_r+0x2a>
 800f0fa:	89ab      	ldrh	r3, [r5, #12]
 800f0fc:	059a      	lsls	r2, r3, #22
 800f0fe:	d402      	bmi.n	800f106 <_vfiprintf_r+0x2a>
 800f100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f102:	f7fe f9e9 	bl	800d4d8 <__retarget_lock_acquire_recursive>
 800f106:	89ab      	ldrh	r3, [r5, #12]
 800f108:	071b      	lsls	r3, r3, #28
 800f10a:	d501      	bpl.n	800f110 <_vfiprintf_r+0x34>
 800f10c:	692b      	ldr	r3, [r5, #16]
 800f10e:	b99b      	cbnz	r3, 800f138 <_vfiprintf_r+0x5c>
 800f110:	4629      	mov	r1, r5
 800f112:	4630      	mov	r0, r6
 800f114:	f000 f93a 	bl	800f38c <__swsetup_r>
 800f118:	b170      	cbz	r0, 800f138 <_vfiprintf_r+0x5c>
 800f11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f11c:	07dc      	lsls	r4, r3, #31
 800f11e:	d504      	bpl.n	800f12a <_vfiprintf_r+0x4e>
 800f120:	f04f 30ff 	mov.w	r0, #4294967295
 800f124:	b01d      	add	sp, #116	; 0x74
 800f126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12a:	89ab      	ldrh	r3, [r5, #12]
 800f12c:	0598      	lsls	r0, r3, #22
 800f12e:	d4f7      	bmi.n	800f120 <_vfiprintf_r+0x44>
 800f130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f132:	f7fe f9d2 	bl	800d4da <__retarget_lock_release_recursive>
 800f136:	e7f3      	b.n	800f120 <_vfiprintf_r+0x44>
 800f138:	2300      	movs	r3, #0
 800f13a:	9309      	str	r3, [sp, #36]	; 0x24
 800f13c:	2320      	movs	r3, #32
 800f13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f142:	f8cd 800c 	str.w	r8, [sp, #12]
 800f146:	2330      	movs	r3, #48	; 0x30
 800f148:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f2fc <_vfiprintf_r+0x220>
 800f14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f150:	f04f 0901 	mov.w	r9, #1
 800f154:	4623      	mov	r3, r4
 800f156:	469a      	mov	sl, r3
 800f158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f15c:	b10a      	cbz	r2, 800f162 <_vfiprintf_r+0x86>
 800f15e:	2a25      	cmp	r2, #37	; 0x25
 800f160:	d1f9      	bne.n	800f156 <_vfiprintf_r+0x7a>
 800f162:	ebba 0b04 	subs.w	fp, sl, r4
 800f166:	d00b      	beq.n	800f180 <_vfiprintf_r+0xa4>
 800f168:	465b      	mov	r3, fp
 800f16a:	4622      	mov	r2, r4
 800f16c:	4629      	mov	r1, r5
 800f16e:	4630      	mov	r0, r6
 800f170:	f7ff ffa2 	bl	800f0b8 <__sfputs_r>
 800f174:	3001      	adds	r0, #1
 800f176:	f000 80a9 	beq.w	800f2cc <_vfiprintf_r+0x1f0>
 800f17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f17c:	445a      	add	r2, fp
 800f17e:	9209      	str	r2, [sp, #36]	; 0x24
 800f180:	f89a 3000 	ldrb.w	r3, [sl]
 800f184:	2b00      	cmp	r3, #0
 800f186:	f000 80a1 	beq.w	800f2cc <_vfiprintf_r+0x1f0>
 800f18a:	2300      	movs	r3, #0
 800f18c:	f04f 32ff 	mov.w	r2, #4294967295
 800f190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f194:	f10a 0a01 	add.w	sl, sl, #1
 800f198:	9304      	str	r3, [sp, #16]
 800f19a:	9307      	str	r3, [sp, #28]
 800f19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800f1a2:	4654      	mov	r4, sl
 800f1a4:	2205      	movs	r2, #5
 800f1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1aa:	4854      	ldr	r0, [pc, #336]	; (800f2fc <_vfiprintf_r+0x220>)
 800f1ac:	f7f1 f840 	bl	8000230 <memchr>
 800f1b0:	9a04      	ldr	r2, [sp, #16]
 800f1b2:	b9d8      	cbnz	r0, 800f1ec <_vfiprintf_r+0x110>
 800f1b4:	06d1      	lsls	r1, r2, #27
 800f1b6:	bf44      	itt	mi
 800f1b8:	2320      	movmi	r3, #32
 800f1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1be:	0713      	lsls	r3, r2, #28
 800f1c0:	bf44      	itt	mi
 800f1c2:	232b      	movmi	r3, #43	; 0x2b
 800f1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f1ce:	d015      	beq.n	800f1fc <_vfiprintf_r+0x120>
 800f1d0:	9a07      	ldr	r2, [sp, #28]
 800f1d2:	4654      	mov	r4, sl
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	f04f 0c0a 	mov.w	ip, #10
 800f1da:	4621      	mov	r1, r4
 800f1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1e0:	3b30      	subs	r3, #48	; 0x30
 800f1e2:	2b09      	cmp	r3, #9
 800f1e4:	d94d      	bls.n	800f282 <_vfiprintf_r+0x1a6>
 800f1e6:	b1b0      	cbz	r0, 800f216 <_vfiprintf_r+0x13a>
 800f1e8:	9207      	str	r2, [sp, #28]
 800f1ea:	e014      	b.n	800f216 <_vfiprintf_r+0x13a>
 800f1ec:	eba0 0308 	sub.w	r3, r0, r8
 800f1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	9304      	str	r3, [sp, #16]
 800f1f8:	46a2      	mov	sl, r4
 800f1fa:	e7d2      	b.n	800f1a2 <_vfiprintf_r+0xc6>
 800f1fc:	9b03      	ldr	r3, [sp, #12]
 800f1fe:	1d19      	adds	r1, r3, #4
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	9103      	str	r1, [sp, #12]
 800f204:	2b00      	cmp	r3, #0
 800f206:	bfbb      	ittet	lt
 800f208:	425b      	neglt	r3, r3
 800f20a:	f042 0202 	orrlt.w	r2, r2, #2
 800f20e:	9307      	strge	r3, [sp, #28]
 800f210:	9307      	strlt	r3, [sp, #28]
 800f212:	bfb8      	it	lt
 800f214:	9204      	strlt	r2, [sp, #16]
 800f216:	7823      	ldrb	r3, [r4, #0]
 800f218:	2b2e      	cmp	r3, #46	; 0x2e
 800f21a:	d10c      	bne.n	800f236 <_vfiprintf_r+0x15a>
 800f21c:	7863      	ldrb	r3, [r4, #1]
 800f21e:	2b2a      	cmp	r3, #42	; 0x2a
 800f220:	d134      	bne.n	800f28c <_vfiprintf_r+0x1b0>
 800f222:	9b03      	ldr	r3, [sp, #12]
 800f224:	1d1a      	adds	r2, r3, #4
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	9203      	str	r2, [sp, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	bfb8      	it	lt
 800f22e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f232:	3402      	adds	r4, #2
 800f234:	9305      	str	r3, [sp, #20]
 800f236:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f30c <_vfiprintf_r+0x230>
 800f23a:	7821      	ldrb	r1, [r4, #0]
 800f23c:	2203      	movs	r2, #3
 800f23e:	4650      	mov	r0, sl
 800f240:	f7f0 fff6 	bl	8000230 <memchr>
 800f244:	b138      	cbz	r0, 800f256 <_vfiprintf_r+0x17a>
 800f246:	9b04      	ldr	r3, [sp, #16]
 800f248:	eba0 000a 	sub.w	r0, r0, sl
 800f24c:	2240      	movs	r2, #64	; 0x40
 800f24e:	4082      	lsls	r2, r0
 800f250:	4313      	orrs	r3, r2
 800f252:	3401      	adds	r4, #1
 800f254:	9304      	str	r3, [sp, #16]
 800f256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f25a:	4829      	ldr	r0, [pc, #164]	; (800f300 <_vfiprintf_r+0x224>)
 800f25c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f260:	2206      	movs	r2, #6
 800f262:	f7f0 ffe5 	bl	8000230 <memchr>
 800f266:	2800      	cmp	r0, #0
 800f268:	d03f      	beq.n	800f2ea <_vfiprintf_r+0x20e>
 800f26a:	4b26      	ldr	r3, [pc, #152]	; (800f304 <_vfiprintf_r+0x228>)
 800f26c:	bb1b      	cbnz	r3, 800f2b6 <_vfiprintf_r+0x1da>
 800f26e:	9b03      	ldr	r3, [sp, #12]
 800f270:	3307      	adds	r3, #7
 800f272:	f023 0307 	bic.w	r3, r3, #7
 800f276:	3308      	adds	r3, #8
 800f278:	9303      	str	r3, [sp, #12]
 800f27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27c:	443b      	add	r3, r7
 800f27e:	9309      	str	r3, [sp, #36]	; 0x24
 800f280:	e768      	b.n	800f154 <_vfiprintf_r+0x78>
 800f282:	fb0c 3202 	mla	r2, ip, r2, r3
 800f286:	460c      	mov	r4, r1
 800f288:	2001      	movs	r0, #1
 800f28a:	e7a6      	b.n	800f1da <_vfiprintf_r+0xfe>
 800f28c:	2300      	movs	r3, #0
 800f28e:	3401      	adds	r4, #1
 800f290:	9305      	str	r3, [sp, #20]
 800f292:	4619      	mov	r1, r3
 800f294:	f04f 0c0a 	mov.w	ip, #10
 800f298:	4620      	mov	r0, r4
 800f29a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f29e:	3a30      	subs	r2, #48	; 0x30
 800f2a0:	2a09      	cmp	r2, #9
 800f2a2:	d903      	bls.n	800f2ac <_vfiprintf_r+0x1d0>
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d0c6      	beq.n	800f236 <_vfiprintf_r+0x15a>
 800f2a8:	9105      	str	r1, [sp, #20]
 800f2aa:	e7c4      	b.n	800f236 <_vfiprintf_r+0x15a>
 800f2ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e7f0      	b.n	800f298 <_vfiprintf_r+0x1bc>
 800f2b6:	ab03      	add	r3, sp, #12
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	4b12      	ldr	r3, [pc, #72]	; (800f308 <_vfiprintf_r+0x22c>)
 800f2be:	a904      	add	r1, sp, #16
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f7fd fb4b 	bl	800c95c <_printf_float>
 800f2c6:	4607      	mov	r7, r0
 800f2c8:	1c78      	adds	r0, r7, #1
 800f2ca:	d1d6      	bne.n	800f27a <_vfiprintf_r+0x19e>
 800f2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2ce:	07d9      	lsls	r1, r3, #31
 800f2d0:	d405      	bmi.n	800f2de <_vfiprintf_r+0x202>
 800f2d2:	89ab      	ldrh	r3, [r5, #12]
 800f2d4:	059a      	lsls	r2, r3, #22
 800f2d6:	d402      	bmi.n	800f2de <_vfiprintf_r+0x202>
 800f2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2da:	f7fe f8fe 	bl	800d4da <__retarget_lock_release_recursive>
 800f2de:	89ab      	ldrh	r3, [r5, #12]
 800f2e0:	065b      	lsls	r3, r3, #25
 800f2e2:	f53f af1d 	bmi.w	800f120 <_vfiprintf_r+0x44>
 800f2e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2e8:	e71c      	b.n	800f124 <_vfiprintf_r+0x48>
 800f2ea:	ab03      	add	r3, sp, #12
 800f2ec:	9300      	str	r3, [sp, #0]
 800f2ee:	462a      	mov	r2, r5
 800f2f0:	4b05      	ldr	r3, [pc, #20]	; (800f308 <_vfiprintf_r+0x22c>)
 800f2f2:	a904      	add	r1, sp, #16
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f7fd fdd5 	bl	800cea4 <_printf_i>
 800f2fa:	e7e4      	b.n	800f2c6 <_vfiprintf_r+0x1ea>
 800f2fc:	0800fdb4 	.word	0x0800fdb4
 800f300:	0800fdbe 	.word	0x0800fdbe
 800f304:	0800c95d 	.word	0x0800c95d
 800f308:	0800f0b9 	.word	0x0800f0b9
 800f30c:	0800fdba 	.word	0x0800fdba

0800f310 <__swbuf_r>:
 800f310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f312:	460e      	mov	r6, r1
 800f314:	4614      	mov	r4, r2
 800f316:	4605      	mov	r5, r0
 800f318:	b118      	cbz	r0, 800f322 <__swbuf_r+0x12>
 800f31a:	6a03      	ldr	r3, [r0, #32]
 800f31c:	b90b      	cbnz	r3, 800f322 <__swbuf_r+0x12>
 800f31e:	f7fd ff5d 	bl	800d1dc <__sinit>
 800f322:	69a3      	ldr	r3, [r4, #24]
 800f324:	60a3      	str	r3, [r4, #8]
 800f326:	89a3      	ldrh	r3, [r4, #12]
 800f328:	071a      	lsls	r2, r3, #28
 800f32a:	d525      	bpl.n	800f378 <__swbuf_r+0x68>
 800f32c:	6923      	ldr	r3, [r4, #16]
 800f32e:	b31b      	cbz	r3, 800f378 <__swbuf_r+0x68>
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	6922      	ldr	r2, [r4, #16]
 800f334:	1a98      	subs	r0, r3, r2
 800f336:	6963      	ldr	r3, [r4, #20]
 800f338:	b2f6      	uxtb	r6, r6
 800f33a:	4283      	cmp	r3, r0
 800f33c:	4637      	mov	r7, r6
 800f33e:	dc04      	bgt.n	800f34a <__swbuf_r+0x3a>
 800f340:	4621      	mov	r1, r4
 800f342:	4628      	mov	r0, r5
 800f344:	f7ff fdac 	bl	800eea0 <_fflush_r>
 800f348:	b9e0      	cbnz	r0, 800f384 <__swbuf_r+0x74>
 800f34a:	68a3      	ldr	r3, [r4, #8]
 800f34c:	3b01      	subs	r3, #1
 800f34e:	60a3      	str	r3, [r4, #8]
 800f350:	6823      	ldr	r3, [r4, #0]
 800f352:	1c5a      	adds	r2, r3, #1
 800f354:	6022      	str	r2, [r4, #0]
 800f356:	701e      	strb	r6, [r3, #0]
 800f358:	6962      	ldr	r2, [r4, #20]
 800f35a:	1c43      	adds	r3, r0, #1
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d004      	beq.n	800f36a <__swbuf_r+0x5a>
 800f360:	89a3      	ldrh	r3, [r4, #12]
 800f362:	07db      	lsls	r3, r3, #31
 800f364:	d506      	bpl.n	800f374 <__swbuf_r+0x64>
 800f366:	2e0a      	cmp	r6, #10
 800f368:	d104      	bne.n	800f374 <__swbuf_r+0x64>
 800f36a:	4621      	mov	r1, r4
 800f36c:	4628      	mov	r0, r5
 800f36e:	f7ff fd97 	bl	800eea0 <_fflush_r>
 800f372:	b938      	cbnz	r0, 800f384 <__swbuf_r+0x74>
 800f374:	4638      	mov	r0, r7
 800f376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f378:	4621      	mov	r1, r4
 800f37a:	4628      	mov	r0, r5
 800f37c:	f000 f806 	bl	800f38c <__swsetup_r>
 800f380:	2800      	cmp	r0, #0
 800f382:	d0d5      	beq.n	800f330 <__swbuf_r+0x20>
 800f384:	f04f 37ff 	mov.w	r7, #4294967295
 800f388:	e7f4      	b.n	800f374 <__swbuf_r+0x64>
	...

0800f38c <__swsetup_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4b2a      	ldr	r3, [pc, #168]	; (800f438 <__swsetup_r+0xac>)
 800f390:	4605      	mov	r5, r0
 800f392:	6818      	ldr	r0, [r3, #0]
 800f394:	460c      	mov	r4, r1
 800f396:	b118      	cbz	r0, 800f3a0 <__swsetup_r+0x14>
 800f398:	6a03      	ldr	r3, [r0, #32]
 800f39a:	b90b      	cbnz	r3, 800f3a0 <__swsetup_r+0x14>
 800f39c:	f7fd ff1e 	bl	800d1dc <__sinit>
 800f3a0:	89a3      	ldrh	r3, [r4, #12]
 800f3a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3a6:	0718      	lsls	r0, r3, #28
 800f3a8:	d422      	bmi.n	800f3f0 <__swsetup_r+0x64>
 800f3aa:	06d9      	lsls	r1, r3, #27
 800f3ac:	d407      	bmi.n	800f3be <__swsetup_r+0x32>
 800f3ae:	2309      	movs	r3, #9
 800f3b0:	602b      	str	r3, [r5, #0]
 800f3b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3b6:	81a3      	strh	r3, [r4, #12]
 800f3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3bc:	e034      	b.n	800f428 <__swsetup_r+0x9c>
 800f3be:	0758      	lsls	r0, r3, #29
 800f3c0:	d512      	bpl.n	800f3e8 <__swsetup_r+0x5c>
 800f3c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3c4:	b141      	cbz	r1, 800f3d8 <__swsetup_r+0x4c>
 800f3c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3ca:	4299      	cmp	r1, r3
 800f3cc:	d002      	beq.n	800f3d4 <__swsetup_r+0x48>
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f7fe ff0c 	bl	800e1ec <_free_r>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	6363      	str	r3, [r4, #52]	; 0x34
 800f3d8:	89a3      	ldrh	r3, [r4, #12]
 800f3da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3de:	81a3      	strh	r3, [r4, #12]
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	6063      	str	r3, [r4, #4]
 800f3e4:	6923      	ldr	r3, [r4, #16]
 800f3e6:	6023      	str	r3, [r4, #0]
 800f3e8:	89a3      	ldrh	r3, [r4, #12]
 800f3ea:	f043 0308 	orr.w	r3, r3, #8
 800f3ee:	81a3      	strh	r3, [r4, #12]
 800f3f0:	6923      	ldr	r3, [r4, #16]
 800f3f2:	b94b      	cbnz	r3, 800f408 <__swsetup_r+0x7c>
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3fe:	d003      	beq.n	800f408 <__swsetup_r+0x7c>
 800f400:	4621      	mov	r1, r4
 800f402:	4628      	mov	r0, r5
 800f404:	f000 f884 	bl	800f510 <__smakebuf_r>
 800f408:	89a0      	ldrh	r0, [r4, #12]
 800f40a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f40e:	f010 0301 	ands.w	r3, r0, #1
 800f412:	d00a      	beq.n	800f42a <__swsetup_r+0x9e>
 800f414:	2300      	movs	r3, #0
 800f416:	60a3      	str	r3, [r4, #8]
 800f418:	6963      	ldr	r3, [r4, #20]
 800f41a:	425b      	negs	r3, r3
 800f41c:	61a3      	str	r3, [r4, #24]
 800f41e:	6923      	ldr	r3, [r4, #16]
 800f420:	b943      	cbnz	r3, 800f434 <__swsetup_r+0xa8>
 800f422:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f426:	d1c4      	bne.n	800f3b2 <__swsetup_r+0x26>
 800f428:	bd38      	pop	{r3, r4, r5, pc}
 800f42a:	0781      	lsls	r1, r0, #30
 800f42c:	bf58      	it	pl
 800f42e:	6963      	ldrpl	r3, [r4, #20]
 800f430:	60a3      	str	r3, [r4, #8]
 800f432:	e7f4      	b.n	800f41e <__swsetup_r+0x92>
 800f434:	2000      	movs	r0, #0
 800f436:	e7f7      	b.n	800f428 <__swsetup_r+0x9c>
 800f438:	20000088 	.word	0x20000088

0800f43c <_raise_r>:
 800f43c:	291f      	cmp	r1, #31
 800f43e:	b538      	push	{r3, r4, r5, lr}
 800f440:	4604      	mov	r4, r0
 800f442:	460d      	mov	r5, r1
 800f444:	d904      	bls.n	800f450 <_raise_r+0x14>
 800f446:	2316      	movs	r3, #22
 800f448:	6003      	str	r3, [r0, #0]
 800f44a:	f04f 30ff 	mov.w	r0, #4294967295
 800f44e:	bd38      	pop	{r3, r4, r5, pc}
 800f450:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f452:	b112      	cbz	r2, 800f45a <_raise_r+0x1e>
 800f454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f458:	b94b      	cbnz	r3, 800f46e <_raise_r+0x32>
 800f45a:	4620      	mov	r0, r4
 800f45c:	f000 f830 	bl	800f4c0 <_getpid_r>
 800f460:	462a      	mov	r2, r5
 800f462:	4601      	mov	r1, r0
 800f464:	4620      	mov	r0, r4
 800f466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f46a:	f000 b817 	b.w	800f49c <_kill_r>
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d00a      	beq.n	800f488 <_raise_r+0x4c>
 800f472:	1c59      	adds	r1, r3, #1
 800f474:	d103      	bne.n	800f47e <_raise_r+0x42>
 800f476:	2316      	movs	r3, #22
 800f478:	6003      	str	r3, [r0, #0]
 800f47a:	2001      	movs	r0, #1
 800f47c:	e7e7      	b.n	800f44e <_raise_r+0x12>
 800f47e:	2400      	movs	r4, #0
 800f480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f484:	4628      	mov	r0, r5
 800f486:	4798      	blx	r3
 800f488:	2000      	movs	r0, #0
 800f48a:	e7e0      	b.n	800f44e <_raise_r+0x12>

0800f48c <raise>:
 800f48c:	4b02      	ldr	r3, [pc, #8]	; (800f498 <raise+0xc>)
 800f48e:	4601      	mov	r1, r0
 800f490:	6818      	ldr	r0, [r3, #0]
 800f492:	f7ff bfd3 	b.w	800f43c <_raise_r>
 800f496:	bf00      	nop
 800f498:	20000088 	.word	0x20000088

0800f49c <_kill_r>:
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	4d07      	ldr	r5, [pc, #28]	; (800f4bc <_kill_r+0x20>)
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	4608      	mov	r0, r1
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	602b      	str	r3, [r5, #0]
 800f4aa:	f7f3 f96b 	bl	8002784 <_kill>
 800f4ae:	1c43      	adds	r3, r0, #1
 800f4b0:	d102      	bne.n	800f4b8 <_kill_r+0x1c>
 800f4b2:	682b      	ldr	r3, [r5, #0]
 800f4b4:	b103      	cbz	r3, 800f4b8 <_kill_r+0x1c>
 800f4b6:	6023      	str	r3, [r4, #0]
 800f4b8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ba:	bf00      	nop
 800f4bc:	200094a0 	.word	0x200094a0

0800f4c0 <_getpid_r>:
 800f4c0:	f7f3 b958 	b.w	8002774 <_getpid>

0800f4c4 <__swhatbuf_r>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4cc:	2900      	cmp	r1, #0
 800f4ce:	b096      	sub	sp, #88	; 0x58
 800f4d0:	4615      	mov	r5, r2
 800f4d2:	461e      	mov	r6, r3
 800f4d4:	da0d      	bge.n	800f4f2 <__swhatbuf_r+0x2e>
 800f4d6:	89a3      	ldrh	r3, [r4, #12]
 800f4d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f4dc:	f04f 0100 	mov.w	r1, #0
 800f4e0:	bf0c      	ite	eq
 800f4e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f4e6:	2340      	movne	r3, #64	; 0x40
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	6031      	str	r1, [r6, #0]
 800f4ec:	602b      	str	r3, [r5, #0]
 800f4ee:	b016      	add	sp, #88	; 0x58
 800f4f0:	bd70      	pop	{r4, r5, r6, pc}
 800f4f2:	466a      	mov	r2, sp
 800f4f4:	f000 f848 	bl	800f588 <_fstat_r>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	dbec      	blt.n	800f4d6 <__swhatbuf_r+0x12>
 800f4fc:	9901      	ldr	r1, [sp, #4]
 800f4fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f502:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f506:	4259      	negs	r1, r3
 800f508:	4159      	adcs	r1, r3
 800f50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f50e:	e7eb      	b.n	800f4e8 <__swhatbuf_r+0x24>

0800f510 <__smakebuf_r>:
 800f510:	898b      	ldrh	r3, [r1, #12]
 800f512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f514:	079d      	lsls	r5, r3, #30
 800f516:	4606      	mov	r6, r0
 800f518:	460c      	mov	r4, r1
 800f51a:	d507      	bpl.n	800f52c <__smakebuf_r+0x1c>
 800f51c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f520:	6023      	str	r3, [r4, #0]
 800f522:	6123      	str	r3, [r4, #16]
 800f524:	2301      	movs	r3, #1
 800f526:	6163      	str	r3, [r4, #20]
 800f528:	b002      	add	sp, #8
 800f52a:	bd70      	pop	{r4, r5, r6, pc}
 800f52c:	ab01      	add	r3, sp, #4
 800f52e:	466a      	mov	r2, sp
 800f530:	f7ff ffc8 	bl	800f4c4 <__swhatbuf_r>
 800f534:	9900      	ldr	r1, [sp, #0]
 800f536:	4605      	mov	r5, r0
 800f538:	4630      	mov	r0, r6
 800f53a:	f7fe fecb 	bl	800e2d4 <_malloc_r>
 800f53e:	b948      	cbnz	r0, 800f554 <__smakebuf_r+0x44>
 800f540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f544:	059a      	lsls	r2, r3, #22
 800f546:	d4ef      	bmi.n	800f528 <__smakebuf_r+0x18>
 800f548:	f023 0303 	bic.w	r3, r3, #3
 800f54c:	f043 0302 	orr.w	r3, r3, #2
 800f550:	81a3      	strh	r3, [r4, #12]
 800f552:	e7e3      	b.n	800f51c <__smakebuf_r+0xc>
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	6020      	str	r0, [r4, #0]
 800f558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f55c:	81a3      	strh	r3, [r4, #12]
 800f55e:	9b00      	ldr	r3, [sp, #0]
 800f560:	6163      	str	r3, [r4, #20]
 800f562:	9b01      	ldr	r3, [sp, #4]
 800f564:	6120      	str	r0, [r4, #16]
 800f566:	b15b      	cbz	r3, 800f580 <__smakebuf_r+0x70>
 800f568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f56c:	4630      	mov	r0, r6
 800f56e:	f000 f81d 	bl	800f5ac <_isatty_r>
 800f572:	b128      	cbz	r0, 800f580 <__smakebuf_r+0x70>
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	f023 0303 	bic.w	r3, r3, #3
 800f57a:	f043 0301 	orr.w	r3, r3, #1
 800f57e:	81a3      	strh	r3, [r4, #12]
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	431d      	orrs	r5, r3
 800f584:	81a5      	strh	r5, [r4, #12]
 800f586:	e7cf      	b.n	800f528 <__smakebuf_r+0x18>

0800f588 <_fstat_r>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4d07      	ldr	r5, [pc, #28]	; (800f5a8 <_fstat_r+0x20>)
 800f58c:	2300      	movs	r3, #0
 800f58e:	4604      	mov	r4, r0
 800f590:	4608      	mov	r0, r1
 800f592:	4611      	mov	r1, r2
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	f7f3 f954 	bl	8002842 <_fstat>
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	d102      	bne.n	800f5a4 <_fstat_r+0x1c>
 800f59e:	682b      	ldr	r3, [r5, #0]
 800f5a0:	b103      	cbz	r3, 800f5a4 <_fstat_r+0x1c>
 800f5a2:	6023      	str	r3, [r4, #0]
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	bf00      	nop
 800f5a8:	200094a0 	.word	0x200094a0

0800f5ac <_isatty_r>:
 800f5ac:	b538      	push	{r3, r4, r5, lr}
 800f5ae:	4d06      	ldr	r5, [pc, #24]	; (800f5c8 <_isatty_r+0x1c>)
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	4608      	mov	r0, r1
 800f5b6:	602b      	str	r3, [r5, #0]
 800f5b8:	f7f3 f953 	bl	8002862 <_isatty>
 800f5bc:	1c43      	adds	r3, r0, #1
 800f5be:	d102      	bne.n	800f5c6 <_isatty_r+0x1a>
 800f5c0:	682b      	ldr	r3, [r5, #0]
 800f5c2:	b103      	cbz	r3, 800f5c6 <_isatty_r+0x1a>
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	bd38      	pop	{r3, r4, r5, pc}
 800f5c8:	200094a0 	.word	0x200094a0

0800f5cc <_init>:
 800f5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ce:	bf00      	nop
 800f5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5d2:	bc08      	pop	{r3}
 800f5d4:	469e      	mov	lr, r3
 800f5d6:	4770      	bx	lr

0800f5d8 <_fini>:
 800f5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5da:	bf00      	nop
 800f5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5de:	bc08      	pop	{r3}
 800f5e0:	469e      	mov	lr, r3
 800f5e2:	4770      	bx	lr
