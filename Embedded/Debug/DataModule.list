
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005acc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d14  08005d14  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d1c  08005d1c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008780  20000068  08005d8c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200087e8  08005d8c  000287e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b45  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d30  00000000  00000000  00037c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2a  00000000  00000000  0003ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fe7  00000000  00000000  0003dc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a062  00000000  00000000  00063c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e61c3  00000000  00000000  0007dc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052dc  00000000  00000000  00163e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0016910c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c84 	.word	0x08005c84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005c84 	.word	0x08005c84

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000512:	463b      	mov	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000520:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <MX_ADC1_Init+0xbc>)
 8000522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000526:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800052a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_ADC1_Init+0xb8>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000534:	2201      	movs	r2, #1
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_ADC1_Init+0xb8>)
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000540:	2200      	movs	r2, #0
 8000542:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800054c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000550:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <MX_ADC1_Init+0xb8>)
 800055e:	2202      	movs	r2, #2
 8000560:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000564:	2201      	movs	r2, #1
 8000566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_ADC1_Init+0xb8>)
 800056c:	2201      	movs	r2, #1
 800056e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000570:	4814      	ldr	r0, [pc, #80]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000572:	f000 fd45 	bl	8001000 <HAL_ADC_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800057c:	f000 fa2c 	bl	80009d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000580:	230f      	movs	r3, #15
 8000582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000584:	2301      	movs	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000588:	2306      	movs	r3, #6
 800058a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	4619      	mov	r1, r3
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <MX_ADC1_Init+0xb8>)
 8000592:	f000 fe93 	bl	80012bc <HAL_ADC_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800059c:	f000 fa1c 	bl	80009d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80005a0:	230e      	movs	r3, #14
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_ADC1_Init+0xb8>)
 80005ae:	f000 fe85 	bl	80012bc <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005b8:	f000 fa0e 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000084 	.word	0x20000084
 80005c8:	40012000 	.word	0x40012000

080005cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a2f      	ldr	r2, [pc, #188]	; (80006a8 <HAL_ADC_MspInit+0xdc>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d158      	bne.n	80006a0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <HAL_ADC_MspInit+0xe0>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f6:	4a2d      	ldr	r2, [pc, #180]	; (80006ac <HAL_ADC_MspInit+0xe0>)
 80005f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fc:	6453      	str	r3, [r2, #68]	; 0x44
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <HAL_ADC_MspInit+0xe0>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b27      	ldr	r3, [pc, #156]	; (80006ac <HAL_ADC_MspInit+0xe0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a26      	ldr	r2, [pc, #152]	; (80006ac <HAL_ADC_MspInit+0xe0>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b24      	ldr	r3, [pc, #144]	; (80006ac <HAL_ADC_MspInit+0xe0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000626:	2330      	movs	r3, #48	; 0x30
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	2303      	movs	r3, #3
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <HAL_ADC_MspInit+0xe4>)
 800063a:	f001 fd41 	bl	80020c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000640:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <HAL_ADC_MspInit+0xec>)
 8000642:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000664:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000674:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000678:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000686:	f001 f9ab 	bl	80019e0 <HAL_DMA_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000690:	f000 f9a2 	bl	80009d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
 800069a:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_ADC_MspInit+0xe8>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40012000 	.word	0x40012000
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020800 	.word	0x40020800
 80006b4:	200000cc 	.word	0x200000cc
 80006b8:	40026410 	.word	0x40026410

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_DMA_Init+0x3c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <MX_DMA_Init+0x3c>)
 80006cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_DMA_Init+0x3c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2105      	movs	r1, #5
 80006e2:	2038      	movs	r0, #56	; 0x38
 80006e4:	f001 f952 	bl	800198c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006e8:	2038      	movs	r0, #56	; 0x38
 80006ea:	f001 f96b 	bl	80019c4 <HAL_NVIC_EnableIRQ>

}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <vApplicationGetIdleTaskMemory+0x2c>)
 800070c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <vApplicationGetIdleTaskMemory+0x30>)
 8000712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	200041d4 	.word	0x200041d4
 800072c:	20004274 	.word	0x20004274

08000730 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000730:	b5b0      	push	{r4, r5, r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_FREERTOS_Init+0x58>)
 8000738:	f107 041c 	add.w	r4, r7, #28
 800073c:	461d      	mov	r5, r3
 800073e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000742:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f003 ff64 	bl	800461e <osThreadCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <MX_FREERTOS_Init+0x5c>)
 800075a:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, initSensorRead, osPriorityNormal, 0, 4096, sensorReadBuffer, &sensorReadControlBlock);
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_FREERTOS_Init+0x60>)
 800075e:	463c      	mov	r4, r7
 8000760:	461d      	mov	r5, r3
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 800076e:	463b      	mov	r3, r7
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 ff53 	bl	800461e <osThreadCreate>
 8000778:	4603      	mov	r3, r0
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <MX_FREERTOS_Init+0x64>)
 800077c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800077e:	bf00      	nop
 8000780:	3738      	adds	r7, #56	; 0x38
 8000782:	46bd      	mov	sp, r7
 8000784:	bdb0      	pop	{r4, r5, r7, pc}
 8000786:	bf00      	nop
 8000788:	08005ca8 	.word	0x08005ca8
 800078c:	2000012c 	.word	0x2000012c
 8000790:	08005cd0 	.word	0x08005cd0
 8000794:	20000130 	.word	0x20000130

08000798 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f003 ff88 	bl	80046b6 <osDelay>
 80007a6:	e7fb      	b.n	80007a0 <StartDefaultTask+0x8>

080007a8 <initSensorRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_initSensorRead */
void initSensorRead(void const * argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN initSensorRead */
	startAdcDma(&hadc1);
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <initSensorRead+0x1c>)
 80007b2:	f000 fad3 	bl	8000d5c <startAdcDma>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcControlData, 5);
	HAL_TIM_Base_Start(&htim2);*/
  /* Infinite loop */
  for(;;)
  {
	processData();
 80007b6:	f000 fa8b 	bl	8000cd0 <processData>
    osDelay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f003 ff7a 	bl	80046b6 <osDelay>
	processData();
 80007c2:	e7f8      	b.n	80007b6 <initSensorRead+0xe>
 80007c4:	20000084 	.word	0x20000084

080007c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <MX_GPIO_Init+0xd0>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <MX_GPIO_Init+0xd4>)
 8000854:	f001 fdc8 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_GPIO_Init+0xd8>)
 8000870:	f001 fc26 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000874:	2320      	movs	r3, #32
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0xd4>)
 800088c:	f001 fc18 	bl	80020c0 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020800 	.word	0x40020800

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fb68 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f810 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f7ff ff8a 	bl	80007c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b4:	f7ff ff02 	bl	80006bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008b8:	f000 fac4 	bl	8000e44 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008bc:	f7ff fe26 	bl	800050c <MX_ADC1_Init>
  MX_TIM2_Init();
 80008c0:	f000 f974 	bl	8000bac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80008c4:	f7ff ff34 	bl	8000730 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008c8:	f003 fea2 	bl	8004610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <main+0x28>
	...

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2234      	movs	r2, #52	; 0x34
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 f8f4 	bl	8005acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <SystemClock_Config+0xdc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <SystemClock_Config+0xdc>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <SystemClock_Config+0xdc>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <SystemClock_Config+0xe0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <SystemClock_Config+0xe0>)
 800091a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <SystemClock_Config+0xe0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2310      	movs	r3, #16
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000940:	2308      	movs	r3, #8
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000944:	23b4      	movs	r3, #180	; 0xb4
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000950:	2302      	movs	r3, #2
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4618      	mov	r0, r3
 800095a:	f002 f92b 	bl	8002bb4 <HAL_RCC_OscConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000964:	f000 f838 	bl	80009d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000968:	f001 fd58 	bl	800241c <HAL_PWREx_EnableOverDrive>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000972:	f000 f831 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000976:	230f      	movs	r3, #15
 8000978:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097a:	2302      	movs	r3, #2
 800097c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000982:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2105      	movs	r1, #5
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fd91 	bl	80024bc <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009a0:	f000 f81a 	bl	80009d8 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3750      	adds	r7, #80	; 0x50
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d101      	bne.n	80009ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009c6:	f000 fafb 	bl	8000fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40000400 	.word	0x40000400

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_MspInit+0x54>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <HAL_MspInit+0x54>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x54>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x54>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x54>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x54>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f000 ffaf 	bl	800198c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <HAL_InitTick+0xe4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <HAL_InitTick+0xe4>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_InitTick+0xe4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a68:	f107 0210 	add.w	r2, r7, #16
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fe3c 	bl	80026f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a82:	f001 fe0d 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8000a86:	6378      	str	r0, [r7, #52]	; 0x34
 8000a88:	e004      	b.n	8000a94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a8a:	f001 fe09 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <HAL_InitTick+0xe8>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	0c9b      	lsrs	r3, r3, #18
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <HAL_InitTick+0xec>)
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <HAL_InitTick+0xf0>)
 8000aa6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <HAL_InitTick+0xec>)
 8000aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aae:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_InitTick+0xec>)
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0xec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_InitTick+0xec>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_InitTick+0xec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000ac8:	4817      	ldr	r0, [pc, #92]	; (8000b28 <HAL_InitTick+0xec>)
 8000aca:	f002 fb11 	bl	80030f0 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d11b      	bne.n	8000b14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000adc:	4812      	ldr	r0, [pc, #72]	; (8000b28 <HAL_InitTick+0xec>)
 8000ade:	f002 fbbf 	bl	8003260 <HAL_TIM_Base_Start_IT>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d111      	bne.n	8000b14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000af0:	201d      	movs	r0, #29
 8000af2:	f000 ff67 	bl	80019c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d808      	bhi.n	8000b0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	201d      	movs	r0, #29
 8000b02:	f000 ff43 	bl	800198c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_InitTick+0xf4>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	e002      	b.n	8000b14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3738      	adds	r7, #56	; 0x38
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	20004474 	.word	0x20004474
 8000b2c:	40000400 	.word	0x40000400
 8000b30:	2000000c 	.word	0x2000000c

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM3_IRQHandler+0x10>)
 8000b66:	f002 fc44 	bl	80033f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20004474 	.word	0x20004474

08000b74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <DMA2_Stream0_IRQHandler+0x10>)
 8000b7a:	f001 f837 	bl	8001bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000cc 	.word	0x200000cc

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 450-1;
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000be6:	f240 12c1 	movw	r2, #449	; 0x1c1
 8000bea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000bf4:	22c7      	movs	r2, #199	; 0xc7
 8000bf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c04:	4821      	ldr	r0, [pc, #132]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000c06:	f002 fa73 	bl	80030f0 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c10:	f7ff fee2 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481a      	ldr	r0, [pc, #104]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000c22:	f002 fdb1 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c2c:	f7ff fed4 	bl	80009d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c30:	4816      	ldr	r0, [pc, #88]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000c32:	f002 fb85 	bl	8003340 <HAL_TIM_PWM_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c3c:	f7ff fecc 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c40:	2320      	movs	r3, #32
 8000c42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c48:	f107 0320 	add.w	r3, r7, #32
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000c50:	f003 f974 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c5a:	f7ff febd 	bl	80009d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2360      	movs	r3, #96	; 0x60
 8000c60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_TIM2_Init+0xe0>)
 8000c76:	f002 fcc5 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c80:	f7ff feaa 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3738      	adds	r7, #56	; 0x38
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200044bc 	.word	0x200044bc

08000c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca0:	d10d      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <processData>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void processData(void){
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
	if(DATA_BUFF_READY == dataReadyFlag){
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <processData+0x7c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d131      	bne.n	8000d44 <processData+0x74>
		for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n += 2){
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	e028      	b.n	8000d38 <processData+0x68>
			outRearBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n], REAR_SENSOR_TRAVEL);
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <processData+0x80>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	18d0      	adds	r0, r2, r3
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <processData+0x84>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0fd9      	lsrs	r1, r3, #31
 8000cf8:	440b      	add	r3, r1
 8000cfa:	105b      	asrs	r3, r3, #1
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	18d4      	adds	r4, r2, r3
 8000d00:	217d      	movs	r1, #125	; 0x7d
 8000d02:	f000 f841 	bl	8000d88 <convertAdcToTravel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	8023      	strh	r3, [r4, #0]
			outFrontBufPtr[n/2] = convertAdcToTravel(&inBufPtr[n + 1], FRONT_SENSOR_TRAVEL);
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <processData+0x80>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3301      	adds	r3, #1
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	18d0      	adds	r0, r2, r3
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <processData+0x88>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0fd9      	lsrs	r1, r3, #31
 8000d1e:	440b      	add	r3, r1
 8000d20:	105b      	asrs	r3, r3, #1
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	18d4      	adds	r4, r2, r3
 8000d26:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d2a:	f000 f82d 	bl	8000d88 <convertAdcToTravel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	8023      	strh	r3, [r4, #0]
		for (int n = 0; n < (BUFFER_SIZE/2) -1 ; n += 2){
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3302      	adds	r3, #2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b7e      	cmp	r3, #126	; 0x7e
 8000d3c:	d9d3      	bls.n	8000ce6 <processData+0x16>
		}
		//printAllBuffers(adcFrontDataRead, adcRearDataRead, BUFFER_SIZE/2);
		dataReadyFlag = DATA_BUFF_EMPTY;
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <processData+0x7c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
	}
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	20004908 	.word	0x20004908
 8000d50:	20004904 	.word	0x20004904
 8000d54:	20000004 	.word	0x20000004
 8000d58:	20000008 	.word	0x20000008

08000d5c <startAdcDma>:
void startAdcDma (ADC_HandleTypeDef *hadc){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adcDataWrite, BUFFER_SIZE);
 8000d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d68:	4905      	ldr	r1, [pc, #20]	; (8000d80 <startAdcDma+0x24>)
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f98c 	bl	8001088 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <startAdcDma+0x28>)
 8000d72:	f002 fa0d 	bl	8003190 <HAL_TIM_Base_Start>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20004504 	.word	0x20004504
 8000d84:	200044bc 	.word	0x200044bc

08000d88 <convertAdcToTravel>:
static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite, int16_t sensorTravel){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite*sensorTravel/ADC_RESOLUTION);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	0b1b      	lsrs	r3, r3, #12
 8000da6:	b21b      	sxth	r3, r3
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <HAL_ADC_ConvHalfCpltCallback>:
			printf(" %d",rearBuff[i]);
		}
		puts("\n");
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000dc0:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[0];
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000dc4:	4a09      	ldr	r2, [pc, #36]	; (8000dec <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000dc6:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[0];
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000dcc:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]

}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20004904 	.word	0x20004904
 8000de4:	20004504 	.word	0x20004504
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20004704 	.word	0x20004704
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20004804 	.word	0x20004804
 8000df8:	20004908 	.word	0x20004908

08000dfc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[BUFFER_SIZE/2];
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x30>)
 8000e08:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[BUFFER_SIZE/4];
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x34>)
 8000e0c:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x38>)
 8000e0e:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[BUFFER_SIZE/4];
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x40>)
 8000e14:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x44>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	20004904 	.word	0x20004904
 8000e2c:	20004604 	.word	0x20004604
 8000e30:	20000004 	.word	0x20000004
 8000e34:	20004784 	.word	0x20004784
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20004884 	.word	0x20004884
 8000e40:	20004908 	.word	0x20004908

08000e44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <MX_USART2_UART_Init+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	f003 f8ee 	bl	800405c <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e86:	f7ff fda7 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000490c 	.word	0x2000490c
 8000e94:	40004400 	.word	0x40004400

08000e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <HAL_UART_MspInit+0x84>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12b      	bne.n	8000f12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_UART_MspInit+0x8c>)
 8000f0e:	f001 f8d7 	bl	80020c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2e:	490e      	ldr	r1, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f44:	4c0b      	ldr	r4, [pc, #44]	; (8000f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f52:	f7ff fe19 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f004 fe17 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fca3 	bl	80008a4 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f6c:	08005d24 	.word	0x08005d24
  ldr r2, =_sbss
 8000f70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f74:	200087e8 	.word	0x200087e8

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 fce6 	bl	8001976 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f7ff fd46 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fd18 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000010 	.word	0x20000010
 8000fe4:	20004950 	.word	0x20004950

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20004950 	.word	0x20004950

08001000 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e033      	b.n	800107e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d109      	bne.n	8001032 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fad4 	bl	80005cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	2b00      	cmp	r3, #0
 800103c:	d118      	bne.n	8001070 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001046:	f023 0302 	bic.w	r3, r3, #2
 800104a:	f043 0202 	orr.w	r2, r3, #2
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fa64 	bl	8001520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
 800106e:	e001      	b.n	8001074 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Start_DMA+0x1e>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e0e9      	b.n	800127a <HAL_ADC_Start_DMA+0x1f2>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d018      	beq.n	80010ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010cc:	4b6d      	ldr	r3, [pc, #436]	; (8001284 <HAL_ADC_Start_DMA+0x1fc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a6d      	ldr	r2, [pc, #436]	; (8001288 <HAL_ADC_Start_DMA+0x200>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	0c9a      	lsrs	r2, r3, #18
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010e0:	e002      	b.n	80010e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f9      	bne.n	80010e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010fc:	d107      	bne.n	800110e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800110c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b01      	cmp	r3, #1
 800111a:	f040 80a1 	bne.w	8001260 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001148:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800115c:	d106      	bne.n	800116c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f023 0206 	bic.w	r2, r3, #6
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	645a      	str	r2, [r3, #68]	; 0x44
 800116a:	e002      	b.n	8001172 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2200      	movs	r2, #0
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800117a:	4b44      	ldr	r3, [pc, #272]	; (800128c <HAL_ADC_Start_DMA+0x204>)
 800117c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001182:	4a43      	ldr	r2, [pc, #268]	; (8001290 <HAL_ADC_Start_DMA+0x208>)
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118a:	4a42      	ldr	r2, [pc, #264]	; (8001294 <HAL_ADC_Start_DMA+0x20c>)
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001192:	4a41      	ldr	r2, [pc, #260]	; (8001298 <HAL_ADC_Start_DMA+0x210>)
 8001194:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800119e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	334c      	adds	r3, #76	; 0x4c
 80011ca:	4619      	mov	r1, r3
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f000 fcb4 	bl	8001b3c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d12a      	bne.n	8001236 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2d      	ldr	r2, [pc, #180]	; (800129c <HAL_ADC_Start_DMA+0x214>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d015      	beq.n	8001216 <HAL_ADC_Start_DMA+0x18e>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <HAL_ADC_Start_DMA+0x218>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d105      	bne.n	8001200 <HAL_ADC_Start_DMA+0x178>
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <HAL_ADC_Start_DMA+0x204>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00a      	beq.n	8001216 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <HAL_ADC_Start_DMA+0x21c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d136      	bne.n	8001278 <HAL_ADC_Start_DMA+0x1f0>
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_ADC_Start_DMA+0x204>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d130      	bne.n	8001278 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d129      	bne.n	8001278 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	e020      	b.n	8001278 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a18      	ldr	r2, [pc, #96]	; (800129c <HAL_ADC_Start_DMA+0x214>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d11b      	bne.n	8001278 <HAL_ADC_Start_DMA+0x1f0>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d114      	bne.n	8001278 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	e00b      	b.n	8001278 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f043 0210 	orr.w	r2, r3, #16
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000000 	.word	0x20000000
 8001288:	431bde83 	.word	0x431bde83
 800128c:	40012300 	.word	0x40012300
 8001290:	08001719 	.word	0x08001719
 8001294:	080017d3 	.word	0x080017d3
 8001298:	080017ef 	.word	0x080017ef
 800129c:	40012000 	.word	0x40012000
 80012a0:	40012100 	.word	0x40012100
 80012a4:	40012200 	.word	0x40012200

080012a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x1c>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e113      	b.n	8001500 <HAL_ADC_ConfigChannel+0x244>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	d925      	bls.n	8001334 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68d9      	ldr	r1, [r3, #12]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	3b1e      	subs	r3, #30
 80012fe:	2207      	movs	r2, #7
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43da      	mvns	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	400a      	ands	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68d9      	ldr	r1, [r3, #12]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	4603      	mov	r3, r0
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4403      	add	r3, r0
 8001326:	3b1e      	subs	r3, #30
 8001328:	409a      	lsls	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	e022      	b.n	800137a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6919      	ldr	r1, [r3, #16]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	2207      	movs	r2, #7
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	400a      	ands	r2, r1
 8001356:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6919      	ldr	r1, [r3, #16]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	4603      	mov	r3, r0
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4403      	add	r3, r0
 8001370:	409a      	lsls	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b06      	cmp	r3, #6
 8001380:	d824      	bhi.n	80013cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	3b05      	subs	r3, #5
 8001394:	221f      	movs	r2, #31
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3b05      	subs	r3, #5
 80013be:	fa00 f203 	lsl.w	r2, r0, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
 80013ca:	e04c      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	d824      	bhi.n	800141e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	3b23      	subs	r3, #35	; 0x23
 80013e6:	221f      	movs	r2, #31
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43da      	mvns	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	400a      	ands	r2, r1
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	3b23      	subs	r3, #35	; 0x23
 8001410:	fa00 f203 	lsl.w	r2, r0, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
 800141c:	e023      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b41      	subs	r3, #65	; 0x41
 8001430:	221f      	movs	r2, #31
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b41      	subs	r3, #65	; 0x41
 800145a:	fa00 f203 	lsl.w	r2, r0, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_ADC_ConfigChannel+0x250>)
 8001468:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a28      	ldr	r2, [pc, #160]	; (8001510 <HAL_ADC_ConfigChannel+0x254>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d10f      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1d8>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d10b      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_ADC_ConfigChannel+0x254>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12b      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x23a>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_ADC_ConfigChannel+0x258>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d003      	beq.n	80014b0 <HAL_ADC_ConfigChannel+0x1f4>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b11      	cmp	r3, #17
 80014ae:	d122      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a11      	ldr	r2, [pc, #68]	; (8001514 <HAL_ADC_ConfigChannel+0x258>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d111      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_ADC_ConfigChannel+0x25c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_ADC_ConfigChannel+0x260>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9a      	lsrs	r2, r3, #18
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014e8:	e002      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40012300 	.word	0x40012300
 8001510:	40012000 	.word	0x40012000
 8001514:	10000012 	.word	0x10000012
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83

08001520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001528:	4b79      	ldr	r3, [pc, #484]	; (8001710 <ADC_Init+0x1f0>)
 800152a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	021a      	lsls	r2, r3, #8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6899      	ldr	r1, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	4a58      	ldr	r2, [pc, #352]	; (8001714 <ADC_Init+0x1f4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d022      	beq.n	80015fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6899      	ldr	r1, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e00f      	b.n	800161e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800160c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800161c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0202 	bic.w	r2, r2, #2
 800162c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6899      	ldr	r1, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e1b      	ldrb	r3, [r3, #24]
 8001638:	005a      	lsls	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01b      	beq.n	8001684 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800165a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800166a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6859      	ldr	r1, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	3b01      	subs	r3, #1
 8001678:	035a      	lsls	r2, r3, #13
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	e007      	b.n	8001694 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001692:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	051a      	lsls	r2, r3, #20
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6899      	ldr	r1, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d6:	025a      	lsls	r2, r3, #9
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6899      	ldr	r1, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	029a      	lsls	r2, r3, #10
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	609a      	str	r2, [r3, #8]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40012300 	.word	0x40012300
 8001714:	0f000001 	.word	0x0f000001

08001718 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800172e:	2b00      	cmp	r3, #0
 8001730:	d13c      	bne.n	80017ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d12b      	bne.n	80017a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001750:	2b00      	cmp	r3, #0
 8001752:	d127      	bne.n	80017a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800176c:	2b00      	cmp	r3, #0
 800176e:	d119      	bne.n	80017a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0220 	bic.w	r2, r2, #32
 800177e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff fb29 	bl	8000dfc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017aa:	e00e      	b.n	80017ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff fd75 	bl	80012a8 <HAL_ADC_ErrorCallback>
}
 80017be:	e004      	b.n	80017ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff fae7 	bl	8000db4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f043 0204 	orr.w	r2, r3, #4
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f7ff fd4a 	bl	80012a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff4c 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199e:	f7ff ff61 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	6978      	ldr	r0, [r7, #20]
 80019aa:	f7ff ffb1 	bl	8001910 <NVIC_EncodePriority>
 80019ae:	4602      	mov	r2, r0
 80019b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff80 	bl	80018bc <__NVIC_SetPriority>
}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff54 	bl	8001880 <__NVIC_EnableIRQ>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff fafc 	bl	8000fe8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e099      	b.n	8001b30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a1c:	e00f      	b.n	8001a3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a1e:	f7ff fae3 	bl	8000fe8 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d908      	bls.n	8001a3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2203      	movs	r2, #3
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e078      	b.n	8001b30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1e8      	bne.n	8001a1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_DMA_Init+0x158>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d107      	bne.n	8001aa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f023 0307 	bic.w	r3, r3, #7
 8001abe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d117      	bne.n	8001b02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00e      	beq.n	8001b02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fa6f 	bl	8001fc8 <DMA_CheckFifoParam>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2240      	movs	r2, #64	; 0x40
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001afe:	2301      	movs	r3, #1
 8001b00:	e016      	b.n	8001b30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fa26 	bl	8001f5c <DMA_CalcBaseAndBitshift>
 8001b10:	4603      	mov	r3, r0
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	f010803f 	.word	0xf010803f

08001b3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_DMA_Start_IT+0x26>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e040      	b.n	8001be4 <HAL_DMA_Start_IT+0xa8>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d12f      	bne.n	8001bd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f9b8 	bl	8001f00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	223f      	movs	r2, #63	; 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0216 	orr.w	r2, r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0208 	orr.w	r2, r2, #8
 8001bc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e005      	b.n	8001be2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
 8001be0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf8:	4b8e      	ldr	r3, [pc, #568]	; (8001e34 <HAL_DMA_IRQHandler+0x248>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a8e      	ldr	r2, [pc, #568]	; (8001e38 <HAL_DMA_IRQHandler+0x24c>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	2208      	movs	r2, #8
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0204 	bic.w	r2, r2, #4
 8001c3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2208      	movs	r2, #8
 8001c46:	409a      	lsls	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d012      	beq.n	8001c8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f043 0202 	orr.w	r2, r3, #2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c92:	2204      	movs	r2, #4
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0204 	orr.w	r2, r3, #4
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	2210      	movs	r2, #16
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d043      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03c      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d018      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d108      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d024      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
 8001d1a:	e01f      	b.n	8001d5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
 8001d2c:	e016      	b.n	8001d5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0208 	bic.w	r2, r2, #8
 8001d4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2220      	movs	r2, #32
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 808f 	beq.w	8001e8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8087 	beq.w	8001e8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2220      	movs	r2, #32
 8001d84:	409a      	lsls	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d136      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0216 	bic.w	r2, r2, #22
 8001da4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0x1da>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0208 	bic.w	r2, r2, #8
 8001dd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	223f      	movs	r2, #63	; 0x3f
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d07e      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
        }
        return;
 8001e02:	e079      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01d      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10d      	bne.n	8001e3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d031      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
 8001e30:	e02c      	b.n	8001e8c <HAL_DMA_IRQHandler+0x2a0>
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000
 8001e38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d023      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
 8001e4c:	e01e      	b.n	8001e8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10f      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0210 	bic.w	r2, r2, #16
 8001e6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d032      	beq.n	8001efa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d022      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2205      	movs	r2, #5
 8001ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d307      	bcc.n	8001ed4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f2      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x2cc>
 8001ed2:	e000      	b.n	8001ed6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ed4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
 8001ef6:	e000      	b.n	8001efa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ef8:	bf00      	nop
    }
  }
}
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d108      	bne.n	8001f40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f3e:	e007      	b.n	8001f50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3b10      	subs	r3, #16
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d909      	bls.n	8001f9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	1d1a      	adds	r2, r3, #4
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f9c:	e007      	b.n	8001fae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fa6:	f023 0303 	bic.w	r3, r3, #3
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	aaaaaaab 	.word	0xaaaaaaab
 8001fc4:	08005d0c 	.word	0x08005d0c

08001fc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d11f      	bne.n	8002022 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d856      	bhi.n	8002096 <DMA_CheckFifoParam+0xce>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <DMA_CheckFifoParam+0x28>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002013 	.word	0x08002013
 8001ff8:	08002001 	.word	0x08002001
 8001ffc:	08002097 	.word	0x08002097
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d046      	beq.n	800209a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002010:	e043      	b.n	800209a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800201a:	d140      	bne.n	800209e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002020:	e03d      	b.n	800209e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202a:	d121      	bne.n	8002070 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d837      	bhi.n	80020a2 <DMA_CheckFifoParam+0xda>
 8002032:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <DMA_CheckFifoParam+0x70>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	08002049 	.word	0x08002049
 800203c:	0800204f 	.word	0x0800204f
 8002040:	08002049 	.word	0x08002049
 8002044:	08002061 	.word	0x08002061
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      break;
 800204c:	e030      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d025      	beq.n	80020a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205e:	e022      	b.n	80020a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002068:	d11f      	bne.n	80020aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800206e:	e01c      	b.n	80020aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d903      	bls.n	800207e <DMA_CheckFifoParam+0xb6>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d003      	beq.n	8002084 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800207c:	e018      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
      break;
 8002082:	e015      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00e      	beq.n	80020ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      break;
 8002094:	e00b      	b.n	80020ae <DMA_CheckFifoParam+0xe6>
      break;
 8002096:	bf00      	nop
 8002098:	e00a      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 800209a:	bf00      	nop
 800209c:	e008      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
 80020a0:	e006      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 80020a2:	bf00      	nop
 80020a4:	e004      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 80020a6:	bf00      	nop
 80020a8:	e002      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80020aa:	bf00      	nop
 80020ac:	e000      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 80020ae:	bf00      	nop
    }
  } 
  
  return status; 
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e165      	b.n	80023a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f040 8154 	bne.w	80023a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d005      	beq.n	8002112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	2b02      	cmp	r3, #2
 8002110:	d130      	bne.n	8002174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0201 	and.w	r2, r3, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b03      	cmp	r3, #3
 800217e:	d017      	beq.n	80021b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d123      	bne.n	8002204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80ae 	beq.w	80023a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_GPIO_Init+0x300>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a5c      	ldr	r2, [pc, #368]	; (80023c0 <HAL_GPIO_Init+0x300>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b5a      	ldr	r3, [pc, #360]	; (80023c0 <HAL_GPIO_Init+0x300>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002262:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <HAL_GPIO_Init+0x304>)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_GPIO_Init+0x308>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d025      	beq.n	80022da <HAL_GPIO_Init+0x21a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4e      	ldr	r2, [pc, #312]	; (80023cc <HAL_GPIO_Init+0x30c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01f      	beq.n	80022d6 <HAL_GPIO_Init+0x216>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4d      	ldr	r2, [pc, #308]	; (80023d0 <HAL_GPIO_Init+0x310>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x212>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4c      	ldr	r2, [pc, #304]	; (80023d4 <HAL_GPIO_Init+0x314>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x20e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4b      	ldr	r2, [pc, #300]	; (80023d8 <HAL_GPIO_Init+0x318>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x20a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <HAL_GPIO_Init+0x31c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x206>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a49      	ldr	r2, [pc, #292]	; (80023e0 <HAL_GPIO_Init+0x320>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x202>
 80022be:	2306      	movs	r3, #6
 80022c0:	e00c      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e00a      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022da:	2300      	movs	r3, #0
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ec:	4935      	ldr	r1, [pc, #212]	; (80023c4 <HAL_GPIO_Init+0x304>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_GPIO_Init+0x324>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231e:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <HAL_GPIO_Init+0x324>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x324>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <HAL_GPIO_Init+0x324>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234e:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_GPIO_Init+0x324>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_GPIO_Init+0x324>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_GPIO_Init+0x324>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239c:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <HAL_GPIO_Init+0x324>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	f67f ae96 	bls.w	80020dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40021400 	.word	0x40021400
 80023e0:	40021800 	.word	0x40021800
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_PWREx_EnableOverDrive+0x90>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_PWREx_EnableOverDrive+0x90>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_PWREx_EnableOverDrive+0x90>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002448:	f7fe fdce 	bl	8000fe8 <HAL_GetTick>
 800244c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800244e:	e009      	b.n	8002464 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002450:	f7fe fdca 	bl	8000fe8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245e:	d901      	bls.n	8002464 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e01f      	b.n	80024a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d1ee      	bne.n	8002450 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002478:	f7fe fdb6 	bl	8000fe8 <HAL_GetTick>
 800247c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800247e:	e009      	b.n	8002494 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002480:	f7fe fdb2 	bl	8000fe8 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248e:	d901      	bls.n	8002494 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e007      	b.n	80024a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024a0:	d1ee      	bne.n	8002480 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	420e0040 	.word	0x420e0040
 80024b4:	40007000 	.word	0x40007000
 80024b8:	420e0044 	.word	0x420e0044

080024bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0cc      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d90c      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d044      	beq.n	80025dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d119      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d003      	beq.n	800257a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	2b03      	cmp	r3, #3
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e067      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 0203 	bic.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4934      	ldr	r1, [pc, #208]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ac:	f7fe fd1c 	bl	8000fe8 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7fe fd18 	bl	8000fe8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 020c 	and.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1eb      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d20c      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f887 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe f9ea 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00
 8002678:	40023800 	.word	0x40023800
 800267c:	08005cf4 	.word	0x08005cf4
 8002680:	20000000 	.word	0x20000000
 8002684:	2000000c 	.word	0x2000000c

08002688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000000 	.word	0x20000000

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0a9b      	lsrs	r3, r3, #10
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4903      	ldr	r1, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08005d04 	.word	0x08005d04

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026cc:	f7ff ffdc 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0b5b      	lsrs	r3, r3, #13
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08005d04 	.word	0x08005d04

080026f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	220f      	movs	r2, #15
 80026fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_RCC_GetClockConfig+0x60>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40023c00 	.word	0x40023c00

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002758:	b0ae      	sub	sp, #184	; 0xb8
 800275a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800277a:	4bcb      	ldr	r3, [pc, #812]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b0c      	cmp	r3, #12
 8002784:	f200 8206 	bhi.w	8002b94 <HAL_RCC_GetSysClockFreq+0x440>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <HAL_RCC_GetSysClockFreq+0x3c>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027c5 	.word	0x080027c5
 8002794:	08002b95 	.word	0x08002b95
 8002798:	08002b95 	.word	0x08002b95
 800279c:	08002b95 	.word	0x08002b95
 80027a0:	080027cd 	.word	0x080027cd
 80027a4:	08002b95 	.word	0x08002b95
 80027a8:	08002b95 	.word	0x08002b95
 80027ac:	08002b95 	.word	0x08002b95
 80027b0:	080027d5 	.word	0x080027d5
 80027b4:	08002b95 	.word	0x08002b95
 80027b8:	08002b95 	.word	0x08002b95
 80027bc:	08002b95 	.word	0x08002b95
 80027c0:	080029c5 	.word	0x080029c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4bb9      	ldr	r3, [pc, #740]	; (8002aac <HAL_RCC_GetSysClockFreq+0x358>)
 80027c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80027ca:	e1e7      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027cc:	4bb8      	ldr	r3, [pc, #736]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027d2:	e1e3      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d4:	4bb4      	ldr	r3, [pc, #720]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e0:	4bb1      	ldr	r3, [pc, #708]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d071      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ec:	4bae      	ldr	r3, [pc, #696]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002804:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800280e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	f04f 0000 	mov.w	r0, #0
 800281a:	f04f 0100 	mov.w	r1, #0
 800281e:	0159      	lsls	r1, r3, #5
 8002820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002824:	0150      	lsls	r0, r2, #5
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4621      	mov	r1, r4
 800282c:	1a51      	subs	r1, r2, r1
 800282e:	6439      	str	r1, [r7, #64]	; 0x40
 8002830:	4629      	mov	r1, r5
 8002832:	eb63 0301 	sbc.w	r3, r3, r1
 8002836:	647b      	str	r3, [r7, #68]	; 0x44
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002844:	4649      	mov	r1, r9
 8002846:	018b      	lsls	r3, r1, #6
 8002848:	4641      	mov	r1, r8
 800284a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284e:	4641      	mov	r1, r8
 8002850:	018a      	lsls	r2, r1, #6
 8002852:	4641      	mov	r1, r8
 8002854:	1a51      	subs	r1, r2, r1
 8002856:	63b9      	str	r1, [r7, #56]	; 0x38
 8002858:	4649      	mov	r1, r9
 800285a:	eb63 0301 	sbc.w	r3, r3, r1
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800286c:	4649      	mov	r1, r9
 800286e:	00cb      	lsls	r3, r1, #3
 8002870:	4641      	mov	r1, r8
 8002872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002876:	4641      	mov	r1, r8
 8002878:	00ca      	lsls	r2, r1, #3
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	4603      	mov	r3, r0
 8002880:	4622      	mov	r2, r4
 8002882:	189b      	adds	r3, r3, r2
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
 8002886:	462b      	mov	r3, r5
 8002888:	460a      	mov	r2, r1
 800288a:	eb42 0303 	adc.w	r3, r2, r3
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800289c:	4629      	mov	r1, r5
 800289e:	024b      	lsls	r3, r1, #9
 80028a0:	4621      	mov	r1, r4
 80028a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028a6:	4621      	mov	r1, r4
 80028a8:	024a      	lsls	r2, r1, #9
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028c0:	f7fd fca6 	bl	8000210 <__aeabi_uldivmod>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4613      	mov	r3, r2
 80028ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028ce:	e067      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d0:	4b75      	ldr	r3, [pc, #468]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80028e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80028ea:	2300      	movs	r3, #0
 80028ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80028f2:	4622      	mov	r2, r4
 80028f4:	462b      	mov	r3, r5
 80028f6:	f04f 0000 	mov.w	r0, #0
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	0159      	lsls	r1, r3, #5
 8002900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002904:	0150      	lsls	r0, r2, #5
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4621      	mov	r1, r4
 800290c:	1a51      	subs	r1, r2, r1
 800290e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002910:	4629      	mov	r1, r5
 8002912:	eb63 0301 	sbc.w	r3, r3, r1
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002924:	4649      	mov	r1, r9
 8002926:	018b      	lsls	r3, r1, #6
 8002928:	4641      	mov	r1, r8
 800292a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800292e:	4641      	mov	r1, r8
 8002930:	018a      	lsls	r2, r1, #6
 8002932:	4641      	mov	r1, r8
 8002934:	ebb2 0a01 	subs.w	sl, r2, r1
 8002938:	4649      	mov	r1, r9
 800293a:	eb63 0b01 	sbc.w	fp, r3, r1
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800294a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800294e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002952:	4692      	mov	sl, r2
 8002954:	469b      	mov	fp, r3
 8002956:	4623      	mov	r3, r4
 8002958:	eb1a 0303 	adds.w	r3, sl, r3
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	462b      	mov	r3, r5
 8002960:	eb4b 0303 	adc.w	r3, fp, r3
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002972:	4629      	mov	r1, r5
 8002974:	028b      	lsls	r3, r1, #10
 8002976:	4621      	mov	r1, r4
 8002978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800297c:	4621      	mov	r1, r4
 800297e:	028a      	lsls	r2, r1, #10
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002988:	2200      	movs	r2, #0
 800298a:	673b      	str	r3, [r7, #112]	; 0x70
 800298c:	677a      	str	r2, [r7, #116]	; 0x74
 800298e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002992:	f7fd fc3d 	bl	8000210 <__aeabi_uldivmod>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4613      	mov	r3, r2
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029c2:	e0eb      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d0:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d06b      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	099b      	lsrs	r3, r3, #6
 80029e2:	2200      	movs	r2, #0
 80029e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80029e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ee:	663b      	str	r3, [r7, #96]	; 0x60
 80029f0:	2300      	movs	r3, #0
 80029f2:	667b      	str	r3, [r7, #100]	; 0x64
 80029f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029f8:	4622      	mov	r2, r4
 80029fa:	462b      	mov	r3, r5
 80029fc:	f04f 0000 	mov.w	r0, #0
 8002a00:	f04f 0100 	mov.w	r1, #0
 8002a04:	0159      	lsls	r1, r3, #5
 8002a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a0a:	0150      	lsls	r0, r2, #5
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4621      	mov	r1, r4
 8002a12:	1a51      	subs	r1, r2, r1
 8002a14:	61b9      	str	r1, [r7, #24]
 8002a16:	4629      	mov	r1, r5
 8002a18:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a2a:	4659      	mov	r1, fp
 8002a2c:	018b      	lsls	r3, r1, #6
 8002a2e:	4651      	mov	r1, sl
 8002a30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a34:	4651      	mov	r1, sl
 8002a36:	018a      	lsls	r2, r1, #6
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a3e:	4659      	mov	r1, fp
 8002a40:	eb63 0901 	sbc.w	r9, r3, r1
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a58:	4690      	mov	r8, r2
 8002a5a:	4699      	mov	r9, r3
 8002a5c:	4623      	mov	r3, r4
 8002a5e:	eb18 0303 	adds.w	r3, r8, r3
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	462b      	mov	r3, r5
 8002a66:	eb49 0303 	adc.w	r3, r9, r3
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a78:	4629      	mov	r1, r5
 8002a7a:	024b      	lsls	r3, r1, #9
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a82:	4621      	mov	r1, r4
 8002a84:	024a      	lsls	r2, r1, #9
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a8e:	2200      	movs	r2, #0
 8002a90:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a98:	f7fd fbba 	bl	8000210 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aa6:	e065      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x420>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_GetSysClockFreq+0x458>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	2200      	movs	r2, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	4611      	mov	r1, r2
 8002ac0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8002aca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ace:	4642      	mov	r2, r8
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f04f 0100 	mov.w	r1, #0
 8002ada:	0159      	lsls	r1, r3, #5
 8002adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae0:	0150      	lsls	r0, r2, #5
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	1a51      	subs	r1, r2, r1
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	4649      	mov	r1, r9
 8002aee:	eb63 0301 	sbc.w	r3, r3, r1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b00:	4659      	mov	r1, fp
 8002b02:	018b      	lsls	r3, r1, #6
 8002b04:	4651      	mov	r1, sl
 8002b06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	018a      	lsls	r2, r1, #6
 8002b0e:	4651      	mov	r1, sl
 8002b10:	1a54      	subs	r4, r2, r1
 8002b12:	4659      	mov	r1, fp
 8002b14:	eb63 0501 	sbc.w	r5, r3, r1
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	00eb      	lsls	r3, r5, #3
 8002b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	18e3      	adds	r3, r4, r3
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	464b      	mov	r3, r9
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b66:	f7fd fb53 	bl	8000210 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4613      	mov	r3, r2
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b74:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_RCC_GetSysClockFreq+0x458>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0f1b      	lsrs	r3, r3, #28
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b92:	e003      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	37b8      	adds	r7, #184	; 0xb8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400

08002bb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e28d      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8083 	beq.w	8002cda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bd4:	4b94      	ldr	r3, [pc, #592]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d019      	beq.n	8002c14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002be0:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bec:	4b8e      	ldr	r3, [pc, #568]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b8b      	ldr	r3, [pc, #556]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b84      	ldr	r3, [pc, #528]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x124>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e25a      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x90>
 8002c36:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7b      	ldr	r2, [pc, #492]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xcc>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xb4>
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a75      	ldr	r2, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a72      	ldr	r2, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xcc>
 8002c68:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6e      	ldr	r2, [pc, #440]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6b      	ldr	r2, [pc, #428]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe f9ae 	bl	8000fe8 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe f9aa 	bl	8000fe8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e21f      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xdc>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f99a 	bl	8000fe8 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe f996 	bl	8000fe8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e20b      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x104>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d06f      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ce6:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d11c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x186>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1d3      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4937      	ldr	r1, [pc, #220]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e03a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCC_OscConfig+0x278>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe f943 	bl	8000fe8 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fe f93f 	bl	8000fe8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1b4      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4925      	ldr	r1, [pc, #148]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <HAL_RCC_OscConfig+0x278>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe f922 	bl	8000fe8 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da8:	f7fe f91e 	bl	8000fe8 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e193      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d036      	beq.n	8002e40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe f902 	bl	8000fe8 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe f8fe 	bl	8000fe8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e173      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x234>
 8002e06:	e01b      	b.n	8002e40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f8eb 	bl	8000fe8 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	e00e      	b.n	8002e34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe f8e7 	bl	8000fe8 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d907      	bls.n	8002e34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e15c      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470000 	.word	0x42470000
 8002e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b8a      	ldr	r3, [pc, #552]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ea      	bne.n	8002e16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8097 	beq.w	8002f7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b83      	ldr	r3, [pc, #524]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a7e      	ldr	r2, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b7c      	ldr	r3, [pc, #496]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b79      	ldr	r3, [pc, #484]	; (8003064 <HAL_RCC_OscConfig+0x4b0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0x4b0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x4b0>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe f8a7 	bl	8000fe8 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe f8a3 	bl	8000fe8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e118      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b6c      	ldr	r3, [pc, #432]	; (8003064 <HAL_RCC_OscConfig+0x4b0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x31e>
 8002ec4:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a65      	ldr	r2, [pc, #404]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCC_OscConfig+0x358>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x340>
 8002eda:	4b61      	ldr	r3, [pc, #388]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a60      	ldr	r2, [pc, #384]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a5d      	ldr	r2, [pc, #372]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0x358>
 8002ef4:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a59      	ldr	r2, [pc, #356]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a56      	ldr	r2, [pc, #344]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe f868 	bl	8000fe8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe f864 	bl	8000fe8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0d7      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0ee      	beq.n	8002f1c <HAL_RCC_OscConfig+0x368>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe f852 	bl	8000fe8 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe f84e 	bl	8000fe8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0c1      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	4b40      	ldr	r3, [pc, #256]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ee      	bne.n	8002f48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80ad 	beq.w	80030e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d060      	beq.n	8003054 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d145      	bne.n	8003026 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x4b4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f822 	bl	8000fe8 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe f81e 	bl	8000fe8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e093      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	019b      	lsls	r3, r3, #6
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	071b      	lsls	r3, r3, #28
 8002ff2:	491b      	ldr	r1, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x4b4>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fd fff3 	bl	8000fe8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003006:	f7fd ffef 	bl	8000fe8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e064      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x452>
 8003024:	e05c      	b.n	80030e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_OscConfig+0x4b4>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fd ffdc 	bl	8000fe8 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003034:	f7fd ffd8 	bl	8000fe8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e04d      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x480>
 8003052:	e045      	b.n	80030e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e040      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000
 8003068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800306c:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <HAL_RCC_OscConfig+0x538>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d030      	beq.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d129      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d122      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d119      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d10f      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e041      	b.n	8003186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd fdba 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 fc1a 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d001      	beq.n	80031a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e046      	b.n	8003236 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a23      	ldr	r2, [pc, #140]	; (8003244 <HAL_TIM_Base_Start+0xb4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d022      	beq.n	8003200 <HAL_TIM_Base_Start+0x70>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c2:	d01d      	beq.n	8003200 <HAL_TIM_Base_Start+0x70>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <HAL_TIM_Base_Start+0xb8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d018      	beq.n	8003200 <HAL_TIM_Base_Start+0x70>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1e      	ldr	r2, [pc, #120]	; (800324c <HAL_TIM_Base_Start+0xbc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_TIM_Base_Start+0x70>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_TIM_Base_Start+0xc0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_TIM_Base_Start+0x70>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_TIM_Base_Start+0xc4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_TIM_Base_Start+0x70>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_TIM_Base_Start+0xc8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_TIM_Base_Start+0x70>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <HAL_TIM_Base_Start+0xcc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d111      	bne.n	8003224 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b06      	cmp	r3, #6
 8003210:	d010      	beq.n	8003234 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003222:	e007      	b.n	8003234 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40010400 	.word	0x40010400
 8003258:	40014000 	.word	0x40014000
 800325c:	40001800 	.word	0x40001800

08003260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d001      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e04e      	b.n	8003316 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a23      	ldr	r2, [pc, #140]	; (8003324 <HAL_TIM_Base_Start_IT+0xc4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d022      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d01d      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_TIM_Base_Start_IT+0xc8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d018      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_TIM_Base_Start_IT+0xcc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_TIM_Base_Start_IT+0xd0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00e      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_TIM_Base_Start_IT+0xd4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d009      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_TIM_Base_Start_IT+0xd8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a18      	ldr	r2, [pc, #96]	; (800333c <HAL_TIM_Base_Start_IT+0xdc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d111      	bne.n	8003304 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d010      	beq.n	8003314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003302:	e007      	b.n	8003314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40010400 	.word	0x40010400
 8003338:	40014000 	.word	0x40014000
 800333c:	40001800 	.word	0x40001800

08003340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e041      	b.n	80033d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f839 	bl	80033de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f000 faf2 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d122      	bne.n	800344e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d11b      	bne.n	800344e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0202 	mvn.w	r2, #2
 800341e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa78 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 800343a:	e005      	b.n	8003448 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa6a 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa7b 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d122      	bne.n	80034a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d11b      	bne.n	80034a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0204 	mvn.w	r2, #4
 8003472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa4e 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 800348e:	e005      	b.n	800349c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa40 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa51 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d122      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11b      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0208 	mvn.w	r2, #8
 80034c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2204      	movs	r2, #4
 80034cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fa24 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80034e2:	e005      	b.n	80034f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa16 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fa27 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	d122      	bne.n	800354a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b10      	cmp	r3, #16
 8003510:	d11b      	bne.n	800354a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0210 	mvn.w	r2, #16
 800351a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2208      	movs	r2, #8
 8003520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9fa 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003536:	e005      	b.n	8003544 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9ec 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9fd 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10e      	bne.n	8003576 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f06f 0201 	mvn.w	r2, #1
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fd fa1f 	bl	80009b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d10e      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800359a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fd53 	bl	8004048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d10e      	bne.n	80035ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f9c2 	bl	8003952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d10e      	bne.n	80035fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d107      	bne.n	80035fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0220 	mvn.w	r2, #32
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fd1d 	bl	8004034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800361e:	2302      	movs	r3, #2
 8003620:	e0ae      	b.n	8003780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	f200 809f 	bhi.w	8003770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	0800366d 	.word	0x0800366d
 800363c:	08003771 	.word	0x08003771
 8003640:	08003771 	.word	0x08003771
 8003644:	08003771 	.word	0x08003771
 8003648:	080036ad 	.word	0x080036ad
 800364c:	08003771 	.word	0x08003771
 8003650:	08003771 	.word	0x08003771
 8003654:	08003771 	.word	0x08003771
 8003658:	080036ef 	.word	0x080036ef
 800365c:	08003771 	.word	0x08003771
 8003660:	08003771 	.word	0x08003771
 8003664:	08003771 	.word	0x08003771
 8003668:	0800372f 	.word	0x0800372f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa18 	bl	8003aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0208 	orr.w	r2, r2, #8
 8003686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	619a      	str	r2, [r3, #24]
      break;
 80036aa:	e064      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa68 	bl	8003b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]
      break;
 80036ec:	e043      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fabd 	bl	8003c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0208 	orr.w	r2, r2, #8
 8003708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0204 	bic.w	r2, r2, #4
 8003718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
      break;
 800372c:	e023      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fb11 	bl	8003d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	021a      	lsls	r2, r3, #8
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	61da      	str	r2, [r3, #28]
      break;
 800376e:	e002      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
      break;
 8003774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_ConfigClockSource+0x1c>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0b4      	b.n	800390e <HAL_TIM_ConfigClockSource+0x186>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	d03e      	beq.n	800385c <HAL_TIM_ConfigClockSource+0xd4>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	f200 8087 	bhi.w	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	f000 8086 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x172>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d87f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d01a      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xa6>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d87b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d050      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d877      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d03c      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0xfa>
 8003808:	2b50      	cmp	r3, #80	; 0x50
 800380a:	d873      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d058      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d86f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d064      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d86b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d060      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d867      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05c      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d05a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	e062      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f000 fb5d 	bl	8003efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	609a      	str	r2, [r3, #8]
      break;
 800385a:	e04f      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f000 fb46 	bl	8003efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387e:	609a      	str	r2, [r3, #8]
      break;
 8003880:	e03c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 faba 	bl	8003e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2150      	movs	r1, #80	; 0x50
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fb13 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e02c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 fad9 	bl	8003e66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2160      	movs	r1, #96	; 0x60
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fb03 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e01c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 fa9a 	bl	8003e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 faf3 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e00c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f000 faea 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80038f2:	e003      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e000      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3d      	ldr	r2, [pc, #244]	; (8003a80 <TIM_Base_SetConfig+0x118>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3c      	ldr	r2, [pc, #240]	; (8003a84 <TIM_Base_SetConfig+0x11c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3a      	ldr	r2, [pc, #232]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d027      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <TIM_Base_SetConfig+0x118>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d023      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2b      	ldr	r2, [pc, #172]	; (8003a84 <TIM_Base_SetConfig+0x11c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d017      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <TIM_Base_SetConfig+0x128>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0xf8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800
 8003a9c:	40001800 	.word	0x40001800
 8003aa0:	40001c00 	.word	0x40001c00
 8003aa4:	40002000 	.word	0x40002000

08003aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0201 	bic.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f023 0302 	bic.w	r3, r3, #2
 8003af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <TIM_OC1_SetConfig+0xd8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_OC1_SetConfig+0x64>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <TIM_OC1_SetConfig+0xdc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10c      	bne.n	8003b26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0308 	bic.w	r3, r3, #8
 8003b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <TIM_OC1_SetConfig+0xd8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_OC1_SetConfig+0x8e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <TIM_OC1_SetConfig+0xdc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d111      	bne.n	8003b5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	621a      	str	r2, [r3, #32]
}
 8003b74:	bf00      	nop
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40010400 	.word	0x40010400

08003b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0210 	bic.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0320 	bic.w	r3, r3, #32
 8003bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a22      	ldr	r2, [pc, #136]	; (8003c6c <TIM_OC2_SetConfig+0xe4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_OC2_SetConfig+0x68>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <TIM_OC2_SetConfig+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10d      	bne.n	8003c0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <TIM_OC2_SetConfig+0xe4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_OC2_SetConfig+0x94>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <TIM_OC2_SetConfig+0xe8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d113      	bne.n	8003c44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40010400 	.word	0x40010400

08003c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a21      	ldr	r2, [pc, #132]	; (8003d54 <TIM_OC3_SetConfig+0xe0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_OC3_SetConfig+0x66>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a20      	ldr	r2, [pc, #128]	; (8003d58 <TIM_OC3_SetConfig+0xe4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10d      	bne.n	8003cf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <TIM_OC3_SetConfig+0xe0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d003      	beq.n	8003d06 <TIM_OC3_SetConfig+0x92>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <TIM_OC3_SetConfig+0xe4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d113      	bne.n	8003d2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40010400 	.word	0x40010400

08003d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	031b      	lsls	r3, r3, #12
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <TIM_OC4_SetConfig+0xa4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_OC4_SetConfig+0x68>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <TIM_OC4_SetConfig+0xa8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d109      	bne.n	8003dd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40010400 	.word	0x40010400

08003e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 030a 	bic.w	r3, r3, #10
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b087      	sub	sp, #28
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0210 	bic.w	r2, r3, #16
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f043 0307 	orr.w	r3, r3, #7
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	609a      	str	r2, [r3, #8]
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e05a      	b.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a21      	ldr	r2, [pc, #132]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d022      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d01d      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1d      	ldr	r2, [pc, #116]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d018      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a17      	ldr	r2, [pc, #92]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40010400 	.word	0x40010400
 800402c:	40014000 	.word	0x40014000
 8004030:	40001800 	.word	0x40001800

08004034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e03f      	b.n	80040ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc ff08 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f829 	bl	80040f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b0c0      	sub	sp, #256	; 0x100
 80040fe:	af00      	add	r7, sp, #0
 8004100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	ea40 0301 	orr.w	r3, r0, r1
 8004120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	431a      	orrs	r2, r3
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004150:	f021 010c 	bic.w	r1, r1, #12
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800415e:	430b      	orrs	r3, r1
 8004160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	6999      	ldr	r1, [r3, #24]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	ea40 0301 	orr.w	r3, r0, r1
 800417e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b8f      	ldr	r3, [pc, #572]	; (80043c4 <UART_SetConfig+0x2cc>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d005      	beq.n	8004198 <UART_SetConfig+0xa0>
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <UART_SetConfig+0x2d0>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d104      	bne.n	80041a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7fe fa96 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 800419c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041a0:	e003      	b.n	80041aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041a2:	f7fe fa7d 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 80041a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	f040 810c 	bne.w	80043d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041ca:	4622      	mov	r2, r4
 80041cc:	462b      	mov	r3, r5
 80041ce:	1891      	adds	r1, r2, r2
 80041d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80041d2:	415b      	adcs	r3, r3
 80041d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041da:	4621      	mov	r1, r4
 80041dc:	eb12 0801 	adds.w	r8, r2, r1
 80041e0:	4629      	mov	r1, r5
 80041e2:	eb43 0901 	adc.w	r9, r3, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	eb18 0303 	adds.w	r3, r8, r3
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004208:	462b      	mov	r3, r5
 800420a:	eb49 0303 	adc.w	r3, r9, r3
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800421e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004226:	460b      	mov	r3, r1
 8004228:	18db      	adds	r3, r3, r3
 800422a:	653b      	str	r3, [r7, #80]	; 0x50
 800422c:	4613      	mov	r3, r2
 800422e:	eb42 0303 	adc.w	r3, r2, r3
 8004232:	657b      	str	r3, [r7, #84]	; 0x54
 8004234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800423c:	f7fb ffe8 	bl	8000210 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <UART_SetConfig+0x2d4>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	011c      	lsls	r4, r3, #4
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800425c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	64b9      	str	r1, [r7, #72]	; 0x48
 8004268:	415b      	adcs	r3, r3
 800426a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800426c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004270:	4641      	mov	r1, r8
 8004272:	eb12 0a01 	adds.w	sl, r2, r1
 8004276:	4649      	mov	r1, r9
 8004278:	eb43 0b01 	adc.w	fp, r3, r1
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800428c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004290:	4692      	mov	sl, r2
 8004292:	469b      	mov	fp, r3
 8004294:	4643      	mov	r3, r8
 8004296:	eb1a 0303 	adds.w	r3, sl, r3
 800429a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800429e:	464b      	mov	r3, r9
 80042a0:	eb4b 0303 	adc.w	r3, fp, r3
 80042a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042bc:	460b      	mov	r3, r1
 80042be:	18db      	adds	r3, r3, r3
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042d2:	f7fb ff9d 	bl	8000210 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <UART_SetConfig+0x2d4>)
 80042de:	fba3 2301 	umull	r2, r3, r3, r1
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2264      	movs	r2, #100	; 0x64
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042f2:	4b36      	ldr	r3, [pc, #216]	; (80043cc <UART_SetConfig+0x2d4>)
 80042f4:	fba3 2302 	umull	r2, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004300:	441c      	add	r4, r3
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800430c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	63b9      	str	r1, [r7, #56]	; 0x38
 800431c:	415b      	adcs	r3, r3
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004324:	4641      	mov	r1, r8
 8004326:	1851      	adds	r1, r2, r1
 8004328:	6339      	str	r1, [r7, #48]	; 0x30
 800432a:	4649      	mov	r1, r9
 800432c:	414b      	adcs	r3, r1
 800432e:	637b      	str	r3, [r7, #52]	; 0x34
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800433c:	4659      	mov	r1, fp
 800433e:	00cb      	lsls	r3, r1, #3
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004346:	4651      	mov	r1, sl
 8004348:	00ca      	lsls	r2, r1, #3
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	4603      	mov	r3, r0
 8004350:	4642      	mov	r2, r8
 8004352:	189b      	adds	r3, r3, r2
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004358:	464b      	mov	r3, r9
 800435a:	460a      	mov	r2, r1
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004378:	460b      	mov	r3, r1
 800437a:	18db      	adds	r3, r3, r3
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	4613      	mov	r3, r2
 8004380:	eb42 0303 	adc.w	r3, r2, r3
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800438e:	f7fb ff3f 	bl	8000210 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <UART_SetConfig+0x2d4>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	; 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <UART_SetConfig+0x2d4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4422      	add	r2, r4
 80043be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c0:	e106      	b.n	80045d0 <UART_SetConfig+0x4d8>
 80043c2:	bf00      	nop
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043e2:	4642      	mov	r2, r8
 80043e4:	464b      	mov	r3, r9
 80043e6:	1891      	adds	r1, r2, r2
 80043e8:	6239      	str	r1, [r7, #32]
 80043ea:	415b      	adcs	r3, r3
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
 80043ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043f2:	4641      	mov	r1, r8
 80043f4:	1854      	adds	r4, r2, r1
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0501 	adc.w	r5, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004418:	464b      	mov	r3, r9
 800441a:	eb45 0303 	adc.w	r3, r5, r3
 800441e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800442e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800443e:	4629      	mov	r1, r5
 8004440:	008b      	lsls	r3, r1, #2
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004448:	4621      	mov	r1, r4
 800444a:	008a      	lsls	r2, r1, #2
 800444c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004450:	f7fb fede 	bl	8000210 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b60      	ldr	r3, [pc, #384]	; (80045dc <UART_SetConfig+0x4e4>)
 800445a:	fba3 2302 	umull	r2, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	011c      	lsls	r4, r3, #4
 8004462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800446c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	61b9      	str	r1, [r7, #24]
 800447c:	415b      	adcs	r3, r3
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6139      	str	r1, [r7, #16]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044b8:	464b      	mov	r3, r9
 80044ba:	460a      	mov	r2, r1
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044ee:	f7fb fe8f 	bl	8000210 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	4b38      	ldr	r3, [pc, #224]	; (80045dc <UART_SetConfig+0x4e4>)
 80044fa:	fba3 2301 	umull	r2, r3, r3, r1
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2264      	movs	r2, #100	; 0x64
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	1acb      	subs	r3, r1, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	; 0x32
 800450c:	4a33      	ldr	r2, [pc, #204]	; (80045dc <UART_SetConfig+0x4e4>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004518:	441c      	add	r4, r3
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	673b      	str	r3, [r7, #112]	; 0x70
 8004522:	677a      	str	r2, [r7, #116]	; 0x74
 8004524:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	1891      	adds	r1, r2, r2
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	415b      	adcs	r3, r3
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004538:	4641      	mov	r1, r8
 800453a:	1851      	adds	r1, r2, r1
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	4649      	mov	r1, r9
 8004540:	414b      	adcs	r3, r1
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004550:	4659      	mov	r1, fp
 8004552:	00cb      	lsls	r3, r1, #3
 8004554:	4651      	mov	r1, sl
 8004556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455a:	4651      	mov	r1, sl
 800455c:	00ca      	lsls	r2, r1, #3
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4603      	mov	r3, r0
 8004564:	4642      	mov	r2, r8
 8004566:	189b      	adds	r3, r3, r2
 8004568:	66bb      	str	r3, [r7, #104]	; 0x68
 800456a:	464b      	mov	r3, r9
 800456c:	460a      	mov	r2, r1
 800456e:	eb42 0303 	adc.w	r3, r2, r3
 8004572:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	663b      	str	r3, [r7, #96]	; 0x60
 800457e:	667a      	str	r2, [r7, #100]	; 0x64
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800458c:	4649      	mov	r1, r9
 800458e:	008b      	lsls	r3, r1, #2
 8004590:	4641      	mov	r1, r8
 8004592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004596:	4641      	mov	r1, r8
 8004598:	008a      	lsls	r2, r1, #2
 800459a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800459e:	f7fb fe37 	bl	8000210 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <UART_SetConfig+0x4e4>)
 80045a8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	2164      	movs	r1, #100	; 0x64
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	3332      	adds	r3, #50	; 0x32
 80045ba:	4a08      	ldr	r2, [pc, #32]	; (80045dc <UART_SetConfig+0x4e4>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4422      	add	r2, r4
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045d6:	46bd      	mov	sp, r7
 80045d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045dc:	51eb851f 	.word	0x51eb851f

080045e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f2:	2b84      	cmp	r3, #132	; 0x84
 80045f4:	d005      	beq.n	8004602 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	3303      	adds	r3, #3
 8004600:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004602:	68fb      	ldr	r3, [r7, #12]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004614:	f000 faf6 	bl	8004c04 <vTaskStartScheduler>
  
  return osOK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	bd80      	pop	{r7, pc}

0800461e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800461e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004620:	b089      	sub	sp, #36	; 0x24
 8004622:	af04      	add	r7, sp, #16
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <osThreadCreate+0x54>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01c      	beq.n	8004672 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685c      	ldr	r4, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691e      	ldr	r6, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ffc8 	bl	80045e0 <makeFreeRtosPriority>
 8004650:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800465a:	9202      	str	r2, [sp, #8]
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	9100      	str	r1, [sp, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4632      	mov	r2, r6
 8004664:	4629      	mov	r1, r5
 8004666:	4620      	mov	r0, r4
 8004668:	f000 f8ed 	bl	8004846 <xTaskCreateStatic>
 800466c:	4603      	mov	r3, r0
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e01c      	b.n	80046ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685c      	ldr	r4, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800467e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ffaa 	bl	80045e0 <makeFreeRtosPriority>
 800468c:	4602      	mov	r2, r0
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	9200      	str	r2, [sp, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	4632      	mov	r2, r6
 800469a:	4629      	mov	r1, r5
 800469c:	4620      	mov	r0, r4
 800469e:	f000 f92f 	bl	8004900 <xTaskCreate>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <osDelay+0x16>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	e000      	b.n	80046ce <osDelay+0x18>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fa64 	bl	8004b9c <vTaskDelay>
  
  return osOK;
 80046d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f103 0208 	add.w	r2, r3, #8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f04f 32ff 	mov.w	r2, #4294967295
 80046f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f103 0208 	add.w	r2, r3, #8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f103 0208 	add.w	r2, r3, #8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d103      	bne.n	80047a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e00c      	b.n	80047ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3308      	adds	r3, #8
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e002      	b.n	80047ae <vListInsert+0x2e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d2f6      	bcs.n	80047a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6852      	ldr	r2, [r2, #4]
 8004812:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d103      	bne.n	8004826 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1e5a      	subs	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004846:	b580      	push	{r7, lr}
 8004848:	b08e      	sub	sp, #56	; 0x38
 800484a:	af04      	add	r7, sp, #16
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <xTaskCreateStatic+0x46>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	61fb      	str	r3, [r7, #28]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800488c:	23a0      	movs	r3, #160	; 0xa0
 800488e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2ba0      	cmp	r3, #160	; 0xa0
 8004894:	d00a      	beq.n	80048ac <xTaskCreateStatic+0x66>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	61bb      	str	r3, [r7, #24]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01e      	beq.n	80048f2 <xTaskCreateStatic+0xac>
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01b      	beq.n	80048f2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048cc:	2300      	movs	r3, #0
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	9302      	str	r3, [sp, #8]
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f851 	bl	800498c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048ec:	f000 f8ec 	bl	8004ac8 <prvAddNewTaskToReadyList>
 80048f0:	e001      	b.n	80048f6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048f6:	697b      	ldr	r3, [r7, #20]
	}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3728      	adds	r7, #40	; 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08c      	sub	sp, #48	; 0x30
 8004904:	af04      	add	r7, sp, #16
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4618      	mov	r0, r3
 8004916:	f000 feef 	bl	80056f8 <pvPortMalloc>
 800491a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004922:	20a0      	movs	r0, #160	; 0xa0
 8004924:	f000 fee8 	bl	80056f8 <pvPortMalloc>
 8004928:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
 8004936:	e005      	b.n	8004944 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004938:	6978      	ldr	r0, [r7, #20]
 800493a:	f000 ffa9 	bl	8005890 <vPortFree>
 800493e:	e001      	b.n	8004944 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d017      	beq.n	800497a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	2300      	movs	r3, #0
 8004956:	9303      	str	r3, [sp, #12]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f80f 	bl	800498c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800496e:	69f8      	ldr	r0, [r7, #28]
 8004970:	f000 f8aa 	bl	8004ac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004974:	2301      	movs	r3, #1
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	e002      	b.n	8004980 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004980:	69bb      	ldr	r3, [r7, #24]
	}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049a4:	3b01      	subs	r3, #1
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	617b      	str	r3, [r7, #20]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01f      	beq.n	8004a1a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	e012      	b.n	8004a06 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	4413      	add	r3, r2
 80049e6:	7819      	ldrb	r1, [r3, #0]
 80049e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	3334      	adds	r3, #52	; 0x34
 80049f0:	460a      	mov	r2, r1
 80049f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2b0f      	cmp	r3, #15
 8004a0a:	d9e9      	bls.n	80049e0 <prvInitialiseNewTask+0x54>
 8004a0c:	e000      	b.n	8004a10 <prvInitialiseNewTask+0x84>
			{
				break;
 8004a0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a18:	e003      	b.n	8004a22 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	2b06      	cmp	r3, #6
 8004a26:	d901      	bls.n	8004a2c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a28:	2306      	movs	r3, #6
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	3304      	adds	r3, #4
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fe6b 	bl	800471e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fe66 	bl	800471e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	f1c3 0207 	rsb	r2, r3, #7
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	334c      	adds	r3, #76	; 0x4c
 8004a7c:	224c      	movs	r2, #76	; 0x4c
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 f823 	bl	8005acc <memset>
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <prvInitialiseNewTask+0x130>)
 8004a8a:	651a      	str	r2, [r3, #80]	; 0x50
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	4a0c      	ldr	r2, [pc, #48]	; (8004ac0 <prvInitialiseNewTask+0x134>)
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	4a0b      	ldr	r2, [pc, #44]	; (8004ac4 <prvInitialiseNewTask+0x138>)
 8004a96:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	69b8      	ldr	r0, [r7, #24]
 8004a9e:	f000 fc1f 	bl	80052e0 <pxPortInitialiseStack>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ab4:	bf00      	nop
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	200086a8 	.word	0x200086a8
 8004ac0:	20008710 	.word	0x20008710
 8004ac4:	20008778 	.word	0x20008778

08004ac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ad0:	f000 fd30 	bl	8005534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ad4:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <prvAddNewTaskToReadyList+0xb8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <prvAddNewTaskToReadyList+0xb8>)
 8004adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ade:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <prvAddNewTaskToReadyList+0xbc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ae6:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <prvAddNewTaskToReadyList+0xbc>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004aec:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <prvAddNewTaskToReadyList+0xb8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d110      	bne.n	8004b16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004af4:	f000 facc 	bl	8005090 <prvInitialiseTaskLists>
 8004af8:	e00d      	b.n	8004b16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <prvAddNewTaskToReadyList+0xc0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b02:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <prvAddNewTaskToReadyList+0xbc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d802      	bhi.n	8004b16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <prvAddNewTaskToReadyList+0xbc>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <prvAddNewTaskToReadyList+0xc4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <prvAddNewTaskToReadyList+0xc4>)
 8004b1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	2201      	movs	r2, #1
 8004b26:	409a      	lsls	r2, r3
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <prvAddNewTaskToReadyList+0xc8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <prvAddNewTaskToReadyList+0xc8>)
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <prvAddNewTaskToReadyList+0xcc>)
 8004b40:	441a      	add	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7ff fdf5 	bl	8004738 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b4e:	f000 fd21 	bl	8005594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b52:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <prvAddNewTaskToReadyList+0xc0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00e      	beq.n	8004b78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <prvAddNewTaskToReadyList+0xbc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d207      	bcs.n	8004b78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <prvAddNewTaskToReadyList+0xd0>)
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20004a54 	.word	0x20004a54
 8004b84:	20004954 	.word	0x20004954
 8004b88:	20004a60 	.word	0x20004a60
 8004b8c:	20004a70 	.word	0x20004a70
 8004b90:	20004a5c 	.word	0x20004a5c
 8004b94:	20004958 	.word	0x20004958
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d017      	beq.n	8004bde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bae:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <vTaskDelay+0x60>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <vTaskDelay+0x30>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60bb      	str	r3, [r7, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bcc:	f000 f884 	bl	8004cd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fb1e 	bl	8005214 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bd8:	f000 f88c 	bl	8004cf4 <xTaskResumeAll>
 8004bdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <vTaskDelay+0x64>)
 8004be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20004a7c 	.word	0x20004a7c
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c12:	463a      	mov	r2, r7
 8004c14:	1d39      	adds	r1, r7, #4
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fb fd6e 	bl	80006fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	9202      	str	r2, [sp, #8]
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	460a      	mov	r2, r1
 8004c32:	4921      	ldr	r1, [pc, #132]	; (8004cb8 <vTaskStartScheduler+0xb4>)
 8004c34:	4821      	ldr	r0, [pc, #132]	; (8004cbc <vTaskStartScheduler+0xb8>)
 8004c36:	f7ff fe06 	bl	8004846 <xTaskCreateStatic>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a20      	ldr	r2, [pc, #128]	; (8004cc0 <vTaskStartScheduler+0xbc>)
 8004c3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c40:	4b1f      	ldr	r3, [pc, #124]	; (8004cc0 <vTaskStartScheduler+0xbc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e001      	b.n	8004c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d11b      	bne.n	8004c90 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	613b      	str	r3, [r7, #16]
}
 8004c6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c6c:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <vTaskStartScheduler+0xc0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	334c      	adds	r3, #76	; 0x4c
 8004c72:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <vTaskStartScheduler+0xc4>)
 8004c74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <vTaskStartScheduler+0xc8>)
 8004c78:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c7e:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <vTaskStartScheduler+0xcc>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c84:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <vTaskStartScheduler+0xd0>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c8a:	f000 fbb1 	bl	80053f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c8e:	e00e      	b.n	8004cae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d10a      	bne.n	8004cae <vTaskStartScheduler+0xaa>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	60fb      	str	r3, [r7, #12]
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <vTaskStartScheduler+0xa8>
}
 8004cae:	bf00      	nop
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	08005cec 	.word	0x08005cec
 8004cbc:	08005061 	.word	0x08005061
 8004cc0:	20004a78 	.word	0x20004a78
 8004cc4:	20004954 	.word	0x20004954
 8004cc8:	20000064 	.word	0x20000064
 8004ccc:	20004a74 	.word	0x20004a74
 8004cd0:	20004a60 	.word	0x20004a60
 8004cd4:	20004a58 	.word	0x20004a58

08004cd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004cdc:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <vTaskSuspendAll+0x18>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <vTaskSuspendAll+0x18>)
 8004ce4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	20004a7c 	.word	0x20004a7c

08004cf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d02:	4b41      	ldr	r3, [pc, #260]	; (8004e08 <xTaskResumeAll+0x114>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	603b      	str	r3, [r7, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d20:	f000 fc08 	bl	8005534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d24:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <xTaskResumeAll+0x114>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	4a37      	ldr	r2, [pc, #220]	; (8004e08 <xTaskResumeAll+0x114>)
 8004d2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2e:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <xTaskResumeAll+0x114>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d161      	bne.n	8004dfa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d36:	4b35      	ldr	r3, [pc, #212]	; (8004e0c <xTaskResumeAll+0x118>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d05d      	beq.n	8004dfa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d3e:	e02e      	b.n	8004d9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d40:	4b33      	ldr	r3, [pc, #204]	; (8004e10 <xTaskResumeAll+0x11c>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3318      	adds	r3, #24
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fd50 	bl	80047f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fd4b 	bl	80047f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <xTaskResumeAll+0x120>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <xTaskResumeAll+0x120>)
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <xTaskResumeAll+0x124>)
 8004d7c:	441a      	add	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f7ff fcd7 	bl	8004738 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8e:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <xTaskResumeAll+0x128>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d302      	bcc.n	8004d9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d98:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <xTaskResumeAll+0x12c>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <xTaskResumeAll+0x11c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1cc      	bne.n	8004d40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dac:	f000 fa12 	bl	80051d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <xTaskResumeAll+0x130>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d010      	beq.n	8004dde <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dbc:	f000 f836 	bl	8004e2c <xTaskIncrementTick>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004dc6:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <xTaskResumeAll+0x12c>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f1      	bne.n	8004dbc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004dd8:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <xTaskResumeAll+0x130>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <xTaskResumeAll+0x12c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004de6:	2301      	movs	r3, #1
 8004de8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dea:	4b0f      	ldr	r3, [pc, #60]	; (8004e28 <xTaskResumeAll+0x134>)
 8004dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dfa:	f000 fbcb 	bl	8005594 <vPortExitCritical>

	return xAlreadyYielded;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20004a7c 	.word	0x20004a7c
 8004e0c:	20004a54 	.word	0x20004a54
 8004e10:	20004a14 	.word	0x20004a14
 8004e14:	20004a5c 	.word	0x20004a5c
 8004e18:	20004958 	.word	0x20004958
 8004e1c:	20004954 	.word	0x20004954
 8004e20:	20004a68 	.word	0x20004a68
 8004e24:	20004a64 	.word	0x20004a64
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e36:	4b4e      	ldr	r3, [pc, #312]	; (8004f70 <xTaskIncrementTick+0x144>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 808e 	bne.w	8004f5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e40:	4b4c      	ldr	r3, [pc, #304]	; (8004f74 <xTaskIncrementTick+0x148>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e48:	4a4a      	ldr	r2, [pc, #296]	; (8004f74 <xTaskIncrementTick+0x148>)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d120      	bne.n	8004e96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e54:	4b48      	ldr	r3, [pc, #288]	; (8004f78 <xTaskIncrementTick+0x14c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	603b      	str	r3, [r7, #0]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xTaskIncrementTick+0x46>
 8004e74:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <xTaskIncrementTick+0x14c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <xTaskIncrementTick+0x150>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a3e      	ldr	r2, [pc, #248]	; (8004f78 <xTaskIncrementTick+0x14c>)
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	4a3e      	ldr	r2, [pc, #248]	; (8004f7c <xTaskIncrementTick+0x150>)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4b3d      	ldr	r3, [pc, #244]	; (8004f80 <xTaskIncrementTick+0x154>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	4a3c      	ldr	r2, [pc, #240]	; (8004f80 <xTaskIncrementTick+0x154>)
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	f000 f99f 	bl	80051d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e96:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <xTaskIncrementTick+0x158>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d348      	bcc.n	8004f32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ea0:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <xTaskIncrementTick+0x14c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eaa:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <xTaskIncrementTick+0x158>)
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	601a      	str	r2, [r3, #0]
					break;
 8004eb2:	e03e      	b.n	8004f32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb4:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <xTaskIncrementTick+0x14c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d203      	bcs.n	8004ed4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ecc:	4a2d      	ldr	r2, [pc, #180]	; (8004f84 <xTaskIncrementTick+0x158>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ed2:	e02e      	b.n	8004f32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fc8a 	bl	80047f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3318      	adds	r3, #24
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fc81 	bl	80047f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <xTaskIncrementTick+0x15c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <xTaskIncrementTick+0x15c>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <xTaskIncrementTick+0x160>)
 8004f10:	441a      	add	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7ff fc0d 	bl	8004738 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <xTaskIncrementTick+0x164>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d3b9      	bcc.n	8004ea0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f30:	e7b6      	b.n	8004ea0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f32:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <xTaskIncrementTick+0x164>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4914      	ldr	r1, [pc, #80]	; (8004f8c <xTaskIncrementTick+0x160>)
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d901      	bls.n	8004f4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f4e:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <xTaskIncrementTick+0x168>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e004      	b.n	8004f66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <xTaskIncrementTick+0x16c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	4a0d      	ldr	r2, [pc, #52]	; (8004f98 <xTaskIncrementTick+0x16c>)
 8004f64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f66:	697b      	ldr	r3, [r7, #20]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20004a7c 	.word	0x20004a7c
 8004f74:	20004a58 	.word	0x20004a58
 8004f78:	20004a0c 	.word	0x20004a0c
 8004f7c:	20004a10 	.word	0x20004a10
 8004f80:	20004a6c 	.word	0x20004a6c
 8004f84:	20004a74 	.word	0x20004a74
 8004f88:	20004a5c 	.word	0x20004a5c
 8004f8c:	20004958 	.word	0x20004958
 8004f90:	20004954 	.word	0x20004954
 8004f94:	20004a68 	.word	0x20004a68
 8004f98:	20004a64 	.word	0x20004a64

08004f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fa2:	4b29      	ldr	r3, [pc, #164]	; (8005048 <vTaskSwitchContext+0xac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <vTaskSwitchContext+0xb0>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fb0:	e044      	b.n	800503c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004fb2:	4b26      	ldr	r3, [pc, #152]	; (800504c <vTaskSwitchContext+0xb0>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb8:	4b25      	ldr	r3, [pc, #148]	; (8005050 <vTaskSwitchContext+0xb4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	fab3 f383 	clz	r3, r3
 8004fc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
 8004fc8:	f1c3 031f 	rsb	r3, r3, #31
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	4921      	ldr	r1, [pc, #132]	; (8005054 <vTaskSwitchContext+0xb8>)
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	607b      	str	r3, [r7, #4]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <vTaskSwitchContext+0x5a>
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4a14      	ldr	r2, [pc, #80]	; (8005054 <vTaskSwitchContext+0xb8>)
 8005004:	4413      	add	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	3308      	adds	r3, #8
 800501a:	429a      	cmp	r2, r3
 800501c:	d104      	bne.n	8005028 <vTaskSwitchContext+0x8c>
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <vTaskSwitchContext+0xbc>)
 8005030:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <vTaskSwitchContext+0xbc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	334c      	adds	r3, #76	; 0x4c
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <vTaskSwitchContext+0xc0>)
 800503a:	6013      	str	r3, [r2, #0]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	20004a7c 	.word	0x20004a7c
 800504c:	20004a68 	.word	0x20004a68
 8005050:	20004a5c 	.word	0x20004a5c
 8005054:	20004958 	.word	0x20004958
 8005058:	20004954 	.word	0x20004954
 800505c:	20000064 	.word	0x20000064

08005060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005068:	f000 f852 	bl	8005110 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <prvIdleTask+0x28>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d9f9      	bls.n	8005068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <prvIdleTask+0x2c>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005084:	e7f0      	b.n	8005068 <prvIdleTask+0x8>
 8005086:	bf00      	nop
 8005088:	20004958 	.word	0x20004958
 800508c:	e000ed04 	.word	0xe000ed04

08005090 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005096:	2300      	movs	r3, #0
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	e00c      	b.n	80050b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <prvInitialiseTaskLists+0x60>)
 80050a8:	4413      	add	r3, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fb17 	bl	80046de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3301      	adds	r3, #1
 80050b4:	607b      	str	r3, [r7, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b06      	cmp	r3, #6
 80050ba:	d9ef      	bls.n	800509c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050bc:	480d      	ldr	r0, [pc, #52]	; (80050f4 <prvInitialiseTaskLists+0x64>)
 80050be:	f7ff fb0e 	bl	80046de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050c2:	480d      	ldr	r0, [pc, #52]	; (80050f8 <prvInitialiseTaskLists+0x68>)
 80050c4:	f7ff fb0b 	bl	80046de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <prvInitialiseTaskLists+0x6c>)
 80050ca:	f7ff fb08 	bl	80046de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050ce:	480c      	ldr	r0, [pc, #48]	; (8005100 <prvInitialiseTaskLists+0x70>)
 80050d0:	f7ff fb05 	bl	80046de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050d4:	480b      	ldr	r0, [pc, #44]	; (8005104 <prvInitialiseTaskLists+0x74>)
 80050d6:	f7ff fb02 	bl	80046de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <prvInitialiseTaskLists+0x78>)
 80050dc:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <prvInitialiseTaskLists+0x64>)
 80050de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <prvInitialiseTaskLists+0x7c>)
 80050e2:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <prvInitialiseTaskLists+0x68>)
 80050e4:	601a      	str	r2, [r3, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20004958 	.word	0x20004958
 80050f4:	200049e4 	.word	0x200049e4
 80050f8:	200049f8 	.word	0x200049f8
 80050fc:	20004a14 	.word	0x20004a14
 8005100:	20004a28 	.word	0x20004a28
 8005104:	20004a40 	.word	0x20004a40
 8005108:	20004a0c 	.word	0x20004a0c
 800510c:	20004a10 	.word	0x20004a10

08005110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005116:	e019      	b.n	800514c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005118:	f000 fa0c 	bl	8005534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511c:	4b10      	ldr	r3, [pc, #64]	; (8005160 <prvCheckTasksWaitingTermination+0x50>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fb62 	bl	80047f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <prvCheckTasksWaitingTermination+0x54>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3b01      	subs	r3, #1
 8005134:	4a0b      	ldr	r2, [pc, #44]	; (8005164 <prvCheckTasksWaitingTermination+0x54>)
 8005136:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <prvCheckTasksWaitingTermination+0x58>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3b01      	subs	r3, #1
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <prvCheckTasksWaitingTermination+0x58>)
 8005140:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005142:	f000 fa27 	bl	8005594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f810 	bl	800516c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <prvCheckTasksWaitingTermination+0x58>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e1      	bne.n	8005118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20004a28 	.word	0x20004a28
 8005164:	20004a54 	.word	0x20004a54
 8005168:	20004a3c 	.word	0x20004a3c

0800516c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	334c      	adds	r3, #76	; 0x4c
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fcaf 	bl	8005adc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005184:	2b00      	cmp	r3, #0
 8005186:	d108      	bne.n	800519a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fb7f 	bl	8005890 <vPortFree>
				vPortFree( pxTCB );
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fb7c 	bl	8005890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005198:	e018      	b.n	80051cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d103      	bne.n	80051ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb73 	bl	8005890 <vPortFree>
	}
 80051aa:	e00f      	b.n	80051cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d00a      	beq.n	80051cc <prvDeleteTCB+0x60>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60fb      	str	r3, [r7, #12]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <prvDeleteTCB+0x5e>
	}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051da:	4b0c      	ldr	r3, [pc, #48]	; (800520c <prvResetNextTaskUnblockTime+0x38>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <prvResetNextTaskUnblockTime+0x3c>)
 80051e6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051ec:	e008      	b.n	8005200 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ee:	4b07      	ldr	r3, [pc, #28]	; (800520c <prvResetNextTaskUnblockTime+0x38>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a04      	ldr	r2, [pc, #16]	; (8005210 <prvResetNextTaskUnblockTime+0x3c>)
 80051fe:	6013      	str	r3, [r2, #0]
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20004a0c 	.word	0x20004a0c
 8005210:	20004a74 	.word	0x20004a74

08005214 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800521e:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005224:	4b28      	ldr	r3, [pc, #160]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3304      	adds	r3, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fae1 	bl	80047f2 <uxListRemove>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005236:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	2201      	movs	r2, #1
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	4b21      	ldr	r3, [pc, #132]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4013      	ands	r3, r2
 800524a:	4a20      	ldr	r2, [pc, #128]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800524c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d10a      	bne.n	800526c <prvAddCurrentTaskToDelayedList+0x58>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800525c:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	481a      	ldr	r0, [pc, #104]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005266:	f7ff fa67 	bl	8004738 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800526a:	e026      	b.n	80052ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4413      	add	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005274:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	429a      	cmp	r2, r3
 8005282:	d209      	bcs.n	8005298 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7ff fa75 	bl	8004780 <vListInsert>
}
 8005296:	e010      	b.n	80052ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f7ff fa6b 	bl	8004780 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d202      	bcs.n	80052ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052b4:	4a09      	ldr	r2, [pc, #36]	; (80052dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6013      	str	r3, [r2, #0]
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20004a58 	.word	0x20004a58
 80052c8:	20004954 	.word	0x20004954
 80052cc:	20004a5c 	.word	0x20004a5c
 80052d0:	20004a40 	.word	0x20004a40
 80052d4:	20004a10 	.word	0x20004a10
 80052d8:	20004a0c 	.word	0x20004a0c
 80052dc:	20004a74 	.word	0x20004a74

080052e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3b04      	subs	r3, #4
 80052f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3b04      	subs	r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f023 0201 	bic.w	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3b04      	subs	r3, #4
 800530e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005310:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <pxPortInitialiseStack+0x64>)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b14      	subs	r3, #20
 800531a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b04      	subs	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f06f 0202 	mvn.w	r2, #2
 800532e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b20      	subs	r3, #32
 8005334:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	08005349 	.word	0x08005349

08005348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <prvTaskExitError+0x54>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d00a      	beq.n	8005372 <prvTaskExitError+0x2a>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60fb      	str	r3, [r7, #12]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <prvTaskExitError+0x28>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	60bb      	str	r3, [r7, #8]
}
 8005384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005386:	bf00      	nop
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0fc      	beq.n	8005388 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	20000014 	.word	0x20000014

080053a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <pxCurrentTCBConst2>)
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	6808      	ldr	r0, [r1, #0]
 80053a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053aa:	f380 8809 	msr	PSP, r0
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f380 8811 	msr	BASEPRI, r0
 80053ba:	4770      	bx	lr
 80053bc:	f3af 8000 	nop.w

080053c0 <pxCurrentTCBConst2>:
 80053c0:	20004954 	.word	0x20004954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop

080053c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053c8:	4808      	ldr	r0, [pc, #32]	; (80053ec <prvPortStartFirstTask+0x24>)
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	6800      	ldr	r0, [r0, #0]
 80053ce:	f380 8808 	msr	MSP, r0
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8814 	msr	CONTROL, r0
 80053da:	b662      	cpsie	i
 80053dc:	b661      	cpsie	f
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	df00      	svc	0
 80053e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053ea:	bf00      	nop
 80053ec:	e000ed08 	.word	0xe000ed08

080053f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053f6:	4b46      	ldr	r3, [pc, #280]	; (8005510 <xPortStartScheduler+0x120>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a46      	ldr	r2, [pc, #280]	; (8005514 <xPortStartScheduler+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10a      	bne.n	8005416 <xPortStartScheduler+0x26>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	613b      	str	r3, [r7, #16]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005416:	4b3e      	ldr	r3, [pc, #248]	; (8005510 <xPortStartScheduler+0x120>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a3f      	ldr	r2, [pc, #252]	; (8005518 <xPortStartScheduler+0x128>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10a      	bne.n	8005436 <xPortStartScheduler+0x46>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <xPortStartScheduler+0x12c>)
 8005438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	22ff      	movs	r2, #255	; 0xff
 8005446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005458:	b2da      	uxtb	r2, r3
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <xPortStartScheduler+0x130>)
 800545c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <xPortStartScheduler+0x134>)
 8005460:	2207      	movs	r2, #7
 8005462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005464:	e009      	b.n	800547a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005466:	4b2f      	ldr	r3, [pc, #188]	; (8005524 <xPortStartScheduler+0x134>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3b01      	subs	r3, #1
 800546c:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <xPortStartScheduler+0x134>)
 800546e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	b2db      	uxtb	r3, r3
 8005478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d0ef      	beq.n	8005466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005486:	4b27      	ldr	r3, [pc, #156]	; (8005524 <xPortStartScheduler+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f1c3 0307 	rsb	r3, r3, #7
 800548e:	2b04      	cmp	r3, #4
 8005490:	d00a      	beq.n	80054a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60bb      	str	r3, [r7, #8]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <xPortStartScheduler+0x134>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <xPortStartScheduler+0x134>)
 80054b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054b2:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <xPortStartScheduler+0x134>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <xPortStartScheduler+0x134>)
 80054bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054c6:	4b18      	ldr	r3, [pc, #96]	; (8005528 <xPortStartScheduler+0x138>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <xPortStartScheduler+0x138>)
 80054cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054d2:	4b15      	ldr	r3, [pc, #84]	; (8005528 <xPortStartScheduler+0x138>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <xPortStartScheduler+0x138>)
 80054d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054de:	f000 f8dd 	bl	800569c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <xPortStartScheduler+0x13c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054e8:	f000 f8fc 	bl	80056e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054ec:	4b10      	ldr	r3, [pc, #64]	; (8005530 <xPortStartScheduler+0x140>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <xPortStartScheduler+0x140>)
 80054f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054f8:	f7ff ff66 	bl	80053c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054fc:	f7ff fd4e 	bl	8004f9c <vTaskSwitchContext>
	prvTaskExitError();
 8005500:	f7ff ff22 	bl	8005348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	e000ed00 	.word	0xe000ed00
 8005514:	410fc271 	.word	0x410fc271
 8005518:	410fc270 	.word	0x410fc270
 800551c:	e000e400 	.word	0xe000e400
 8005520:	20004a80 	.word	0x20004a80
 8005524:	20004a84 	.word	0x20004a84
 8005528:	e000ed20 	.word	0xe000ed20
 800552c:	20000014 	.word	0x20000014
 8005530:	e000ef34 	.word	0xe000ef34

08005534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	607b      	str	r3, [r7, #4]
}
 800554c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <vPortEnterCritical+0x58>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	4a0d      	ldr	r2, [pc, #52]	; (800558c <vPortEnterCritical+0x58>)
 8005556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <vPortEnterCritical+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10f      	bne.n	8005580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <vPortEnterCritical+0x5c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <vPortEnterCritical+0x4c>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	603b      	str	r3, [r7, #0]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <vPortEnterCritical+0x4a>
	}
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000014 	.word	0x20000014
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800559a:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <vPortExitCritical+0x50>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <vPortExitCritical+0x24>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	607b      	str	r3, [r7, #4]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <vPortExitCritical+0x50>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3b01      	subs	r3, #1
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <vPortExitCritical+0x50>)
 80055c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055c2:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <vPortExitCritical+0x50>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <vPortExitCritical+0x42>
 80055ca:	2300      	movs	r3, #0
 80055cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000014 	.word	0x20000014
	...

080055f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055f0:	f3ef 8009 	mrs	r0, PSP
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4b15      	ldr	r3, [pc, #84]	; (8005650 <pxCurrentTCBConst>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	f01e 0f10 	tst.w	lr, #16
 8005600:	bf08      	it	eq
 8005602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005614:	f380 8811 	msr	BASEPRI, r0
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f7ff fcbc 	bl	8004f9c <vTaskSwitchContext>
 8005624:	f04f 0000 	mov.w	r0, #0
 8005628:	f380 8811 	msr	BASEPRI, r0
 800562c:	bc09      	pop	{r0, r3}
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	6808      	ldr	r0, [r1, #0]
 8005632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005636:	f01e 0f10 	tst.w	lr, #16
 800563a:	bf08      	it	eq
 800563c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005640:	f380 8809 	msr	PSP, r0
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w

08005650 <pxCurrentTCBConst>:
 8005650:	20004954 	.word	0x20004954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop

08005658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	607b      	str	r3, [r7, #4]
}
 8005670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005672:	f7ff fbdb 	bl	8004e2c <xTaskIncrementTick>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <SysTick_Handler+0x40>)
 800567e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f383 8811 	msr	BASEPRI, r3
}
 800568e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <vPortSetupTimerInterrupt+0x34>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <vPortSetupTimerInterrupt+0x38>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <vPortSetupTimerInterrupt+0x3c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <vPortSetupTimerInterrupt+0x40>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	099b      	lsrs	r3, r3, #6
 80056b8:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <vPortSetupTimerInterrupt+0x44>)
 80056ba:	3b01      	subs	r3, #1
 80056bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056be:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <vPortSetupTimerInterrupt+0x34>)
 80056c0:	2207      	movs	r2, #7
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000e010 	.word	0xe000e010
 80056d4:	e000e018 	.word	0xe000e018
 80056d8:	20000000 	.word	0x20000000
 80056dc:	10624dd3 	.word	0x10624dd3
 80056e0:	e000e014 	.word	0xe000e014

080056e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056f4 <vPortEnableVFP+0x10>
 80056e8:	6801      	ldr	r1, [r0, #0]
 80056ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ee:	6001      	str	r1, [r0, #0]
 80056f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056f2:	bf00      	nop
 80056f4:	e000ed88 	.word	0xe000ed88

080056f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	; 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005704:	f7ff fae8 	bl	8004cd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005708:	4b5b      	ldr	r3, [pc, #364]	; (8005878 <pvPortMalloc+0x180>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005710:	f000 f920 	bl	8005954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005714:	4b59      	ldr	r3, [pc, #356]	; (800587c <pvPortMalloc+0x184>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	f040 8093 	bne.w	8005848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d01d      	beq.n	8005764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005728:	2208      	movs	r2, #8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	2b00      	cmp	r3, #0
 8005738:	d014      	beq.n	8005764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f023 0307 	bic.w	r3, r3, #7
 8005740:	3308      	adds	r3, #8
 8005742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <pvPortMalloc+0x6c>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	617b      	str	r3, [r7, #20]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d06e      	beq.n	8005848 <pvPortMalloc+0x150>
 800576a:	4b45      	ldr	r3, [pc, #276]	; (8005880 <pvPortMalloc+0x188>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d869      	bhi.n	8005848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005774:	4b43      	ldr	r3, [pc, #268]	; (8005884 <pvPortMalloc+0x18c>)
 8005776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005778:	4b42      	ldr	r3, [pc, #264]	; (8005884 <pvPortMalloc+0x18c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800577e:	e004      	b.n	800578a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d903      	bls.n	800579c <pvPortMalloc+0xa4>
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f1      	bne.n	8005780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800579c:	4b36      	ldr	r3, [pc, #216]	; (8005878 <pvPortMalloc+0x180>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d050      	beq.n	8005848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2208      	movs	r2, #8
 80057ac:	4413      	add	r3, r2
 80057ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	2308      	movs	r3, #8
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d91f      	bls.n	8005808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <pvPortMalloc+0xf8>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	613b      	str	r3, [r7, #16]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005802:	69b8      	ldr	r0, [r7, #24]
 8005804:	f000 f908 	bl	8005a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005808:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <pvPortMalloc+0x188>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <pvPortMalloc+0x188>)
 8005814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005816:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <pvPortMalloc+0x188>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <pvPortMalloc+0x190>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d203      	bcs.n	800582a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005822:	4b17      	ldr	r3, [pc, #92]	; (8005880 <pvPortMalloc+0x188>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a18      	ldr	r2, [pc, #96]	; (8005888 <pvPortMalloc+0x190>)
 8005828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <pvPortMalloc+0x184>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	431a      	orrs	r2, r3
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800583e:	4b13      	ldr	r3, [pc, #76]	; (800588c <pvPortMalloc+0x194>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3301      	adds	r3, #1
 8005844:	4a11      	ldr	r2, [pc, #68]	; (800588c <pvPortMalloc+0x194>)
 8005846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005848:	f7ff fa54 	bl	8004cf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <pvPortMalloc+0x174>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	60fb      	str	r3, [r7, #12]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <pvPortMalloc+0x172>
	return pvReturn;
 800586c:	69fb      	ldr	r3, [r7, #28]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3728      	adds	r7, #40	; 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20008690 	.word	0x20008690
 800587c:	200086a4 	.word	0x200086a4
 8005880:	20008694 	.word	0x20008694
 8005884:	20008688 	.word	0x20008688
 8005888:	20008698 	.word	0x20008698
 800588c:	2000869c 	.word	0x2000869c

08005890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d04d      	beq.n	800593e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058a2:	2308      	movs	r3, #8
 80058a4:	425b      	negs	r3, r3
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	4b24      	ldr	r3, [pc, #144]	; (8005948 <vPortFree+0xb8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <vPortFree+0x44>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <vPortFree+0x62>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60bb      	str	r3, [r7, #8]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <vPortFree+0xb8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01e      	beq.n	800593e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d11a      	bne.n	800593e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <vPortFree+0xb8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005918:	f7ff f9de 	bl	8004cd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <vPortFree+0xbc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4413      	add	r3, r2
 8005926:	4a09      	ldr	r2, [pc, #36]	; (800594c <vPortFree+0xbc>)
 8005928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800592a:	6938      	ldr	r0, [r7, #16]
 800592c:	f000 f874 	bl	8005a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <vPortFree+0xc0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a06      	ldr	r2, [pc, #24]	; (8005950 <vPortFree+0xc0>)
 8005938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800593a:	f7ff f9db 	bl	8004cf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800593e:	bf00      	nop
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200086a4 	.word	0x200086a4
 800594c:	20008694 	.word	0x20008694
 8005950:	200086a0 	.word	0x200086a0

08005954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800595a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800595e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <prvHeapInit+0xac>)
 8005962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00c      	beq.n	8005988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3307      	adds	r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0307 	bic.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <prvHeapInit+0xac>)
 8005984:	4413      	add	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <prvHeapInit+0xb0>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005992:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <prvHeapInit+0xb0>)
 8005994:	2200      	movs	r2, #0
 8005996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4413      	add	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059a0:	2208      	movs	r2, #8
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <prvHeapInit+0xb4>)
 80059b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <prvHeapInit+0xb4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <prvHeapInit+0xb4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvHeapInit+0xb4>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <prvHeapInit+0xb8>)
 80059e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <prvHeapInit+0xbc>)
 80059ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <prvHeapInit+0xc0>)
 80059ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	20004a88 	.word	0x20004a88
 8005a04:	20008688 	.word	0x20008688
 8005a08:	20008690 	.word	0x20008690
 8005a0c:	20008698 	.word	0x20008698
 8005a10:	20008694 	.word	0x20008694
 8005a14:	200086a4 	.word	0x200086a4

08005a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a20:	4b28      	ldr	r3, [pc, #160]	; (8005ac4 <prvInsertBlockIntoFreeList+0xac>)
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e002      	b.n	8005a2c <prvInsertBlockIntoFreeList+0x14>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d8f7      	bhi.n	8005a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4413      	add	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d108      	bne.n	8005a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	441a      	add	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d118      	bne.n	8005aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d00d      	beq.n	8005a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e008      	b.n	8005aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e003      	b.n	8005aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d002      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20008688 	.word	0x20008688
 8005ac8:	20008690 	.word	0x20008690

08005acc <memset>:
 8005acc:	4402      	add	r2, r0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d100      	bne.n	8005ad6 <memset+0xa>
 8005ad4:	4770      	bx	lr
 8005ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8005ada:	e7f9      	b.n	8005ad0 <memset+0x4>

08005adc <_reclaim_reent>:
 8005adc:	4b29      	ldr	r3, [pc, #164]	; (8005b84 <_reclaim_reent+0xa8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4283      	cmp	r3, r0
 8005ae2:	b570      	push	{r4, r5, r6, lr}
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	d04b      	beq.n	8005b80 <_reclaim_reent+0xa4>
 8005ae8:	69c3      	ldr	r3, [r0, #28]
 8005aea:	b143      	cbz	r3, 8005afe <_reclaim_reent+0x22>
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d144      	bne.n	8005b7c <_reclaim_reent+0xa0>
 8005af2:	69e3      	ldr	r3, [r4, #28]
 8005af4:	6819      	ldr	r1, [r3, #0]
 8005af6:	b111      	cbz	r1, 8005afe <_reclaim_reent+0x22>
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 f86b 	bl	8005bd4 <_free_r>
 8005afe:	6961      	ldr	r1, [r4, #20]
 8005b00:	b111      	cbz	r1, 8005b08 <_reclaim_reent+0x2c>
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 f866 	bl	8005bd4 <_free_r>
 8005b08:	69e1      	ldr	r1, [r4, #28]
 8005b0a:	b111      	cbz	r1, 8005b12 <_reclaim_reent+0x36>
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f861 	bl	8005bd4 <_free_r>
 8005b12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b14:	b111      	cbz	r1, 8005b1c <_reclaim_reent+0x40>
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 f85c 	bl	8005bd4 <_free_r>
 8005b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b1e:	b111      	cbz	r1, 8005b26 <_reclaim_reent+0x4a>
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 f857 	bl	8005bd4 <_free_r>
 8005b26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b28:	b111      	cbz	r1, 8005b30 <_reclaim_reent+0x54>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f852 	bl	8005bd4 <_free_r>
 8005b30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b32:	b111      	cbz	r1, 8005b3a <_reclaim_reent+0x5e>
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 f84d 	bl	8005bd4 <_free_r>
 8005b3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005b3c:	b111      	cbz	r1, 8005b44 <_reclaim_reent+0x68>
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f848 	bl	8005bd4 <_free_r>
 8005b44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b46:	b111      	cbz	r1, 8005b4e <_reclaim_reent+0x72>
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 f843 	bl	8005bd4 <_free_r>
 8005b4e:	6a23      	ldr	r3, [r4, #32]
 8005b50:	b1b3      	cbz	r3, 8005b80 <_reclaim_reent+0xa4>
 8005b52:	4620      	mov	r0, r4
 8005b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b58:	4718      	bx	r3
 8005b5a:	5949      	ldr	r1, [r1, r5]
 8005b5c:	b941      	cbnz	r1, 8005b70 <_reclaim_reent+0x94>
 8005b5e:	3504      	adds	r5, #4
 8005b60:	69e3      	ldr	r3, [r4, #28]
 8005b62:	2d80      	cmp	r5, #128	; 0x80
 8005b64:	68d9      	ldr	r1, [r3, #12]
 8005b66:	d1f8      	bne.n	8005b5a <_reclaim_reent+0x7e>
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f000 f833 	bl	8005bd4 <_free_r>
 8005b6e:	e7c0      	b.n	8005af2 <_reclaim_reent+0x16>
 8005b70:	680e      	ldr	r6, [r1, #0]
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 f82e 	bl	8005bd4 <_free_r>
 8005b78:	4631      	mov	r1, r6
 8005b7a:	e7ef      	b.n	8005b5c <_reclaim_reent+0x80>
 8005b7c:	2500      	movs	r5, #0
 8005b7e:	e7ef      	b.n	8005b60 <_reclaim_reent+0x84>
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
 8005b82:	bf00      	nop
 8005b84:	20000064 	.word	0x20000064

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	4d0d      	ldr	r5, [pc, #52]	; (8005bc0 <__libc_init_array+0x38>)
 8005b8c:	4c0d      	ldr	r4, [pc, #52]	; (8005bc4 <__libc_init_array+0x3c>)
 8005b8e:	1b64      	subs	r4, r4, r5
 8005b90:	10a4      	asrs	r4, r4, #2
 8005b92:	2600      	movs	r6, #0
 8005b94:	42a6      	cmp	r6, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	4d0b      	ldr	r5, [pc, #44]	; (8005bc8 <__libc_init_array+0x40>)
 8005b9a:	4c0c      	ldr	r4, [pc, #48]	; (8005bcc <__libc_init_array+0x44>)
 8005b9c:	f000 f872 	bl	8005c84 <_init>
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	42a6      	cmp	r6, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb0:	4798      	blx	r3
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bba:	4798      	blx	r3
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	08005d1c 	.word	0x08005d1c
 8005bc4:	08005d1c 	.word	0x08005d1c
 8005bc8:	08005d1c 	.word	0x08005d1c
 8005bcc:	08005d20 	.word	0x08005d20

08005bd0 <__retarget_lock_acquire_recursive>:
 8005bd0:	4770      	bx	lr

08005bd2 <__retarget_lock_release_recursive>:
 8005bd2:	4770      	bx	lr

08005bd4 <_free_r>:
 8005bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bd6:	2900      	cmp	r1, #0
 8005bd8:	d044      	beq.n	8005c64 <_free_r+0x90>
 8005bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bde:	9001      	str	r0, [sp, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f1a1 0404 	sub.w	r4, r1, #4
 8005be6:	bfb8      	it	lt
 8005be8:	18e4      	addlt	r4, r4, r3
 8005bea:	f000 f83f 	bl	8005c6c <__malloc_lock>
 8005bee:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <_free_r+0x94>)
 8005bf0:	9801      	ldr	r0, [sp, #4]
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	b933      	cbnz	r3, 8005c04 <_free_r+0x30>
 8005bf6:	6063      	str	r3, [r4, #4]
 8005bf8:	6014      	str	r4, [r2, #0]
 8005bfa:	b003      	add	sp, #12
 8005bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c00:	f000 b83a 	b.w	8005c78 <__malloc_unlock>
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d908      	bls.n	8005c1a <_free_r+0x46>
 8005c08:	6825      	ldr	r5, [r4, #0]
 8005c0a:	1961      	adds	r1, r4, r5
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf01      	itttt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	1949      	addeq	r1, r1, r5
 8005c16:	6021      	streq	r1, [r4, #0]
 8005c18:	e7ed      	b.n	8005bf6 <_free_r+0x22>
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	b10b      	cbz	r3, 8005c24 <_free_r+0x50>
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d9fa      	bls.n	8005c1a <_free_r+0x46>
 8005c24:	6811      	ldr	r1, [r2, #0]
 8005c26:	1855      	adds	r5, r2, r1
 8005c28:	42a5      	cmp	r5, r4
 8005c2a:	d10b      	bne.n	8005c44 <_free_r+0x70>
 8005c2c:	6824      	ldr	r4, [r4, #0]
 8005c2e:	4421      	add	r1, r4
 8005c30:	1854      	adds	r4, r2, r1
 8005c32:	42a3      	cmp	r3, r4
 8005c34:	6011      	str	r1, [r2, #0]
 8005c36:	d1e0      	bne.n	8005bfa <_free_r+0x26>
 8005c38:	681c      	ldr	r4, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	6053      	str	r3, [r2, #4]
 8005c3e:	440c      	add	r4, r1
 8005c40:	6014      	str	r4, [r2, #0]
 8005c42:	e7da      	b.n	8005bfa <_free_r+0x26>
 8005c44:	d902      	bls.n	8005c4c <_free_r+0x78>
 8005c46:	230c      	movs	r3, #12
 8005c48:	6003      	str	r3, [r0, #0]
 8005c4a:	e7d6      	b.n	8005bfa <_free_r+0x26>
 8005c4c:	6825      	ldr	r5, [r4, #0]
 8005c4e:	1961      	adds	r1, r4, r5
 8005c50:	428b      	cmp	r3, r1
 8005c52:	bf04      	itt	eq
 8005c54:	6819      	ldreq	r1, [r3, #0]
 8005c56:	685b      	ldreq	r3, [r3, #4]
 8005c58:	6063      	str	r3, [r4, #4]
 8005c5a:	bf04      	itt	eq
 8005c5c:	1949      	addeq	r1, r1, r5
 8005c5e:	6021      	streq	r1, [r4, #0]
 8005c60:	6054      	str	r4, [r2, #4]
 8005c62:	e7ca      	b.n	8005bfa <_free_r+0x26>
 8005c64:	b003      	add	sp, #12
 8005c66:	bd30      	pop	{r4, r5, pc}
 8005c68:	200087e4 	.word	0x200087e4

08005c6c <__malloc_lock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_lock+0x8>)
 8005c6e:	f7ff bfaf 	b.w	8005bd0 <__retarget_lock_acquire_recursive>
 8005c72:	bf00      	nop
 8005c74:	200087e0 	.word	0x200087e0

08005c78 <__malloc_unlock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__malloc_unlock+0x8>)
 8005c7a:	f7ff bfaa 	b.w	8005bd2 <__retarget_lock_release_recursive>
 8005c7e:	bf00      	nop
 8005c80:	200087e0 	.word	0x200087e0

08005c84 <_init>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr

08005c90 <_fini>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr
