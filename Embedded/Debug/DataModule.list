
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a41c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  0801a5f0  0801a5f0  0002a5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801adec  0801adec  00030314  2**0
                  CONTENTS
  4 .ARM          00000008  0801adec  0801adec  0002adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801adf4  0801adf4  00030314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801adf4  0801adf4  0002adf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801adf8  0801adf8  0002adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0801adfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b064  20000314  0801b110  00030314  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2000b378  0801b110  0003b378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY
 13 .debug_info   000334d5  00000000  00000000  00030387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008917  00000000  00000000  0006385c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a60  00000000  00000000  0006c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002065  00000000  00000000  0006ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000312da  00000000  00000000  00070c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f049  00000000  00000000  000a1f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7954  00000000  00000000  000e0f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bf64  00000000  00000000  001d88b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001e4818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000314 	.word	0x20000314
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a5d4 	.word	0x0801a5d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000318 	.word	0x20000318
 800020c:	0801a5d4 	.word	0x0801a5d4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <adxl_write>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void adxl_write (uint8_t reg, uint8_t value)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, adxl_address, data, 2, 100);
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	21a6      	movs	r1, #166	; 0xa6
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <adxl_write+0x34>)
 8000fca:	f004 f8b5 	bl	8005138 <HAL_I2C_Master_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20005960 	.word	0x20005960

08000fdc <adxl_read_values>:

void adxl_read_values (uint8_t reg)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	//HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, (uint8_t *)data_rec, 6, 100);
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <adxl_read_address>:

void adxl_read_address (uint8_t reg)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	b29a      	uxth	r2, r3
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <adxl_read_address+0x2c>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	21a6      	movs	r1, #166	; 0xa6
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <adxl_read_address+0x30>)
 8001014:	f004 f98e 	bl	8005334 <HAL_I2C_Mem_Read>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000330 	.word	0x20000330
 8001024:	20005960 	.word	0x20005960

08001028 <adxl_init>:

void adxl_init (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	adxl_read_address (0x00); // read the DEVID
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ffe1 	bl	8000ff4 <adxl_read_address>
	adxl_write (0x31, 0x11);  // data_format range= +- 16g
 8001032:	2111      	movs	r1, #17
 8001034:	2031      	movs	r0, #49	; 0x31
 8001036:	f7ff ffb5 	bl	8000fa4 <adxl_write>
	adxl_write (0x2d, 0x00);  // reset all bits
 800103a:	2100      	movs	r1, #0
 800103c:	202d      	movs	r0, #45	; 0x2d
 800103e:	f7ff ffb1 	bl	8000fa4 <adxl_write>
	adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz
 8001042:	2108      	movs	r1, #8
 8001044:	202d      	movs	r0, #45	; 0x2d
 8001046:	f7ff ffad 	bl	8000fa4 <adxl_write>

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <setPath>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char *dir, char* sensorData,  uint8_t path)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	71fb      	strb	r3, [r7, #7]
	sprintf(dir, "Data%d", path);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	461a      	mov	r2, r3
 8001062:	4907      	ldr	r1, [pc, #28]	; (8001080 <setPath+0x30>)
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f017 f903 	bl	8018270 <siprintf>
	sprintf(sensorData, "Data%d/Data%d.txt", path, path);
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4905      	ldr	r1, [pc, #20]	; (8001084 <setPath+0x34>)
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f017 f8fd 	bl	8018270 <siprintf>

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0801a5f0 	.word	0x0801a5f0
 8001084:	0801a5f8 	.word	0x0801a5f8

08001088 <createNewFile>:
void createNewFile(char *dir, char* sensorData,  uint8_t *pathPtr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	uint8_t path = *pathPtr;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <createNewFile+0x48>)
 800109c:	f000 f81a 	bl	80010d4 <Mount_SD>
	Format_SD(path);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f840 	bl	8001128 <Format_SD>
	Create_Dir(dir);
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f955 	bl	8001358 <Create_Dir>
	Create_File(sensorData);
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f000 f8d6 	bl	8001260 <Create_File>

	Unmount_SD("/");
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <createNewFile+0x48>)
 80010b6:	f000 f823 	bl	8001100 <Unmount_SD>
	(*pathPtr)++;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0801a60c 	.word	0x0801a60c

080010d4 <Mount_SD>:
	HAL_UART_Transmit(UART, (uint8_t*) string, strlen(string), HAL_MAX_DELAY);
#endif
}

void Mount_SD(const TCHAR *path)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <Mount_SD+0x24>)
 80010e2:	f011 fee3 	bl	8012eac <f_mount>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <Mount_SD+0x28>)
 80010ec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
		Send_Uart("ERROR!!! in mounting SD CARD...\n\n");
	else
		Send_Uart("SD CARD mounted successfully...\n");
#endif
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000334 	.word	0x20000334
 80010fc:	200007b0 	.word	0x200007b0

08001100 <Unmount_SD>:

void Unmount_SD(const TCHAR *path)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	2000      	movs	r0, #0
 800110e:	f011 fecd 	bl	8012eac <f_mount>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <Unmount_SD+0x24>)
 8001118:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
		Send_Uart("SD CARD UNMOUNTED successfully...\n\n\n");
	else
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
#endif
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200007b0 	.word	0x200007b0

08001128 <Format_SD>:
	return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b096      	sub	sp, #88	; 0x58
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	DIR dir;
	FILINFO fno;
	char *path = pvPortMalloc(20 * sizeof(char));
 8001132:	2014      	movs	r0, #20
 8001134:	f015 fba8 	bl	8016888 <pvPortMalloc>
 8001138:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(path, "/Data%d", dirNumber);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	461a      	mov	r2, r3
 800113e:	4943      	ldr	r1, [pc, #268]	; (800124c <Format_SD+0x124>)
 8001140:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001142:	f017 f895 	bl	8018270 <siprintf>
	fresult = f_opendir(&dir, path);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800114c:	4618      	mov	r0, r3
 800114e:	f012 fb32 	bl	80137b6 <f_opendir>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <Format_SD+0x128>)
 8001158:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <Format_SD+0x128>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d154      	bne.n	800120c <Format_SD+0xe4>
	{
		while (1)
		{
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f012 fbc6 	bl	80138fe <f_readdir>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <Format_SD+0x128>)
 8001178:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0)
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <Format_SD+0x128>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d13f      	bne.n	8001202 <Format_SD+0xda>
 8001182:	7d7b      	ldrb	r3, [r7, #21]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d03c      	beq.n	8001202 <Format_SD+0xda>
				break; /* Break on error or end of dir */
			if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	3309      	adds	r3, #9
 800118e:	4619      	mov	r1, r3
 8001190:	4830      	ldr	r0, [pc, #192]	; (8001254 <Format_SD+0x12c>)
 8001192:	f7ff f83d 	bl	8000210 <strcmp>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02f      	beq.n	80011fc <Format_SD+0xd4>
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	3309      	adds	r3, #9
 80011a2:	4619      	mov	r1, r3
 80011a4:	482c      	ldr	r0, [pc, #176]	; (8001258 <Format_SD+0x130>)
 80011a6:	f7ff f833 	bl	8000210 <strcmp>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <Format_SD+0xd4>
			{
				continue;
			}

			sprintf(path, "/Data%d/%s", dirNumber, fno.fname);
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	3309      	adds	r3, #9
 80011b8:	4928      	ldr	r1, [pc, #160]	; (800125c <Format_SD+0x134>)
 80011ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011bc:	f017 f858 	bl	8018270 <siprintf>
			if (fno.fattrib & AM_DIR) /* It is a directory */
 80011c0:	7d3b      	ldrb	r3, [r7, #20]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00c      	beq.n	80011e4 <Format_SD+0xbc>
			{

				fresult = Format_SD(dirNumber);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ffab 	bl	8001128 <Format_SD>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <Format_SD+0x128>)
 80011d8:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <Format_SD+0x128>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0bf      	beq.n	8001162 <Format_SD+0x3a>
					break;
 80011e2:	e00e      	b.n	8001202 <Format_SD+0xda>
			}
			else
			{
				fresult = f_unlink(path);
 80011e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011e6:	f012 fc0d 	bl	8013a04 <f_unlink>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <Format_SD+0x128>)
 80011f0:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <Format_SD+0x128>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <Format_SD+0xd8>
 80011fa:	e7b2      	b.n	8001162 <Format_SD+0x3a>
				continue;
 80011fc:	bf00      	nop
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 80011fe:	e7b0      	b.n	8001162 <Format_SD+0x3a>
					break;
 8001200:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4618      	mov	r0, r3
 8001208:	f012 fb4e 	bl	80138a8 <f_closedir>
	}

	if (fresult == FR_OK)
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <Format_SD+0x128>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d111      	bne.n	8001238 <Format_SD+0x110>
	{
		memset(path, 0, 20);
 8001214:	2214      	movs	r2, #20
 8001216:	2100      	movs	r1, #0
 8001218:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800121a:	f017 f921 	bl	8018460 <memset>
		sprintf(path, "/Data%d", dirNumber);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	461a      	mov	r2, r3
 8001222:	490a      	ldr	r1, [pc, #40]	; (800124c <Format_SD+0x124>)
 8001224:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001226:	f017 f823 	bl	8018270 <siprintf>
		fresult = f_unlink(path);
 800122a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800122c:	f012 fbea 	bl	8013a04 <f_unlink>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <Format_SD+0x128>)
 8001236:	701a      	strb	r2, [r3, #0]
	}

	vPortFree(path);
 8001238:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800123a:	f015 fbf1 	bl	8016a20 <vPortFree>
	return (fresult);
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <Format_SD+0x128>)
 8001240:	781b      	ldrb	r3, [r3, #0]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3758      	adds	r7, #88	; 0x58
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0801a624 	.word	0x0801a624
 8001250:	200007b0 	.word	0x200007b0
 8001254:	0801a62c 	.word	0x0801a62c
 8001258:	0801a630 	.word	0x0801a630
 800125c:	0801a634 	.word	0x0801a634

08001260 <Create_File>:
		return fresult;
	}
}

FRESULT Create_File(char *name)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8001268:	4915      	ldr	r1, [pc, #84]	; (80012c0 <Create_File+0x60>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f012 fb8a 	bl	8013984 <f_stat>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <Create_File+0x64>)
 8001276:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <Create_File+0x64>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <Create_File+0x26>
		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <Create_File+0x64>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	e018      	b.n	80012b8 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001286:	220b      	movs	r2, #11
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <Create_File+0x68>)
 800128c:	f011 fe72 	bl	8012f74 <f_open>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <Create_File+0x64>)
 8001296:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <Create_File+0x64>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <Create_File+0x46>
			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <Create_File+0x64>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	e008      	b.n	80012b8 <Create_File+0x58>
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}

		fresult = f_close(&fil);
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <Create_File+0x68>)
 80012a8:	f012 fa56 	bl	8013758 <f_close>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <Create_File+0x64>)
 80012b2:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <Create_File+0x64>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000798 	.word	0x20000798
 80012c4:	200007b0 	.word	0x200007b0
 80012c8:	20000568 	.word	0x20000568

080012cc <Update_File>:

FRESULT Update_File(char *name, char *data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 80012d6:	491c      	ldr	r1, [pc, #112]	; (8001348 <Update_File+0x7c>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f012 fb53 	bl	8013984 <f_stat>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <Update_File+0x80>)
 80012e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <Update_File+0x80>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <Update_File+0x28>
		char *buf = pvPortMalloc(100 * sizeof(char));
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <Update_File+0x80>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	e025      	b.n	8001340 <Update_File+0x74>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80012f4:	2232      	movs	r2, #50	; 0x32
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4815      	ldr	r0, [pc, #84]	; (8001350 <Update_File+0x84>)
 80012fa:	f011 fe3b 	bl	8012f74 <f_open>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <Update_File+0x80>)
 8001304:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <Update_File+0x80>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <Update_File+0x48>
			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <Update_File+0x80>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	e015      	b.n	8001340 <Update_File+0x74>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f7fe ffdb 	bl	80002d0 <strlen>
 800131a:	4602      	mov	r2, r0
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <Update_File+0x88>)
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <Update_File+0x84>)
 8001322:	f011 ffec 	bl	80132fe <f_write>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <Update_File+0x80>)
 800132c:	701a      	strb	r2, [r3, #0]
			vPortFree(buf);
#endif
		}

		/* Close file */
		fresult = f_close(&fil);
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <Update_File+0x84>)
 8001330:	f012 fa12 	bl	8013758 <f_close>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <Update_File+0x80>)
 800133a:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <Update_File+0x80>)
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000798 	.word	0x20000798
 800134c:	200007b0 	.word	0x200007b0
 8001350:	20000568 	.word	0x20000568
 8001354:	200007b4 	.word	0x200007b4

08001358 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir(char *name)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f012 fc01 	bl	8013b68 <f_mkdir>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <Create_Dir+0x24>)
 800136c:	701a      	strb	r2, [r3, #0]
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
	}
	return fresult;
 800136e:	4b03      	ldr	r3, [pc, #12]	; (800137c <Create_Dir+0x24>)
 8001370:	781b      	ldrb	r3, [r3, #0]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200007b0 	.word	0x200007b0

08001380 <sendDataSD>:
	Send_Uart(buf);
	vPortFree(buf);
#endif
}
void sendDataSD(char *file, volatile float *sensor)
{
 8001380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001384:	b08f      	sub	sp, #60	; 0x3c
 8001386:	af0a      	add	r7, sp, #40	; 0x28
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
	char *buffer = pvPortMalloc((7*TRAVEL_SENSOR_BUFFER_SIZE/2) * sizeof(char));
 800138c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8001390:	f015 fa7a 	bl	8016888 <pvPortMalloc>
 8001394:	60b8      	str	r0, [r7, #8]
	if (NULL != buffer){
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d05d      	beq.n	8001458 <sendDataSD+0xd8>
		memset(buffer, 0, (7*TRAVEL_SENSOR_BUFFER_SIZE/2));
 800139c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013a0:	2100      	movs	r1, #0
 80013a2:	68b8      	ldr	r0, [r7, #8]
 80013a4:	f017 f85c 	bl	8018460 <memset>
		for (int i = 0; i < (TRAVEL_SENSOR_BUFFER_SIZE) / 2; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e043      	b.n	8001436 <sendDataSD+0xb6>
		{
			sprintf(buffer + strlen(buffer), "%.2f;","%.2f;","%.2f;","%.2f\n",
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7fe ff8e 	bl	80002d0 <strlen>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	189e      	adds	r6, r3, r2
					sensor[i + FRONT_TRAVEL_BUFFER_POSITION],
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3303      	adds	r3, #3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer + strlen(buffer), "%.2f;","%.2f;","%.2f;","%.2f\n",
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8ee 	bl	80005a8 <__aeabi_f2d>
 80013cc:	4604      	mov	r4, r0
 80013ce:	460d      	mov	r5, r1
					sensor[i + REAR_TRAVEL_BUFFER_POSITION],
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3302      	adds	r3, #2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer + strlen(buffer), "%.2f;","%.2f;","%.2f;","%.2f\n",
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8e3 	bl	80005a8 <__aeabi_f2d>
 80013e2:	4680      	mov	r8, r0
 80013e4:	4689      	mov	r9, r1
					sensor[i + FRONT_PRESSURE_BUFFER_POSITION],
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3301      	adds	r3, #1
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer + strlen(buffer), "%.2f;","%.2f;","%.2f;","%.2f\n",
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8d8 	bl	80005a8 <__aeabi_f2d>
 80013f8:	4682      	mov	sl, r0
 80013fa:	468b      	mov	fp, r1
					sensor[i + REAR_PRESSURE_BUFFER_POSITION] );
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer + strlen(buffer), "%.2f;","%.2f;","%.2f;","%.2f\n",
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8ce 	bl	80005a8 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001414:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001418:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800141c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <sendDataSD+0xe8>)
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <sendDataSD+0xec>)
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <sendDataSD+0xec>)
 8001428:	4910      	ldr	r1, [pc, #64]	; (800146c <sendDataSD+0xec>)
 800142a:	4630      	mov	r0, r6
 800142c:	f016 ff20 	bl	8018270 <siprintf>
		for (int i = 0; i < (TRAVEL_SENSOR_BUFFER_SIZE) / 2; i++)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2bff      	cmp	r3, #255	; 0xff
 800143a:	d9b8      	bls.n	80013ae <sendDataSD+0x2e>
		}
		Mount_SD("/");
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <sendDataSD+0xf0>)
 800143e:	f7ff fe49 	bl	80010d4 <Mount_SD>
		Update_File(file, buffer);
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff41 	bl	80012cc <Update_File>
		Unmount_SD("/");
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <sendDataSD+0xf0>)
 800144c:	f7ff fe58 	bl	8001100 <Unmount_SD>
		vPortFree(buffer);
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f015 fae5 	bl	8016a20 <vPortFree>
	}
	else{
		puts("Wrong alocation pressureTravel Buffer SD Card");
	}

}
 8001456:	e002      	b.n	800145e <sendDataSD+0xde>
		puts("Wrong alocation pressureTravel Buffer SD Card");
 8001458:	4806      	ldr	r0, [pc, #24]	; (8001474 <sendDataSD+0xf4>)
 800145a:	f016 ff01 	bl	8018260 <puts>
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001468:	0801a64c 	.word	0x0801a64c
 800146c:	0801a644 	.word	0x0801a644
 8001470:	0801a60c 	.word	0x0801a60c
 8001474:	0801a654 	.word	0x0801a654

08001478 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800148a:	4b37      	ldr	r3, [pc, #220]	; (8001568 <MX_ADC2_Init+0xf0>)
 800148c:	4a37      	ldr	r2, [pc, #220]	; (800156c <MX_ADC2_Init+0xf4>)
 800148e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <MX_ADC2_Init+0xf0>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <MX_ADC2_Init+0xf0>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <MX_ADC2_Init+0xf0>)
 800149e:	2201      	movs	r2, #1
 80014a0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014ba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014c8:	2204      	movs	r2, #4
 80014ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014da:	4823      	ldr	r0, [pc, #140]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014dc:	f002 f9ec 	bl	80038b8 <HAL_ADC_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80014e6:	f001 f8b1 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014ea:	2304      	movs	r3, #4
 80014ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80014f2:	2301      	movs	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	4619      	mov	r1, r3
 80014fa:	481b      	ldr	r0, [pc, #108]	; (8001568 <MX_ADC2_Init+0xf0>)
 80014fc:	f002 fb94 	bl	8003c28 <HAL_ADC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001506:	f001 f8a1 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800150a:	2301      	movs	r3, #1
 800150c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <MX_ADC2_Init+0xf0>)
 8001518:	f002 fb86 	bl	8003c28 <HAL_ADC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8001522:	f001 f893 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001526:	230d      	movs	r3, #13
 8001528:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800152a:	2303      	movs	r3, #3
 800152c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800152e:	463b      	mov	r3, r7
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_ADC2_Init+0xf0>)
 8001534:	f002 fb78 	bl	8003c28 <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 800153e:	f001 f885 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001542:	230e      	movs	r3, #14
 8001544:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001546:	2304      	movs	r3, #4
 8001548:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_ADC2_Init+0xf0>)
 8001550:	f002 fb6a 	bl	8003c28 <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 800155a:	f001 f877 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200007b8 	.word	0x200007b8
 800156c:	40012100 	.word	0x40012100

08001570 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_ADC3_Init+0x98>)
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <MX_ADC3_Init+0x9c>)
 8001586:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_ADC3_Init+0x98>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_ADC3_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_ADC3_Init+0x98>)
 8001596:	2201      	movs	r2, #1
 8001598:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_ADC3_Init+0x98>)
 800159c:	2201      	movs	r2, #1
 800159e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_ADC3_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_ADC3_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_ADC3_Init+0x98>)
 80015b0:	4a17      	ldr	r2, [pc, #92]	; (8001610 <MX_ADC3_Init+0xa0>)
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_ADC3_Init+0x98>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_ADC3_Init+0x98>)
 80015bc:	2201      	movs	r2, #1
 80015be:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_ADC3_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_ADC3_Init+0x98>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <MX_ADC3_Init+0x98>)
 80015d0:	f002 f972 	bl	80038b8 <HAL_ADC_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80015da:	f001 f837 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ea:	463b      	mov	r3, r7
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_ADC3_Init+0x98>)
 80015f0:	f002 fb1a 	bl	8003c28 <HAL_ADC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80015fa:	f001 f827 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000800 	.word	0x20000800
 800160c:	40012200 	.word	0x40012200
 8001610:	0f000001 	.word	0x0f000001

08001614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a53      	ldr	r2, [pc, #332]	; (8001780 <HAL_ADC_MspInit+0x16c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d173      	bne.n	800171e <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	4b52      	ldr	r3, [pc, #328]	; (8001784 <HAL_ADC_MspInit+0x170>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a51      	ldr	r2, [pc, #324]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	4b4b      	ldr	r3, [pc, #300]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <HAL_ADC_MspInit+0x170>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a43      	ldr	r2, [pc, #268]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    PC3     ------> ADC2_IN13
    PA1     ------> ADC2_IN1
    PA4     ------> ADC2_IN4
    PC4     ------> ADC2_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800168a:	2318      	movs	r3, #24
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168e:	2303      	movs	r3, #3
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	483a      	ldr	r0, [pc, #232]	; (8001788 <HAL_ADC_MspInit+0x174>)
 800169e:	f003 fa41 	bl	8004b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80016a2:	2312      	movs	r3, #18
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4835      	ldr	r0, [pc, #212]	; (800178c <HAL_ADC_MspInit+0x178>)
 80016b6:	f003 fa35 	bl	8004b24 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016bc:	4a35      	ldr	r2, [pc, #212]	; (8001794 <HAL_ADC_MspInit+0x180>)
 80016be:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c8:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016da:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ea:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001700:	4823      	ldr	r0, [pc, #140]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 8001702:	f002 fe23 	bl	800434c <HAL_DMA_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800170c:	f000 ff9e 	bl	800264c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_ADC_MspInit+0x17c>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800171c:	e02c      	b.n	8001778 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_ADC_MspInit+0x184>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d127      	bne.n	8001778 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_ADC_MspInit+0x170>)
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001736:	6453      	str	r3, [r2, #68]	; 0x44
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_ADC_MspInit+0x170>)
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_ADC_MspInit+0x170>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_ADC_MspInit+0x170>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6313      	str	r3, [r2, #48]	; 0x30
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_ADC_MspInit+0x170>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001760:	2301      	movs	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <HAL_ADC_MspInit+0x178>)
 8001774:	f003 f9d6 	bl	8004b24 <HAL_GPIO_Init>
}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40012100 	.word	0x40012100
 8001784:	40023800 	.word	0x40023800
 8001788:	40020800 	.word	0x40020800
 800178c:	40020000 	.word	0x40020000
 8001790:	20000848 	.word	0x20000848
 8001794:	40026440 	.word	0x40026440
 8001798:	40012200 	.word	0x40012200

0800179c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_DMA_Init+0x3c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <MX_DMA_Init+0x3c>)
 80017ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_DMA_Init+0x3c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2105      	movs	r1, #5
 80017c2:	203a      	movs	r0, #58	; 0x3a
 80017c4:	f002 fd98 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017c8:	203a      	movs	r0, #58	; 0x3a
 80017ca:	f002 fdb1 	bl	8004330 <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a07      	ldr	r2, [pc, #28]	; (8001808 <vApplicationGetIdleTaskMemory+0x2c>)
 80017ec:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <vApplicationGetIdleTaskMemory+0x30>)
 80017f2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200056c0 	.word	0x200056c0
 800180c:	20005760 	.word	0x20005760

08001810 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b0aa      	sub	sp, #168	; 0xa8
 8001814:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800181c:	4b45      	ldr	r3, [pc, #276]	; (8001934 <MX_FREERTOS_Init+0x124>)
 800181e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8001822:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001826:	2101      	movs	r1, #1
 8001828:	4618      	mov	r0, r3
 800182a:	f012 fbff 	bl	801402c <osSemaphoreCreate>
 800182e:	4603      	mov	r3, r0
 8001830:	4a41      	ldr	r2, [pc, #260]	; (8001938 <MX_FREERTOS_Init+0x128>)
 8001832:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <MX_FREERTOS_Init+0x12c>)
 800183c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 8001840:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f012 fbf0 	bl	801402c <osSemaphoreCreate>
 800184c:	4603      	mov	r3, r0
 800184e:	4a3c      	ldr	r2, [pc, #240]	; (8001940 <MX_FREERTOS_Init+0x130>)
 8001850:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonSem */
  osSemaphoreStaticDef(buttonSem, &buttonSemControlBlock);
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <MX_FREERTOS_Init+0x134>)
 800185a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  buttonSemHandle = osSemaphoreCreate(osSemaphore(buttonSem), 1);
 800185e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001862:	2101      	movs	r1, #1
 8001864:	4618      	mov	r0, r3
 8001866:	f012 fbe1 	bl	801402c <osSemaphoreCreate>
 800186a:	4603      	mov	r3, r0
 800186c:	4a36      	ldr	r2, [pc, #216]	; (8001948 <MX_FREERTOS_Init+0x138>)
 800186e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTask */
  osThreadStaticDef(buttonTask, buttonTaskInit, osPriorityNormal, 0, 128, buttonTaskBuffer, &buttonTaskControlBlock);
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <MX_FREERTOS_Init+0x13c>)
 8001872:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001876:	461d      	mov	r5, r3
 8001878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001880:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 8001884:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f012 fb6e 	bl	8013f6c <osThreadCreate>
 8001890:	4603      	mov	r3, r0
 8001892:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <MX_FREERTOS_Init+0x140>)
 8001894:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, sensorReadInit, osPriorityNormal, 0, 2048, sensorReadBuffer, &sensorReadControlBlock);
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <MX_FREERTOS_Init+0x144>)
 8001898:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800189c:	461d      	mov	r5, r3
 800189e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 80018aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f012 fb5b 	bl	8013f6c <osThreadCreate>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <MX_FREERTOS_Init+0x148>)
 80018ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of SdCard */
  osThreadStaticDef(SdCard, SdCardInit, osPriorityHigh, 0, 256, SdCardBuffer, &SdCardControlBlock);
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <MX_FREERTOS_Init+0x14c>)
 80018be:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80018c2:	461d      	mov	r5, r3
 80018c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 80018d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f012 fb48 	bl	8013f6c <osThreadCreate>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a20      	ldr	r2, [pc, #128]	; (8001960 <MX_FREERTOS_Init+0x150>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 2048, menuProcessDataBuffer, &menuProcessDataControlBlock);
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_FREERTOS_Init+0x154>)
 80018e4:	f107 0420 	add.w	r4, r7, #32
 80018e8:	461d      	mov	r5, r3
 80018ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f012 fb35 	bl	8013f6c <osThreadCreate>
 8001902:	4603      	mov	r3, r0
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <MX_FREERTOS_Init+0x158>)
 8001906:	6013      	str	r3, [r2, #0]

  /* definition and creation of adxlTask */
  osThreadStaticDef(adxlTask, adxlTaskInit, osPriorityNormal, 0, 256, adxlTaskBuffer, &adxlTaskControlBlock);
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_FREERTOS_Init+0x15c>)
 800190a:	1d3c      	adds	r4, r7, #4
 800190c:	461d      	mov	r5, r3
 800190e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001912:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adxlTaskHandle = osThreadCreate(osThread(adxlTask), NULL);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f012 fb24 	bl	8013f6c <osThreadCreate>
 8001924:	4603      	mov	r3, r0
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <MX_FREERTOS_Init+0x160>)
 8001928:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800192a:	bf00      	nop
 800192c:	37a8      	adds	r7, #168	; 0xa8
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	200055e0 	.word	0x200055e0
 8001938:	200055dc 	.word	0x200055dc
 800193c:	2000562c 	.word	0x2000562c
 8001940:	20005628 	.word	0x20005628
 8001944:	20005678 	.word	0x20005678
 8001948:	20005674 	.word	0x20005674
 800194c:	0801a690 	.word	0x0801a690
 8001950:	200008a8 	.word	0x200008a8
 8001954:	0801a6b8 	.word	0x0801a6b8
 8001958:	20000b4c 	.word	0x20000b4c
 800195c:	0801a6dc 	.word	0x0801a6dc
 8001960:	20002bf0 	.word	0x20002bf0
 8001964:	0801a708 	.word	0x0801a708
 8001968:	20003094 	.word	0x20003094
 800196c:	0801a730 	.word	0x0801a730
 8001970:	20005138 	.word	0x20005138

08001974 <buttonTaskInit>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_buttonTaskInit */
void buttonTaskInit(void const * argument)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800197c:	f015 f96e 	bl	8016c5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN buttonTaskInit */
	/* Infinite loop */
	for (;;)
	{
		/*buttonMenu = readButton(); for live expression*/
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <buttonTaskInit+0x28>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d804      	bhi.n	8001992 <buttonTaskInit+0x1e>
		{
			osSemaphoreRelease(buttonSemHandle);
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <buttonTaskInit+0x2c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f012 fbcd 	bl	801412c <osSemaphoreRelease>
		}
		osDelay(30);
 8001992:	201e      	movs	r0, #30
 8001994:	f012 fb36 	bl	8014004 <osDelay>
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 8001998:	e7f2      	b.n	8001980 <buttonTaskInit+0xc>
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000
 80019a0:	20005674 	.word	0x20005674

080019a4 <sensorReadInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorReadInit */
void sensorReadInit(void const * argument)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorReadInit */
	int32_t result[2] ={ 0 };
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
	int32_t resultPressure[2] ={ 0 };
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
	  if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever)){
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <sensorReadInit+0x7c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	4618      	mov	r0, r3
 80019ca:	f012 fb61 	bl	8014090 <osSemaphoreWait>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d120      	bne.n	8001a16 <sensorReadInit+0x72>
		if (MENU_MEASURMENT_START == getMenuSelector()){
 80019d4:	f000 fe40 	bl	8002658 <getMenuSelector>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d106      	bne.n	80019ec <sensorReadInit+0x48>
			char *sensorDataPtr = getSensorDataFileName();
 80019de:	f000 fe47 	bl	8002670 <getSensorDataFileName>
 80019e2:	61f8      	str	r0, [r7, #28]
			processData(sensorDataPtr);
 80019e4:	69f8      	ldr	r0, [r7, #28]
 80019e6:	f001 fc3d 	bl	8003264 <processData>
 80019ea:	e014      	b.n	8001a16 <sensorReadInit+0x72>
		}
		else if(MENU_SAG_START == getMenuSelector()){
 80019ec:	f000 fe34 	bl	8002658 <getMenuSelector>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d10f      	bne.n	8001a16 <sensorReadInit+0x72>
			processDataSag(result, resultPressure);
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fc47 	bl	8003294 <processDataSag>
			lcdMenuSagStart(result, resultPressure);
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fa01 	bl	8001e18 <lcdMenuSagStart>
		}
	  }
	else{

	}
    osDelay(1);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f012 faf4 	bl	8014004 <osDelay>
	  if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever)){
 8001a1c:	e7d0      	b.n	80019c0 <sensorReadInit+0x1c>
 8001a1e:	bf00      	nop
 8001a20:	200055dc 	.word	0x200055dc

08001a24 <SdCardInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SdCardInit */
	 HD44780_Init(2);
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f000 fb29 	bl	8002084 <HD44780_Init>
	 HD44780_Clear();
 8001a32:	f000 fbab 	bl	800218c <HD44780_Clear>
	 HD44780_SetCursor(0,0);
 8001a36:	2100      	movs	r1, #0
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f000 fbbd 	bl	80021b8 <HD44780_SetCursor>
	 HD44780_PrintStr("SAG");
 8001a3e:	4817      	ldr	r0, [pc, #92]	; (8001a9c <SdCardInit+0x78>)
 8001a40:	f000 fc41 	bl	80022c6 <HD44780_PrintStr>
	 HD44780_SetCursor(0,1);
 8001a44:	2101      	movs	r1, #1
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 fbb6 	bl	80021b8 <HD44780_SetCursor>
	 HD44780_PrintStr("LEFT");
 8001a4c:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <SdCardInit+0x7c>)
 8001a4e:	f000 fc3a 	bl	80022c6 <HD44780_PrintStr>
	 HD44780_SetCursor(9,0);
 8001a52:	2100      	movs	r1, #0
 8001a54:	2009      	movs	r0, #9
 8001a56:	f000 fbaf 	bl	80021b8 <HD44780_SetCursor>
	 HD44780_PrintStr("MESSURE");
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <SdCardInit+0x80>)
 8001a5c:	f000 fc33 	bl	80022c6 <HD44780_PrintStr>
	 HD44780_SetCursor(11,1);
 8001a60:	2101      	movs	r1, #1
 8001a62:	200b      	movs	r0, #11
 8001a64:	f000 fba8 	bl	80021b8 <HD44780_SetCursor>
	 HD44780_PrintStr("RIGHT");
 8001a68:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <SdCardInit+0x84>)
 8001a6a:	f000 fc2c 	bl	80022c6 <HD44780_PrintStr>
	/* Infinite loop */
	for (;;)
	{

		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <SdCardInit+0x88>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d807      	bhi.n	8001a86 <SdCardInit+0x62>
		{
			menuSelector(buttonMenu);
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <SdCardInit+0x88>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fe02 	bl	8002684 <menuSelector>
			buttonMenu = BUTTON_SNA; /*for live expression*/
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <SdCardInit+0x88>)
 8001a82:	2205      	movs	r2, #5
 8001a84:	701a      	strb	r2, [r3, #0]
		}
		osSemaphoreWait(buttonSemHandle, osWaitForever);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <SdCardInit+0x8c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f012 fafe 	bl	8014090 <osSemaphoreWait>
		osDelay(20);
 8001a94:	2014      	movs	r0, #20
 8001a96:	f012 fab5 	bl	8014004 <osDelay>
		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 8001a9a:	e7e8      	b.n	8001a6e <SdCardInit+0x4a>
 8001a9c:	0801a74c 	.word	0x0801a74c
 8001aa0:	0801a750 	.word	0x0801a750
 8001aa4:	0801a758 	.word	0x0801a758
 8001aa8:	0801a760 	.word	0x0801a760
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20005674 	.word	0x20005674

08001ab4 <menuProcessDataInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
	/* Infinite loop */
	for (;;)
	{
		osDelay(10);
 8001abc:	200a      	movs	r0, #10
 8001abe:	f012 faa1 	bl	8014004 <osDelay>
 8001ac2:	e7fb      	b.n	8001abc <menuProcessDataInit+0x8>
 8001ac4:	0000      	movs	r0, r0
	...

08001ac8 <adxlTaskInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adxlTaskInit */
void adxlTaskInit(void const * argument)
{
 8001ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001acc:	b08e      	sub	sp, #56	; 0x38
 8001ace:	af04      	add	r7, sp, #16
 8001ad0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adxlTaskInit */
	int16_t x,y,z;
	uint8_t data_rec[6];
	float xg, yg, zg;
	adxl_init();
 8001ad2:	f7ff faa9 	bl	8001028 <adxl_init>

  /* Infinite loop */
  for(;;)
  {
	  adxl_read_values (0x32);
 8001ad6:	2032      	movs	r0, #50	; 0x32
 8001ad8:	f7ff fa80 	bl	8000fdc <adxl_read_values>
	  HAL_I2C_Mem_Read (&hi2c1, adxl_address, 0x32, 1, (uint8_t *)data_rec, 6, 100);
 8001adc:	2364      	movs	r3, #100	; 0x64
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2306      	movs	r3, #6
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2301      	movs	r3, #1
 8001aec:	2232      	movs	r2, #50	; 0x32
 8001aee:	21a6      	movs	r1, #166	; 0xa6
 8001af0:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <adxlTaskInit+0x108>)
 8001af2:	f003 fc1f 	bl	8005334 <HAL_I2C_Mem_Read>
	  x = ((data_rec[1]<<8)|data_rec[0]);
 8001af6:	7b7b      	ldrb	r3, [r7, #13]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	7b3b      	ldrb	r3, [r7, #12]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	84fb      	strh	r3, [r7, #38]	; 0x26
	  y = ((data_rec[3]<<8)|data_rec[2]);
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	84bb      	strh	r3, [r7, #36]	; 0x24
	  z = ((data_rec[5]<<8)|data_rec[4]);
 8001b12:	7c7b      	ldrb	r3, [r7, #17]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	7c3b      	ldrb	r3, [r7, #16]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	847b      	strh	r3, [r7, #34]	; 0x22

	  xg = x * 0.0078;
 8001b20:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd2d 	bl	8000584 <__aeabi_i2d>
 8001b2a:	a327      	add	r3, pc, #156	; (adr r3, 8001bc8 <adxlTaskInit+0x100>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fd92 	bl	8000658 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f864 	bl	8000c08 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	61fb      	str	r3, [r7, #28]
	  yg = y * 0.0078;
 8001b44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd1b 	bl	8000584 <__aeabi_i2d>
 8001b4e:	a31e      	add	r3, pc, #120	; (adr r3, 8001bc8 <adxlTaskInit+0x100>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fd80 	bl	8000658 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f852 	bl	8000c08 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	61bb      	str	r3, [r7, #24]
	  zg = z * 0.0078;
 8001b68:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fd09 	bl	8000584 <__aeabi_i2d>
 8001b72:	a315      	add	r3, pc, #84	; (adr r3, 8001bc8 <adxlTaskInit+0x100>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	f7fe fd6e 	bl	8000658 <__aeabi_dmul>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff f840 	bl	8000c08 <__aeabi_d2f>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	617b      	str	r3, [r7, #20]
	  printf("X: %f\nY: %f\nZ: %f\n", xg, yg, zg);
 8001b8c:	69f8      	ldr	r0, [r7, #28]
 8001b8e:	f7fe fd0b 	bl	80005a8 <__aeabi_f2d>
 8001b92:	4680      	mov	r8, r0
 8001b94:	4689      	mov	r9, r1
 8001b96:	69b8      	ldr	r0, [r7, #24]
 8001b98:	f7fe fd06 	bl	80005a8 <__aeabi_f2d>
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	460d      	mov	r5, r1
 8001ba0:	6978      	ldr	r0, [r7, #20]
 8001ba2:	f7fe fd01 	bl	80005a8 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bae:	e9cd 4500 	strd	r4, r5, [sp]
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <adxlTaskInit+0x10c>)
 8001bb8:	f016 faec 	bl	8018194 <iprintf>
    osDelay(10);
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	f012 fa21 	bl	8014004 <osDelay>
	  adxl_read_values (0x32);
 8001bc2:	e788      	b.n	8001ad6 <adxlTaskInit+0xe>
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	8e8a71de 	.word	0x8e8a71de
 8001bcc:	3f7ff2e4 	.word	0x3f7ff2e4
 8001bd0:	20005960 	.word	0x20005960
 8001bd4:	0801a768 	.word	0x0801a768

08001bd8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC5   ------> ADCx_IN15
*/
void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a42      	ldr	r2, [pc, #264]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a3b      	ldr	r2, [pc, #236]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a34      	ldr	r2, [pc, #208]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a2d      	ldr	r2, [pc, #180]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <MX_GPIO_Init+0x144>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	4828      	ldr	r0, [pc, #160]	; (8001d20 <MX_GPIO_Init+0x148>)
 8001c80:	f003 f8fc 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP8266_CH_PD_GPIO_Port, ESP8266_CH_PD_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2101      	movs	r1, #1
 8001c88:	4826      	ldr	r0, [pc, #152]	; (8001d24 <MX_GPIO_Init+0x14c>)
 8001c8a:	f003 f8f7 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4820      	ldr	r0, [pc, #128]	; (8001d28 <MX_GPIO_Init+0x150>)
 8001ca6:	f002 ff3d 	bl	8004b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001caa:	2320      	movs	r3, #32
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4817      	ldr	r0, [pc, #92]	; (8001d20 <MX_GPIO_Init+0x148>)
 8001cc2:	f002 ff2f 	bl	8004b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4813      	ldr	r0, [pc, #76]	; (8001d28 <MX_GPIO_Init+0x150>)
 8001cda:	f002 ff23 	bl	8004b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP8266_CH_PD_Pin;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP8266_CH_PD_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <MX_GPIO_Init+0x14c>)
 8001cf6:	f002 ff15 	bl	8004b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_detection_Pin;
 8001cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_detection_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4804      	ldr	r0, [pc, #16]	; (8001d20 <MX_GPIO_Init+0x148>)
 8001d10:	f002 ff08 	bl	8004b24 <HAL_GPIO_Init>

}
 8001d14:	bf00      	nop
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800

08001d2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <MX_I2C1_Init+0x54>)
 8001d34:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d38:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <MX_I2C1_Init+0x58>)
 8001d3a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d4e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <MX_I2C1_Init+0x50>)
 8001d6a:	f003 f8a1 	bl	8004eb0 <HAL_I2C_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001d74:	f000 fc6a 	bl	800264c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20005960 	.word	0x20005960
 8001d80:	40005400 	.word	0x40005400
 8001d84:	000186a0 	.word	0x000186a0

08001d88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (i2cHandle->Instance == I2C1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <HAL_I2C_MspInit+0x84>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d12c      	bne.n	8001e04 <HAL_I2C_MspInit+0x7c>
	{
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_I2C_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_I2C_MspInit+0x88>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_I2C_MspInit+0x88>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dca:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dcc:	2312      	movs	r3, #18
 8001dce:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	480c      	ldr	r0, [pc, #48]	; (8001e14 <HAL_I2C_MspInit+0x8c>)
 8001de4:	f002 fe9e 	bl	8004b24 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_I2C_MspInit+0x88>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_I2C_MspInit+0x88>)
 8001df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df6:	6413      	str	r3, [r2, #64]	; 0x40
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_I2C_MspInit+0x88>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020400 	.word	0x40020400

08001e18 <lcdMenuSagStart>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void lcdMenuSagStart(int32_t * result, int32_t * resultPressure)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	char lcdFirstLineTravel[8] =
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
	{ 0 };
	char lcSecondLineTravel[8] =
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
	{ 0 };
	char lcdFirstLinePressure[8] =
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
	{ 0 };
	char lcSecondLinePressure[8] =
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
	{ 0 };
	sprintf(lcdFirstLineTravel, "FT: %ld", result[0]);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	4927      	ldr	r1, [pc, #156]	; (8001ee8 <lcdMenuSagStart+0xd0>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f016 fa0f 	bl	8018270 <siprintf>
	sprintf(lcSecondLineTravel, "RT: %ld", result[1]);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4923      	ldr	r1, [pc, #140]	; (8001eec <lcdMenuSagStart+0xd4>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f016 fa06 	bl	8018270 <siprintf>
	sprintf(lcdFirstLinePressure, "FP: %ld", resultPressure[0]);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4920      	ldr	r1, [pc, #128]	; (8001ef0 <lcdMenuSagStart+0xd8>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f016 f9fe 	bl	8018270 <siprintf>
	sprintf(lcSecondLinePressure, "RP: %ld", resultPressure[1]);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	3304      	adds	r3, #4
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	491d      	ldr	r1, [pc, #116]	; (8001ef4 <lcdMenuSagStart+0xdc>)
 8001e80:	4618      	mov	r0, r3
 8001e82:	f016 f9f5 	bl	8018270 <siprintf>
	HD44780_NoBlink();
 8001e86:	f000 f9df 	bl	8002248 <HD44780_NoBlink>
	HD44780_Clear();
 8001e8a:	f000 f97f 	bl	800218c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 f991 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr(lcdFirstLineTravel);
 8001e96:	f107 0320 	add.w	r3, r7, #32
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fa13 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f988 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr(lcSecondLineTravel);
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fa0a 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(9, 0);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2009      	movs	r0, #9
 8001eb6:	f000 f97f 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr(lcdFirstLinePressure);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fa01 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(9, 1);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2009      	movs	r0, #9
 8001ec8:	f000 f976 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr(lcSecondLinePressure);
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f9f8 	bl	80022c6 <HD44780_PrintStr>
	osDelay(1000);
 8001ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eda:	f012 f893 	bl	8014004 <osDelay>
}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	0801a77c 	.word	0x0801a77c
 8001eec:	0801a784 	.word	0x0801a784
 8001ef0:	0801a78c 	.word	0x0801a78c
 8001ef4:	0801a794 	.word	0x0801a794

08001ef8 <lcdMenuFinishedNotification>:
void lcdMenuFinishedNotification(char *notification)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	HD44780_Clear();
 8001f00:	f000 f944 	bl	800218c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001f04:	2100      	movs	r1, #0
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f956 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr(notification);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f9da 	bl	80022c6 <HD44780_PrintStr>
	osDelay(2000);
 8001f12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f16:	f012 f875 	bl	8014004 <osDelay>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <lcdMenuStart>:

void lcdMenuStart()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001f28:	f000 f930 	bl	800218c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f942 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("SAG");
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <lcdMenuStart+0x44>)
 8001f36:	f000 f9c6 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f93b 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("LEFT");
 8001f42:	480a      	ldr	r0, [pc, #40]	; (8001f6c <lcdMenuStart+0x48>)
 8001f44:	f000 f9bf 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(9, 0);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2009      	movs	r0, #9
 8001f4c:	f000 f934 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("MESSURE");
 8001f50:	4807      	ldr	r0, [pc, #28]	; (8001f70 <lcdMenuStart+0x4c>)
 8001f52:	f000 f9b8 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(11, 1);
 8001f56:	2101      	movs	r1, #1
 8001f58:	200b      	movs	r0, #11
 8001f5a:	f000 f92d 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("RIGHT");
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <lcdMenuStart+0x50>)
 8001f60:	f000 f9b1 	bl	80022c6 <HD44780_PrintStr>
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	0801a79c 	.word	0x0801a79c
 8001f6c:	0801a7a0 	.word	0x0801a7a0
 8001f70:	0801a7a8 	.word	0x0801a7a8
 8001f74:	0801a7b0 	.word	0x0801a7b0

08001f78 <lcdMenuSag>:

void lcdMenuSag()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001f7c:	f000 f906 	bl	800218c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001f80:	2100      	movs	r1, #0
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f918 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("CALIB");
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <lcdMenuSag+0x44>)
 8001f8a:	f000 f99c 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 f911 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("LEFT");
 8001f96:	480a      	ldr	r0, [pc, #40]	; (8001fc0 <lcdMenuSag+0x48>)
 8001f98:	f000 f995 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(10, 0);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f000 f90a 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("START");
 8001fa4:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <lcdMenuSag+0x4c>)
 8001fa6:	f000 f98e 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 8001faa:	2101      	movs	r1, #1
 8001fac:	200a      	movs	r0, #10
 8001fae:	f000 f903 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("SELECT");
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <lcdMenuSag+0x50>)
 8001fb4:	f000 f987 	bl	80022c6 <HD44780_PrintStr>
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	0801a7b8 	.word	0x0801a7b8
 8001fc0:	0801a7a0 	.word	0x0801a7a0
 8001fc4:	0801a7c0 	.word	0x0801a7c0
 8001fc8:	0801a7c8 	.word	0x0801a7c8

08001fcc <lcdStartMeasurement>:

void lcdStartMeasurement()
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001fd0:	f000 f8dc 	bl	800218c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 f8ee 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("START MESSURE");
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <lcdStartMeasurement+0x28>)
 8001fde:	f000 f972 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f000 f8e7 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("SELECT");
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <lcdStartMeasurement+0x2c>)
 8001fec:	f000 f96b 	bl	80022c6 <HD44780_PrintStr>
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	0801a7d0 	.word	0x0801a7d0
 8001ff8:	0801a7c8 	.word	0x0801a7c8

08001ffc <lcdCalibration>:

void lcdCalibration()
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8002000:	f000 f8c4 	bl	800218c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8002004:	2100      	movs	r1, #0
 8002006:	2000      	movs	r0, #0
 8002008:	f000 f8d6 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("CALIBRATION");
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <lcdCalibration+0x38>)
 800200e:	f000 f95a 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8002012:	2101      	movs	r1, #1
 8002014:	2000      	movs	r0, #0
 8002016:	f000 f8cf 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("START");
 800201a:	4807      	ldr	r0, [pc, #28]	; (8002038 <lcdCalibration+0x3c>)
 800201c:	f000 f953 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 8002020:	2101      	movs	r1, #1
 8002022:	200a      	movs	r0, #10
 8002024:	f000 f8c8 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("SELECT");
 8002028:	4804      	ldr	r0, [pc, #16]	; (800203c <lcdCalibration+0x40>)
 800202a:	f000 f94c 	bl	80022c6 <HD44780_PrintStr>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	0801a7e0 	.word	0x0801a7e0
 8002038:	0801a7c0 	.word	0x0801a7c0
 800203c:	0801a7c8 	.word	0x0801a7c8

08002040 <lcdMeasurementStart>:

void lcdMeasurementStart()
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8002044:	f000 f8a2 	bl	800218c <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8002048:	2100      	movs	r1, #0
 800204a:	2000      	movs	r0, #0
 800204c:	f000 f8b4 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("STARTING");
 8002050:	4809      	ldr	r0, [pc, #36]	; (8002078 <lcdMeasurementStart+0x38>)
 8002052:	f000 f938 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8002056:	2101      	movs	r1, #1
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f8ad 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("FINISH");
 800205e:	4807      	ldr	r0, [pc, #28]	; (800207c <lcdMeasurementStart+0x3c>)
 8002060:	f000 f931 	bl	80022c6 <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 8002064:	2101      	movs	r1, #1
 8002066:	200a      	movs	r0, #10
 8002068:	f000 f8a6 	bl	80021b8 <HD44780_SetCursor>
	HD44780_PrintStr("SELECT");
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <lcdMeasurementStart+0x40>)
 800206e:	f000 f92a 	bl	80022c6 <HD44780_PrintStr>
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	0801a7ec 	.word	0x0801a7ec
 800207c:	0801a7f8 	.word	0x0801a7f8
 8002080:	0801a7c8 	.word	0x0801a7c8

08002084 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800208e:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HD44780_Init+0xec>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HD44780_Init+0xf0>)
 8002096:	2208      	movs	r2, #8
 8002098:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HD44780_Init+0xf4>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80020a0:	4b33      	ldr	r3, [pc, #204]	; (8002170 <HD44780_Init+0xec>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d907      	bls.n	80020b8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80020a8:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HD44780_Init+0xf4>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HD44780_Init+0xf4>)
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e006      	b.n	80020c6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HD44780_Init+0xf4>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HD44780_Init+0xf4>)
 80020c4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80020c6:	f000 f99b 	bl	8002400 <DelayInit>
  osDelay(50);
 80020ca:	2032      	movs	r0, #50	; 0x32
 80020cc:	f011 ff9a 	bl	8014004 <osDelay>

  ExpanderWrite(dpBacklight);
 80020d0:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HD44780_Init+0xf0>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f959 	bl	800238c <ExpanderWrite>
  osDelay(1000);
 80020da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020de:	f011 ff91 	bl	8014004 <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80020e2:	2030      	movs	r0, #48	; 0x30
 80020e4:	f000 f941 	bl	800236a <Write4Bits>
  DelayUS(4500);
 80020e8:	f241 1094 	movw	r0, #4500	; 0x1194
 80020ec:	f000 f9b2 	bl	8002454 <DelayUS>

  Write4Bits(0x03 << 4);
 80020f0:	2030      	movs	r0, #48	; 0x30
 80020f2:	f000 f93a 	bl	800236a <Write4Bits>
  DelayUS(4500);
 80020f6:	f241 1094 	movw	r0, #4500	; 0x1194
 80020fa:	f000 f9ab 	bl	8002454 <DelayUS>

  Write4Bits(0x03 << 4);
 80020fe:	2030      	movs	r0, #48	; 0x30
 8002100:	f000 f933 	bl	800236a <Write4Bits>
  DelayUS(4500);
 8002104:	f241 1094 	movw	r0, #4500	; 0x1194
 8002108:	f000 f9a4 	bl	8002454 <DelayUS>

  Write4Bits(0x02 << 4);
 800210c:	2020      	movs	r0, #32
 800210e:	f000 f92c 	bl	800236a <Write4Bits>
  DelayUS(100);
 8002112:	2064      	movs	r0, #100	; 0x64
 8002114:	f000 f99e 	bl	8002454 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HD44780_Init+0xf4>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f8e4 	bl	80022f0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HD44780_Init+0xf8>)
 800212a:	2204      	movs	r2, #4
 800212c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800212e:	f000 f875 	bl	800221c <HD44780_Display>
  HD44780_Clear();
 8002132:	f000 f82b 	bl	800218c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HD44780_Init+0xfc>)
 8002138:	2202      	movs	r2, #2
 800213a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HD44780_Init+0xfc>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f8d2 	bl	80022f0 <SendCommand>
  DelayUS(4500);
 800214c:	f241 1094 	movw	r0, #4500	; 0x1194
 8002150:	f000 f980 	bl	8002454 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8002154:	490b      	ldr	r1, [pc, #44]	; (8002184 <HD44780_Init+0x100>)
 8002156:	2000      	movs	r0, #0
 8002158:	f000 f88c 	bl	8002274 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800215c:	490a      	ldr	r1, [pc, #40]	; (8002188 <HD44780_Init+0x104>)
 800215e:	2001      	movs	r0, #1
 8002160:	f000 f888 	bl	8002274 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8002164:	f000 f81d 	bl	80021a2 <HD44780_Home>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200059b7 	.word	0x200059b7
 8002174:	200059b8 	.word	0x200059b8
 8002178:	200059b4 	.word	0x200059b4
 800217c:	200059b5 	.word	0x200059b5
 8002180:	200059b6 	.word	0x200059b6
 8002184:	20000004 	.word	0x20000004
 8002188:	2000000c 	.word	0x2000000c

0800218c <HD44780_Clear>:

void HD44780_Clear()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8002190:	2001      	movs	r0, #1
 8002192:	f000 f8ad 	bl	80022f0 <SendCommand>
  DelayUS(2000);
 8002196:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800219a:	f000 f95b 	bl	8002454 <DelayUS>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HD44780_Home>:

void HD44780_Home()
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80021a6:	2002      	movs	r0, #2
 80021a8:	f000 f8a2 	bl	80022f0 <SendCommand>
  DelayUS(2000);
 80021ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021b0:	f000 f950 	bl	8002454 <DelayUS>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	460a      	mov	r2, r1
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	4613      	mov	r3, r2
 80021c6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HD44780_SetCursor+0x5c>)
 80021ca:	f107 0408 	add.w	r4, r7, #8
 80021ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HD44780_SetCursor+0x60>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	79ba      	ldrb	r2, [r7, #6]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d303      	bcc.n	80021e6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HD44780_SetCursor+0x60>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	3318      	adds	r3, #24
 80021ec:	443b      	add	r3, r7
 80021ee:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4413      	add	r3, r2
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	b25b      	sxtb	r3, r3
 80021fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002200:	b25b      	sxtb	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f873 	bl	80022f0 <SendCommand>
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	bf00      	nop
 8002214:	0801a800 	.word	0x0801a800
 8002218:	200059b7 	.word	0x200059b7

0800221c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HD44780_Display+0x28>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HD44780_Display+0x28>)
 800222c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HD44780_Display+0x28>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f859 	bl	80022f0 <SendCommand>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200059b5 	.word	0x200059b5

08002248 <HD44780_NoBlink>:
  dpControl |= LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_NoBlink()
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HD44780_NoBlink+0x28>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HD44780_NoBlink+0x28>)
 8002258:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HD44780_NoBlink+0x28>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f843 	bl	80022f0 <SendCommand>
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200059b5 	.word	0x200059b5

08002274 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	b25b      	sxtb	r3, r3
 800228e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002292:	b25b      	sxtb	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f82a 	bl	80022f0 <SendCommand>
  for (int i=0; i<8; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e009      	b.n	80022b6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f82e 	bl	800230c <SendChar>
  for (int i=0; i<8; i++)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b07      	cmp	r3, #7
 80022ba:	ddf2      	ble.n	80022a2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80022ce:	e006      	b.n	80022de <HD44780_PrintStr+0x18>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f817 	bl	800230c <SendChar>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f4      	bne.n	80022d0 <HD44780_PrintStr+0xa>
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f812 	bl	8002328 <Send>
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <SendChar>:

static void SendChar(uint8_t ch)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f804 	bl	8002328 <Send>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	460a      	mov	r2, r1
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	4613      	mov	r3, r2
 8002336:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f023 030f 	bic.w	r3, r3, #15
 800233e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	79bb      	ldrb	r3, [r7, #6]
 800234a:	4313      	orrs	r3, r2
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f80b 	bl	800236a <Write4Bits>
  Write4Bits((lownib)|mode);
 8002354:	7bba      	ldrb	r2, [r7, #14]
 8002356:	79bb      	ldrb	r3, [r7, #6]
 8002358:	4313      	orrs	r3, r2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f804 	bl	800236a <Write4Bits>
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f808 	bl	800238c <ExpanderWrite>
  PulseEnable(value);
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f820 	bl	80023c4 <PulseEnable>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <ExpanderWrite+0x30>)
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4313      	orrs	r3, r2
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80023a2:	f107 020f 	add.w	r2, r7, #15
 80023a6:	230a      	movs	r3, #10
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2301      	movs	r3, #1
 80023ac:	214e      	movs	r1, #78	; 0x4e
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <ExpanderWrite+0x34>)
 80023b0:	f002 fec2 	bl	8005138 <HAL_I2C_Master_Transmit>
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200059b8 	.word	0x200059b8
 80023c0:	20005960 	.word	0x20005960

080023c4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ffd8 	bl	800238c <ExpanderWrite>
  DelayUS(20);
 80023dc:	2014      	movs	r0, #20
 80023de:	f000 f839 	bl	8002454 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ffce 	bl	800238c <ExpanderWrite>
  DelayUS(20);
 80023f0:	2014      	movs	r0, #20
 80023f2:	f000 f82f 	bl	8002454 <DelayUS>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <DelayInit>:

static void DelayInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <DelayInit+0x4c>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a10      	ldr	r2, [pc, #64]	; (800244c <DelayInit+0x4c>)
 800240a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800240e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <DelayInit+0x4c>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <DelayInit+0x4c>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <DelayInit+0x50>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <DelayInit+0x50>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <DelayInit+0x50>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a08      	ldr	r2, [pc, #32]	; (8002450 <DelayInit+0x50>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <DelayInit+0x50>)
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800243a:	bf00      	nop
  __ASM volatile ("NOP");
 800243c:	bf00      	nop
  __ASM volatile ("NOP");
 800243e:	bf00      	nop
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000edf0 	.word	0xe000edf0
 8002450:	e0001000 	.word	0xe0001000

08002454 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <DelayUS+0x44>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0e      	ldr	r2, [pc, #56]	; (800249c <DelayUS+0x48>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9a      	lsrs	r2, r3, #18
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <DelayUS+0x4c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <DelayUS+0x4c>)
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	d8f6      	bhi.n	8002476 <DelayUS+0x22>
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000014 	.word	0x20000014
 800249c:	431bde83 	.word	0x431bde83
 80024a0:	e0001000 	.word	0xe0001000

080024a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80024bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80024c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80024cc:	e000      	b.n	80024d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80024ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80024d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f9      	beq.n	80024ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80024da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80024e4:	687b      	ldr	r3, [r7, #4]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ffd1 	bl	80024a4 <ITM_SendChar>
	return (ch);
 8002502:	687b      	ldr	r3, [r7, #4]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002510:	f001 f96c 	bl	80037ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002514:	f000 f81c 	bl	8002550 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002518:	f7ff fb5e 	bl	8001bd8 <MX_GPIO_Init>
	MX_DMA_Init();
 800251c:	f7ff f93e 	bl	800179c <MX_DMA_Init>
	MX_FATFS_Init();
 8002520:	f00b f954 	bl	800d7cc <MX_FATFS_Init>
	MX_TIM6_Init();
 8002524:	f000 fc9c 	bl	8002e60 <MX_TIM6_Init>
	MX_TIM8_Init();
 8002528:	f000 fcd0 	bl	8002ecc <MX_TIM8_Init>
	MX_TIM2_Init();
 800252c:	f000 fc26 	bl	8002d7c <MX_TIM2_Init>
	MX_ADC2_Init();
 8002530:	f7fe ffa2 	bl	8001478 <MX_ADC2_Init>
	MX_ADC3_Init();
 8002534:	f7ff f81c 	bl	8001570 <MX_ADC3_Init>
	MX_I2C1_Init();
 8002538:	f7ff fbf8 	bl	8001d2c <MX_I2C1_Init>
	MX_SDIO_SD_Init();
 800253c:	f000 f96c 	bl	8002818 <MX_SDIO_SD_Init>
	MX_USART2_UART_Init();
 8002540:	f001 f8b8 	bl	80036b4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8002544:	f7ff f964 	bl	8001810 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8002548:	f011 fced 	bl	8013f26 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800254c:	e7fe      	b.n	800254c <main+0x40>
	...

08002550 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b094      	sub	sp, #80	; 0x50
 8002554:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	2234      	movs	r2, #52	; 0x34
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f015 ff7e 	bl	8018460 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <SystemClock_Config+0xd0>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a28      	ldr	r2, [pc, #160]	; (8002620 <SystemClock_Config+0xd0>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <SystemClock_Config+0xd0>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002590:	2300      	movs	r3, #0
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <SystemClock_Config+0xd4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <SystemClock_Config+0xd4>)
 800259e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <SystemClock_Config+0xd4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ba:	2302      	movs	r3, #2
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80025c4:	2304      	movs	r3, #4
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 72;
 80025c8:	2348      	movs	r3, #72	; 0x48
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025cc:	2302      	movs	r3, #2
 80025ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80025d0:	2303      	movs	r3, #3
 80025d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80025d4:	2302      	movs	r3, #2
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 fdb3 	bl	8008148 <HAL_RCC_OscConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80025e8:	f000 f830 	bl	800264c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80025ec:	230f      	movs	r3, #15
 80025ee:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f0:	2302      	movs	r3, #2
 80025f2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	2102      	movs	r1, #2
 8002608:	4618      	mov	r0, r3
 800260a:	f004 fef7 	bl	80073fc <HAL_RCC_ClockConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8002614:	f000 f81a 	bl	800264c <Error_Handler>
	}
}
 8002618:	bf00      	nop
 800261a:	3750      	adds	r7, #80	; 0x50
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	40007000 	.word	0x40007000

08002628 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800263a:	f001 f8f9 	bl	8003830 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40000400 	.word	0x40000400

0800264c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002650:	b672      	cpsid	i
}
 8002652:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002654:	e7fe      	b.n	8002654 <Error_Handler+0x8>
	...

08002658 <getMenuSelector>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
menu_t getMenuSelector(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
	return (selector);
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <getMenuSelector+0x14>)
 800265e:	781b      	ldrb	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200059b9 	.word	0x200059b9

08002670 <getSensorDataFileName>:
char * getSensorDataFileName(void){
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
	return (sensorData);
 8002674:	4b02      	ldr	r3, [pc, #8]	; (8002680 <getSensorDataFileName+0x10>)
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	200059d0 	.word	0x200059d0

08002684 <menuSelector>:



void menuSelector(button_t button)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]

	switch (selector)
 800268e:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <menuSelector+0x16c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b05      	cmp	r3, #5
 8002694:	f200 80a8 	bhi.w	80027e8 <menuSelector+0x164>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <menuSelector+0x1c>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026b9 	.word	0x080026b9
 80026a4:	080026e7 	.word	0x080026e7
 80026a8:	0800272b 	.word	0x0800272b
 80026ac:	08002773 	.word	0x08002773
 80026b0:	0800278d 	.word	0x0800278d
 80026b4:	080027c9 	.word	0x080027c9
	{

	case (MENU_START):
		if (BUTTON_LEFT == button)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d105      	bne.n	80026ca <menuSelector+0x46>
		{
			lcdMenuSag();
 80026be:	f7ff fc5b 	bl	8001f78 <lcdMenuSag>
			selector = MENU_SAG;
 80026c2:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <menuSelector+0x16c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e00a      	b.n	80026e0 <menuSelector+0x5c>

		}
		else if (BUTTON_RIGHT == button)
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d105      	bne.n	80026dc <menuSelector+0x58>
		{
			lcdStartMeasurement();
 80026d0:	f7ff fc7c 	bl	8001fcc <lcdStartMeasurement>
			selector = MENU_MEASURMENT;
 80026d4:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <menuSelector+0x16c>)
 80026d6:	2204      	movs	r2, #4
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e001      	b.n	80026e0 <menuSelector+0x5c>

		}
		else
		{
			lcdMenuStart();
 80026dc:	f7ff fc22 	bl	8001f24 <lcdMenuStart>
		}
		stopAdcDma();
 80026e0:	f000 fcfe 	bl	80030e0 <stopAdcDma>
		break;
 80026e4:	e080      	b.n	80027e8 <menuSelector+0x164>

	case (MENU_SAG):
		if (BUTTON_SELECT == button)
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <menuSelector+0x7e>
		{
			startAdcDma();
 80026ec:	f000 fcd8 	bl	80030a0 <startAdcDma>
			HD44780_Clear();
 80026f0:	f7ff fd4c 	bl	800218c <HD44780_Clear>
			puts("pomiar rozpoczety, kliknij select aby zakonczyc\n");
 80026f4:	483f      	ldr	r0, [pc, #252]	; (80027f4 <menuSelector+0x170>)
 80026f6:	f015 fdb3 	bl	8018260 <puts>
			selector = MENU_SAG_START;
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <menuSelector+0x16c>)
 80026fc:	2203      	movs	r2, #3
 80026fe:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002700:	e072      	b.n	80027e8 <menuSelector+0x164>
		else if (BUTTON_LEFT == button)
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d105      	bne.n	8002714 <menuSelector+0x90>
			lcdCalibration();
 8002708:	f7ff fc78 	bl	8001ffc <lcdCalibration>
			selector = MENU_CALIBRATION;
 800270c:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <menuSelector+0x16c>)
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]
		break;
 8002712:	e069      	b.n	80027e8 <menuSelector+0x164>
		else if (BUTTON_RIGHT == button)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d103      	bne.n	8002722 <menuSelector+0x9e>
			selector = MENU_START;
 800271a:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <menuSelector+0x16c>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
		break;
 8002720:	e062      	b.n	80027e8 <menuSelector+0x164>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002722:	4835      	ldr	r0, [pc, #212]	; (80027f8 <menuSelector+0x174>)
 8002724:	f015 fd9c 	bl	8018260 <puts>
		break;
 8002728:	e05e      	b.n	80027e8 <menuSelector+0x164>
	case (MENU_CALIBRATION):
		if (BUTTON_SELECT == button)
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d113      	bne.n	8002758 <menuSelector+0xd4>
		{
			startAdcDma();
 8002730:	f000 fcb6 	bl	80030a0 <startAdcDma>
			while (travelPressureSensorCalibration() != 1)
 8002734:	e002      	b.n	800273c <menuSelector+0xb8>
			{
				osDelay(40);
 8002736:	2028      	movs	r0, #40	; 0x28
 8002738:	f011 fc64 	bl	8014004 <osDelay>
			while (travelPressureSensorCalibration() != 1)
 800273c:	f000 fce4 	bl	8003108 <travelPressureSensorCalibration>
 8002740:	4603      	mov	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d1f7      	bne.n	8002736 <menuSelector+0xb2>
			}
			lcdMenuFinishedNotification("Cal Finished");
 8002746:	482d      	ldr	r0, [pc, #180]	; (80027fc <menuSelector+0x178>)
 8002748:	f7ff fbd6 	bl	8001ef8 <lcdMenuFinishedNotification>
			lcdMenuStart();
 800274c:	f7ff fbea 	bl	8001f24 <lcdMenuStart>
			selector = MENU_START;
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <menuSelector+0x16c>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002756:	e047      	b.n	80027e8 <menuSelector+0x164>
		else if (BUTTON_RIGHT == button)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d105      	bne.n	800276a <menuSelector+0xe6>
			selector = MENU_START;
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <menuSelector+0x16c>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
			lcdMenuStart();
 8002764:	f7ff fbde 	bl	8001f24 <lcdMenuStart>
		break;
 8002768:	e03e      	b.n	80027e8 <menuSelector+0x164>
			puts("nacisnij select aby rozpoczac pomiar\n");
 800276a:	4823      	ldr	r0, [pc, #140]	; (80027f8 <menuSelector+0x174>)
 800276c:	f015 fd78 	bl	8018260 <puts>
		break;
 8002770:	e03a      	b.n	80027e8 <menuSelector+0x164>
	case (MENU_SAG_START):
		if (BUTTON_SELECT == button)
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <menuSelector+0x100>
		{

			selector = MENU_START;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <menuSelector+0x16c>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
			lcdMenuStart();
 800277e:	f7ff fbd1 	bl	8001f24 <lcdMenuStart>
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 8002782:	e031      	b.n	80027e8 <menuSelector+0x164>
			puts("nacisnij select aby wrocic do menu start");
 8002784:	481e      	ldr	r0, [pc, #120]	; (8002800 <menuSelector+0x17c>)
 8002786:	f015 fd6b 	bl	8018260 <puts>
		break;
 800278a:	e02d      	b.n	80027e8 <menuSelector+0x164>

	case (MENU_MEASURMENT):
		if (BUTTON_SELECT == button)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <menuSelector+0x13c>
		{
			lcdMeasurementStart();
 8002792:	f7ff fc55 	bl	8002040 <lcdMeasurementStart>
			setPath(dir, sensorData, path);
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <menuSelector+0x180>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	491a      	ldr	r1, [pc, #104]	; (8002808 <menuSelector+0x184>)
 800279e:	481b      	ldr	r0, [pc, #108]	; (800280c <menuSelector+0x188>)
 80027a0:	f7fe fc56 	bl	8001050 <setPath>
			createNewFile(dir, sensorData, &path);
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <menuSelector+0x180>)
 80027a6:	4918      	ldr	r1, [pc, #96]	; (8002808 <menuSelector+0x184>)
 80027a8:	4818      	ldr	r0, [pc, #96]	; (800280c <menuSelector+0x188>)
 80027aa:	f7fe fc6d 	bl	8001088 <createNewFile>
			startAdcDma();
 80027ae:	f000 fc77 	bl	80030a0 <startAdcDma>
			selector = MENU_MEASURMENT_START;
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <menuSelector+0x16c>)
 80027b4:	2205      	movs	r2, #5
 80027b6:	701a      	strb	r2, [r3, #0]
			puts("pomiar ciagly rozpoczety, kliknij select aby zakonczyc\n");
 80027b8:	4815      	ldr	r0, [pc, #84]	; (8002810 <menuSelector+0x18c>)
 80027ba:	f015 fd51 	bl	8018260 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 80027be:	e013      	b.n	80027e8 <menuSelector+0x164>
			puts("nacisnij select aby rozpoczac pomiar\n");
 80027c0:	480d      	ldr	r0, [pc, #52]	; (80027f8 <menuSelector+0x174>)
 80027c2:	f015 fd4d 	bl	8018260 <puts>
		break;
 80027c6:	e00f      	b.n	80027e8 <menuSelector+0x164>

	case (MENU_MEASURMENT_START):
		if (BUTTON_SELECT == button)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <menuSelector+0x15c>
		{

			lcdMenuFinishedNotification("Mes Finished");
 80027ce:	4811      	ldr	r0, [pc, #68]	; (8002814 <menuSelector+0x190>)
 80027d0:	f7ff fb92 	bl	8001ef8 <lcdMenuFinishedNotification>
			lcdMenuStart();
 80027d4:	f7ff fba6 	bl	8001f24 <lcdMenuStart>
			selector = MENU_START;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <menuSelector+0x16c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 80027de:	e002      	b.n	80027e6 <menuSelector+0x162>
			puts("nacisnij select aby wrocic do menu start");
 80027e0:	4807      	ldr	r0, [pc, #28]	; (8002800 <menuSelector+0x17c>)
 80027e2:	f015 fd3d 	bl	8018260 <puts>
		break;
 80027e6:	bf00      	nop

	default:
	}

}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200059b9 	.word	0x200059b9
 80027f4:	0801a810 	.word	0x0801a810
 80027f8:	0801a844 	.word	0x0801a844
 80027fc:	0801a86c 	.word	0x0801a86c
 8002800:	0801a87c 	.word	0x0801a87c
 8002804:	200059ba 	.word	0x200059ba
 8002808:	200059d0 	.word	0x200059d0
 800280c:	200059bc 	.word	0x200059bc
 8002810:	0801a8a8 	.word	0x0801a8a8
 8002814:	0801a8e0 	.word	0x0801a8e0

08002818 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <MX_SDIO_SD_Init+0x3c>)
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <MX_SDIO_SD_Init+0x40>)
 8002820:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_SDIO_SD_Init+0x3c>)
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <MX_SDIO_SD_Init+0x3c>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_SDIO_SD_Init+0x3c>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <MX_SDIO_SD_Init+0x3c>)
 8002836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283a:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <MX_SDIO_SD_Init+0x3c>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 4;
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <MX_SDIO_SD_Init+0x3c>)
 8002844:	2204      	movs	r2, #4
 8002846:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	200059e4 	.word	0x200059e4
 8002858:	40012c00 	.word	0x40012c00

0800285c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef *sdHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0a2      	sub	sp, #136	; 0x88
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8002864:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8002874:	f107 0318 	add.w	r3, r7, #24
 8002878:	225c      	movs	r2, #92	; 0x5c
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f015 fdef 	bl	8018460 <memset>
	{ 0 };
	if (sdHandle->Instance == SDIO)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a43      	ldr	r2, [pc, #268]	; (8002994 <HAL_SD_MspInit+0x138>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d17f      	bne.n	800298c <HAL_SD_MspInit+0x130>

		/* USER CODE END SDIO_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO
 800288c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002890:	61bb      	str	r3, [r7, #24]
				| RCC_PERIPHCLK_CLK48;
		PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002892:	2300      	movs	r3, #0
 8002894:	66fb      	str	r3, [r7, #108]	; 0x6c
		PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002896:	2300      	movs	r3, #0
 8002898:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289a:	f107 0318 	add.w	r3, r7, #24
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 fef8 	bl	8007694 <HAL_RCCEx_PeriphCLKConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_SD_MspInit+0x52>
		{
			Error_Handler();
 80028aa:	f7ff fecf 	bl	800264c <Error_Handler>
		}

		/* SDIO clock enable */
		__HAL_RCC_SDIO_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	4b39      	ldr	r3, [pc, #228]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a38      	ldr	r2, [pc, #224]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b32      	ldr	r3, [pc, #200]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a31      	ldr	r2, [pc, #196]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_SD_MspInit+0x13c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_SD_MspInit+0x13c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a23      	ldr	r2, [pc, #140]	; (8002998 <HAL_SD_MspInit+0x13c>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_SD_MspInit+0x13c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
		 PC8     ------> SDIO_D0
		 PC9     ------> SDIO_D1
		 PC11     ------> SDIO_D3
		 PD2     ------> SDIO_CMD
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2;
 800291e:	2306      	movs	r3, #6
 8002920:	677b      	str	r3, [r7, #116]	; 0x74
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	67bb      	str	r3, [r7, #120]	; 0x78
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	67fb      	str	r3, [r7, #124]	; 0x7c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002930:	230c      	movs	r3, #12
 8002932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800293a:	4619      	mov	r1, r3
 800293c:	4817      	ldr	r0, [pc, #92]	; (800299c <HAL_SD_MspInit+0x140>)
 800293e:	f002 f8f1 	bl	8004b24 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_11;
 8002942:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8002946:	677b      	str	r3, [r7, #116]	; 0x74
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	67bb      	str	r3, [r7, #120]	; 0x78
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	67fb      	str	r3, [r7, #124]	; 0x7c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002956:	230c      	movs	r3, #12
 8002958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002960:	4619      	mov	r1, r3
 8002962:	480f      	ldr	r0, [pc, #60]	; (80029a0 <HAL_SD_MspInit+0x144>)
 8002964:	f002 f8de 	bl	8004b24 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002968:	2304      	movs	r3, #4
 800296a:	677b      	str	r3, [r7, #116]	; 0x74
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	67bb      	str	r3, [r7, #120]	; 0x78
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	67fb      	str	r3, [r7, #124]	; 0x7c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	2303      	movs	r3, #3
 8002976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800297a:	230c      	movs	r3, #12
 800297c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002984:	4619      	mov	r1, r3
 8002986:	4807      	ldr	r0, [pc, #28]	; (80029a4 <HAL_SD_MspInit+0x148>)
 8002988:	f002 f8cc 	bl	8004b24 <HAL_GPIO_Init>

		/* USER CODE BEGIN SDIO_MspInit 1 */

		/* USER CODE END SDIO_MspInit 1 */
	}
}
 800298c:	bf00      	nop
 800298e:	3788      	adds	r7, #136	; 0x88
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40023800 	.word	0x40023800
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00

080029a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_MspInit+0x54>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_MspInit+0x54>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_MspInit+0x54>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_MspInit+0x54>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <HAL_MspInit+0x54>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_MspInit+0x54>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	210f      	movs	r1, #15
 80029ea:	f06f 0001 	mvn.w	r0, #1
 80029ee:	f001 fc83 	bl	80042f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800

08002a00 <HAL_InitTick>:
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08e      	sub	sp, #56	; 0x38
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	RCC_ClkInitTypeDef clkconfig;
	uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t uwPrescalerValue = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pFLatency;
	HAL_StatusTypeDef status;

	/* Enable TIM3 clock */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <HAL_InitTick+0xe4>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	4a32      	ldr	r2, [pc, #200]	; (8002ae4 <HAL_InitTick+0xe4>)
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_InitTick+0xe4>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a2c:	f107 0210 	add.w	r2, r7, #16
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 fdfa 	bl	8007630 <HAL_RCC_GetClockConfig>

	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Compute TIM3 clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <HAL_InitTick+0x4e>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a46:	f004 fdcb 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 8002a4a:	6378      	str	r0, [r7, #52]	; 0x34
 8002a4c:	e004      	b.n	8002a58 <HAL_InitTick+0x58>
	}
	else
	{
		uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a4e:	f004 fdc7 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 8002a52:	4603      	mov	r3, r0
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
	}

	/* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5a:	4a23      	ldr	r2, [pc, #140]	; (8002ae8 <HAL_InitTick+0xe8>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	0c9b      	lsrs	r3, r3, #18
 8002a62:	3b01      	subs	r3, #1
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Initialize TIM3 */
	htim3.Instance = TIM3;
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_InitTick+0xec>)
 8002a68:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <HAL_InitTick+0xf0>)
 8002a6a:	601a      	str	r2, [r3, #0]
	 + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_InitTick+0xec>)
 8002a6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a72:	60da      	str	r2, [r3, #12]
	htim3.Init.Prescaler = uwPrescalerValue;
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_InitTick+0xec>)
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	6053      	str	r3, [r2, #4]
	htim3.Init.ClockDivision = 0;
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_InitTick+0xec>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_InitTick+0xec>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_InitTick+0xec>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]

	status = HAL_TIM_Base_Init(&htim3);
 8002a8c:	4817      	ldr	r0, [pc, #92]	; (8002aec <HAL_InitTick+0xec>)
 8002a8e:	f007 f9f0 	bl	8009e72 <HAL_TIM_Base_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (status == HAL_OK)
 8002a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_InitTick+0xd8>
	{
		/* Start the TIM time Base generation in interrupt mode */
		status = HAL_TIM_Base_Start_IT(&htim3);
 8002aa0:	4812      	ldr	r0, [pc, #72]	; (8002aec <HAL_InitTick+0xec>)
 8002aa2:	f007 fac5 	bl	800a030 <HAL_TIM_Base_Start_IT>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (status == HAL_OK)
 8002aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d111      	bne.n	8002ad8 <HAL_InitTick+0xd8>
		{
			/* Enable the TIM3 global Interrupt */
			HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ab4:	201d      	movs	r0, #29
 8002ab6:	f001 fc3b 	bl	8004330 <HAL_NVIC_EnableIRQ>
			/* Configure the SysTick IRQ priority */
			if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d808      	bhi.n	8002ad2 <HAL_InitTick+0xd2>
			{
				/* Configure the TIM IRQ priority */
				HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	201d      	movs	r0, #29
 8002ac6:	f001 fc17 	bl	80042f8 <HAL_NVIC_SetPriority>
				uwTickPrio = TickPriority;
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <HAL_InitTick+0xf4>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e002      	b.n	8002ad8 <HAL_InitTick+0xd8>
			}
			else
			{
				status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}
	}

	/* Return function status */
	return status;
 8002ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3738      	adds	r7, #56	; 0x38
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	431bde83 	.word	0x431bde83
 8002aec:	20005a68 	.word	0x20005a68
 8002af0:	40000400 	.word	0x40000400
 8002af4:	20000018 	.word	0x20000018

08002af8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <SDTimer_Handler+0x40>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <SDTimer_Handler+0x1c>
		Timer1--;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <SDTimer_Handler+0x40>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <SDTimer_Handler+0x40>)
 8002b12:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <SDTimer_Handler+0x44>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <SDTimer_Handler+0x34>
		Timer2--;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <SDTimer_Handler+0x44>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <SDTimer_Handler+0x44>)
 8002b2a:	701a      	strb	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20005ab1 	.word	0x20005ab1
 8002b3c:	20005ab2 	.word	0x20005ab2

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002b44:	e7fe      	b.n	8002b44 <NMI_Handler+0x4>

08002b46 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8002b4a:	e7fe      	b.n	8002b4a <HardFault_Handler+0x4>

08002b4c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002b50:	e7fe      	b.n	8002b50 <MemManage_Handler+0x4>

08002b52 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8002b56:	e7fe      	b.n	8002b56 <BusFault_Handler+0x4>

08002b58 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8002b5c:	e7fe      	b.n	8002b5c <UsageFault_Handler+0x4>

08002b5e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <TIM3_IRQHandler+0x30>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <TIM3_IRQHandler+0x30>)
 8002b7c:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <TIM3_IRQHandler+0x30>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b09      	cmp	r3, #9
 8002b86:	d904      	bls.n	8002b92 <TIM3_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <TIM3_IRQHandler+0x30>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002b8e:	f7ff ffb3 	bl	8002af8 <SDTimer_Handler>
	}
	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8002b92:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <TIM3_IRQHandler+0x34>)
 8002b94:	f007 fb15 	bl	800a1c2 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20005ab0 	.word	0x20005ab0
 8002ba0:	20005a68 	.word	0x20005a68

08002ba4 <DMA2_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA2 stream2 global interrupt.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

	/* USER CODE END DMA2_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc2);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <DMA2_Stream2_IRQHandler+0x10>)
 8002baa:	f001 fd45 	bl	8004638 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

	/* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000848 	.word	0x20000848

08002bb8 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <OTG_FS_IRQHandler+0x10>)
 8002bbe:	f003 fa7d 	bl	80060bc <HAL_PCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	2000aaa8 	.word	0x2000aaa8

08002bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
	return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_kill>:

int _kill(int pid, int sig)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8002be6:	f015 fce3 	bl	80185b0 <__errno>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2216      	movs	r2, #22
 8002bee:	601a      	str	r2, [r3, #0]
	return -1;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_exit>:

void _exit(int status)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffe7 	bl	8002bdc <_kill>
	while (1)
 8002c0e:	e7fe      	b.n	8002c0e <_exit+0x12>

08002c10 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e00a      	b.n	8002c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c22:	f3af 8000 	nop.w
 8002c26:	4601      	mov	r1, r0
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	60ba      	str	r2, [r7, #8]
 8002c2e:	b2ca      	uxtb	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf0      	blt.n	8002c22 <_read+0x12>
	}

	return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e009      	b.n	8002c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	60ba      	str	r2, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fc44 	bl	80024f2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbf1      	blt.n	8002c5c <_write+0x12>
	}
	return len;
 8002c78:	687b      	ldr	r3, [r7, #4]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_close>:

int _close(int file)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_fstat>:

int _fstat(int file, struct stat *st)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002caa:	605a      	str	r2, [r3, #4]
	return 0;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_isatty>:

int _isatty(int file)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <_sbrk+0x64>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <_sbrk+0x68>)
 8002d0c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d207      	bcs.n	8002d2c <_sbrk+0x40>
	{
		errno = ENOMEM;
 8002d1c:	f015 fc48 	bl	80185b0 <__errno>
 8002d20:	4603      	mov	r3, r0
 8002d22:	220c      	movs	r2, #12
 8002d24:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e009      	b.n	8002d40 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <_sbrk+0x64>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <_sbrk+0x64>)
 8002d3c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20020000 	.word	0x20020000
 8002d4c:	00000800 	.word	0x00000800
 8002d50:	20005ab4 	.word	0x20005ab4
 8002d54:	2000b378 	.word	0x2000b378

08002d58 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <SystemInit+0x20>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <SystemInit+0x20>)
 8002d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d90:	f107 0320 	add.w	r3, r7, #32
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
 8002da8:	615a      	str	r2, [r3, #20]
 8002daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002db2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002db6:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002dc2:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002dc4:	2263      	movs	r2, #99	; 0x63
 8002dc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dce:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dd4:	4821      	ldr	r0, [pc, #132]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002dd6:	f007 f84c 	bl	8009e72 <HAL_TIM_Base_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002de0:	f7ff fc34 	bl	800264c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dee:	4619      	mov	r1, r3
 8002df0:	481a      	ldr	r0, [pc, #104]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002df2:	f007 fbb1 	bl	800a558 <HAL_TIM_ConfigClockSource>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002dfc:	f7ff fc26 	bl	800264c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e00:	4816      	ldr	r0, [pc, #88]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002e02:	f007 f985 	bl	800a110 <HAL_TIM_PWM_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e0c:	f7ff fc1e 	bl	800264c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e10:	2320      	movs	r3, #32
 8002e12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e18:	f107 0320 	add.w	r3, r7, #32
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480f      	ldr	r0, [pc, #60]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002e20:	f007 ff74 	bl	800ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e2a:	f7ff fc0f 	bl	800264c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2e:	2360      	movs	r3, #96	; 0x60
 8002e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	2200      	movs	r2, #0
 8002e42:	4619      	mov	r1, r3
 8002e44:	4805      	ldr	r0, [pc, #20]	; (8002e5c <MX_TIM2_Init+0xe0>)
 8002e46:	f007 fac5 	bl	800a3d4 <HAL_TIM_PWM_ConfigChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e50:	f7ff fbfc 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e54:	bf00      	nop
 8002e56:	3738      	adds	r7, #56	; 0x38
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20005ab8 	.word	0x20005ab8

08002e60 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e66:	463b      	mov	r3, r7
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <MX_TIM6_Init+0x64>)
 8002e70:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <MX_TIM6_Init+0x68>)
 8002e72:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <MX_TIM6_Init+0x64>)
 8002e76:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002e7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_TIM6_Init+0x64>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <MX_TIM6_Init+0x64>)
 8002e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_TIM6_Init+0x64>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e90:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <MX_TIM6_Init+0x64>)
 8002e92:	f006 ffee 	bl	8009e72 <HAL_TIM_Base_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002e9c:	f7ff fbd6 	bl	800264c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ea8:	463b      	mov	r3, r7
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_TIM6_Init+0x64>)
 8002eae:	f007 ff2d 	bl	800ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002eb8:	f7ff fbc8 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20005b00 	.word	0x20005b00
 8002ec8:	40001000 	.word	0x40001000

08002ecc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b096      	sub	sp, #88	; 0x58
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	615a      	str	r2, [r3, #20]
 8002efc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	2220      	movs	r2, #32
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f015 faab 	bl	8018460 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002f0a:	4b3d      	ldr	r3, [pc, #244]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f0c:	4a3d      	ldr	r2, [pc, #244]	; (8003004 <MX_TIM8_Init+0x138>)
 8002f0e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f12:	f240 7207 	movw	r2, #1799	; 0x707
 8002f16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 8002f1e:	4b38      	ldr	r3, [pc, #224]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f20:	f240 120d 	movw	r2, #269	; 0x10d
 8002f24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f26:	4b36      	ldr	r3, [pc, #216]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f2c:	4b34      	ldr	r3, [pc, #208]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f32:	4b33      	ldr	r3, [pc, #204]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f38:	4831      	ldr	r0, [pc, #196]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f3a:	f006 ff9a 	bl	8009e72 <HAL_TIM_Base_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002f44:	f7ff fb82 	bl	800264c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f52:	4619      	mov	r1, r3
 8002f54:	482a      	ldr	r0, [pc, #168]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f56:	f007 faff 	bl	800a558 <HAL_TIM_ConfigClockSource>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002f60:	f7ff fb74 	bl	800264c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f64:	4826      	ldr	r0, [pc, #152]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f66:	f007 f8d3 	bl	800a110 <HAL_TIM_PWM_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002f70:	f7ff fb6c 	bl	800264c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f74:	2320      	movs	r3, #32
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f80:	4619      	mov	r1, r3
 8002f82:	481f      	ldr	r0, [pc, #124]	; (8003000 <MX_TIM8_Init+0x134>)
 8002f84:	f007 fec2 	bl	800ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8002f8e:	f7ff fb5d 	bl	800264c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f92:	2360      	movs	r3, #96	; 0x60
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4812      	ldr	r0, [pc, #72]	; (8003000 <MX_TIM8_Init+0x134>)
 8002fb8:	f007 fa0c 	bl	800a3d4 <HAL_TIM_PWM_ConfigChannel>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002fc2:	f7ff fb43 	bl	800264c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4805      	ldr	r0, [pc, #20]	; (8003000 <MX_TIM8_Init+0x134>)
 8002fea:	f007 ff0b 	bl	800ae04 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8002ff4:	f7ff fb2a 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002ff8:	bf00      	nop
 8002ffa:	3758      	adds	r7, #88	; 0x58
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20005b48 	.word	0x20005b48
 8003004:	40010400 	.word	0x40010400

08003008 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003018:	d10e      	bne.n	8003038 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003036:	e026      	b.n	8003086 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIM_Base_MspInit+0x90>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10e      	bne.n	8003060 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 800304c:	f043 0310 	orr.w	r3, r3, #16
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
}
 800305e:	e012      	b.n	8003086 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0d      	ldr	r2, [pc, #52]	; (800309c <HAL_TIM_Base_MspInit+0x94>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10d      	bne.n	8003086 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	4a08      	ldr	r2, [pc, #32]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6453      	str	r3, [r2, #68]	; 0x44
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_TIM_Base_MspInit+0x8c>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40001000 	.word	0x40001000
 800309c:	40010400 	.word	0x40010400

080030a0 <startAdcDma>:
 */
/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void startAdcDma(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*) osKernelSysTick(), SD_INIT_TIME);
 80030a4:	f010 ff52 	bl	8013f4c <osKernelSysTick>
 80030a8:	4603      	mov	r3, r0
 80030aa:	210a      	movs	r1, #10
 80030ac:	4618      	mov	r0, r3
 80030ae:	f011 f963 	bl	8014378 <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*) adcDataWrite,
 80030b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b6:	4906      	ldr	r1, [pc, #24]	; (80030d0 <startAdcDma+0x30>)
 80030b8:	4806      	ldr	r0, [pc, #24]	; (80030d4 <startAdcDma+0x34>)
 80030ba:	f000 fc41 	bl	8003940 <HAL_ADC_Start_DMA>
	TRAVEL_SENSOR_BUFFER_SIZE);
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 80030be:	4806      	ldr	r0, [pc, #24]	; (80030d8 <startAdcDma+0x38>)
 80030c0:	f006 ff26 	bl	8009f10 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 80030c4:	4805      	ldr	r0, [pc, #20]	; (80030dc <startAdcDma+0x3c>)
 80030c6:	f006 ff23 	bl	8009f10 <HAL_TIM_Base_Start>
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20005b98 	.word	0x20005b98
 80030d4:	200007b8 	.word	0x200007b8
 80030d8:	20005b00 	.word	0x20005b00
 80030dc:	20005ab8 	.word	0x20005ab8

080030e0 <stopAdcDma>:
void stopAdcDma(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 80030e4:	4805      	ldr	r0, [pc, #20]	; (80030fc <stopAdcDma+0x1c>)
 80030e6:	f000 fd3b 	bl	8003b60 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <stopAdcDma+0x20>)
 80030ec:	f006 ff78 	bl	8009fe0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 80030f0:	4804      	ldr	r0, [pc, #16]	; (8003104 <stopAdcDma+0x24>)
 80030f2:	f006 ff75 	bl	8009fe0 <HAL_TIM_Base_Stop>
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200007b8 	.word	0x200007b8
 8003100:	20005b00 	.word	0x20005b00
 8003104:	20005ab8 	.word	0x20005ab8

08003108 <travelPressureSensorCalibration>:
int travelPressureSensorCalibration(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
	int status;
	if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever))
 800310e:	4b52      	ldr	r3, [pc, #328]	; (8003258 <travelPressureSensorCalibration+0x150>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f04f 31ff 	mov.w	r1, #4294967295
 8003116:	4618      	mov	r0, r3
 8003118:	f010 ffba 	bl	8014090 <osSemaphoreWait>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 8093 	bne.w	800324a <travelPressureSensorCalibration+0x142>
	{
		calibrationValues.rearTravelSensor = 0;
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003126:	2200      	movs	r2, #0
 8003128:	801a      	strh	r2, [r3, #0]
		calibrationValues.frontTravelSensor = 0;
 800312a:	4b4c      	ldr	r3, [pc, #304]	; (800325c <travelPressureSensorCalibration+0x154>)
 800312c:	2200      	movs	r2, #0
 800312e:	805a      	strh	r2, [r3, #2]
		calibrationValues.rearPressureSensor = 0;
 8003130:	4b4a      	ldr	r3, [pc, #296]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003132:	2200      	movs	r2, #0
 8003134:	809a      	strh	r2, [r3, #4]
		calibrationValues.frontPressureSensor = 0;
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003138:	2200      	movs	r2, #0
 800313a:	80da      	strh	r2, [r3, #6]
		for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS;
 800313c:	2300      	movs	r3, #0
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	e061      	b.n	8003206 <travelPressureSensorCalibration+0xfe>
				i += NUMBER_OF_SENSORS)
		{
			calibrationValues.rearTravelSensor += outBufPtr[i
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <travelPressureSensorCalibration+0x158>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	3302      	adds	r3, #2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	ed93 7a00 	vldr	s14, [r3]
 8003152:	4b42      	ldr	r3, [pc, #264]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003168:	ee17 3a90 	vmov	r3, s15
 800316c:	b21a      	sxth	r2, r3
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003170:	801a      	strh	r2, [r3, #0]
					+ REAR_TRAVEL_BUFFER_POSITION];
			calibrationValues.frontTravelSensor += outBufPtr[i
 8003172:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <travelPressureSensorCalibration+0x158>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	3303      	adds	r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	ed93 7a00 	vldr	s14, [r3]
 8003182:	4b36      	ldr	r3, [pc, #216]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003184:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003198:	ee17 3a90 	vmov	r3, s15
 800319c:	b21a      	sxth	r2, r3
 800319e:	4b2f      	ldr	r3, [pc, #188]	; (800325c <travelPressureSensorCalibration+0x154>)
 80031a0:	805a      	strh	r2, [r3, #2]
					+ FRONT_TRAVEL_BUFFER_POSITION];
			calibrationValues.rearPressureSensor += outBufPtr[i
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <travelPressureSensorCalibration+0x158>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	ed93 7a00 	vldr	s14, [r3]
 80031b0:	4b2a      	ldr	r3, [pc, #168]	; (800325c <travelPressureSensorCalibration+0x154>)
 80031b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c6:	ee17 3a90 	vmov	r3, s15
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <travelPressureSensorCalibration+0x154>)
 80031ce:	809a      	strh	r2, [r3, #4]
					+ REAR_PRESSURE_BUFFER_POSITION];
			calibrationValues.frontPressureSensor += outBufPtr[i
 80031d0:	4b23      	ldr	r3, [pc, #140]	; (8003260 <travelPressureSensorCalibration+0x158>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	ed93 7a00 	vldr	s14, [r3]
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <travelPressureSensorCalibration+0x154>)
 80031e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f6:	ee17 3a90 	vmov	r3, s15
 80031fa:	b21a      	sxth	r2, r3
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <travelPressureSensorCalibration+0x154>)
 80031fe:	80da      	strh	r2, [r3, #6]
				i += NUMBER_OF_SENSORS)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	3304      	adds	r3, #4
 8003204:	603b      	str	r3, [r7, #0]
		for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2bfc      	cmp	r3, #252	; 0xfc
 800320a:	d99a      	bls.n	8003142 <travelPressureSensorCalibration+0x3a>
					+ FRONT_PRESSURE_BUFFER_POSITION];

		}
		calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <travelPressureSensorCalibration+0x154>)
 800320e:	f9b3 3000 	ldrsh.w	r3, [r3]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 8003212:	099b      	lsrs	r3, r3, #6
		calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003214:	b21a      	sxth	r2, r3
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003218:	801a      	strh	r2, [r3, #0]
		calibrationValues.frontTravelSensor =
				calibrationValues.frontTravelSensor
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <travelPressureSensorCalibration+0x154>)
 800321c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 8003220:	099b      	lsrs	r3, r3, #6
		calibrationValues.frontTravelSensor =
 8003222:	b21a      	sxth	r2, r3
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003226:	805a      	strh	r2, [r3, #2]
		calibrationValues.rearPressureSensor =
				calibrationValues.rearPressureSensor
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <travelPressureSensorCalibration+0x154>)
 800322a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 800322e:	099b      	lsrs	r3, r3, #6
		calibrationValues.rearPressureSensor =
 8003230:	b21a      	sxth	r2, r3
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003234:	809a      	strh	r2, [r3, #4]
		calibrationValues.frontPressureSensor =
				calibrationValues.frontPressureSensor
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003238:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 800323c:	099b      	lsrs	r3, r3, #6
		calibrationValues.frontPressureSensor =
 800323e:	b21a      	sxth	r2, r3
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <travelPressureSensorCalibration+0x154>)
 8003242:	80da      	strh	r2, [r3, #6]
		status = 1;
 8003244:	2301      	movs	r3, #1
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	e001      	b.n	800324e <travelPressureSensorCalibration+0x146>
	}
	else
	{
		status = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
	}

	return (status);
 800324e:	687b      	ldr	r3, [r7, #4]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200055dc 	.word	0x200055dc
 800325c:	20005b90 	.word	0x20005b90
 8003260:	2000679c 	.word	0x2000679c

08003264 <processData>:

void processData(char *sensorsData)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	normalizeTravelData(inBufPtr);
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <processData+0x28>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f99d 	bl	80035b0 <normalizeTravelData>
	sendDataSD(sensorsData, outBufPtr);
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <processData+0x2c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fe f87f 	bl	8001380 <sendDataSD>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20006798 	.word	0x20006798
 8003290:	2000679c 	.word	0x2000679c

08003294 <processDataSag>:

void processDataSag(int32_t *sagFrontRear, int32_t *pressureFrontRear)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
	int numberOfElements = (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS; i +=
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e05d      	b.n	8003364 <processDataSag+0xd0>
			NUMBER_OF_SENSORS)
	{
		sagFrontRear[0] += outBufPtr[i + FRONT_TRAVEL_BUFFER_POSITION];
 80032a8:	4b5f      	ldr	r3, [pc, #380]	; (8003428 <processDataSag+0x194>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3303      	adds	r3, #3
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	ed93 7a00 	vldr	s14, [r3]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032cc:	ee17 2a90 	vmov	r2, s15
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	601a      	str	r2, [r3, #0]
		sagFrontRear[1] += outBufPtr[i + REAR_TRAVEL_BUFFER_POSITION];
 80032d4:	4b54      	ldr	r3, [pc, #336]	; (8003428 <processDataSag+0x194>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3302      	adds	r3, #2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fe:	ee17 2a90 	vmov	r2, s15
 8003302:	601a      	str	r2, [r3, #0]
		pressureFrontRear[0] += outBufPtr[i + FRONT_PRESSURE_BUFFER_POSITION];
 8003304:	4b48      	ldr	r3, [pc, #288]	; (8003428 <processDataSag+0x194>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	ed93 7a00 	vldr	s14, [r3]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003328:	ee17 2a90 	vmov	r2, s15
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	601a      	str	r2, [r3, #0]
		pressureFrontRear[1] += outBufPtr[i + REAR_PRESSURE_BUFFER_POSITION];
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <processDataSag+0x194>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	ed93 7a00 	vldr	s14, [r3]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	3304      	adds	r3, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	ee07 3a90 	vmov	s15, r3
 8003348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800334c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	3304      	adds	r3, #4
 8003354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003358:	ee17 2a90 	vmov	r2, s15
 800335c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS; i +=
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3304      	adds	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2bfc      	cmp	r3, #252	; 0xfc
 8003368:	d99e      	bls.n	80032a8 <processDataSag+0x14>

	}
	sagFrontRear[0] = sagFrontRear[0] / numberOfElements;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	fb92 f2f3 	sdiv	r2, r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	601a      	str	r2, [r3, #0]
	sagFrontRear[1] = sagFrontRear[1] / numberOfElements;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	fb91 f2f2 	sdiv	r2, r1, r2
 8003388:	601a      	str	r2, [r3, #0]
	pressureFrontRear[0] = pressureFrontRear[0] / numberOfElements;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	fb92 f2f3 	sdiv	r2, r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	601a      	str	r2, [r3, #0]
	pressureFrontRear[1] = pressureFrontRear[1] / numberOfElements;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	3304      	adds	r3, #4
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	3304      	adds	r3, #4
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	fb91 f2f2 	sdiv	r2, r1, r2
 80033a8:	601a      	str	r2, [r3, #0]

	sagFrontRear[0] = CONVERT_TO_PERCENT
			* (sagFrontRear[0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
					/ ((float) (FRONT_SUSPENSION_TRAVEL
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
							- calibrationValues.frontTravelSensor)));
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <processDataSag+0x198>)
 80033b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033bc:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
					/ ((float) (FRONT_SUSPENSION_TRAVEL
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
			* (sagFrontRear[0]
 80033cc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003430 <processDataSag+0x19c>
 80033d0:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagFrontRear[0] = CONVERT_TO_PERCENT
 80033d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d8:	ee17 2a90 	vmov	r2, s15
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	601a      	str	r2, [r3, #0]
	sagFrontRear[1] = CONVERT_TO_PERCENT
			* (sagFrontRear[1]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
					/ ((float) (REAR_SUSPENSION_TRAVEL
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
							- calibrationValues.rearTravelSensor)));
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <processDataSag+0x198>)
 80033f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f4:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
					/ ((float) (REAR_SUSPENSION_TRAVEL
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003400:	eec6 7a87 	vdiv.f32	s15, s13, s14
			* (sagFrontRear[1]
 8003404:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003430 <processDataSag+0x19c>
 8003408:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagFrontRear[1] = CONVERT_TO_PERCENT
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003414:	ee17 2a90 	vmov	r2, s15
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	2000679c 	.word	0x2000679c
 800342c:	20005b90 	.word	0x20005b90
 8003430:	42c80000 	.word	0x42c80000

08003434 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800343e:	4a08      	ldr	r2, [pc, #32]	; (8003460 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8003440:	601a      	str	r2, [r3, #0]
	outBufPtr = &adcDataRead[0];
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8003444:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8003446:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(travelSensorSemHandle);
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f010 fe6d 	bl	801412c <osSemaphoreRelease>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20006798 	.word	0x20006798
 8003460:	20005b98 	.word	0x20005b98
 8003464:	2000679c 	.word	0x2000679c
 8003468:	20005f98 	.word	0x20005f98
 800346c:	200055dc 	.word	0x200055dc

08003470 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
#ifdef CHECK_SAMPLE_TIME
	previousTime = time_end;
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_ADC_ConvCpltCallback+0x78>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_ADC_ConvCpltCallback+0x7c>)
 800347e:	6013      	str	r3, [r2, #0]
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_ADC_ConvCpltCallback+0x80>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	461a      	mov	r2, r3
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_ADC_ConvCpltCallback+0x78>)
 800348a:	601a      	str	r2, [r3, #0]
	sample_time = NUMBER_OF_SENSORS
			* ((time_end - previousTime) / (float) (TRAVEL_SENSOR_BUFFER_SIZE));
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_ADC_ConvCpltCallback+0x78>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b16      	ldr	r3, [pc, #88]	; (80034ec <HAL_ADC_ConvCpltCallback+0x7c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800349e:	eddf 6a15 	vldr	s13, [pc, #84]	; 80034f4 <HAL_ADC_ConvCpltCallback+0x84>
 80034a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034a6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80034aa:	ee67 7a87 	vmul.f32	s15, s15, s14
	sample_time = NUMBER_OF_SENSORS
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x88>)
 80034b0:	edc3 7a00 	vstr	s15, [r3]
	printf("semFullTime: %f\n", sample_time);
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x88>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd f875 	bl	80005a8 <__aeabi_f2d>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	480e      	ldr	r0, [pc, #56]	; (80034fc <HAL_ADC_ConvCpltCallback+0x8c>)
 80034c4:	f014 fe66 	bl	8018194 <iprintf>
#endif

	inBufPtr = &adcDataWrite[TRAVEL_SENSOR_BUFFER_SIZE / 2];
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <HAL_ADC_ConvCpltCallback+0x90>)
 80034ca:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <HAL_ADC_ConvCpltCallback+0x94>)
 80034cc:	601a      	str	r2, [r3, #0]
	outBufPtr = &adcDataRead[TRAVEL_SENSOR_BUFFER_SIZE / 2];
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <HAL_ADC_ConvCpltCallback+0x98>)
 80034d0:	4a0e      	ldr	r2, [pc, #56]	; (800350c <HAL_ADC_ConvCpltCallback+0x9c>)
 80034d2:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(travelSensorSemHandle);
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_ADC_ConvCpltCallback+0xa0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f010 fe27 	bl	801412c <osSemaphoreRelease>

}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200067a0 	.word	0x200067a0
 80034ec:	200067a4 	.word	0x200067a4
 80034f0:	20005b00 	.word	0x20005b00
 80034f4:	44000000 	.word	0x44000000
 80034f8:	200067a8 	.word	0x200067a8
 80034fc:	0801a8f0 	.word	0x0801a8f0
 8003500:	20006798 	.word	0x20006798
 8003504:	20005d98 	.word	0x20005d98
 8003508:	2000679c 	.word	0x2000679c
 800350c:	20006398 	.word	0x20006398
 8003510:	200055dc 	.word	0x200055dc

08003514 <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite,
		int16_t sensorTravel)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite * sensorTravel / (float) ADC_RESOLUTION);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b21b      	sxth	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800352c:	fb02 f303 	mul.w	r3, r2, r3
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003538:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003558 <convertAdcToTravel+0x44>
 800353c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003544:	ee17 3a90 	vmov	r3, s15
 8003548:	b21b      	sxth	r3, r3
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	45800000 	.word	0x45800000

0800355c <convertAdcToPressure>:

static int16_t convertAdcToPressure(volatile int16_t *adcDataWrite,
		int16_t sensorMaxPressure)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]

	return ((CONVERT_MPa_to_PSI)
			* (*adcDataWrite * sensorMaxPressure / ((float) ADC_RESOLUTION)));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b21b      	sxth	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003580:	eddf 6a09 	vldr	s13, [pc, #36]	; 80035a8 <convertAdcToPressure+0x4c>
 8003584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003588:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80035ac <convertAdcToPressure+0x50>
 800358c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003594:	ee17 3a90 	vmov	r3, s15
 8003598:	b21b      	sxth	r3, r3
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	45800000 	.word	0x45800000
 80035ac:	43110000 	.word	0x43110000

080035b0 <normalizeTravelData>:

static void normalizeTravelData(volatile int16_t *inBufPtr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	for (int n = 0; n <= (TRAVEL_SENSOR_BUFFER_SIZE / 2) - NUMBER_OF_SENSORS;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e06d      	b.n	800369a <normalizeTravelData+0xea>
			n += NUMBER_OF_SENSORS)
	{
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
				&inBufPtr[n + REAR_PRESSURE_BUFFER_POSITION],
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	005b      	lsls	r3, r3, #1
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	2106      	movs	r1, #6
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ffc7 	bl	800355c <convertAdcToPressure>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 80035d2:	4b36      	ldr	r3, [pc, #216]	; (80036ac <normalizeTravelData+0xfc>)
 80035d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035d8:	1ad1      	subs	r1, r2, r3
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 80035da:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <normalizeTravelData+0x100>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	ee07 1a90 	vmov	s15, r1
 80035e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ec:	edc3 7a00 	vstr	s15, [r3]
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
				&inBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION],
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	2106      	movs	r1, #6
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ffad 	bl	800355c <convertAdcToPressure>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003606:	4b29      	ldr	r3, [pc, #164]	; (80036ac <normalizeTravelData+0xfc>)
 8003608:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800360c:	1ad1      	subs	r1, r2, r3
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <normalizeTravelData+0x100>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3301      	adds	r3, #1
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	ee07 1a90 	vmov	s15, r1
 800361e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003622:	edc3 7a00 	vstr	s15, [r3]
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
				&inBufPtr[n + REAR_TRAVEL_BUFFER_POSITION], REAR_SENSOR_TRAVEL)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3302      	adds	r3, #2
 800362a:	005b      	lsls	r3, r3, #1
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	217d      	movs	r1, #125	; 0x7d
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff6e 	bl	8003514 <convertAdcToTravel>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
				- calibrationValues.rearTravelSensor;
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <normalizeTravelData+0xfc>)
 800363e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003642:	1ad1      	subs	r1, r2, r3
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <normalizeTravelData+0x100>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3302      	adds	r3, #2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	ee07 1a90 	vmov	s15, r1
 8003654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003658:	edc3 7a00 	vstr	s15, [r3]
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
				&inBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION],
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3303      	adds	r3, #3
 8003660:	005b      	lsls	r3, r3, #1
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff52 	bl	8003514 <convertAdcToTravel>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <normalizeTravelData+0xfc>)
 8003676:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800367a:	1ad1      	subs	r1, r2, r3
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <normalizeTravelData+0x100>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3303      	adds	r3, #3
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	ee07 1a90 	vmov	s15, r1
 800368c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003690:	edc3 7a00 	vstr	s15, [r3]
			n += NUMBER_OF_SENSORS)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3304      	adds	r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
	for (int n = 0; n <= (TRAVEL_SENSOR_BUFFER_SIZE / 2) - NUMBER_OF_SENSORS;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2bfc      	cmp	r3, #252	; 0xfc
 800369e:	d98e      	bls.n	80035be <normalizeTravelData+0xe>
	}
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20005b90 	.word	0x20005b90
 80036b0:	2000679c 	.word	0x2000679c

080036b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <MX_USART2_UART_Init+0x50>)
 80036bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036da:	220c      	movs	r2, #12
 80036dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036ea:	4805      	ldr	r0, [pc, #20]	; (8003700 <MX_USART2_UART_Init+0x4c>)
 80036ec:	f007 fbf0 	bl	800aed0 <HAL_UART_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80036f6:	f7fe ffa9 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200067ac 	.word	0x200067ac
 8003704:	40004400 	.word	0x40004400

08003708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <HAL_UART_MspInit+0x84>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d12b      	bne.n	8003782 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <HAL_UART_MspInit+0x88>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a17      	ldr	r2, [pc, #92]	; (8003790 <HAL_UART_MspInit+0x88>)
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_UART_MspInit+0x88>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_UART_MspInit+0x88>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a10      	ldr	r2, [pc, #64]	; (8003790 <HAL_UART_MspInit+0x88>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_UART_MspInit+0x88>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003762:	230c      	movs	r3, #12
 8003764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376e:	2303      	movs	r3, #3
 8003770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003772:	2307      	movs	r3, #7
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4619      	mov	r1, r3
 800377c:	4805      	ldr	r0, [pc, #20]	; (8003794 <HAL_UART_MspInit+0x8c>)
 800377e:	f001 f9d1 	bl	8004b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003782:	bf00      	nop
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40004400 	.word	0x40004400
 8003790:	40023800 	.word	0x40023800
 8003794:	40020000 	.word	0x40020000

08003798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800379c:	480d      	ldr	r0, [pc, #52]	; (80037d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800379e:	490e      	ldr	r1, [pc, #56]	; (80037d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037a0:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037a4:	e002      	b.n	80037ac <LoopCopyDataInit>

080037a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037aa:	3304      	adds	r3, #4

080037ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b0:	d3f9      	bcc.n	80037a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037b4:	4c0b      	ldr	r4, [pc, #44]	; (80037e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b8:	e001      	b.n	80037be <LoopFillZerobss>

080037ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037bc:	3204      	adds	r2, #4

080037be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c0:	d3fb      	bcc.n	80037ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037c2:	f7ff fac9 	bl	8002d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037c6:	f014 fef9 	bl	80185bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ca:	f7fe fe9f 	bl	800250c <main>
  bx  lr    
 80037ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d8:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 80037dc:	0801adfc 	.word	0x0801adfc
  ldr r2, =_sbss
 80037e0:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80037e4:	2000b378 	.word	0x2000b378

080037e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037e8:	e7fe      	b.n	80037e8 <ADC_IRQHandler>
	...

080037ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_Init+0x40>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0d      	ldr	r2, [pc, #52]	; (800382c <HAL_Init+0x40>)
 80037f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_Init+0x40>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <HAL_Init+0x40>)
 8003802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_Init+0x40>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a07      	ldr	r2, [pc, #28]	; (800382c <HAL_Init+0x40>)
 800380e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003814:	2003      	movs	r0, #3
 8003816:	f000 fd64 	bl	80042e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800381a:	200f      	movs	r0, #15
 800381c:	f7ff f8f0 	bl	8002a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003820:	f7ff f8c2 	bl	80029a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023c00 	.word	0x40023c00

08003830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_IncTick+0x20>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_IncTick+0x24>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4413      	add	r3, r2
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <HAL_IncTick+0x24>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	2000001c 	.word	0x2000001c
 8003854:	200067f0 	.word	0x200067f0

08003858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return uwTick;
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_GetTick+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	200067f0 	.word	0x200067f0

08003870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff ffee 	bl	8003858 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d005      	beq.n	8003896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <HAL_Delay+0x44>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003896:	bf00      	nop
 8003898:	f7ff ffde 	bl	8003858 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d8f7      	bhi.n	8003898 <HAL_Delay+0x28>
  {
  }
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000001c 	.word	0x2000001c

080038b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e033      	b.n	8003936 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fe9c 	bl	8001614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038fe:	f023 0302 	bic.w	r3, r3, #2
 8003902:	f043 0202 	orr.w	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fabe 	bl	8003e8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	f043 0201 	orr.w	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
 8003926:	e001      	b.n	800392c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_ADC_Start_DMA+0x1e>
 800395a:	2302      	movs	r3, #2
 800395c:	e0e9      	b.n	8003b32 <HAL_ADC_Start_DMA+0x1f2>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d018      	beq.n	80039a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003984:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_ADC_Start_DMA+0x1fc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6d      	ldr	r2, [pc, #436]	; (8003b40 <HAL_ADC_Start_DMA+0x200>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0c9a      	lsrs	r2, r3, #18
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003998:	e002      	b.n	80039a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	3b01      	subs	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f9      	bne.n	800399a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b4:	d107      	bne.n	80039c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	f040 80a1 	bne.w	8003b18 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a14:	d106      	bne.n	8003a24 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f023 0206 	bic.w	r2, r3, #6
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
 8003a22:	e002      	b.n	8003a2a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a32:	4b44      	ldr	r3, [pc, #272]	; (8003b44 <HAL_ADC_Start_DMA+0x204>)
 8003a34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	4a43      	ldr	r2, [pc, #268]	; (8003b48 <HAL_ADC_Start_DMA+0x208>)
 8003a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_ADC_Start_DMA+0x20c>)
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	4a41      	ldr	r2, [pc, #260]	; (8003b50 <HAL_ADC_Start_DMA+0x210>)
 8003a4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	334c      	adds	r3, #76	; 0x4c
 8003a82:	4619      	mov	r1, r3
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f000 fd0e 	bl	80044a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d12a      	bne.n	8003aee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <HAL_ADC_Start_DMA+0x214>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d015      	beq.n	8003ace <HAL_ADC_Start_DMA+0x18e>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <HAL_ADC_Start_DMA+0x218>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d105      	bne.n	8003ab8 <HAL_ADC_Start_DMA+0x178>
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_ADC_Start_DMA+0x204>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <HAL_ADC_Start_DMA+0x21c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d136      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_ADC_Start_DMA+0x204>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d130      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d129      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e020      	b.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_ADC_Start_DMA+0x214>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d11b      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d114      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	e00b      	b.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f043 0210 	orr.w	r2, r3, #16
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000014 	.word	0x20000014
 8003b40:	431bde83 	.word	0x431bde83
 8003b44:	40012300 	.word	0x40012300
 8003b48:	08004085 	.word	0x08004085
 8003b4c:	0800413f 	.word	0x0800413f
 8003b50:	0800415b 	.word	0x0800415b
 8003b54:	40012000 	.word	0x40012000
 8003b58:	40012100 	.word	0x40012100
 8003b5c:	40012200 	.word	0x40012200

08003b60 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_Stop_DMA+0x1a>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e048      	b.n	8003c0c <HAL_ADC_Stop_DMA+0xac>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d130      	bne.n	8003c02 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d10f      	bne.n	8003bde <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fcc8 	bl	8004558 <HAL_DMA_Abort>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003bec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x1c>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e113      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x244>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d925      	bls.n	8003ca0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68d9      	ldr	r1, [r3, #12]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	3b1e      	subs	r3, #30
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43da      	mvns	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	400a      	ands	r2, r1
 8003c78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68d9      	ldr	r1, [r3, #12]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4403      	add	r3, r0
 8003c92:	3b1e      	subs	r3, #30
 8003c94:	409a      	lsls	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e022      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6919      	ldr	r1, [r3, #16]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6919      	ldr	r1, [r3, #16]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4403      	add	r3, r0
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d824      	bhi.n	8003d38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b05      	subs	r3, #5
 8003d00:	221f      	movs	r2, #31
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	3b05      	subs	r3, #5
 8003d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	635a      	str	r2, [r3, #52]	; 0x34
 8003d36:	e04c      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	d824      	bhi.n	8003d8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	3b23      	subs	r3, #35	; 0x23
 8003d52:	221f      	movs	r2, #31
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43da      	mvns	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	400a      	ands	r2, r1
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	3b23      	subs	r3, #35	; 0x23
 8003d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
 8003d88:	e023      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	3b41      	subs	r3, #65	; 0x41
 8003d9c:	221f      	movs	r2, #31
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43da      	mvns	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	400a      	ands	r2, r1
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3b41      	subs	r3, #65	; 0x41
 8003dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dd2:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_ADC_ConfigChannel+0x250>)
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <HAL_ADC_ConfigChannel+0x254>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10f      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x1d8>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b12      	cmp	r3, #18
 8003de6:	d10b      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_ADC_ConfigChannel+0x254>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d12b      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x23a>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_ADC_ConfigChannel+0x258>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <HAL_ADC_ConfigChannel+0x1f4>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b11      	cmp	r3, #17
 8003e1a:	d122      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a11      	ldr	r2, [pc, #68]	; (8003e80 <HAL_ADC_ConfigChannel+0x258>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d111      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <HAL_ADC_ConfigChannel+0x25c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a11      	ldr	r2, [pc, #68]	; (8003e88 <HAL_ADC_ConfigChannel+0x260>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	0c9a      	lsrs	r2, r3, #18
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e54:	e002      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f9      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40012300 	.word	0x40012300
 8003e7c:	40012000 	.word	0x40012000
 8003e80:	10000012 	.word	0x10000012
 8003e84:	20000014 	.word	0x20000014
 8003e88:	431bde83 	.word	0x431bde83

08003e8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e94:	4b79      	ldr	r3, [pc, #484]	; (800407c <ADC_Init+0x1f0>)
 8003e96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	021a      	lsls	r2, r3, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6899      	ldr	r1, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	4a58      	ldr	r2, [pc, #352]	; (8004080 <ADC_Init+0x1f4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6899      	ldr	r1, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e00f      	b.n	8003f8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0202 	bic.w	r2, r2, #2
 8003f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e1b      	ldrb	r3, [r3, #24]
 8003fa4:	005a      	lsls	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01b      	beq.n	8003ff0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	035a      	lsls	r2, r3, #13
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	e007      	b.n	8004000 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	3b01      	subs	r3, #1
 800401c:	051a      	lsls	r2, r3, #20
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004042:	025a      	lsls	r2, r3, #9
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	029a      	lsls	r2, r3, #10
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012300 	.word	0x40012300
 8004080:	0f000001 	.word	0x0f000001

08004084 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d13c      	bne.n	8004118 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d12b      	bne.n	8004110 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d127      	bne.n	8004110 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d119      	bne.n	8004110 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0220 	bic.w	r2, r2, #32
 80040ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f043 0201 	orr.w	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff f9ad 	bl	8003470 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004116:	e00e      	b.n	8004136 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff fd75 	bl	8003c14 <HAL_ADC_ErrorCallback>
}
 800412a:	e004      	b.n	8004136 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff f971 	bl	8003434 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2240      	movs	r2, #64	; 0x40
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f043 0204 	orr.w	r2, r3, #4
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff fd4a 	bl	8003c14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <__NVIC_SetPriorityGrouping>:
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041a4:	4013      	ands	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ba:	4a04      	ldr	r2, [pc, #16]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	60d3      	str	r3, [r2, #12]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <__NVIC_GetPriorityGrouping>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <__NVIC_GetPriorityGrouping+0x18>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 0307 	and.w	r3, r3, #7
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_EnableIRQ>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db0b      	blt.n	8004216 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4907      	ldr	r1, [pc, #28]	; (8004224 <__NVIC_EnableIRQ+0x38>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2001      	movs	r0, #1
 800420e:	fa00 f202 	lsl.w	r2, r0, r2
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000e100 	.word	0xe000e100

08004228 <__NVIC_SetPriority>:
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	6039      	str	r1, [r7, #0]
 8004232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db0a      	blt.n	8004252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	490c      	ldr	r1, [pc, #48]	; (8004274 <__NVIC_SetPriority+0x4c>)
 8004242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	440b      	add	r3, r1
 800424c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004250:	e00a      	b.n	8004268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4908      	ldr	r1, [pc, #32]	; (8004278 <__NVIC_SetPriority+0x50>)
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	3b04      	subs	r3, #4
 8004260:	0112      	lsls	r2, r2, #4
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	440b      	add	r3, r1
 8004266:	761a      	strb	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000e100 	.word	0xe000e100
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <NVIC_EncodePriority>:
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f1c3 0307 	rsb	r3, r3, #7
 8004296:	2b04      	cmp	r3, #4
 8004298:	bf28      	it	cs
 800429a:	2304      	movcs	r3, #4
 800429c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d902      	bls.n	80042ac <NVIC_EncodePriority+0x30>
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3b03      	subs	r3, #3
 80042aa:	e000      	b.n	80042ae <NVIC_EncodePriority+0x32>
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	401a      	ands	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c4:	f04f 31ff 	mov.w	r1, #4294967295
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	43d9      	mvns	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	4313      	orrs	r3, r2
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff4c 	bl	8004188 <__NVIC_SetPriorityGrouping>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800430a:	f7ff ff61 	bl	80041d0 <__NVIC_GetPriorityGrouping>
 800430e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7ff ffb1 	bl	800427c <NVIC_EncodePriority>
 800431a:	4602      	mov	r2, r0
 800431c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff80 	bl	8004228 <__NVIC_SetPriority>
}
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff54 	bl	80041ec <__NVIC_EnableIRQ>
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004358:	f7ff fa7e 	bl	8003858 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e099      	b.n	800449c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004388:	e00f      	b.n	80043aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800438a:	f7ff fa65 	bl	8003858 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b05      	cmp	r3, #5
 8004396:	d908      	bls.n	80043aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2203      	movs	r2, #3
 80043a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e078      	b.n	800449c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e8      	bne.n	800438a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4b38      	ldr	r3, [pc, #224]	; (80044a4 <HAL_DMA_Init+0x158>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b04      	cmp	r3, #4
 8004402:	d107      	bne.n	8004414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	4313      	orrs	r3, r2
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b04      	cmp	r3, #4
 800443c:	d117      	bne.n	800446e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 faeb 	bl	8004a2c <DMA_CheckFifoParam>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2240      	movs	r2, #64	; 0x40
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800446a:	2301      	movs	r3, #1
 800446c:	e016      	b.n	800449c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 faa2 	bl	80049c0 <DMA_CalcBaseAndBitshift>
 800447c:	4603      	mov	r3, r0
 800447e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	223f      	movs	r2, #63	; 0x3f
 8004486:	409a      	lsls	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	f010803f 	.word	0xf010803f

080044a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_Start_IT+0x26>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e040      	b.n	8004550 <HAL_DMA_Start_IT+0xa8>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d12f      	bne.n	8004542 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fa34 	bl	8004964 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004500:	223f      	movs	r2, #63	; 0x3f
 8004502:	409a      	lsls	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0216 	orr.w	r2, r2, #22
 8004516:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0208 	orr.w	r2, r2, #8
 800452e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e005      	b.n	800454e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800454a:	2302      	movs	r3, #2
 800454c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004566:	f7ff f977 	bl	8003858 <HAL_GetTick>
 800456a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d008      	beq.n	800458a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e052      	b.n	8004630 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0216 	bic.w	r2, r2, #22
 8004598:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_DMA_Abort+0x62>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0208 	bic.w	r2, r2, #8
 80045c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045da:	e013      	b.n	8004604 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045dc:	f7ff f93c 	bl	8003858 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d90c      	bls.n	8004604 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2203      	movs	r2, #3
 80045f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e015      	b.n	8004630 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e4      	bne.n	80045dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	223f      	movs	r2, #63	; 0x3f
 8004618:	409a      	lsls	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004644:	4b8e      	ldr	r3, [pc, #568]	; (8004880 <HAL_DMA_IRQHandler+0x248>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a8e      	ldr	r2, [pc, #568]	; (8004884 <HAL_DMA_IRQHandler+0x24c>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	0a9b      	lsrs	r3, r3, #10
 8004650:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	2208      	movs	r2, #8
 8004664:	409a      	lsls	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01a      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0204 	bic.w	r2, r2, #4
 800468a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	2208      	movs	r2, #8
 8004692:	409a      	lsls	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	2201      	movs	r2, #1
 80046aa:	409a      	lsls	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d012      	beq.n	80046da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	2201      	movs	r2, #1
 80046c8:	409a      	lsls	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f043 0202 	orr.w	r2, r3, #2
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	2204      	movs	r2, #4
 80046e0:	409a      	lsls	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d012      	beq.n	8004710 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fc:	2204      	movs	r2, #4
 80046fe:	409a      	lsls	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	2210      	movs	r2, #16
 8004716:	409a      	lsls	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d043      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d03c      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004732:	2210      	movs	r2, #16
 8004734:	409a      	lsls	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d018      	beq.n	800477a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d108      	bne.n	8004768 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d024      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
 8004766:	e01f      	b.n	80047a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01b      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
 8004778:	e016      	b.n	80047a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d107      	bne.n	8004798 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0208 	bic.w	r2, r2, #8
 8004796:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	2220      	movs	r2, #32
 80047ae:	409a      	lsls	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 808f 	beq.w	80048d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8087 	beq.w	80048d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	2220      	movs	r2, #32
 80047d0:	409a      	lsls	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d136      	bne.n	8004850 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0216 	bic.w	r2, r2, #22
 80047f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004800:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <HAL_DMA_IRQHandler+0x1da>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0208 	bic.w	r2, r2, #8
 8004820:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	223f      	movs	r2, #63	; 0x3f
 8004828:	409a      	lsls	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004842:	2b00      	cmp	r3, #0
 8004844:	d07e      	beq.n	8004944 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
        }
        return;
 800484e:	e079      	b.n	8004944 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01d      	beq.n	800489a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10d      	bne.n	8004888 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004870:	2b00      	cmp	r3, #0
 8004872:	d031      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
 800487c:	e02c      	b.n	80048d8 <HAL_DMA_IRQHandler+0x2a0>
 800487e:	bf00      	nop
 8004880:	20000014 	.word	0x20000014
 8004884:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d023      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
 8004898:	e01e      	b.n	80048d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10f      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0210 	bic.w	r2, r2, #16
 80048b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d032      	beq.n	8004946 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d022      	beq.n	8004932 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2205      	movs	r2, #5
 80048f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	3301      	adds	r3, #1
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	429a      	cmp	r2, r3
 800490e:	d307      	bcc.n	8004920 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f2      	bne.n	8004904 <HAL_DMA_IRQHandler+0x2cc>
 800491e:	e000      	b.n	8004922 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004920:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
 8004942:	e000      	b.n	8004946 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004944:	bf00      	nop
    }
  }
}
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004980:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d108      	bne.n	80049a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049a2:	e007      	b.n	80049b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	60da      	str	r2, [r3, #12]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	3b10      	subs	r3, #16
 80049d0:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <DMA_CalcBaseAndBitshift+0x64>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049da:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <DMA_CalcBaseAndBitshift+0x68>)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d909      	bls.n	8004a02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004a00:	e007      	b.n	8004a12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	aaaaaaab 	.word	0xaaaaaaab
 8004a28:	0801a9bc 	.word	0x0801a9bc

08004a2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d11f      	bne.n	8004a86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d856      	bhi.n	8004afa <DMA_CheckFifoParam+0xce>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <DMA_CheckFifoParam+0x28>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a77 	.word	0x08004a77
 8004a5c:	08004a65 	.word	0x08004a65
 8004a60:	08004afb 	.word	0x08004afb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d046      	beq.n	8004afe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a74:	e043      	b.n	8004afe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a7e:	d140      	bne.n	8004b02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a84:	e03d      	b.n	8004b02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8e:	d121      	bne.n	8004ad4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d837      	bhi.n	8004b06 <DMA_CheckFifoParam+0xda>
 8004a96:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <DMA_CheckFifoParam+0x70>)
 8004a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	08004ab3 	.word	0x08004ab3
 8004aa4:	08004aad 	.word	0x08004aad
 8004aa8:	08004ac5 	.word	0x08004ac5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab0:	e030      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d025      	beq.n	8004b0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac2:	e022      	b.n	8004b0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004acc:	d11f      	bne.n	8004b0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ad2:	e01c      	b.n	8004b0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d903      	bls.n	8004ae2 <DMA_CheckFifoParam+0xb6>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d003      	beq.n	8004ae8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ae0:	e018      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae6:	e015      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00e      	beq.n	8004b12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      break;
 8004af8:	e00b      	b.n	8004b12 <DMA_CheckFifoParam+0xe6>
      break;
 8004afa:	bf00      	nop
 8004afc:	e00a      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
      break;
 8004afe:	bf00      	nop
 8004b00:	e008      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
      break;
 8004b02:	bf00      	nop
 8004b04:	e006      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
      break;
 8004b06:	bf00      	nop
 8004b08:	e004      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e002      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b0e:	bf00      	nop
 8004b10:	e000      	b.n	8004b14 <DMA_CheckFifoParam+0xe8>
      break;
 8004b12:	bf00      	nop
    }
  } 
  
  return status; 
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop

08004b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b089      	sub	sp, #36	; 0x24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	e165      	b.n	8004e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b40:	2201      	movs	r2, #1
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	f040 8154 	bne.w	8004e06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d005      	beq.n	8004b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d130      	bne.n	8004bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bac:	2201      	movs	r2, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 0201 	and.w	r2, r3, #1
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d017      	beq.n	8004c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	2203      	movs	r2, #3
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d123      	bne.n	8004c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	08da      	lsrs	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3208      	adds	r2, #8
 8004c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	220f      	movs	r2, #15
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	08da      	lsrs	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3208      	adds	r2, #8
 8004c62:	69b9      	ldr	r1, [r7, #24]
 8004c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	2203      	movs	r2, #3
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0203 	and.w	r2, r3, #3
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80ae 	beq.w	8004e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	4a5c      	ldr	r2, [pc, #368]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cba:	4b5a      	ldr	r3, [pc, #360]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cc6:	4a58      	ldr	r2, [pc, #352]	; (8004e28 <HAL_GPIO_Init+0x304>)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	3302      	adds	r3, #2
 8004cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	220f      	movs	r2, #15
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a4f      	ldr	r2, [pc, #316]	; (8004e2c <HAL_GPIO_Init+0x308>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d025      	beq.n	8004d3e <HAL_GPIO_Init+0x21a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a4e      	ldr	r2, [pc, #312]	; (8004e30 <HAL_GPIO_Init+0x30c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01f      	beq.n	8004d3a <HAL_GPIO_Init+0x216>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a4d      	ldr	r2, [pc, #308]	; (8004e34 <HAL_GPIO_Init+0x310>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d019      	beq.n	8004d36 <HAL_GPIO_Init+0x212>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a4c      	ldr	r2, [pc, #304]	; (8004e38 <HAL_GPIO_Init+0x314>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_GPIO_Init+0x20e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a4b      	ldr	r2, [pc, #300]	; (8004e3c <HAL_GPIO_Init+0x318>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00d      	beq.n	8004d2e <HAL_GPIO_Init+0x20a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a4a      	ldr	r2, [pc, #296]	; (8004e40 <HAL_GPIO_Init+0x31c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <HAL_GPIO_Init+0x206>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a49      	ldr	r2, [pc, #292]	; (8004e44 <HAL_GPIO_Init+0x320>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_GPIO_Init+0x202>
 8004d22:	2306      	movs	r3, #6
 8004d24:	e00c      	b.n	8004d40 <HAL_GPIO_Init+0x21c>
 8004d26:	2307      	movs	r3, #7
 8004d28:	e00a      	b.n	8004d40 <HAL_GPIO_Init+0x21c>
 8004d2a:	2305      	movs	r3, #5
 8004d2c:	e008      	b.n	8004d40 <HAL_GPIO_Init+0x21c>
 8004d2e:	2304      	movs	r3, #4
 8004d30:	e006      	b.n	8004d40 <HAL_GPIO_Init+0x21c>
 8004d32:	2303      	movs	r3, #3
 8004d34:	e004      	b.n	8004d40 <HAL_GPIO_Init+0x21c>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e002      	b.n	8004d40 <HAL_GPIO_Init+0x21c>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_GPIO_Init+0x21c>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	f002 0203 	and.w	r2, r2, #3
 8004d46:	0092      	lsls	r2, r2, #2
 8004d48:	4093      	lsls	r3, r2
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d50:	4935      	ldr	r1, [pc, #212]	; (8004e28 <HAL_GPIO_Init+0x304>)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	3302      	adds	r3, #2
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <HAL_GPIO_Init+0x324>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d82:	4a31      	ldr	r2, [pc, #196]	; (8004e48 <HAL_GPIO_Init+0x324>)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d88:	4b2f      	ldr	r3, [pc, #188]	; (8004e48 <HAL_GPIO_Init+0x324>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <HAL_GPIO_Init+0x324>)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004db2:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <HAL_GPIO_Init+0x324>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dd6:	4a1c      	ldr	r2, [pc, #112]	; (8004e48 <HAL_GPIO_Init+0x324>)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <HAL_GPIO_Init+0x324>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e00:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <HAL_GPIO_Init+0x324>)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	f67f ae96 	bls.w	8004b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	3724      	adds	r7, #36	; 0x24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40013800 	.word	0x40013800
 8004e2c:	40020000 	.word	0x40020000
 8004e30:	40020400 	.word	0x40020400
 8004e34:	40020800 	.word	0x40020800
 8004e38:	40020c00 	.word	0x40020c00
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40021400 	.word	0x40021400
 8004e44:	40021800 	.word	0x40021800
 8004e48:	40013c00 	.word	0x40013c00

08004e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	887b      	ldrh	r3, [r7, #2]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
 8004e68:	e001      	b.n	8004e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e8c:	787b      	ldrb	r3, [r7, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e92:	887a      	ldrh	r2, [r7, #2]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e98:	e003      	b.n	8004ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	041a      	lsls	r2, r3, #16
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	619a      	str	r2, [r3, #24]
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e12b      	b.n	800511a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc ff56 	bl	8001d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2224      	movs	r2, #36	; 0x24
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f14:	f002 fb64 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 8004f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4a81      	ldr	r2, [pc, #516]	; (8005124 <HAL_I2C_Init+0x274>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d807      	bhi.n	8004f34 <HAL_I2C_Init+0x84>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a80      	ldr	r2, [pc, #512]	; (8005128 <HAL_I2C_Init+0x278>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bf94      	ite	ls
 8004f2c:	2301      	movls	r3, #1
 8004f2e:	2300      	movhi	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e006      	b.n	8004f42 <HAL_I2C_Init+0x92>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a7d      	ldr	r2, [pc, #500]	; (800512c <HAL_I2C_Init+0x27c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	bf94      	ite	ls
 8004f3c:	2301      	movls	r3, #1
 8004f3e:	2300      	movhi	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0e7      	b.n	800511a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4a78      	ldr	r2, [pc, #480]	; (8005130 <HAL_I2C_Init+0x280>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	0c9b      	lsrs	r3, r3, #18
 8004f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a6a      	ldr	r2, [pc, #424]	; (8005124 <HAL_I2C_Init+0x274>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d802      	bhi.n	8004f84 <HAL_I2C_Init+0xd4>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	3301      	adds	r3, #1
 8004f82:	e009      	b.n	8004f98 <HAL_I2C_Init+0xe8>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f8a:	fb02 f303 	mul.w	r3, r2, r3
 8004f8e:	4a69      	ldr	r2, [pc, #420]	; (8005134 <HAL_I2C_Init+0x284>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	099b      	lsrs	r3, r3, #6
 8004f96:	3301      	adds	r3, #1
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004faa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	495c      	ldr	r1, [pc, #368]	; (8005124 <HAL_I2C_Init+0x274>)
 8004fb4:	428b      	cmp	r3, r1
 8004fb6:	d819      	bhi.n	8004fec <HAL_I2C_Init+0x13c>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1e59      	subs	r1, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc6:	1c59      	adds	r1, r3, #1
 8004fc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fcc:	400b      	ands	r3, r1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_I2C_Init+0x138>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1e59      	subs	r1, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe6:	e051      	b.n	800508c <HAL_I2C_Init+0x1dc>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	e04f      	b.n	800508c <HAL_I2C_Init+0x1dc>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d111      	bne.n	8005018 <HAL_I2C_Init+0x168>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1e58      	subs	r0, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	440b      	add	r3, r1
 8005002:	fbb0 f3f3 	udiv	r3, r0, r3
 8005006:	3301      	adds	r3, #1
 8005008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	e012      	b.n	800503e <HAL_I2C_Init+0x18e>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	1e58      	subs	r0, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6859      	ldr	r1, [r3, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	0099      	lsls	r1, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	fbb0 f3f3 	udiv	r3, r0, r3
 800502e:	3301      	adds	r3, #1
 8005030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005034:	2b00      	cmp	r3, #0
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_Init+0x196>
 8005042:	2301      	movs	r3, #1
 8005044:	e022      	b.n	800508c <HAL_I2C_Init+0x1dc>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10e      	bne.n	800506c <HAL_I2C_Init+0x1bc>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1e58      	subs	r0, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6859      	ldr	r1, [r3, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	440b      	add	r3, r1
 800505c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005060:	3301      	adds	r3, #1
 8005062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506a:	e00f      	b.n	800508c <HAL_I2C_Init+0x1dc>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1e58      	subs	r0, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6859      	ldr	r1, [r3, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	0099      	lsls	r1, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005082:	3301      	adds	r3, #1
 8005084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	6809      	ldr	r1, [r1, #0]
 8005090:	4313      	orrs	r3, r2
 8005092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6911      	ldr	r1, [r2, #16]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68d2      	ldr	r2, [r2, #12]
 80050c6:	4311      	orrs	r1, r2
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	000186a0 	.word	0x000186a0
 8005128:	001e847f 	.word	0x001e847f
 800512c:	003d08ff 	.word	0x003d08ff
 8005130:	431bde83 	.word	0x431bde83
 8005134:	10624dd3 	.word	0x10624dd3

08005138 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	461a      	mov	r2, r3
 8005144:	460b      	mov	r3, r1
 8005146:	817b      	strh	r3, [r7, #10]
 8005148:	4613      	mov	r3, r2
 800514a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800514c:	f7fe fb84 	bl	8003858 <HAL_GetTick>
 8005150:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b20      	cmp	r3, #32
 800515c:	f040 80e0 	bne.w	8005320 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2319      	movs	r3, #25
 8005166:	2201      	movs	r2, #1
 8005168:	4970      	ldr	r1, [pc, #448]	; (800532c <HAL_I2C_Master_Transmit+0x1f4>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fc72 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
 8005178:	e0d3      	b.n	8005322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_I2C_Master_Transmit+0x50>
 8005184:	2302      	movs	r3, #2
 8005186:	e0cc      	b.n	8005322 <HAL_I2C_Master_Transmit+0x1ea>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b01      	cmp	r3, #1
 800519c:	d007      	beq.n	80051ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2221      	movs	r2, #33	; 0x21
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2210      	movs	r2, #16
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	893a      	ldrh	r2, [r7, #8]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a50      	ldr	r2, [pc, #320]	; (8005330 <HAL_I2C_Master_Transmit+0x1f8>)
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051f0:	8979      	ldrh	r1, [r7, #10]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6a3a      	ldr	r2, [r7, #32]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fac2 	bl	8005780 <I2C_MasterRequestWrite>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e08d      	b.n	8005322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800521c:	e066      	b.n	80052ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	6a39      	ldr	r1, [r7, #32]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fcec 	bl	8005c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00d      	beq.n	800524a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2b04      	cmp	r3, #4
 8005234:	d107      	bne.n	8005246 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06b      	b.n	8005322 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b04      	cmp	r3, #4
 8005286:	d11b      	bne.n	80052c0 <HAL_I2C_Master_Transmit+0x188>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528c:	2b00      	cmp	r3, #0
 800528e:	d017      	beq.n	80052c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	781a      	ldrb	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	6a39      	ldr	r1, [r7, #32]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 fcdc 	bl	8005c82 <I2C_WaitOnBTFFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00d      	beq.n	80052ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d107      	bne.n	80052e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e01a      	b.n	8005322 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d194      	bne.n	800521e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	e000      	b.n	8005322 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	00100002 	.word	0x00100002
 8005330:	ffff0000 	.word	0xffff0000

08005334 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08c      	sub	sp, #48	; 0x30
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4603      	mov	r3, r0
 8005344:	817b      	strh	r3, [r7, #10]
 8005346:	460b      	mov	r3, r1
 8005348:	813b      	strh	r3, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800534e:	f7fe fa83 	bl	8003858 <HAL_GetTick>
 8005352:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b20      	cmp	r3, #32
 800535e:	f040 8208 	bne.w	8005772 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	2319      	movs	r3, #25
 8005368:	2201      	movs	r2, #1
 800536a:	497b      	ldr	r1, [pc, #492]	; (8005558 <HAL_I2C_Mem_Read+0x224>)
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fb71 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
 800537a:	e1fb      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_I2C_Mem_Read+0x56>
 8005386:	2302      	movs	r3, #2
 8005388:	e1f4      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d007      	beq.n	80053b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2222      	movs	r2, #34	; 0x22
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2240      	movs	r2, #64	; 0x40
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a5b      	ldr	r2, [pc, #364]	; (800555c <HAL_I2C_Mem_Read+0x228>)
 80053f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053f2:	88f8      	ldrh	r0, [r7, #6]
 80053f4:	893a      	ldrh	r2, [r7, #8]
 80053f6:	8979      	ldrh	r1, [r7, #10]
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	4603      	mov	r3, r0
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fa3e 	bl	8005884 <I2C_RequestMemoryRead>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e1b0      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005416:	2b00      	cmp	r3, #0
 8005418:	d113      	bne.n	8005442 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541a:	2300      	movs	r3, #0
 800541c:	623b      	str	r3, [r7, #32]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e184      	b.n	800574c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005446:	2b01      	cmp	r3, #1
 8005448:	d11b      	bne.n	8005482 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e164      	b.n	800574c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	2b02      	cmp	r3, #2
 8005488:	d11b      	bne.n	80054c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	e144      	b.n	800574c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80054d8:	e138      	b.n	800574c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	2b03      	cmp	r3, #3
 80054e0:	f200 80f1 	bhi.w	80056c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d123      	bne.n	8005534 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fc07 	bl	8005d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e139      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005532:	e10b      	b.n	800574c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	2b02      	cmp	r3, #2
 800553a:	d14e      	bne.n	80055da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	2200      	movs	r2, #0
 8005544:	4906      	ldr	r1, [pc, #24]	; (8005560 <HAL_I2C_Mem_Read+0x22c>)
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fa84 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d008      	beq.n	8005564 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e10e      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
 8005556:	bf00      	nop
 8005558:	00100002 	.word	0x00100002
 800555c:	ffff0000 	.word	0xffff0000
 8005560:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055d8:	e0b8      	b.n	800574c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2200      	movs	r2, #0
 80055e2:	4966      	ldr	r1, [pc, #408]	; (800577c <HAL_I2C_Mem_Read+0x448>)
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fa35 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0bf      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	2200      	movs	r2, #0
 800563e:	494f      	ldr	r1, [pc, #316]	; (800577c <HAL_I2C_Mem_Read+0x448>)
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fa07 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e091      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056c4:	e042      	b.n	800574c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fb1a 	bl	8005d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e04c      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b04      	cmp	r3, #4
 8005718:	d118      	bne.n	800574c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005750:	2b00      	cmp	r3, #0
 8005752:	f47f aec2 	bne.w	80054da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e000      	b.n	8005774 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
  }
}
 8005774:	4618      	mov	r0, r3
 8005776:	3728      	adds	r7, #40	; 0x28
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	00010004 	.word	0x00010004

08005780 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	460b      	mov	r3, r1
 800578e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d006      	beq.n	80057aa <I2C_MasterRequestWrite+0x2a>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d003      	beq.n	80057aa <I2C_MasterRequestWrite+0x2a>
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057a8:	d108      	bne.n	80057bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e00b      	b.n	80057d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	2b12      	cmp	r3, #18
 80057c2:	d107      	bne.n	80057d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f937 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fa:	d103      	bne.n	8005804 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e035      	b.n	8005874 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005810:	d108      	bne.n	8005824 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005812:	897b      	ldrh	r3, [r7, #10]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005820:	611a      	str	r2, [r3, #16]
 8005822:	e01b      	b.n	800585c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005824:	897b      	ldrh	r3, [r7, #10]
 8005826:	11db      	asrs	r3, r3, #7
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0306 	and.w	r3, r3, #6
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f063 030f 	orn	r3, r3, #15
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	490e      	ldr	r1, [pc, #56]	; (800587c <I2C_MasterRequestWrite+0xfc>)
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f95d 	bl	8005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e010      	b.n	8005874 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005852:	897b      	ldrh	r3, [r7, #10]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4907      	ldr	r1, [pc, #28]	; (8005880 <I2C_MasterRequestWrite+0x100>)
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f94d 	bl	8005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	00010008 	.word	0x00010008
 8005880:	00010002 	.word	0x00010002

08005884 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	4608      	mov	r0, r1
 800588e:	4611      	mov	r1, r2
 8005890:	461a      	mov	r2, r3
 8005892:	4603      	mov	r3, r0
 8005894:	817b      	strh	r3, [r7, #10]
 8005896:	460b      	mov	r3, r1
 8005898:	813b      	strh	r3, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f8c2 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00d      	beq.n	80058f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e4:	d103      	bne.n	80058ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e0aa      	b.n	8005a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058f2:	897b      	ldrh	r3, [r7, #10]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	6a3a      	ldr	r2, [r7, #32]
 8005906:	4952      	ldr	r1, [pc, #328]	; (8005a50 <I2C_RequestMemoryRead+0x1cc>)
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f8fa 	bl	8005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e097      	b.n	8005a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005930:	6a39      	ldr	r1, [r7, #32]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f964 	bl	8005c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b04      	cmp	r3, #4
 8005944:	d107      	bne.n	8005956 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e076      	b.n	8005a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d105      	bne.n	800596c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005960:	893b      	ldrh	r3, [r7, #8]
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	611a      	str	r2, [r3, #16]
 800596a:	e021      	b.n	80059b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800596c:	893b      	ldrh	r3, [r7, #8]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b29b      	uxth	r3, r3
 8005972:	b2da      	uxtb	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597c:	6a39      	ldr	r1, [r7, #32]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f93e 	bl	8005c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00d      	beq.n	80059a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	2b04      	cmp	r3, #4
 8005990:	d107      	bne.n	80059a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e050      	b.n	8005a48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059a6:	893b      	ldrh	r3, [r7, #8]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	6a39      	ldr	r1, [r7, #32]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f923 	bl	8005c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00d      	beq.n	80059dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d107      	bne.n	80059d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e035      	b.n	8005a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f82b 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00d      	beq.n	8005a20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a12:	d103      	bne.n	8005a1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e013      	b.n	8005a48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a20:	897b      	ldrh	r3, [r7, #10]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	4906      	ldr	r1, [pc, #24]	; (8005a50 <I2C_RequestMemoryRead+0x1cc>)
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f863 	bl	8005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	00010002 	.word	0x00010002

08005a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a64:	e025      	b.n	8005ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d021      	beq.n	8005ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6e:	f7fd fef3 	bl	8003858 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d116      	bne.n	8005ab2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f043 0220 	orr.w	r2, r3, #32
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e023      	b.n	8005afa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	0c1b      	lsrs	r3, r3, #16
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d10d      	bne.n	8005ad8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	43da      	mvns	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	e00c      	b.n	8005af2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d0b6      	beq.n	8005a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b10:	e051      	b.n	8005bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b20:	d123      	bne.n	8005b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f043 0204 	orr.w	r2, r3, #4
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e046      	b.n	8005bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d021      	beq.n	8005bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b72:	f7fd fe71 	bl	8003858 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d302      	bcc.n	8005b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d116      	bne.n	8005bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f043 0220 	orr.w	r2, r3, #32
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e020      	b.n	8005bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d10c      	bne.n	8005bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	43da      	mvns	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bf14      	ite	ne
 8005bd2:	2301      	movne	r3, #1
 8005bd4:	2300      	moveq	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	e00b      	b.n	8005bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	43da      	mvns	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4013      	ands	r3, r2
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bf14      	ite	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	2300      	moveq	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d18d      	bne.n	8005b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c0c:	e02d      	b.n	8005c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f8ce 	bl	8005db0 <I2C_IsAcknowledgeFailed>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e02d      	b.n	8005c7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d021      	beq.n	8005c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c26:	f7fd fe17 	bl	8003858 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d116      	bne.n	8005c6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f043 0220 	orr.w	r2, r3, #32
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e007      	b.n	8005c7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b80      	cmp	r3, #128	; 0x80
 8005c76:	d1ca      	bne.n	8005c0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c8e:	e02d      	b.n	8005cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f88d 	bl	8005db0 <I2C_IsAcknowledgeFailed>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e02d      	b.n	8005cfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d021      	beq.n	8005cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca8:	f7fd fdd6 	bl	8003858 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d116      	bne.n	8005cec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e007      	b.n	8005cfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d1ca      	bne.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d10:	e042      	b.n	8005d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d119      	bne.n	8005d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0210 	mvn.w	r2, #16
 8005d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e029      	b.n	8005da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d54:	f7fd fd80 	bl	8003858 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d302      	bcc.n	8005d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d116      	bne.n	8005d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f043 0220 	orr.w	r2, r3, #32
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e007      	b.n	8005da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d1b5      	bne.n	8005d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc6:	d11b      	bne.n	8005e00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	f043 0204 	orr.w	r2, r3, #4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e10:	b08f      	sub	sp, #60	; 0x3c
 8005e12:	af0a      	add	r7, sp, #40	; 0x28
 8005e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e116      	b.n	800604e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f011 f8fc 	bl	8017038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2203      	movs	r2, #3
 8005e44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f006 f981 	bl	800c166 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	687e      	ldr	r6, [r7, #4]
 8005e6c:	466d      	mov	r5, sp
 8005e6e:	f106 0410 	add.w	r4, r6, #16
 8005e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e82:	1d33      	adds	r3, r6, #4
 8005e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e86:	6838      	ldr	r0, [r7, #0]
 8005e88:	f006 f858 	bl	800bf3c <USB_CoreInit>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e0d7      	b.n	800604e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f006 f96f 	bl	800c188 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]
 8005eae:	e04a      	b.n	8005f46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005eb0:	7bfa      	ldrb	r2, [r7, #15]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	333d      	adds	r3, #61	; 0x3d
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ec4:	7bfa      	ldrb	r2, [r7, #15]
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	333c      	adds	r3, #60	; 0x3c
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ed8:	7bfa      	ldrb	r2, [r7, #15]
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	b298      	uxth	r0, r3
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	3344      	adds	r3, #68	; 0x44
 8005eec:	4602      	mov	r2, r0
 8005eee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ef0:	7bfa      	ldrb	r2, [r7, #15]
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	3340      	adds	r3, #64	; 0x40
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f04:	7bfa      	ldrb	r2, [r7, #15]
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	3348      	adds	r3, #72	; 0x48
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f18:	7bfa      	ldrb	r2, [r7, #15]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	334c      	adds	r3, #76	; 0x4c
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f2c:	7bfa      	ldrb	r2, [r7, #15]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	3354      	adds	r3, #84	; 0x54
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	3301      	adds	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d3af      	bcc.n	8005eb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e044      	b.n	8005fe0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f56:	7bfa      	ldrb	r2, [r7, #15]
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f6c:	7bfa      	ldrb	r2, [r7, #15]
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005f7e:	7bfa      	ldrb	r2, [r7, #15]
 8005f80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f82:	7bfa      	ldrb	r2, [r7, #15]
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f98:	7bfa      	ldrb	r2, [r7, #15]
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fae:	7bfa      	ldrb	r2, [r7, #15]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fc4:	7bfa      	ldrb	r2, [r7, #15]
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	7bfa      	ldrb	r2, [r7, #15]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d3b5      	bcc.n	8005f56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	687e      	ldr	r6, [r7, #4]
 8005ff2:	466d      	mov	r5, sp
 8005ff4:	f106 0410 	add.w	r4, r6, #16
 8005ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006000:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006004:	e885 0003 	stmia.w	r5, {r0, r1}
 8006008:	1d33      	adds	r3, r6, #4
 800600a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800600c:	6838      	ldr	r0, [r7, #0]
 800600e:	f006 f907 	bl	800c220 <USB_DevInit>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e014      	b.n	800604e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	2b01      	cmp	r3, #1
 800603a:	d102      	bne.n	8006042 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 f9b9 	bl	80073b4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f007 fa49 	bl	800d4de <USB_DevDisconnect>

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006056 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_PCD_Start+0x1c>
 800606e:	2302      	movs	r3, #2
 8006070:	e020      	b.n	80060b4 <HAL_PCD_Start+0x5e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	2b01      	cmp	r3, #1
 8006080:	d109      	bne.n	8006096 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006086:	2b01      	cmp	r3, #1
 8006088:	d005      	beq.n	8006096 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f006 f852 	bl	800c144 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f007 f9f9 	bl	800d49c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060bc:	b590      	push	{r4, r7, lr}
 80060be:	b08d      	sub	sp, #52	; 0x34
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f007 fab7 	bl	800d646 <USB_GetMode>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 84b7 	bne.w	8006a4e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f007 fa1b 	bl	800d520 <USB_ReadInterrupts>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 84ad 	beq.w	8006a4c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f007 fa08 	bl	800d520 <USB_ReadInterrupts>
 8006110:	4603      	mov	r3, r0
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d107      	bne.n	800612a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f002 0202 	and.w	r2, r2, #2
 8006128:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f007 f9f6 	bl	800d520 <USB_ReadInterrupts>
 8006134:	4603      	mov	r3, r0
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	2b10      	cmp	r3, #16
 800613c:	d161      	bne.n	8006202 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0210 	bic.w	r2, r2, #16
 800614c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f003 020f 	and.w	r2, r3, #15
 800615a:	4613      	mov	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	3304      	adds	r3, #4
 800616c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	0c5b      	lsrs	r3, r3, #17
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	2b02      	cmp	r3, #2
 8006178:	d124      	bne.n	80061c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006180:	4013      	ands	r3, r2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d035      	beq.n	80061f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006194:	b29b      	uxth	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	6a38      	ldr	r0, [r7, #32]
 800619a:	f007 f82d 	bl	800d1f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061aa:	441a      	add	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	091b      	lsrs	r3, r3, #4
 80061b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061bc:	441a      	add	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	621a      	str	r2, [r3, #32]
 80061c2:	e016      	b.n	80061f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	0c5b      	lsrs	r3, r3, #17
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	2b06      	cmp	r3, #6
 80061ce:	d110      	bne.n	80061f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061d6:	2208      	movs	r2, #8
 80061d8:	4619      	mov	r1, r3
 80061da:	6a38      	ldr	r0, [r7, #32]
 80061dc:	f007 f80c 	bl	800d1f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	6a1a      	ldr	r2, [r3, #32]
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ec:	441a      	add	r2, r3
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	699a      	ldr	r2, [r3, #24]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0210 	orr.w	r2, r2, #16
 8006200:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f007 f98a 	bl	800d520 <USB_ReadInterrupts>
 800620c:	4603      	mov	r3, r0
 800620e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006212:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006216:	f040 80a7 	bne.w	8006368 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f007 f98f 	bl	800d546 <USB_ReadDevAllOutEpInterrupt>
 8006228:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800622a:	e099      	b.n	8006360 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 808e 	beq.w	8006354 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f007 f9b3 	bl	800d5ae <USB_ReadDevOutEPInterrupt>
 8006248:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006260:	461a      	mov	r2, r3
 8006262:	2301      	movs	r3, #1
 8006264:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 ff1d 	bl	80070a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00c      	beq.n	8006292 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	461a      	mov	r2, r3
 8006286:	2308      	movs	r3, #8
 8006288:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800628a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fff3 	bl	8007278 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	461a      	mov	r2, r3
 80062aa:	2310      	movs	r3, #16
 80062ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d030      	beq.n	800631a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	2b80      	cmp	r3, #128	; 0x80
 80062c2:	d109      	bne.n	80062d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80062d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062da:	4613      	mov	r3, r2
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	3304      	adds	r3, #4
 80062ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	78db      	ldrb	r3, [r3, #3]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d108      	bne.n	8006308 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2200      	movs	r2, #0
 80062fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f010 ffb4 	bl	8017270 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	2302      	movs	r3, #2
 8006318:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	461a      	mov	r2, r3
 8006332:	2320      	movs	r3, #32
 8006334:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	461a      	mov	r2, r3
 800634e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006352:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	3301      	adds	r3, #1
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	f47f af62 	bne.w	800622c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f007 f8d7 	bl	800d520 <USB_ReadInterrupts>
 8006372:	4603      	mov	r3, r0
 8006374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800637c:	f040 80db 	bne.w	8006536 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f007 f8f8 	bl	800d57a <USB_ReadDevAllInEpInterrupt>
 800638a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006390:	e0cd      	b.n	800652e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80c2 	beq.w	8006522 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	4611      	mov	r1, r2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f007 f91e 	bl	800d5ea <USB_ReadDevInEPInterrupt>
 80063ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d057      	beq.n	800646a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	2201      	movs	r2, #1
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	43db      	mvns	r3, r3
 80063d4:	69f9      	ldr	r1, [r7, #28]
 80063d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063da:	4013      	ands	r3, r2
 80063dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	461a      	mov	r2, r3
 80063ec:	2301      	movs	r3, #1
 80063ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d132      	bne.n	800645e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fc:	4613      	mov	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	334c      	adds	r3, #76	; 0x4c
 8006408:	6819      	ldr	r1, [r3, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640e:	4613      	mov	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4403      	add	r3, r0
 8006418:	3348      	adds	r3, #72	; 0x48
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4419      	add	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	4613      	mov	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4403      	add	r3, r0
 800642c:	334c      	adds	r3, #76	; 0x4c
 800642e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d113      	bne.n	800645e <HAL_PCD_IRQHandler+0x3a2>
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	4613      	mov	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	3354      	adds	r3, #84	; 0x54
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006456:	461a      	mov	r2, r3
 8006458:	2101      	movs	r1, #1
 800645a:	f007 f925 	bl	800d6a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	b2db      	uxtb	r3, r3
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f010 fe7e 	bl	8017166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f003 0308 	and.w	r3, r3, #8
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	461a      	mov	r2, r3
 8006482:	2308      	movs	r3, #8
 8006484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	461a      	mov	r2, r3
 800649e:	2310      	movs	r3, #16
 80064a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d008      	beq.n	80064be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b8:	461a      	mov	r2, r3
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d023      	beq.n	8006510 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80064c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064ca:	6a38      	ldr	r0, [r7, #32]
 80064cc:	f006 f806 	bl	800c4dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	4613      	mov	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	3338      	adds	r3, #56	; 0x38
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	78db      	ldrb	r3, [r3, #3]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d108      	bne.n	80064fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f010 fecb 	bl	8017294 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650a:	461a      	mov	r2, r3
 800650c:	2302      	movs	r3, #2
 800650e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800651a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fd35 	bl	8006f8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	3301      	adds	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	f47f af2e 	bne.w	8006392 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f006 fff0 	bl	800d520 <USB_ReadInterrupts>
 8006540:	4603      	mov	r3, r0
 8006542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800654a:	d122      	bne.n	8006592 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006566:	2b01      	cmp	r3, #1
 8006568:	d108      	bne.n	800657c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006572:	2100      	movs	r1, #0
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f011 f865 	bl	8017644 <HAL_PCDEx_LPM_Callback>
 800657a:	e002      	b.n	8006582 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f010 fe69 	bl	8017254 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695a      	ldr	r2, [r3, #20]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f006 ffc2 	bl	800d520 <USB_ReadInterrupts>
 800659c:	4603      	mov	r3, r0
 800659e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a6:	d112      	bne.n	80065ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d102      	bne.n	80065be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f010 fe25 	bl	8017208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065cc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f006 ffa4 	bl	800d520 <USB_ReadInterrupts>
 80065d8:	4603      	mov	r3, r0
 80065da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e2:	d121      	bne.n	8006628 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80065f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d111      	bne.n	8006622 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	089b      	lsrs	r3, r3, #2
 800660e:	f003 020f 	and.w	r2, r3, #15
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006618:	2101      	movs	r1, #1
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f011 f812 	bl	8017644 <HAL_PCDEx_LPM_Callback>
 8006620:	e002      	b.n	8006628 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f010 fdf0 	bl	8017208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f006 ff77 	bl	800d520 <USB_ReadInterrupts>
 8006632:	4603      	mov	r3, r0
 8006634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663c:	f040 80b7 	bne.w	80067ae <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2110      	movs	r1, #16
 800665a:	4618      	mov	r0, r3
 800665c:	f005 ff3e 	bl	800c4dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006660:	2300      	movs	r3, #0
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006664:	e046      	b.n	80066f4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	461a      	mov	r2, r3
 8006674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006678:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006698:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	461a      	mov	r2, r3
 80066a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	3301      	adds	r3, #1
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d3b3      	bcc.n	8006666 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006710:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	2b00      	cmp	r3, #0
 8006718:	d016      	beq.n	8006748 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672a:	f043 030b 	orr.w	r3, r3, #11
 800672e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006740:	f043 030b 	orr.w	r3, r3, #11
 8006744:	6453      	str	r3, [r2, #68]	; 0x44
 8006746:	e015      	b.n	8006774 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800675a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800675e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800676e:	f043 030b 	orr.w	r3, r3, #11
 8006772:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006782:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006786:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006798:	461a      	mov	r2, r3
 800679a:	f006 ff85 	bl	800d6a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f006 feb4 	bl	800d520 <USB_ReadInterrupts>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c2:	d124      	bne.n	800680e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f006 ff4a 	bl	800d662 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f005 feff 	bl	800c5d6 <USB_GetDevSpeed>
 80067d8:	4603      	mov	r3, r0
 80067da:	461a      	mov	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681c      	ldr	r4, [r3, #0]
 80067e4:	f000 fef0 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 80067e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	4620      	mov	r0, r4
 80067f4:	f005 fc04 	bl	800c000 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f010 fcdc 	bl	80171b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695a      	ldr	r2, [r3, #20]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800680c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f006 fe84 	bl	800d520 <USB_ReadInterrupts>
 8006818:	4603      	mov	r3, r0
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b08      	cmp	r3, #8
 8006820:	d10a      	bne.n	8006838 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f010 fcb9 	bl	801719a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695a      	ldr	r2, [r3, #20]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f002 0208 	and.w	r2, r2, #8
 8006836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f006 fe6f 	bl	800d520 <USB_ReadInterrupts>
 8006842:	4603      	mov	r3, r0
 8006844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006848:	2b80      	cmp	r3, #128	; 0x80
 800684a:	d122      	bne.n	8006892 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006858:	2301      	movs	r3, #1
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
 800685c:	e014      	b.n	8006888 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d105      	bne.n	8006882 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	b2db      	uxtb	r3, r3
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fb27 	bl	8006ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	3301      	adds	r3, #1
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688e:	429a      	cmp	r2, r3
 8006890:	d3e5      	bcc.n	800685e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f006 fe42 	bl	800d520 <USB_ReadInterrupts>
 800689c:	4603      	mov	r3, r0
 800689e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068a6:	d13b      	bne.n	8006920 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068a8:	2301      	movs	r3, #1
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	e02b      	b.n	8006906 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	4613      	mov	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	3340      	adds	r3, #64	; 0x40
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d115      	bne.n	8006900 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80068d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da12      	bge.n	8006900 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068de:	4613      	mov	r3, r2
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	333f      	adds	r3, #63	; 0x3f
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fae8 	bl	8006ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	3301      	adds	r3, #1
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	429a      	cmp	r2, r3
 800690e:	d3ce      	bcc.n	80068ae <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800691e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f006 fdfb 	bl	800d520 <USB_ReadInterrupts>
 800692a:	4603      	mov	r3, r0
 800692c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006934:	d155      	bne.n	80069e2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006936:	2301      	movs	r3, #1
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
 800693a:	e045      	b.n	80069c8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006950:	4613      	mov	r3, r2
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d12e      	bne.n	80069c2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006964:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006966:	2b00      	cmp	r3, #0
 8006968:	da2b      	bge.n	80069c2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006976:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800697a:	429a      	cmp	r2, r3
 800697c:	d121      	bne.n	80069c2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006990:	2201      	movs	r2, #1
 8006992:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069be:	6053      	str	r3, [r2, #4]
            break;
 80069c0:	e007      	b.n	80069d2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	3301      	adds	r3, #1
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d3b4      	bcc.n	800693c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80069e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f006 fd9a 	bl	800d520 <USB_ReadInterrupts>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f6:	d10a      	bne.n	8006a0e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f010 fc5d 	bl	80172b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	695a      	ldr	r2, [r3, #20]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f006 fd84 	bl	800d520 <USB_ReadInterrupts>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d115      	bne.n	8006a4e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f010 fc4d 	bl	80172d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6859      	ldr	r1, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
 8006a4a:	e000      	b.n	8006a4e <HAL_PCD_IRQHandler+0x992>
      return;
 8006a4c:	bf00      	nop
    }
  }
}
 8006a4e:	3734      	adds	r7, #52	; 0x34
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd90      	pop	{r4, r7, pc}

08006a54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <HAL_PCD_SetAddress+0x1a>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e013      	b.n	8006a96 <HAL_PCD_SetAddress+0x42>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	78fa      	ldrb	r2, [r7, #3]
 8006a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f006 fce2 	bl	800d450 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4603      	mov	r3, r0
 8006aae:	70fb      	strb	r3, [r7, #3]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	803b      	strh	r3, [r7, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	da0f      	bge.n	8006ae4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	f003 020f 	and.w	r2, r3, #15
 8006aca:	4613      	mov	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	3338      	adds	r3, #56	; 0x38
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3304      	adds	r3, #4
 8006ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	705a      	strb	r2, [r3, #1]
 8006ae2:	e00f      	b.n	8006b04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	f003 020f 	and.w	r2, r3, #15
 8006aea:	4613      	mov	r3, r2
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	3304      	adds	r3, #4
 8006afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006b10:	883a      	ldrh	r2, [r7, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	78ba      	ldrb	r2, [r7, #2]
 8006b1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b2e:	78bb      	ldrb	r3, [r7, #2]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d102      	bne.n	8006b3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_PCD_EP_Open+0xaa>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e00e      	b.n	8006b66 <HAL_PCD_EP_Open+0xc8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68f9      	ldr	r1, [r7, #12]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f005 fd62 	bl	800c620 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006b64:	7afb      	ldrb	r3, [r7, #11]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da0f      	bge.n	8006ba2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	f003 020f 	and.w	r2, r3, #15
 8006b88:	4613      	mov	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	3338      	adds	r3, #56	; 0x38
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	4413      	add	r3, r2
 8006b96:	3304      	adds	r3, #4
 8006b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	705a      	strb	r2, [r3, #1]
 8006ba0:	e00f      	b.n	8006bc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	f003 020f 	and.w	r2, r3, #15
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3304      	adds	r3, #4
 8006bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_PCD_EP_Close+0x6e>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e00e      	b.n	8006bfa <HAL_PCD_EP_Close+0x8c>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68f9      	ldr	r1, [r7, #12]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f005 fda0 	bl	800c730 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c12:	7afb      	ldrb	r3, [r7, #11]
 8006c14:	f003 020f 	and.w	r2, r3, #15
 8006c18:	4613      	mov	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	3304      	adds	r3, #4
 8006c2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2200      	movs	r2, #0
 8006c42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d102      	bne.n	8006c5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	6979      	ldr	r1, [r7, #20]
 8006c76:	f006 f87f 	bl	800cd78 <USB_EP0StartXfer>
 8006c7a:	e008      	b.n	8006c8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	6979      	ldr	r1, [r7, #20]
 8006c8a:	f005 fe2d 	bl	800c8e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	f003 020f 	and.w	r2, r3, #15
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006cba:	681b      	ldr	r3, [r3, #0]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	f003 020f 	and.w	r2, r3, #15
 8006cde:	4613      	mov	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	3338      	adds	r3, #56	; 0x38
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4413      	add	r3, r2
 8006cec:	3304      	adds	r3, #4
 8006cee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2201      	movs	r2, #1
 8006d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d102      	bne.n	8006d22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	6979      	ldr	r1, [r7, #20]
 8006d3a:	f006 f81d 	bl	800cd78 <USB_EP0StartXfer>
 8006d3e:	e008      	b.n	8006d52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6979      	ldr	r1, [r7, #20]
 8006d4e:	f005 fdcb 	bl	800c8e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	f003 020f 	and.w	r2, r3, #15
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d901      	bls.n	8006d7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e050      	b.n	8006e1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	da0f      	bge.n	8006da2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d82:	78fb      	ldrb	r3, [r7, #3]
 8006d84:	f003 020f 	and.w	r2, r3, #15
 8006d88:	4613      	mov	r3, r2
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	3338      	adds	r3, #56	; 0x38
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	4413      	add	r3, r2
 8006d96:	3304      	adds	r3, #4
 8006d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	705a      	strb	r2, [r3, #1]
 8006da0:	e00d      	b.n	8006dbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	4613      	mov	r3, r2
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4413      	add	r3, r2
 8006db4:	3304      	adds	r3, #4
 8006db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_PCD_EP_SetStall+0x82>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e01e      	b.n	8006e1c <HAL_PCD_EP_SetStall+0xc0>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f006 fa5b 	bl	800d2a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	b2d9      	uxtb	r1, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f006 fc4b 	bl	800d6a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	f003 020f 	and.w	r2, r3, #15
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d901      	bls.n	8006e42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e042      	b.n	8006ec8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da0f      	bge.n	8006e6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	f003 020f 	and.w	r2, r3, #15
 8006e50:	4613      	mov	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	3338      	adds	r3, #56	; 0x38
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3304      	adds	r3, #4
 8006e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	705a      	strb	r2, [r3, #1]
 8006e68:	e00f      	b.n	8006e8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	f003 020f 	and.w	r2, r3, #15
 8006e70:	4613      	mov	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4413      	add	r3, r2
 8006e80:	3304      	adds	r3, #4
 8006e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d101      	bne.n	8006eaa <HAL_PCD_EP_ClrStall+0x86>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e00e      	b.n	8006ec8 <HAL_PCD_EP_ClrStall+0xa4>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68f9      	ldr	r1, [r7, #12]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f006 fa63 	bl	800d384 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	da0c      	bge.n	8006efe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	f003 020f 	and.w	r2, r3, #15
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	3338      	adds	r3, #56	; 0x38
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	3304      	adds	r3, #4
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e00c      	b.n	8006f18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	f003 020f 	and.w	r2, r3, #15
 8006f04:	4613      	mov	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	3304      	adds	r3, #4
 8006f16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68f9      	ldr	r1, [r7, #12]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f006 f882 	bl	800d028 <USB_EPStopXfer>
 8006f24:	4603      	mov	r3, r0
 8006f26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_PCD_EP_Flush+0x1a>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e01b      	b.n	8006f84 <HAL_PCD_EP_Flush+0x52>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8006f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	da09      	bge.n	8006f70 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f005 fab7 	bl	800c4dc <USB_FlushTxFifo>
 8006f6e:	e004      	b.n	8006f7a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f005 fae5 	bl	800c544 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	; 0x28
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	3338      	adds	r3, #56	; 0x38
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4413      	add	r3, r2
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1a      	ldr	r2, [r3, #32]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d901      	bls.n	8006fc4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e06c      	b.n	800709e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d902      	bls.n	8006fe0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	3303      	adds	r3, #3
 8006fe4:	089b      	lsrs	r3, r3, #2
 8006fe6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fe8:	e02b      	b.n	8007042 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d902      	bls.n	8007006 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	3303      	adds	r3, #3
 800700a:	089b      	lsrs	r3, r3, #2
 800700c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6919      	ldr	r1, [r3, #16]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800701e:	b2db      	uxtb	r3, r3
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	4603      	mov	r3, r0
 8007024:	6978      	ldr	r0, [r7, #20]
 8007026:	f006 f8a9 	bl	800d17c <USB_WritePacket>

    ep->xfer_buff  += len;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	441a      	add	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	429a      	cmp	r2, r3
 8007056:	d809      	bhi.n	800706c <PCD_WriteEmptyTxFifo+0xe0>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1a      	ldr	r2, [r3, #32]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007060:	429a      	cmp	r2, r3
 8007062:	d203      	bcs.n	800706c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1be      	bne.n	8006fea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	429a      	cmp	r2, r3
 8007076:	d811      	bhi.n	800709c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	2201      	movs	r2, #1
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	43db      	mvns	r3, r3
 8007092:	6939      	ldr	r1, [r7, #16]
 8007094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007098:	4013      	ands	r3, r2
 800709a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	333c      	adds	r3, #60	; 0x3c
 80070c0:	3304      	adds	r3, #4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d17b      	bne.n	80071d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d015      	beq.n	8007114 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4a61      	ldr	r2, [pc, #388]	; (8007270 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	f240 80b9 	bls.w	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80b3 	beq.w	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	461a      	mov	r2, r3
 800710c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007110:	6093      	str	r3, [r2, #8]
 8007112:	e0a7      	b.n	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712a:	461a      	mov	r2, r3
 800712c:	2320      	movs	r3, #32
 800712e:	6093      	str	r3, [r2, #8]
 8007130:	e098      	b.n	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	f040 8093 	bne.w	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4a4b      	ldr	r2, [pc, #300]	; (8007270 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d90f      	bls.n	8007166 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	461a      	mov	r2, r3
 800715e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007162:	6093      	str	r3, [r2, #8]
 8007164:	e07e      	b.n	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	3304      	adds	r3, #4
 800717a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	0159      	lsls	r1, r3, #5
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	440b      	add	r3, r1
 8007188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d114      	bne.n	80071c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d109      	bne.n	80071ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071b0:	461a      	mov	r2, r3
 80071b2:	2101      	movs	r1, #1
 80071b4:	f006 fa78 	bl	800d6a8 <USB_EP0_OutStart>
 80071b8:	e006      	b.n	80071c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	691a      	ldr	r2, [r3, #16]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	441a      	add	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f00f ffae 	bl	8017130 <HAL_PCD_DataOutStageCallback>
 80071d4:	e046      	b.n	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	4a26      	ldr	r2, [pc, #152]	; (8007274 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d124      	bne.n	8007228 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f4:	461a      	mov	r2, r3
 80071f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fa:	6093      	str	r3, [r2, #8]
 80071fc:	e032      	b.n	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007214:	461a      	mov	r2, r3
 8007216:	2320      	movs	r3, #32
 8007218:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f00f ff85 	bl	8017130 <HAL_PCD_DataOutStageCallback>
 8007226:	e01d      	b.n	8007264 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d114      	bne.n	8007258 <PCD_EP_OutXfrComplete_int+0x1b0>
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	4613      	mov	r3, r2
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d108      	bne.n	8007258 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007250:	461a      	mov	r2, r3
 8007252:	2100      	movs	r1, #0
 8007254:	f006 fa28 	bl	800d6a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f00f ff66 	bl	8017130 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3720      	adds	r7, #32
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	4f54300a 	.word	0x4f54300a
 8007274:	4f54310a 	.word	0x4f54310a

08007278 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	333c      	adds	r3, #60	; 0x3c
 8007290:	3304      	adds	r3, #4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a15      	ldr	r2, [pc, #84]	; (8007300 <PCD_EP_OutSetupPacket_int+0x88>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d90e      	bls.n	80072cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d009      	beq.n	80072cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	461a      	mov	r2, r3
 80072c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f00f ff1d 	bl	801710c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a0a      	ldr	r2, [pc, #40]	; (8007300 <PCD_EP_OutSetupPacket_int+0x88>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d90c      	bls.n	80072f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d108      	bne.n	80072f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072ec:	461a      	mov	r2, r3
 80072ee:	2101      	movs	r1, #1
 80072f0:	f006 f9da 	bl	800d6a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	4f54300a 	.word	0x4f54300a

08007304 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
 8007310:	4613      	mov	r3, r2
 8007312:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007322:	883b      	ldrh	r3, [r7, #0]
 8007324:	0419      	lsls	r1, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	430a      	orrs	r2, r1
 800732e:	629a      	str	r2, [r3, #40]	; 0x28
 8007330:	e028      	b.n	8007384 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4413      	add	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
 8007344:	e00d      	b.n	8007362 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	3340      	adds	r3, #64	; 0x40
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	0c1b      	lsrs	r3, r3, #16
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4413      	add	r3, r2
 800735a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	3301      	adds	r3, #1
 8007360:	73fb      	strb	r3, [r7, #15]
 8007362:	7bfa      	ldrb	r2, [r7, #15]
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	3b01      	subs	r3, #1
 8007368:	429a      	cmp	r2, r3
 800736a:	d3ec      	bcc.n	8007346 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800736c:	883b      	ldrh	r3, [r7, #0]
 800736e:	0418      	lsls	r0, r3, #16
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	3b01      	subs	r3, #1
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	4302      	orrs	r2, r0
 800737c:	3340      	adds	r3, #64	; 0x40
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	460b      	mov	r3, r1
 800739c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	887a      	ldrh	r2, [r7, #2]
 80073a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e6:	f043 0303 	orr.w	r3, r3, #3
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e0cc      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007410:	4b68      	ldr	r3, [pc, #416]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d90c      	bls.n	8007438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800741e:	4b65      	ldr	r3, [pc, #404]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007426:	4b63      	ldr	r3, [pc, #396]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d001      	beq.n	8007438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0b8      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d020      	beq.n	8007486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007450:	4b59      	ldr	r3, [pc, #356]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800745a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007468:	4b53      	ldr	r3, [pc, #332]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4a52      	ldr	r2, [pc, #328]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800746e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007474:	4b50      	ldr	r3, [pc, #320]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	494d      	ldr	r1, [pc, #308]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	4313      	orrs	r3, r2
 8007484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d044      	beq.n	800751c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d107      	bne.n	80074aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800749a:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d119      	bne.n	80074da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e07f      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d003      	beq.n	80074ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d107      	bne.n	80074ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ba:	4b3f      	ldr	r3, [pc, #252]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e06f      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ca:	4b3b      	ldr	r3, [pc, #236]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e067      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074da:	4b37      	ldr	r3, [pc, #220]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f023 0203 	bic.w	r2, r3, #3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4934      	ldr	r1, [pc, #208]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074ec:	f7fc f9b4 	bl	8003858 <HAL_GetTick>
 80074f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074f2:	e00a      	b.n	800750a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074f4:	f7fc f9b0 	bl	8003858 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007502:	4293      	cmp	r3, r2
 8007504:	d901      	bls.n	800750a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e04f      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800750a:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 020c 	and.w	r2, r3, #12
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	429a      	cmp	r2, r3
 800751a:	d1eb      	bne.n	80074f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800751c:	4b25      	ldr	r3, [pc, #148]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d20c      	bcs.n	8007544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800752a:	4b22      	ldr	r3, [pc, #136]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007532:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d001      	beq.n	8007544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e032      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007550:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4916      	ldr	r1, [pc, #88]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	490e      	ldr	r1, [pc, #56]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	4313      	orrs	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007582:	f000 fbb1 	bl	8007ce8 <HAL_RCC_GetSysClockFreq>
 8007586:	4602      	mov	r2, r0
 8007588:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	490a      	ldr	r1, [pc, #40]	; (80075bc <HAL_RCC_ClockConfig+0x1c0>)
 8007594:	5ccb      	ldrb	r3, [r1, r3]
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 800759c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fb fa2c 	bl	8002a00 <HAL_InitTick>

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40023c00 	.word	0x40023c00
 80075b8:	40023800 	.word	0x40023800
 80075bc:	0801a9a4 	.word	0x0801a9a4
 80075c0:	20000014 	.word	0x20000014
 80075c4:	20000018 	.word	0x20000018

080075c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075cc:	4b03      	ldr	r3, [pc, #12]	; (80075dc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ce:	681b      	ldr	r3, [r3, #0]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20000014 	.word	0x20000014

080075e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075e4:	f7ff fff0 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 80075e8:	4602      	mov	r2, r0
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	0a9b      	lsrs	r3, r3, #10
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	4903      	ldr	r1, [pc, #12]	; (8007604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075f6:	5ccb      	ldrb	r3, [r1, r3]
 80075f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40023800 	.word	0x40023800
 8007604:	0801a9b4 	.word	0x0801a9b4

08007608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800760c:	f7ff ffdc 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 8007610:	4602      	mov	r2, r0
 8007612:	4b05      	ldr	r3, [pc, #20]	; (8007628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	0b5b      	lsrs	r3, r3, #13
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	4903      	ldr	r1, [pc, #12]	; (800762c <HAL_RCC_GetPCLK2Freq+0x24>)
 800761e:	5ccb      	ldrb	r3, [r1, r3]
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007624:	4618      	mov	r0, r3
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40023800 	.word	0x40023800
 800762c:	0801a9b4 	.word	0x0801a9b4

08007630 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	220f      	movs	r2, #15
 800763e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <HAL_RCC_GetClockConfig+0x5c>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f003 0203 	and.w	r2, r3, #3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <HAL_RCC_GetClockConfig+0x5c>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <HAL_RCC_GetClockConfig+0x5c>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <HAL_RCC_GetClockConfig+0x5c>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	08db      	lsrs	r3, r3, #3
 800766a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007672:	4b07      	ldr	r3, [pc, #28]	; (8007690 <HAL_RCC_GetClockConfig+0x60>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 020f 	and.w	r2, r3, #15
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	601a      	str	r2, [r3, #0]
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	40023800 	.word	0x40023800
 8007690:	40023c00 	.word	0x40023c00

08007694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	; 0x30
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d010      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80076cc:	4b6f      	ldr	r3, [pc, #444]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	496c      	ldr	r1, [pc, #432]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80076ea:	2301      	movs	r3, #1
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d010      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80076fa:	4b64      	ldr	r3, [pc, #400]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007700:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007708:	4960      	ldr	r1, [pc, #384]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800770a:	4313      	orrs	r3, r2
 800770c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007718:	2301      	movs	r3, #1
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d017      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007728:	4b58      	ldr	r3, [pc, #352]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800772a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800772e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	4955      	ldr	r1, [pc, #340]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007738:	4313      	orrs	r3, r2
 800773a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007746:	d101      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007748:	2301      	movs	r3, #1
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007754:	2301      	movs	r3, #1
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d017      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007764:	4b49      	ldr	r3, [pc, #292]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800776a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007772:	4946      	ldr	r1, [pc, #280]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007774:	4313      	orrs	r3, r2
 8007776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007782:	d101      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007784:	2301      	movs	r3, #1
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007790:	2301      	movs	r3, #1
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 808a 	beq.w	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	4b39      	ldr	r3, [pc, #228]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	4a38      	ldr	r2, [pc, #224]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b0:	6413      	str	r3, [r2, #64]	; 0x40
 80077b2:	4b36      	ldr	r3, [pc, #216]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ba:	60bb      	str	r3, [r7, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077be:	4b34      	ldr	r3, [pc, #208]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a33      	ldr	r2, [pc, #204]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077ca:	f7fc f845 	bl	8003858 <HAL_GetTick>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077d0:	e008      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077d2:	f7fc f841 	bl	8003858 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e278      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077e4:	4b2a      	ldr	r3, [pc, #168]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077f0:	4b26      	ldr	r3, [pc, #152]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d02f      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007808:	6a3a      	ldr	r2, [r7, #32]
 800780a:	429a      	cmp	r2, r3
 800780c:	d028      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800780e:	4b1f      	ldr	r3, [pc, #124]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007816:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007818:	4b1e      	ldr	r3, [pc, #120]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800781a:	2201      	movs	r2, #1
 800781c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800781e:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800782a:	4b18      	ldr	r3, [pc, #96]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800782c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b01      	cmp	r3, #1
 8007834:	d114      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007836:	f7fc f80f 	bl	8003858 <HAL_GetTick>
 800783a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800783c:	e00a      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800783e:	f7fc f80b 	bl	8003858 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	f241 3288 	movw	r2, #5000	; 0x1388
 800784c:	4293      	cmp	r3, r2
 800784e:	d901      	bls.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e240      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007854:	4b0d      	ldr	r3, [pc, #52]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0ee      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786c:	d114      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800787e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007882:	4902      	ldr	r1, [pc, #8]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007884:	4313      	orrs	r3, r2
 8007886:	608b      	str	r3, [r1, #8]
 8007888:	e00c      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800788a:	bf00      	nop
 800788c:	40023800 	.word	0x40023800
 8007890:	40007000 	.word	0x40007000
 8007894:	42470e40 	.word	0x42470e40
 8007898:	4b4a      	ldr	r3, [pc, #296]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4a49      	ldr	r2, [pc, #292]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800789e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078a2:	6093      	str	r3, [r2, #8]
 80078a4:	4b47      	ldr	r3, [pc, #284]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078b0:	4944      	ldr	r1, [pc, #272]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80078c8:	4b3f      	ldr	r3, [pc, #252]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80078ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80078d8:	4b3a      	ldr	r3, [pc, #232]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e6:	4937      	ldr	r1, [pc, #220]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078fa:	4b32      	ldr	r3, [pc, #200]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007900:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007908:	492e      	ldr	r1, [pc, #184]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007918:	2b00      	cmp	r3, #0
 800791a:	d011      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800791c:	4b29      	ldr	r3, [pc, #164]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800791e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007922:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	4926      	ldr	r1, [pc, #152]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800793a:	d101      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800793c:	2301      	movs	r3, #1
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800794c:	4b1d      	ldr	r3, [pc, #116]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800794e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007952:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795a:	491a      	ldr	r1, [pc, #104]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800795c:	4313      	orrs	r3, r2
 800795e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800796a:	2b00      	cmp	r3, #0
 800796c:	d011      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800796e:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007974:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797c:	4911      	ldr	r1, [pc, #68]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800798c:	d101      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800798e:	2301      	movs	r3, #1
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	2b01      	cmp	r3, #1
 8007996:	d005      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079a0:	f040 80ff 	bne.w	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079a4:	4b09      	ldr	r3, [pc, #36]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079aa:	f7fb ff55 	bl	8003858 <HAL_GetTick>
 80079ae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079b0:	e00e      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079b2:	f7fb ff51 	bl	8003858 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d907      	bls.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e188      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80079c4:	40023800 	.word	0x40023800
 80079c8:	424711e0 	.word	0x424711e0
 80079cc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079d0:	4b7e      	ldr	r3, [pc, #504]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1ea      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d028      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d124      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a04:	4b71      	ldr	r3, [pc, #452]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a0a:	0c1b      	lsrs	r3, r3, #16
 8007a0c:	f003 0303 	and.w	r3, r3, #3
 8007a10:	3301      	adds	r3, #1
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007a16:	4b6d      	ldr	r3, [pc, #436]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a1c:	0e1b      	lsrs	r3, r3, #24
 8007a1e:	f003 030f 	and.w	r3, r3, #15
 8007a22:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	019b      	lsls	r3, r3, #6
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	3b01      	subs	r3, #1
 8007a36:	041b      	lsls	r3, r3, #16
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	061b      	lsls	r3, r3, #24
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	071b      	lsls	r3, r3, #28
 8007a46:	4961      	ldr	r1, [pc, #388]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a62:	d00a      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d035      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a78:	d130      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a7a:	4b54      	ldr	r3, [pc, #336]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	3301      	adds	r3, #1
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a8c:	4b4f      	ldr	r3, [pc, #316]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a92:	0f1b      	lsrs	r3, r3, #28
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	019b      	lsls	r3, r3, #6
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	085b      	lsrs	r3, r3, #1
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	061b      	lsls	r3, r3, #24
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	071b      	lsls	r3, r3, #28
 8007abc:	4943      	ldr	r1, [pc, #268]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ac4:	4b41      	ldr	r3, [pc, #260]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aca:	f023 021f 	bic.w	r2, r3, #31
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	493d      	ldr	r1, [pc, #244]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d029      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af0:	d124      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007af2:	4b36      	ldr	r3, [pc, #216]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af8:	0c1b      	lsrs	r3, r3, #16
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	3301      	adds	r3, #1
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b04:	4b31      	ldr	r3, [pc, #196]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b0a:	0f1b      	lsrs	r3, r3, #28
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	019b      	lsls	r3, r3, #6
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	3b01      	subs	r3, #1
 8007b26:	041b      	lsls	r3, r3, #16
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	061b      	lsls	r3, r3, #24
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	071b      	lsls	r3, r3, #28
 8007b34:	4925      	ldr	r1, [pc, #148]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d016      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	085b      	lsrs	r3, r3, #1
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	071b      	lsls	r3, r3, #28
 8007b6e:	4917      	ldr	r1, [pc, #92]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b76:	4b16      	ldr	r3, [pc, #88]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b7c:	f7fb fe6c 	bl	8003858 <HAL_GetTick>
 8007b80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b84:	f7fb fe68 	bl	8003858 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e09f      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0f0      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	f040 8095 	bne.w	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007baa:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bb0:	f7fb fe52 	bl	8003858 <HAL_GetTick>
 8007bb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bb6:	e00f      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007bb8:	f7fb fe4e 	bl	8003858 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d908      	bls.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e085      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007bca:	bf00      	nop
 8007bcc:	40023800 	.word	0x40023800
 8007bd0:	42470068 	.word	0x42470068
 8007bd4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bd8:	4b41      	ldr	r3, [pc, #260]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be4:	d0e8      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d009      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d02b      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d127      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007c0e:	4b34      	ldr	r3, [pc, #208]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	699a      	ldr	r2, [r3, #24]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	019b      	lsls	r3, r3, #6
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	3b01      	subs	r3, #1
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	061b      	lsls	r3, r3, #24
 8007c3c:	4928      	ldr	r1, [pc, #160]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c44:	4b26      	ldr	r3, [pc, #152]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	3b01      	subs	r3, #1
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	4922      	ldr	r1, [pc, #136]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01d      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c72:	d118      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c74:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7a:	0e1b      	lsrs	r3, r3, #24
 8007c7c:	f003 030f 	and.w	r3, r3, #15
 8007c80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	019b      	lsls	r3, r3, #6
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	3b01      	subs	r3, #1
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	061b      	lsls	r3, r3, #24
 8007c9e:	4910      	ldr	r1, [pc, #64]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ca6:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007ca8:	2201      	movs	r2, #1
 8007caa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cac:	f7fb fdd4 	bl	8003858 <HAL_GetTick>
 8007cb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007cb4:	f7fb fdd0 	bl	8003858 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e007      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cc6:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd2:	d1ef      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3730      	adds	r7, #48	; 0x30
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	40023800 	.word	0x40023800
 8007ce4:	42470070 	.word	0x42470070

08007ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cec:	b0ae      	sub	sp, #184	; 0xb8
 8007cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d0e:	4bcb      	ldr	r3, [pc, #812]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 030c 	and.w	r3, r3, #12
 8007d16:	2b0c      	cmp	r3, #12
 8007d18:	f200 8206 	bhi.w	8008128 <HAL_RCC_GetSysClockFreq+0x440>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d59 	.word	0x08007d59
 8007d28:	08008129 	.word	0x08008129
 8007d2c:	08008129 	.word	0x08008129
 8007d30:	08008129 	.word	0x08008129
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08008129 	.word	0x08008129
 8007d3c:	08008129 	.word	0x08008129
 8007d40:	08008129 	.word	0x08008129
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08008129 	.word	0x08008129
 8007d4c:	08008129 	.word	0x08008129
 8007d50:	08008129 	.word	0x08008129
 8007d54:	08007f59 	.word	0x08007f59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d58:	4bb9      	ldr	r3, [pc, #740]	; (8008040 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007d5e:	e1e7      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d60:	4bb8      	ldr	r3, [pc, #736]	; (8008044 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d66:	e1e3      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d68:	4bb4      	ldr	r3, [pc, #720]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d74:	4bb1      	ldr	r3, [pc, #708]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d071      	beq.n	8007e64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d80:	4bae      	ldr	r3, [pc, #696]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	099b      	lsrs	r3, r3, #6
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007da2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007da6:	4622      	mov	r2, r4
 8007da8:	462b      	mov	r3, r5
 8007daa:	f04f 0000 	mov.w	r0, #0
 8007dae:	f04f 0100 	mov.w	r1, #0
 8007db2:	0159      	lsls	r1, r3, #5
 8007db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007db8:	0150      	lsls	r0, r2, #5
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	1a51      	subs	r1, r2, r1
 8007dc2:	6439      	str	r1, [r7, #64]	; 0x40
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8007dca:	647b      	str	r3, [r7, #68]	; 0x44
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007dd8:	4649      	mov	r1, r9
 8007dda:	018b      	lsls	r3, r1, #6
 8007ddc:	4641      	mov	r1, r8
 8007dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007de2:	4641      	mov	r1, r8
 8007de4:	018a      	lsls	r2, r1, #6
 8007de6:	4641      	mov	r1, r8
 8007de8:	1a51      	subs	r1, r2, r1
 8007dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dec:	4649      	mov	r1, r9
 8007dee:	eb63 0301 	sbc.w	r3, r3, r1
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007e00:	4649      	mov	r1, r9
 8007e02:	00cb      	lsls	r3, r1, #3
 8007e04:	4641      	mov	r1, r8
 8007e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	00ca      	lsls	r2, r1, #3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4619      	mov	r1, r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	4622      	mov	r2, r4
 8007e16:	189b      	adds	r3, r3, r2
 8007e18:	633b      	str	r3, [r7, #48]	; 0x30
 8007e1a:	462b      	mov	r3, r5
 8007e1c:	460a      	mov	r2, r1
 8007e1e:	eb42 0303 	adc.w	r3, r2, r3
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34
 8007e24:	f04f 0200 	mov.w	r2, #0
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e30:	4629      	mov	r1, r5
 8007e32:	024b      	lsls	r3, r1, #9
 8007e34:	4621      	mov	r1, r4
 8007e36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	024a      	lsls	r2, r1, #9
 8007e3e:	4610      	mov	r0, r2
 8007e40:	4619      	mov	r1, r3
 8007e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007e54:	f7f8 ff28 	bl	8000ca8 <__aeabi_uldivmod>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e62:	e067      	b.n	8007f34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e64:	4b75      	ldr	r3, [pc, #468]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	099b      	lsrs	r3, r3, #6
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e7e:	2300      	movs	r3, #0
 8007e80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007e86:	4622      	mov	r2, r4
 8007e88:	462b      	mov	r3, r5
 8007e8a:	f04f 0000 	mov.w	r0, #0
 8007e8e:	f04f 0100 	mov.w	r1, #0
 8007e92:	0159      	lsls	r1, r3, #5
 8007e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e98:	0150      	lsls	r0, r2, #5
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	1a51      	subs	r1, r2, r1
 8007ea2:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8007eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	f04f 0300 	mov.w	r3, #0
 8007eb4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007eb8:	4649      	mov	r1, r9
 8007eba:	018b      	lsls	r3, r1, #6
 8007ebc:	4641      	mov	r1, r8
 8007ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ec2:	4641      	mov	r1, r8
 8007ec4:	018a      	lsls	r2, r1, #6
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ecc:	4649      	mov	r1, r9
 8007ece:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ede:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ee6:	4692      	mov	sl, r2
 8007ee8:	469b      	mov	fp, r3
 8007eea:	4623      	mov	r3, r4
 8007eec:	eb1a 0303 	adds.w	r3, sl, r3
 8007ef0:	623b      	str	r3, [r7, #32]
 8007ef2:	462b      	mov	r3, r5
 8007ef4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007f06:	4629      	mov	r1, r5
 8007f08:	028b      	lsls	r3, r1, #10
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f10:	4621      	mov	r1, r4
 8007f12:	028a      	lsls	r2, r1, #10
 8007f14:	4610      	mov	r0, r2
 8007f16:	4619      	mov	r1, r3
 8007f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8007f20:	677a      	str	r2, [r7, #116]	; 0x74
 8007f22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007f26:	f7f8 febf 	bl	8000ca8 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4613      	mov	r3, r2
 8007f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f34:	4b41      	ldr	r3, [pc, #260]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	0c1b      	lsrs	r3, r3, #16
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	3301      	adds	r3, #1
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007f56:	e0eb      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f58:	4b38      	ldr	r3, [pc, #224]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f64:	4b35      	ldr	r3, [pc, #212]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d06b      	beq.n	8008048 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f70:	4b32      	ldr	r3, [pc, #200]	; (800803c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	099b      	lsrs	r3, r3, #6
 8007f76:	2200      	movs	r2, #0
 8007f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f82:	663b      	str	r3, [r7, #96]	; 0x60
 8007f84:	2300      	movs	r3, #0
 8007f86:	667b      	str	r3, [r7, #100]	; 0x64
 8007f88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	462b      	mov	r3, r5
 8007f90:	f04f 0000 	mov.w	r0, #0
 8007f94:	f04f 0100 	mov.w	r1, #0
 8007f98:	0159      	lsls	r1, r3, #5
 8007f9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f9e:	0150      	lsls	r0, r2, #5
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	1a51      	subs	r1, r2, r1
 8007fa8:	61b9      	str	r1, [r7, #24]
 8007faa:	4629      	mov	r1, r5
 8007fac:	eb63 0301 	sbc.w	r3, r3, r1
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	018b      	lsls	r3, r1, #6
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fc8:	4651      	mov	r1, sl
 8007fca:	018a      	lsls	r2, r1, #6
 8007fcc:	4651      	mov	r1, sl
 8007fce:	ebb2 0801 	subs.w	r8, r2, r1
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	eb63 0901 	sbc.w	r9, r3, r1
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fe4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fe8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fec:	4690      	mov	r8, r2
 8007fee:	4699      	mov	r9, r3
 8007ff0:	4623      	mov	r3, r4
 8007ff2:	eb18 0303 	adds.w	r3, r8, r3
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	462b      	mov	r3, r5
 8007ffa:	eb49 0303 	adc.w	r3, r9, r3
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800800c:	4629      	mov	r1, r5
 800800e:	024b      	lsls	r3, r1, #9
 8008010:	4621      	mov	r1, r4
 8008012:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008016:	4621      	mov	r1, r4
 8008018:	024a      	lsls	r2, r1, #9
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008022:	2200      	movs	r2, #0
 8008024:	65bb      	str	r3, [r7, #88]	; 0x58
 8008026:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008028:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800802c:	f7f8 fe3c 	bl	8000ca8 <__aeabi_uldivmod>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4613      	mov	r3, r2
 8008036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800803a:	e065      	b.n	8008108 <HAL_RCC_GetSysClockFreq+0x420>
 800803c:	40023800 	.word	0x40023800
 8008040:	00f42400 	.word	0x00f42400
 8008044:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008048:	4b3d      	ldr	r3, [pc, #244]	; (8008140 <HAL_RCC_GetSysClockFreq+0x458>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	099b      	lsrs	r3, r3, #6
 800804e:	2200      	movs	r2, #0
 8008050:	4618      	mov	r0, r3
 8008052:	4611      	mov	r1, r2
 8008054:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008058:	653b      	str	r3, [r7, #80]	; 0x50
 800805a:	2300      	movs	r3, #0
 800805c:	657b      	str	r3, [r7, #84]	; 0x54
 800805e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008062:	4642      	mov	r2, r8
 8008064:	464b      	mov	r3, r9
 8008066:	f04f 0000 	mov.w	r0, #0
 800806a:	f04f 0100 	mov.w	r1, #0
 800806e:	0159      	lsls	r1, r3, #5
 8008070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008074:	0150      	lsls	r0, r2, #5
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4641      	mov	r1, r8
 800807c:	1a51      	subs	r1, r2, r1
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	4649      	mov	r1, r9
 8008082:	eb63 0301 	sbc.w	r3, r3, r1
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008094:	4659      	mov	r1, fp
 8008096:	018b      	lsls	r3, r1, #6
 8008098:	4651      	mov	r1, sl
 800809a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800809e:	4651      	mov	r1, sl
 80080a0:	018a      	lsls	r2, r1, #6
 80080a2:	4651      	mov	r1, sl
 80080a4:	1a54      	subs	r4, r2, r1
 80080a6:	4659      	mov	r1, fp
 80080a8:	eb63 0501 	sbc.w	r5, r3, r1
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	00eb      	lsls	r3, r5, #3
 80080b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ba:	00e2      	lsls	r2, r4, #3
 80080bc:	4614      	mov	r4, r2
 80080be:	461d      	mov	r5, r3
 80080c0:	4643      	mov	r3, r8
 80080c2:	18e3      	adds	r3, r4, r3
 80080c4:	603b      	str	r3, [r7, #0]
 80080c6:	464b      	mov	r3, r9
 80080c8:	eb45 0303 	adc.w	r3, r5, r3
 80080cc:	607b      	str	r3, [r7, #4]
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080da:	4629      	mov	r1, r5
 80080dc:	028b      	lsls	r3, r1, #10
 80080de:	4621      	mov	r1, r4
 80080e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080e4:	4621      	mov	r1, r4
 80080e6:	028a      	lsls	r2, r1, #10
 80080e8:	4610      	mov	r0, r2
 80080ea:	4619      	mov	r1, r3
 80080ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080f0:	2200      	movs	r2, #0
 80080f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80080f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80080f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080fa:	f7f8 fdd5 	bl	8000ca8 <__aeabi_uldivmod>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4613      	mov	r3, r2
 8008104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008108:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <HAL_RCC_GetSysClockFreq+0x458>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	0f1b      	lsrs	r3, r3, #28
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800811a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800811e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008126:	e003      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008128:	4b06      	ldr	r3, [pc, #24]	; (8008144 <HAL_RCC_GetSysClockFreq+0x45c>)
 800812a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800812e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008130:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008134:	4618      	mov	r0, r3
 8008136:	37b8      	adds	r7, #184	; 0xb8
 8008138:	46bd      	mov	sp, r7
 800813a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800813e:	bf00      	nop
 8008140:	40023800 	.word	0x40023800
 8008144:	00f42400 	.word	0x00f42400

08008148 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e28d      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8083 	beq.w	800826e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008168:	4b94      	ldr	r3, [pc, #592]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 030c 	and.w	r3, r3, #12
 8008170:	2b04      	cmp	r3, #4
 8008172:	d019      	beq.n	80081a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008174:	4b91      	ldr	r3, [pc, #580]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800817c:	2b08      	cmp	r3, #8
 800817e:	d106      	bne.n	800818e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008180:	4b8e      	ldr	r3, [pc, #568]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800818c:	d00c      	beq.n	80081a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800818e:	4b8b      	ldr	r3, [pc, #556]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008196:	2b0c      	cmp	r3, #12
 8008198:	d112      	bne.n	80081c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800819a:	4b88      	ldr	r3, [pc, #544]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081a6:	d10b      	bne.n	80081c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a8:	4b84      	ldr	r3, [pc, #528]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d05b      	beq.n	800826c <HAL_RCC_OscConfig+0x124>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d157      	bne.n	800826c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e25a      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c8:	d106      	bne.n	80081d8 <HAL_RCC_OscConfig+0x90>
 80081ca:	4b7c      	ldr	r3, [pc, #496]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a7b      	ldr	r2, [pc, #492]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80081d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	e01d      	b.n	8008214 <HAL_RCC_OscConfig+0xcc>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081e0:	d10c      	bne.n	80081fc <HAL_RCC_OscConfig+0xb4>
 80081e2:	4b76      	ldr	r3, [pc, #472]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a75      	ldr	r2, [pc, #468]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80081e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	4b73      	ldr	r3, [pc, #460]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a72      	ldr	r2, [pc, #456]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80081f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	e00b      	b.n	8008214 <HAL_RCC_OscConfig+0xcc>
 80081fc:	4b6f      	ldr	r3, [pc, #444]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a6e      	ldr	r2, [pc, #440]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	4b6c      	ldr	r3, [pc, #432]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a6b      	ldr	r2, [pc, #428]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 800820e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d013      	beq.n	8008244 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800821c:	f7fb fb1c 	bl	8003858 <HAL_GetTick>
 8008220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008222:	e008      	b.n	8008236 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008224:	f7fb fb18 	bl	8003858 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b64      	cmp	r3, #100	; 0x64
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e21f      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008236:	4b61      	ldr	r3, [pc, #388]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <HAL_RCC_OscConfig+0xdc>
 8008242:	e014      	b.n	800826e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008244:	f7fb fb08 	bl	8003858 <HAL_GetTick>
 8008248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800824c:	f7fb fb04 	bl	8003858 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b64      	cmp	r3, #100	; 0x64
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e20b      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800825e:	4b57      	ldr	r3, [pc, #348]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f0      	bne.n	800824c <HAL_RCC_OscConfig+0x104>
 800826a:	e000      	b.n	800826e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800826c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d06f      	beq.n	800835a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800827a:	4b50      	ldr	r3, [pc, #320]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 030c 	and.w	r3, r3, #12
 8008282:	2b00      	cmp	r3, #0
 8008284:	d017      	beq.n	80082b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008286:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800828e:	2b08      	cmp	r3, #8
 8008290:	d105      	bne.n	800829e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008292:	4b4a      	ldr	r3, [pc, #296]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800829e:	4b47      	ldr	r3, [pc, #284]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082a6:	2b0c      	cmp	r3, #12
 80082a8:	d11c      	bne.n	80082e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082aa:	4b44      	ldr	r3, [pc, #272]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d116      	bne.n	80082e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082b6:	4b41      	ldr	r3, [pc, #260]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <HAL_RCC_OscConfig+0x186>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d001      	beq.n	80082ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e1d3      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ce:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	4937      	ldr	r1, [pc, #220]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082e2:	e03a      	b.n	800835a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d020      	beq.n	800832e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082ec:	4b34      	ldr	r3, [pc, #208]	; (80083c0 <HAL_RCC_OscConfig+0x278>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f2:	f7fb fab1 	bl	8003858 <HAL_GetTick>
 80082f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082f8:	e008      	b.n	800830c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082fa:	f7fb faad 	bl	8003858 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d901      	bls.n	800830c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e1b4      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800830c:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0f0      	beq.n	80082fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008318:	4b28      	ldr	r3, [pc, #160]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	4925      	ldr	r1, [pc, #148]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008328:	4313      	orrs	r3, r2
 800832a:	600b      	str	r3, [r1, #0]
 800832c:	e015      	b.n	800835a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800832e:	4b24      	ldr	r3, [pc, #144]	; (80083c0 <HAL_RCC_OscConfig+0x278>)
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008334:	f7fb fa90 	bl	8003858 <HAL_GetTick>
 8008338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800833a:	e008      	b.n	800834e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800833c:	f7fb fa8c 	bl	8003858 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	2b02      	cmp	r3, #2
 8008348:	d901      	bls.n	800834e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e193      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800834e:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1f0      	bne.n	800833c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d036      	beq.n	80083d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d016      	beq.n	800839c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800836e:	4b15      	ldr	r3, [pc, #84]	; (80083c4 <HAL_RCC_OscConfig+0x27c>)
 8008370:	2201      	movs	r2, #1
 8008372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008374:	f7fb fa70 	bl	8003858 <HAL_GetTick>
 8008378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800837a:	e008      	b.n	800838e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800837c:	f7fb fa6c 	bl	8003858 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e173      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800838e:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 8008390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0f0      	beq.n	800837c <HAL_RCC_OscConfig+0x234>
 800839a:	e01b      	b.n	80083d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <HAL_RCC_OscConfig+0x27c>)
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a2:	f7fb fa59 	bl	8003858 <HAL_GetTick>
 80083a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083a8:	e00e      	b.n	80083c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083aa:	f7fb fa55 	bl	8003858 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d907      	bls.n	80083c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e15c      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
 80083bc:	40023800 	.word	0x40023800
 80083c0:	42470000 	.word	0x42470000
 80083c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083c8:	4b8a      	ldr	r3, [pc, #552]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 80083ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1ea      	bne.n	80083aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8097 	beq.w	8008510 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083e2:	2300      	movs	r3, #0
 80083e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083e6:	4b83      	ldr	r3, [pc, #524]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10f      	bne.n	8008412 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083f2:	2300      	movs	r3, #0
 80083f4:	60bb      	str	r3, [r7, #8]
 80083f6:	4b7f      	ldr	r3, [pc, #508]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	4a7e      	ldr	r2, [pc, #504]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 80083fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008400:	6413      	str	r3, [r2, #64]	; 0x40
 8008402:	4b7c      	ldr	r3, [pc, #496]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840a:	60bb      	str	r3, [r7, #8]
 800840c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800840e:	2301      	movs	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008412:	4b79      	ldr	r3, [pc, #484]	; (80085f8 <HAL_RCC_OscConfig+0x4b0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841a:	2b00      	cmp	r3, #0
 800841c:	d118      	bne.n	8008450 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800841e:	4b76      	ldr	r3, [pc, #472]	; (80085f8 <HAL_RCC_OscConfig+0x4b0>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a75      	ldr	r2, [pc, #468]	; (80085f8 <HAL_RCC_OscConfig+0x4b0>)
 8008424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800842a:	f7fb fa15 	bl	8003858 <HAL_GetTick>
 800842e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008432:	f7fb fa11 	bl	8003858 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e118      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008444:	4b6c      	ldr	r3, [pc, #432]	; (80085f8 <HAL_RCC_OscConfig+0x4b0>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f0      	beq.n	8008432 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d106      	bne.n	8008466 <HAL_RCC_OscConfig+0x31e>
 8008458:	4b66      	ldr	r3, [pc, #408]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 800845a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845c:	4a65      	ldr	r2, [pc, #404]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	6713      	str	r3, [r2, #112]	; 0x70
 8008464:	e01c      	b.n	80084a0 <HAL_RCC_OscConfig+0x358>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2b05      	cmp	r3, #5
 800846c:	d10c      	bne.n	8008488 <HAL_RCC_OscConfig+0x340>
 800846e:	4b61      	ldr	r3, [pc, #388]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 8008470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008472:	4a60      	ldr	r2, [pc, #384]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 8008474:	f043 0304 	orr.w	r3, r3, #4
 8008478:	6713      	str	r3, [r2, #112]	; 0x70
 800847a:	4b5e      	ldr	r3, [pc, #376]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 800847c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847e:	4a5d      	ldr	r2, [pc, #372]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	6713      	str	r3, [r2, #112]	; 0x70
 8008486:	e00b      	b.n	80084a0 <HAL_RCC_OscConfig+0x358>
 8008488:	4b5a      	ldr	r3, [pc, #360]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 800848a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848c:	4a59      	ldr	r2, [pc, #356]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 800848e:	f023 0301 	bic.w	r3, r3, #1
 8008492:	6713      	str	r3, [r2, #112]	; 0x70
 8008494:	4b57      	ldr	r3, [pc, #348]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 8008496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008498:	4a56      	ldr	r2, [pc, #344]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 800849a:	f023 0304 	bic.w	r3, r3, #4
 800849e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d015      	beq.n	80084d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a8:	f7fb f9d6 	bl	8003858 <HAL_GetTick>
 80084ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ae:	e00a      	b.n	80084c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084b0:	f7fb f9d2 	bl	8003858 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80084be:	4293      	cmp	r3, r2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e0d7      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084c6:	4b4b      	ldr	r3, [pc, #300]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 80084c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0ee      	beq.n	80084b0 <HAL_RCC_OscConfig+0x368>
 80084d2:	e014      	b.n	80084fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d4:	f7fb f9c0 	bl	8003858 <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084da:	e00a      	b.n	80084f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084dc:	f7fb f9bc 	bl	8003858 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e0c1      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084f2:	4b40      	ldr	r3, [pc, #256]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 80084f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1ee      	bne.n	80084dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d105      	bne.n	8008510 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008504:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	4a3a      	ldr	r2, [pc, #232]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 800850a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800850e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 80ad 	beq.w	8008674 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800851a:	4b36      	ldr	r3, [pc, #216]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f003 030c 	and.w	r3, r3, #12
 8008522:	2b08      	cmp	r3, #8
 8008524:	d060      	beq.n	80085e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d145      	bne.n	80085ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800852e:	4b33      	ldr	r3, [pc, #204]	; (80085fc <HAL_RCC_OscConfig+0x4b4>)
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008534:	f7fb f990 	bl	8003858 <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800853a:	e008      	b.n	800854e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800853c:	f7fb f98c 	bl	8003858 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e093      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800854e:	4b29      	ldr	r3, [pc, #164]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1f0      	bne.n	800853c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69da      	ldr	r2, [r3, #28]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	019b      	lsls	r3, r3, #6
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008570:	085b      	lsrs	r3, r3, #1
 8008572:	3b01      	subs	r3, #1
 8008574:	041b      	lsls	r3, r3, #16
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	061b      	lsls	r3, r3, #24
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	071b      	lsls	r3, r3, #28
 8008586:	491b      	ldr	r1, [pc, #108]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 8008588:	4313      	orrs	r3, r2
 800858a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800858c:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <HAL_RCC_OscConfig+0x4b4>)
 800858e:	2201      	movs	r2, #1
 8008590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008592:	f7fb f961 	bl	8003858 <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008598:	e008      	b.n	80085ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800859a:	f7fb f95d 	bl	8003858 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d901      	bls.n	80085ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e064      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085ac:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0f0      	beq.n	800859a <HAL_RCC_OscConfig+0x452>
 80085b8:	e05c      	b.n	8008674 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085ba:	4b10      	ldr	r3, [pc, #64]	; (80085fc <HAL_RCC_OscConfig+0x4b4>)
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c0:	f7fb f94a 	bl	8003858 <HAL_GetTick>
 80085c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085c8:	f7fb f946 	bl	8003858 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e04d      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085da:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <HAL_RCC_OscConfig+0x4ac>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f0      	bne.n	80085c8 <HAL_RCC_OscConfig+0x480>
 80085e6:	e045      	b.n	8008674 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d107      	bne.n	8008600 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e040      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
 80085f4:	40023800 	.word	0x40023800
 80085f8:	40007000 	.word	0x40007000
 80085fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008600:	4b1f      	ldr	r3, [pc, #124]	; (8008680 <HAL_RCC_OscConfig+0x538>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d030      	beq.n	8008670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008618:	429a      	cmp	r2, r3
 800861a:	d129      	bne.n	8008670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008626:	429a      	cmp	r2, r3
 8008628:	d122      	bne.n	8008670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008630:	4013      	ands	r3, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008638:	4293      	cmp	r3, r2
 800863a:	d119      	bne.n	8008670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	085b      	lsrs	r3, r3, #1
 8008648:	3b01      	subs	r3, #1
 800864a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800864c:	429a      	cmp	r2, r3
 800864e:	d10f      	bne.n	8008670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800865c:	429a      	cmp	r2, r3
 800865e:	d107      	bne.n	8008670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800866c:	429a      	cmp	r2, r3
 800866e:	d001      	beq.n	8008674 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40023800 	.word	0x40023800

08008684 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e022      	b.n	80086dc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d105      	bne.n	80086ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fa f8d7 	bl	800285c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2203      	movs	r2, #3
 80086b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f814 	bl	80086e4 <HAL_SD_InitCard>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e00a      	b.n	80086dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80086e4:	b5b0      	push	{r4, r5, r7, lr}
 80086e6:	b08e      	sub	sp, #56	; 0x38
 80086e8:	af04      	add	r7, sp, #16
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008700:	2376      	movs	r3, #118	; 0x76
 8008702:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681d      	ldr	r5, [r3, #0]
 8008708:	466c      	mov	r4, sp
 800870a:	f107 0314 	add.w	r3, r7, #20
 800870e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008716:	f107 0308 	add.w	r3, r7, #8
 800871a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800871c:	4628      	mov	r0, r5
 800871e:	f002 fe99 	bl	800b454 <SDIO_Init>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e04f      	b.n	80087d4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008734:	4b29      	ldr	r3, [pc, #164]	; (80087dc <HAL_SD_InitCard+0xf8>)
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4618      	mov	r0, r3
 8008740:	f002 fed1 	bl	800b4e6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008744:	4b25      	ldr	r3, [pc, #148]	; (80087dc <HAL_SD_InitCard+0xf8>)
 8008746:	2201      	movs	r2, #1
 8008748:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800874a:	2002      	movs	r0, #2
 800874c:	f7fb f890 	bl	8003870 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 f96f 	bl	8009a34 <SD_PowerON>
 8008756:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e02e      	b.n	80087d4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f001 f88e 	bl	8009898 <SD_InitCard>
 800877c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e01b      	b.n	80087d4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087a4:	4618      	mov	r0, r3
 80087a6:	f002 ff30 	bl	800b60a <SDMMC_CmdBlockLength>
 80087aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00f      	beq.n	80087d2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a0a      	ldr	r2, [pc, #40]	; (80087e0 <HAL_SD_InitCard+0xfc>)
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3728      	adds	r7, #40	; 0x28
 80087d8:	46bd      	mov	sp, r7
 80087da:	bdb0      	pop	{r4, r5, r7, pc}
 80087dc:	422580a0 	.word	0x422580a0
 80087e0:	004005ff 	.word	0x004005ff

080087e4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b092      	sub	sp, #72	; 0x48
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087f2:	f7fb f831 	bl	8003858 <HAL_GetTick>
 80087f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e1bd      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b01      	cmp	r3, #1
 8008820:	f040 81b0 	bne.w	8008b84 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800882a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008834:	429a      	cmp	r2, r3
 8008836:	d907      	bls.n	8008848 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e1a4      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2203      	movs	r2, #3
 800884c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2200      	movs	r2, #0
 8008856:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885c:	2b01      	cmp	r3, #1
 800885e:	d002      	beq.n	8008866 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	025b      	lsls	r3, r3, #9
 8008864:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008866:	f04f 33ff 	mov.w	r3, #4294967295
 800886a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	025b      	lsls	r3, r3, #9
 8008870:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008872:	2390      	movs	r3, #144	; 0x90
 8008874:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008876:	2302      	movs	r3, #2
 8008878:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800887a:	2300      	movs	r3, #0
 800887c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800887e:	2301      	movs	r3, #1
 8008880:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f107 0214 	add.w	r2, r7, #20
 800888a:	4611      	mov	r1, r2
 800888c:	4618      	mov	r0, r3
 800888e:	f002 fe90 	bl	800b5b2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d90a      	bls.n	80088ae <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2202      	movs	r2, #2
 800889c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088a4:	4618      	mov	r0, r3
 80088a6:	f002 fef4 	bl	800b692 <SDMMC_CmdReadMultiBlock>
 80088aa:	6478      	str	r0, [r7, #68]	; 0x44
 80088ac:	e009      	b.n	80088c2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088ba:	4618      	mov	r0, r3
 80088bc:	f002 fec7 	bl	800b64e <SDMMC_CmdReadSingleBlock>
 80088c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d012      	beq.n	80088ee <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a7a      	ldr	r2, [pc, #488]	; (8008ab8 <HAL_SD_ReadBlocks+0x2d4>)
 80088ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d6:	431a      	orrs	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e151      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80088f2:	e061      	b.n	80089b8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d03c      	beq.n	800897c <HAL_SD_ReadBlocks+0x198>
 8008902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d039      	beq.n	800897c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008908:	2300      	movs	r3, #0
 800890a:	643b      	str	r3, [r7, #64]	; 0x40
 800890c:	e033      	b.n	8008976 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f002 fdc9 	bl	800b4aa <SDIO_ReadFIFO>
 8008918:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	b2da      	uxtb	r2, r3
 800891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008920:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	3301      	adds	r3, #1
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892a:	3b01      	subs	r3, #1
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	0a1b      	lsrs	r3, r3, #8
 8008932:	b2da      	uxtb	r2, r3
 8008934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008936:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893a:	3301      	adds	r3, #1
 800893c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800893e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008940:	3b01      	subs	r3, #1
 8008942:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	0c1b      	lsrs	r3, r3, #16
 8008948:	b2da      	uxtb	r2, r3
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	3301      	adds	r3, #1
 8008952:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008956:	3b01      	subs	r3, #1
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	0e1b      	lsrs	r3, r3, #24
 800895e:	b2da      	uxtb	r2, r3
 8008960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008962:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008966:	3301      	adds	r3, #1
 8008968:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800896a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896c:	3b01      	subs	r3, #1
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008972:	3301      	adds	r3, #1
 8008974:	643b      	str	r3, [r7, #64]	; 0x40
 8008976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008978:	2b07      	cmp	r3, #7
 800897a:	d9c8      	bls.n	800890e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800897c:	f7fa ff6c 	bl	8003858 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008988:	429a      	cmp	r2, r3
 800898a:	d902      	bls.n	8008992 <HAL_SD_ReadBlocks+0x1ae>
 800898c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800898e:	2b00      	cmp	r3, #0
 8008990:	d112      	bne.n	80089b8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a48      	ldr	r2, [pc, #288]	; (8008ab8 <HAL_SD_ReadBlocks+0x2d4>)
 8008998:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e0ec      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089be:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d096      	beq.n	80088f4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d022      	beq.n	8008a1a <HAL_SD_ReadBlocks+0x236>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d91f      	bls.n	8008a1a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d01b      	beq.n	8008a1a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f002 feba 	bl	800b760 <SDMMC_CmdStopTransfer>
 80089ec:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80089ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d012      	beq.n	8008a1a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a2f      	ldr	r2, [pc, #188]	; (8008ab8 <HAL_SD_ReadBlocks+0x2d4>)
 80089fa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a02:	431a      	orrs	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e0bb      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d012      	beq.n	8008a4e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a22      	ldr	r2, [pc, #136]	; (8008ab8 <HAL_SD_ReadBlocks+0x2d4>)
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	f043 0208 	orr.w	r2, r3, #8
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e0a1      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d012      	beq.n	8008a82 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <HAL_SD_ReadBlocks+0x2d4>)
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	f043 0202 	orr.w	r2, r3, #2
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e087      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d064      	beq.n	8008b5a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a08      	ldr	r2, [pc, #32]	; (8008ab8 <HAL_SD_ReadBlocks+0x2d4>)
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	f043 0220 	orr.w	r2, r3, #32
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e06d      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
 8008ab6:	bf00      	nop
 8008ab8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f002 fcf2 	bl	800b4aa <SDIO_ReadFIFO>
 8008ac6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ace:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	0a1b      	lsrs	r3, r3, #8
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	3301      	adds	r3, #1
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aee:	3b01      	subs	r3, #1
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	0c1b      	lsrs	r3, r3, #16
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afe:	3301      	adds	r3, #1
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b04:	3b01      	subs	r3, #1
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	0e1b      	lsrs	r3, r3, #24
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b10:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b14:	3301      	adds	r3, #1
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008b1e:	f7fa fe9b 	bl	8003858 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d902      	bls.n	8008b34 <HAL_SD_ReadBlocks+0x350>
 8008b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d112      	bne.n	8008b5a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a18      	ldr	r2, [pc, #96]	; (8008b9c <HAL_SD_ReadBlocks+0x3b8>)
 8008b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e01b      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <HAL_SD_ReadBlocks+0x38a>
 8008b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1a6      	bne.n	8008abc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	e006      	b.n	8008b92 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
  }
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3748      	adds	r7, #72	; 0x48
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	004005ff 	.word	0x004005ff

08008ba0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b092      	sub	sp, #72	; 0x48
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bae:	f7fa fe53 	bl	8003858 <HAL_GetTick>
 8008bb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d107      	bne.n	8008bd2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e165      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	f040 8158 	bne.w	8008e90 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	441a      	add	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d907      	bls.n	8008c04 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e14c      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2203      	movs	r2, #3
 8008c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2200      	movs	r2, #0
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d002      	beq.n	8008c22 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1e:	025b      	lsls	r3, r3, #9
 8008c20:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c22:	f04f 33ff 	mov.w	r3, #4294967295
 8008c26:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	025b      	lsls	r3, r3, #9
 8008c2c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008c2e:	2390      	movs	r3, #144	; 0x90
 8008c30:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008c32:	2300      	movs	r3, #0
 8008c34:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f107 0218 	add.w	r2, r7, #24
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 fcb2 	bl	800b5b2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d90a      	bls.n	8008c6a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2220      	movs	r2, #32
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c60:	4618      	mov	r0, r3
 8008c62:	f002 fd5a 	bl	800b71a <SDMMC_CmdWriteMultiBlock>
 8008c66:	6478      	str	r0, [r7, #68]	; 0x44
 8008c68:	e009      	b.n	8008c7e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2210      	movs	r2, #16
 8008c6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c76:	4618      	mov	r0, r3
 8008c78:	f002 fd2d 	bl	800b6d6 <SDMMC_CmdWriteSingleBlock>
 8008c7c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d012      	beq.n	8008caa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a87      	ldr	r2, [pc, #540]	; (8008ea8 <HAL_SD_WriteBlocks+0x308>)
 8008c8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c92:	431a      	orrs	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e0f9      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008cae:	e065      	b.n	8008d7c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d040      	beq.n	8008d40 <HAL_SD_WriteBlocks+0x1a0>
 8008cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d03d      	beq.n	8008d40 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8008cc8:	e037      	b.n	8008d3a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	021a      	lsls	r2, r3, #8
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	3301      	adds	r3, #1
 8008cec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	041a      	lsls	r2, r3, #16
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d02:	3301      	adds	r3, #1
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	061a      	lsls	r2, r3, #24
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	3b01      	subs	r3, #1
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f107 0214 	add.w	r2, r7, #20
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f002 fbc8 	bl	800b4c4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d36:	3301      	adds	r3, #1
 8008d38:	643b      	str	r3, [r7, #64]	; 0x40
 8008d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d3c:	2b07      	cmp	r3, #7
 8008d3e:	d9c4      	bls.n	8008cca <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008d40:	f7fa fd8a 	bl	8003858 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d902      	bls.n	8008d56 <HAL_SD_WriteBlocks+0x1b6>
 8008d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d112      	bne.n	8008d7c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a53      	ldr	r2, [pc, #332]	; (8008ea8 <HAL_SD_WriteBlocks+0x308>)
 8008d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d64:	431a      	orrs	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e090      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d82:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d092      	beq.n	8008cb0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d022      	beq.n	8008dde <HAL_SD_WriteBlocks+0x23e>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d91f      	bls.n	8008dde <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d01b      	beq.n	8008dde <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f002 fcd8 	bl	800b760 <SDMMC_CmdStopTransfer>
 8008db0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d012      	beq.n	8008dde <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a3a      	ldr	r2, [pc, #232]	; (8008ea8 <HAL_SD_WriteBlocks+0x308>)
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e05f      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d012      	beq.n	8008e12 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a2d      	ldr	r2, [pc, #180]	; (8008ea8 <HAL_SD_WriteBlocks+0x308>)
 8008df2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	f043 0208 	orr.w	r2, r3, #8
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e045      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d012      	beq.n	8008e46 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a20      	ldr	r2, [pc, #128]	; (8008ea8 <HAL_SD_WriteBlocks+0x308>)
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	f043 0202 	orr.w	r2, r3, #2
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e02b      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d012      	beq.n	8008e7a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a13      	ldr	r2, [pc, #76]	; (8008ea8 <HAL_SD_WriteBlocks+0x308>)
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	f043 0210 	orr.w	r2, r3, #16
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e011      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e82:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e006      	b.n	8008e9e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
  }
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3748      	adds	r7, #72	; 0x48
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	004005ff 	.word	0x004005ff

08008eac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	; 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d107      	bne.n	8008ed4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e0be      	b.n	8009052 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	f040 80b7 	bne.w	8009050 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	441a      	add	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d907      	bls.n	8008f06 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e0a5      	b.n	8009052 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2200      	movs	r2, #0
 8008f14:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008f24:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	4a4c      	ldr	r2, [pc, #304]	; (800905c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8008f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	4a4b      	ldr	r2, [pc, #300]	; (8009060 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008f34:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	2200      	movs	r2, #0
 8008f44:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3380      	adds	r3, #128	; 0x80
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	025b      	lsls	r3, r3, #9
 8008f74:	089b      	lsrs	r3, r3, #2
 8008f76:	f7fb fa97 	bl	80044a8 <HAL_DMA_Start_IT>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d017      	beq.n	8008fb0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008f8e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a33      	ldr	r2, [pc, #204]	; (8009064 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e050      	b.n	8009052 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008fb0:	4b2d      	ldr	r3, [pc, #180]	; (8009068 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d002      	beq.n	8008fc4 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	025b      	lsls	r3, r3, #9
 8008fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	025b      	lsls	r3, r3, #9
 8008fce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008fd0:	2390      	movs	r3, #144	; 0x90
 8008fd2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f107 0210 	add.w	r2, r7, #16
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f002 fae1 	bl	800b5b2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d90a      	bls.n	800900c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2282      	movs	r2, #130	; 0x82
 8008ffa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009002:	4618      	mov	r0, r3
 8009004:	f002 fb45 	bl	800b692 <SDMMC_CmdReadMultiBlock>
 8009008:	62f8      	str	r0, [r7, #44]	; 0x2c
 800900a:	e009      	b.n	8009020 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2281      	movs	r2, #129	; 0x81
 8009010:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009018:	4618      	mov	r0, r3
 800901a:	f002 fb18 	bl	800b64e <SDMMC_CmdReadSingleBlock>
 800901e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	2b00      	cmp	r3, #0
 8009024:	d012      	beq.n	800904c <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a0e      	ldr	r2, [pc, #56]	; (8009064 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800902c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	431a      	orrs	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e002      	b.n	8009052 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	e000      	b.n	8009052 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009050:	2302      	movs	r3, #2
  }
}
 8009052:	4618      	mov	r0, r3
 8009054:	3730      	adds	r7, #48	; 0x30
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	08009783 	.word	0x08009783
 8009060:	080097f5 	.word	0x080097f5
 8009064:	004005ff 	.word	0x004005ff
 8009068:	4225858c 	.word	0x4225858c

0800906c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08c      	sub	sp, #48	; 0x30
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d107      	bne.n	8009094 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e0c1      	b.n	8009218 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b01      	cmp	r3, #1
 800909e:	f040 80ba 	bne.w	8009216 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	441a      	add	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d907      	bls.n	80090c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e0a8      	b.n	8009218 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2203      	movs	r2, #3
 80090ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 021a 	orr.w	r2, r2, #26
 80090e4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ea:	4a4d      	ldr	r2, [pc, #308]	; (8009220 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80090ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f2:	4a4c      	ldr	r2, [pc, #304]	; (8009224 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80090f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fa:	2200      	movs	r2, #0
 80090fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009102:	2b01      	cmp	r3, #1
 8009104:	d002      	beq.n	800910c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	025b      	lsls	r3, r3, #9
 800910a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d90a      	bls.n	8009128 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	22a0      	movs	r2, #160	; 0xa0
 8009116:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800911e:	4618      	mov	r0, r3
 8009120:	f002 fafb 	bl	800b71a <SDMMC_CmdWriteMultiBlock>
 8009124:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009126:	e009      	b.n	800913c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2290      	movs	r2, #144	; 0x90
 800912c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009134:	4618      	mov	r0, r3
 8009136:	f002 face 	bl	800b6d6 <SDMMC_CmdWriteSingleBlock>
 800913a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	2b00      	cmp	r3, #0
 8009140:	d012      	beq.n	8009168 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a38      	ldr	r2, [pc, #224]	; (8009228 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009148:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	431a      	orrs	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e057      	b.n	8009218 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009168:	4b30      	ldr	r3, [pc, #192]	; (800922c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800916a:	2201      	movs	r2, #1
 800916c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009172:	2240      	movs	r2, #64	; 0x40
 8009174:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3380      	adds	r3, #128	; 0x80
 800919e:	461a      	mov	r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	025b      	lsls	r3, r3, #9
 80091a4:	089b      	lsrs	r3, r3, #2
 80091a6:	f7fb f97f 	bl	80044a8 <HAL_DMA_Start_IT>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01a      	beq.n	80091e6 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 021a 	bic.w	r2, r2, #26
 80091be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a18      	ldr	r2, [pc, #96]	; (8009228 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e018      	b.n	8009218 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	025b      	lsls	r3, r3, #9
 80091f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80091f2:	2390      	movs	r3, #144	; 0x90
 80091f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80091f6:	2300      	movs	r3, #0
 80091f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80091fe:	2301      	movs	r3, #1
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f107 0210 	add.w	r2, r7, #16
 800920a:	4611      	mov	r1, r2
 800920c:	4618      	mov	r0, r3
 800920e:	f002 f9d0 	bl	800b5b2 <SDIO_ConfigData>

      return HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	e000      	b.n	8009218 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8009216:	2302      	movs	r3, #2
  }
}
 8009218:	4618      	mov	r0, r3
 800921a:	3730      	adds	r7, #48	; 0x30
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	08009759 	.word	0x08009759
 8009224:	080097f5 	.word	0x080097f5
 8009228:	004005ff 	.word	0x004005ff
 800922c:	4225858c 	.word	0x4225858c

08009230 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009252:	0f9b      	lsrs	r3, r3, #30
 8009254:	b2da      	uxtb	r2, r3
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800925e:	0e9b      	lsrs	r3, r3, #26
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	b2da      	uxtb	r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009270:	0e1b      	lsrs	r3, r3, #24
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	b2da      	uxtb	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009282:	0c1b      	lsrs	r3, r3, #16
 8009284:	b2da      	uxtb	r2, r3
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	b2da      	uxtb	r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800929a:	b2da      	uxtb	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092a4:	0d1b      	lsrs	r3, r3, #20
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b0:	0c1b      	lsrs	r3, r3, #16
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 030f 	and.w	r3, r3, #15
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c2:	0bdb      	lsrs	r3, r3, #15
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d4:	0b9b      	lsrs	r3, r3, #14
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e6:	0b5b      	lsrs	r3, r3, #13
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092f8:	0b1b      	lsrs	r3, r3, #12
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 0301 	and.w	r3, r3, #1
 8009300:	b2da      	uxtb	r2, r3
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2200      	movs	r2, #0
 800930a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009310:	2b00      	cmp	r3, #0
 8009312:	d163      	bne.n	80093dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009318:	009a      	lsls	r2, r3, #2
 800931a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800931e:	4013      	ands	r3, r2
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009324:	0f92      	lsrs	r2, r2, #30
 8009326:	431a      	orrs	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009330:	0edb      	lsrs	r3, r3, #27
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	b2da      	uxtb	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009342:	0e1b      	lsrs	r3, r3, #24
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009354:	0d5b      	lsrs	r3, r3, #21
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	b2da      	uxtb	r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009366:	0c9b      	lsrs	r3, r3, #18
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	b2da      	uxtb	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009378:	0bdb      	lsrs	r3, r3, #15
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 0307 	and.w	r3, r3, #7
 8009380:	b2da      	uxtb	r2, r3
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	7e1b      	ldrb	r3, [r3, #24]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	3302      	adds	r3, #2
 800939c:	2201      	movs	r2, #1
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80093a6:	fb03 f202 	mul.w	r2, r3, r2
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	7a1b      	ldrb	r3, [r3, #8]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 030f 	and.w	r3, r3, #15
 80093b8:	2201      	movs	r2, #1
 80093ba:	409a      	lsls	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80093c8:	0a52      	lsrs	r2, r2, #9
 80093ca:	fb03 f202 	mul.w	r2, r3, r2
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093d8:	661a      	str	r2, [r3, #96]	; 0x60
 80093da:	e031      	b.n	8009440 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d11d      	bne.n	8009420 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093e8:	041b      	lsls	r3, r3, #16
 80093ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f2:	0c1b      	lsrs	r3, r3, #16
 80093f4:	431a      	orrs	r2, r3
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	3301      	adds	r3, #1
 8009400:	029a      	lsls	r2, r3, #10
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009414:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	661a      	str	r2, [r3, #96]	; 0x60
 800941e:	e00f      	b.n	8009440 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a58      	ldr	r2, [pc, #352]	; (8009588 <HAL_SD_GetCardCSD+0x344>)
 8009426:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e09d      	b.n	800957c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009444:	0b9b      	lsrs	r3, r3, #14
 8009446:	b2db      	uxtb	r3, r3
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	b2da      	uxtb	r2, r3
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009456:	09db      	lsrs	r3, r3, #7
 8009458:	b2db      	uxtb	r3, r3
 800945a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945e:	b2da      	uxtb	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009468:	b2db      	uxtb	r3, r3
 800946a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946e:	b2da      	uxtb	r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009478:	0fdb      	lsrs	r3, r3, #31
 800947a:	b2da      	uxtb	r2, r3
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009484:	0f5b      	lsrs	r3, r3, #29
 8009486:	b2db      	uxtb	r3, r3
 8009488:	f003 0303 	and.w	r3, r3, #3
 800948c:	b2da      	uxtb	r2, r3
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009496:	0e9b      	lsrs	r3, r3, #26
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a8:	0d9b      	lsrs	r3, r3, #22
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ba:	0d5b      	lsrs	r3, r3, #21
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ea:	0bdb      	lsrs	r3, r3, #15
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fe:	0b9b      	lsrs	r3, r3, #14
 8009500:	b2db      	uxtb	r3, r3
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	b2da      	uxtb	r2, r3
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009512:	0b5b      	lsrs	r3, r3, #13
 8009514:	b2db      	uxtb	r3, r3
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	b2da      	uxtb	r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009526:	0b1b      	lsrs	r3, r3, #12
 8009528:	b2db      	uxtb	r3, r3
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	b2da      	uxtb	r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	0a9b      	lsrs	r3, r3, #10
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	b2da      	uxtb	r2, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954e:	0a1b      	lsrs	r3, r3, #8
 8009550:	b2db      	uxtb	r3, r3
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	b2da      	uxtb	r2, r3
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	b2db      	uxtb	r3, r3
 8009566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800956a:	b2da      	uxtb	r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	004005ff 	.word	0x004005ff

0800958c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80095e4:	b5b0      	push	{r4, r5, r7, lr}
 80095e6:	b08e      	sub	sp, #56	; 0x38
 80095e8:	af04      	add	r7, sp, #16
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2203      	movs	r2, #3
 80095f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009600:	2b03      	cmp	r3, #3
 8009602:	d02e      	beq.n	8009662 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960a:	d106      	bne.n	800961a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	639a      	str	r2, [r3, #56]	; 0x38
 8009618:	e029      	b.n	800966e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009620:	d10a      	bne.n	8009638 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fabc 	bl	8009ba0 <SD_WideBus_Enable>
 8009628:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
 8009636:	e01a      	b.n	800966e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 faf9 	bl	8009c36 <SD_WideBus_Disable>
 8009644:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	639a      	str	r2, [r3, #56]	; 0x38
 8009652:	e00c      	b.n	800966e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
 8009660:	e005      	b.n	800966e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00b      	beq.n	800968e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a26      	ldr	r2, [pc, #152]	; (8009714 <HAL_SD_ConfigWideBusOperation+0x130>)
 800967c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800968c:	e01f      	b.n	80096ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681d      	ldr	r5, [r3, #0]
 80096b4:	466c      	mov	r4, sp
 80096b6:	f107 0314 	add.w	r3, r7, #20
 80096ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096c2:	f107 0308 	add.w	r3, r7, #8
 80096c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096c8:	4628      	mov	r0, r5
 80096ca:	f001 fec3 	bl	800b454 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096d6:	4618      	mov	r0, r3
 80096d8:	f001 ff97 	bl	800b60a <SDMMC_CmdBlockLength>
 80096dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00c      	beq.n	80096fe <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a0a      	ldr	r2, [pc, #40]	; (8009714 <HAL_SD_ConfigWideBusOperation+0x130>)
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800970a:	4618      	mov	r0, r3
 800970c:	3728      	adds	r7, #40	; 0x28
 800970e:	46bd      	mov	sp, r7
 8009710:	bdb0      	pop	{r4, r5, r7, pc}
 8009712:	bf00      	nop
 8009714:	004005ff 	.word	0x004005ff

08009718 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009724:	f107 030c 	add.w	r3, r7, #12
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa10 	bl	8009b50 <SD_SendStatus>
 8009730:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d005      	beq.n	8009744 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	431a      	orrs	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	0a5b      	lsrs	r3, r3, #9
 8009748:	f003 030f 	and.w	r3, r3, #15
 800974c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800974e:	693b      	ldr	r3, [r7, #16]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009774:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009776:	bf00      	nop
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009794:	2b82      	cmp	r3, #130	; 0x82
 8009796:	d111      	bne.n	80097bc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4618      	mov	r0, r3
 800979e:	f001 ffdf 	bl	800b760 <SDMMC_CmdStopTransfer>
 80097a2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d008      	beq.n	80097bc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f7ff fd3a 	bl	8009230 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0208 	bic.w	r2, r2, #8
 80097ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80097d4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f004 f883 	bl	800d8f0 <HAL_SD_RxCpltCallback>
#endif
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fb f8a2 	bl	800494c <HAL_DMA_GetError>
 8009808:	4603      	mov	r3, r0
 800980a:	2b02      	cmp	r3, #2
 800980c:	d03e      	beq.n	800988c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009814:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d002      	beq.n	800982a <SD_DMAError+0x36>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d12d      	bne.n	8009886 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a19      	ldr	r2, [pc, #100]	; (8009894 <SD_DMAError+0xa0>)
 8009830:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009840:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009846:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800984e:	6978      	ldr	r0, [r7, #20]
 8009850:	f7ff ff62 	bl	8009718 <HAL_SD_GetCardState>
 8009854:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b06      	cmp	r3, #6
 800985a:	d002      	beq.n	8009862 <SD_DMAError+0x6e>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b05      	cmp	r3, #5
 8009860:	d10a      	bne.n	8009878 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4618      	mov	r0, r3
 8009868:	f001 ff7a 	bl	800b760 <SDMMC_CmdStopTransfer>
 800986c:	4602      	mov	r2, r0
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	431a      	orrs	r2, r3
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2200      	movs	r2, #0
 8009884:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009886:	6978      	ldr	r0, [r7, #20]
 8009888:	f7ff fcd2 	bl	8009230 <HAL_SD_ErrorCallback>
#endif
  }
}
 800988c:	bf00      	nop
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	004005ff 	.word	0x004005ff

08009898 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009898:	b5b0      	push	{r4, r5, r7, lr}
 800989a:	b094      	sub	sp, #80	; 0x50
 800989c:	af04      	add	r7, sp, #16
 800989e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80098a0:	2301      	movs	r3, #1
 80098a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f001 fe2a 	bl	800b502 <SDIO_GetPowerState>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d102      	bne.n	80098ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80098b8:	e0b8      	b.n	8009a2c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d02f      	beq.n	8009922 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f002 f854 	bl	800b974 <SDMMC_CmdSendCID>
 80098cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80098ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80098d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d6:	e0a9      	b.n	8009a2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f001 fe54 	bl	800b58c <SDIO_GetResponse>
 80098e4:	4602      	mov	r2, r0
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2104      	movs	r1, #4
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fe4b 	bl	800b58c <SDIO_GetResponse>
 80098f6:	4602      	mov	r2, r0
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2108      	movs	r1, #8
 8009902:	4618      	mov	r0, r3
 8009904:	f001 fe42 	bl	800b58c <SDIO_GetResponse>
 8009908:	4602      	mov	r2, r0
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	210c      	movs	r1, #12
 8009914:	4618      	mov	r0, r3
 8009916:	f001 fe39 	bl	800b58c <SDIO_GetResponse>
 800991a:	4602      	mov	r2, r0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009926:	2b03      	cmp	r3, #3
 8009928:	d00d      	beq.n	8009946 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f107 020e 	add.w	r2, r7, #14
 8009932:	4611      	mov	r1, r2
 8009934:	4618      	mov	r0, r3
 8009936:	f002 f85a 	bl	800b9ee <SDMMC_CmdSetRelAdd>
 800993a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800993c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <SD_InitCard+0xae>
    {
      return errorstate;
 8009942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009944:	e072      	b.n	8009a2c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994a:	2b03      	cmp	r3, #3
 800994c:	d036      	beq.n	80099bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800994e:	89fb      	ldrh	r3, [r7, #14]
 8009950:	461a      	mov	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800995e:	041b      	lsls	r3, r3, #16
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f002 f824 	bl	800b9b0 <SDMMC_CmdSendCSD>
 8009968:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800996a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	e05b      	b.n	8009a2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f001 fe06 	bl	800b58c <SDIO_GetResponse>
 8009980:	4602      	mov	r2, r0
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2104      	movs	r1, #4
 800998c:	4618      	mov	r0, r3
 800998e:	f001 fdfd 	bl	800b58c <SDIO_GetResponse>
 8009992:	4602      	mov	r2, r0
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2108      	movs	r1, #8
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 fdf4 	bl	800b58c <SDIO_GetResponse>
 80099a4:	4602      	mov	r2, r0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	210c      	movs	r1, #12
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 fdeb 	bl	800b58c <SDIO_GetResponse>
 80099b6:	4602      	mov	r2, r0
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2104      	movs	r1, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 fde2 	bl	800b58c <SDIO_GetResponse>
 80099c8:	4603      	mov	r3, r0
 80099ca:	0d1a      	lsrs	r2, r3, #20
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80099d0:	f107 0310 	add.w	r3, r7, #16
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7ff fc34 	bl	8009244 <HAL_SD_GetCardCSD>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099e6:	e021      	b.n	8009a2c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6819      	ldr	r1, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f0:	041b      	lsls	r3, r3, #16
 80099f2:	2200      	movs	r2, #0
 80099f4:	461c      	mov	r4, r3
 80099f6:	4615      	mov	r5, r2
 80099f8:	4622      	mov	r2, r4
 80099fa:	462b      	mov	r3, r5
 80099fc:	4608      	mov	r0, r1
 80099fe:	f001 fed1 	bl	800b7a4 <SDMMC_CmdSelDesel>
 8009a02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <SD_InitCard+0x176>
  {
    return errorstate;
 8009a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0c:	e00e      	b.n	8009a2c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681d      	ldr	r5, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	466c      	mov	r4, sp
 8009a16:	f103 0210 	add.w	r2, r3, #16
 8009a1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a20:	3304      	adds	r3, #4
 8009a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a24:	4628      	mov	r0, r5
 8009a26:	f001 fd15 	bl	800b454 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3740      	adds	r7, #64	; 0x40
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bdb0      	pop	{r4, r5, r7, pc}

08009a34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	2300      	movs	r3, #0
 8009a46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 fecc 	bl	800b7ea <SDMMC_CmdGoIdleState>
 8009a52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	e072      	b.n	8009b44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 fedf 	bl	800b826 <SDMMC_CmdOperCond>
 8009a68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00d      	beq.n	8009a8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 feb5 	bl	800b7ea <SDMMC_CmdGoIdleState>
 8009a80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	e05b      	b.n	8009b44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d137      	bne.n	8009b0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 fedf 	bl	800b864 <SDMMC_CmdAppCommand>
 8009aa6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d02d      	beq.n	8009b0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009aae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ab2:	e047      	b.n	8009b44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2100      	movs	r1, #0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fed2 	bl	800b864 <SDMMC_CmdAppCommand>
 8009ac0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <SD_PowerON+0x98>
    {
      return errorstate;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	e03b      	b.n	8009b44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	491e      	ldr	r1, [pc, #120]	; (8009b4c <SD_PowerON+0x118>)
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f001 fee8 	bl	800b8a8 <SDMMC_CmdAppOperCommand>
 8009ad8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ae4:	e02e      	b.n	8009b44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2100      	movs	r1, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 fd4d 	bl	800b58c <SDIO_GetResponse>
 8009af2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	0fdb      	lsrs	r3, r3, #31
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <SD_PowerON+0xcc>
 8009afc:	2301      	movs	r3, #1
 8009afe:	e000      	b.n	8009b02 <SD_PowerON+0xce>
 8009b00:	2300      	movs	r3, #0
 8009b02:	613b      	str	r3, [r7, #16]

    count++;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	3301      	adds	r3, #1
 8009b08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d802      	bhi.n	8009b1a <SD_PowerON+0xe6>
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0cc      	beq.n	8009ab4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d902      	bls.n	8009b2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b28:	e00c      	b.n	8009b44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	645a      	str	r2, [r3, #68]	; 0x44
 8009b3a:	e002      	b.n	8009b42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	c1100000 	.word	0xc1100000

08009b50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b64:	e018      	b.n	8009b98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6e:	041b      	lsls	r3, r3, #16
 8009b70:	4619      	mov	r1, r3
 8009b72:	4610      	mov	r0, r2
 8009b74:	f001 ff5c 	bl	800ba30 <SDMMC_CmdSendStatus>
 8009b78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	e009      	b.n	8009b98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 fcfe 	bl	800b58c <SDIO_GetResponse>
 8009b90:	4602      	mov	r2, r0
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	2300      	movs	r3, #0
 8009bae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f001 fce8 	bl	800b58c <SDIO_GetResponse>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bc6:	d102      	bne.n	8009bce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bcc:	e02f      	b.n	8009c2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009bce:	f107 030c 	add.w	r3, r7, #12
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f879 	bl	8009ccc <SD_FindSCR>
 8009bda:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	e023      	b.n	8009c2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01c      	beq.n	8009c2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf8:	041b      	lsls	r3, r3, #16
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f001 fe31 	bl	800b864 <SDMMC_CmdAppCommand>
 8009c02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	e00f      	b.n	8009c2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2102      	movs	r1, #2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 fe6a 	bl	800b8ee <SDMMC_CmdBusWidth>
 8009c1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	e003      	b.n	8009c2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c26:	2300      	movs	r3, #0
 8009c28:	e001      	b.n	8009c2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b086      	sub	sp, #24
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 fc9d 	bl	800b58c <SDIO_GetResponse>
 8009c52:	4603      	mov	r3, r0
 8009c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c5c:	d102      	bne.n	8009c64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c62:	e02f      	b.n	8009cc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c64:	f107 030c 	add.w	r3, r7, #12
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f82e 	bl	8009ccc <SD_FindSCR>
 8009c70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	e023      	b.n	8009cc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d01c      	beq.n	8009cc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8e:	041b      	lsls	r3, r3, #16
 8009c90:	4619      	mov	r1, r3
 8009c92:	4610      	mov	r0, r2
 8009c94:	f001 fde6 	bl	800b864 <SDMMC_CmdAppCommand>
 8009c98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	e00f      	b.n	8009cc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2100      	movs	r1, #0
 8009caa:	4618      	mov	r0, r3
 8009cac:	f001 fe1f 	bl	800b8ee <SDMMC_CmdBusWidth>
 8009cb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	e003      	b.n	8009cc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e001      	b.n	8009cc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ccc:	b590      	push	{r4, r7, lr}
 8009cce:	b08f      	sub	sp, #60	; 0x3c
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009cd6:	f7f9 fdbf 	bl	8003858 <HAL_GetTick>
 8009cda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60bb      	str	r3, [r7, #8]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2108      	movs	r1, #8
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 fc89 	bl	800b60a <SDMMC_CmdBlockLength>
 8009cf8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	e0b2      	b.n	8009e6a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	041b      	lsls	r3, r3, #16
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4610      	mov	r0, r2
 8009d12:	f001 fda7 	bl	800b864 <SDMMC_CmdAppCommand>
 8009d16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d20:	e0a3      	b.n	8009e6a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009d28:	2308      	movs	r3, #8
 8009d2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009d2c:	2330      	movs	r3, #48	; 0x30
 8009d2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009d30:	2302      	movs	r3, #2
 8009d32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f107 0210 	add.w	r2, r7, #16
 8009d44:	4611      	mov	r1, r2
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 fc33 	bl	800b5b2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fdee 	bl	800b932 <SDMMC_CmdSendSCR>
 8009d56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d02a      	beq.n	8009db4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	e083      	b.n	8009e6a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00f      	beq.n	8009d90 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	f107 0208 	add.w	r2, r7, #8
 8009d7c:	18d4      	adds	r4, r2, r3
 8009d7e:	4608      	mov	r0, r1
 8009d80:	f001 fb93 	bl	800b4aa <SDIO_ReadFIFO>
 8009d84:	4603      	mov	r3, r0
 8009d86:	6023      	str	r3, [r4, #0]
      index++;
 8009d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d8e:	e006      	b.n	8009d9e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d012      	beq.n	8009dc4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d9e:	f7f9 fd5b 	bl	8003858 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dac:	d102      	bne.n	8009db4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009db2:	e05a      	b.n	8009e6a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dba:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d0cf      	beq.n	8009d62 <SD_FindSCR+0x96>
 8009dc2:	e000      	b.n	8009dc6 <SD_FindSCR+0xfa>
      break;
 8009dc4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dcc:	f003 0308 	and.w	r3, r3, #8
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2208      	movs	r2, #8
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ddc:	2308      	movs	r3, #8
 8009dde:	e044      	b.n	8009e6a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d005      	beq.n	8009dfa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2202      	movs	r2, #2
 8009df4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009df6:	2302      	movs	r3, #2
 8009df8:	e037      	b.n	8009e6a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e00:	f003 0320 	and.w	r3, r3, #32
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d005      	beq.n	8009e14 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009e10:	2320      	movs	r3, #32
 8009e12:	e02a      	b.n	8009e6a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e1c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	061a      	lsls	r2, r3, #24
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	0a1b      	lsrs	r3, r3, #8
 8009e30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	0e1b      	lsrs	r3, r3, #24
 8009e3a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3e:	601a      	str	r2, [r3, #0]
    scr++;
 8009e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e42:	3304      	adds	r3, #4
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	061a      	lsls	r2, r3, #24
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	0a1b      	lsrs	r3, r3, #8
 8009e58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	0e1b      	lsrs	r3, r3, #24
 8009e62:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e66:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	373c      	adds	r7, #60	; 0x3c
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd90      	pop	{r4, r7, pc}

08009e72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b082      	sub	sp, #8
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e041      	b.n	8009f08 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7f9 f8b5 	bl	8003008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f000 fc41 	bl	800a738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d001      	beq.n	8009f28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e046      	b.n	8009fb6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a23      	ldr	r2, [pc, #140]	; (8009fc4 <HAL_TIM_Base_Start+0xb4>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d022      	beq.n	8009f80 <HAL_TIM_Base_Start+0x70>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f42:	d01d      	beq.n	8009f80 <HAL_TIM_Base_Start+0x70>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a1f      	ldr	r2, [pc, #124]	; (8009fc8 <HAL_TIM_Base_Start+0xb8>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d018      	beq.n	8009f80 <HAL_TIM_Base_Start+0x70>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a1e      	ldr	r2, [pc, #120]	; (8009fcc <HAL_TIM_Base_Start+0xbc>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d013      	beq.n	8009f80 <HAL_TIM_Base_Start+0x70>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a1c      	ldr	r2, [pc, #112]	; (8009fd0 <HAL_TIM_Base_Start+0xc0>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d00e      	beq.n	8009f80 <HAL_TIM_Base_Start+0x70>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a1b      	ldr	r2, [pc, #108]	; (8009fd4 <HAL_TIM_Base_Start+0xc4>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d009      	beq.n	8009f80 <HAL_TIM_Base_Start+0x70>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a19      	ldr	r2, [pc, #100]	; (8009fd8 <HAL_TIM_Base_Start+0xc8>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d004      	beq.n	8009f80 <HAL_TIM_Base_Start+0x70>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a18      	ldr	r2, [pc, #96]	; (8009fdc <HAL_TIM_Base_Start+0xcc>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d111      	bne.n	8009fa4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b06      	cmp	r3, #6
 8009f90:	d010      	beq.n	8009fb4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f042 0201 	orr.w	r2, r2, #1
 8009fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fa2:	e007      	b.n	8009fb4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f042 0201 	orr.w	r2, r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	40010000 	.word	0x40010000
 8009fc8:	40000400 	.word	0x40000400
 8009fcc:	40000800 	.word	0x40000800
 8009fd0:	40000c00 	.word	0x40000c00
 8009fd4:	40010400 	.word	0x40010400
 8009fd8:	40014000 	.word	0x40014000
 8009fdc:	40001800 	.word	0x40001800

08009fe0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6a1a      	ldr	r2, [r3, #32]
 8009fee:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10f      	bne.n	800a018 <HAL_TIM_Base_Stop+0x38>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a1a      	ldr	r2, [r3, #32]
 8009ffe:	f240 4344 	movw	r3, #1092	; 0x444
 800a002:	4013      	ands	r3, r2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d107      	bne.n	800a018 <HAL_TIM_Base_Stop+0x38>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f022 0201 	bic.w	r2, r2, #1
 800a016:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b01      	cmp	r3, #1
 800a042:	d001      	beq.n	800a048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e04e      	b.n	800a0e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a23      	ldr	r2, [pc, #140]	; (800a0f4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d022      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x80>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a072:	d01d      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x80>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a1f      	ldr	r2, [pc, #124]	; (800a0f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d018      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x80>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a1e      	ldr	r2, [pc, #120]	; (800a0fc <HAL_TIM_Base_Start_IT+0xcc>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d013      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x80>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a1c      	ldr	r2, [pc, #112]	; (800a100 <HAL_TIM_Base_Start_IT+0xd0>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00e      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x80>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a1b      	ldr	r2, [pc, #108]	; (800a104 <HAL_TIM_Base_Start_IT+0xd4>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d009      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x80>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a19      	ldr	r2, [pc, #100]	; (800a108 <HAL_TIM_Base_Start_IT+0xd8>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d004      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x80>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a18      	ldr	r2, [pc, #96]	; (800a10c <HAL_TIM_Base_Start_IT+0xdc>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d111      	bne.n	800a0d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f003 0307 	and.w	r3, r3, #7
 800a0ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b06      	cmp	r3, #6
 800a0c0:	d010      	beq.n	800a0e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0201 	orr.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d2:	e007      	b.n	800a0e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0201 	orr.w	r2, r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	40010000 	.word	0x40010000
 800a0f8:	40000400 	.word	0x40000400
 800a0fc:	40000800 	.word	0x40000800
 800a100:	40000c00 	.word	0x40000c00
 800a104:	40010400 	.word	0x40010400
 800a108:	40014000 	.word	0x40014000
 800a10c:	40001800 	.word	0x40001800

0800a110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e041      	b.n	800a1a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f839 	bl	800a1ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2202      	movs	r2, #2
 800a140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4619      	mov	r1, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	f000 faf2 	bl	800a738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	f003 0302 	and.w	r3, r3, #2
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d122      	bne.n	800a21e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	f003 0302 	and.w	r3, r3, #2
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d11b      	bne.n	800a21e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f06f 0202 	mvn.w	r2, #2
 800a1ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	f003 0303 	and.w	r3, r3, #3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fa78 	bl	800a6fa <HAL_TIM_IC_CaptureCallback>
 800a20a:	e005      	b.n	800a218 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fa6a 	bl	800a6e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa7b 	bl	800a70e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d122      	bne.n	800a272 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	f003 0304 	and.w	r3, r3, #4
 800a236:	2b04      	cmp	r3, #4
 800a238:	d11b      	bne.n	800a272 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f06f 0204 	mvn.w	r2, #4
 800a242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a254:	2b00      	cmp	r3, #0
 800a256:	d003      	beq.n	800a260 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 fa4e 	bl	800a6fa <HAL_TIM_IC_CaptureCallback>
 800a25e:	e005      	b.n	800a26c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa40 	bl	800a6e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fa51 	bl	800a70e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	f003 0308 	and.w	r3, r3, #8
 800a27c:	2b08      	cmp	r3, #8
 800a27e:	d122      	bne.n	800a2c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f003 0308 	and.w	r3, r3, #8
 800a28a:	2b08      	cmp	r3, #8
 800a28c:	d11b      	bne.n	800a2c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f06f 0208 	mvn.w	r2, #8
 800a296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2204      	movs	r2, #4
 800a29c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	f003 0303 	and.w	r3, r3, #3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa24 	bl	800a6fa <HAL_TIM_IC_CaptureCallback>
 800a2b2:	e005      	b.n	800a2c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fa16 	bl	800a6e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fa27 	bl	800a70e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	f003 0310 	and.w	r3, r3, #16
 800a2d0:	2b10      	cmp	r3, #16
 800a2d2:	d122      	bne.n	800a31a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	f003 0310 	and.w	r3, r3, #16
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	d11b      	bne.n	800a31a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f06f 0210 	mvn.w	r2, #16
 800a2ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2208      	movs	r2, #8
 800a2f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f9fa 	bl	800a6fa <HAL_TIM_IC_CaptureCallback>
 800a306:	e005      	b.n	800a314 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f9ec 	bl	800a6e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f9fd 	bl	800a70e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b01      	cmp	r3, #1
 800a326:	d10e      	bne.n	800a346 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b01      	cmp	r3, #1
 800a334:	d107      	bne.n	800a346 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f06f 0201 	mvn.w	r2, #1
 800a33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7f8 f971 	bl	8002628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a350:	2b80      	cmp	r3, #128	; 0x80
 800a352:	d10e      	bne.n	800a372 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a35e:	2b80      	cmp	r3, #128	; 0x80
 800a360:	d107      	bne.n	800a372 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a36a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fda5 	bl	800aebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37c:	2b40      	cmp	r3, #64	; 0x40
 800a37e:	d10e      	bne.n	800a39e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38a:	2b40      	cmp	r3, #64	; 0x40
 800a38c:	d107      	bne.n	800a39e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f9c2 	bl	800a722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	f003 0320 	and.w	r3, r3, #32
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d10e      	bne.n	800a3ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	d107      	bne.n	800a3ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f06f 0220 	mvn.w	r2, #32
 800a3c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fd6f 	bl	800aea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3ca:	bf00      	nop
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	e0ae      	b.n	800a550 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b0c      	cmp	r3, #12
 800a3fe:	f200 809f 	bhi.w	800a540 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a402:	a201      	add	r2, pc, #4	; (adr r2, 800a408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a408:	0800a43d 	.word	0x0800a43d
 800a40c:	0800a541 	.word	0x0800a541
 800a410:	0800a541 	.word	0x0800a541
 800a414:	0800a541 	.word	0x0800a541
 800a418:	0800a47d 	.word	0x0800a47d
 800a41c:	0800a541 	.word	0x0800a541
 800a420:	0800a541 	.word	0x0800a541
 800a424:	0800a541 	.word	0x0800a541
 800a428:	0800a4bf 	.word	0x0800a4bf
 800a42c:	0800a541 	.word	0x0800a541
 800a430:	0800a541 	.word	0x0800a541
 800a434:	0800a541 	.word	0x0800a541
 800a438:	0800a4ff 	.word	0x0800a4ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68b9      	ldr	r1, [r7, #8]
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fa18 	bl	800a878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699a      	ldr	r2, [r3, #24]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f042 0208 	orr.w	r2, r2, #8
 800a456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	699a      	ldr	r2, [r3, #24]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0204 	bic.w	r2, r2, #4
 800a466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6999      	ldr	r1, [r3, #24]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	691a      	ldr	r2, [r3, #16]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	430a      	orrs	r2, r1
 800a478:	619a      	str	r2, [r3, #24]
      break;
 800a47a:	e064      	b.n	800a546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68b9      	ldr	r1, [r7, #8]
 800a482:	4618      	mov	r0, r3
 800a484:	f000 fa68 	bl	800a958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699a      	ldr	r2, [r3, #24]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6999      	ldr	r1, [r3, #24]
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	021a      	lsls	r2, r3, #8
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	619a      	str	r2, [r3, #24]
      break;
 800a4bc:	e043      	b.n	800a546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 fabd 	bl	800aa44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69da      	ldr	r2, [r3, #28]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0208 	orr.w	r2, r2, #8
 800a4d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	69da      	ldr	r2, [r3, #28]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f022 0204 	bic.w	r2, r2, #4
 800a4e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69d9      	ldr	r1, [r3, #28]
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	691a      	ldr	r2, [r3, #16]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	61da      	str	r2, [r3, #28]
      break;
 800a4fc:	e023      	b.n	800a546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68b9      	ldr	r1, [r7, #8]
 800a504:	4618      	mov	r0, r3
 800a506:	f000 fb11 	bl	800ab2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69da      	ldr	r2, [r3, #28]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69da      	ldr	r2, [r3, #28]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	69d9      	ldr	r1, [r3, #28]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	021a      	lsls	r2, r3, #8
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	61da      	str	r2, [r3, #28]
      break;
 800a53e:	e002      	b.n	800a546 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	75fb      	strb	r3, [r7, #23]
      break;
 800a544:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d101      	bne.n	800a574 <HAL_TIM_ConfigClockSource+0x1c>
 800a570:	2302      	movs	r3, #2
 800a572:	e0b4      	b.n	800a6de <HAL_TIM_ConfigClockSource+0x186>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a59a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ac:	d03e      	beq.n	800a62c <HAL_TIM_ConfigClockSource+0xd4>
 800a5ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5b2:	f200 8087 	bhi.w	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ba:	f000 8086 	beq.w	800a6ca <HAL_TIM_ConfigClockSource+0x172>
 800a5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c2:	d87f      	bhi.n	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5c4:	2b70      	cmp	r3, #112	; 0x70
 800a5c6:	d01a      	beq.n	800a5fe <HAL_TIM_ConfigClockSource+0xa6>
 800a5c8:	2b70      	cmp	r3, #112	; 0x70
 800a5ca:	d87b      	bhi.n	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5cc:	2b60      	cmp	r3, #96	; 0x60
 800a5ce:	d050      	beq.n	800a672 <HAL_TIM_ConfigClockSource+0x11a>
 800a5d0:	2b60      	cmp	r3, #96	; 0x60
 800a5d2:	d877      	bhi.n	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5d4:	2b50      	cmp	r3, #80	; 0x50
 800a5d6:	d03c      	beq.n	800a652 <HAL_TIM_ConfigClockSource+0xfa>
 800a5d8:	2b50      	cmp	r3, #80	; 0x50
 800a5da:	d873      	bhi.n	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5dc:	2b40      	cmp	r3, #64	; 0x40
 800a5de:	d058      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x13a>
 800a5e0:	2b40      	cmp	r3, #64	; 0x40
 800a5e2:	d86f      	bhi.n	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5e4:	2b30      	cmp	r3, #48	; 0x30
 800a5e6:	d064      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a5e8:	2b30      	cmp	r3, #48	; 0x30
 800a5ea:	d86b      	bhi.n	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5ec:	2b20      	cmp	r3, #32
 800a5ee:	d060      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a5f0:	2b20      	cmp	r3, #32
 800a5f2:	d867      	bhi.n	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d05c      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a5f8:	2b10      	cmp	r3, #16
 800a5fa:	d05a      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a5fc:	e062      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	6899      	ldr	r1, [r3, #8]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	f000 fb5d 	bl	800accc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	609a      	str	r2, [r3, #8]
      break;
 800a62a:	e04f      	b.n	800a6cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6818      	ldr	r0, [r3, #0]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	6899      	ldr	r1, [r3, #8]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f000 fb46 	bl	800accc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689a      	ldr	r2, [r3, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a64e:	609a      	str	r2, [r3, #8]
      break;
 800a650:	e03c      	b.n	800a6cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	6859      	ldr	r1, [r3, #4]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	461a      	mov	r2, r3
 800a660:	f000 faba 	bl	800abd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2150      	movs	r1, #80	; 0x50
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 fb13 	bl	800ac96 <TIM_ITRx_SetConfig>
      break;
 800a670:	e02c      	b.n	800a6cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6859      	ldr	r1, [r3, #4]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	461a      	mov	r2, r3
 800a680:	f000 fad9 	bl	800ac36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2160      	movs	r1, #96	; 0x60
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fb03 	bl	800ac96 <TIM_ITRx_SetConfig>
      break;
 800a690:	e01c      	b.n	800a6cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6859      	ldr	r1, [r3, #4]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f000 fa9a 	bl	800abd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2140      	movs	r1, #64	; 0x40
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 faf3 	bl	800ac96 <TIM_ITRx_SetConfig>
      break;
 800a6b0:	e00c      	b.n	800a6cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4610      	mov	r0, r2
 800a6be:	f000 faea 	bl	800ac96 <TIM_ITRx_SetConfig>
      break;
 800a6c2:	e003      	b.n	800a6cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c8:	e000      	b.n	800a6cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b083      	sub	sp, #12
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6ee:	bf00      	nop
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a72a:	bf00      	nop
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
	...

0800a738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a40      	ldr	r2, [pc, #256]	; (800a84c <TIM_Base_SetConfig+0x114>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d013      	beq.n	800a778 <TIM_Base_SetConfig+0x40>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a756:	d00f      	beq.n	800a778 <TIM_Base_SetConfig+0x40>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a3d      	ldr	r2, [pc, #244]	; (800a850 <TIM_Base_SetConfig+0x118>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d00b      	beq.n	800a778 <TIM_Base_SetConfig+0x40>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a3c      	ldr	r2, [pc, #240]	; (800a854 <TIM_Base_SetConfig+0x11c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d007      	beq.n	800a778 <TIM_Base_SetConfig+0x40>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a3b      	ldr	r2, [pc, #236]	; (800a858 <TIM_Base_SetConfig+0x120>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d003      	beq.n	800a778 <TIM_Base_SetConfig+0x40>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a3a      	ldr	r2, [pc, #232]	; (800a85c <TIM_Base_SetConfig+0x124>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d108      	bne.n	800a78a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a2f      	ldr	r2, [pc, #188]	; (800a84c <TIM_Base_SetConfig+0x114>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d02b      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a798:	d027      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a2c      	ldr	r2, [pc, #176]	; (800a850 <TIM_Base_SetConfig+0x118>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d023      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a2b      	ldr	r2, [pc, #172]	; (800a854 <TIM_Base_SetConfig+0x11c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d01f      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2a      	ldr	r2, [pc, #168]	; (800a858 <TIM_Base_SetConfig+0x120>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d01b      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a29      	ldr	r2, [pc, #164]	; (800a85c <TIM_Base_SetConfig+0x124>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d017      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a28      	ldr	r2, [pc, #160]	; (800a860 <TIM_Base_SetConfig+0x128>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d013      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a27      	ldr	r2, [pc, #156]	; (800a864 <TIM_Base_SetConfig+0x12c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d00f      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a26      	ldr	r2, [pc, #152]	; (800a868 <TIM_Base_SetConfig+0x130>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d00b      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a25      	ldr	r2, [pc, #148]	; (800a86c <TIM_Base_SetConfig+0x134>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d007      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a24      	ldr	r2, [pc, #144]	; (800a870 <TIM_Base_SetConfig+0x138>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d003      	beq.n	800a7ea <TIM_Base_SetConfig+0xb2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a23      	ldr	r2, [pc, #140]	; (800a874 <TIM_Base_SetConfig+0x13c>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d108      	bne.n	800a7fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	689a      	ldr	r2, [r3, #8]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a0a      	ldr	r2, [pc, #40]	; (800a84c <TIM_Base_SetConfig+0x114>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d003      	beq.n	800a830 <TIM_Base_SetConfig+0xf8>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a0c      	ldr	r2, [pc, #48]	; (800a85c <TIM_Base_SetConfig+0x124>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d103      	bne.n	800a838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	691a      	ldr	r2, [r3, #16]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	615a      	str	r2, [r3, #20]
}
 800a83e:	bf00      	nop
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40010000 	.word	0x40010000
 800a850:	40000400 	.word	0x40000400
 800a854:	40000800 	.word	0x40000800
 800a858:	40000c00 	.word	0x40000c00
 800a85c:	40010400 	.word	0x40010400
 800a860:	40014000 	.word	0x40014000
 800a864:	40014400 	.word	0x40014400
 800a868:	40014800 	.word	0x40014800
 800a86c:	40001800 	.word	0x40001800
 800a870:	40001c00 	.word	0x40001c00
 800a874:	40002000 	.word	0x40002000

0800a878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	f023 0201 	bic.w	r2, r3, #1
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0303 	bic.w	r3, r3, #3
 800a8ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f023 0302 	bic.w	r3, r3, #2
 800a8c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a20      	ldr	r2, [pc, #128]	; (800a950 <TIM_OC1_SetConfig+0xd8>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d003      	beq.n	800a8dc <TIM_OC1_SetConfig+0x64>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a1f      	ldr	r2, [pc, #124]	; (800a954 <TIM_OC1_SetConfig+0xdc>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d10c      	bne.n	800a8f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f023 0308 	bic.w	r3, r3, #8
 800a8e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f023 0304 	bic.w	r3, r3, #4
 800a8f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a15      	ldr	r2, [pc, #84]	; (800a950 <TIM_OC1_SetConfig+0xd8>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d003      	beq.n	800a906 <TIM_OC1_SetConfig+0x8e>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a14      	ldr	r2, [pc, #80]	; (800a954 <TIM_OC1_SetConfig+0xdc>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d111      	bne.n	800a92a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a90c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	4313      	orrs	r3, r2
 800a928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	621a      	str	r2, [r3, #32]
}
 800a944:	bf00      	nop
 800a946:	371c      	adds	r7, #28
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	40010000 	.word	0x40010000
 800a954:	40010400 	.word	0x40010400

0800a958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a958:	b480      	push	{r7}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	f023 0210 	bic.w	r2, r3, #16
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	021b      	lsls	r3, r3, #8
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f023 0320 	bic.w	r3, r3, #32
 800a9a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	011b      	lsls	r3, r3, #4
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a22      	ldr	r2, [pc, #136]	; (800aa3c <TIM_OC2_SetConfig+0xe4>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d003      	beq.n	800a9c0 <TIM_OC2_SetConfig+0x68>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a21      	ldr	r2, [pc, #132]	; (800aa40 <TIM_OC2_SetConfig+0xe8>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d10d      	bne.n	800a9dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a17      	ldr	r2, [pc, #92]	; (800aa3c <TIM_OC2_SetConfig+0xe4>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d003      	beq.n	800a9ec <TIM_OC2_SetConfig+0x94>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a16      	ldr	r2, [pc, #88]	; (800aa40 <TIM_OC2_SetConfig+0xe8>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d113      	bne.n	800aa14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	621a      	str	r2, [r3, #32]
}
 800aa2e:	bf00      	nop
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	40010000 	.word	0x40010000
 800aa40:	40010400 	.word	0x40010400

0800aa44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f023 0303 	bic.w	r3, r3, #3
 800aa7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	021b      	lsls	r3, r3, #8
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a21      	ldr	r2, [pc, #132]	; (800ab24 <TIM_OC3_SetConfig+0xe0>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d003      	beq.n	800aaaa <TIM_OC3_SetConfig+0x66>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a20      	ldr	r2, [pc, #128]	; (800ab28 <TIM_OC3_SetConfig+0xe4>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d10d      	bne.n	800aac6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	021b      	lsls	r3, r3, #8
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a16      	ldr	r2, [pc, #88]	; (800ab24 <TIM_OC3_SetConfig+0xe0>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d003      	beq.n	800aad6 <TIM_OC3_SetConfig+0x92>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a15      	ldr	r2, [pc, #84]	; (800ab28 <TIM_OC3_SetConfig+0xe4>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d113      	bne.n	800aafe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aadc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	011b      	lsls	r3, r3, #4
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	621a      	str	r2, [r3, #32]
}
 800ab18:	bf00      	nop
 800ab1a:	371c      	adds	r7, #28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	40010000 	.word	0x40010000
 800ab28:	40010400 	.word	0x40010400

0800ab2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	021b      	lsls	r3, r3, #8
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	031b      	lsls	r3, r3, #12
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a12      	ldr	r2, [pc, #72]	; (800abd0 <TIM_OC4_SetConfig+0xa4>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d003      	beq.n	800ab94 <TIM_OC4_SetConfig+0x68>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a11      	ldr	r2, [pc, #68]	; (800abd4 <TIM_OC4_SetConfig+0xa8>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d109      	bne.n	800aba8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	019b      	lsls	r3, r3, #6
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	621a      	str	r2, [r3, #32]
}
 800abc2:	bf00      	nop
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	40010000 	.word	0x40010000
 800abd4:	40010400 	.word	0x40010400

0800abd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	f023 0201 	bic.w	r2, r3, #1
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f023 030a 	bic.w	r3, r3, #10
 800ac14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	621a      	str	r2, [r3, #32]
}
 800ac2a:	bf00      	nop
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b087      	sub	sp, #28
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	60f8      	str	r0, [r7, #12]
 800ac3e:	60b9      	str	r1, [r7, #8]
 800ac40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	f023 0210 	bic.w	r2, r3, #16
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	031b      	lsls	r3, r3, #12
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	621a      	str	r2, [r3, #32]
}
 800ac8a:	bf00      	nop
 800ac8c:	371c      	adds	r7, #28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	f043 0307 	orr.w	r3, r3, #7
 800acb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	609a      	str	r2, [r3, #8]
}
 800acc0:	bf00      	nop
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800accc:	b480      	push	{r7}
 800acce:	b087      	sub	sp, #28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ace6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	021a      	lsls	r2, r3, #8
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	431a      	orrs	r2, r3
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	609a      	str	r2, [r3, #8]
}
 800ad00:	bf00      	nop
 800ad02:	371c      	adds	r7, #28
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d101      	bne.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad20:	2302      	movs	r3, #2
 800ad22:	e05a      	b.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a21      	ldr	r2, [pc, #132]	; (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d022      	beq.n	800adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad70:	d01d      	beq.n	800adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a1d      	ldr	r2, [pc, #116]	; (800adec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d018      	beq.n	800adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a1b      	ldr	r2, [pc, #108]	; (800adf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d013      	beq.n	800adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a1a      	ldr	r2, [pc, #104]	; (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d00e      	beq.n	800adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a18      	ldr	r2, [pc, #96]	; (800adf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d009      	beq.n	800adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a17      	ldr	r2, [pc, #92]	; (800adfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d004      	beq.n	800adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a15      	ldr	r2, [pc, #84]	; (800ae00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d10c      	bne.n	800adc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	68ba      	ldr	r2, [r7, #8]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	40010000 	.word	0x40010000
 800adec:	40000400 	.word	0x40000400
 800adf0:	40000800 	.word	0x40000800
 800adf4:	40000c00 	.word	0x40000c00
 800adf8:	40010400 	.word	0x40010400
 800adfc:	40014000 	.word	0x40014000
 800ae00:	40001800 	.word	0x40001800

0800ae04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d101      	bne.n	800ae20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	e03d      	b.n	800ae9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e03f      	b.n	800af62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d106      	bne.n	800aefc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7f8 fc06 	bl	8003708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2224      	movs	r2, #36	; 0x24
 800af00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68da      	ldr	r2, [r3, #12]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f829 	bl	800af6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	691a      	ldr	r2, [r3, #16]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	695a      	ldr	r2, [r3, #20]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68da      	ldr	r2, [r3, #12]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2220      	movs	r2, #32
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af70:	b0c0      	sub	sp, #256	; 0x100
 800af72:	af00      	add	r7, sp, #0
 800af74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af88:	68d9      	ldr	r1, [r3, #12]
 800af8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	ea40 0301 	orr.w	r3, r0, r1
 800af94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	431a      	orrs	r2, r3
 800afa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	431a      	orrs	r2, r3
 800afac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800afb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800afc4:	f021 010c 	bic.w	r1, r1, #12
 800afc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800afd2:	430b      	orrs	r3, r1
 800afd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800afe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe6:	6999      	ldr	r1, [r3, #24]
 800afe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	ea40 0301 	orr.w	r3, r0, r1
 800aff2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b8f      	ldr	r3, [pc, #572]	; (800b238 <UART_SetConfig+0x2cc>)
 800affc:	429a      	cmp	r2, r3
 800affe:	d005      	beq.n	800b00c <UART_SetConfig+0xa0>
 800b000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	4b8d      	ldr	r3, [pc, #564]	; (800b23c <UART_SetConfig+0x2d0>)
 800b008:	429a      	cmp	r2, r3
 800b00a:	d104      	bne.n	800b016 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b00c:	f7fc fafc 	bl	8007608 <HAL_RCC_GetPCLK2Freq>
 800b010:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b014:	e003      	b.n	800b01e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b016:	f7fc fae3 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 800b01a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b022:	69db      	ldr	r3, [r3, #28]
 800b024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b028:	f040 810c 	bne.w	800b244 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b02c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b030:	2200      	movs	r2, #0
 800b032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b036:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b03a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b03e:	4622      	mov	r2, r4
 800b040:	462b      	mov	r3, r5
 800b042:	1891      	adds	r1, r2, r2
 800b044:	65b9      	str	r1, [r7, #88]	; 0x58
 800b046:	415b      	adcs	r3, r3
 800b048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b04a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b04e:	4621      	mov	r1, r4
 800b050:	eb12 0801 	adds.w	r8, r2, r1
 800b054:	4629      	mov	r1, r5
 800b056:	eb43 0901 	adc.w	r9, r3, r1
 800b05a:	f04f 0200 	mov.w	r2, #0
 800b05e:	f04f 0300 	mov.w	r3, #0
 800b062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b06a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b06e:	4690      	mov	r8, r2
 800b070:	4699      	mov	r9, r3
 800b072:	4623      	mov	r3, r4
 800b074:	eb18 0303 	adds.w	r3, r8, r3
 800b078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b07c:	462b      	mov	r3, r5
 800b07e:	eb49 0303 	adc.w	r3, r9, r3
 800b082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b092:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b09a:	460b      	mov	r3, r1
 800b09c:	18db      	adds	r3, r3, r3
 800b09e:	653b      	str	r3, [r7, #80]	; 0x50
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	eb42 0303 	adc.w	r3, r2, r3
 800b0a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b0a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b0ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b0b0:	f7f5 fdfa 	bl	8000ca8 <__aeabi_uldivmod>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4b61      	ldr	r3, [pc, #388]	; (800b240 <UART_SetConfig+0x2d4>)
 800b0ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b0be:	095b      	lsrs	r3, r3, #5
 800b0c0:	011c      	lsls	r4, r3, #4
 800b0c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b0d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	464b      	mov	r3, r9
 800b0d8:	1891      	adds	r1, r2, r2
 800b0da:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0dc:	415b      	adcs	r3, r3
 800b0de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b0e4:	4641      	mov	r1, r8
 800b0e6:	eb12 0a01 	adds.w	sl, r2, r1
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	eb43 0b01 	adc.w	fp, r3, r1
 800b0f0:	f04f 0200 	mov.w	r2, #0
 800b0f4:	f04f 0300 	mov.w	r3, #0
 800b0f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b104:	4692      	mov	sl, r2
 800b106:	469b      	mov	fp, r3
 800b108:	4643      	mov	r3, r8
 800b10a:	eb1a 0303 	adds.w	r3, sl, r3
 800b10e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b112:	464b      	mov	r3, r9
 800b114:	eb4b 0303 	adc.w	r3, fp, r3
 800b118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b128:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b12c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b130:	460b      	mov	r3, r1
 800b132:	18db      	adds	r3, r3, r3
 800b134:	643b      	str	r3, [r7, #64]	; 0x40
 800b136:	4613      	mov	r3, r2
 800b138:	eb42 0303 	adc.w	r3, r2, r3
 800b13c:	647b      	str	r3, [r7, #68]	; 0x44
 800b13e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b142:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b146:	f7f5 fdaf 	bl	8000ca8 <__aeabi_uldivmod>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4611      	mov	r1, r2
 800b150:	4b3b      	ldr	r3, [pc, #236]	; (800b240 <UART_SetConfig+0x2d4>)
 800b152:	fba3 2301 	umull	r2, r3, r3, r1
 800b156:	095b      	lsrs	r3, r3, #5
 800b158:	2264      	movs	r2, #100	; 0x64
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
 800b15e:	1acb      	subs	r3, r1, r3
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b166:	4b36      	ldr	r3, [pc, #216]	; (800b240 <UART_SetConfig+0x2d4>)
 800b168:	fba3 2302 	umull	r2, r3, r3, r2
 800b16c:	095b      	lsrs	r3, r3, #5
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b174:	441c      	add	r4, r3
 800b176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b180:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b184:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b188:	4642      	mov	r2, r8
 800b18a:	464b      	mov	r3, r9
 800b18c:	1891      	adds	r1, r2, r2
 800b18e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b190:	415b      	adcs	r3, r3
 800b192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b198:	4641      	mov	r1, r8
 800b19a:	1851      	adds	r1, r2, r1
 800b19c:	6339      	str	r1, [r7, #48]	; 0x30
 800b19e:	4649      	mov	r1, r9
 800b1a0:	414b      	adcs	r3, r1
 800b1a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a4:	f04f 0200 	mov.w	r2, #0
 800b1a8:	f04f 0300 	mov.w	r3, #0
 800b1ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b1b0:	4659      	mov	r1, fp
 800b1b2:	00cb      	lsls	r3, r1, #3
 800b1b4:	4651      	mov	r1, sl
 800b1b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ba:	4651      	mov	r1, sl
 800b1bc:	00ca      	lsls	r2, r1, #3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	4642      	mov	r2, r8
 800b1c6:	189b      	adds	r3, r3, r2
 800b1c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1cc:	464b      	mov	r3, r9
 800b1ce:	460a      	mov	r2, r1
 800b1d0:	eb42 0303 	adc.w	r3, r2, r3
 800b1d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b1e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	18db      	adds	r3, r3, r3
 800b1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	eb42 0303 	adc.w	r3, r2, r3
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b202:	f7f5 fd51 	bl	8000ca8 <__aeabi_uldivmod>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	4b0d      	ldr	r3, [pc, #52]	; (800b240 <UART_SetConfig+0x2d4>)
 800b20c:	fba3 1302 	umull	r1, r3, r3, r2
 800b210:	095b      	lsrs	r3, r3, #5
 800b212:	2164      	movs	r1, #100	; 0x64
 800b214:	fb01 f303 	mul.w	r3, r1, r3
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	3332      	adds	r3, #50	; 0x32
 800b21e:	4a08      	ldr	r2, [pc, #32]	; (800b240 <UART_SetConfig+0x2d4>)
 800b220:	fba2 2303 	umull	r2, r3, r2, r3
 800b224:	095b      	lsrs	r3, r3, #5
 800b226:	f003 0207 	and.w	r2, r3, #7
 800b22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4422      	add	r2, r4
 800b232:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b234:	e106      	b.n	800b444 <UART_SetConfig+0x4d8>
 800b236:	bf00      	nop
 800b238:	40011000 	.word	0x40011000
 800b23c:	40011400 	.word	0x40011400
 800b240:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b24e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b252:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b256:	4642      	mov	r2, r8
 800b258:	464b      	mov	r3, r9
 800b25a:	1891      	adds	r1, r2, r2
 800b25c:	6239      	str	r1, [r7, #32]
 800b25e:	415b      	adcs	r3, r3
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
 800b262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b266:	4641      	mov	r1, r8
 800b268:	1854      	adds	r4, r2, r1
 800b26a:	4649      	mov	r1, r9
 800b26c:	eb43 0501 	adc.w	r5, r3, r1
 800b270:	f04f 0200 	mov.w	r2, #0
 800b274:	f04f 0300 	mov.w	r3, #0
 800b278:	00eb      	lsls	r3, r5, #3
 800b27a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b27e:	00e2      	lsls	r2, r4, #3
 800b280:	4614      	mov	r4, r2
 800b282:	461d      	mov	r5, r3
 800b284:	4643      	mov	r3, r8
 800b286:	18e3      	adds	r3, r4, r3
 800b288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b28c:	464b      	mov	r3, r9
 800b28e:	eb45 0303 	adc.w	r3, r5, r3
 800b292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b2a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b2a6:	f04f 0200 	mov.w	r2, #0
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	008b      	lsls	r3, r1, #2
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2bc:	4621      	mov	r1, r4
 800b2be:	008a      	lsls	r2, r1, #2
 800b2c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b2c4:	f7f5 fcf0 	bl	8000ca8 <__aeabi_uldivmod>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4b60      	ldr	r3, [pc, #384]	; (800b450 <UART_SetConfig+0x4e4>)
 800b2ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b2d2:	095b      	lsrs	r3, r3, #5
 800b2d4:	011c      	lsls	r4, r3, #4
 800b2d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b2e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	464b      	mov	r3, r9
 800b2ec:	1891      	adds	r1, r2, r2
 800b2ee:	61b9      	str	r1, [r7, #24]
 800b2f0:	415b      	adcs	r3, r3
 800b2f2:	61fb      	str	r3, [r7, #28]
 800b2f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	1851      	adds	r1, r2, r1
 800b2fc:	6139      	str	r1, [r7, #16]
 800b2fe:	4649      	mov	r1, r9
 800b300:	414b      	adcs	r3, r1
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	f04f 0200 	mov.w	r2, #0
 800b308:	f04f 0300 	mov.w	r3, #0
 800b30c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b310:	4659      	mov	r1, fp
 800b312:	00cb      	lsls	r3, r1, #3
 800b314:	4651      	mov	r1, sl
 800b316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b31a:	4651      	mov	r1, sl
 800b31c:	00ca      	lsls	r2, r1, #3
 800b31e:	4610      	mov	r0, r2
 800b320:	4619      	mov	r1, r3
 800b322:	4603      	mov	r3, r0
 800b324:	4642      	mov	r2, r8
 800b326:	189b      	adds	r3, r3, r2
 800b328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b32c:	464b      	mov	r3, r9
 800b32e:	460a      	mov	r2, r1
 800b330:	eb42 0303 	adc.w	r3, r2, r3
 800b334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	67bb      	str	r3, [r7, #120]	; 0x78
 800b342:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b344:	f04f 0200 	mov.w	r2, #0
 800b348:	f04f 0300 	mov.w	r3, #0
 800b34c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b350:	4649      	mov	r1, r9
 800b352:	008b      	lsls	r3, r1, #2
 800b354:	4641      	mov	r1, r8
 800b356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b35a:	4641      	mov	r1, r8
 800b35c:	008a      	lsls	r2, r1, #2
 800b35e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b362:	f7f5 fca1 	bl	8000ca8 <__aeabi_uldivmod>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4611      	mov	r1, r2
 800b36c:	4b38      	ldr	r3, [pc, #224]	; (800b450 <UART_SetConfig+0x4e4>)
 800b36e:	fba3 2301 	umull	r2, r3, r3, r1
 800b372:	095b      	lsrs	r3, r3, #5
 800b374:	2264      	movs	r2, #100	; 0x64
 800b376:	fb02 f303 	mul.w	r3, r2, r3
 800b37a:	1acb      	subs	r3, r1, r3
 800b37c:	011b      	lsls	r3, r3, #4
 800b37e:	3332      	adds	r3, #50	; 0x32
 800b380:	4a33      	ldr	r2, [pc, #204]	; (800b450 <UART_SetConfig+0x4e4>)
 800b382:	fba2 2303 	umull	r2, r3, r2, r3
 800b386:	095b      	lsrs	r3, r3, #5
 800b388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b38c:	441c      	add	r4, r3
 800b38e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b392:	2200      	movs	r2, #0
 800b394:	673b      	str	r3, [r7, #112]	; 0x70
 800b396:	677a      	str	r2, [r7, #116]	; 0x74
 800b398:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	1891      	adds	r1, r2, r2
 800b3a2:	60b9      	str	r1, [r7, #8]
 800b3a4:	415b      	adcs	r3, r3
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3ac:	4641      	mov	r1, r8
 800b3ae:	1851      	adds	r1, r2, r1
 800b3b0:	6039      	str	r1, [r7, #0]
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	414b      	adcs	r3, r1
 800b3b6:	607b      	str	r3, [r7, #4]
 800b3b8:	f04f 0200 	mov.w	r2, #0
 800b3bc:	f04f 0300 	mov.w	r3, #0
 800b3c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b3c4:	4659      	mov	r1, fp
 800b3c6:	00cb      	lsls	r3, r1, #3
 800b3c8:	4651      	mov	r1, sl
 800b3ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3ce:	4651      	mov	r1, sl
 800b3d0:	00ca      	lsls	r2, r1, #3
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4642      	mov	r2, r8
 800b3da:	189b      	adds	r3, r3, r2
 800b3dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3de:	464b      	mov	r3, r9
 800b3e0:	460a      	mov	r2, r1
 800b3e2:	eb42 0303 	adc.w	r3, r2, r3
 800b3e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	663b      	str	r3, [r7, #96]	; 0x60
 800b3f2:	667a      	str	r2, [r7, #100]	; 0x64
 800b3f4:	f04f 0200 	mov.w	r2, #0
 800b3f8:	f04f 0300 	mov.w	r3, #0
 800b3fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b400:	4649      	mov	r1, r9
 800b402:	008b      	lsls	r3, r1, #2
 800b404:	4641      	mov	r1, r8
 800b406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b40a:	4641      	mov	r1, r8
 800b40c:	008a      	lsls	r2, r1, #2
 800b40e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b412:	f7f5 fc49 	bl	8000ca8 <__aeabi_uldivmod>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	4b0d      	ldr	r3, [pc, #52]	; (800b450 <UART_SetConfig+0x4e4>)
 800b41c:	fba3 1302 	umull	r1, r3, r3, r2
 800b420:	095b      	lsrs	r3, r3, #5
 800b422:	2164      	movs	r1, #100	; 0x64
 800b424:	fb01 f303 	mul.w	r3, r1, r3
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	011b      	lsls	r3, r3, #4
 800b42c:	3332      	adds	r3, #50	; 0x32
 800b42e:	4a08      	ldr	r2, [pc, #32]	; (800b450 <UART_SetConfig+0x4e4>)
 800b430:	fba2 2303 	umull	r2, r3, r2, r3
 800b434:	095b      	lsrs	r3, r3, #5
 800b436:	f003 020f 	and.w	r2, r3, #15
 800b43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4422      	add	r2, r4
 800b442:	609a      	str	r2, [r3, #8]
}
 800b444:	bf00      	nop
 800b446:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b44a:	46bd      	mov	sp, r7
 800b44c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b450:	51eb851f 	.word	0x51eb851f

0800b454 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b454:	b084      	sub	sp, #16
 800b456:	b480      	push	{r7}
 800b458:	b085      	sub	sp, #20
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	f107 001c 	add.w	r0, r7, #28
 800b462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b46a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b46c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b46e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b472:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b476:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b47a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b47e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	4313      	orrs	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b48e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	431a      	orrs	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	b004      	add	sp, #16
 800b4a8:	4770      	bx	lr

0800b4aa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b083      	sub	sp, #12
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b4e6:	b480      	push	{r7}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2203      	movs	r2, #3
 800b4f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0303 	and.w	r3, r3, #3
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b51e:	b480      	push	{r7}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b53c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b542:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b548:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b558:	f023 030f 	bic.w	r3, r3, #15
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	431a      	orrs	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	b2db      	uxtb	r3, r3
}
 800b580:	4618      	mov	r0, r3
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3314      	adds	r3, #20
 800b59a:	461a      	mov	r2, r3
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	4413      	add	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
}  
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b085      	sub	sp, #20
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5d8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b5de:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b5e4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0

}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b088      	sub	sp, #32
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b618:	2310      	movs	r3, #16
 800b61a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b61c:	2340      	movs	r3, #64	; 0x40
 800b61e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b620:	2300      	movs	r3, #0
 800b622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b628:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b62a:	f107 0308 	add.w	r3, r7, #8
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff ff74 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b636:	f241 3288 	movw	r2, #5000	; 0x1388
 800b63a:	2110      	movs	r1, #16
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 fa19 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b644:	69fb      	ldr	r3, [r7, #28]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3720      	adds	r7, #32
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b088      	sub	sp, #32
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b65c:	2311      	movs	r3, #17
 800b65e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b660:	2340      	movs	r3, #64	; 0x40
 800b662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b664:	2300      	movs	r3, #0
 800b666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b66c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b66e:	f107 0308 	add.w	r3, r7, #8
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff ff52 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b67e:	2111      	movs	r1, #17
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f9f7 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b688:	69fb      	ldr	r3, [r7, #28]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b088      	sub	sp, #32
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b6a0:	2312      	movs	r3, #18
 800b6a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6a4:	2340      	movs	r3, #64	; 0x40
 800b6a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6b2:	f107 0308 	add.w	r3, r7, #8
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff ff30 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b6be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c2:	2112      	movs	r1, #18
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f9d5 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b6ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3720      	adds	r7, #32
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b088      	sub	sp, #32
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b6e4:	2318      	movs	r3, #24
 800b6e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6e8:	2340      	movs	r3, #64	; 0x40
 800b6ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6f6:	f107 0308 	add.w	r3, r7, #8
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff ff0e 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b702:	f241 3288 	movw	r2, #5000	; 0x1388
 800b706:	2118      	movs	r1, #24
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f9b3 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b70e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b710:	69fb      	ldr	r3, [r7, #28]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3720      	adds	r7, #32
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b088      	sub	sp, #32
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b728:	2319      	movs	r3, #25
 800b72a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b72c:	2340      	movs	r3, #64	; 0x40
 800b72e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b730:	2300      	movs	r3, #0
 800b732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b738:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b73a:	f107 0308 	add.w	r3, r7, #8
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7ff feec 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b746:	f241 3288 	movw	r2, #5000	; 0x1388
 800b74a:	2119      	movs	r1, #25
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f991 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b754:	69fb      	ldr	r3, [r7, #28]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b768:	2300      	movs	r3, #0
 800b76a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b76c:	230c      	movs	r3, #12
 800b76e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b770:	2340      	movs	r3, #64	; 0x40
 800b772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b774:	2300      	movs	r3, #0
 800b776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b77c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b77e:	f107 0308 	add.w	r3, r7, #8
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7ff feca 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b78a:	4a05      	ldr	r2, [pc, #20]	; (800b7a0 <SDMMC_CmdStopTransfer+0x40>)
 800b78c:	210c      	movs	r1, #12
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f970 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b796:	69fb      	ldr	r3, [r7, #28]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3720      	adds	r7, #32
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	05f5e100 	.word	0x05f5e100

0800b7a4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08a      	sub	sp, #40	; 0x28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b7b4:	2307      	movs	r3, #7
 800b7b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7b8:	2340      	movs	r3, #64	; 0x40
 800b7ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7c6:	f107 0310 	add.w	r3, r7, #16
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f7ff fea6 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b7d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7d6:	2107      	movs	r1, #7
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f000 f94b 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b7de:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3728      	adds	r7, #40	; 0x28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b088      	sub	sp, #32
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7fe:	2300      	movs	r3, #0
 800b800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b808:	f107 0308 	add.w	r3, r7, #8
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff fe85 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fb65 	bl	800bee4 <SDMMC_GetCmdError>
 800b81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b81c:	69fb      	ldr	r3, [r7, #28]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3720      	adds	r7, #32
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b088      	sub	sp, #32
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b82e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b834:	2308      	movs	r3, #8
 800b836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b838:	2340      	movs	r3, #64	; 0x40
 800b83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b83c:	2300      	movs	r3, #0
 800b83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b844:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b846:	f107 0308 	add.w	r3, r7, #8
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7ff fe66 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 faf8 	bl	800be48 <SDMMC_GetCmdResp7>
 800b858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b85a:	69fb      	ldr	r3, [r7, #28]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3720      	adds	r7, #32
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b872:	2337      	movs	r3, #55	; 0x37
 800b874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b876:	2340      	movs	r3, #64	; 0x40
 800b878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b87a:	2300      	movs	r3, #0
 800b87c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b87e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b882:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b884:	f107 0308 	add.w	r3, r7, #8
 800b888:	4619      	mov	r1, r3
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff fe47 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b890:	f241 3288 	movw	r2, #5000	; 0x1388
 800b894:	2137      	movs	r1, #55	; 0x37
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f8ec 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b89c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b89e:	69fb      	ldr	r3, [r7, #28]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3720      	adds	r7, #32
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b088      	sub	sp, #32
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b8be:	2329      	movs	r3, #41	; 0x29
 800b8c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8c2:	2340      	movs	r3, #64	; 0x40
 800b8c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8d0:	f107 0308 	add.w	r3, r7, #8
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fe21 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f9ff 	bl	800bce0 <SDMMC_GetCmdResp3>
 800b8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3720      	adds	r7, #32
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b088      	sub	sp, #32
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b8fc:	2306      	movs	r3, #6
 800b8fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b900:	2340      	movs	r3, #64	; 0x40
 800b902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b904:	2300      	movs	r3, #0
 800b906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b90c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b90e:	f107 0308 	add.w	r3, r7, #8
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7ff fe02 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b91a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b91e:	2106      	movs	r1, #6
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f8a7 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b928:	69fb      	ldr	r3, [r7, #28]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3720      	adds	r7, #32
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b088      	sub	sp, #32
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b93e:	2333      	movs	r3, #51	; 0x33
 800b940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b942:	2340      	movs	r3, #64	; 0x40
 800b944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b94e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b950:	f107 0308 	add.w	r3, r7, #8
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff fde1 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b95c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b960:	2133      	movs	r1, #51	; 0x33
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f886 	bl	800ba74 <SDMMC_GetCmdResp1>
 800b968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b96a:	69fb      	ldr	r3, [r7, #28]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3720      	adds	r7, #32
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b980:	2302      	movs	r3, #2
 800b982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b984:	23c0      	movs	r3, #192	; 0xc0
 800b986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b98c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b992:	f107 0308 	add.w	r3, r7, #8
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff fdc0 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f956 	bl	800bc50 <SDMMC_GetCmdResp2>
 800b9a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9a6:	69fb      	ldr	r3, [r7, #28]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3720      	adds	r7, #32
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b088      	sub	sp, #32
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b9be:	2309      	movs	r3, #9
 800b9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b9c2:	23c0      	movs	r3, #192	; 0xc0
 800b9c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9d0:	f107 0308 	add.w	r3, r7, #8
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7ff fda1 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f937 	bl	800bc50 <SDMMC_GetCmdResp2>
 800b9e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9e4:	69fb      	ldr	r3, [r7, #28]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3720      	adds	r7, #32
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b088      	sub	sp, #32
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba00:	2340      	movs	r3, #64	; 0x40
 800ba02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba04:	2300      	movs	r3, #0
 800ba06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba0e:	f107 0308 	add.w	r3, r7, #8
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff fd82 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	2103      	movs	r1, #3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f99c 	bl	800bd5c <SDMMC_GetCmdResp6>
 800ba24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba26:	69fb      	ldr	r3, [r7, #28]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3720      	adds	r7, #32
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba3e:	230d      	movs	r3, #13
 800ba40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba42:	2340      	movs	r3, #64	; 0x40
 800ba44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba50:	f107 0308 	add.w	r3, r7, #8
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff fd61 	bl	800b51e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ba5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba60:	210d      	movs	r1, #13
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f806 	bl	800ba74 <SDMMC_GetCmdResp1>
 800ba68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3720      	adds	r7, #32
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba82:	4b70      	ldr	r3, [pc, #448]	; (800bc44 <SDMMC_GetCmdResp1+0x1d0>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a70      	ldr	r2, [pc, #448]	; (800bc48 <SDMMC_GetCmdResp1+0x1d4>)
 800ba88:	fba2 2303 	umull	r2, r3, r2, r3
 800ba8c:	0a5a      	lsrs	r2, r3, #9
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	fb02 f303 	mul.w	r3, r2, r3
 800ba94:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	1e5a      	subs	r2, r3, #1
 800ba9a:	61fa      	str	r2, [r7, #28]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d102      	bne.n	800baa6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baa4:	e0c9      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baaa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0ef      	beq.n	800ba96 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1ea      	bne.n	800ba96 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d004      	beq.n	800bad6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2204      	movs	r2, #4
 800bad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bad2:	2304      	movs	r3, #4
 800bad4:	e0b1      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2201      	movs	r2, #1
 800bae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bae8:	2301      	movs	r3, #1
 800baea:	e0a6      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	22c5      	movs	r2, #197	; 0xc5
 800baf0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f7ff fd3d 	bl	800b572 <SDIO_GetCommandResponse>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	7afb      	ldrb	r3, [r7, #11]
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d001      	beq.n	800bb06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e099      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bb06:	2100      	movs	r1, #0
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7ff fd3f 	bl	800b58c <SDIO_GetResponse>
 800bb0e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	4b4e      	ldr	r3, [pc, #312]	; (800bc4c <SDMMC_GetCmdResp1+0x1d8>)
 800bb14:	4013      	ands	r3, r2
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e08d      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	da02      	bge.n	800bb2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb28:	e087      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb34:	2340      	movs	r3, #64	; 0x40
 800bb36:	e080      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb42:	2380      	movs	r3, #128	; 0x80
 800bb44:	e079      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb54:	e071      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb64:	e069      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb74:	e061      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb84:	e059      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb94:	e051      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bba4:	e049      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbb4:	e041      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bbc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbc4:	e039      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbd4:	e031      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbe0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bbe4:	e029      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bbf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bbf4:	e021      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc04:	e019      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc14:	e011      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc24:	e009      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f003 0308 	and.w	r3, r3, #8
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc34:	e001      	b.n	800bc3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3720      	adds	r7, #32
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000014 	.word	0x20000014
 800bc48:	10624dd3 	.word	0x10624dd3
 800bc4c:	fdffe008 	.word	0xfdffe008

0800bc50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc58:	4b1f      	ldr	r3, [pc, #124]	; (800bcd8 <SDMMC_GetCmdResp2+0x88>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a1f      	ldr	r2, [pc, #124]	; (800bcdc <SDMMC_GetCmdResp2+0x8c>)
 800bc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc62:	0a5b      	lsrs	r3, r3, #9
 800bc64:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc68:	fb02 f303 	mul.w	r3, r2, r3
 800bc6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	1e5a      	subs	r2, r3, #1
 800bc72:	60fa      	str	r2, [r7, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc7c:	e026      	b.n	800bccc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0ef      	beq.n	800bc6e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1ea      	bne.n	800bc6e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9c:	f003 0304 	and.w	r3, r3, #4
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d004      	beq.n	800bcae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2204      	movs	r2, #4
 800bca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcaa:	2304      	movs	r3, #4
 800bcac:	e00e      	b.n	800bccc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e003      	b.n	800bccc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	22c5      	movs	r2, #197	; 0xc5
 800bcc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	20000014 	.word	0x20000014
 800bcdc:	10624dd3 	.word	0x10624dd3

0800bce0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bce8:	4b1a      	ldr	r3, [pc, #104]	; (800bd54 <SDMMC_GetCmdResp3+0x74>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a1a      	ldr	r2, [pc, #104]	; (800bd58 <SDMMC_GetCmdResp3+0x78>)
 800bcee:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf2:	0a5b      	lsrs	r3, r3, #9
 800bcf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf8:	fb02 f303 	mul.w	r3, r2, r3
 800bcfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	1e5a      	subs	r2, r3, #1
 800bd02:	60fa      	str	r2, [r7, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd0c:	e01b      	b.n	800bd46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d0ef      	beq.n	800bcfe <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1ea      	bne.n	800bcfe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2c:	f003 0304 	and.w	r3, r3, #4
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2204      	movs	r2, #4
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd3a:	2304      	movs	r3, #4
 800bd3c:	e003      	b.n	800bd46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	22c5      	movs	r2, #197	; 0xc5
 800bd42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	20000014 	.word	0x20000014
 800bd58:	10624dd3 	.word	0x10624dd3

0800bd5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	460b      	mov	r3, r1
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd6a:	4b35      	ldr	r3, [pc, #212]	; (800be40 <SDMMC_GetCmdResp6+0xe4>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a35      	ldr	r2, [pc, #212]	; (800be44 <SDMMC_GetCmdResp6+0xe8>)
 800bd70:	fba2 2303 	umull	r2, r3, r2, r3
 800bd74:	0a5b      	lsrs	r3, r3, #9
 800bd76:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd7a:	fb02 f303 	mul.w	r3, r2, r3
 800bd7e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	1e5a      	subs	r2, r3, #1
 800bd84:	61fa      	str	r2, [r7, #28]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d102      	bne.n	800bd90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd8e:	e052      	b.n	800be36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd94:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d0ef      	beq.n	800bd80 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1ea      	bne.n	800bd80 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdae:	f003 0304 	and.w	r3, r3, #4
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d004      	beq.n	800bdc0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2204      	movs	r2, #4
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdbc:	2304      	movs	r3, #4
 800bdbe:	e03a      	b.n	800be36 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d004      	beq.n	800bdd6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e02f      	b.n	800be36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f7ff fbcb 	bl	800b572 <SDIO_GetCommandResponse>
 800bddc:	4603      	mov	r3, r0
 800bdde:	461a      	mov	r2, r3
 800bde0:	7afb      	ldrb	r3, [r7, #11]
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d001      	beq.n	800bdea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e025      	b.n	800be36 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	22c5      	movs	r2, #197	; 0xc5
 800bdee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f7ff fbca 	bl	800b58c <SDIO_GetResponse>
 800bdf8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d106      	bne.n	800be12 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	0c1b      	lsrs	r3, r3, #16
 800be08:	b29a      	uxth	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800be0e:	2300      	movs	r3, #0
 800be10:	e011      	b.n	800be36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be20:	e009      	b.n	800be36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be30:	e001      	b.n	800be36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be36:	4618      	mov	r0, r3
 800be38:	3720      	adds	r7, #32
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	20000014 	.word	0x20000014
 800be44:	10624dd3 	.word	0x10624dd3

0800be48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be50:	4b22      	ldr	r3, [pc, #136]	; (800bedc <SDMMC_GetCmdResp7+0x94>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a22      	ldr	r2, [pc, #136]	; (800bee0 <SDMMC_GetCmdResp7+0x98>)
 800be56:	fba2 2303 	umull	r2, r3, r2, r3
 800be5a:	0a5b      	lsrs	r3, r3, #9
 800be5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be60:	fb02 f303 	mul.w	r3, r2, r3
 800be64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	1e5a      	subs	r2, r3, #1
 800be6a:	60fa      	str	r2, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d102      	bne.n	800be76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be74:	e02c      	b.n	800bed0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0ef      	beq.n	800be66 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1ea      	bne.n	800be66 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d004      	beq.n	800bea6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2204      	movs	r2, #4
 800bea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bea2:	2304      	movs	r3, #4
 800bea4:	e014      	b.n	800bed0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d004      	beq.n	800bebc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800beb8:	2301      	movs	r3, #1
 800beba:	e009      	b.n	800bed0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d002      	beq.n	800bece <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2240      	movs	r2, #64	; 0x40
 800becc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bece:	2300      	movs	r3, #0
  
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	20000014 	.word	0x20000014
 800bee0:	10624dd3 	.word	0x10624dd3

0800bee4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800beec:	4b11      	ldr	r3, [pc, #68]	; (800bf34 <SDMMC_GetCmdError+0x50>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a11      	ldr	r2, [pc, #68]	; (800bf38 <SDMMC_GetCmdError+0x54>)
 800bef2:	fba2 2303 	umull	r2, r3, r2, r3
 800bef6:	0a5b      	lsrs	r3, r3, #9
 800bef8:	f241 3288 	movw	r2, #5000	; 0x1388
 800befc:	fb02 f303 	mul.w	r3, r2, r3
 800bf00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	1e5a      	subs	r2, r3, #1
 800bf06:	60fa      	str	r2, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d102      	bne.n	800bf12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf10:	e009      	b.n	800bf26 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0f1      	beq.n	800bf02 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	22c5      	movs	r2, #197	; 0xc5
 800bf22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	20000014 	.word	0x20000014
 800bf38:	10624dd3 	.word	0x10624dd3

0800bf3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	f107 001c 	add.w	r0, r7, #28
 800bf4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d122      	bne.n	800bf9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bf68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bf7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d105      	bne.n	800bf8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f001 fbe8 	bl	800d764 <USB_CoreReset>
 800bf94:	4603      	mov	r3, r0
 800bf96:	73fb      	strb	r3, [r7, #15]
 800bf98:	e01a      	b.n	800bfd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f001 fbdc 	bl	800d764 <USB_CoreReset>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bfb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d106      	bne.n	800bfc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	639a      	str	r2, [r3, #56]	; 0x38
 800bfc2:	e005      	b.n	800bfd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d10b      	bne.n	800bfee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	f043 0206 	orr.w	r2, r3, #6
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f043 0220 	orr.w	r2, r3, #32
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bffa:	b004      	add	sp, #16
 800bffc:	4770      	bx	lr
	...

0800c000 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	4613      	mov	r3, r2
 800c00c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c00e:	79fb      	ldrb	r3, [r7, #7]
 800c010:	2b02      	cmp	r3, #2
 800c012:	d165      	bne.n	800c0e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4a41      	ldr	r2, [pc, #260]	; (800c11c <USB_SetTurnaroundTime+0x11c>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d906      	bls.n	800c02a <USB_SetTurnaroundTime+0x2a>
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	4a40      	ldr	r2, [pc, #256]	; (800c120 <USB_SetTurnaroundTime+0x120>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d202      	bcs.n	800c02a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c024:	230f      	movs	r3, #15
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e062      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	4a3c      	ldr	r2, [pc, #240]	; (800c120 <USB_SetTurnaroundTime+0x120>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d306      	bcc.n	800c040 <USB_SetTurnaroundTime+0x40>
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	4a3b      	ldr	r2, [pc, #236]	; (800c124 <USB_SetTurnaroundTime+0x124>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d202      	bcs.n	800c040 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c03a:	230e      	movs	r3, #14
 800c03c:	617b      	str	r3, [r7, #20]
 800c03e:	e057      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	4a38      	ldr	r2, [pc, #224]	; (800c124 <USB_SetTurnaroundTime+0x124>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d306      	bcc.n	800c056 <USB_SetTurnaroundTime+0x56>
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	4a37      	ldr	r2, [pc, #220]	; (800c128 <USB_SetTurnaroundTime+0x128>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d202      	bcs.n	800c056 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c050:	230d      	movs	r3, #13
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	e04c      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	4a33      	ldr	r2, [pc, #204]	; (800c128 <USB_SetTurnaroundTime+0x128>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d306      	bcc.n	800c06c <USB_SetTurnaroundTime+0x6c>
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	4a32      	ldr	r2, [pc, #200]	; (800c12c <USB_SetTurnaroundTime+0x12c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d802      	bhi.n	800c06c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c066:	230c      	movs	r3, #12
 800c068:	617b      	str	r3, [r7, #20]
 800c06a:	e041      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4a2f      	ldr	r2, [pc, #188]	; (800c12c <USB_SetTurnaroundTime+0x12c>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d906      	bls.n	800c082 <USB_SetTurnaroundTime+0x82>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	4a2e      	ldr	r2, [pc, #184]	; (800c130 <USB_SetTurnaroundTime+0x130>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d802      	bhi.n	800c082 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c07c:	230b      	movs	r3, #11
 800c07e:	617b      	str	r3, [r7, #20]
 800c080:	e036      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	4a2a      	ldr	r2, [pc, #168]	; (800c130 <USB_SetTurnaroundTime+0x130>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d906      	bls.n	800c098 <USB_SetTurnaroundTime+0x98>
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	4a29      	ldr	r2, [pc, #164]	; (800c134 <USB_SetTurnaroundTime+0x134>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d802      	bhi.n	800c098 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c092:	230a      	movs	r3, #10
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	e02b      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	4a26      	ldr	r2, [pc, #152]	; (800c134 <USB_SetTurnaroundTime+0x134>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d906      	bls.n	800c0ae <USB_SetTurnaroundTime+0xae>
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	4a25      	ldr	r2, [pc, #148]	; (800c138 <USB_SetTurnaroundTime+0x138>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d202      	bcs.n	800c0ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c0a8:	2309      	movs	r3, #9
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	e020      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	4a21      	ldr	r2, [pc, #132]	; (800c138 <USB_SetTurnaroundTime+0x138>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d306      	bcc.n	800c0c4 <USB_SetTurnaroundTime+0xc4>
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	4a20      	ldr	r2, [pc, #128]	; (800c13c <USB_SetTurnaroundTime+0x13c>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d802      	bhi.n	800c0c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c0be:	2308      	movs	r3, #8
 800c0c0:	617b      	str	r3, [r7, #20]
 800c0c2:	e015      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	4a1d      	ldr	r2, [pc, #116]	; (800c13c <USB_SetTurnaroundTime+0x13c>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d906      	bls.n	800c0da <USB_SetTurnaroundTime+0xda>
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	4a1c      	ldr	r2, [pc, #112]	; (800c140 <USB_SetTurnaroundTime+0x140>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d202      	bcs.n	800c0da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c0d4:	2307      	movs	r3, #7
 800c0d6:	617b      	str	r3, [r7, #20]
 800c0d8:	e00a      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c0da:	2306      	movs	r3, #6
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	e007      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d102      	bne.n	800c0ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c0e6:	2309      	movs	r3, #9
 800c0e8:	617b      	str	r3, [r7, #20]
 800c0ea:	e001      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c0ec:	2309      	movs	r3, #9
 800c0ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	68da      	ldr	r2, [r3, #12]
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	029b      	lsls	r3, r3, #10
 800c104:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c108:	431a      	orrs	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	371c      	adds	r7, #28
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	00d8acbf 	.word	0x00d8acbf
 800c120:	00e4e1c0 	.word	0x00e4e1c0
 800c124:	00f42400 	.word	0x00f42400
 800c128:	01067380 	.word	0x01067380
 800c12c:	011a499f 	.word	0x011a499f
 800c130:	01312cff 	.word	0x01312cff
 800c134:	014ca43f 	.word	0x014ca43f
 800c138:	016e3600 	.word	0x016e3600
 800c13c:	01a6ab1f 	.word	0x01a6ab1f
 800c140:	01e84800 	.word	0x01e84800

0800c144 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f043 0201 	orr.w	r2, r3, #1
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f023 0201 	bic.w	r2, r3, #1
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	460b      	mov	r3, r1
 800c192:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1a4:	78fb      	ldrb	r3, [r7, #3]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d115      	bne.n	800c1d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	f7f7 fb5a 	bl	8003870 <HAL_Delay>
      ms++;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 fa3f 	bl	800d646 <USB_GetMode>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d01e      	beq.n	800c20c <USB_SetCurrentMode+0x84>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2b31      	cmp	r3, #49	; 0x31
 800c1d2:	d9f0      	bls.n	800c1b6 <USB_SetCurrentMode+0x2e>
 800c1d4:	e01a      	b.n	800c20c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c1d6:	78fb      	ldrb	r3, [r7, #3]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d115      	bne.n	800c208 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c1e8:	2001      	movs	r0, #1
 800c1ea:	f7f7 fb41 	bl	8003870 <HAL_Delay>
      ms++;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 fa26 	bl	800d646 <USB_GetMode>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d005      	beq.n	800c20c <USB_SetCurrentMode+0x84>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b31      	cmp	r3, #49	; 0x31
 800c204:	d9f0      	bls.n	800c1e8 <USB_SetCurrentMode+0x60>
 800c206:	e001      	b.n	800c20c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e005      	b.n	800c218 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b32      	cmp	r3, #50	; 0x32
 800c210:	d101      	bne.n	800c216 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c212:	2301      	movs	r3, #1
 800c214:	e000      	b.n	800c218 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c220:	b084      	sub	sp, #16
 800c222:	b580      	push	{r7, lr}
 800c224:	b086      	sub	sp, #24
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c22e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c23a:	2300      	movs	r3, #0
 800c23c:	613b      	str	r3, [r7, #16]
 800c23e:	e009      	b.n	800c254 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3340      	adds	r3, #64	; 0x40
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	2200      	movs	r2, #0
 800c24c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	3301      	adds	r3, #1
 800c252:	613b      	str	r3, [r7, #16]
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	2b0e      	cmp	r3, #14
 800c258:	d9f2      	bls.n	800c240 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c25a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d11c      	bne.n	800c29a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c26e:	f043 0302 	orr.w	r3, r3, #2
 800c272:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c278:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	e005      	b.n	800c2a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	680b      	ldr	r3, [r1, #0]
 800c2c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d10c      	bne.n	800c2e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d104      	bne.n	800c2dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f965 	bl	800c5a4 <USB_SetDevSpeed>
 800c2da:	e008      	b.n	800c2ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c2dc:	2101      	movs	r1, #1
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f960 	bl	800c5a4 <USB_SetDevSpeed>
 800c2e4:	e003      	b.n	800c2ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c2e6:	2103      	movs	r1, #3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f95b 	bl	800c5a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c2ee:	2110      	movs	r1, #16
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f8f3 	bl	800c4dc <USB_FlushTxFifo>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f91f 	bl	800c544 <USB_FlushRxFifo>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c316:	461a      	mov	r2, r3
 800c318:	2300      	movs	r3, #0
 800c31a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c322:	461a      	mov	r2, r3
 800c324:	2300      	movs	r3, #0
 800c326:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c32e:	461a      	mov	r2, r3
 800c330:	2300      	movs	r3, #0
 800c332:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c334:	2300      	movs	r3, #0
 800c336:	613b      	str	r3, [r7, #16]
 800c338:	e043      	b.n	800c3c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	015a      	lsls	r2, r3, #5
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4413      	add	r3, r2
 800c342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c350:	d118      	bne.n	800c384 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	015a      	lsls	r2, r3, #5
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	4413      	add	r3, r2
 800c360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c364:	461a      	mov	r2, r3
 800c366:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	e013      	b.n	800c396 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	015a      	lsls	r2, r3, #5
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	4413      	add	r3, r2
 800c376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37a:	461a      	mov	r2, r3
 800c37c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	e008      	b.n	800c396 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	015a      	lsls	r2, r3, #5
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4413      	add	r3, r2
 800c38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c390:	461a      	mov	r2, r3
 800c392:	2300      	movs	r3, #0
 800c394:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	015a      	lsls	r2, r3, #5
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4413      	add	r3, r2
 800c39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	015a      	lsls	r2, r3, #5
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	613b      	str	r3, [r7, #16]
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d3b7      	bcc.n	800c33a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	613b      	str	r3, [r7, #16]
 800c3ce:	e043      	b.n	800c458 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	015a      	lsls	r2, r3, #5
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3e6:	d118      	bne.n	800c41a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10a      	bne.n	800c404 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	015a      	lsls	r2, r3, #5
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c400:	6013      	str	r3, [r2, #0]
 800c402:	e013      	b.n	800c42c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c410:	461a      	mov	r2, r3
 800c412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	e008      	b.n	800c42c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4413      	add	r3, r2
 800c422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c426:	461a      	mov	r2, r3
 800c428:	2300      	movs	r3, #0
 800c42a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c438:	461a      	mov	r2, r3
 800c43a:	2300      	movs	r3, #0
 800c43c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	015a      	lsls	r2, r3, #5
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c44a:	461a      	mov	r2, r3
 800c44c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	3301      	adds	r3, #1
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d3b7      	bcc.n	800c3d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c46e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c472:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c480:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c484:	2b00      	cmp	r3, #0
 800c486:	d105      	bne.n	800c494 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	f043 0210 	orr.w	r2, r3, #16
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	699a      	ldr	r2, [r3, #24]
 800c498:	4b0f      	ldr	r3, [pc, #60]	; (800c4d8 <USB_DevInit+0x2b8>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d005      	beq.n	800c4b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	f043 0208 	orr.w	r2, r3, #8
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d107      	bne.n	800c4c8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c4c0:	f043 0304 	orr.w	r3, r3, #4
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4d4:	b004      	add	sp, #16
 800c4d6:	4770      	bx	lr
 800c4d8:	803c3800 	.word	0x803c3800

0800c4dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4a13      	ldr	r2, [pc, #76]	; (800c540 <USB_FlushTxFifo+0x64>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d901      	bls.n	800c4fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	e01b      	b.n	800c534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	daf2      	bge.n	800c4ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c504:	2300      	movs	r3, #0
 800c506:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	019b      	lsls	r3, r3, #6
 800c50c:	f043 0220 	orr.w	r2, r3, #32
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	3301      	adds	r3, #1
 800c518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	4a08      	ldr	r2, [pc, #32]	; (800c540 <USB_FlushTxFifo+0x64>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d901      	bls.n	800c526 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c522:	2303      	movs	r3, #3
 800c524:	e006      	b.n	800c534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	f003 0320 	and.w	r3, r3, #32
 800c52e:	2b20      	cmp	r3, #32
 800c530:	d0f0      	beq.n	800c514 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3714      	adds	r7, #20
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	00030d40 	.word	0x00030d40

0800c544 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3301      	adds	r3, #1
 800c554:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	4a11      	ldr	r2, [pc, #68]	; (800c5a0 <USB_FlushRxFifo+0x5c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d901      	bls.n	800c562 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c55e:	2303      	movs	r3, #3
 800c560:	e018      	b.n	800c594 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	2b00      	cmp	r3, #0
 800c568:	daf2      	bge.n	800c550 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c56a:	2300      	movs	r3, #0
 800c56c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2210      	movs	r2, #16
 800c572:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	3301      	adds	r3, #1
 800c578:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	4a08      	ldr	r2, [pc, #32]	; (800c5a0 <USB_FlushRxFifo+0x5c>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d901      	bls.n	800c586 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c582:	2303      	movs	r3, #3
 800c584:	e006      	b.n	800c594 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	f003 0310 	and.w	r3, r3, #16
 800c58e:	2b10      	cmp	r3, #16
 800c590:	d0f0      	beq.n	800c574 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	00030d40 	.word	0x00030d40

0800c5a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	68f9      	ldr	r1, [r7, #12]
 800c5c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b087      	sub	sp, #28
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f003 0306 	and.w	r3, r3, #6
 800c5ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d102      	bne.n	800c5fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	75fb      	strb	r3, [r7, #23]
 800c5fa:	e00a      	b.n	800c612 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d002      	beq.n	800c608 <USB_GetDevSpeed+0x32>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b06      	cmp	r3, #6
 800c606:	d102      	bne.n	800c60e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c608:	2302      	movs	r3, #2
 800c60a:	75fb      	strb	r3, [r7, #23]
 800c60c:	e001      	b.n	800c612 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c60e:	230f      	movs	r3, #15
 800c610:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c612:	7dfb      	ldrb	r3, [r7, #23]
}
 800c614:	4618      	mov	r0, r3
 800c616:	371c      	adds	r7, #28
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	785b      	ldrb	r3, [r3, #1]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d13a      	bne.n	800c6b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c642:	69da      	ldr	r2, [r3, #28]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	f003 030f 	and.w	r3, r3, #15
 800c64c:	2101      	movs	r1, #1
 800c64e:	fa01 f303 	lsl.w	r3, r1, r3
 800c652:	b29b      	uxth	r3, r3
 800c654:	68f9      	ldr	r1, [r7, #12]
 800c656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c65a:	4313      	orrs	r3, r2
 800c65c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c670:	2b00      	cmp	r3, #0
 800c672:	d155      	bne.n	800c720 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	015a      	lsls	r2, r3, #5
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	4413      	add	r3, r2
 800c67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	791b      	ldrb	r3, [r3, #4]
 800c68e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c690:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	059b      	lsls	r3, r3, #22
 800c696:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c698:	4313      	orrs	r3, r2
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	0151      	lsls	r1, r2, #5
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	440a      	add	r2, r1
 800c6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6ae:	6013      	str	r3, [r2, #0]
 800c6b0:	e036      	b.n	800c720 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b8:	69da      	ldr	r2, [r3, #28]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	f003 030f 	and.w	r3, r3, #15
 800c6c2:	2101      	movs	r1, #1
 800c6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6c8:	041b      	lsls	r3, r3, #16
 800c6ca:	68f9      	ldr	r1, [r7, #12]
 800c6cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	015a      	lsls	r2, r3, #5
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	4413      	add	r3, r2
 800c6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d11a      	bne.n	800c720 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	015a      	lsls	r2, r3, #5
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	791b      	ldrb	r3, [r3, #4]
 800c704:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c706:	430b      	orrs	r3, r1
 800c708:	4313      	orrs	r3, r2
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	0151      	lsls	r1, r2, #5
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	440a      	add	r2, r1
 800c712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c71a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c71e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
	...

0800c730 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d161      	bne.n	800c810 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	4413      	add	r3, r2
 800c754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c75e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c762:	d11f      	bne.n	800c7a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	015a      	lsls	r2, r3, #5
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	4413      	add	r3, r2
 800c76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	0151      	lsls	r1, r2, #5
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	440a      	add	r2, r1
 800c77a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c77e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c782:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	015a      	lsls	r2, r3, #5
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	4413      	add	r3, r2
 800c78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	0151      	lsls	r1, r2, #5
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	440a      	add	r2, r1
 800c79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c79e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	f003 030f 	and.w	r3, r3, #15
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	43db      	mvns	r3, r3
 800c7be:	68f9      	ldr	r1, [r7, #12]
 800c7c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ce:	69da      	ldr	r2, [r3, #28]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f003 030f 	and.w	r3, r3, #15
 800c7d8:	2101      	movs	r1, #1
 800c7da:	fa01 f303 	lsl.w	r3, r1, r3
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	43db      	mvns	r3, r3
 800c7e2:	68f9      	ldr	r1, [r7, #12]
 800c7e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	015a      	lsls	r2, r3, #5
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	0159      	lsls	r1, r3, #5
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	440b      	add	r3, r1
 800c802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c806:	4619      	mov	r1, r3
 800c808:	4b35      	ldr	r3, [pc, #212]	; (800c8e0 <USB_DeactivateEndpoint+0x1b0>)
 800c80a:	4013      	ands	r3, r2
 800c80c:	600b      	str	r3, [r1, #0]
 800c80e:	e060      	b.n	800c8d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c826:	d11f      	bne.n	800c868 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	015a      	lsls	r2, r3, #5
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	4413      	add	r3, r2
 800c830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	0151      	lsls	r1, r2, #5
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	440a      	add	r2, r1
 800c83e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c846:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	015a      	lsls	r2, r3, #5
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	0151      	lsls	r1, r2, #5
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	440a      	add	r2, r1
 800c85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	f003 030f 	and.w	r3, r3, #15
 800c878:	2101      	movs	r1, #1
 800c87a:	fa01 f303 	lsl.w	r3, r1, r3
 800c87e:	041b      	lsls	r3, r3, #16
 800c880:	43db      	mvns	r3, r3
 800c882:	68f9      	ldr	r1, [r7, #12]
 800c884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c888:	4013      	ands	r3, r2
 800c88a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c892:	69da      	ldr	r2, [r3, #28]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	2101      	movs	r1, #1
 800c89e:	fa01 f303 	lsl.w	r3, r1, r3
 800c8a2:	041b      	lsls	r3, r3, #16
 800c8a4:	43db      	mvns	r3, r3
 800c8a6:	68f9      	ldr	r1, [r7, #12]
 800c8a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	015a      	lsls	r2, r3, #5
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	4413      	add	r3, r2
 800c8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	0159      	lsls	r1, r3, #5
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	440b      	add	r3, r1
 800c8c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	4b05      	ldr	r3, [pc, #20]	; (800c8e4 <USB_DeactivateEndpoint+0x1b4>)
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	ec337800 	.word	0xec337800
 800c8e4:	eff37800 	.word	0xeff37800

0800c8e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08a      	sub	sp, #40	; 0x28
 800c8ec:	af02      	add	r7, sp, #8
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	785b      	ldrb	r3, [r3, #1]
 800c904:	2b01      	cmp	r3, #1
 800c906:	f040 815c 	bne.w	800cbc2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d132      	bne.n	800c978 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	015a      	lsls	r2, r3, #5
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	4413      	add	r3, r2
 800c91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	69ba      	ldr	r2, [r7, #24]
 800c922:	0151      	lsls	r1, r2, #5
 800c924:	69fa      	ldr	r2, [r7, #28]
 800c926:	440a      	add	r2, r1
 800c928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c92c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c930:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c934:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	015a      	lsls	r2, r3, #5
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	4413      	add	r3, r2
 800c93e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	0151      	lsls	r1, r2, #5
 800c948:	69fa      	ldr	r2, [r7, #28]
 800c94a:	440a      	add	r2, r1
 800c94c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	015a      	lsls	r2, r3, #5
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	4413      	add	r3, r2
 800c95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c962:	691b      	ldr	r3, [r3, #16]
 800c964:	69ba      	ldr	r2, [r7, #24]
 800c966:	0151      	lsls	r1, r2, #5
 800c968:	69fa      	ldr	r2, [r7, #28]
 800c96a:	440a      	add	r2, r1
 800c96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c970:	0cdb      	lsrs	r3, r3, #19
 800c972:	04db      	lsls	r3, r3, #19
 800c974:	6113      	str	r3, [r2, #16]
 800c976:	e074      	b.n	800ca62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	015a      	lsls	r2, r3, #5
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	4413      	add	r3, r2
 800c980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	69ba      	ldr	r2, [r7, #24]
 800c988:	0151      	lsls	r1, r2, #5
 800c98a:	69fa      	ldr	r2, [r7, #28]
 800c98c:	440a      	add	r2, r1
 800c98e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c992:	0cdb      	lsrs	r3, r3, #19
 800c994:	04db      	lsls	r3, r3, #19
 800c996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	015a      	lsls	r2, r3, #5
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	4413      	add	r3, r2
 800c9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	69ba      	ldr	r2, [r7, #24]
 800c9a8:	0151      	lsls	r1, r2, #5
 800c9aa:	69fa      	ldr	r2, [r7, #28]
 800c9ac:	440a      	add	r2, r1
 800c9ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c9b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c9ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	015a      	lsls	r2, r3, #5
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6999      	ldr	r1, [r3, #24]
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	440b      	add	r3, r1
 800c9d4:	1e59      	subs	r1, r3, #1
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	fbb1 f3f3 	udiv	r3, r1, r3
 800c9de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c9e0:	4b9d      	ldr	r3, [pc, #628]	; (800cc58 <USB_EPStartXfer+0x370>)
 800c9e2:	400b      	ands	r3, r1
 800c9e4:	69b9      	ldr	r1, [r7, #24]
 800c9e6:	0148      	lsls	r0, r1, #5
 800c9e8:	69f9      	ldr	r1, [r7, #28]
 800c9ea:	4401      	add	r1, r0
 800c9ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	015a      	lsls	r2, r3, #5
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca00:	691a      	ldr	r2, [r3, #16]
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca0a:	69b9      	ldr	r1, [r7, #24]
 800ca0c:	0148      	lsls	r0, r1, #5
 800ca0e:	69f9      	ldr	r1, [r7, #28]
 800ca10:	4401      	add	r1, r0
 800ca12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ca16:	4313      	orrs	r3, r2
 800ca18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	791b      	ldrb	r3, [r3, #4]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d11f      	bne.n	800ca62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	015a      	lsls	r2, r3, #5
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	4413      	add	r3, r2
 800ca2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	69ba      	ldr	r2, [r7, #24]
 800ca32:	0151      	lsls	r1, r2, #5
 800ca34:	69fa      	ldr	r2, [r7, #28]
 800ca36:	440a      	add	r2, r1
 800ca38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ca40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	69ba      	ldr	r2, [r7, #24]
 800ca52:	0151      	lsls	r1, r2, #5
 800ca54:	69fa      	ldr	r2, [r7, #28]
 800ca56:	440a      	add	r2, r1
 800ca58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d14b      	bne.n	800cb00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	015a      	lsls	r2, r3, #5
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	4413      	add	r3, r2
 800ca78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	791b      	ldrb	r3, [r3, #4]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d128      	bne.n	800cade <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d110      	bne.n	800cabe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	015a      	lsls	r2, r3, #5
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	4413      	add	r3, r2
 800caa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	0151      	lsls	r1, r2, #5
 800caae:	69fa      	ldr	r2, [r7, #28]
 800cab0:	440a      	add	r2, r1
 800cab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800caba:	6013      	str	r3, [r2, #0]
 800cabc:	e00f      	b.n	800cade <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	015a      	lsls	r2, r3, #5
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	4413      	add	r3, r2
 800cac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	69ba      	ldr	r2, [r7, #24]
 800cace:	0151      	lsls	r1, r2, #5
 800cad0:	69fa      	ldr	r2, [r7, #28]
 800cad2:	440a      	add	r2, r1
 800cad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cadc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	015a      	lsls	r2, r3, #5
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	4413      	add	r3, r2
 800cae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	0151      	lsls	r1, r2, #5
 800caf0:	69fa      	ldr	r2, [r7, #28]
 800caf2:	440a      	add	r2, r1
 800caf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	e133      	b.n	800cd68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	015a      	lsls	r2, r3, #5
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	4413      	add	r3, r2
 800cb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	69ba      	ldr	r2, [r7, #24]
 800cb10:	0151      	lsls	r1, r2, #5
 800cb12:	69fa      	ldr	r2, [r7, #28]
 800cb14:	440a      	add	r2, r1
 800cb16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	791b      	ldrb	r3, [r3, #4]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d015      	beq.n	800cb54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 811b 	beq.w	800cd68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	f003 030f 	and.w	r3, r3, #15
 800cb42:	2101      	movs	r1, #1
 800cb44:	fa01 f303 	lsl.w	r3, r1, r3
 800cb48:	69f9      	ldr	r1, [r7, #28]
 800cb4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	634b      	str	r3, [r1, #52]	; 0x34
 800cb52:	e109      	b.n	800cd68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d110      	bne.n	800cb86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	015a      	lsls	r2, r3, #5
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	0151      	lsls	r1, r2, #5
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	440a      	add	r2, r1
 800cb7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb82:	6013      	str	r3, [r2, #0]
 800cb84:	e00f      	b.n	800cba6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	0151      	lsls	r1, r2, #5
 800cb98:	69fa      	ldr	r2, [r7, #28]
 800cb9a:	440a      	add	r2, r1
 800cb9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cba4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	6919      	ldr	r1, [r3, #16]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	781a      	ldrb	r2, [r3, #0]
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	b298      	uxth	r0, r3
 800cbb4:	79fb      	ldrb	r3, [r7, #7]
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	4603      	mov	r3, r0
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f000 fade 	bl	800d17c <USB_WritePacket>
 800cbc0:	e0d2      	b.n	800cd68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	015a      	lsls	r2, r3, #5
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	69ba      	ldr	r2, [r7, #24]
 800cbd2:	0151      	lsls	r1, r2, #5
 800cbd4:	69fa      	ldr	r2, [r7, #28]
 800cbd6:	440a      	add	r2, r1
 800cbd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbdc:	0cdb      	lsrs	r3, r3, #19
 800cbde:	04db      	lsls	r3, r3, #19
 800cbe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	015a      	lsls	r2, r3, #5
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	4413      	add	r3, r2
 800cbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	69ba      	ldr	r2, [r7, #24]
 800cbf2:	0151      	lsls	r1, r2, #5
 800cbf4:	69fa      	ldr	r2, [r7, #28]
 800cbf6:	440a      	add	r2, r1
 800cbf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d126      	bne.n	800cc5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	015a      	lsls	r2, r3, #5
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	4413      	add	r3, r2
 800cc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc1a:	691a      	ldr	r2, [r3, #16]
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc24:	69b9      	ldr	r1, [r7, #24]
 800cc26:	0148      	lsls	r0, r1, #5
 800cc28:	69f9      	ldr	r1, [r7, #28]
 800cc2a:	4401      	add	r1, r0
 800cc2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc30:	4313      	orrs	r3, r2
 800cc32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	0151      	lsls	r1, r2, #5
 800cc46:	69fa      	ldr	r2, [r7, #28]
 800cc48:	440a      	add	r2, r1
 800cc4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc52:	6113      	str	r3, [r2, #16]
 800cc54:	e03a      	b.n	800cccc <USB_EPStartXfer+0x3e4>
 800cc56:	bf00      	nop
 800cc58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	699a      	ldr	r2, [r3, #24]
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	4413      	add	r3, r2
 800cc66:	1e5a      	subs	r2, r3, #1
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	8afa      	ldrh	r2, [r7, #22]
 800cc78:	fb03 f202 	mul.w	r2, r3, r2
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	015a      	lsls	r2, r3, #5
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	4413      	add	r3, r2
 800cc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc8c:	691a      	ldr	r2, [r3, #16]
 800cc8e:	8afb      	ldrh	r3, [r7, #22]
 800cc90:	04d9      	lsls	r1, r3, #19
 800cc92:	4b38      	ldr	r3, [pc, #224]	; (800cd74 <USB_EPStartXfer+0x48c>)
 800cc94:	400b      	ands	r3, r1
 800cc96:	69b9      	ldr	r1, [r7, #24]
 800cc98:	0148      	lsls	r0, r1, #5
 800cc9a:	69f9      	ldr	r1, [r7, #28]
 800cc9c:	4401      	add	r1, r0
 800cc9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cca2:	4313      	orrs	r3, r2
 800cca4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	015a      	lsls	r2, r3, #5
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	4413      	add	r3, r2
 800ccae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb2:	691a      	ldr	r2, [r3, #16]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	69db      	ldr	r3, [r3, #28]
 800ccb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccbc:	69b9      	ldr	r1, [r7, #24]
 800ccbe:	0148      	lsls	r0, r1, #5
 800ccc0:	69f9      	ldr	r1, [r7, #28]
 800ccc2:	4401      	add	r1, r0
 800ccc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cccc:	79fb      	ldrb	r3, [r7, #7]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d10d      	bne.n	800ccee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d009      	beq.n	800ccee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	6919      	ldr	r1, [r3, #16]
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	015a      	lsls	r2, r3, #5
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	4413      	add	r3, r2
 800cce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccea:	460a      	mov	r2, r1
 800ccec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	791b      	ldrb	r3, [r3, #4]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d128      	bne.n	800cd48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccfc:	689b      	ldr	r3, [r3, #8]
 800ccfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d110      	bne.n	800cd28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	015a      	lsls	r2, r3, #5
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	69ba      	ldr	r2, [r7, #24]
 800cd16:	0151      	lsls	r1, r2, #5
 800cd18:	69fa      	ldr	r2, [r7, #28]
 800cd1a:	440a      	add	r2, r1
 800cd1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd24:	6013      	str	r3, [r2, #0]
 800cd26:	e00f      	b.n	800cd48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	69ba      	ldr	r2, [r7, #24]
 800cd38:	0151      	lsls	r1, r2, #5
 800cd3a:	69fa      	ldr	r2, [r7, #28]
 800cd3c:	440a      	add	r2, r1
 800cd3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	015a      	lsls	r2, r3, #5
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	4413      	add	r3, r2
 800cd50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	69ba      	ldr	r2, [r7, #24]
 800cd58:	0151      	lsls	r1, r2, #5
 800cd5a:	69fa      	ldr	r2, [r7, #28]
 800cd5c:	440a      	add	r2, r1
 800cd5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3720      	adds	r7, #32
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	1ff80000 	.word	0x1ff80000

0800cd78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	4613      	mov	r3, r2
 800cd84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	785b      	ldrb	r3, [r3, #1]
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	f040 80ce 	bne.w	800cf36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	699b      	ldr	r3, [r3, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d132      	bne.n	800ce08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	015a      	lsls	r2, r3, #5
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	0151      	lsls	r1, r2, #5
 800cdb4:	697a      	ldr	r2, [r7, #20]
 800cdb6:	440a      	add	r2, r1
 800cdb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cdc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cdc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	015a      	lsls	r2, r3, #5
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	4413      	add	r3, r2
 800cdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	0151      	lsls	r1, r2, #5
 800cdd8:	697a      	ldr	r2, [r7, #20]
 800cdda:	440a      	add	r2, r1
 800cddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cde0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cde4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	015a      	lsls	r2, r3, #5
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	4413      	add	r3, r2
 800cdee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	693a      	ldr	r2, [r7, #16]
 800cdf6:	0151      	lsls	r1, r2, #5
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	440a      	add	r2, r1
 800cdfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce00:	0cdb      	lsrs	r3, r3, #19
 800ce02:	04db      	lsls	r3, r3, #19
 800ce04:	6113      	str	r3, [r2, #16]
 800ce06:	e04e      	b.n	800cea6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	015a      	lsls	r2, r3, #5
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	4413      	add	r3, r2
 800ce10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	0151      	lsls	r1, r2, #5
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	440a      	add	r2, r1
 800ce1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce22:	0cdb      	lsrs	r3, r3, #19
 800ce24:	04db      	lsls	r3, r3, #19
 800ce26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	015a      	lsls	r2, r3, #5
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	4413      	add	r3, r2
 800ce30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	0151      	lsls	r1, r2, #5
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	440a      	add	r2, r1
 800ce3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	699a      	ldr	r2, [r3, #24]
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d903      	bls.n	800ce60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	68da      	ldr	r2, [r3, #12]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	015a      	lsls	r2, r3, #5
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	693a      	ldr	r2, [r7, #16]
 800ce70:	0151      	lsls	r1, r2, #5
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	440a      	add	r2, r1
 800ce76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce8c:	691a      	ldr	r2, [r3, #16]
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce96:	6939      	ldr	r1, [r7, #16]
 800ce98:	0148      	lsls	r0, r1, #5
 800ce9a:	6979      	ldr	r1, [r7, #20]
 800ce9c:	4401      	add	r1, r0
 800ce9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cea2:	4313      	orrs	r3, r2
 800cea4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cea6:	79fb      	ldrb	r3, [r7, #7]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d11e      	bne.n	800ceea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	695b      	ldr	r3, [r3, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d009      	beq.n	800cec8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec0:	461a      	mov	r2, r3
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	0151      	lsls	r1, r2, #5
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	440a      	add	r2, r1
 800cede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cee2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	e097      	b.n	800d01a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	015a      	lsls	r2, r3, #5
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	4413      	add	r3, r2
 800cef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	693a      	ldr	r2, [r7, #16]
 800cefa:	0151      	lsls	r1, r2, #5
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	440a      	add	r2, r1
 800cf00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 8083 	beq.w	800d01a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	f003 030f 	and.w	r3, r3, #15
 800cf24:	2101      	movs	r1, #1
 800cf26:	fa01 f303 	lsl.w	r3, r1, r3
 800cf2a:	6979      	ldr	r1, [r7, #20]
 800cf2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf30:	4313      	orrs	r3, r2
 800cf32:	634b      	str	r3, [r1, #52]	; 0x34
 800cf34:	e071      	b.n	800d01a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	015a      	lsls	r2, r3, #5
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	693a      	ldr	r2, [r7, #16]
 800cf46:	0151      	lsls	r1, r2, #5
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	440a      	add	r2, r1
 800cf4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf50:	0cdb      	lsrs	r3, r3, #19
 800cf52:	04db      	lsls	r3, r3, #19
 800cf54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	015a      	lsls	r2, r3, #5
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	693a      	ldr	r2, [r7, #16]
 800cf66:	0151      	lsls	r1, r2, #5
 800cf68:	697a      	ldr	r2, [r7, #20]
 800cf6a:	440a      	add	r2, r1
 800cf6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	699b      	ldr	r3, [r3, #24]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	68da      	ldr	r2, [r3, #12]
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	68da      	ldr	r2, [r3, #12]
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	015a      	lsls	r2, r3, #5
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	4413      	add	r3, r2
 800cf9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	0151      	lsls	r1, r2, #5
 800cfa4:	697a      	ldr	r2, [r7, #20]
 800cfa6:	440a      	add	r2, r1
 800cfa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	015a      	lsls	r2, r3, #5
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	4413      	add	r3, r2
 800cfba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfbe:	691a      	ldr	r2, [r3, #16]
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	69db      	ldr	r3, [r3, #28]
 800cfc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfc8:	6939      	ldr	r1, [r7, #16]
 800cfca:	0148      	lsls	r0, r1, #5
 800cfcc:	6979      	ldr	r1, [r7, #20]
 800cfce:	4401      	add	r1, r0
 800cfd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d10d      	bne.n	800cffa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d009      	beq.n	800cffa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	6919      	ldr	r1, [r3, #16]
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	015a      	lsls	r2, r3, #5
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	4413      	add	r3, r2
 800cff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff6:	460a      	mov	r2, r1
 800cff8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	015a      	lsls	r2, r3, #5
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	4413      	add	r3, r2
 800d002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	0151      	lsls	r1, r2, #5
 800d00c:	697a      	ldr	r2, [r7, #20]
 800d00e:	440a      	add	r2, r1
 800d010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d014:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d018:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	371c      	adds	r7, #28
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d028:	b480      	push	{r7}
 800d02a:	b087      	sub	sp, #28
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	785b      	ldrb	r3, [r3, #1]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d14a      	bne.n	800d0dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	015a      	lsls	r2, r3, #5
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	4413      	add	r3, r2
 800d050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d05a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d05e:	f040 8086 	bne.w	800d16e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	7812      	ldrb	r2, [r2, #0]
 800d076:	0151      	lsls	r1, r2, #5
 800d078:	693a      	ldr	r2, [r7, #16]
 800d07a:	440a      	add	r2, r1
 800d07c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d084:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	015a      	lsls	r2, r3, #5
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	4413      	add	r3, r2
 800d090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	683a      	ldr	r2, [r7, #0]
 800d098:	7812      	ldrb	r2, [r2, #0]
 800d09a:	0151      	lsls	r1, r2, #5
 800d09c:	693a      	ldr	r2, [r7, #16]
 800d09e:	440a      	add	r2, r1
 800d0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d0a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d902      	bls.n	800d0c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	75fb      	strb	r3, [r7, #23]
          break;
 800d0be:	e056      	b.n	800d16e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	015a      	lsls	r2, r3, #5
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0d8:	d0e7      	beq.n	800d0aa <USB_EPStopXfer+0x82>
 800d0da:	e048      	b.n	800d16e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	015a      	lsls	r2, r3, #5
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0f4:	d13b      	bne.n	800d16e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	015a      	lsls	r2, r3, #5
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	4413      	add	r3, r2
 800d100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	7812      	ldrb	r2, [r2, #0]
 800d10a:	0151      	lsls	r1, r2, #5
 800d10c:	693a      	ldr	r2, [r7, #16]
 800d10e:	440a      	add	r2, r1
 800d110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d114:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d118:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	015a      	lsls	r2, r3, #5
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	4413      	add	r3, r2
 800d124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	7812      	ldrb	r2, [r2, #0]
 800d12e:	0151      	lsls	r1, r2, #5
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	440a      	add	r2, r1
 800d134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d13c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3301      	adds	r3, #1
 800d142:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f242 7210 	movw	r2, #10000	; 0x2710
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d902      	bls.n	800d154 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	75fb      	strb	r3, [r7, #23]
          break;
 800d152:	e00c      	b.n	800d16e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d16c:	d0e7      	beq.n	800d13e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d170:	4618      	mov	r0, r3
 800d172:	371c      	adds	r7, #28
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b089      	sub	sp, #36	; 0x24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	4611      	mov	r1, r2
 800d188:	461a      	mov	r2, r3
 800d18a:	460b      	mov	r3, r1
 800d18c:	71fb      	strb	r3, [r7, #7]
 800d18e:	4613      	mov	r3, r2
 800d190:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d19a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d123      	bne.n	800d1ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d1a2:	88bb      	ldrh	r3, [r7, #4]
 800d1a4:	3303      	adds	r3, #3
 800d1a6:	089b      	lsrs	r3, r3, #2
 800d1a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	e018      	b.n	800d1e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	031a      	lsls	r2, r3, #12
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1bc:	461a      	mov	r2, r3
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	61bb      	str	r3, [r7, #24]
 800d1e2:	69ba      	ldr	r2, [r7, #24]
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d3e2      	bcc.n	800d1b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3724      	adds	r7, #36	; 0x24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b08b      	sub	sp, #44	; 0x2c
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	4613      	mov	r3, r2
 800d204:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d20e:	88fb      	ldrh	r3, [r7, #6]
 800d210:	089b      	lsrs	r3, r3, #2
 800d212:	b29b      	uxth	r3, r3
 800d214:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d216:	88fb      	ldrh	r3, [r7, #6]
 800d218:	f003 0303 	and.w	r3, r3, #3
 800d21c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d21e:	2300      	movs	r3, #0
 800d220:	623b      	str	r3, [r7, #32]
 800d222:	e014      	b.n	800d24e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	601a      	str	r2, [r3, #0]
    pDest++;
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	3301      	adds	r3, #1
 800d234:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	3301      	adds	r3, #1
 800d23a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	3301      	adds	r3, #1
 800d240:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d244:	3301      	adds	r3, #1
 800d246:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	3301      	adds	r3, #1
 800d24c:	623b      	str	r3, [r7, #32]
 800d24e:	6a3a      	ldr	r2, [r7, #32]
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	429a      	cmp	r2, r3
 800d254:	d3e6      	bcc.n	800d224 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d256:	8bfb      	ldrh	r3, [r7, #30]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d01e      	beq.n	800d29a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d25c:	2300      	movs	r3, #0
 800d25e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d266:	461a      	mov	r2, r3
 800d268:	f107 0310 	add.w	r3, r7, #16
 800d26c:	6812      	ldr	r2, [r2, #0]
 800d26e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d270:	693a      	ldr	r2, [r7, #16]
 800d272:	6a3b      	ldr	r3, [r7, #32]
 800d274:	b2db      	uxtb	r3, r3
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	fa22 f303 	lsr.w	r3, r2, r3
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d280:	701a      	strb	r2, [r3, #0]
      i++;
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	3301      	adds	r3, #1
 800d286:	623b      	str	r3, [r7, #32]
      pDest++;
 800d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28a:	3301      	adds	r3, #1
 800d28c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d28e:	8bfb      	ldrh	r3, [r7, #30]
 800d290:	3b01      	subs	r3, #1
 800d292:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d294:	8bfb      	ldrh	r3, [r7, #30]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1ea      	bne.n	800d270 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	372c      	adds	r7, #44	; 0x2c
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	785b      	ldrb	r3, [r3, #1]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d12c      	bne.n	800d31e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	db12      	blt.n	800d2fc <USB_EPSetStall+0x54>
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00f      	beq.n	800d2fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	015a      	lsls	r2, r3, #5
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	0151      	lsls	r1, r2, #5
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	440a      	add	r2, r1
 800d2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d2fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	015a      	lsls	r2, r3, #5
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4413      	add	r3, r2
 800d304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	0151      	lsls	r1, r2, #5
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	440a      	add	r2, r1
 800d312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	e02b      	b.n	800d376 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	015a      	lsls	r2, r3, #5
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	4413      	add	r3, r2
 800d326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	db12      	blt.n	800d356 <USB_EPSetStall+0xae>
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00f      	beq.n	800d356 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	015a      	lsls	r2, r3, #5
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	4413      	add	r3, r2
 800d33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	0151      	lsls	r1, r2, #5
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	440a      	add	r2, r1
 800d34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d350:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d354:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	015a      	lsls	r2, r3, #5
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	4413      	add	r3, r2
 800d35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	0151      	lsls	r1, r2, #5
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	440a      	add	r2, r1
 800d36c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d374:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	785b      	ldrb	r3, [r3, #1]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d128      	bne.n	800d3f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	015a      	lsls	r2, r3, #5
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	68ba      	ldr	r2, [r7, #8]
 800d3b0:	0151      	lsls	r1, r2, #5
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	440a      	add	r2, r1
 800d3b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d3be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	791b      	ldrb	r3, [r3, #4]
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	d003      	beq.n	800d3d0 <USB_EPClearStall+0x4c>
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	791b      	ldrb	r3, [r3, #4]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d138      	bne.n	800d442 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	015a      	lsls	r2, r3, #5
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	0151      	lsls	r1, r2, #5
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	440a      	add	r2, r1
 800d3e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	e027      	b.n	800d442 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	015a      	lsls	r2, r3, #5
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	0151      	lsls	r1, r2, #5
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	440a      	add	r2, r1
 800d408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d40c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d410:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	791b      	ldrb	r3, [r3, #4]
 800d416:	2b03      	cmp	r3, #3
 800d418:	d003      	beq.n	800d422 <USB_EPClearStall+0x9e>
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	791b      	ldrb	r3, [r3, #4]
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d10f      	bne.n	800d442 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	015a      	lsls	r2, r3, #5
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	4413      	add	r3, r2
 800d42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	0151      	lsls	r1, r2, #5
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	440a      	add	r2, r1
 800d438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d440:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	460b      	mov	r3, r1
 800d45a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d46e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d472:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	78fb      	ldrb	r3, [r7, #3]
 800d47e:	011b      	lsls	r3, r3, #4
 800d480:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d484:	68f9      	ldr	r1, [r7, #12]
 800d486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d48a:	4313      	orrs	r3, r2
 800d48c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3714      	adds	r7, #20
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d4b6:	f023 0303 	bic.w	r3, r3, #3
 800d4ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4ca:	f023 0302 	bic.w	r3, r3, #2
 800d4ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3714      	adds	r7, #20
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d4de:	b480      	push	{r7}
 800d4e0:	b085      	sub	sp, #20
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d4f8:	f023 0303 	bic.w	r3, r3, #3
 800d4fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d50c:	f043 0302 	orr.w	r3, r3, #2
 800d510:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d512:	2300      	movs	r3, #0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3714      	adds	r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	695b      	ldr	r3, [r3, #20]
 800d52c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	699b      	ldr	r3, [r3, #24]
 800d532:	68fa      	ldr	r2, [r7, #12]
 800d534:	4013      	ands	r3, r2
 800d536:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d538:	68fb      	ldr	r3, [r7, #12]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3714      	adds	r7, #20
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d546:	b480      	push	{r7}
 800d548:	b085      	sub	sp, #20
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d558:	699b      	ldr	r3, [r3, #24]
 800d55a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d562:	69db      	ldr	r3, [r3, #28]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	4013      	ands	r3, r2
 800d568:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	0c1b      	lsrs	r3, r3, #16
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3714      	adds	r7, #20
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b085      	sub	sp, #20
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d596:	69db      	ldr	r3, [r3, #28]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	4013      	ands	r3, r2
 800d59c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	b29b      	uxth	r3, r3
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b085      	sub	sp, #20
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d5be:	78fb      	ldrb	r3, [r7, #3]
 800d5c0:	015a      	lsls	r2, r3, #5
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	4013      	ands	r3, r2
 800d5da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3714      	adds	r7, #20
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b087      	sub	sp, #28
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d60e:	78fb      	ldrb	r3, [r7, #3]
 800d610:	f003 030f 	and.w	r3, r3, #15
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	fa22 f303 	lsr.w	r3, r2, r3
 800d61a:	01db      	lsls	r3, r3, #7
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	693a      	ldr	r2, [r7, #16]
 800d620:	4313      	orrs	r3, r2
 800d622:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d624:	78fb      	ldrb	r3, [r7, #3]
 800d626:	015a      	lsls	r2, r3, #5
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	4413      	add	r3, r2
 800d62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	693a      	ldr	r2, [r7, #16]
 800d634:	4013      	ands	r3, r2
 800d636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d638:	68bb      	ldr	r3, [r7, #8]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	371c      	adds	r7, #28
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	f003 0301 	and.w	r3, r3, #1
}
 800d656:	4618      	mov	r0, r3
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d662:	b480      	push	{r7}
 800d664:	b085      	sub	sp, #20
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d67c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d680:	f023 0307 	bic.w	r3, r3, #7
 800d684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b087      	sub	sp, #28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	333c      	adds	r3, #60	; 0x3c
 800d6be:	3304      	adds	r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	4a26      	ldr	r2, [pc, #152]	; (800d760 <USB_EP0_OutStart+0xb8>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d90a      	bls.n	800d6e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6dc:	d101      	bne.n	800d6e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e037      	b.n	800d752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d710:	f043 0318 	orr.w	r3, r3, #24
 800d714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d724:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d72a:	7afb      	ldrb	r3, [r7, #11]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d10f      	bne.n	800d750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d736:	461a      	mov	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	697a      	ldr	r2, [r7, #20]
 800d746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d74a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d74e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	371c      	adds	r7, #28
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	4f54300a 	.word	0x4f54300a

0800d764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d76c:	2300      	movs	r3, #0
 800d76e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	3301      	adds	r3, #1
 800d774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4a13      	ldr	r2, [pc, #76]	; (800d7c8 <USB_CoreReset+0x64>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d901      	bls.n	800d782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e01b      	b.n	800d7ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	2b00      	cmp	r3, #0
 800d788:	daf2      	bge.n	800d770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	691b      	ldr	r3, [r3, #16]
 800d792:	f043 0201 	orr.w	r2, r3, #1
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	3301      	adds	r3, #1
 800d79e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4a09      	ldr	r2, [pc, #36]	; (800d7c8 <USB_CoreReset+0x64>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d901      	bls.n	800d7ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	e006      	b.n	800d7ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	f003 0301 	and.w	r3, r3, #1
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d0f0      	beq.n	800d79a <USB_CoreReset+0x36>

  return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	00030d40 	.word	0x00030d40

0800d7cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d7d0:	4904      	ldr	r1, [pc, #16]	; (800d7e4 <MX_FATFS_Init+0x18>)
 800d7d2:	4805      	ldr	r0, [pc, #20]	; (800d7e8 <MX_FATFS_Init+0x1c>)
 800d7d4:	f006 fb22 	bl	8013e1c <FATFS_LinkDriver>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461a      	mov	r2, r3
 800d7dc:	4b03      	ldr	r3, [pc, #12]	; (800d7ec <MX_FATFS_Init+0x20>)
 800d7de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d7e0:	bf00      	nop
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	200067f8 	.word	0x200067f8
 800d7e8:	0801a9c4 	.word	0x0801a9c4
 800d7ec:	200067f4 	.word	0x200067f4

0800d7f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d7f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d80a:	f000 f87b 	bl	800d904 <BSP_SD_IsDetected>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b01      	cmp	r3, #1
 800d812:	d001      	beq.n	800d818 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	e012      	b.n	800d83e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d818:	480b      	ldr	r0, [pc, #44]	; (800d848 <BSP_SD_Init+0x48>)
 800d81a:	f7fa ff33 	bl	8008684 <HAL_SD_Init>
 800d81e:	4603      	mov	r3, r0
 800d820:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d109      	bne.n	800d83c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d82c:	4806      	ldr	r0, [pc, #24]	; (800d848 <BSP_SD_Init+0x48>)
 800d82e:	f7fb fed9 	bl	80095e4 <HAL_SD_ConfigWideBusOperation>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d001      	beq.n	800d83c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d838:	2301      	movs	r3, #1
 800d83a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d83c:	79fb      	ldrb	r3, [r7, #7]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	200059e4 	.word	0x200059e4

0800d84c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b086      	sub	sp, #24
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d858:	2300      	movs	r3, #0
 800d85a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	68f9      	ldr	r1, [r7, #12]
 800d862:	4806      	ldr	r0, [pc, #24]	; (800d87c <BSP_SD_ReadBlocks_DMA+0x30>)
 800d864:	f7fb fb22 	bl	8008eac <HAL_SD_ReadBlocks_DMA>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d872:	7dfb      	ldrb	r3, [r7, #23]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	200059e4 	.word	0x200059e4

0800d880 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	68f9      	ldr	r1, [r7, #12]
 800d896:	4806      	ldr	r0, [pc, #24]	; (800d8b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d898:	f7fb fbe8 	bl	800906c <HAL_SD_WriteBlocks_DMA>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d001      	beq.n	800d8a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	200059e4 	.word	0x200059e4

0800d8b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d8b8:	4805      	ldr	r0, [pc, #20]	; (800d8d0 <BSP_SD_GetCardState+0x1c>)
 800d8ba:	f7fb ff2d 	bl	8009718 <HAL_SD_GetCardState>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b04      	cmp	r3, #4
 800d8c2:	bf14      	ite	ne
 800d8c4:	2301      	movne	r3, #1
 800d8c6:	2300      	moveq	r3, #0
 800d8c8:	b2db      	uxtb	r3, r3
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	200059e4 	.word	0x200059e4

0800d8d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	4803      	ldr	r0, [pc, #12]	; (800d8ec <BSP_SD_GetCardInfo+0x18>)
 800d8e0:	f7fb fe54 	bl	800958c <HAL_SD_GetCardInfo>
}
 800d8e4:	bf00      	nop
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	200059e4 	.word	0x200059e4

0800d8f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d8f8:	f000 f9b2 	bl	800dc60 <BSP_SD_ReadCpltCallback>
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d90a:	2301      	movs	r3, #1
 800d90c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d90e:	f000 f80b 	bl	800d928 <BSP_PlatformIsDetected>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d101      	bne.n	800d91c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d918:	2300      	movs	r3, #0
 800d91a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	b2db      	uxtb	r3, r3
}
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d92e:	2301      	movs	r3, #1
 800d930:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d932:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d936:	4806      	ldr	r0, [pc, #24]	; (800d950 <BSP_PlatformIsDetected+0x28>)
 800d938:	f7f7 fa88 	bl	8004e4c <HAL_GPIO_ReadPin>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d942:	2300      	movs	r3, #0
 800d944:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d946:	79fb      	ldrb	r3, [r7, #7]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	40020000 	.word	0x40020000

0800d954 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d95c:	f006 faf6 	bl	8013f4c <osKernelSysTick>
 800d960:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d962:	e006      	b.n	800d972 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d964:	f7ff ffa6 	bl	800d8b4 <BSP_SD_GetCardState>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d101      	bne.n	800d972 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	e009      	b.n	800d986 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d972:	f006 faeb 	bl	8013f4c <osKernelSysTick>
 800d976:	4602      	mov	r2, r0
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	1ad3      	subs	r3, r2, r3
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d8f0      	bhi.n	800d964 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d982:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d99a:	4b0b      	ldr	r3, [pc, #44]	; (800d9c8 <SD_CheckStatus+0x38>)
 800d99c:	2201      	movs	r2, #1
 800d99e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d9a0:	f7ff ff88 	bl	800d8b4 <BSP_SD_GetCardState>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d107      	bne.n	800d9ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d9aa:	4b07      	ldr	r3, [pc, #28]	; (800d9c8 <SD_CheckStatus+0x38>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f023 0301 	bic.w	r3, r3, #1
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	4b04      	ldr	r3, [pc, #16]	; (800d9c8 <SD_CheckStatus+0x38>)
 800d9b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d9ba:	4b03      	ldr	r3, [pc, #12]	; (800d9c8 <SD_CheckStatus+0x38>)
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	b2db      	uxtb	r3, r3
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	2000001d 	.word	0x2000001d

0800d9cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d9cc:	b590      	push	{r4, r7, lr}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d9d6:	4b20      	ldr	r3, [pc, #128]	; (800da58 <SD_initialize+0x8c>)
 800d9d8:	2201      	movs	r2, #1
 800d9da:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d9dc:	f006 faaa 	bl	8013f34 <osKernelRunning>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d030      	beq.n	800da48 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d9e6:	f7ff ff0b 	bl	800d800 <BSP_SD_Init>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d107      	bne.n	800da00 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d9f0:	79fb      	ldrb	r3, [r7, #7]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7ff ffcc 	bl	800d990 <SD_CheckStatus>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	4b16      	ldr	r3, [pc, #88]	; (800da58 <SD_initialize+0x8c>)
 800d9fe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800da00:	4b15      	ldr	r3, [pc, #84]	; (800da58 <SD_initialize+0x8c>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	b2db      	uxtb	r3, r3
 800da06:	2b01      	cmp	r3, #1
 800da08:	d01e      	beq.n	800da48 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800da0a:	4b14      	ldr	r3, [pc, #80]	; (800da5c <SD_initialize+0x90>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10e      	bne.n	800da30 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800da12:	4b13      	ldr	r3, [pc, #76]	; (800da60 <SD_initialize+0x94>)
 800da14:	f107 0408 	add.w	r4, r7, #8
 800da18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800da1e:	f107 0308 	add.w	r3, r7, #8
 800da22:	2100      	movs	r1, #0
 800da24:	4618      	mov	r0, r3
 800da26:	f006 fbca 	bl	80141be <osMessageCreate>
 800da2a:	4603      	mov	r3, r0
 800da2c:	4a0b      	ldr	r2, [pc, #44]	; (800da5c <SD_initialize+0x90>)
 800da2e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800da30:	4b0a      	ldr	r3, [pc, #40]	; (800da5c <SD_initialize+0x90>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d107      	bne.n	800da48 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800da38:	4b07      	ldr	r3, [pc, #28]	; (800da58 <SD_initialize+0x8c>)
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f043 0301 	orr.w	r3, r3, #1
 800da42:	b2da      	uxtb	r2, r3
 800da44:	4b04      	ldr	r3, [pc, #16]	; (800da58 <SD_initialize+0x8c>)
 800da46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800da48:	4b03      	ldr	r3, [pc, #12]	; (800da58 <SD_initialize+0x8c>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	b2db      	uxtb	r3, r3
}
 800da4e:	4618      	mov	r0, r3
 800da50:	371c      	adds	r7, #28
 800da52:	46bd      	mov	sp, r7
 800da54:	bd90      	pop	{r4, r7, pc}
 800da56:	bf00      	nop
 800da58:	2000001d 	.word	0x2000001d
 800da5c:	200067fc 	.word	0x200067fc
 800da60:	0801a904 	.word	0x0801a904

0800da64 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800da6e:	79fb      	ldrb	r3, [r7, #7]
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff ff8d 	bl	800d990 <SD_CheckStatus>
 800da76:	4603      	mov	r3, r0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b08a      	sub	sp, #40	; 0x28
 800da84:	af00      	add	r7, sp, #0
 800da86:	60b9      	str	r1, [r7, #8]
 800da88:	607a      	str	r2, [r7, #4]
 800da8a:	603b      	str	r3, [r7, #0]
 800da8c:	4603      	mov	r3, r0
 800da8e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800da90:	2301      	movs	r3, #1
 800da92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800da96:	f247 5030 	movw	r0, #30000	; 0x7530
 800da9a:	f7ff ff5b 	bl	800d954 <SD_CheckStatusWithTimeout>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	da02      	bge.n	800daaa <SD_read+0x2a>
  {
    return res;
 800daa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daa8:	e032      	b.n	800db10 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	68b8      	ldr	r0, [r7, #8]
 800dab0:	f7ff fecc 	bl	800d84c <BSP_SD_ReadBlocks_DMA>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800daba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d124      	bne.n	800db0c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800dac2:	4b15      	ldr	r3, [pc, #84]	; (800db18 <SD_read+0x98>)
 800dac4:	6819      	ldr	r1, [r3, #0]
 800dac6:	f107 0314 	add.w	r3, r7, #20
 800daca:	f247 5230 	movw	r2, #30000	; 0x7530
 800dace:	4618      	mov	r0, r3
 800dad0:	f006 fbde 	bl	8014290 <osMessageGet>

    if (event.status == osEventMessage)
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	2b10      	cmp	r3, #16
 800dad8:	d118      	bne.n	800db0c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d115      	bne.n	800db0c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800dae0:	f006 fa34 	bl	8013f4c <osKernelSysTick>
 800dae4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dae6:	e008      	b.n	800dafa <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dae8:	f7ff fee4 	bl	800d8b4 <BSP_SD_GetCardState>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d103      	bne.n	800dafa <SD_read+0x7a>
              {
                res = RES_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800daf8:	e008      	b.n	800db0c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dafa:	f006 fa27 	bl	8013f4c <osKernelSysTick>
 800dafe:	4602      	mov	r2, r0
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	f247 522f 	movw	r2, #29999	; 0x752f
 800db08:	4293      	cmp	r3, r2
 800db0a:	d9ed      	bls.n	800dae8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800db0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800db10:	4618      	mov	r0, r3
 800db12:	3728      	adds	r7, #40	; 0x28
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200067fc 	.word	0x200067fc

0800db1c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b08a      	sub	sp, #40	; 0x28
 800db20:	af00      	add	r7, sp, #0
 800db22:	60b9      	str	r1, [r7, #8]
 800db24:	607a      	str	r2, [r7, #4]
 800db26:	603b      	str	r3, [r7, #0]
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800db32:	f247 5030 	movw	r0, #30000	; 0x7530
 800db36:	f7ff ff0d 	bl	800d954 <SD_CheckStatusWithTimeout>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	da02      	bge.n	800db46 <SD_write+0x2a>
  {
    return res;
 800db40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db44:	e02e      	b.n	800dba4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800db46:	683a      	ldr	r2, [r7, #0]
 800db48:	6879      	ldr	r1, [r7, #4]
 800db4a:	68b8      	ldr	r0, [r7, #8]
 800db4c:	f7ff fe98 	bl	800d880 <BSP_SD_WriteBlocks_DMA>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d124      	bne.n	800dba0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800db56:	4b15      	ldr	r3, [pc, #84]	; (800dbac <SD_write+0x90>)
 800db58:	6819      	ldr	r1, [r3, #0]
 800db5a:	f107 0314 	add.w	r3, r7, #20
 800db5e:	f247 5230 	movw	r2, #30000	; 0x7530
 800db62:	4618      	mov	r0, r3
 800db64:	f006 fb94 	bl	8014290 <osMessageGet>

    if (event.status == osEventMessage)
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2b10      	cmp	r3, #16
 800db6c:	d118      	bne.n	800dba0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	2b02      	cmp	r3, #2
 800db72:	d115      	bne.n	800dba0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800db74:	f006 f9ea 	bl	8013f4c <osKernelSysTick>
 800db78:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800db7a:	e008      	b.n	800db8e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800db7c:	f7ff fe9a 	bl	800d8b4 <BSP_SD_GetCardState>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d103      	bne.n	800db8e <SD_write+0x72>
          {
            res = RES_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800db8c:	e008      	b.n	800dba0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800db8e:	f006 f9dd 	bl	8013f4c <osKernelSysTick>
 800db92:	4602      	mov	r2, r0
 800db94:	6a3b      	ldr	r3, [r7, #32]
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	f247 522f 	movw	r2, #29999	; 0x752f
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d9ed      	bls.n	800db7c <SD_write+0x60>
    }

  }
#endif

  return res;
 800dba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3728      	adds	r7, #40	; 0x28
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	200067fc 	.word	0x200067fc

0800dbb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b08c      	sub	sp, #48	; 0x30
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	603a      	str	r2, [r7, #0]
 800dbba:	71fb      	strb	r3, [r7, #7]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dbc6:	4b25      	ldr	r3, [pc, #148]	; (800dc5c <SD_ioctl+0xac>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	f003 0301 	and.w	r3, r3, #1
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <SD_ioctl+0x28>
 800dbd4:	2303      	movs	r3, #3
 800dbd6:	e03c      	b.n	800dc52 <SD_ioctl+0xa2>

  switch (cmd)
 800dbd8:	79bb      	ldrb	r3, [r7, #6]
 800dbda:	2b03      	cmp	r3, #3
 800dbdc:	d834      	bhi.n	800dc48 <SD_ioctl+0x98>
 800dbde:	a201      	add	r2, pc, #4	; (adr r2, 800dbe4 <SD_ioctl+0x34>)
 800dbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe4:	0800dbf5 	.word	0x0800dbf5
 800dbe8:	0800dbfd 	.word	0x0800dbfd
 800dbec:	0800dc15 	.word	0x0800dc15
 800dbf0:	0800dc2f 	.word	0x0800dc2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dbfa:	e028      	b.n	800dc4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dbfc:	f107 030c 	add.w	r3, r7, #12
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff fe67 	bl	800d8d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dc06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc12:	e01c      	b.n	800dc4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc14:	f107 030c 	add.w	r3, r7, #12
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff fe5b 	bl	800d8d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dc26:	2300      	movs	r3, #0
 800dc28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc2c:	e00f      	b.n	800dc4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc2e:	f107 030c 	add.w	r3, r7, #12
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7ff fe4e 	bl	800d8d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	0a5a      	lsrs	r2, r3, #9
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dc40:	2300      	movs	r3, #0
 800dc42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc46:	e002      	b.n	800dc4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dc48:	2304      	movs	r3, #4
 800dc4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dc4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3730      	adds	r7, #48	; 0x30
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	2000001d 	.word	0x2000001d

0800dc60 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800dc64:	4b04      	ldr	r3, [pc, #16]	; (800dc78 <BSP_SD_ReadCpltCallback+0x18>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f006 facf 	bl	8014210 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800dc72:	bf00      	nop
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	200067fc 	.word	0x200067fc

0800dc7c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	460b      	mov	r3, r1
 800dc86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800dc88:	f44f 701d 	mov.w	r0, #628	; 0x274
 800dc8c:	f009 fd28 	bl	80176e0 <USBD_static_malloc>
 800dc90:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d109      	bne.n	800dcac <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	32b0      	adds	r2, #176	; 0xb0
 800dca2:	2100      	movs	r1, #0
 800dca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dca8:	2302      	movs	r3, #2
 800dcaa:	e06e      	b.n	800dd8a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	32b0      	adds	r2, #176	; 0xb0
 800dcb6:	68f9      	ldr	r1, [r7, #12]
 800dcb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	32b0      	adds	r2, #176	; 0xb0
 800dcc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	7c1b      	ldrb	r3, [r3, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d12b      	bne.n	800dd30 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800dcd8:	4b2e      	ldr	r3, [pc, #184]	; (800dd94 <USBD_MSC_Init+0x118>)
 800dcda:	7819      	ldrb	r1, [r3, #0]
 800dcdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dce0:	2202      	movs	r2, #2
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f009 fb6b 	bl	80173be <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800dce8:	4b2a      	ldr	r3, [pc, #168]	; (800dd94 <USBD_MSC_Init+0x118>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	f003 020f 	and.w	r2, r3, #15
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4413      	add	r3, r2
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	440b      	add	r3, r1
 800dcfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd00:	2201      	movs	r2, #1
 800dd02:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800dd04:	4b24      	ldr	r3, [pc, #144]	; (800dd98 <USBD_MSC_Init+0x11c>)
 800dd06:	7819      	ldrb	r1, [r3, #0]
 800dd08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f009 fb55 	bl	80173be <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800dd14:	4b20      	ldr	r3, [pc, #128]	; (800dd98 <USBD_MSC_Init+0x11c>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	f003 020f 	and.w	r2, r3, #15
 800dd1c:	6879      	ldr	r1, [r7, #4]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4413      	add	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	440b      	add	r3, r1
 800dd28:	3324      	adds	r3, #36	; 0x24
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	801a      	strh	r2, [r3, #0]
 800dd2e:	e028      	b.n	800dd82 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800dd30:	4b18      	ldr	r3, [pc, #96]	; (800dd94 <USBD_MSC_Init+0x118>)
 800dd32:	7819      	ldrb	r1, [r3, #0]
 800dd34:	2340      	movs	r3, #64	; 0x40
 800dd36:	2202      	movs	r2, #2
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f009 fb40 	bl	80173be <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800dd3e:	4b15      	ldr	r3, [pc, #84]	; (800dd94 <USBD_MSC_Init+0x118>)
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	f003 020f 	and.w	r2, r3, #15
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	4613      	mov	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	440b      	add	r3, r1
 800dd52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd56:	2201      	movs	r2, #1
 800dd58:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800dd5a:	4b0f      	ldr	r3, [pc, #60]	; (800dd98 <USBD_MSC_Init+0x11c>)
 800dd5c:	7819      	ldrb	r1, [r3, #0]
 800dd5e:	2340      	movs	r3, #64	; 0x40
 800dd60:	2202      	movs	r2, #2
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f009 fb2b 	bl	80173be <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800dd68:	4b0b      	ldr	r3, [pc, #44]	; (800dd98 <USBD_MSC_Init+0x11c>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	f003 020f 	and.w	r2, r3, #15
 800dd70:	6879      	ldr	r1, [r7, #4]
 800dd72:	4613      	mov	r3, r2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	4413      	add	r3, r2
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	440b      	add	r3, r1
 800dd7c:	3324      	adds	r3, #36	; 0x24
 800dd7e:	2201      	movs	r2, #1
 800dd80:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 fa2c 	bl	800e1e0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	20000083 	.word	0x20000083
 800dd98:	20000082 	.word	0x20000082

0800dd9c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	460b      	mov	r3, r1
 800dda6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800dda8:	4b26      	ldr	r3, [pc, #152]	; (800de44 <USBD_MSC_DeInit+0xa8>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	4619      	mov	r1, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f009 fb2b 	bl	801740a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800ddb4:	4b23      	ldr	r3, [pc, #140]	; (800de44 <USBD_MSC_DeInit+0xa8>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	f003 020f 	and.w	r2, r3, #15
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	440b      	add	r3, r1
 800ddc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ddcc:	2200      	movs	r2, #0
 800ddce:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800ddd0:	4b1d      	ldr	r3, [pc, #116]	; (800de48 <USBD_MSC_DeInit+0xac>)
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f009 fb17 	bl	801740a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800dddc:	4b1a      	ldr	r3, [pc, #104]	; (800de48 <USBD_MSC_DeInit+0xac>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	f003 020f 	and.w	r2, r3, #15
 800dde4:	6879      	ldr	r1, [r7, #4]
 800dde6:	4613      	mov	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4413      	add	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	440b      	add	r3, r1
 800ddf0:	3324      	adds	r3, #36	; 0x24
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	32b0      	adds	r2, #176	; 0xb0
 800de00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d018      	beq.n	800de3a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 fa67 	bl	800e2dc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	32b0      	adds	r2, #176	; 0xb0
 800de18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f009 fc6d 	bl	80176fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	32b0      	adds	r2, #176	; 0xb0
 800de2c:	2100      	movs	r1, #0
 800de2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3708      	adds	r7, #8
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	20000083 	.word	0x20000083
 800de48:	20000082 	.word	0x20000082

0800de4c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	32b0      	adds	r2, #176	; 0xb0
 800de60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de64:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d101      	bne.n	800de78 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800de74:	2303      	movs	r3, #3
 800de76:	e0e1      	b.n	800e03c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de80:	2b00      	cmp	r3, #0
 800de82:	d053      	beq.n	800df2c <USBD_MSC_Setup+0xe0>
 800de84:	2b20      	cmp	r3, #32
 800de86:	f040 80d1 	bne.w	800e02c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	785b      	ldrb	r3, [r3, #1]
 800de8e:	2bfe      	cmp	r3, #254	; 0xfe
 800de90:	d002      	beq.n	800de98 <USBD_MSC_Setup+0x4c>
 800de92:	2bff      	cmp	r3, #255	; 0xff
 800de94:	d02a      	beq.n	800deec <USBD_MSC_Setup+0xa0>
 800de96:	e041      	b.n	800df1c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	885b      	ldrh	r3, [r3, #2]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d11e      	bne.n	800dede <USBD_MSC_Setup+0x92>
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	88db      	ldrh	r3, [r3, #6]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d11a      	bne.n	800dede <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800deae:	2b00      	cmp	r3, #0
 800deb0:	da15      	bge.n	800dede <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	33b0      	adds	r3, #176	; 0xb0
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4413      	add	r3, r2
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	699b      	ldr	r3, [r3, #24]
 800dec4:	4798      	blx	r3
 800dec6:	4603      	mov	r3, r0
 800dec8:	461a      	mov	r2, r3
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2201      	movs	r2, #1
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f003 f923 	bl	8011120 <USBD_CtlSendData>
 800deda:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dedc:	e025      	b.n	800df2a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f003 f8ac 	bl	801103e <USBD_CtlError>
            ret = USBD_FAIL;
 800dee6:	2303      	movs	r3, #3
 800dee8:	75fb      	strb	r3, [r7, #23]
          break;
 800deea:	e01e      	b.n	800df2a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	885b      	ldrh	r3, [r3, #2]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10c      	bne.n	800df0e <USBD_MSC_Setup+0xc2>
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	88db      	ldrh	r3, [r3, #6]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d108      	bne.n	800df0e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800df02:	2b00      	cmp	r3, #0
 800df04:	db03      	blt.n	800df0e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 f9b4 	bl	800e274 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df0c:	e00d      	b.n	800df2a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800df0e:	6839      	ldr	r1, [r7, #0]
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f003 f894 	bl	801103e <USBD_CtlError>
            ret = USBD_FAIL;
 800df16:	2303      	movs	r3, #3
 800df18:	75fb      	strb	r3, [r7, #23]
          break;
 800df1a:	e006      	b.n	800df2a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800df1c:	6839      	ldr	r1, [r7, #0]
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f003 f88d 	bl	801103e <USBD_CtlError>
          ret = USBD_FAIL;
 800df24:	2303      	movs	r3, #3
 800df26:	75fb      	strb	r3, [r7, #23]
          break;
 800df28:	bf00      	nop
      }
      break;
 800df2a:	e086      	b.n	800e03a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	785b      	ldrb	r3, [r3, #1]
 800df30:	2b0b      	cmp	r3, #11
 800df32:	d872      	bhi.n	800e01a <USBD_MSC_Setup+0x1ce>
 800df34:	a201      	add	r2, pc, #4	; (adr r2, 800df3c <USBD_MSC_Setup+0xf0>)
 800df36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df3a:	bf00      	nop
 800df3c:	0800df6d 	.word	0x0800df6d
 800df40:	0800dfe9 	.word	0x0800dfe9
 800df44:	0800e01b 	.word	0x0800e01b
 800df48:	0800e01b 	.word	0x0800e01b
 800df4c:	0800e01b 	.word	0x0800e01b
 800df50:	0800e01b 	.word	0x0800e01b
 800df54:	0800e01b 	.word	0x0800e01b
 800df58:	0800e01b 	.word	0x0800e01b
 800df5c:	0800e01b 	.word	0x0800e01b
 800df60:	0800e01b 	.word	0x0800e01b
 800df64:	0800df97 	.word	0x0800df97
 800df68:	0800dfc1 	.word	0x0800dfc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df72:	b2db      	uxtb	r3, r3
 800df74:	2b03      	cmp	r3, #3
 800df76:	d107      	bne.n	800df88 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800df78:	f107 030e 	add.w	r3, r7, #14
 800df7c:	2202      	movs	r2, #2
 800df7e:	4619      	mov	r1, r3
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f003 f8cd 	bl	8011120 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df86:	e050      	b.n	800e02a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f003 f857 	bl	801103e <USBD_CtlError>
            ret = USBD_FAIL;
 800df90:	2303      	movs	r3, #3
 800df92:	75fb      	strb	r3, [r7, #23]
          break;
 800df94:	e049      	b.n	800e02a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b03      	cmp	r3, #3
 800dfa0:	d107      	bne.n	800dfb2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	3304      	adds	r3, #4
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f003 f8b8 	bl	8011120 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dfb0:	e03b      	b.n	800e02a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f003 f842 	bl	801103e <USBD_CtlError>
            ret = USBD_FAIL;
 800dfba:	2303      	movs	r3, #3
 800dfbc:	75fb      	strb	r3, [r7, #23]
          break;
 800dfbe:	e034      	b.n	800e02a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	2b03      	cmp	r3, #3
 800dfca:	d106      	bne.n	800dfda <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	885b      	ldrh	r3, [r3, #2]
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dfd8:	e027      	b.n	800e02a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f003 f82e 	bl	801103e <USBD_CtlError>
            ret = USBD_FAIL;
 800dfe2:	2303      	movs	r3, #3
 800dfe4:	75fb      	strb	r3, [r7, #23]
          break;
 800dfe6:	e020      	b.n	800e02a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	2b03      	cmp	r3, #3
 800dff2:	d119      	bne.n	800e028 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	885b      	ldrh	r3, [r3, #2]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d115      	bne.n	800e028 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	889b      	ldrh	r3, [r3, #4]
 800e000:	b2db      	uxtb	r3, r3
 800e002:	4619      	mov	r1, r3
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f009 fa1f 	bl	8017448 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	889b      	ldrh	r3, [r3, #4]
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 fb2e 	bl	800e674 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800e018:	e006      	b.n	800e028 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800e01a:	6839      	ldr	r1, [r7, #0]
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f003 f80e 	bl	801103e <USBD_CtlError>
          ret = USBD_FAIL;
 800e022:	2303      	movs	r3, #3
 800e024:	75fb      	strb	r3, [r7, #23]
          break;
 800e026:	e000      	b.n	800e02a <USBD_MSC_Setup+0x1de>
          break;
 800e028:	bf00      	nop
      }
      break;
 800e02a:	e006      	b.n	800e03a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800e02c:	6839      	ldr	r1, [r7, #0]
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f003 f805 	bl	801103e <USBD_CtlError>
      ret = USBD_FAIL;
 800e034:	2303      	movs	r3, #3
 800e036:	75fb      	strb	r3, [r7, #23]
      break;
 800e038:	bf00      	nop
  }

  return (uint8_t)ret;
 800e03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	460b      	mov	r3, r1
 800e04e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800e050:	78fb      	ldrb	r3, [r7, #3]
 800e052:	4619      	mov	r1, r3
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 f959 	bl	800e30c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800e070:	78fb      	ldrb	r3, [r7, #3]
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f983 	bl	800e380 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800e08c:	2181      	movs	r1, #129	; 0x81
 800e08e:	4812      	ldr	r0, [pc, #72]	; (800e0d8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800e090:	f002 f972 	bl	8010378 <USBD_GetEpDesc>
 800e094:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800e096:	2101      	movs	r1, #1
 800e098:	480f      	ldr	r0, [pc, #60]	; (800e0d8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800e09a:	f002 f96d 	bl	8010378 <USBD_GetEpDesc>
 800e09e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d006      	beq.n	800e0b4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	711a      	strb	r2, [r3, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f042 0202 	orr.w	r2, r2, #2
 800e0b2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d006      	beq.n	800e0c8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	711a      	strb	r2, [r3, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f042 0202 	orr.w	r2, r2, #2
 800e0c6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2220      	movs	r2, #32
 800e0cc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800e0ce:	4b02      	ldr	r3, [pc, #8]	; (800e0d8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3710      	adds	r7, #16
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	20000058 	.word	0x20000058

0800e0dc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800e0e4:	2181      	movs	r1, #129	; 0x81
 800e0e6:	4812      	ldr	r0, [pc, #72]	; (800e130 <USBD_MSC_GetFSCfgDesc+0x54>)
 800e0e8:	f002 f946 	bl	8010378 <USBD_GetEpDesc>
 800e0ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800e0ee:	2101      	movs	r1, #1
 800e0f0:	480f      	ldr	r0, [pc, #60]	; (800e130 <USBD_MSC_GetFSCfgDesc+0x54>)
 800e0f2:	f002 f941 	bl	8010378 <USBD_GetEpDesc>
 800e0f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d006      	beq.n	800e10c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e106:	711a      	strb	r2, [r3, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d006      	beq.n	800e120 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	2200      	movs	r2, #0
 800e116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e11a:	711a      	strb	r2, [r3, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2220      	movs	r2, #32
 800e124:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800e126:	4b02      	ldr	r3, [pc, #8]	; (800e130 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	20000058 	.word	0x20000058

0800e134 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800e13c:	2181      	movs	r1, #129	; 0x81
 800e13e:	4812      	ldr	r0, [pc, #72]	; (800e188 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800e140:	f002 f91a 	bl	8010378 <USBD_GetEpDesc>
 800e144:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800e146:	2101      	movs	r1, #1
 800e148:	480f      	ldr	r0, [pc, #60]	; (800e188 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800e14a:	f002 f915 	bl	8010378 <USBD_GetEpDesc>
 800e14e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d006      	beq.n	800e164 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e15e:	711a      	strb	r2, [r3, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d006      	beq.n	800e178 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e172:	711a      	strb	r2, [r3, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2220      	movs	r2, #32
 800e17c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800e17e:	4b02      	ldr	r3, [pc, #8]	; (800e188 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800e180:	4618      	mov	r0, r3
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	20000058 	.word	0x20000058

0800e18c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	220a      	movs	r2, #10
 800e198:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800e19a:	4b03      	ldr	r3, [pc, #12]	; (800e1a8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	20000078 	.word	0x20000078

0800e1ac <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d101      	bne.n	800e1c0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e1bc:	2303      	movs	r3, #3
 800e1be:	e009      	b.n	800e1d4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	33b0      	adds	r3, #176	; 0xb0
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	32b0      	adds	r2, #176	; 0xb0
 800e1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d032      	beq.n	800e264 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2200      	movs	r2, #0
 800e216:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2200      	movs	r2, #0
 800e21e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	33b0      	adds	r3, #176	; 0xb0
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4413      	add	r3, r2
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2000      	movs	r0, #0
 800e236:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800e238:	4b0c      	ldr	r3, [pc, #48]	; (800e26c <MSC_BOT_Init+0x8c>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	4619      	mov	r1, r3
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f009 f902 	bl	8017448 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800e244:	4b0a      	ldr	r3, [pc, #40]	; (800e270 <MSC_BOT_Init+0x90>)
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	4619      	mov	r1, r3
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f009 f8fc 	bl	8017448 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e250:	4b06      	ldr	r3, [pc, #24]	; (800e26c <MSC_BOT_Init+0x8c>)
 800e252:	7819      	ldrb	r1, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e25a:	231f      	movs	r3, #31
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f009 f9bc 	bl	80175da <USBD_LL_PrepareReceive>
 800e262:	e000      	b.n	800e266 <MSC_BOT_Init+0x86>
    return;
 800e264:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	20000083 	.word	0x20000083
 800e270:	20000082 	.word	0x20000082

0800e274 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	32b0      	adds	r2, #176	; 0xb0
 800e286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e28a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d01b      	beq.n	800e2ca <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2201      	movs	r2, #1
 800e29c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800e29e:	4b0d      	ldr	r3, [pc, #52]	; (800e2d4 <MSC_BOT_Reset+0x60>)
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f009 f90d 	bl	80174c4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800e2aa:	4b0b      	ldr	r3, [pc, #44]	; (800e2d8 <MSC_BOT_Reset+0x64>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f009 f907 	bl	80174c4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e2b6:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <MSC_BOT_Reset+0x64>)
 800e2b8:	7819      	ldrb	r1, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e2c0:	231f      	movs	r3, #31
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f009 f989 	bl	80175da <USBD_LL_PrepareReceive>
 800e2c8:	e000      	b.n	800e2cc <MSC_BOT_Reset+0x58>
    return;
 800e2ca:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	20000082 	.word	0x20000082
 800e2d8:	20000083 	.word	0x20000083

0800e2dc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	32b0      	adds	r2, #176	; 0xb0
 800e2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d002      	beq.n	800e300 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	721a      	strb	r2, [r3, #8]
  }
}
 800e300:	bf00      	nop
 800e302:	3714      	adds	r7, #20
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	460b      	mov	r3, r1
 800e316:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	32b0      	adds	r2, #176	; 0xb0
 800e322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e326:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d020      	beq.n	800e370 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	7a1b      	ldrb	r3, [r3, #8]
 800e332:	2b02      	cmp	r3, #2
 800e334:	d005      	beq.n	800e342 <MSC_BOT_DataIn+0x36>
 800e336:	2b02      	cmp	r3, #2
 800e338:	db1c      	blt.n	800e374 <MSC_BOT_DataIn+0x68>
 800e33a:	3b03      	subs	r3, #3
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d819      	bhi.n	800e374 <MSC_BOT_DataIn+0x68>
 800e340:	e011      	b.n	800e366 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e34e:	461a      	mov	r2, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 f9c9 	bl	800e6e8 <SCSI_ProcessCmd>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	da0d      	bge.n	800e378 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e35c:	2101      	movs	r1, #1
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 f90c 	bl	800e57c <MSC_BOT_SendCSW>
      }
      break;
 800e364:	e008      	b.n	800e378 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e366:	2100      	movs	r1, #0
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 f907 	bl	800e57c <MSC_BOT_SendCSW>
      break;
 800e36e:	e004      	b.n	800e37a <MSC_BOT_DataIn+0x6e>
    return;
 800e370:	bf00      	nop
 800e372:	e002      	b.n	800e37a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800e374:	bf00      	nop
 800e376:	e000      	b.n	800e37a <MSC_BOT_DataIn+0x6e>
      break;
 800e378:	bf00      	nop
  }
}
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	460b      	mov	r3, r1
 800e38a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	32b0      	adds	r2, #176	; 0xb0
 800e396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e39a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d01c      	beq.n	800e3dc <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	7a1b      	ldrb	r3, [r3, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d002      	beq.n	800e3b0 <MSC_BOT_DataOut+0x30>
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d004      	beq.n	800e3b8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800e3ae:	e018      	b.n	800e3e2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f819 	bl	800e3e8 <MSC_BOT_CBW_Decode>
      break;
 800e3b6:	e014      	b.n	800e3e2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f98e 	bl	800e6e8 <SCSI_ProcessCmd>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	da06      	bge.n	800e3e0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f8d1 	bl	800e57c <MSC_BOT_SendCSW>
      break;
 800e3da:	e001      	b.n	800e3e0 <MSC_BOT_DataOut+0x60>
    return;
 800e3dc:	bf00      	nop
 800e3de:	e000      	b.n	800e3e2 <MSC_BOT_DataOut+0x62>
      break;
 800e3e0:	bf00      	nop
  }
}
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	32b0      	adds	r2, #176	; 0xb0
 800e3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d079      	beq.n	800e4fa <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800e41e:	4b3a      	ldr	r3, [pc, #232]	; (800e508 <MSC_BOT_CBW_Decode+0x120>)
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f009 f8f9 	bl	801761c <USBD_LL_GetRxDataSize>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b1f      	cmp	r3, #31
 800e42e:	d114      	bne.n	800e45a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800e436:	4a35      	ldr	r2, [pc, #212]	; (800e50c <MSC_BOT_CBW_Decode+0x124>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d10e      	bne.n	800e45a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e442:	2b01      	cmp	r3, #1
 800e444:	d809      	bhi.n	800e45a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d004      	beq.n	800e45a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e456:	2b10      	cmp	r3, #16
 800e458:	d90e      	bls.n	800e478 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e460:	2320      	movs	r3, #32
 800e462:	2205      	movs	r2, #5
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 fe28 	bl	800f0ba <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2202      	movs	r2, #2
 800e46e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 f8bd 	bl	800e5f0 <MSC_BOT_Abort>
 800e476:	e043      	b.n	800e500 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e484:	461a      	mov	r2, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f92e 	bl	800e6e8 <SCSI_ProcessCmd>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	da0c      	bge.n	800e4ac <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	7a1b      	ldrb	r3, [r3, #8]
 800e496:	2b05      	cmp	r3, #5
 800e498:	d104      	bne.n	800e4a4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e49a:	2101      	movs	r1, #1
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 f86d 	bl	800e57c <MSC_BOT_SendCSW>
 800e4a2:	e02d      	b.n	800e500 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 f8a3 	bl	800e5f0 <MSC_BOT_Abort>
 800e4aa:	e029      	b.n	800e500 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	7a1b      	ldrb	r3, [r3, #8]
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d024      	beq.n	800e4fe <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d020      	beq.n	800e4fe <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	d01c      	beq.n	800e4fe <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d009      	beq.n	800e4e0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f103 0110 	add.w	r1, r3, #16
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f819 	bl	800e510 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800e4de:	e00f      	b.n	800e500 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d104      	bne.n	800e4f2 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 f846 	bl	800e57c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800e4f0:	e006      	b.n	800e500 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f87c 	bl	800e5f0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e4f8:	e002      	b.n	800e500 <MSC_BOT_CBW_Decode+0x118>
    return;
 800e4fa:	bf00      	nop
 800e4fc:	e000      	b.n	800e500 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800e4fe:	bf00      	nop
    }
  }
}
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	20000083 	.word	0x20000083
 800e50c:	43425355 	.word	0x43425355

0800e510 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	32b0      	adds	r2, #176	; 0xb0
 800e526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e52a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d01e      	beq.n	800e570 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	4293      	cmp	r3, r2
 800e53c:	bf28      	it	cs
 800e53e:	4613      	movcs	r3, r2
 800e540:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	1ad2      	subs	r2, r2, r3
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	2200      	movs	r2, #0
 800e556:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2204      	movs	r2, #4
 800e55e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800e560:	4b05      	ldr	r3, [pc, #20]	; (800e578 <MSC_BOT_SendData+0x68>)
 800e562:	7819      	ldrb	r1, [r3, #0]
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	68ba      	ldr	r2, [r7, #8]
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f009 f815 	bl	8017598 <USBD_LL_Transmit>
 800e56e:	e000      	b.n	800e572 <MSC_BOT_SendData+0x62>
    return;
 800e570:	bf00      	nop
}
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20000082 	.word	0x20000082

0800e57c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	460b      	mov	r3, r1
 800e586:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	32b0      	adds	r2, #176	; 0xb0
 800e592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e596:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d01d      	beq.n	800e5da <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	4a10      	ldr	r2, [pc, #64]	; (800e5e4 <MSC_BOT_SendCSW+0x68>)
 800e5a2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	78fa      	ldrb	r2, [r7, #3]
 800e5aa:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800e5b4:	4b0c      	ldr	r3, [pc, #48]	; (800e5e8 <MSC_BOT_SendCSW+0x6c>)
 800e5b6:	7819      	ldrb	r1, [r3, #0]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e5be:	230d      	movs	r3, #13
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f008 ffe9 	bl	8017598 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e5c6:	4b09      	ldr	r3, [pc, #36]	; (800e5ec <MSC_BOT_SendCSW+0x70>)
 800e5c8:	7819      	ldrb	r1, [r3, #0]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e5d0:	231f      	movs	r3, #31
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f009 f801 	bl	80175da <USBD_LL_PrepareReceive>
 800e5d8:	e000      	b.n	800e5dc <MSC_BOT_SendCSW+0x60>
    return;
 800e5da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	53425355 	.word	0x53425355
 800e5e8:	20000082 	.word	0x20000082
 800e5ec:	20000083 	.word	0x20000083

0800e5f0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	32b0      	adds	r2, #176	; 0xb0
 800e602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e606:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d02a      	beq.n	800e664 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10e      	bne.n	800e636 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d009      	beq.n	800e636 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e626:	2b00      	cmp	r3, #0
 800e628:	d105      	bne.n	800e636 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e62a:	4b10      	ldr	r3, [pc, #64]	; (800e66c <MSC_BOT_Abort+0x7c>)
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	4619      	mov	r1, r3
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f008 ff28 	bl	8017486 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e636:	4b0e      	ldr	r3, [pc, #56]	; (800e670 <MSC_BOT_Abort+0x80>)
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	4619      	mov	r1, r3
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f008 ff22 	bl	8017486 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	7a5b      	ldrb	r3, [r3, #9]
 800e646:	2b02      	cmp	r3, #2
 800e648:	d10d      	bne.n	800e666 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e64a:	4b09      	ldr	r3, [pc, #36]	; (800e670 <MSC_BOT_Abort+0x80>)
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	4619      	mov	r1, r3
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f008 ff18 	bl	8017486 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e656:	4b05      	ldr	r3, [pc, #20]	; (800e66c <MSC_BOT_Abort+0x7c>)
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f008 ff12 	bl	8017486 <USBD_LL_StallEP>
 800e662:	e000      	b.n	800e666 <MSC_BOT_Abort+0x76>
    return;
 800e664:	bf00      	nop
  }
}
 800e666:	3710      	adds	r7, #16
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	20000083 	.word	0x20000083
 800e670:	20000082 	.word	0x20000082

0800e674 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	460b      	mov	r3, r1
 800e67e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	32b0      	adds	r2, #176	; 0xb0
 800e68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e68e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d01d      	beq.n	800e6d2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	7a5b      	ldrb	r3, [r3, #9]
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	d10c      	bne.n	800e6b8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e69e:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <MSC_BOT_CplClrFeature+0x6c>)
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f008 feee 	bl	8017486 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e6aa:	4b0e      	ldr	r3, [pc, #56]	; (800e6e4 <MSC_BOT_CplClrFeature+0x70>)
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f008 fee8 	bl	8017486 <USBD_LL_StallEP>
 800e6b6:	e00f      	b.n	800e6d8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e6b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	da0a      	bge.n	800e6d6 <MSC_BOT_CplClrFeature+0x62>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	7a5b      	ldrb	r3, [r3, #9]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d006      	beq.n	800e6d6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7ff ff56 	bl	800e57c <MSC_BOT_SendCSW>
 800e6d0:	e002      	b.n	800e6d8 <MSC_BOT_CplClrFeature+0x64>
    return;
 800e6d2:	bf00      	nop
 800e6d4:	e000      	b.n	800e6d8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800e6d6:	bf00      	nop
  }
}
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	20000082 	.word	0x20000082
 800e6e4:	20000083 	.word	0x20000083

0800e6e8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b086      	sub	sp, #24
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	607a      	str	r2, [r7, #4]
 800e6f4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	32b0      	adds	r2, #176	; 0xb0
 800e700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e704:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d102      	bne.n	800e712 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800e70c:	f04f 33ff 	mov.w	r3, #4294967295
 800e710:	e168      	b.n	800e9e4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	2baa      	cmp	r3, #170	; 0xaa
 800e718:	f000 8144 	beq.w	800e9a4 <SCSI_ProcessCmd+0x2bc>
 800e71c:	2baa      	cmp	r3, #170	; 0xaa
 800e71e:	f300 8153 	bgt.w	800e9c8 <SCSI_ProcessCmd+0x2e0>
 800e722:	2ba8      	cmp	r3, #168	; 0xa8
 800e724:	f000 812c 	beq.w	800e980 <SCSI_ProcessCmd+0x298>
 800e728:	2ba8      	cmp	r3, #168	; 0xa8
 800e72a:	f300 814d 	bgt.w	800e9c8 <SCSI_ProcessCmd+0x2e0>
 800e72e:	2b5a      	cmp	r3, #90	; 0x5a
 800e730:	f300 80c0 	bgt.w	800e8b4 <SCSI_ProcessCmd+0x1cc>
 800e734:	2b00      	cmp	r3, #0
 800e736:	f2c0 8147 	blt.w	800e9c8 <SCSI_ProcessCmd+0x2e0>
 800e73a:	2b5a      	cmp	r3, #90	; 0x5a
 800e73c:	f200 8144 	bhi.w	800e9c8 <SCSI_ProcessCmd+0x2e0>
 800e740:	a201      	add	r2, pc, #4	; (adr r2, 800e748 <SCSI_ProcessCmd+0x60>)
 800e742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e746:	bf00      	nop
 800e748:	0800e8bb 	.word	0x0800e8bb
 800e74c:	0800e9c9 	.word	0x0800e9c9
 800e750:	0800e9c9 	.word	0x0800e9c9
 800e754:	0800e8cd 	.word	0x0800e8cd
 800e758:	0800e9c9 	.word	0x0800e9c9
 800e75c:	0800e9c9 	.word	0x0800e9c9
 800e760:	0800e9c9 	.word	0x0800e9c9
 800e764:	0800e9c9 	.word	0x0800e9c9
 800e768:	0800e9c9 	.word	0x0800e9c9
 800e76c:	0800e9c9 	.word	0x0800e9c9
 800e770:	0800e9c9 	.word	0x0800e9c9
 800e774:	0800e9c9 	.word	0x0800e9c9
 800e778:	0800e9c9 	.word	0x0800e9c9
 800e77c:	0800e9c9 	.word	0x0800e9c9
 800e780:	0800e9c9 	.word	0x0800e9c9
 800e784:	0800e9c9 	.word	0x0800e9c9
 800e788:	0800e9c9 	.word	0x0800e9c9
 800e78c:	0800e9c9 	.word	0x0800e9c9
 800e790:	0800e8df 	.word	0x0800e8df
 800e794:	0800e9c9 	.word	0x0800e9c9
 800e798:	0800e9c9 	.word	0x0800e9c9
 800e79c:	0800e9c9 	.word	0x0800e9c9
 800e7a0:	0800e9c9 	.word	0x0800e9c9
 800e7a4:	0800e9c9 	.word	0x0800e9c9
 800e7a8:	0800e9c9 	.word	0x0800e9c9
 800e7ac:	0800e9c9 	.word	0x0800e9c9
 800e7b0:	0800e915 	.word	0x0800e915
 800e7b4:	0800e8f1 	.word	0x0800e8f1
 800e7b8:	0800e9c9 	.word	0x0800e9c9
 800e7bc:	0800e9c9 	.word	0x0800e9c9
 800e7c0:	0800e903 	.word	0x0800e903
 800e7c4:	0800e9c9 	.word	0x0800e9c9
 800e7c8:	0800e9c9 	.word	0x0800e9c9
 800e7cc:	0800e9c9 	.word	0x0800e9c9
 800e7d0:	0800e9c9 	.word	0x0800e9c9
 800e7d4:	0800e939 	.word	0x0800e939
 800e7d8:	0800e9c9 	.word	0x0800e9c9
 800e7dc:	0800e94b 	.word	0x0800e94b
 800e7e0:	0800e9c9 	.word	0x0800e9c9
 800e7e4:	0800e9c9 	.word	0x0800e9c9
 800e7e8:	0800e96f 	.word	0x0800e96f
 800e7ec:	0800e9c9 	.word	0x0800e9c9
 800e7f0:	0800e993 	.word	0x0800e993
 800e7f4:	0800e9c9 	.word	0x0800e9c9
 800e7f8:	0800e9c9 	.word	0x0800e9c9
 800e7fc:	0800e9c9 	.word	0x0800e9c9
 800e800:	0800e9c9 	.word	0x0800e9c9
 800e804:	0800e9b7 	.word	0x0800e9b7
 800e808:	0800e9c9 	.word	0x0800e9c9
 800e80c:	0800e9c9 	.word	0x0800e9c9
 800e810:	0800e9c9 	.word	0x0800e9c9
 800e814:	0800e9c9 	.word	0x0800e9c9
 800e818:	0800e9c9 	.word	0x0800e9c9
 800e81c:	0800e9c9 	.word	0x0800e9c9
 800e820:	0800e9c9 	.word	0x0800e9c9
 800e824:	0800e9c9 	.word	0x0800e9c9
 800e828:	0800e9c9 	.word	0x0800e9c9
 800e82c:	0800e9c9 	.word	0x0800e9c9
 800e830:	0800e9c9 	.word	0x0800e9c9
 800e834:	0800e9c9 	.word	0x0800e9c9
 800e838:	0800e9c9 	.word	0x0800e9c9
 800e83c:	0800e9c9 	.word	0x0800e9c9
 800e840:	0800e9c9 	.word	0x0800e9c9
 800e844:	0800e9c9 	.word	0x0800e9c9
 800e848:	0800e9c9 	.word	0x0800e9c9
 800e84c:	0800e9c9 	.word	0x0800e9c9
 800e850:	0800e9c9 	.word	0x0800e9c9
 800e854:	0800e9c9 	.word	0x0800e9c9
 800e858:	0800e9c9 	.word	0x0800e9c9
 800e85c:	0800e9c9 	.word	0x0800e9c9
 800e860:	0800e9c9 	.word	0x0800e9c9
 800e864:	0800e9c9 	.word	0x0800e9c9
 800e868:	0800e9c9 	.word	0x0800e9c9
 800e86c:	0800e9c9 	.word	0x0800e9c9
 800e870:	0800e9c9 	.word	0x0800e9c9
 800e874:	0800e9c9 	.word	0x0800e9c9
 800e878:	0800e9c9 	.word	0x0800e9c9
 800e87c:	0800e9c9 	.word	0x0800e9c9
 800e880:	0800e9c9 	.word	0x0800e9c9
 800e884:	0800e9c9 	.word	0x0800e9c9
 800e888:	0800e9c9 	.word	0x0800e9c9
 800e88c:	0800e9c9 	.word	0x0800e9c9
 800e890:	0800e9c9 	.word	0x0800e9c9
 800e894:	0800e9c9 	.word	0x0800e9c9
 800e898:	0800e9c9 	.word	0x0800e9c9
 800e89c:	0800e9c9 	.word	0x0800e9c9
 800e8a0:	0800e9c9 	.word	0x0800e9c9
 800e8a4:	0800e9c9 	.word	0x0800e9c9
 800e8a8:	0800e9c9 	.word	0x0800e9c9
 800e8ac:	0800e9c9 	.word	0x0800e9c9
 800e8b0:	0800e927 	.word	0x0800e927
 800e8b4:	2b9e      	cmp	r3, #158	; 0x9e
 800e8b6:	d051      	beq.n	800e95c <SCSI_ProcessCmd+0x274>
 800e8b8:	e086      	b.n	800e9c8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e8ba:	7afb      	ldrb	r3, [r7, #11]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	4619      	mov	r1, r3
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f000 f893 	bl	800e9ec <SCSI_TestUnitReady>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	75fb      	strb	r3, [r7, #23]
      break;
 800e8ca:	e089      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800e8cc:	7afb      	ldrb	r3, [r7, #11]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f000 fb6e 	bl	800efb4 <SCSI_RequestSense>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	75fb      	strb	r3, [r7, #23]
      break;
 800e8dc:	e080      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800e8de:	7afb      	ldrb	r3, [r7, #11]
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f000 f8db 	bl	800eaa0 <SCSI_Inquiry>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	75fb      	strb	r3, [r7, #23]
      break;
 800e8ee:	e077      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e8f0:	7afb      	ldrb	r3, [r7, #11]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f000 fc2a 	bl	800f150 <SCSI_StartStopUnit>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	75fb      	strb	r3, [r7, #23]
      break;
 800e900:	e06e      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e902:	7afb      	ldrb	r3, [r7, #11]
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	4619      	mov	r1, r3
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 fc76 	bl	800f1fa <SCSI_AllowPreventRemovable>
 800e90e:	4603      	mov	r3, r0
 800e910:	75fb      	strb	r3, [r7, #23]
      break;
 800e912:	e065      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e914:	7afb      	ldrb	r3, [r7, #11]
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	4619      	mov	r1, r3
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f000 faea 	bl	800eef4 <SCSI_ModeSense6>
 800e920:	4603      	mov	r3, r0
 800e922:	75fb      	strb	r3, [r7, #23]
      break;
 800e924:	e05c      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e926:	7afb      	ldrb	r3, [r7, #11]
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4619      	mov	r1, r3
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f000 fb11 	bl	800ef54 <SCSI_ModeSense10>
 800e932:	4603      	mov	r3, r0
 800e934:	75fb      	strb	r3, [r7, #23]
      break;
 800e936:	e053      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e938:	7afb      	ldrb	r3, [r7, #11]
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	4619      	mov	r1, r3
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f000 fa5d 	bl	800edfe <SCSI_ReadFormatCapacity>
 800e944:	4603      	mov	r3, r0
 800e946:	75fb      	strb	r3, [r7, #23]
      break;
 800e948:	e04a      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e94a:	7afb      	ldrb	r3, [r7, #11]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	4619      	mov	r1, r3
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 f923 	bl	800eb9c <SCSI_ReadCapacity10>
 800e956:	4603      	mov	r3, r0
 800e958:	75fb      	strb	r3, [r7, #23]
      break;
 800e95a:	e041      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e95c:	7afb      	ldrb	r3, [r7, #11]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	4619      	mov	r1, r3
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f000 f998 	bl	800ec98 <SCSI_ReadCapacity16>
 800e968:	4603      	mov	r3, r0
 800e96a:	75fb      	strb	r3, [r7, #23]
      break;
 800e96c:	e038      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800e96e:	7afb      	ldrb	r3, [r7, #11]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	4619      	mov	r1, r3
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f000 fc6d 	bl	800f254 <SCSI_Read10>
 800e97a:	4603      	mov	r3, r0
 800e97c:	75fb      	strb	r3, [r7, #23]
      break;
 800e97e:	e02f      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800e980:	7afb      	ldrb	r3, [r7, #11]
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	4619      	mov	r1, r3
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f000 fd0e 	bl	800f3a8 <SCSI_Read12>
 800e98c:	4603      	mov	r3, r0
 800e98e:	75fb      	strb	r3, [r7, #23]
      break;
 800e990:	e026      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800e992:	7afb      	ldrb	r3, [r7, #11]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	4619      	mov	r1, r3
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f000 fdb9 	bl	800f510 <SCSI_Write10>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	75fb      	strb	r3, [r7, #23]
      break;
 800e9a2:	e01d      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800e9a4:	7afb      	ldrb	r3, [r7, #11]
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	f000 fe86 	bl	800f6bc <SCSI_Write12>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	75fb      	strb	r3, [r7, #23]
      break;
 800e9b4:	e014      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800e9b6:	7afb      	ldrb	r3, [r7, #11]
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f000 ff63 	bl	800f888 <SCSI_Verify10>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	75fb      	strb	r3, [r7, #23]
      break;
 800e9c6:	e00b      	b.n	800e9e0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e9c8:	7af9      	ldrb	r1, [r7, #11]
 800e9ca:	2320      	movs	r3, #32
 800e9cc:	2205      	movs	r2, #5
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f000 fb73 	bl	800f0ba <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800e9da:	23ff      	movs	r3, #255	; 0xff
 800e9dc:	75fb      	strb	r3, [r7, #23]
      break;
 800e9de:	bf00      	nop
  }

  return ret;
 800e9e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3718      	adds	r7, #24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	607a      	str	r2, [r7, #4]
 800e9f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	32b0      	adds	r2, #176	; 0xb0
 800ea04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d102      	bne.n	800ea16 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800ea10:	f04f 33ff 	mov.w	r3, #4294967295
 800ea14:	e03f      	b.n	800ea96 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00a      	beq.n	800ea36 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ea26:	2320      	movs	r3, #32
 800ea28:	2205      	movs	r2, #5
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f000 fb45 	bl	800f0ba <SCSI_SenseCode>

    return -1;
 800ea30:	f04f 33ff 	mov.w	r3, #4294967295
 800ea34:	e02f      	b.n	800ea96 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d10b      	bne.n	800ea58 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ea40:	7af9      	ldrb	r1, [r7, #11]
 800ea42:	233a      	movs	r3, #58	; 0x3a
 800ea44:	2202      	movs	r2, #2
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f000 fb37 	bl	800f0ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	2205      	movs	r2, #5
 800ea50:	721a      	strb	r2, [r3, #8]
    return -1;
 800ea52:	f04f 33ff 	mov.w	r3, #4294967295
 800ea56:	e01e      	b.n	800ea96 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	33b0      	adds	r3, #176	; 0xb0
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	4413      	add	r3, r2
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	7afa      	ldrb	r2, [r7, #11]
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	4798      	blx	r3
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00b      	beq.n	800ea8e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ea76:	7af9      	ldrb	r1, [r7, #11]
 800ea78:	233a      	movs	r3, #58	; 0x3a
 800ea7a:	2202      	movs	r2, #2
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f000 fb1c 	bl	800f0ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	2205      	movs	r2, #5
 800ea86:	721a      	strb	r2, [r3, #8]

    return -1;
 800ea88:	f04f 33ff 	mov.w	r3, #4294967295
 800ea8c:	e003      	b.n	800ea96 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2200      	movs	r2, #0
 800ea92:	60da      	str	r2, [r3, #12]

  return 0;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3718      	adds	r7, #24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
	...

0800eaa0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	32b0      	adds	r2, #176	; 0xb0
 800eab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eabc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d102      	bne.n	800eaca <SCSI_Inquiry+0x2a>
  {
    return -1;
 800eac4:	f04f 33ff 	mov.w	r3, #4294967295
 800eac8:	e05f      	b.n	800eb8a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d10a      	bne.n	800eaea <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eada:	2320      	movs	r3, #32
 800eadc:	2205      	movs	r2, #5
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f000 faeb 	bl	800f0ba <SCSI_SenseCode>
    return -1;
 800eae4:	f04f 33ff 	mov.w	r3, #4294967295
 800eae8:	e04f      	b.n	800eb8a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	3301      	adds	r3, #1
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	f003 0301 	and.w	r3, r3, #1
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d020      	beq.n	800eb3a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	3302      	adds	r3, #2
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d105      	bne.n	800eb0e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800eb02:	2206      	movs	r2, #6
 800eb04:	4923      	ldr	r1, [pc, #140]	; (800eb94 <SCSI_Inquiry+0xf4>)
 800eb06:	69b8      	ldr	r0, [r7, #24]
 800eb08:	f001 f844 	bl	800fb94 <SCSI_UpdateBotData>
 800eb0c:	e03c      	b.n	800eb88 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	3302      	adds	r3, #2
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2b80      	cmp	r3, #128	; 0x80
 800eb16:	d105      	bne.n	800eb24 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800eb18:	2208      	movs	r2, #8
 800eb1a:	491f      	ldr	r1, [pc, #124]	; (800eb98 <SCSI_Inquiry+0xf8>)
 800eb1c:	69b8      	ldr	r0, [r7, #24]
 800eb1e:	f001 f839 	bl	800fb94 <SCSI_UpdateBotData>
 800eb22:	e031      	b.n	800eb88 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eb2a:	2324      	movs	r3, #36	; 0x24
 800eb2c:	2205      	movs	r2, #5
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f000 fac3 	bl	800f0ba <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800eb34:	f04f 33ff 	mov.w	r3, #4294967295
 800eb38:	e027      	b.n	800eb8a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	33b0      	adds	r3, #176	; 0xb0
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	4413      	add	r3, r2
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	69d9      	ldr	r1, [r3, #28]
 800eb4c:	7afa      	ldrb	r2, [r7, #11]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	00db      	lsls	r3, r3, #3
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	440b      	add	r3, r1
 800eb58:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	3305      	adds	r3, #5
 800eb64:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	3304      	adds	r3, #4
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	8bfa      	ldrh	r2, [r7, #30]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d303      	bcc.n	800eb7c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	3304      	adds	r3, #4
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800eb7c:	8bfb      	ldrh	r3, [r7, #30]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	6979      	ldr	r1, [r7, #20]
 800eb82:	69b8      	ldr	r0, [r7, #24]
 800eb84:	f001 f806 	bl	800fb94 <SCSI_UpdateBotData>
  }

  return 0;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3720      	adds	r7, #32
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	20000084 	.word	0x20000084
 800eb98:	2000008c 	.word	0x2000008c

0800eb9c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	460b      	mov	r3, r1
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	32b0      	adds	r2, #176	; 0xb0
 800ebb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d102      	bne.n	800ebc6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800ebc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc4:	e064      	b.n	800ec90 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	33b0      	adds	r3, #176	; 0xb0
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	4413      	add	r3, r2
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	697a      	ldr	r2, [r7, #20]
 800ebda:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800ebde:	697a      	ldr	r2, [r7, #20]
 800ebe0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800ebe4:	7af8      	ldrb	r0, [r7, #11]
 800ebe6:	4798      	blx	r3
 800ebe8:	4603      	mov	r3, r0
 800ebea:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ebec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d104      	bne.n	800ebfe <SCSI_ReadCapacity10+0x62>
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d108      	bne.n	800ec10 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ebfe:	7af9      	ldrb	r1, [r7, #11]
 800ec00:	233a      	movs	r3, #58	; 0x3a
 800ec02:	2202      	movs	r2, #2
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f000 fa58 	bl	800f0ba <SCSI_SenseCode>
    return -1;
 800ec0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec0e:	e03f      	b.n	800ec90 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ec16:	3b01      	subs	r3, #1
 800ec18:	0e1b      	lsrs	r3, r3, #24
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ec26:	3b01      	subs	r3, #1
 800ec28:	0c1b      	lsrs	r3, r3, #16
 800ec2a:	b2da      	uxtb	r2, r3
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ec36:	3b01      	subs	r3, #1
 800ec38:	0a1b      	lsrs	r3, r3, #8
 800ec3a:	b2da      	uxtb	r2, r3
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ec56:	161b      	asrs	r3, r3, #24
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ec64:	141b      	asrs	r3, r3, #16
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ec72:	0a1b      	lsrs	r3, r3, #8
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	b2da      	uxtb	r2, r3
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ec82:	b2da      	uxtb	r2, r3
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2208      	movs	r2, #8
 800ec8c:	60da      	str	r2, [r3, #12]

  return 0;
 800ec8e:	2300      	movs	r3, #0

}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3718      	adds	r7, #24
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b088      	sub	sp, #32
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	460b      	mov	r3, r1
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	32b0      	adds	r2, #176	; 0xb0
 800ecb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800ecbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc0:	e099      	b.n	800edf6 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	33b0      	adds	r3, #176	; 0xb0
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4413      	add	r3, r2
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	69ba      	ldr	r2, [r7, #24]
 800ecd6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800ecda:	69ba      	ldr	r2, [r7, #24]
 800ecdc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800ece0:	7af8      	ldrb	r0, [r7, #11]
 800ece2:	4798      	blx	r3
 800ece4:	4603      	mov	r3, r0
 800ece6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ece8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d104      	bne.n	800ecfa <SCSI_ReadCapacity16+0x62>
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ecf6:	2b02      	cmp	r3, #2
 800ecf8:	d108      	bne.n	800ed0c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ecfa:	7af9      	ldrb	r1, [r7, #11]
 800ecfc:	233a      	movs	r3, #58	; 0x3a
 800ecfe:	2202      	movs	r2, #2
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 f9da 	bl	800f0ba <SCSI_SenseCode>
    return -1;
 800ed06:	f04f 33ff 	mov.w	r3, #4294967295
 800ed0a:	e074      	b.n	800edf6 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	330a      	adds	r3, #10
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	330b      	adds	r3, #11
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ed1c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	330c      	adds	r3, #12
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800ed26:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	320d      	adds	r2, #13
 800ed2c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800ed2e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ed34:	2300      	movs	r3, #0
 800ed36:	77fb      	strb	r3, [r7, #31]
 800ed38:	e007      	b.n	800ed4a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800ed3a:	7ffb      	ldrb	r3, [r7, #31]
 800ed3c:	69ba      	ldr	r2, [r7, #24]
 800ed3e:	4413      	add	r3, r2
 800ed40:	2200      	movs	r2, #0
 800ed42:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ed44:	7ffb      	ldrb	r3, [r7, #31]
 800ed46:	3301      	adds	r3, #1
 800ed48:	77fb      	strb	r3, [r7, #31]
 800ed4a:	7ffa      	ldrb	r2, [r7, #31]
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d3f2      	bcc.n	800ed3a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	0e1b      	lsrs	r3, r3, #24
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	0c1b      	lsrs	r3, r3, #16
 800ed6e:	b2da      	uxtb	r2, r3
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	0a1b      	lsrs	r3, r3, #8
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	b2da      	uxtb	r2, r3
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ed9a:	161b      	asrs	r3, r3, #24
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800eda8:	141b      	asrs	r3, r3, #16
 800edaa:	b2da      	uxtb	r2, r3
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800edb6:	0a1b      	lsrs	r3, r3, #8
 800edb8:	b29b      	uxth	r3, r3
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800edc6:	b2da      	uxtb	r2, r3
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	330a      	adds	r3, #10
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	330b      	adds	r3, #11
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800eddc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	330c      	adds	r3, #12
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800ede6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	320d      	adds	r2, #13
 800edec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800edee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	60da      	str	r2, [r3, #12]

  return 0;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3720      	adds	r7, #32
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b088      	sub	sp, #32
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	60f8      	str	r0, [r7, #12]
 800ee06:	460b      	mov	r3, r1
 800ee08:	607a      	str	r2, [r7, #4]
 800ee0a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	32b0      	adds	r2, #176	; 0xb0
 800ee16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee1a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d102      	bne.n	800ee28 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800ee22:	f04f 33ff 	mov.w	r3, #4294967295
 800ee26:	e061      	b.n	800eeec <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	33b0      	adds	r3, #176	; 0xb0
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	4413      	add	r3, r2
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f107 0214 	add.w	r2, r7, #20
 800ee3e:	f107 0110 	add.w	r1, r7, #16
 800ee42:	7af8      	ldrb	r0, [r7, #11]
 800ee44:	4798      	blx	r3
 800ee46:	4603      	mov	r3, r0
 800ee48:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ee4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d104      	bne.n	800ee5c <SCSI_ReadFormatCapacity+0x5e>
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	d108      	bne.n	800ee6e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ee5c:	7af9      	ldrb	r1, [r7, #11]
 800ee5e:	233a      	movs	r3, #58	; 0x3a
 800ee60:	2202      	movs	r2, #2
 800ee62:	68f8      	ldr	r0, [r7, #12]
 800ee64:	f000 f929 	bl	800f0ba <SCSI_SenseCode>
    return -1;
 800ee68:	f04f 33ff 	mov.w	r3, #4294967295
 800ee6c:	e03e      	b.n	800eeec <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800ee6e:	2300      	movs	r3, #0
 800ee70:	83fb      	strh	r3, [r7, #30]
 800ee72:	e007      	b.n	800ee84 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800ee74:	8bfb      	ldrh	r3, [r7, #30]
 800ee76:	69ba      	ldr	r2, [r7, #24]
 800ee78:	4413      	add	r3, r2
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800ee7e:	8bfb      	ldrh	r3, [r7, #30]
 800ee80:	3301      	adds	r3, #1
 800ee82:	83fb      	strh	r3, [r7, #30]
 800ee84:	8bfb      	ldrh	r3, [r7, #30]
 800ee86:	2b0b      	cmp	r3, #11
 800ee88:	d9f4      	bls.n	800ee74 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	2208      	movs	r2, #8
 800ee8e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	3b01      	subs	r3, #1
 800ee94:	0e1b      	lsrs	r3, r3, #24
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	0c1b      	lsrs	r3, r3, #16
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	0a1b      	lsrs	r3, r3, #8
 800eeae:	b2da      	uxtb	r2, r3
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	b2da      	uxtb	r2, r3
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800eec0:	69bb      	ldr	r3, [r7, #24]
 800eec2:	2202      	movs	r2, #2
 800eec4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800eec6:	8abb      	ldrh	r3, [r7, #20]
 800eec8:	141b      	asrs	r3, r3, #16
 800eeca:	b2da      	uxtb	r2, r3
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800eed0:	8abb      	ldrh	r3, [r7, #20]
 800eed2:	0a1b      	lsrs	r3, r3, #8
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800eedc:	8abb      	ldrh	r3, [r7, #20]
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	220c      	movs	r2, #12
 800eee8:	60da      	str	r2, [r3, #12]

  return 0;
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3720      	adds	r7, #32
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	460b      	mov	r3, r1
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	32b0      	adds	r2, #176	; 0xb0
 800ef0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef10:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800ef12:	2317      	movs	r3, #23
 800ef14:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d102      	bne.n	800ef22 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800ef1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef20:	e011      	b.n	800ef46 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	3304      	adds	r3, #4
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	8afa      	ldrh	r2, [r7, #22]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d303      	bcc.n	800ef38 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	3304      	adds	r3, #4
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800ef38:	8afb      	ldrh	r3, [r7, #22]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	4904      	ldr	r1, [pc, #16]	; (800ef50 <SCSI_ModeSense6+0x5c>)
 800ef3e:	6938      	ldr	r0, [r7, #16]
 800ef40:	f000 fe28 	bl	800fb94 <SCSI_UpdateBotData>

  return 0;
 800ef44:	2300      	movs	r3, #0
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3718      	adds	r7, #24
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	20000094 	.word	0x20000094

0800ef54 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	32b0      	adds	r2, #176	; 0xb0
 800ef6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef70:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800ef72:	231b      	movs	r3, #27
 800ef74:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d102      	bne.n	800ef82 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800ef7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef80:	e011      	b.n	800efa6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	3308      	adds	r3, #8
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	8afa      	ldrh	r2, [r7, #22]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d303      	bcc.n	800ef98 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	3308      	adds	r3, #8
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800ef98:	8afb      	ldrh	r3, [r7, #22]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	4904      	ldr	r1, [pc, #16]	; (800efb0 <SCSI_ModeSense10+0x5c>)
 800ef9e:	6938      	ldr	r0, [r7, #16]
 800efa0:	f000 fdf8 	bl	800fb94 <SCSI_UpdateBotData>

  return 0;
 800efa4:	2300      	movs	r3, #0
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3718      	adds	r7, #24
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	200000ac 	.word	0x200000ac

0800efb4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	460b      	mov	r3, r1
 800efbe:	607a      	str	r2, [r7, #4]
 800efc0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	32b0      	adds	r2, #176	; 0xb0
 800efcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efd0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d102      	bne.n	800efde <SCSI_RequestSense+0x2a>
  {
    return -1;
 800efd8:	f04f 33ff 	mov.w	r3, #4294967295
 800efdc:	e069      	b.n	800f0b2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d10a      	bne.n	800effe <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800efee:	2320      	movs	r3, #32
 800eff0:	2205      	movs	r2, #5
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f000 f861 	bl	800f0ba <SCSI_SenseCode>
    return -1;
 800eff8:	f04f 33ff 	mov.w	r3, #4294967295
 800effc:	e059      	b.n	800f0b2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800effe:	2300      	movs	r3, #0
 800f000:	75fb      	strb	r3, [r7, #23]
 800f002:	e007      	b.n	800f014 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800f004:	7dfb      	ldrb	r3, [r7, #23]
 800f006:	693a      	ldr	r2, [r7, #16]
 800f008:	4413      	add	r3, r2
 800f00a:	2200      	movs	r2, #0
 800f00c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800f00e:	7dfb      	ldrb	r3, [r7, #23]
 800f010:	3301      	adds	r3, #1
 800f012:	75fb      	strb	r3, [r7, #23]
 800f014:	7dfb      	ldrb	r3, [r7, #23]
 800f016:	2b11      	cmp	r3, #17
 800f018:	d9f4      	bls.n	800f004 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	2270      	movs	r2, #112	; 0x70
 800f01e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	220c      	movs	r2, #12
 800f024:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f032:	429a      	cmp	r2, r3
 800f034:	d02e      	beq.n	800f094 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f03c:	461a      	mov	r2, r3
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	3248      	adds	r2, #72	; 0x48
 800f042:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f050:	693a      	ldr	r2, [r7, #16]
 800f052:	3348      	adds	r3, #72	; 0x48
 800f054:	00db      	lsls	r3, r3, #3
 800f056:	4413      	add	r3, r2
 800f058:	791a      	ldrb	r2, [r3, #4]
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f064:	693a      	ldr	r2, [r7, #16]
 800f066:	3348      	adds	r3, #72	; 0x48
 800f068:	00db      	lsls	r3, r3, #3
 800f06a:	4413      	add	r3, r2
 800f06c:	795a      	ldrb	r2, [r3, #5]
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f078:	3301      	adds	r3, #1
 800f07a:	b2da      	uxtb	r2, r3
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f088:	2b04      	cmp	r3, #4
 800f08a:	d103      	bne.n	800f094 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	2200      	movs	r2, #0
 800f090:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	2212      	movs	r2, #18
 800f098:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	3304      	adds	r3, #4
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b12      	cmp	r3, #18
 800f0a2:	d805      	bhi.n	800f0b0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	3304      	adds	r3, #4
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800f0ba:	b480      	push	{r7}
 800f0bc:	b085      	sub	sp, #20
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	4608      	mov	r0, r1
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	70fb      	strb	r3, [r7, #3]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70bb      	strb	r3, [r7, #2]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	32b0      	adds	r2, #176	; 0xb0
 800f0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d02c      	beq.n	800f144 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	3248      	adds	r2, #72	; 0x48
 800f0f6:	78b9      	ldrb	r1, [r7, #2]
 800f0f8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	3348      	adds	r3, #72	; 0x48
 800f106:	00db      	lsls	r3, r3, #3
 800f108:	4413      	add	r3, r2
 800f10a:	787a      	ldrb	r2, [r7, #1]
 800f10c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	3348      	adds	r3, #72	; 0x48
 800f118:	00db      	lsls	r3, r3, #3
 800f11a:	4413      	add	r3, r2
 800f11c:	2200      	movs	r2, #0
 800f11e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f126:	3301      	adds	r3, #1
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f136:	2b04      	cmp	r3, #4
 800f138:	d105      	bne.n	800f146 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800f142:	e000      	b.n	800f146 <SCSI_SenseCode+0x8c>
    return;
 800f144:	bf00      	nop
  }
}
 800f146:	3714      	adds	r7, #20
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr

0800f150 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b086      	sub	sp, #24
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	460b      	mov	r3, r1
 800f15a:	607a      	str	r2, [r7, #4]
 800f15c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	32b0      	adds	r2, #176	; 0xb0
 800f168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f16c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d102      	bne.n	800f17a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800f174:	f04f 33ff 	mov.w	r3, #4294967295
 800f178:	e03b      	b.n	800f1f2 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f180:	2b01      	cmp	r3, #1
 800f182:	d10f      	bne.n	800f1a4 <SCSI_StartStopUnit+0x54>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	3304      	adds	r3, #4
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	f003 0303 	and.w	r3, r3, #3
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d108      	bne.n	800f1a4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f192:	7af9      	ldrb	r1, [r7, #11]
 800f194:	2324      	movs	r3, #36	; 0x24
 800f196:	2205      	movs	r2, #5
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f7ff ff8e 	bl	800f0ba <SCSI_SenseCode>

    return -1;
 800f19e:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a2:	e026      	b.n	800f1f2 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3304      	adds	r3, #4
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 0303 	and.w	r3, r3, #3
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d104      	bne.n	800f1bc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f1ba:	e016      	b.n	800f1ea <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	3304      	adds	r3, #4
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	f003 0303 	and.w	r3, r3, #3
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	d104      	bne.n	800f1d4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	2202      	movs	r2, #2
 800f1ce:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f1d2:	e00a      	b.n	800f1ea <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	3304      	adds	r3, #4
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	f003 0303 	and.w	r3, r3, #3
 800f1de:	2b03      	cmp	r3, #3
 800f1e0:	d103      	bne.n	800f1ea <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	60da      	str	r2, [r3, #12]

  return 0;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3718      	adds	r7, #24
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f1fa:	b480      	push	{r7}
 800f1fc:	b087      	sub	sp, #28
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	60f8      	str	r0, [r7, #12]
 800f202:	460b      	mov	r3, r1
 800f204:	607a      	str	r2, [r7, #4]
 800f206:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	32b0      	adds	r2, #176	; 0xb0
 800f212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f216:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d102      	bne.n	800f224 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800f21e:	f04f 33ff 	mov.w	r3, #4294967295
 800f222:	e011      	b.n	800f248 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	3304      	adds	r3, #4
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d104      	bne.n	800f238 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	2200      	movs	r2, #0
 800f232:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f236:	e003      	b.n	800f240 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	2201      	movs	r2, #1
 800f23c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2200      	movs	r2, #0
 800f244:	60da      	str	r2, [r3, #12]

  return 0;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	371c      	adds	r7, #28
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	460b      	mov	r3, r1
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	32b0      	adds	r2, #176	; 0xb0
 800f26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f270:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d102      	bne.n	800f27e <SCSI_Read10+0x2a>
  {
    return -1;
 800f278:	f04f 33ff 	mov.w	r3, #4294967295
 800f27c:	e090      	b.n	800f3a0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	7a1b      	ldrb	r3, [r3, #8]
 800f282:	2b00      	cmp	r3, #0
 800f284:	f040 8082 	bne.w	800f38c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f28e:	b25b      	sxtb	r3, r3
 800f290:	2b00      	cmp	r3, #0
 800f292:	db0a      	blt.n	800f2aa <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f29a:	2320      	movs	r3, #32
 800f29c:	2205      	movs	r2, #5
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	f7ff ff0b 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a8:	e07a      	b.n	800f3a0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d108      	bne.n	800f2c6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f2b4:	7af9      	ldrb	r1, [r7, #11]
 800f2b6:	233a      	movs	r3, #58	; 0x3a
 800f2b8:	2202      	movs	r2, #2
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f7ff fefd 	bl	800f0ba <SCSI_SenseCode>

      return -1;
 800f2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c4:	e06c      	b.n	800f3a0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	33b0      	adds	r3, #176	; 0xb0
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	4413      	add	r3, r2
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	7afa      	ldrb	r2, [r7, #11]
 800f2da:	4610      	mov	r0, r2
 800f2dc:	4798      	blx	r3
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d008      	beq.n	800f2f6 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f2e4:	7af9      	ldrb	r1, [r7, #11]
 800f2e6:	233a      	movs	r3, #58	; 0x3a
 800f2e8:	2202      	movs	r2, #2
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7ff fee5 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f4:	e054      	b.n	800f3a0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	3302      	adds	r3, #2
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	3303      	adds	r3, #3
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f306:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	3304      	adds	r3, #4
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f310:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	3205      	adds	r2, #5
 800f316:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f318:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	3307      	adds	r3, #7
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	021b      	lsls	r3, r3, #8
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	3208      	adds	r2, #8
 800f32c:	7812      	ldrb	r2, [r2, #0]
 800f32e:	431a      	orrs	r2, r3
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f342:	7af9      	ldrb	r1, [r7, #11]
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f000 fadc 	bl	800f902 <SCSI_CheckAddressRange>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	da02      	bge.n	800f356 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f350:	f04f 33ff 	mov.w	r3, #4294967295
 800f354:	e024      	b.n	800f3a0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f362:	6979      	ldr	r1, [r7, #20]
 800f364:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800f368:	fb01 f303 	mul.w	r3, r1, r3
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d00a      	beq.n	800f386 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f376:	2320      	movs	r3, #32
 800f378:	2205      	movs	r2, #5
 800f37a:	68f8      	ldr	r0, [r7, #12]
 800f37c:	f7ff fe9d 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f380:	f04f 33ff 	mov.w	r3, #4294967295
 800f384:	e00c      	b.n	800f3a0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	2202      	movs	r2, #2
 800f38a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f392:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f394:	7afb      	ldrb	r3, [r7, #11]
 800f396:	4619      	mov	r1, r3
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 fadf 	bl	800f95c <SCSI_ProcessRead>
 800f39e:	4603      	mov	r3, r0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3718      	adds	r7, #24
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b086      	sub	sp, #24
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	607a      	str	r2, [r7, #4]
 800f3b4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	32b0      	adds	r2, #176	; 0xb0
 800f3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d102      	bne.n	800f3d2 <SCSI_Read12+0x2a>
  {
    return -1;
 800f3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d0:	e09a      	b.n	800f508 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	7a1b      	ldrb	r3, [r3, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f040 808c 	bne.w	800f4f4 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f3e2:	b25b      	sxtb	r3, r3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	db0a      	blt.n	800f3fe <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f3ee:	2320      	movs	r3, #32
 800f3f0:	2205      	movs	r2, #5
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f7ff fe61 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3fc:	e084      	b.n	800f508 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f404:	2b02      	cmp	r3, #2
 800f406:	d108      	bne.n	800f41a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f408:	7af9      	ldrb	r1, [r7, #11]
 800f40a:	233a      	movs	r3, #58	; 0x3a
 800f40c:	2202      	movs	r2, #2
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	f7ff fe53 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f414:	f04f 33ff 	mov.w	r3, #4294967295
 800f418:	e076      	b.n	800f508 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	33b0      	adds	r3, #176	; 0xb0
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4413      	add	r3, r2
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	7afa      	ldrb	r2, [r7, #11]
 800f42e:	4610      	mov	r0, r2
 800f430:	4798      	blx	r3
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d008      	beq.n	800f44a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f438:	7af9      	ldrb	r1, [r7, #11]
 800f43a:	233a      	movs	r3, #58	; 0x3a
 800f43c:	2202      	movs	r2, #2
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f7ff fe3b 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f444:	f04f 33ff 	mov.w	r3, #4294967295
 800f448:	e05e      	b.n	800f508 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	3302      	adds	r3, #2
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	3303      	adds	r3, #3
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f45a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	3304      	adds	r3, #4
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f464:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	3205      	adds	r2, #5
 800f46a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f46c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	3306      	adds	r3, #6
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	3307      	adds	r3, #7
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f484:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	3308      	adds	r3, #8
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f48e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	3209      	adds	r2, #9
 800f494:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f496:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f4aa:	7af9      	ldrb	r1, [r7, #11]
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f000 fa28 	bl	800f902 <SCSI_CheckAddressRange>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	da02      	bge.n	800f4be <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4bc:	e024      	b.n	800f508 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f4ca:	6979      	ldr	r1, [r7, #20]
 800f4cc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800f4d0:	fb01 f303 	mul.w	r3, r1, r3
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d00a      	beq.n	800f4ee <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f4de:	2320      	movs	r3, #32
 800f4e0:	2205      	movs	r2, #5
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	f7ff fde9 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ec:	e00c      	b.n	800f508 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	2202      	movs	r2, #2
 800f4f2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f4fa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f4fc:	7afb      	ldrb	r3, [r7, #11]
 800f4fe:	4619      	mov	r1, r3
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f000 fa2b 	bl	800f95c <SCSI_ProcessRead>
 800f506:	4603      	mov	r3, r0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3718      	adds	r7, #24
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	460b      	mov	r3, r1
 800f51a:	607a      	str	r2, [r7, #4]
 800f51c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	32b0      	adds	r2, #176	; 0xb0
 800f528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d102      	bne.n	800f53a <SCSI_Write10+0x2a>
  {
    return -1;
 800f534:	f04f 33ff 	mov.w	r3, #4294967295
 800f538:	e0ba      	b.n	800f6b0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	7a1b      	ldrb	r3, [r3, #8]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f040 80b0 	bne.w	800f6a4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d10a      	bne.n	800f564 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f554:	2320      	movs	r3, #32
 800f556:	2205      	movs	r2, #5
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f7ff fdae 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f55e:	f04f 33ff 	mov.w	r3, #4294967295
 800f562:	e0a5      	b.n	800f6b0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f56a:	b25b      	sxtb	r3, r3
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	da0a      	bge.n	800f586 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f576:	2320      	movs	r3, #32
 800f578:	2205      	movs	r2, #5
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f7ff fd9d 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f580:	f04f 33ff 	mov.w	r3, #4294967295
 800f584:	e094      	b.n	800f6b0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	33b0      	adds	r3, #176	; 0xb0
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	7afa      	ldrb	r2, [r7, #11]
 800f59a:	4610      	mov	r0, r2
 800f59c:	4798      	blx	r3
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d008      	beq.n	800f5b6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f5a4:	7af9      	ldrb	r1, [r7, #11]
 800f5a6:	233a      	movs	r3, #58	; 0x3a
 800f5a8:	2202      	movs	r2, #2
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f7ff fd85 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b4:	e07c      	b.n	800f6b0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	33b0      	adds	r3, #176	; 0xb0
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	4413      	add	r3, r2
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	7afa      	ldrb	r2, [r7, #11]
 800f5ca:	4610      	mov	r0, r2
 800f5cc:	4798      	blx	r3
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d008      	beq.n	800f5e6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f5d4:	7af9      	ldrb	r1, [r7, #11]
 800f5d6:	2327      	movs	r3, #39	; 0x27
 800f5d8:	2202      	movs	r2, #2
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f7ff fd6d 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e4:	e064      	b.n	800f6b0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	3302      	adds	r3, #2
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	3303      	adds	r3, #3
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f5f6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	3304      	adds	r3, #4
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f600:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	3205      	adds	r2, #5
 800f606:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f608:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	3307      	adds	r3, #7
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	3208      	adds	r2, #8
 800f61c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f61e:	431a      	orrs	r2, r3
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f632:	7af9      	ldrb	r1, [r7, #11]
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f000 f964 	bl	800f902 <SCSI_CheckAddressRange>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	da02      	bge.n	800f646 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f640:	f04f 33ff 	mov.w	r3, #4294967295
 800f644:	e034      	b.n	800f6b0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f64c:	697a      	ldr	r2, [r7, #20]
 800f64e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f652:	fb02 f303 	mul.w	r3, r2, r3
 800f656:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f65e:	693a      	ldr	r2, [r7, #16]
 800f660:	429a      	cmp	r2, r3
 800f662:	d00a      	beq.n	800f67a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f66a:	2320      	movs	r3, #32
 800f66c:	2205      	movs	r2, #5
 800f66e:	68f8      	ldr	r0, [r7, #12]
 800f670:	f7ff fd23 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f674:	f04f 33ff 	mov.w	r3, #4294967295
 800f678:	e01a      	b.n	800f6b0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f680:	bf28      	it	cs
 800f682:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f686:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	2201      	movs	r2, #1
 800f68c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f68e:	4b0a      	ldr	r3, [pc, #40]	; (800f6b8 <SCSI_Write10+0x1a8>)
 800f690:	7819      	ldrb	r1, [r3, #0]
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	f103 0210 	add.w	r2, r3, #16
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f007 ff9d 	bl	80175da <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	e005      	b.n	800f6b0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800f6a4:	7afb      	ldrb	r3, [r7, #11]
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	f000 f9dd 	bl	800fa68 <SCSI_ProcessWrite>
 800f6ae:	4603      	mov	r3, r0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3718      	adds	r7, #24
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	20000083 	.word	0x20000083

0800f6bc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	607a      	str	r2, [r7, #4]
 800f6c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	32b0      	adds	r2, #176	; 0xb0
 800f6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6d8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d102      	bne.n	800f6e6 <SCSI_Write12+0x2a>
  {
    return -1;
 800f6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6e4:	e0ca      	b.n	800f87c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	7a1b      	ldrb	r3, [r3, #8]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f040 80c0 	bne.w	800f870 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d10a      	bne.n	800f710 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f700:	2320      	movs	r3, #32
 800f702:	2205      	movs	r2, #5
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f7ff fcd8 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f70a:	f04f 33ff 	mov.w	r3, #4294967295
 800f70e:	e0b5      	b.n	800f87c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f716:	b25b      	sxtb	r3, r3
 800f718:	2b00      	cmp	r3, #0
 800f71a:	da0a      	bge.n	800f732 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f722:	2320      	movs	r3, #32
 800f724:	2205      	movs	r2, #5
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f7ff fcc7 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f72c:	f04f 33ff 	mov.w	r3, #4294967295
 800f730:	e0a4      	b.n	800f87c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	33b0      	adds	r3, #176	; 0xb0
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4413      	add	r3, r2
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	7afa      	ldrb	r2, [r7, #11]
 800f746:	4610      	mov	r0, r2
 800f748:	4798      	blx	r3
 800f74a:	4603      	mov	r3, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00b      	beq.n	800f768 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f750:	7af9      	ldrb	r1, [r7, #11]
 800f752:	233a      	movs	r3, #58	; 0x3a
 800f754:	2202      	movs	r2, #2
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f7ff fcaf 	bl	800f0ba <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	2205      	movs	r2, #5
 800f760:	721a      	strb	r2, [r3, #8]
      return -1;
 800f762:	f04f 33ff 	mov.w	r3, #4294967295
 800f766:	e089      	b.n	800f87c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	33b0      	adds	r3, #176	; 0xb0
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4413      	add	r3, r2
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	7afa      	ldrb	r2, [r7, #11]
 800f77c:	4610      	mov	r0, r2
 800f77e:	4798      	blx	r3
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00b      	beq.n	800f79e <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f786:	7af9      	ldrb	r1, [r7, #11]
 800f788:	2327      	movs	r3, #39	; 0x27
 800f78a:	2202      	movs	r2, #2
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f7ff fc94 	bl	800f0ba <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2205      	movs	r2, #5
 800f796:	721a      	strb	r2, [r3, #8]
      return -1;
 800f798:	f04f 33ff 	mov.w	r3, #4294967295
 800f79c:	e06e      	b.n	800f87c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	3302      	adds	r3, #2
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	3303      	adds	r3, #3
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f7ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f7b8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f7ba:	687a      	ldr	r2, [r7, #4]
 800f7bc:	3205      	adds	r2, #5
 800f7be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f7c0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	3306      	adds	r3, #6
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	3307      	adds	r3, #7
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f7d8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	3308      	adds	r3, #8
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f7e2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	3209      	adds	r2, #9
 800f7e8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f7ea:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f7fe:	7af9      	ldrb	r1, [r7, #11]
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f000 f87e 	bl	800f902 <SCSI_CheckAddressRange>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	da02      	bge.n	800f812 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f80c:	f04f 33ff 	mov.w	r3, #4294967295
 800f810:	e034      	b.n	800f87c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f818:	697a      	ldr	r2, [r7, #20]
 800f81a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f81e:	fb02 f303 	mul.w	r3, r2, r3
 800f822:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f82a:	693a      	ldr	r2, [r7, #16]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d00a      	beq.n	800f846 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f836:	2320      	movs	r3, #32
 800f838:	2205      	movs	r2, #5
 800f83a:	68f8      	ldr	r0, [r7, #12]
 800f83c:	f7ff fc3d 	bl	800f0ba <SCSI_SenseCode>
      return -1;
 800f840:	f04f 33ff 	mov.w	r3, #4294967295
 800f844:	e01a      	b.n	800f87c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f84c:	bf28      	it	cs
 800f84e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f852:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	2201      	movs	r2, #1
 800f858:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f85a:	4b0a      	ldr	r3, [pc, #40]	; (800f884 <SCSI_Write12+0x1c8>)
 800f85c:	7819      	ldrb	r1, [r3, #0]
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	f103 0210 	add.w	r2, r3, #16
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	68f8      	ldr	r0, [r7, #12]
 800f868:	f007 feb7 	bl	80175da <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f86c:	2300      	movs	r3, #0
 800f86e:	e005      	b.n	800f87c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800f870:	7afb      	ldrb	r3, [r7, #11]
 800f872:	4619      	mov	r1, r3
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f000 f8f7 	bl	800fa68 <SCSI_ProcessWrite>
 800f87a:	4603      	mov	r3, r0
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3718      	adds	r7, #24
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	20000083 	.word	0x20000083

0800f888 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	460b      	mov	r3, r1
 800f892:	607a      	str	r2, [r7, #4]
 800f894:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	32b0      	adds	r2, #176	; 0xb0
 800f8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d102      	bne.n	800f8b2 <SCSI_Verify10+0x2a>
  {
    return -1;
 800f8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b0:	e023      	b.n	800f8fa <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	f003 0302 	and.w	r3, r3, #2
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d008      	beq.n	800f8d2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f8c0:	7af9      	ldrb	r1, [r7, #11]
 800f8c2:	2324      	movs	r3, #36	; 0x24
 800f8c4:	2205      	movs	r2, #5
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f7ff fbf7 	bl	800f0ba <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d0:	e013      	b.n	800f8fa <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f8de:	7af9      	ldrb	r1, [r7, #11]
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f000 f80e 	bl	800f902 <SCSI_CheckAddressRange>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	da02      	bge.n	800f8f2 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800f8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f0:	e003      	b.n	800f8fa <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	60da      	str	r2, [r3, #12]

  return 0;
 800f8f8:	2300      	movs	r3, #0
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3718      	adds	r7, #24
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}

0800f902 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f902:	b580      	push	{r7, lr}
 800f904:	b086      	sub	sp, #24
 800f906:	af00      	add	r7, sp, #0
 800f908:	60f8      	str	r0, [r7, #12]
 800f90a:	607a      	str	r2, [r7, #4]
 800f90c:	603b      	str	r3, [r7, #0]
 800f90e:	460b      	mov	r3, r1
 800f910:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	32b0      	adds	r2, #176	; 0xb0
 800f91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f920:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d102      	bne.n	800f92e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800f928:	f04f 33ff 	mov.w	r3, #4294967295
 800f92c:	e011      	b.n	800f952 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	441a      	add	r2, r3
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d908      	bls.n	800f950 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f93e:	7af9      	ldrb	r1, [r7, #11]
 800f940:	2321      	movs	r3, #33	; 0x21
 800f942:	2205      	movs	r2, #5
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f7ff fbb8 	bl	800f0ba <SCSI_SenseCode>
    return -1;
 800f94a:	f04f 33ff 	mov.w	r3, #4294967295
 800f94e:	e000      	b.n	800f952 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800f950:	2300      	movs	r3, #0
}
 800f952:	4618      	mov	r0, r3
 800f954:	3718      	adds	r7, #24
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
	...

0800f95c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f95c:	b590      	push	{r4, r7, lr}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	460b      	mov	r3, r1
 800f966:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	32b0      	adds	r2, #176	; 0xb0
 800f972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f976:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d102      	bne.n	800f984 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800f97e:	f04f 33ff 	mov.w	r3, #4294967295
 800f982:	e06a      	b.n	800fa5a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f98a:	68fa      	ldr	r2, [r7, #12]
 800f98c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f990:	fb02 f303 	mul.w	r3, r2, r3
 800f994:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f99c:	bf28      	it	cs
 800f99e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f9a2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	33b0      	adds	r3, #176	; 0xb0
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	691c      	ldr	r4, [r3, #16]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f103 0110 	add.w	r1, r3, #16
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	78f8      	ldrb	r0, [r7, #3]
 800f9d4:	47a0      	blx	r4
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	da08      	bge.n	800f9ee <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f9dc:	78f9      	ldrb	r1, [r7, #3]
 800f9de:	2311      	movs	r3, #17
 800f9e0:	2204      	movs	r2, #4
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7ff fb69 	bl	800f0ba <SCSI_SenseCode>
    return -1;
 800f9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ec:	e035      	b.n	800fa5a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800f9ee:	4b1d      	ldr	r3, [pc, #116]	; (800fa64 <SCSI_ProcessRead+0x108>)
 800f9f0:	7819      	ldrb	r1, [r3, #0]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f103 0210 	add.w	r2, r3, #16
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f007 fdcc 	bl	8017598 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa14:	441a      	add	r2, r3
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fa28:	4619      	mov	r1, r3
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa30:	1ad2      	subs	r2, r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	1ad2      	subs	r2, r2, r3
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d102      	bne.n	800fa58 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2203      	movs	r2, #3
 800fa56:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd90      	pop	{r4, r7, pc}
 800fa62:	bf00      	nop
 800fa64:	20000082 	.word	0x20000082

0800fa68 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800fa68:	b590      	push	{r4, r7, lr}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	460b      	mov	r3, r1
 800fa72:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	32b0      	adds	r2, #176	; 0xb0
 800fa7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa82:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d102      	bne.n	800fa90 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800fa8a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8e:	e07a      	b.n	800fb86 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800fa9c:	fb02 f303 	mul.w	r3, r2, r3
 800faa0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faa8:	bf28      	it	cs
 800faaa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800faae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	33b0      	adds	r3, #176	; 0xb0
 800faba:	009b      	lsls	r3, r3, #2
 800fabc:	4413      	add	r3, r2
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	695c      	ldr	r4, [r3, #20]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f103 0110 	add.w	r1, r3, #16
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fad4:	4618      	mov	r0, r3
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800fadc:	b29b      	uxth	r3, r3
 800fade:	78f8      	ldrb	r0, [r7, #3]
 800fae0:	47a0      	blx	r4
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	da08      	bge.n	800fafa <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800fae8:	78f9      	ldrb	r1, [r7, #3]
 800faea:	2303      	movs	r3, #3
 800faec:	2204      	movs	r2, #4
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f7ff fae3 	bl	800f0ba <SCSI_SenseCode>
    return -1;
 800faf4:	f04f 33ff 	mov.w	r3, #4294967295
 800faf8:	e045      	b.n	800fb86 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fb06:	4619      	mov	r1, r3
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb0e:	441a      	add	r2, r3
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fb22:	4619      	mov	r1, r3
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb2a:	1ad2      	subs	r2, r2, r3
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	1ad2      	subs	r2, r2, r3
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d104      	bne.n	800fb56 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7fe fd14 	bl	800e57c <MSC_BOT_SendCSW>
 800fb54:	e016      	b.n	800fb84 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800fb62:	fb02 f303 	mul.w	r3, r2, r3
 800fb66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb6a:	bf28      	it	cs
 800fb6c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fb70:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800fb72:	4b07      	ldr	r3, [pc, #28]	; (800fb90 <SCSI_ProcessWrite+0x128>)
 800fb74:	7819      	ldrb	r1, [r3, #0]
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f103 0210 	add.w	r2, r3, #16
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f007 fd2b 	bl	80175da <USBD_LL_PrepareReceive>
  }

  return 0;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd90      	pop	{r4, r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	20000083 	.word	0x20000083

0800fb94 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b087      	sub	sp, #28
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800fba2:	88fb      	ldrh	r3, [r7, #6]
 800fba4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d102      	bne.n	800fbb2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800fbac:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb0:	e013      	b.n	800fbda <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800fbb2:	8afa      	ldrh	r2, [r7, #22]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800fbb8:	e00b      	b.n	800fbd2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800fbba:	8afb      	ldrh	r3, [r7, #22]
 800fbbc:	3b01      	subs	r3, #1
 800fbbe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800fbc0:	8afb      	ldrh	r3, [r7, #22]
 800fbc2:	68ba      	ldr	r2, [r7, #8]
 800fbc4:	441a      	add	r2, r3
 800fbc6:	8afb      	ldrh	r3, [r7, #22]
 800fbc8:	7811      	ldrb	r1, [r2, #0]
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	4413      	add	r3, r2
 800fbce:	460a      	mov	r2, r1
 800fbd0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800fbd2:	8afb      	ldrh	r3, [r7, #22]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1f0      	bne.n	800fbba <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	371c      	adds	r7, #28
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe4:	4770      	bx	lr

0800fbe6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b086      	sub	sp, #24
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	60f8      	str	r0, [r7, #12]
 800fbee:	60b9      	str	r1, [r7, #8]
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d101      	bne.n	800fbfe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fbfa:	2303      	movs	r3, #3
 800fbfc:	e01f      	b.n	800fc3e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d003      	beq.n	800fc24 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2201      	movs	r2, #1
 800fc28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	79fa      	ldrb	r2, [r7, #7]
 800fc30:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f007 fb5c 	bl	80172f0 <USBD_LL_Init>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3718      	adds	r7, #24
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
 800fc4e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc50:	2300      	movs	r3, #0
 800fc52:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	e025      	b.n	800fcaa <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	683a      	ldr	r2, [r7, #0]
 800fc62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	32ae      	adds	r2, #174	; 0xae
 800fc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00f      	beq.n	800fc9a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	32ae      	adds	r2, #174	; 0xae
 800fc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8a:	f107 020e 	add.w	r2, r7, #14
 800fc8e:	4610      	mov	r0, r2
 800fc90:	4798      	blx	r3
 800fc92:	4602      	mov	r2, r0
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fca0:	1c5a      	adds	r2, r3, #1
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800fca8:	2300      	movs	r3, #0
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3710      	adds	r7, #16
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b082      	sub	sp, #8
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f007 fb64 	bl	8017388 <USBD_LL_Start>
 800fcc0:	4603      	mov	r3, r0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fcca:	b480      	push	{r7}
 800fccc:	b083      	sub	sp, #12
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fcd2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcec:	2300      	movs	r3, #0
 800fcee:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d009      	beq.n	800fd0e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	78fa      	ldrb	r2, [r7, #3]
 800fd04:	4611      	mov	r1, r2
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	4798      	blx	r3
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3710      	adds	r7, #16
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	460b      	mov	r3, r1
 800fd22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd24:	2300      	movs	r3, #0
 800fd26:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	78fa      	ldrb	r2, [r7, #3]
 800fd32:	4611      	mov	r1, r2
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	4798      	blx	r3
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d001      	beq.n	800fd42 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fd3e:	2303      	movs	r3, #3
 800fd40:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f001 f933 	bl	8010fca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2201      	movs	r2, #1
 800fd68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fd72:	461a      	mov	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fd80:	f003 031f 	and.w	r3, r3, #31
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d01a      	beq.n	800fdbe <USBD_LL_SetupStage+0x72>
 800fd88:	2b02      	cmp	r3, #2
 800fd8a:	d822      	bhi.n	800fdd2 <USBD_LL_SetupStage+0x86>
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <USBD_LL_SetupStage+0x4a>
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d00a      	beq.n	800fdaa <USBD_LL_SetupStage+0x5e>
 800fd94:	e01d      	b.n	800fdd2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fb60 	bl	8010464 <USBD_StdDevReq>
 800fda4:	4603      	mov	r3, r0
 800fda6:	73fb      	strb	r3, [r7, #15]
      break;
 800fda8:	e020      	b.n	800fdec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f000 fbc8 	bl	8010548 <USBD_StdItfReq>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	73fb      	strb	r3, [r7, #15]
      break;
 800fdbc:	e016      	b.n	800fdec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 fc2a 	bl	8010620 <USBD_StdEPReq>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	73fb      	strb	r3, [r7, #15]
      break;
 800fdd0:	e00c      	b.n	800fdec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fdd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	4619      	mov	r1, r3
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f007 fb50 	bl	8017486 <USBD_LL_StallEP>
 800fde6:	4603      	mov	r3, r0
 800fde8:	73fb      	strb	r3, [r7, #15]
      break;
 800fdea:	bf00      	nop
  }

  return ret;
 800fdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b086      	sub	sp, #24
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	60f8      	str	r0, [r7, #12]
 800fdfe:	460b      	mov	r3, r1
 800fe00:	607a      	str	r2, [r7, #4]
 800fe02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fe08:	7afb      	ldrb	r3, [r7, #11]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d16e      	bne.n	800feec <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fe14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe1c:	2b03      	cmp	r3, #3
 800fe1e:	f040 8098 	bne.w	800ff52 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	689a      	ldr	r2, [r3, #8]
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d913      	bls.n	800fe56 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	689a      	ldr	r2, [r3, #8]
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	1ad2      	subs	r2, r2, r3
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	68da      	ldr	r2, [r3, #12]
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	4293      	cmp	r3, r2
 800fe46:	bf28      	it	cs
 800fe48:	4613      	movcs	r3, r2
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	6879      	ldr	r1, [r7, #4]
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f001 f992 	bl	8011178 <USBD_CtlContinueRx>
 800fe54:	e07d      	b.n	800ff52 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fe5c:	f003 031f 	and.w	r3, r3, #31
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d014      	beq.n	800fe8e <USBD_LL_DataOutStage+0x98>
 800fe64:	2b02      	cmp	r3, #2
 800fe66:	d81d      	bhi.n	800fea4 <USBD_LL_DataOutStage+0xae>
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d002      	beq.n	800fe72 <USBD_LL_DataOutStage+0x7c>
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d003      	beq.n	800fe78 <USBD_LL_DataOutStage+0x82>
 800fe70:	e018      	b.n	800fea4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fe72:	2300      	movs	r3, #0
 800fe74:	75bb      	strb	r3, [r7, #22]
            break;
 800fe76:	e018      	b.n	800feaa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	4619      	mov	r1, r3
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f000 fa5e 	bl	8010344 <USBD_CoreFindIF>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	75bb      	strb	r3, [r7, #22]
            break;
 800fe8c:	e00d      	b.n	800feaa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	4619      	mov	r1, r3
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f000 fa60 	bl	801035e <USBD_CoreFindEP>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	75bb      	strb	r3, [r7, #22]
            break;
 800fea2:	e002      	b.n	800feaa <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fea4:	2300      	movs	r3, #0
 800fea6:	75bb      	strb	r3, [r7, #22]
            break;
 800fea8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800feaa:	7dbb      	ldrb	r3, [r7, #22]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d119      	bne.n	800fee4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	2b03      	cmp	r3, #3
 800feba:	d113      	bne.n	800fee4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800febc:	7dba      	ldrb	r2, [r7, #22]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	32ae      	adds	r2, #174	; 0xae
 800fec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00b      	beq.n	800fee4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fecc:	7dba      	ldrb	r2, [r7, #22]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fed4:	7dba      	ldrb	r2, [r7, #22]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	32ae      	adds	r2, #174	; 0xae
 800feda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f001 f958 	bl	801119a <USBD_CtlSendStatus>
 800feea:	e032      	b.n	800ff52 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800feec:	7afb      	ldrb	r3, [r7, #11]
 800feee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	4619      	mov	r1, r3
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f000 fa31 	bl	801035e <USBD_CoreFindEP>
 800fefc:	4603      	mov	r3, r0
 800fefe:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff00:	7dbb      	ldrb	r3, [r7, #22]
 800ff02:	2bff      	cmp	r3, #255	; 0xff
 800ff04:	d025      	beq.n	800ff52 <USBD_LL_DataOutStage+0x15c>
 800ff06:	7dbb      	ldrb	r3, [r7, #22]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d122      	bne.n	800ff52 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	2b03      	cmp	r3, #3
 800ff16:	d117      	bne.n	800ff48 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ff18:	7dba      	ldrb	r2, [r7, #22]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	32ae      	adds	r2, #174	; 0xae
 800ff1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff22:	699b      	ldr	r3, [r3, #24]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00f      	beq.n	800ff48 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ff28:	7dba      	ldrb	r2, [r7, #22]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ff30:	7dba      	ldrb	r2, [r7, #22]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	32ae      	adds	r2, #174	; 0xae
 800ff36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	7afa      	ldrb	r2, [r7, #11]
 800ff3e:	4611      	mov	r1, r2
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	4798      	blx	r3
 800ff44:	4603      	mov	r3, r0
 800ff46:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ff48:	7dfb      	ldrb	r3, [r7, #23]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d001      	beq.n	800ff52 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ff4e:	7dfb      	ldrb	r3, [r7, #23]
 800ff50:	e000      	b.n	800ff54 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ff52:	2300      	movs	r3, #0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3718      	adds	r7, #24
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b086      	sub	sp, #24
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	460b      	mov	r3, r1
 800ff66:	607a      	str	r2, [r7, #4]
 800ff68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ff6a:	7afb      	ldrb	r3, [r7, #11]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d16f      	bne.n	8010050 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	3314      	adds	r3, #20
 800ff74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff7c:	2b02      	cmp	r3, #2
 800ff7e:	d15a      	bne.n	8010036 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	689a      	ldr	r2, [r3, #8]
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d914      	bls.n	800ffb6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	689a      	ldr	r2, [r3, #8]
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	1ad2      	subs	r2, r2, r3
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	6879      	ldr	r1, [r7, #4]
 800ffa2:	68f8      	ldr	r0, [r7, #12]
 800ffa4:	f001 f8d7 	bl	8011156 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	2200      	movs	r2, #0
 800ffac:	2100      	movs	r1, #0
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f007 fb13 	bl	80175da <USBD_LL_PrepareReceive>
 800ffb4:	e03f      	b.n	8010036 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	68da      	ldr	r2, [r3, #12]
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d11c      	bne.n	800fffc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	685a      	ldr	r2, [r3, #4]
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d316      	bcc.n	800fffc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	685a      	ldr	r2, [r3, #4]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d20f      	bcs.n	800fffc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2100      	movs	r1, #0
 800ffe0:	68f8      	ldr	r0, [r7, #12]
 800ffe2:	f001 f8b8 	bl	8011156 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ffee:	2300      	movs	r3, #0
 800fff0:	2200      	movs	r2, #0
 800fff2:	2100      	movs	r1, #0
 800fff4:	68f8      	ldr	r0, [r7, #12]
 800fff6:	f007 faf0 	bl	80175da <USBD_LL_PrepareReceive>
 800fffa:	e01c      	b.n	8010036 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010002:	b2db      	uxtb	r3, r3
 8010004:	2b03      	cmp	r3, #3
 8010006:	d10f      	bne.n	8010028 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d009      	beq.n	8010028 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2200      	movs	r2, #0
 8010018:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010028:	2180      	movs	r1, #128	; 0x80
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f007 fa2b 	bl	8017486 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010030:	68f8      	ldr	r0, [r7, #12]
 8010032:	f001 f8c5 	bl	80111c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d03a      	beq.n	80100b6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f7ff fe42 	bl	800fcca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2200      	movs	r2, #0
 801004a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801004e:	e032      	b.n	80100b6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010050:	7afb      	ldrb	r3, [r7, #11]
 8010052:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010056:	b2db      	uxtb	r3, r3
 8010058:	4619      	mov	r1, r3
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f000 f97f 	bl	801035e <USBD_CoreFindEP>
 8010060:	4603      	mov	r3, r0
 8010062:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010064:	7dfb      	ldrb	r3, [r7, #23]
 8010066:	2bff      	cmp	r3, #255	; 0xff
 8010068:	d025      	beq.n	80100b6 <USBD_LL_DataInStage+0x15a>
 801006a:	7dfb      	ldrb	r3, [r7, #23]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d122      	bne.n	80100b6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010076:	b2db      	uxtb	r3, r3
 8010078:	2b03      	cmp	r3, #3
 801007a:	d11c      	bne.n	80100b6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801007c:	7dfa      	ldrb	r2, [r7, #23]
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	32ae      	adds	r2, #174	; 0xae
 8010082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010086:	695b      	ldr	r3, [r3, #20]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d014      	beq.n	80100b6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801008c:	7dfa      	ldrb	r2, [r7, #23]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010094:	7dfa      	ldrb	r2, [r7, #23]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	32ae      	adds	r2, #174	; 0xae
 801009a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801009e:	695b      	ldr	r3, [r3, #20]
 80100a0:	7afa      	ldrb	r2, [r7, #11]
 80100a2:	4611      	mov	r1, r2
 80100a4:	68f8      	ldr	r0, [r7, #12]
 80100a6:	4798      	blx	r3
 80100a8:	4603      	mov	r3, r0
 80100aa:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80100ac:	7dbb      	ldrb	r3, [r7, #22]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80100b2:	7dbb      	ldrb	r3, [r7, #22]
 80100b4:	e000      	b.n	80100b8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80100b6:	2300      	movs	r3, #0
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3718      	adds	r7, #24
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80100c8:	2300      	movs	r3, #0
 80100ca:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2201      	movs	r2, #1
 80100d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d014      	beq.n	8010126 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00e      	beq.n	8010126 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	6852      	ldr	r2, [r2, #4]
 8010114:	b2d2      	uxtb	r2, r2
 8010116:	4611      	mov	r1, r2
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	4798      	blx	r3
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d001      	beq.n	8010126 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010122:	2303      	movs	r3, #3
 8010124:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010126:	2340      	movs	r3, #64	; 0x40
 8010128:	2200      	movs	r2, #0
 801012a:	2100      	movs	r1, #0
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f007 f946 	bl	80173be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2201      	movs	r2, #1
 8010136:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2240      	movs	r2, #64	; 0x40
 801013e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010142:	2340      	movs	r3, #64	; 0x40
 8010144:	2200      	movs	r2, #0
 8010146:	2180      	movs	r1, #128	; 0x80
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f007 f938 	bl	80173be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2201      	movs	r2, #1
 8010152:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2240      	movs	r2, #64	; 0x40
 8010158:	621a      	str	r2, [r3, #32]

  return ret;
 801015a:	7bfb      	ldrb	r3, [r7, #15]
}
 801015c:	4618      	mov	r0, r3
 801015e:	3710      	adds	r7, #16
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	460b      	mov	r3, r1
 801016e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	78fa      	ldrb	r2, [r7, #3]
 8010174:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010176:	2300      	movs	r3, #0
}
 8010178:	4618      	mov	r0, r3
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010192:	b2da      	uxtb	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2204      	movs	r2, #4
 801019e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80101a2:	2300      	movs	r3, #0
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	2b04      	cmp	r3, #4
 80101c2:	d106      	bne.n	80101d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80101ca:	b2da      	uxtb	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80101d2:	2300      	movs	r3, #0
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b03      	cmp	r3, #3
 80101f2:	d110      	bne.n	8010216 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00b      	beq.n	8010216 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010204:	69db      	ldr	r3, [r3, #28]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d005      	beq.n	8010216 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010210:	69db      	ldr	r3, [r3, #28]
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010216:	2300      	movs	r3, #0
}
 8010218:	4618      	mov	r0, r3
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	460b      	mov	r3, r1
 801022a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	32ae      	adds	r2, #174	; 0xae
 8010236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801023e:	2303      	movs	r3, #3
 8010240:	e01c      	b.n	801027c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010248:	b2db      	uxtb	r3, r3
 801024a:	2b03      	cmp	r3, #3
 801024c:	d115      	bne.n	801027a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	32ae      	adds	r2, #174	; 0xae
 8010258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801025c:	6a1b      	ldr	r3, [r3, #32]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00b      	beq.n	801027a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	32ae      	adds	r2, #174	; 0xae
 801026c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010270:	6a1b      	ldr	r3, [r3, #32]
 8010272:	78fa      	ldrb	r2, [r7, #3]
 8010274:	4611      	mov	r1, r2
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801027a:	2300      	movs	r3, #0
}
 801027c:	4618      	mov	r0, r3
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	32ae      	adds	r2, #174	; 0xae
 801029a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d101      	bne.n	80102a6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80102a2:	2303      	movs	r3, #3
 80102a4:	e01c      	b.n	80102e0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b03      	cmp	r3, #3
 80102b0:	d115      	bne.n	80102de <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	32ae      	adds	r2, #174	; 0xae
 80102bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d00b      	beq.n	80102de <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	32ae      	adds	r2, #174	; 0xae
 80102d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d6:	78fa      	ldrb	r2, [r7, #3]
 80102d8:	4611      	mov	r1, r2
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80102de:	2300      	movs	r3, #0
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	370c      	adds	r7, #12
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr

080102fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b084      	sub	sp, #16
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010306:	2300      	movs	r3, #0
 8010308:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2201      	movs	r2, #1
 801030e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00e      	beq.n	801033a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	6852      	ldr	r2, [r2, #4]
 8010328:	b2d2      	uxtb	r2, r2
 801032a:	4611      	mov	r1, r2
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	4798      	blx	r3
 8010330:	4603      	mov	r3, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	d001      	beq.n	801033a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010336:	2303      	movs	r3, #3
 8010338:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801033a:	7bfb      	ldrb	r3, [r7, #15]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	460b      	mov	r3, r1
 801034e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010350:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010352:	4618      	mov	r0, r3
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801035e:	b480      	push	{r7}
 8010360:	b083      	sub	sp, #12
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	460b      	mov	r3, r1
 8010368:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801036a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801036c:	4618      	mov	r0, r3
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b086      	sub	sp, #24
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	460b      	mov	r3, r1
 8010382:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801038c:	2300      	movs	r3, #0
 801038e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	885b      	ldrh	r3, [r3, #2]
 8010394:	b29a      	uxth	r2, r3
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	b29b      	uxth	r3, r3
 801039c:	429a      	cmp	r2, r3
 801039e:	d920      	bls.n	80103e2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80103a8:	e013      	b.n	80103d2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80103aa:	f107 030a 	add.w	r3, r7, #10
 80103ae:	4619      	mov	r1, r3
 80103b0:	6978      	ldr	r0, [r7, #20]
 80103b2:	f000 f81b 	bl	80103ec <USBD_GetNextDesc>
 80103b6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	785b      	ldrb	r3, [r3, #1]
 80103bc:	2b05      	cmp	r3, #5
 80103be:	d108      	bne.n	80103d2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	789b      	ldrb	r3, [r3, #2]
 80103c8:	78fa      	ldrb	r2, [r7, #3]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d008      	beq.n	80103e0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80103ce:	2300      	movs	r3, #0
 80103d0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	885b      	ldrh	r3, [r3, #2]
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	897b      	ldrh	r3, [r7, #10]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d8e5      	bhi.n	80103aa <USBD_GetEpDesc+0x32>
 80103de:	e000      	b.n	80103e2 <USBD_GetEpDesc+0x6a>
          break;
 80103e0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80103e2:	693b      	ldr	r3, [r7, #16]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	881a      	ldrh	r2, [r3, #0]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	b29b      	uxth	r3, r3
 8010404:	4413      	add	r3, r2
 8010406:	b29a      	uxth	r2, r3
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	461a      	mov	r2, r3
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4413      	add	r3, r2
 8010416:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010418:	68fb      	ldr	r3, [r7, #12]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3714      	adds	r7, #20
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr

08010426 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010426:	b480      	push	{r7}
 8010428:	b087      	sub	sp, #28
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	3301      	adds	r3, #1
 801043c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010444:	8a3b      	ldrh	r3, [r7, #16]
 8010446:	021b      	lsls	r3, r3, #8
 8010448:	b21a      	sxth	r2, r3
 801044a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801044e:	4313      	orrs	r3, r2
 8010450:	b21b      	sxth	r3, r3
 8010452:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010454:	89fb      	ldrh	r3, [r7, #14]
}
 8010456:	4618      	mov	r0, r3
 8010458:	371c      	adds	r7, #28
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr
	...

08010464 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801046e:	2300      	movs	r3, #0
 8010470:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801047a:	2b40      	cmp	r3, #64	; 0x40
 801047c:	d005      	beq.n	801048a <USBD_StdDevReq+0x26>
 801047e:	2b40      	cmp	r3, #64	; 0x40
 8010480:	d857      	bhi.n	8010532 <USBD_StdDevReq+0xce>
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00f      	beq.n	80104a6 <USBD_StdDevReq+0x42>
 8010486:	2b20      	cmp	r3, #32
 8010488:	d153      	bne.n	8010532 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	32ae      	adds	r2, #174	; 0xae
 8010494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010498:	689b      	ldr	r3, [r3, #8]
 801049a:	6839      	ldr	r1, [r7, #0]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	4798      	blx	r3
 80104a0:	4603      	mov	r3, r0
 80104a2:	73fb      	strb	r3, [r7, #15]
      break;
 80104a4:	e04a      	b.n	801053c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	785b      	ldrb	r3, [r3, #1]
 80104aa:	2b09      	cmp	r3, #9
 80104ac:	d83b      	bhi.n	8010526 <USBD_StdDevReq+0xc2>
 80104ae:	a201      	add	r2, pc, #4	; (adr r2, 80104b4 <USBD_StdDevReq+0x50>)
 80104b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b4:	08010509 	.word	0x08010509
 80104b8:	0801051d 	.word	0x0801051d
 80104bc:	08010527 	.word	0x08010527
 80104c0:	08010513 	.word	0x08010513
 80104c4:	08010527 	.word	0x08010527
 80104c8:	080104e7 	.word	0x080104e7
 80104cc:	080104dd 	.word	0x080104dd
 80104d0:	08010527 	.word	0x08010527
 80104d4:	080104ff 	.word	0x080104ff
 80104d8:	080104f1 	.word	0x080104f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80104dc:	6839      	ldr	r1, [r7, #0]
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 fa3c 	bl	801095c <USBD_GetDescriptor>
          break;
 80104e4:	e024      	b.n	8010530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 fbcb 	bl	8010c84 <USBD_SetAddress>
          break;
 80104ee:	e01f      	b.n	8010530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80104f0:	6839      	ldr	r1, [r7, #0]
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 fc0a 	bl	8010d0c <USBD_SetConfig>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]
          break;
 80104fc:	e018      	b.n	8010530 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80104fe:	6839      	ldr	r1, [r7, #0]
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f000 fcad 	bl	8010e60 <USBD_GetConfig>
          break;
 8010506:	e013      	b.n	8010530 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010508:	6839      	ldr	r1, [r7, #0]
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 fcde 	bl	8010ecc <USBD_GetStatus>
          break;
 8010510:	e00e      	b.n	8010530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010512:	6839      	ldr	r1, [r7, #0]
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f000 fd0d 	bl	8010f34 <USBD_SetFeature>
          break;
 801051a:	e009      	b.n	8010530 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801051c:	6839      	ldr	r1, [r7, #0]
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 fd31 	bl	8010f86 <USBD_ClrFeature>
          break;
 8010524:	e004      	b.n	8010530 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010526:	6839      	ldr	r1, [r7, #0]
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 fd88 	bl	801103e <USBD_CtlError>
          break;
 801052e:	bf00      	nop
      }
      break;
 8010530:	e004      	b.n	801053c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010532:	6839      	ldr	r1, [r7, #0]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 fd82 	bl	801103e <USBD_CtlError>
      break;
 801053a:	bf00      	nop
  }

  return ret;
 801053c:	7bfb      	ldrb	r3, [r7, #15]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop

08010548 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010552:	2300      	movs	r3, #0
 8010554:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801055e:	2b40      	cmp	r3, #64	; 0x40
 8010560:	d005      	beq.n	801056e <USBD_StdItfReq+0x26>
 8010562:	2b40      	cmp	r3, #64	; 0x40
 8010564:	d852      	bhi.n	801060c <USBD_StdItfReq+0xc4>
 8010566:	2b00      	cmp	r3, #0
 8010568:	d001      	beq.n	801056e <USBD_StdItfReq+0x26>
 801056a:	2b20      	cmp	r3, #32
 801056c:	d14e      	bne.n	801060c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010574:	b2db      	uxtb	r3, r3
 8010576:	3b01      	subs	r3, #1
 8010578:	2b02      	cmp	r3, #2
 801057a:	d840      	bhi.n	80105fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	889b      	ldrh	r3, [r3, #4]
 8010580:	b2db      	uxtb	r3, r3
 8010582:	2b01      	cmp	r3, #1
 8010584:	d836      	bhi.n	80105f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	889b      	ldrh	r3, [r3, #4]
 801058a:	b2db      	uxtb	r3, r3
 801058c:	4619      	mov	r1, r3
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f7ff fed8 	bl	8010344 <USBD_CoreFindIF>
 8010594:	4603      	mov	r3, r0
 8010596:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010598:	7bbb      	ldrb	r3, [r7, #14]
 801059a:	2bff      	cmp	r3, #255	; 0xff
 801059c:	d01d      	beq.n	80105da <USBD_StdItfReq+0x92>
 801059e:	7bbb      	ldrb	r3, [r7, #14]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d11a      	bne.n	80105da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80105a4:	7bba      	ldrb	r2, [r7, #14]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	32ae      	adds	r2, #174	; 0xae
 80105aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00f      	beq.n	80105d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80105b4:	7bba      	ldrb	r2, [r7, #14]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80105bc:	7bba      	ldrb	r2, [r7, #14]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	32ae      	adds	r2, #174	; 0xae
 80105c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105c6:	689b      	ldr	r3, [r3, #8]
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	4798      	blx	r3
 80105ce:	4603      	mov	r3, r0
 80105d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80105d2:	e004      	b.n	80105de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80105d4:	2303      	movs	r3, #3
 80105d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80105d8:	e001      	b.n	80105de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80105da:	2303      	movs	r3, #3
 80105dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	88db      	ldrh	r3, [r3, #6]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d110      	bne.n	8010608 <USBD_StdItfReq+0xc0>
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10d      	bne.n	8010608 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 fdd4 	bl	801119a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80105f2:	e009      	b.n	8010608 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80105f4:	6839      	ldr	r1, [r7, #0]
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fd21 	bl	801103e <USBD_CtlError>
          break;
 80105fc:	e004      	b.n	8010608 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80105fe:	6839      	ldr	r1, [r7, #0]
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 fd1c 	bl	801103e <USBD_CtlError>
          break;
 8010606:	e000      	b.n	801060a <USBD_StdItfReq+0xc2>
          break;
 8010608:	bf00      	nop
      }
      break;
 801060a:	e004      	b.n	8010616 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801060c:	6839      	ldr	r1, [r7, #0]
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 fd15 	bl	801103e <USBD_CtlError>
      break;
 8010614:	bf00      	nop
  }

  return ret;
 8010616:	7bfb      	ldrb	r3, [r7, #15]
}
 8010618:	4618      	mov	r0, r3
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	889b      	ldrh	r3, [r3, #4]
 8010632:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801063c:	2b40      	cmp	r3, #64	; 0x40
 801063e:	d007      	beq.n	8010650 <USBD_StdEPReq+0x30>
 8010640:	2b40      	cmp	r3, #64	; 0x40
 8010642:	f200 817f 	bhi.w	8010944 <USBD_StdEPReq+0x324>
 8010646:	2b00      	cmp	r3, #0
 8010648:	d02a      	beq.n	80106a0 <USBD_StdEPReq+0x80>
 801064a:	2b20      	cmp	r3, #32
 801064c:	f040 817a 	bne.w	8010944 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010650:	7bbb      	ldrb	r3, [r7, #14]
 8010652:	4619      	mov	r1, r3
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7ff fe82 	bl	801035e <USBD_CoreFindEP>
 801065a:	4603      	mov	r3, r0
 801065c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801065e:	7b7b      	ldrb	r3, [r7, #13]
 8010660:	2bff      	cmp	r3, #255	; 0xff
 8010662:	f000 8174 	beq.w	801094e <USBD_StdEPReq+0x32e>
 8010666:	7b7b      	ldrb	r3, [r7, #13]
 8010668:	2b00      	cmp	r3, #0
 801066a:	f040 8170 	bne.w	801094e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801066e:	7b7a      	ldrb	r2, [r7, #13]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010676:	7b7a      	ldrb	r2, [r7, #13]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	32ae      	adds	r2, #174	; 0xae
 801067c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010680:	689b      	ldr	r3, [r3, #8]
 8010682:	2b00      	cmp	r3, #0
 8010684:	f000 8163 	beq.w	801094e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010688:	7b7a      	ldrb	r2, [r7, #13]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	32ae      	adds	r2, #174	; 0xae
 801068e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010692:	689b      	ldr	r3, [r3, #8]
 8010694:	6839      	ldr	r1, [r7, #0]
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	4798      	blx	r3
 801069a:	4603      	mov	r3, r0
 801069c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801069e:	e156      	b.n	801094e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	785b      	ldrb	r3, [r3, #1]
 80106a4:	2b03      	cmp	r3, #3
 80106a6:	d008      	beq.n	80106ba <USBD_StdEPReq+0x9a>
 80106a8:	2b03      	cmp	r3, #3
 80106aa:	f300 8145 	bgt.w	8010938 <USBD_StdEPReq+0x318>
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f000 809b 	beq.w	80107ea <USBD_StdEPReq+0x1ca>
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d03c      	beq.n	8010732 <USBD_StdEPReq+0x112>
 80106b8:	e13e      	b.n	8010938 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d002      	beq.n	80106cc <USBD_StdEPReq+0xac>
 80106c6:	2b03      	cmp	r3, #3
 80106c8:	d016      	beq.n	80106f8 <USBD_StdEPReq+0xd8>
 80106ca:	e02c      	b.n	8010726 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106cc:	7bbb      	ldrb	r3, [r7, #14]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d00d      	beq.n	80106ee <USBD_StdEPReq+0xce>
 80106d2:	7bbb      	ldrb	r3, [r7, #14]
 80106d4:	2b80      	cmp	r3, #128	; 0x80
 80106d6:	d00a      	beq.n	80106ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80106d8:	7bbb      	ldrb	r3, [r7, #14]
 80106da:	4619      	mov	r1, r3
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f006 fed2 	bl	8017486 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80106e2:	2180      	movs	r1, #128	; 0x80
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f006 fece 	bl	8017486 <USBD_LL_StallEP>
 80106ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80106ec:	e020      	b.n	8010730 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f000 fca4 	bl	801103e <USBD_CtlError>
              break;
 80106f6:	e01b      	b.n	8010730 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	885b      	ldrh	r3, [r3, #2]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10e      	bne.n	801071e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010700:	7bbb      	ldrb	r3, [r7, #14]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00b      	beq.n	801071e <USBD_StdEPReq+0xfe>
 8010706:	7bbb      	ldrb	r3, [r7, #14]
 8010708:	2b80      	cmp	r3, #128	; 0x80
 801070a:	d008      	beq.n	801071e <USBD_StdEPReq+0xfe>
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	88db      	ldrh	r3, [r3, #6]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d104      	bne.n	801071e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010714:	7bbb      	ldrb	r3, [r7, #14]
 8010716:	4619      	mov	r1, r3
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f006 feb4 	bl	8017486 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 fd3b 	bl	801119a <USBD_CtlSendStatus>

              break;
 8010724:	e004      	b.n	8010730 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010726:	6839      	ldr	r1, [r7, #0]
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f000 fc88 	bl	801103e <USBD_CtlError>
              break;
 801072e:	bf00      	nop
          }
          break;
 8010730:	e107      	b.n	8010942 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010738:	b2db      	uxtb	r3, r3
 801073a:	2b02      	cmp	r3, #2
 801073c:	d002      	beq.n	8010744 <USBD_StdEPReq+0x124>
 801073e:	2b03      	cmp	r3, #3
 8010740:	d016      	beq.n	8010770 <USBD_StdEPReq+0x150>
 8010742:	e04b      	b.n	80107dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010744:	7bbb      	ldrb	r3, [r7, #14]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00d      	beq.n	8010766 <USBD_StdEPReq+0x146>
 801074a:	7bbb      	ldrb	r3, [r7, #14]
 801074c:	2b80      	cmp	r3, #128	; 0x80
 801074e:	d00a      	beq.n	8010766 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010750:	7bbb      	ldrb	r3, [r7, #14]
 8010752:	4619      	mov	r1, r3
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f006 fe96 	bl	8017486 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801075a:	2180      	movs	r1, #128	; 0x80
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f006 fe92 	bl	8017486 <USBD_LL_StallEP>
 8010762:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010764:	e040      	b.n	80107e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010766:	6839      	ldr	r1, [r7, #0]
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 fc68 	bl	801103e <USBD_CtlError>
              break;
 801076e:	e03b      	b.n	80107e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	885b      	ldrh	r3, [r3, #2]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d136      	bne.n	80107e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010778:	7bbb      	ldrb	r3, [r7, #14]
 801077a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801077e:	2b00      	cmp	r3, #0
 8010780:	d004      	beq.n	801078c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010782:	7bbb      	ldrb	r3, [r7, #14]
 8010784:	4619      	mov	r1, r3
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f006 fe9c 	bl	80174c4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f000 fd04 	bl	801119a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010792:	7bbb      	ldrb	r3, [r7, #14]
 8010794:	4619      	mov	r1, r3
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff fde1 	bl	801035e <USBD_CoreFindEP>
 801079c:	4603      	mov	r3, r0
 801079e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80107a0:	7b7b      	ldrb	r3, [r7, #13]
 80107a2:	2bff      	cmp	r3, #255	; 0xff
 80107a4:	d01f      	beq.n	80107e6 <USBD_StdEPReq+0x1c6>
 80107a6:	7b7b      	ldrb	r3, [r7, #13]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d11c      	bne.n	80107e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80107ac:	7b7a      	ldrb	r2, [r7, #13]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80107b4:	7b7a      	ldrb	r2, [r7, #13]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	32ae      	adds	r2, #174	; 0xae
 80107ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107be:	689b      	ldr	r3, [r3, #8]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d010      	beq.n	80107e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80107c4:	7b7a      	ldrb	r2, [r7, #13]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	32ae      	adds	r2, #174	; 0xae
 80107ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107ce:	689b      	ldr	r3, [r3, #8]
 80107d0:	6839      	ldr	r1, [r7, #0]
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	4798      	blx	r3
 80107d6:	4603      	mov	r3, r0
 80107d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80107da:	e004      	b.n	80107e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 fc2d 	bl	801103e <USBD_CtlError>
              break;
 80107e4:	e000      	b.n	80107e8 <USBD_StdEPReq+0x1c8>
              break;
 80107e6:	bf00      	nop
          }
          break;
 80107e8:	e0ab      	b.n	8010942 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d002      	beq.n	80107fc <USBD_StdEPReq+0x1dc>
 80107f6:	2b03      	cmp	r3, #3
 80107f8:	d032      	beq.n	8010860 <USBD_StdEPReq+0x240>
 80107fa:	e097      	b.n	801092c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80107fc:	7bbb      	ldrb	r3, [r7, #14]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d007      	beq.n	8010812 <USBD_StdEPReq+0x1f2>
 8010802:	7bbb      	ldrb	r3, [r7, #14]
 8010804:	2b80      	cmp	r3, #128	; 0x80
 8010806:	d004      	beq.n	8010812 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 fc17 	bl	801103e <USBD_CtlError>
                break;
 8010810:	e091      	b.n	8010936 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010816:	2b00      	cmp	r3, #0
 8010818:	da0b      	bge.n	8010832 <USBD_StdEPReq+0x212>
 801081a:	7bbb      	ldrb	r3, [r7, #14]
 801081c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010820:	4613      	mov	r3, r2
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	4413      	add	r3, r2
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	3310      	adds	r3, #16
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	4413      	add	r3, r2
 801082e:	3304      	adds	r3, #4
 8010830:	e00b      	b.n	801084a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010832:	7bbb      	ldrb	r3, [r7, #14]
 8010834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010838:	4613      	mov	r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	4413      	add	r3, r2
 801083e:	009b      	lsls	r3, r3, #2
 8010840:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	4413      	add	r3, r2
 8010848:	3304      	adds	r3, #4
 801084a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	2200      	movs	r2, #0
 8010850:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	2202      	movs	r2, #2
 8010856:	4619      	mov	r1, r3
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 fc61 	bl	8011120 <USBD_CtlSendData>
              break;
 801085e:	e06a      	b.n	8010936 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010864:	2b00      	cmp	r3, #0
 8010866:	da11      	bge.n	801088c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010868:	7bbb      	ldrb	r3, [r7, #14]
 801086a:	f003 020f 	and.w	r2, r3, #15
 801086e:	6879      	ldr	r1, [r7, #4]
 8010870:	4613      	mov	r3, r2
 8010872:	009b      	lsls	r3, r3, #2
 8010874:	4413      	add	r3, r2
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	440b      	add	r3, r1
 801087a:	3324      	adds	r3, #36	; 0x24
 801087c:	881b      	ldrh	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d117      	bne.n	80108b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010882:	6839      	ldr	r1, [r7, #0]
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f000 fbda 	bl	801103e <USBD_CtlError>
                  break;
 801088a:	e054      	b.n	8010936 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801088c:	7bbb      	ldrb	r3, [r7, #14]
 801088e:	f003 020f 	and.w	r2, r3, #15
 8010892:	6879      	ldr	r1, [r7, #4]
 8010894:	4613      	mov	r3, r2
 8010896:	009b      	lsls	r3, r3, #2
 8010898:	4413      	add	r3, r2
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	440b      	add	r3, r1
 801089e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d104      	bne.n	80108b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80108a8:	6839      	ldr	r1, [r7, #0]
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f000 fbc7 	bl	801103e <USBD_CtlError>
                  break;
 80108b0:	e041      	b.n	8010936 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	da0b      	bge.n	80108d2 <USBD_StdEPReq+0x2b2>
 80108ba:	7bbb      	ldrb	r3, [r7, #14]
 80108bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80108c0:	4613      	mov	r3, r2
 80108c2:	009b      	lsls	r3, r3, #2
 80108c4:	4413      	add	r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	3310      	adds	r3, #16
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	4413      	add	r3, r2
 80108ce:	3304      	adds	r3, #4
 80108d0:	e00b      	b.n	80108ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80108d2:	7bbb      	ldrb	r3, [r7, #14]
 80108d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108d8:	4613      	mov	r3, r2
 80108da:	009b      	lsls	r3, r3, #2
 80108dc:	4413      	add	r3, r2
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	4413      	add	r3, r2
 80108e8:	3304      	adds	r3, #4
 80108ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80108ec:	7bbb      	ldrb	r3, [r7, #14]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d002      	beq.n	80108f8 <USBD_StdEPReq+0x2d8>
 80108f2:	7bbb      	ldrb	r3, [r7, #14]
 80108f4:	2b80      	cmp	r3, #128	; 0x80
 80108f6:	d103      	bne.n	8010900 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	2200      	movs	r2, #0
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	e00e      	b.n	801091e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010900:	7bbb      	ldrb	r3, [r7, #14]
 8010902:	4619      	mov	r1, r3
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f006 fdfc 	bl	8017502 <USBD_LL_IsStallEP>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d003      	beq.n	8010918 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	2201      	movs	r2, #1
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	e002      	b.n	801091e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	2200      	movs	r2, #0
 801091c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	2202      	movs	r2, #2
 8010922:	4619      	mov	r1, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 fbfb 	bl	8011120 <USBD_CtlSendData>
              break;
 801092a:	e004      	b.n	8010936 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801092c:	6839      	ldr	r1, [r7, #0]
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 fb85 	bl	801103e <USBD_CtlError>
              break;
 8010934:	bf00      	nop
          }
          break;
 8010936:	e004      	b.n	8010942 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010938:	6839      	ldr	r1, [r7, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 fb7f 	bl	801103e <USBD_CtlError>
          break;
 8010940:	bf00      	nop
      }
      break;
 8010942:	e005      	b.n	8010950 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010944:	6839      	ldr	r1, [r7, #0]
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 fb79 	bl	801103e <USBD_CtlError>
      break;
 801094c:	e000      	b.n	8010950 <USBD_StdEPReq+0x330>
      break;
 801094e:	bf00      	nop
  }

  return ret;
 8010950:	7bfb      	ldrb	r3, [r7, #15]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
	...

0801095c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010966:	2300      	movs	r3, #0
 8010968:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801096a:	2300      	movs	r3, #0
 801096c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801096e:	2300      	movs	r3, #0
 8010970:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	885b      	ldrh	r3, [r3, #2]
 8010976:	0a1b      	lsrs	r3, r3, #8
 8010978:	b29b      	uxth	r3, r3
 801097a:	3b01      	subs	r3, #1
 801097c:	2b0e      	cmp	r3, #14
 801097e:	f200 8152 	bhi.w	8010c26 <USBD_GetDescriptor+0x2ca>
 8010982:	a201      	add	r2, pc, #4	; (adr r2, 8010988 <USBD_GetDescriptor+0x2c>)
 8010984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010988:	080109f9 	.word	0x080109f9
 801098c:	08010a11 	.word	0x08010a11
 8010990:	08010a51 	.word	0x08010a51
 8010994:	08010c27 	.word	0x08010c27
 8010998:	08010c27 	.word	0x08010c27
 801099c:	08010bc7 	.word	0x08010bc7
 80109a0:	08010bf3 	.word	0x08010bf3
 80109a4:	08010c27 	.word	0x08010c27
 80109a8:	08010c27 	.word	0x08010c27
 80109ac:	08010c27 	.word	0x08010c27
 80109b0:	08010c27 	.word	0x08010c27
 80109b4:	08010c27 	.word	0x08010c27
 80109b8:	08010c27 	.word	0x08010c27
 80109bc:	08010c27 	.word	0x08010c27
 80109c0:	080109c5 	.word	0x080109c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109ca:	69db      	ldr	r3, [r3, #28]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d00b      	beq.n	80109e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109d6:	69db      	ldr	r3, [r3, #28]
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	7c12      	ldrb	r2, [r2, #16]
 80109dc:	f107 0108 	add.w	r1, r7, #8
 80109e0:	4610      	mov	r0, r2
 80109e2:	4798      	blx	r3
 80109e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109e6:	e126      	b.n	8010c36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80109e8:	6839      	ldr	r1, [r7, #0]
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 fb27 	bl	801103e <USBD_CtlError>
        err++;
 80109f0:	7afb      	ldrb	r3, [r7, #11]
 80109f2:	3301      	adds	r3, #1
 80109f4:	72fb      	strb	r3, [r7, #11]
      break;
 80109f6:	e11e      	b.n	8010c36 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	7c12      	ldrb	r2, [r2, #16]
 8010a04:	f107 0108 	add.w	r1, r7, #8
 8010a08:	4610      	mov	r0, r2
 8010a0a:	4798      	blx	r3
 8010a0c:	60f8      	str	r0, [r7, #12]
      break;
 8010a0e:	e112      	b.n	8010c36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	7c1b      	ldrb	r3, [r3, #16]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10d      	bne.n	8010a34 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a20:	f107 0208 	add.w	r2, r7, #8
 8010a24:	4610      	mov	r0, r2
 8010a26:	4798      	blx	r3
 8010a28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	2202      	movs	r2, #2
 8010a30:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010a32:	e100      	b.n	8010c36 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a3c:	f107 0208 	add.w	r2, r7, #8
 8010a40:	4610      	mov	r0, r2
 8010a42:	4798      	blx	r3
 8010a44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	2202      	movs	r2, #2
 8010a4c:	701a      	strb	r2, [r3, #0]
      break;
 8010a4e:	e0f2      	b.n	8010c36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	885b      	ldrh	r3, [r3, #2]
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b05      	cmp	r3, #5
 8010a58:	f200 80ac 	bhi.w	8010bb4 <USBD_GetDescriptor+0x258>
 8010a5c:	a201      	add	r2, pc, #4	; (adr r2, 8010a64 <USBD_GetDescriptor+0x108>)
 8010a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a62:	bf00      	nop
 8010a64:	08010a7d 	.word	0x08010a7d
 8010a68:	08010ab1 	.word	0x08010ab1
 8010a6c:	08010ae5 	.word	0x08010ae5
 8010a70:	08010b19 	.word	0x08010b19
 8010a74:	08010b4d 	.word	0x08010b4d
 8010a78:	08010b81 	.word	0x08010b81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d00b      	beq.n	8010aa0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	7c12      	ldrb	r2, [r2, #16]
 8010a94:	f107 0108 	add.w	r1, r7, #8
 8010a98:	4610      	mov	r0, r2
 8010a9a:	4798      	blx	r3
 8010a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a9e:	e091      	b.n	8010bc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010aa0:	6839      	ldr	r1, [r7, #0]
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 facb 	bl	801103e <USBD_CtlError>
            err++;
 8010aa8:	7afb      	ldrb	r3, [r7, #11]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	72fb      	strb	r3, [r7, #11]
          break;
 8010aae:	e089      	b.n	8010bc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00b      	beq.n	8010ad4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	7c12      	ldrb	r2, [r2, #16]
 8010ac8:	f107 0108 	add.w	r1, r7, #8
 8010acc:	4610      	mov	r0, r2
 8010ace:	4798      	blx	r3
 8010ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ad2:	e077      	b.n	8010bc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ad4:	6839      	ldr	r1, [r7, #0]
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 fab1 	bl	801103e <USBD_CtlError>
            err++;
 8010adc:	7afb      	ldrb	r3, [r7, #11]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8010ae2:	e06f      	b.n	8010bc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00b      	beq.n	8010b08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	7c12      	ldrb	r2, [r2, #16]
 8010afc:	f107 0108 	add.w	r1, r7, #8
 8010b00:	4610      	mov	r0, r2
 8010b02:	4798      	blx	r3
 8010b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b06:	e05d      	b.n	8010bc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b08:	6839      	ldr	r1, [r7, #0]
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 fa97 	bl	801103e <USBD_CtlError>
            err++;
 8010b10:	7afb      	ldrb	r3, [r7, #11]
 8010b12:	3301      	adds	r3, #1
 8010b14:	72fb      	strb	r3, [r7, #11]
          break;
 8010b16:	e055      	b.n	8010bc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b1e:	691b      	ldr	r3, [r3, #16]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00b      	beq.n	8010b3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	7c12      	ldrb	r2, [r2, #16]
 8010b30:	f107 0108 	add.w	r1, r7, #8
 8010b34:	4610      	mov	r0, r2
 8010b36:	4798      	blx	r3
 8010b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b3a:	e043      	b.n	8010bc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b3c:	6839      	ldr	r1, [r7, #0]
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 fa7d 	bl	801103e <USBD_CtlError>
            err++;
 8010b44:	7afb      	ldrb	r3, [r7, #11]
 8010b46:	3301      	adds	r3, #1
 8010b48:	72fb      	strb	r3, [r7, #11]
          break;
 8010b4a:	e03b      	b.n	8010bc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d00b      	beq.n	8010b70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b5e:	695b      	ldr	r3, [r3, #20]
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	7c12      	ldrb	r2, [r2, #16]
 8010b64:	f107 0108 	add.w	r1, r7, #8
 8010b68:	4610      	mov	r0, r2
 8010b6a:	4798      	blx	r3
 8010b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b6e:	e029      	b.n	8010bc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b70:	6839      	ldr	r1, [r7, #0]
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 fa63 	bl	801103e <USBD_CtlError>
            err++;
 8010b78:	7afb      	ldrb	r3, [r7, #11]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8010b7e:	e021      	b.n	8010bc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b86:	699b      	ldr	r3, [r3, #24]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00b      	beq.n	8010ba4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b92:	699b      	ldr	r3, [r3, #24]
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	7c12      	ldrb	r2, [r2, #16]
 8010b98:	f107 0108 	add.w	r1, r7, #8
 8010b9c:	4610      	mov	r0, r2
 8010b9e:	4798      	blx	r3
 8010ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ba2:	e00f      	b.n	8010bc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ba4:	6839      	ldr	r1, [r7, #0]
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 fa49 	bl	801103e <USBD_CtlError>
            err++;
 8010bac:	7afb      	ldrb	r3, [r7, #11]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8010bb2:	e007      	b.n	8010bc4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010bb4:	6839      	ldr	r1, [r7, #0]
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 fa41 	bl	801103e <USBD_CtlError>
          err++;
 8010bbc:	7afb      	ldrb	r3, [r7, #11]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010bc2:	bf00      	nop
      }
      break;
 8010bc4:	e037      	b.n	8010c36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	7c1b      	ldrb	r3, [r3, #16]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d109      	bne.n	8010be2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bd6:	f107 0208 	add.w	r2, r7, #8
 8010bda:	4610      	mov	r0, r2
 8010bdc:	4798      	blx	r3
 8010bde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010be0:	e029      	b.n	8010c36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010be2:	6839      	ldr	r1, [r7, #0]
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f000 fa2a 	bl	801103e <USBD_CtlError>
        err++;
 8010bea:	7afb      	ldrb	r3, [r7, #11]
 8010bec:	3301      	adds	r3, #1
 8010bee:	72fb      	strb	r3, [r7, #11]
      break;
 8010bf0:	e021      	b.n	8010c36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	7c1b      	ldrb	r3, [r3, #16]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d10d      	bne.n	8010c16 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c02:	f107 0208 	add.w	r2, r7, #8
 8010c06:	4610      	mov	r0, r2
 8010c08:	4798      	blx	r3
 8010c0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	2207      	movs	r2, #7
 8010c12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c14:	e00f      	b.n	8010c36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010c16:	6839      	ldr	r1, [r7, #0]
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 fa10 	bl	801103e <USBD_CtlError>
        err++;
 8010c1e:	7afb      	ldrb	r3, [r7, #11]
 8010c20:	3301      	adds	r3, #1
 8010c22:	72fb      	strb	r3, [r7, #11]
      break;
 8010c24:	e007      	b.n	8010c36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010c26:	6839      	ldr	r1, [r7, #0]
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 fa08 	bl	801103e <USBD_CtlError>
      err++;
 8010c2e:	7afb      	ldrb	r3, [r7, #11]
 8010c30:	3301      	adds	r3, #1
 8010c32:	72fb      	strb	r3, [r7, #11]
      break;
 8010c34:	bf00      	nop
  }

  if (err != 0U)
 8010c36:	7afb      	ldrb	r3, [r7, #11]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d11e      	bne.n	8010c7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	88db      	ldrh	r3, [r3, #6]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d016      	beq.n	8010c72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010c44:	893b      	ldrh	r3, [r7, #8]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00e      	beq.n	8010c68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	88da      	ldrh	r2, [r3, #6]
 8010c4e:	893b      	ldrh	r3, [r7, #8]
 8010c50:	4293      	cmp	r3, r2
 8010c52:	bf28      	it	cs
 8010c54:	4613      	movcs	r3, r2
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010c5a:	893b      	ldrh	r3, [r7, #8]
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	68f9      	ldr	r1, [r7, #12]
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f000 fa5d 	bl	8011120 <USBD_CtlSendData>
 8010c66:	e009      	b.n	8010c7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010c68:	6839      	ldr	r1, [r7, #0]
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 f9e7 	bl	801103e <USBD_CtlError>
 8010c70:	e004      	b.n	8010c7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 fa91 	bl	801119a <USBD_CtlSendStatus>
 8010c78:	e000      	b.n	8010c7c <USBD_GetDescriptor+0x320>
    return;
 8010c7a:	bf00      	nop
  }
}
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop

08010c84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	889b      	ldrh	r3, [r3, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d131      	bne.n	8010cfa <USBD_SetAddress+0x76>
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	88db      	ldrh	r3, [r3, #6]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d12d      	bne.n	8010cfa <USBD_SetAddress+0x76>
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	885b      	ldrh	r3, [r3, #2]
 8010ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8010ca4:	d829      	bhi.n	8010cfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	885b      	ldrh	r3, [r3, #2]
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	2b03      	cmp	r3, #3
 8010cbc:	d104      	bne.n	8010cc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010cbe:	6839      	ldr	r1, [r7, #0]
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 f9bc 	bl	801103e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cc6:	e01d      	b.n	8010d04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	7bfa      	ldrb	r2, [r7, #15]
 8010ccc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010cd0:	7bfb      	ldrb	r3, [r7, #15]
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f006 fc40 	bl	801755a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 fa5d 	bl	801119a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010ce0:	7bfb      	ldrb	r3, [r7, #15]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d004      	beq.n	8010cf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2202      	movs	r2, #2
 8010cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cee:	e009      	b.n	8010d04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cf8:	e004      	b.n	8010d04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010cfa:	6839      	ldr	r1, [r7, #0]
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f000 f99e 	bl	801103e <USBD_CtlError>
  }
}
 8010d02:	bf00      	nop
 8010d04:	bf00      	nop
 8010d06:	3710      	adds	r7, #16
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d16:	2300      	movs	r3, #0
 8010d18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	885b      	ldrh	r3, [r3, #2]
 8010d1e:	b2da      	uxtb	r2, r3
 8010d20:	4b4e      	ldr	r3, [pc, #312]	; (8010e5c <USBD_SetConfig+0x150>)
 8010d22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010d24:	4b4d      	ldr	r3, [pc, #308]	; (8010e5c <USBD_SetConfig+0x150>)
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d905      	bls.n	8010d38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010d2c:	6839      	ldr	r1, [r7, #0]
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 f985 	bl	801103e <USBD_CtlError>
    return USBD_FAIL;
 8010d34:	2303      	movs	r3, #3
 8010d36:	e08c      	b.n	8010e52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	2b02      	cmp	r3, #2
 8010d42:	d002      	beq.n	8010d4a <USBD_SetConfig+0x3e>
 8010d44:	2b03      	cmp	r3, #3
 8010d46:	d029      	beq.n	8010d9c <USBD_SetConfig+0x90>
 8010d48:	e075      	b.n	8010e36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010d4a:	4b44      	ldr	r3, [pc, #272]	; (8010e5c <USBD_SetConfig+0x150>)
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d020      	beq.n	8010d94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010d52:	4b42      	ldr	r3, [pc, #264]	; (8010e5c <USBD_SetConfig+0x150>)
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	461a      	mov	r2, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010d5c:	4b3f      	ldr	r3, [pc, #252]	; (8010e5c <USBD_SetConfig+0x150>)
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	4619      	mov	r1, r3
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f7fe ffbc 	bl	800fce0 <USBD_SetClassConfig>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010d6c:	7bfb      	ldrb	r3, [r7, #15]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d008      	beq.n	8010d84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 f962 	bl	801103e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2202      	movs	r2, #2
 8010d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010d82:	e065      	b.n	8010e50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 fa08 	bl	801119a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2203      	movs	r2, #3
 8010d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010d92:	e05d      	b.n	8010e50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 fa00 	bl	801119a <USBD_CtlSendStatus>
      break;
 8010d9a:	e059      	b.n	8010e50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010d9c:	4b2f      	ldr	r3, [pc, #188]	; (8010e5c <USBD_SetConfig+0x150>)
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d112      	bne.n	8010dca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2202      	movs	r2, #2
 8010da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010dac:	4b2b      	ldr	r3, [pc, #172]	; (8010e5c <USBD_SetConfig+0x150>)
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	461a      	mov	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010db6:	4b29      	ldr	r3, [pc, #164]	; (8010e5c <USBD_SetConfig+0x150>)
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7fe ffab 	bl	800fd18 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 f9e9 	bl	801119a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010dc8:	e042      	b.n	8010e50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010dca:	4b24      	ldr	r3, [pc, #144]	; (8010e5c <USBD_SetConfig+0x150>)
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	461a      	mov	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d02a      	beq.n	8010e2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	4619      	mov	r1, r3
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7fe ff99 	bl	800fd18 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010de6:	4b1d      	ldr	r3, [pc, #116]	; (8010e5c <USBD_SetConfig+0x150>)
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010df0:	4b1a      	ldr	r3, [pc, #104]	; (8010e5c <USBD_SetConfig+0x150>)
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	4619      	mov	r1, r3
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7fe ff72 	bl	800fce0 <USBD_SetClassConfig>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010e00:	7bfb      	ldrb	r3, [r7, #15]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d00f      	beq.n	8010e26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 f918 	bl	801103e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	4619      	mov	r1, r3
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f7fe ff7e 	bl	800fd18 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2202      	movs	r2, #2
 8010e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010e24:	e014      	b.n	8010e50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 f9b7 	bl	801119a <USBD_CtlSendStatus>
      break;
 8010e2c:	e010      	b.n	8010e50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 f9b3 	bl	801119a <USBD_CtlSendStatus>
      break;
 8010e34:	e00c      	b.n	8010e50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010e36:	6839      	ldr	r1, [r7, #0]
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 f900 	bl	801103e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e3e:	4b07      	ldr	r3, [pc, #28]	; (8010e5c <USBD_SetConfig+0x150>)
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	4619      	mov	r1, r3
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f7fe ff67 	bl	800fd18 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010e4a:	2303      	movs	r3, #3
 8010e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8010e4e:	bf00      	nop
  }

  return ret;
 8010e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3710      	adds	r7, #16
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	20006800 	.word	0x20006800

08010e60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	88db      	ldrh	r3, [r3, #6]
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d004      	beq.n	8010e7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f000 f8e2 	bl	801103e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010e7a:	e023      	b.n	8010ec4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	2b02      	cmp	r3, #2
 8010e86:	dc02      	bgt.n	8010e8e <USBD_GetConfig+0x2e>
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	dc03      	bgt.n	8010e94 <USBD_GetConfig+0x34>
 8010e8c:	e015      	b.n	8010eba <USBD_GetConfig+0x5a>
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d00b      	beq.n	8010eaa <USBD_GetConfig+0x4a>
 8010e92:	e012      	b.n	8010eba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2200      	movs	r2, #0
 8010e98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	3308      	adds	r3, #8
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 f93c 	bl	8011120 <USBD_CtlSendData>
        break;
 8010ea8:	e00c      	b.n	8010ec4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	3304      	adds	r3, #4
 8010eae:	2201      	movs	r2, #1
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f000 f934 	bl	8011120 <USBD_CtlSendData>
        break;
 8010eb8:	e004      	b.n	8010ec4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010eba:	6839      	ldr	r1, [r7, #0]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 f8be 	bl	801103e <USBD_CtlError>
        break;
 8010ec2:	bf00      	nop
}
 8010ec4:	bf00      	nop
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	3b01      	subs	r3, #1
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	d81e      	bhi.n	8010f22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	88db      	ldrh	r3, [r3, #6]
 8010ee8:	2b02      	cmp	r3, #2
 8010eea:	d004      	beq.n	8010ef6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010eec:	6839      	ldr	r1, [r7, #0]
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f000 f8a5 	bl	801103e <USBD_CtlError>
        break;
 8010ef4:	e01a      	b.n	8010f2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d005      	beq.n	8010f12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	f043 0202 	orr.w	r2, r3, #2
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	330c      	adds	r3, #12
 8010f16:	2202      	movs	r2, #2
 8010f18:	4619      	mov	r1, r3
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 f900 	bl	8011120 <USBD_CtlSendData>
      break;
 8010f20:	e004      	b.n	8010f2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010f22:	6839      	ldr	r1, [r7, #0]
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f000 f88a 	bl	801103e <USBD_CtlError>
      break;
 8010f2a:	bf00      	nop
  }
}
 8010f2c:	bf00      	nop
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	885b      	ldrh	r3, [r3, #2]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d107      	bne.n	8010f56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 f923 	bl	801119a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010f54:	e013      	b.n	8010f7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	885b      	ldrh	r3, [r3, #2]
 8010f5a:	2b02      	cmp	r3, #2
 8010f5c:	d10b      	bne.n	8010f76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	889b      	ldrh	r3, [r3, #4]
 8010f62:	0a1b      	lsrs	r3, r3, #8
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	b2da      	uxtb	r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 f913 	bl	801119a <USBD_CtlSendStatus>
}
 8010f74:	e003      	b.n	8010f7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010f76:	6839      	ldr	r1, [r7, #0]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 f860 	bl	801103e <USBD_CtlError>
}
 8010f7e:	bf00      	nop
 8010f80:	3708      	adds	r7, #8
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b082      	sub	sp, #8
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	3b01      	subs	r3, #1
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d80b      	bhi.n	8010fb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	885b      	ldrh	r3, [r3, #2]
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d10c      	bne.n	8010fc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f000 f8f3 	bl	801119a <USBD_CtlSendStatus>
      }
      break;
 8010fb4:	e004      	b.n	8010fc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010fb6:	6839      	ldr	r1, [r7, #0]
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 f840 	bl	801103e <USBD_CtlError>
      break;
 8010fbe:	e000      	b.n	8010fc2 <USBD_ClrFeature+0x3c>
      break;
 8010fc0:	bf00      	nop
  }
}
 8010fc2:	bf00      	nop
 8010fc4:	3708      	adds	r7, #8
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
 8010fd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	781a      	ldrb	r2, [r3, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	781a      	ldrb	r2, [r3, #0]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f7ff fa16 	bl	8010426 <SWAPBYTE>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	3301      	adds	r3, #1
 8011006:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	3301      	adds	r3, #1
 801100c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	f7ff fa09 	bl	8010426 <SWAPBYTE>
 8011014:	4603      	mov	r3, r0
 8011016:	461a      	mov	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	3301      	adds	r3, #1
 8011020:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3301      	adds	r3, #1
 8011026:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	f7ff f9fc 	bl	8010426 <SWAPBYTE>
 801102e:	4603      	mov	r3, r0
 8011030:	461a      	mov	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	80da      	strh	r2, [r3, #6]
}
 8011036:	bf00      	nop
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b082      	sub	sp, #8
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011048:	2180      	movs	r1, #128	; 0x80
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f006 fa1b 	bl	8017486 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011050:	2100      	movs	r1, #0
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f006 fa17 	bl	8017486 <USBD_LL_StallEP>
}
 8011058:	bf00      	nop
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b086      	sub	sp, #24
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801106c:	2300      	movs	r3, #0
 801106e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d036      	beq.n	80110e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801107a:	6938      	ldr	r0, [r7, #16]
 801107c:	f000 f836 	bl	80110ec <USBD_GetLen>
 8011080:	4603      	mov	r3, r0
 8011082:	3301      	adds	r3, #1
 8011084:	b29b      	uxth	r3, r3
 8011086:	005b      	lsls	r3, r3, #1
 8011088:	b29a      	uxth	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801108e:	7dfb      	ldrb	r3, [r7, #23]
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	4413      	add	r3, r2
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	7812      	ldrb	r2, [r2, #0]
 8011098:	701a      	strb	r2, [r3, #0]
  idx++;
 801109a:	7dfb      	ldrb	r3, [r7, #23]
 801109c:	3301      	adds	r3, #1
 801109e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80110a0:	7dfb      	ldrb	r3, [r7, #23]
 80110a2:	68ba      	ldr	r2, [r7, #8]
 80110a4:	4413      	add	r3, r2
 80110a6:	2203      	movs	r2, #3
 80110a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80110aa:	7dfb      	ldrb	r3, [r7, #23]
 80110ac:	3301      	adds	r3, #1
 80110ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80110b0:	e013      	b.n	80110da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80110b2:	7dfb      	ldrb	r3, [r7, #23]
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	4413      	add	r3, r2
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	7812      	ldrb	r2, [r2, #0]
 80110bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	3301      	adds	r3, #1
 80110c2:	613b      	str	r3, [r7, #16]
    idx++;
 80110c4:	7dfb      	ldrb	r3, [r7, #23]
 80110c6:	3301      	adds	r3, #1
 80110c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80110ca:	7dfb      	ldrb	r3, [r7, #23]
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	4413      	add	r3, r2
 80110d0:	2200      	movs	r2, #0
 80110d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80110d4:	7dfb      	ldrb	r3, [r7, #23]
 80110d6:	3301      	adds	r3, #1
 80110d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d1e7      	bne.n	80110b2 <USBD_GetString+0x52>
 80110e2:	e000      	b.n	80110e6 <USBD_GetString+0x86>
    return;
 80110e4:	bf00      	nop
  }
}
 80110e6:	3718      	adds	r7, #24
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b085      	sub	sp, #20
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80110f4:	2300      	movs	r3, #0
 80110f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80110fc:	e005      	b.n	801110a <USBD_GetLen+0x1e>
  {
    len++;
 80110fe:	7bfb      	ldrb	r3, [r7, #15]
 8011100:	3301      	adds	r3, #1
 8011102:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	3301      	adds	r3, #1
 8011108:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d1f5      	bne.n	80110fe <USBD_GetLen+0x12>
  }

  return len;
 8011112:	7bfb      	ldrb	r3, [r7, #15]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3714      	adds	r7, #20
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr

08011120 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2202      	movs	r2, #2
 8011130:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	68ba      	ldr	r2, [r7, #8]
 8011144:	2100      	movs	r1, #0
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f006 fa26 	bl	8017598 <USBD_LL_Transmit>

  return USBD_OK;
 801114c:	2300      	movs	r3, #0
}
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b084      	sub	sp, #16
 801115a:	af00      	add	r7, sp, #0
 801115c:	60f8      	str	r0, [r7, #12]
 801115e:	60b9      	str	r1, [r7, #8]
 8011160:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	68ba      	ldr	r2, [r7, #8]
 8011166:	2100      	movs	r1, #0
 8011168:	68f8      	ldr	r0, [r7, #12]
 801116a:	f006 fa15 	bl	8017598 <USBD_LL_Transmit>

  return USBD_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	60b9      	str	r1, [r7, #8]
 8011182:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	68ba      	ldr	r2, [r7, #8]
 8011188:	2100      	movs	r1, #0
 801118a:	68f8      	ldr	r0, [r7, #12]
 801118c:	f006 fa25 	bl	80175da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011190:	2300      	movs	r3, #0
}
 8011192:	4618      	mov	r0, r3
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}

0801119a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801119a:	b580      	push	{r7, lr}
 801119c:	b082      	sub	sp, #8
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2204      	movs	r2, #4
 80111a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80111aa:	2300      	movs	r3, #0
 80111ac:	2200      	movs	r2, #0
 80111ae:	2100      	movs	r1, #0
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f006 f9f1 	bl	8017598 <USBD_LL_Transmit>

  return USBD_OK;
 80111b6:	2300      	movs	r3, #0
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2205      	movs	r2, #5
 80111cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111d0:	2300      	movs	r3, #0
 80111d2:	2200      	movs	r2, #0
 80111d4:	2100      	movs	r1, #0
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f006 f9ff 	bl	80175da <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111dc:	2300      	movs	r3, #0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3708      	adds	r7, #8
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
	...

080111e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	4603      	mov	r3, r0
 80111f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80111f2:	79fb      	ldrb	r3, [r7, #7]
 80111f4:	4a08      	ldr	r2, [pc, #32]	; (8011218 <disk_status+0x30>)
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	4413      	add	r3, r2
 80111fa:	685b      	ldr	r3, [r3, #4]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	79fa      	ldrb	r2, [r7, #7]
 8011200:	4905      	ldr	r1, [pc, #20]	; (8011218 <disk_status+0x30>)
 8011202:	440a      	add	r2, r1
 8011204:	7a12      	ldrb	r2, [r2, #8]
 8011206:	4610      	mov	r0, r2
 8011208:	4798      	blx	r3
 801120a:	4603      	mov	r3, r0
 801120c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	2000682c 	.word	0x2000682c

0801121c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	4603      	mov	r3, r0
 8011224:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801122a:	79fb      	ldrb	r3, [r7, #7]
 801122c:	4a0d      	ldr	r2, [pc, #52]	; (8011264 <disk_initialize+0x48>)
 801122e:	5cd3      	ldrb	r3, [r2, r3]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d111      	bne.n	8011258 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011234:	79fb      	ldrb	r3, [r7, #7]
 8011236:	4a0b      	ldr	r2, [pc, #44]	; (8011264 <disk_initialize+0x48>)
 8011238:	2101      	movs	r1, #1
 801123a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801123c:	79fb      	ldrb	r3, [r7, #7]
 801123e:	4a09      	ldr	r2, [pc, #36]	; (8011264 <disk_initialize+0x48>)
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	4413      	add	r3, r2
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	79fa      	ldrb	r2, [r7, #7]
 801124a:	4906      	ldr	r1, [pc, #24]	; (8011264 <disk_initialize+0x48>)
 801124c:	440a      	add	r2, r1
 801124e:	7a12      	ldrb	r2, [r2, #8]
 8011250:	4610      	mov	r0, r2
 8011252:	4798      	blx	r3
 8011254:	4603      	mov	r3, r0
 8011256:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011258:	7bfb      	ldrb	r3, [r7, #15]
}
 801125a:	4618      	mov	r0, r3
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	2000682c 	.word	0x2000682c

08011268 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011268:	b590      	push	{r4, r7, lr}
 801126a:	b087      	sub	sp, #28
 801126c:	af00      	add	r7, sp, #0
 801126e:	60b9      	str	r1, [r7, #8]
 8011270:	607a      	str	r2, [r7, #4]
 8011272:	603b      	str	r3, [r7, #0]
 8011274:	4603      	mov	r3, r0
 8011276:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011278:	7bfb      	ldrb	r3, [r7, #15]
 801127a:	4a0a      	ldr	r2, [pc, #40]	; (80112a4 <disk_read+0x3c>)
 801127c:	009b      	lsls	r3, r3, #2
 801127e:	4413      	add	r3, r2
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	689c      	ldr	r4, [r3, #8]
 8011284:	7bfb      	ldrb	r3, [r7, #15]
 8011286:	4a07      	ldr	r2, [pc, #28]	; (80112a4 <disk_read+0x3c>)
 8011288:	4413      	add	r3, r2
 801128a:	7a18      	ldrb	r0, [r3, #8]
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	68b9      	ldr	r1, [r7, #8]
 8011292:	47a0      	blx	r4
 8011294:	4603      	mov	r3, r0
 8011296:	75fb      	strb	r3, [r7, #23]
  return res;
 8011298:	7dfb      	ldrb	r3, [r7, #23]
}
 801129a:	4618      	mov	r0, r3
 801129c:	371c      	adds	r7, #28
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd90      	pop	{r4, r7, pc}
 80112a2:	bf00      	nop
 80112a4:	2000682c 	.word	0x2000682c

080112a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80112a8:	b590      	push	{r4, r7, lr}
 80112aa:	b087      	sub	sp, #28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60b9      	str	r1, [r7, #8]
 80112b0:	607a      	str	r2, [r7, #4]
 80112b2:	603b      	str	r3, [r7, #0]
 80112b4:	4603      	mov	r3, r0
 80112b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80112b8:	7bfb      	ldrb	r3, [r7, #15]
 80112ba:	4a0a      	ldr	r2, [pc, #40]	; (80112e4 <disk_write+0x3c>)
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	4413      	add	r3, r2
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	68dc      	ldr	r4, [r3, #12]
 80112c4:	7bfb      	ldrb	r3, [r7, #15]
 80112c6:	4a07      	ldr	r2, [pc, #28]	; (80112e4 <disk_write+0x3c>)
 80112c8:	4413      	add	r3, r2
 80112ca:	7a18      	ldrb	r0, [r3, #8]
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	68b9      	ldr	r1, [r7, #8]
 80112d2:	47a0      	blx	r4
 80112d4:	4603      	mov	r3, r0
 80112d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80112d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	371c      	adds	r7, #28
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd90      	pop	{r4, r7, pc}
 80112e2:	bf00      	nop
 80112e4:	2000682c 	.word	0x2000682c

080112e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	4603      	mov	r3, r0
 80112f0:	603a      	str	r2, [r7, #0]
 80112f2:	71fb      	strb	r3, [r7, #7]
 80112f4:	460b      	mov	r3, r1
 80112f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80112f8:	79fb      	ldrb	r3, [r7, #7]
 80112fa:	4a09      	ldr	r2, [pc, #36]	; (8011320 <disk_ioctl+0x38>)
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	4413      	add	r3, r2
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	691b      	ldr	r3, [r3, #16]
 8011304:	79fa      	ldrb	r2, [r7, #7]
 8011306:	4906      	ldr	r1, [pc, #24]	; (8011320 <disk_ioctl+0x38>)
 8011308:	440a      	add	r2, r1
 801130a:	7a10      	ldrb	r0, [r2, #8]
 801130c:	79b9      	ldrb	r1, [r7, #6]
 801130e:	683a      	ldr	r2, [r7, #0]
 8011310:	4798      	blx	r3
 8011312:	4603      	mov	r3, r0
 8011314:	73fb      	strb	r3, [r7, #15]
  return res;
 8011316:	7bfb      	ldrb	r3, [r7, #15]
}
 8011318:	4618      	mov	r0, r3
 801131a:	3710      	adds	r7, #16
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}
 8011320:	2000682c 	.word	0x2000682c

08011324 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011324:	b480      	push	{r7}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	3301      	adds	r3, #1
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011334:	89fb      	ldrh	r3, [r7, #14]
 8011336:	021b      	lsls	r3, r3, #8
 8011338:	b21a      	sxth	r2, r3
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	b21b      	sxth	r3, r3
 8011340:	4313      	orrs	r3, r2
 8011342:	b21b      	sxth	r3, r3
 8011344:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011346:	89fb      	ldrh	r3, [r7, #14]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3714      	adds	r7, #20
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3303      	adds	r3, #3
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	021b      	lsls	r3, r3, #8
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	3202      	adds	r2, #2
 801136c:	7812      	ldrb	r2, [r2, #0]
 801136e:	4313      	orrs	r3, r2
 8011370:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	021b      	lsls	r3, r3, #8
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	3201      	adds	r2, #1
 801137a:	7812      	ldrb	r2, [r2, #0]
 801137c:	4313      	orrs	r3, r2
 801137e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	021b      	lsls	r3, r3, #8
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	7812      	ldrb	r2, [r2, #0]
 8011388:	4313      	orrs	r3, r2
 801138a:	60fb      	str	r3, [r7, #12]
	return rv;
 801138c:	68fb      	ldr	r3, [r7, #12]
}
 801138e:	4618      	mov	r0, r3
 8011390:	3714      	adds	r7, #20
 8011392:	46bd      	mov	sp, r7
 8011394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011398:	4770      	bx	lr

0801139a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801139a:	b480      	push	{r7}
 801139c:	b083      	sub	sp, #12
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]
 80113a2:	460b      	mov	r3, r1
 80113a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	1c5a      	adds	r2, r3, #1
 80113aa:	607a      	str	r2, [r7, #4]
 80113ac:	887a      	ldrh	r2, [r7, #2]
 80113ae:	b2d2      	uxtb	r2, r2
 80113b0:	701a      	strb	r2, [r3, #0]
 80113b2:	887b      	ldrh	r3, [r7, #2]
 80113b4:	0a1b      	lsrs	r3, r3, #8
 80113b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	1c5a      	adds	r2, r3, #1
 80113bc:	607a      	str	r2, [r7, #4]
 80113be:	887a      	ldrh	r2, [r7, #2]
 80113c0:	b2d2      	uxtb	r2, r2
 80113c2:	701a      	strb	r2, [r3, #0]
}
 80113c4:	bf00      	nop
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	1c5a      	adds	r2, r3, #1
 80113de:	607a      	str	r2, [r7, #4]
 80113e0:	683a      	ldr	r2, [r7, #0]
 80113e2:	b2d2      	uxtb	r2, r2
 80113e4:	701a      	strb	r2, [r3, #0]
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	0a1b      	lsrs	r3, r3, #8
 80113ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	1c5a      	adds	r2, r3, #1
 80113f0:	607a      	str	r2, [r7, #4]
 80113f2:	683a      	ldr	r2, [r7, #0]
 80113f4:	b2d2      	uxtb	r2, r2
 80113f6:	701a      	strb	r2, [r3, #0]
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	0a1b      	lsrs	r3, r3, #8
 80113fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	1c5a      	adds	r2, r3, #1
 8011402:	607a      	str	r2, [r7, #4]
 8011404:	683a      	ldr	r2, [r7, #0]
 8011406:	b2d2      	uxtb	r2, r2
 8011408:	701a      	strb	r2, [r3, #0]
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	0a1b      	lsrs	r3, r3, #8
 801140e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	1c5a      	adds	r2, r3, #1
 8011414:	607a      	str	r2, [r7, #4]
 8011416:	683a      	ldr	r2, [r7, #0]
 8011418:	b2d2      	uxtb	r2, r2
 801141a:	701a      	strb	r2, [r3, #0]
}
 801141c:	bf00      	nop
 801141e:	370c      	adds	r7, #12
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr

08011428 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011428:	b480      	push	{r7}
 801142a:	b087      	sub	sp, #28
 801142c:	af00      	add	r7, sp, #0
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00d      	beq.n	801145e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011442:	693a      	ldr	r2, [r7, #16]
 8011444:	1c53      	adds	r3, r2, #1
 8011446:	613b      	str	r3, [r7, #16]
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	1c59      	adds	r1, r3, #1
 801144c:	6179      	str	r1, [r7, #20]
 801144e:	7812      	ldrb	r2, [r2, #0]
 8011450:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	3b01      	subs	r3, #1
 8011456:	607b      	str	r3, [r7, #4]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d1f1      	bne.n	8011442 <mem_cpy+0x1a>
	}
}
 801145e:	bf00      	nop
 8011460:	371c      	adds	r7, #28
 8011462:	46bd      	mov	sp, r7
 8011464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011468:	4770      	bx	lr

0801146a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801146a:	b480      	push	{r7}
 801146c:	b087      	sub	sp, #28
 801146e:	af00      	add	r7, sp, #0
 8011470:	60f8      	str	r0, [r7, #12]
 8011472:	60b9      	str	r1, [r7, #8]
 8011474:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	1c5a      	adds	r2, r3, #1
 801147e:	617a      	str	r2, [r7, #20]
 8011480:	68ba      	ldr	r2, [r7, #8]
 8011482:	b2d2      	uxtb	r2, r2
 8011484:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	3b01      	subs	r3, #1
 801148a:	607b      	str	r3, [r7, #4]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d1f3      	bne.n	801147a <mem_set+0x10>
}
 8011492:	bf00      	nop
 8011494:	bf00      	nop
 8011496:	371c      	adds	r7, #28
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80114a0:	b480      	push	{r7}
 80114a2:	b089      	sub	sp, #36	; 0x24
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	60b9      	str	r1, [r7, #8]
 80114aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	61fb      	str	r3, [r7, #28]
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80114b4:	2300      	movs	r3, #0
 80114b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	1c5a      	adds	r2, r3, #1
 80114bc:	61fa      	str	r2, [r7, #28]
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	4619      	mov	r1, r3
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	1c5a      	adds	r2, r3, #1
 80114c6:	61ba      	str	r2, [r7, #24]
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	1acb      	subs	r3, r1, r3
 80114cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	3b01      	subs	r3, #1
 80114d2:	607b      	str	r3, [r7, #4]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d002      	beq.n	80114e0 <mem_cmp+0x40>
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0eb      	beq.n	80114b8 <mem_cmp+0x18>

	return r;
 80114e0:	697b      	ldr	r3, [r7, #20]
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3724      	adds	r7, #36	; 0x24
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr

080114ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80114ee:	b480      	push	{r7}
 80114f0:	b083      	sub	sp, #12
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
 80114f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80114f8:	e002      	b.n	8011500 <chk_chr+0x12>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	3301      	adds	r3, #1
 80114fe:	607b      	str	r3, [r7, #4]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d005      	beq.n	8011514 <chk_chr+0x26>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	461a      	mov	r2, r3
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	4293      	cmp	r3, r2
 8011512:	d1f2      	bne.n	80114fa <chk_chr+0xc>
	return *str;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	781b      	ldrb	r3, [r3, #0]
}
 8011518:	4618      	mov	r0, r3
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d009      	beq.n	8011546 <lock_fs+0x22>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	4618      	mov	r0, r3
 8011538:	f002 fcab 	bl	8013e92 <ff_req_grant>
 801153c:	4603      	mov	r3, r0
 801153e:	2b00      	cmp	r3, #0
 8011540:	d001      	beq.n	8011546 <lock_fs+0x22>
 8011542:	2301      	movs	r3, #1
 8011544:	e000      	b.n	8011548 <lock_fs+0x24>
 8011546:	2300      	movs	r3, #0
}
 8011548:	4618      	mov	r0, r3
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b082      	sub	sp, #8
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	460b      	mov	r3, r1
 801155a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d00d      	beq.n	801157e <unlock_fs+0x2e>
 8011562:	78fb      	ldrb	r3, [r7, #3]
 8011564:	2b0c      	cmp	r3, #12
 8011566:	d00a      	beq.n	801157e <unlock_fs+0x2e>
 8011568:	78fb      	ldrb	r3, [r7, #3]
 801156a:	2b0b      	cmp	r3, #11
 801156c:	d007      	beq.n	801157e <unlock_fs+0x2e>
 801156e:	78fb      	ldrb	r3, [r7, #3]
 8011570:	2b0f      	cmp	r3, #15
 8011572:	d004      	beq.n	801157e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	4618      	mov	r0, r3
 801157a:	f002 fc9f 	bl	8013ebc <ff_rel_grant>
	}
}
 801157e:	bf00      	nop
 8011580:	3708      	adds	r7, #8
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
	...

08011588 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011592:	2300      	movs	r3, #0
 8011594:	60bb      	str	r3, [r7, #8]
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	60fb      	str	r3, [r7, #12]
 801159a:	e029      	b.n	80115f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801159c:	4a27      	ldr	r2, [pc, #156]	; (801163c <chk_lock+0xb4>)
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	011b      	lsls	r3, r3, #4
 80115a2:	4413      	add	r3, r2
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d01d      	beq.n	80115e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80115aa:	4a24      	ldr	r2, [pc, #144]	; (801163c <chk_lock+0xb4>)
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	011b      	lsls	r3, r3, #4
 80115b0:	4413      	add	r3, r2
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d116      	bne.n	80115ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80115bc:	4a1f      	ldr	r2, [pc, #124]	; (801163c <chk_lock+0xb4>)
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	011b      	lsls	r3, r3, #4
 80115c2:	4413      	add	r3, r2
 80115c4:	3304      	adds	r3, #4
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d10c      	bne.n	80115ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80115d0:	4a1a      	ldr	r2, [pc, #104]	; (801163c <chk_lock+0xb4>)
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	011b      	lsls	r3, r3, #4
 80115d6:	4413      	add	r3, r2
 80115d8:	3308      	adds	r3, #8
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d102      	bne.n	80115ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80115e4:	e007      	b.n	80115f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80115e6:	2301      	movs	r3, #1
 80115e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	3301      	adds	r3, #1
 80115ee:	60fb      	str	r3, [r7, #12]
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d9d2      	bls.n	801159c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2b02      	cmp	r3, #2
 80115fa:	d109      	bne.n	8011610 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d102      	bne.n	8011608 <chk_lock+0x80>
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	2b02      	cmp	r3, #2
 8011606:	d101      	bne.n	801160c <chk_lock+0x84>
 8011608:	2300      	movs	r3, #0
 801160a:	e010      	b.n	801162e <chk_lock+0xa6>
 801160c:	2312      	movs	r3, #18
 801160e:	e00e      	b.n	801162e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d108      	bne.n	8011628 <chk_lock+0xa0>
 8011616:	4a09      	ldr	r2, [pc, #36]	; (801163c <chk_lock+0xb4>)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	011b      	lsls	r3, r3, #4
 801161c:	4413      	add	r3, r2
 801161e:	330c      	adds	r3, #12
 8011620:	881b      	ldrh	r3, [r3, #0]
 8011622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011626:	d101      	bne.n	801162c <chk_lock+0xa4>
 8011628:	2310      	movs	r3, #16
 801162a:	e000      	b.n	801162e <chk_lock+0xa6>
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3714      	adds	r7, #20
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr
 801163a:	bf00      	nop
 801163c:	2000680c 	.word	0x2000680c

08011640 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011646:	2300      	movs	r3, #0
 8011648:	607b      	str	r3, [r7, #4]
 801164a:	e002      	b.n	8011652 <enq_lock+0x12>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	3301      	adds	r3, #1
 8011650:	607b      	str	r3, [r7, #4]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d806      	bhi.n	8011666 <enq_lock+0x26>
 8011658:	4a09      	ldr	r2, [pc, #36]	; (8011680 <enq_lock+0x40>)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	011b      	lsls	r3, r3, #4
 801165e:	4413      	add	r3, r2
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d1f2      	bne.n	801164c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2b02      	cmp	r3, #2
 801166a:	bf14      	ite	ne
 801166c:	2301      	movne	r3, #1
 801166e:	2300      	moveq	r3, #0
 8011670:	b2db      	uxtb	r3, r3
}
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop
 8011680:	2000680c 	.word	0x2000680c

08011684 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011684:	b480      	push	{r7}
 8011686:	b085      	sub	sp, #20
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801168e:	2300      	movs	r3, #0
 8011690:	60fb      	str	r3, [r7, #12]
 8011692:	e01f      	b.n	80116d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011694:	4a41      	ldr	r2, [pc, #260]	; (801179c <inc_lock+0x118>)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	011b      	lsls	r3, r3, #4
 801169a:	4413      	add	r3, r2
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d113      	bne.n	80116ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80116a6:	4a3d      	ldr	r2, [pc, #244]	; (801179c <inc_lock+0x118>)
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	011b      	lsls	r3, r3, #4
 80116ac:	4413      	add	r3, r2
 80116ae:	3304      	adds	r3, #4
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d109      	bne.n	80116ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80116ba:	4a38      	ldr	r2, [pc, #224]	; (801179c <inc_lock+0x118>)
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	011b      	lsls	r3, r3, #4
 80116c0:	4413      	add	r3, r2
 80116c2:	3308      	adds	r3, #8
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d006      	beq.n	80116dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	3301      	adds	r3, #1
 80116d2:	60fb      	str	r3, [r7, #12]
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d9dc      	bls.n	8011694 <inc_lock+0x10>
 80116da:	e000      	b.n	80116de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80116dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b02      	cmp	r3, #2
 80116e2:	d132      	bne.n	801174a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80116e4:	2300      	movs	r3, #0
 80116e6:	60fb      	str	r3, [r7, #12]
 80116e8:	e002      	b.n	80116f0 <inc_lock+0x6c>
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	3301      	adds	r3, #1
 80116ee:	60fb      	str	r3, [r7, #12]
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	2b01      	cmp	r3, #1
 80116f4:	d806      	bhi.n	8011704 <inc_lock+0x80>
 80116f6:	4a29      	ldr	r2, [pc, #164]	; (801179c <inc_lock+0x118>)
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	011b      	lsls	r3, r3, #4
 80116fc:	4413      	add	r3, r2
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d1f2      	bne.n	80116ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2b02      	cmp	r3, #2
 8011708:	d101      	bne.n	801170e <inc_lock+0x8a>
 801170a:	2300      	movs	r3, #0
 801170c:	e040      	b.n	8011790 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681a      	ldr	r2, [r3, #0]
 8011712:	4922      	ldr	r1, [pc, #136]	; (801179c <inc_lock+0x118>)
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	011b      	lsls	r3, r3, #4
 8011718:	440b      	add	r3, r1
 801171a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	689a      	ldr	r2, [r3, #8]
 8011720:	491e      	ldr	r1, [pc, #120]	; (801179c <inc_lock+0x118>)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	011b      	lsls	r3, r3, #4
 8011726:	440b      	add	r3, r1
 8011728:	3304      	adds	r3, #4
 801172a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	695a      	ldr	r2, [r3, #20]
 8011730:	491a      	ldr	r1, [pc, #104]	; (801179c <inc_lock+0x118>)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	011b      	lsls	r3, r3, #4
 8011736:	440b      	add	r3, r1
 8011738:	3308      	adds	r3, #8
 801173a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801173c:	4a17      	ldr	r2, [pc, #92]	; (801179c <inc_lock+0x118>)
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	011b      	lsls	r3, r3, #4
 8011742:	4413      	add	r3, r2
 8011744:	330c      	adds	r3, #12
 8011746:	2200      	movs	r2, #0
 8011748:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d009      	beq.n	8011764 <inc_lock+0xe0>
 8011750:	4a12      	ldr	r2, [pc, #72]	; (801179c <inc_lock+0x118>)
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	011b      	lsls	r3, r3, #4
 8011756:	4413      	add	r3, r2
 8011758:	330c      	adds	r3, #12
 801175a:	881b      	ldrh	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d001      	beq.n	8011764 <inc_lock+0xe0>
 8011760:	2300      	movs	r3, #0
 8011762:	e015      	b.n	8011790 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d108      	bne.n	801177c <inc_lock+0xf8>
 801176a:	4a0c      	ldr	r2, [pc, #48]	; (801179c <inc_lock+0x118>)
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	011b      	lsls	r3, r3, #4
 8011770:	4413      	add	r3, r2
 8011772:	330c      	adds	r3, #12
 8011774:	881b      	ldrh	r3, [r3, #0]
 8011776:	3301      	adds	r3, #1
 8011778:	b29a      	uxth	r2, r3
 801177a:	e001      	b.n	8011780 <inc_lock+0xfc>
 801177c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011780:	4906      	ldr	r1, [pc, #24]	; (801179c <inc_lock+0x118>)
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	011b      	lsls	r3, r3, #4
 8011786:	440b      	add	r3, r1
 8011788:	330c      	adds	r3, #12
 801178a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	3301      	adds	r3, #1
}
 8011790:	4618      	mov	r0, r3
 8011792:	3714      	adds	r7, #20
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	2000680c 	.word	0x2000680c

080117a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b085      	sub	sp, #20
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	3b01      	subs	r3, #1
 80117ac:	607b      	str	r3, [r7, #4]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d825      	bhi.n	8011800 <dec_lock+0x60>
		n = Files[i].ctr;
 80117b4:	4a17      	ldr	r2, [pc, #92]	; (8011814 <dec_lock+0x74>)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	011b      	lsls	r3, r3, #4
 80117ba:	4413      	add	r3, r2
 80117bc:	330c      	adds	r3, #12
 80117be:	881b      	ldrh	r3, [r3, #0]
 80117c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80117c2:	89fb      	ldrh	r3, [r7, #14]
 80117c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117c8:	d101      	bne.n	80117ce <dec_lock+0x2e>
 80117ca:	2300      	movs	r3, #0
 80117cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80117ce:	89fb      	ldrh	r3, [r7, #14]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <dec_lock+0x3a>
 80117d4:	89fb      	ldrh	r3, [r7, #14]
 80117d6:	3b01      	subs	r3, #1
 80117d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80117da:	4a0e      	ldr	r2, [pc, #56]	; (8011814 <dec_lock+0x74>)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	011b      	lsls	r3, r3, #4
 80117e0:	4413      	add	r3, r2
 80117e2:	330c      	adds	r3, #12
 80117e4:	89fa      	ldrh	r2, [r7, #14]
 80117e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80117e8:	89fb      	ldrh	r3, [r7, #14]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d105      	bne.n	80117fa <dec_lock+0x5a>
 80117ee:	4a09      	ldr	r2, [pc, #36]	; (8011814 <dec_lock+0x74>)
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	011b      	lsls	r3, r3, #4
 80117f4:	4413      	add	r3, r2
 80117f6:	2200      	movs	r2, #0
 80117f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80117fa:	2300      	movs	r3, #0
 80117fc:	737b      	strb	r3, [r7, #13]
 80117fe:	e001      	b.n	8011804 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011800:	2302      	movs	r3, #2
 8011802:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011804:	7b7b      	ldrb	r3, [r7, #13]
}
 8011806:	4618      	mov	r0, r3
 8011808:	3714      	adds	r7, #20
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop
 8011814:	2000680c 	.word	0x2000680c

08011818 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011818:	b480      	push	{r7}
 801181a:	b085      	sub	sp, #20
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011820:	2300      	movs	r3, #0
 8011822:	60fb      	str	r3, [r7, #12]
 8011824:	e010      	b.n	8011848 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011826:	4a0d      	ldr	r2, [pc, #52]	; (801185c <clear_lock+0x44>)
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	011b      	lsls	r3, r3, #4
 801182c:	4413      	add	r3, r2
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	429a      	cmp	r2, r3
 8011834:	d105      	bne.n	8011842 <clear_lock+0x2a>
 8011836:	4a09      	ldr	r2, [pc, #36]	; (801185c <clear_lock+0x44>)
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	011b      	lsls	r3, r3, #4
 801183c:	4413      	add	r3, r2
 801183e:	2200      	movs	r2, #0
 8011840:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	3301      	adds	r3, #1
 8011846:	60fb      	str	r3, [r7, #12]
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	2b01      	cmp	r3, #1
 801184c:	d9eb      	bls.n	8011826 <clear_lock+0xe>
	}
}
 801184e:	bf00      	nop
 8011850:	bf00      	nop
 8011852:	3714      	adds	r7, #20
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr
 801185c:	2000680c 	.word	0x2000680c

08011860 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b086      	sub	sp, #24
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011868:	2300      	movs	r3, #0
 801186a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	78db      	ldrb	r3, [r3, #3]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d034      	beq.n	80118de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011878:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	7858      	ldrb	r0, [r3, #1]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011884:	2301      	movs	r3, #1
 8011886:	697a      	ldr	r2, [r7, #20]
 8011888:	f7ff fd0e 	bl	80112a8 <disk_write>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d002      	beq.n	8011898 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011892:	2301      	movs	r3, #1
 8011894:	73fb      	strb	r3, [r7, #15]
 8011896:	e022      	b.n	80118de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2200      	movs	r2, #0
 801189c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a2:	697a      	ldr	r2, [r7, #20]
 80118a4:	1ad2      	subs	r2, r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	69db      	ldr	r3, [r3, #28]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d217      	bcs.n	80118de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	789b      	ldrb	r3, [r3, #2]
 80118b2:	613b      	str	r3, [r7, #16]
 80118b4:	e010      	b.n	80118d8 <sync_window+0x78>
					wsect += fs->fsize;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	69db      	ldr	r3, [r3, #28]
 80118ba:	697a      	ldr	r2, [r7, #20]
 80118bc:	4413      	add	r3, r2
 80118be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7858      	ldrb	r0, [r3, #1]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80118ca:	2301      	movs	r3, #1
 80118cc:	697a      	ldr	r2, [r7, #20]
 80118ce:	f7ff fceb 	bl	80112a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	3b01      	subs	r3, #1
 80118d6:	613b      	str	r3, [r7, #16]
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	2b01      	cmp	r3, #1
 80118dc:	d8eb      	bhi.n	80118b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80118de:	7bfb      	ldrb	r3, [r7, #15]
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3718      	adds	r7, #24
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118fa:	683a      	ldr	r2, [r7, #0]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d01b      	beq.n	8011938 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7ff ffad 	bl	8011860 <sync_window>
 8011906:	4603      	mov	r3, r0
 8011908:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801190a:	7bfb      	ldrb	r3, [r7, #15]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d113      	bne.n	8011938 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	7858      	ldrb	r0, [r3, #1]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801191a:	2301      	movs	r3, #1
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	f7ff fca3 	bl	8011268 <disk_read>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d004      	beq.n	8011932 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011928:	f04f 33ff 	mov.w	r3, #4294967295
 801192c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801192e:	2301      	movs	r3, #1
 8011930:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	683a      	ldr	r2, [r7, #0]
 8011936:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011938:	7bfb      	ldrb	r3, [r7, #15]
}
 801193a:	4618      	mov	r0, r3
 801193c:	3710      	adds	r7, #16
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
	...

08011944 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b084      	sub	sp, #16
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f7ff ff87 	bl	8011860 <sync_window>
 8011952:	4603      	mov	r3, r0
 8011954:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011956:	7bfb      	ldrb	r3, [r7, #15]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d158      	bne.n	8011a0e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	2b03      	cmp	r3, #3
 8011962:	d148      	bne.n	80119f6 <sync_fs+0xb2>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	791b      	ldrb	r3, [r3, #4]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d144      	bne.n	80119f6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	3334      	adds	r3, #52	; 0x34
 8011970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011974:	2100      	movs	r1, #0
 8011976:	4618      	mov	r0, r3
 8011978:	f7ff fd77 	bl	801146a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	3334      	adds	r3, #52	; 0x34
 8011980:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011984:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011988:	4618      	mov	r0, r3
 801198a:	f7ff fd06 	bl	801139a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	3334      	adds	r3, #52	; 0x34
 8011992:	4921      	ldr	r1, [pc, #132]	; (8011a18 <sync_fs+0xd4>)
 8011994:	4618      	mov	r0, r3
 8011996:	f7ff fd1b 	bl	80113d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	3334      	adds	r3, #52	; 0x34
 801199e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80119a2:	491e      	ldr	r1, [pc, #120]	; (8011a1c <sync_fs+0xd8>)
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7ff fd13 	bl	80113d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	3334      	adds	r3, #52	; 0x34
 80119ae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	695b      	ldr	r3, [r3, #20]
 80119b6:	4619      	mov	r1, r3
 80119b8:	4610      	mov	r0, r2
 80119ba:	f7ff fd09 	bl	80113d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	3334      	adds	r3, #52	; 0x34
 80119c2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	4619      	mov	r1, r3
 80119cc:	4610      	mov	r0, r2
 80119ce:	f7ff fcff 	bl	80113d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6a1b      	ldr	r3, [r3, #32]
 80119d6:	1c5a      	adds	r2, r3, #1
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	7858      	ldrb	r0, [r3, #1]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119ea:	2301      	movs	r3, #1
 80119ec:	f7ff fc5c 	bl	80112a8 <disk_write>
			fs->fsi_flag = 0;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	785b      	ldrb	r3, [r3, #1]
 80119fa:	2200      	movs	r2, #0
 80119fc:	2100      	movs	r1, #0
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7ff fc72 	bl	80112e8 <disk_ioctl>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d001      	beq.n	8011a0e <sync_fs+0xca>
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3710      	adds	r7, #16
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}
 8011a18:	41615252 	.word	0x41615252
 8011a1c:	61417272 	.word	0x61417272

08011a20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	3b02      	subs	r3, #2
 8011a2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	699b      	ldr	r3, [r3, #24]
 8011a34:	3b02      	subs	r3, #2
 8011a36:	683a      	ldr	r2, [r7, #0]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d301      	bcc.n	8011a40 <clust2sect+0x20>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e008      	b.n	8011a52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	895b      	ldrh	r3, [r3, #10]
 8011a44:	461a      	mov	r2, r3
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	fb03 f202 	mul.w	r2, r3, r2
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a50:	4413      	add	r3, r2
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr

08011a5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011a5e:	b580      	push	{r7, lr}
 8011a60:	b086      	sub	sp, #24
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	6078      	str	r0, [r7, #4]
 8011a66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d904      	bls.n	8011a7e <get_fat+0x20>
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	699b      	ldr	r3, [r3, #24]
 8011a78:	683a      	ldr	r2, [r7, #0]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d302      	bcc.n	8011a84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011a7e:	2301      	movs	r3, #1
 8011a80:	617b      	str	r3, [r7, #20]
 8011a82:	e08f      	b.n	8011ba4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011a84:	f04f 33ff 	mov.w	r3, #4294967295
 8011a88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	2b03      	cmp	r3, #3
 8011a90:	d062      	beq.n	8011b58 <get_fat+0xfa>
 8011a92:	2b03      	cmp	r3, #3
 8011a94:	dc7c      	bgt.n	8011b90 <get_fat+0x132>
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d002      	beq.n	8011aa0 <get_fat+0x42>
 8011a9a:	2b02      	cmp	r3, #2
 8011a9c:	d042      	beq.n	8011b24 <get_fat+0xc6>
 8011a9e:	e077      	b.n	8011b90 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	60fb      	str	r3, [r7, #12]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	085b      	lsrs	r3, r3, #1
 8011aa8:	68fa      	ldr	r2, [r7, #12]
 8011aaa:	4413      	add	r3, r2
 8011aac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	0a5b      	lsrs	r3, r3, #9
 8011ab6:	4413      	add	r3, r2
 8011ab8:	4619      	mov	r1, r3
 8011aba:	6938      	ldr	r0, [r7, #16]
 8011abc:	f7ff ff14 	bl	80118e8 <move_window>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d167      	bne.n	8011b96 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	1c5a      	adds	r2, r3, #1
 8011aca:	60fa      	str	r2, [r7, #12]
 8011acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ad0:	693a      	ldr	r2, [r7, #16]
 8011ad2:	4413      	add	r3, r2
 8011ad4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ad8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	0a5b      	lsrs	r3, r3, #9
 8011ae2:	4413      	add	r3, r2
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	6938      	ldr	r0, [r7, #16]
 8011ae8:	f7ff fefe 	bl	80118e8 <move_window>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d153      	bne.n	8011b9a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011af8:	693a      	ldr	r2, [r7, #16]
 8011afa:	4413      	add	r3, r2
 8011afc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011b00:	021b      	lsls	r3, r3, #8
 8011b02:	461a      	mov	r2, r3
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	4313      	orrs	r3, r2
 8011b08:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	f003 0301 	and.w	r3, r3, #1
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d002      	beq.n	8011b1a <get_fat+0xbc>
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	091b      	lsrs	r3, r3, #4
 8011b18:	e002      	b.n	8011b20 <get_fat+0xc2>
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011b20:	617b      	str	r3, [r7, #20]
			break;
 8011b22:	e03f      	b.n	8011ba4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	0a1b      	lsrs	r3, r3, #8
 8011b2c:	4413      	add	r3, r2
 8011b2e:	4619      	mov	r1, r3
 8011b30:	6938      	ldr	r0, [r7, #16]
 8011b32:	f7ff fed9 	bl	80118e8 <move_window>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d130      	bne.n	8011b9e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011b4a:	4413      	add	r3, r2
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7ff fbe9 	bl	8011324 <ld_word>
 8011b52:	4603      	mov	r3, r0
 8011b54:	617b      	str	r3, [r7, #20]
			break;
 8011b56:	e025      	b.n	8011ba4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	09db      	lsrs	r3, r3, #7
 8011b60:	4413      	add	r3, r2
 8011b62:	4619      	mov	r1, r3
 8011b64:	6938      	ldr	r0, [r7, #16]
 8011b66:	f7ff febf 	bl	80118e8 <move_window>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d118      	bne.n	8011ba2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	009b      	lsls	r3, r3, #2
 8011b7a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011b7e:	4413      	add	r3, r2
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7ff fbe7 	bl	8011354 <ld_dword>
 8011b86:	4603      	mov	r3, r0
 8011b88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011b8c:	617b      	str	r3, [r7, #20]
			break;
 8011b8e:	e009      	b.n	8011ba4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011b90:	2301      	movs	r3, #1
 8011b92:	617b      	str	r3, [r7, #20]
 8011b94:	e006      	b.n	8011ba4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b96:	bf00      	nop
 8011b98:	e004      	b.n	8011ba4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b9a:	bf00      	nop
 8011b9c:	e002      	b.n	8011ba4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011b9e:	bf00      	nop
 8011ba0:	e000      	b.n	8011ba4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011ba2:	bf00      	nop
		}
	}

	return val;
 8011ba4:	697b      	ldr	r3, [r7, #20]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3718      	adds	r7, #24
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011bae:	b590      	push	{r4, r7, lr}
 8011bb0:	b089      	sub	sp, #36	; 0x24
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	60f8      	str	r0, [r7, #12]
 8011bb6:	60b9      	str	r1, [r7, #8]
 8011bb8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011bba:	2302      	movs	r3, #2
 8011bbc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	f240 80d9 	bls.w	8011d78 <put_fat+0x1ca>
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	699b      	ldr	r3, [r3, #24]
 8011bca:	68ba      	ldr	r2, [r7, #8]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	f080 80d3 	bcs.w	8011d78 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	2b03      	cmp	r3, #3
 8011bd8:	f000 8096 	beq.w	8011d08 <put_fat+0x15a>
 8011bdc:	2b03      	cmp	r3, #3
 8011bde:	f300 80cb 	bgt.w	8011d78 <put_fat+0x1ca>
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d002      	beq.n	8011bec <put_fat+0x3e>
 8011be6:	2b02      	cmp	r3, #2
 8011be8:	d06e      	beq.n	8011cc8 <put_fat+0x11a>
 8011bea:	e0c5      	b.n	8011d78 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	61bb      	str	r3, [r7, #24]
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	085b      	lsrs	r3, r3, #1
 8011bf4:	69ba      	ldr	r2, [r7, #24]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	0a5b      	lsrs	r3, r3, #9
 8011c02:	4413      	add	r3, r2
 8011c04:	4619      	mov	r1, r3
 8011c06:	68f8      	ldr	r0, [r7, #12]
 8011c08:	f7ff fe6e 	bl	80118e8 <move_window>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c10:	7ffb      	ldrb	r3, [r7, #31]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	f040 80a9 	bne.w	8011d6a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011c1e:	69bb      	ldr	r3, [r7, #24]
 8011c20:	1c59      	adds	r1, r3, #1
 8011c22:	61b9      	str	r1, [r7, #24]
 8011c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c28:	4413      	add	r3, r2
 8011c2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	f003 0301 	and.w	r3, r3, #1
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00d      	beq.n	8011c52 <put_fat+0xa4>
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	b25b      	sxtb	r3, r3
 8011c3c:	f003 030f 	and.w	r3, r3, #15
 8011c40:	b25a      	sxtb	r2, r3
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	b2db      	uxtb	r3, r3
 8011c46:	011b      	lsls	r3, r3, #4
 8011c48:	b25b      	sxtb	r3, r3
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	b25b      	sxtb	r3, r3
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	e001      	b.n	8011c56 <put_fat+0xa8>
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	697a      	ldr	r2, [r7, #20]
 8011c58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c64:	69bb      	ldr	r3, [r7, #24]
 8011c66:	0a5b      	lsrs	r3, r3, #9
 8011c68:	4413      	add	r3, r2
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f7ff fe3b 	bl	80118e8 <move_window>
 8011c72:	4603      	mov	r3, r0
 8011c74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c76:	7ffb      	ldrb	r3, [r7, #31]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d178      	bne.n	8011d6e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011c82:	69bb      	ldr	r3, [r7, #24]
 8011c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c88:	4413      	add	r3, r2
 8011c8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	f003 0301 	and.w	r3, r3, #1
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d003      	beq.n	8011c9e <put_fat+0xf0>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	091b      	lsrs	r3, r3, #4
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	e00e      	b.n	8011cbc <put_fat+0x10e>
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	b25b      	sxtb	r3, r3
 8011ca4:	f023 030f 	bic.w	r3, r3, #15
 8011ca8:	b25a      	sxtb	r2, r3
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	0a1b      	lsrs	r3, r3, #8
 8011cae:	b25b      	sxtb	r3, r3
 8011cb0:	f003 030f 	and.w	r3, r3, #15
 8011cb4:	b25b      	sxtb	r3, r3
 8011cb6:	4313      	orrs	r3, r2
 8011cb8:	b25b      	sxtb	r3, r3
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	697a      	ldr	r2, [r7, #20]
 8011cbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	70da      	strb	r2, [r3, #3]
			break;
 8011cc6:	e057      	b.n	8011d78 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	0a1b      	lsrs	r3, r3, #8
 8011cd0:	4413      	add	r3, r2
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f7ff fe07 	bl	80118e8 <move_window>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011cde:	7ffb      	ldrb	r3, [r7, #31]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d146      	bne.n	8011d72 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	005b      	lsls	r3, r3, #1
 8011cee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011cf2:	4413      	add	r3, r2
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	b292      	uxth	r2, r2
 8011cf8:	4611      	mov	r1, r2
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7ff fb4d 	bl	801139a <st_word>
			fs->wflag = 1;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2201      	movs	r2, #1
 8011d04:	70da      	strb	r2, [r3, #3]
			break;
 8011d06:	e037      	b.n	8011d78 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	09db      	lsrs	r3, r3, #7
 8011d10:	4413      	add	r3, r2
 8011d12:	4619      	mov	r1, r3
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f7ff fde7 	bl	80118e8 <move_window>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011d1e:	7ffb      	ldrb	r3, [r7, #31]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d128      	bne.n	8011d76 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011d38:	4413      	add	r3, r2
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff fb0a 	bl	8011354 <ld_dword>
 8011d40:	4603      	mov	r3, r0
 8011d42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011d46:	4323      	orrs	r3, r4
 8011d48:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011d58:	4413      	add	r3, r2
 8011d5a:	6879      	ldr	r1, [r7, #4]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7ff fb37 	bl	80113d0 <st_dword>
			fs->wflag = 1;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	2201      	movs	r2, #1
 8011d66:	70da      	strb	r2, [r3, #3]
			break;
 8011d68:	e006      	b.n	8011d78 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011d6a:	bf00      	nop
 8011d6c:	e004      	b.n	8011d78 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011d6e:	bf00      	nop
 8011d70:	e002      	b.n	8011d78 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011d72:	bf00      	nop
 8011d74:	e000      	b.n	8011d78 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011d76:	bf00      	nop
		}
	}
	return res;
 8011d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3724      	adds	r7, #36	; 0x24
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd90      	pop	{r4, r7, pc}

08011d82 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b088      	sub	sp, #32
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	60f8      	str	r0, [r7, #12]
 8011d8a:	60b9      	str	r1, [r7, #8]
 8011d8c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d904      	bls.n	8011da8 <remove_chain+0x26>
 8011d9e:	69bb      	ldr	r3, [r7, #24]
 8011da0:	699b      	ldr	r3, [r3, #24]
 8011da2:	68ba      	ldr	r2, [r7, #8]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d301      	bcc.n	8011dac <remove_chain+0x2a>
 8011da8:	2302      	movs	r3, #2
 8011daa:	e04b      	b.n	8011e44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00c      	beq.n	8011dcc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011db2:	f04f 32ff 	mov.w	r2, #4294967295
 8011db6:	6879      	ldr	r1, [r7, #4]
 8011db8:	69b8      	ldr	r0, [r7, #24]
 8011dba:	f7ff fef8 	bl	8011bae <put_fat>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011dc2:	7ffb      	ldrb	r3, [r7, #31]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <remove_chain+0x4a>
 8011dc8:	7ffb      	ldrb	r3, [r7, #31]
 8011dca:	e03b      	b.n	8011e44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011dcc:	68b9      	ldr	r1, [r7, #8]
 8011dce:	68f8      	ldr	r0, [r7, #12]
 8011dd0:	f7ff fe45 	bl	8011a5e <get_fat>
 8011dd4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d031      	beq.n	8011e40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d101      	bne.n	8011de6 <remove_chain+0x64>
 8011de2:	2302      	movs	r3, #2
 8011de4:	e02e      	b.n	8011e44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dec:	d101      	bne.n	8011df2 <remove_chain+0x70>
 8011dee:	2301      	movs	r3, #1
 8011df0:	e028      	b.n	8011e44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011df2:	2200      	movs	r2, #0
 8011df4:	68b9      	ldr	r1, [r7, #8]
 8011df6:	69b8      	ldr	r0, [r7, #24]
 8011df8:	f7ff fed9 	bl	8011bae <put_fat>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011e00:	7ffb      	ldrb	r3, [r7, #31]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d001      	beq.n	8011e0a <remove_chain+0x88>
 8011e06:	7ffb      	ldrb	r3, [r7, #31]
 8011e08:	e01c      	b.n	8011e44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	695a      	ldr	r2, [r3, #20]
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	699b      	ldr	r3, [r3, #24]
 8011e12:	3b02      	subs	r3, #2
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d20b      	bcs.n	8011e30 <remove_chain+0xae>
			fs->free_clst++;
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	695b      	ldr	r3, [r3, #20]
 8011e1c:	1c5a      	adds	r2, r3, #1
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011e22:	69bb      	ldr	r3, [r7, #24]
 8011e24:	791b      	ldrb	r3, [r3, #4]
 8011e26:	f043 0301 	orr.w	r3, r3, #1
 8011e2a:	b2da      	uxtb	r2, r3
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	699b      	ldr	r3, [r3, #24]
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d3c6      	bcc.n	8011dcc <remove_chain+0x4a>
 8011e3e:	e000      	b.n	8011e42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011e40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011e42:	2300      	movs	r3, #0
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3720      	adds	r7, #32
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b088      	sub	sp, #32
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d10d      	bne.n	8011e7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	691b      	ldr	r3, [r3, #16]
 8011e66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d004      	beq.n	8011e78 <create_chain+0x2c>
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	699b      	ldr	r3, [r3, #24]
 8011e72:	69ba      	ldr	r2, [r7, #24]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d31b      	bcc.n	8011eb0 <create_chain+0x64>
 8011e78:	2301      	movs	r3, #1
 8011e7a:	61bb      	str	r3, [r7, #24]
 8011e7c:	e018      	b.n	8011eb0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011e7e:	6839      	ldr	r1, [r7, #0]
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f7ff fdec 	bl	8011a5e <get_fat>
 8011e86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d801      	bhi.n	8011e92 <create_chain+0x46>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e070      	b.n	8011f74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e98:	d101      	bne.n	8011e9e <create_chain+0x52>
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	e06a      	b.n	8011f74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	699b      	ldr	r3, [r3, #24]
 8011ea2:	68fa      	ldr	r2, [r7, #12]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d201      	bcs.n	8011eac <create_chain+0x60>
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	e063      	b.n	8011f74 <create_chain+0x128>
		scl = clst;
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011eb0:	69bb      	ldr	r3, [r7, #24]
 8011eb2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	699b      	ldr	r3, [r3, #24]
 8011ebe:	69fa      	ldr	r2, [r7, #28]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d307      	bcc.n	8011ed4 <create_chain+0x88>
				ncl = 2;
 8011ec4:	2302      	movs	r3, #2
 8011ec6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011ec8:	69fa      	ldr	r2, [r7, #28]
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d901      	bls.n	8011ed4 <create_chain+0x88>
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	e04f      	b.n	8011f74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011ed4:	69f9      	ldr	r1, [r7, #28]
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7ff fdc1 	bl	8011a5e <get_fat>
 8011edc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00e      	beq.n	8011f02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d003      	beq.n	8011ef2 <create_chain+0xa6>
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ef0:	d101      	bne.n	8011ef6 <create_chain+0xaa>
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	e03e      	b.n	8011f74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011ef6:	69fa      	ldr	r2, [r7, #28]
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d1da      	bne.n	8011eb4 <create_chain+0x68>
 8011efe:	2300      	movs	r3, #0
 8011f00:	e038      	b.n	8011f74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011f02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011f04:	f04f 32ff 	mov.w	r2, #4294967295
 8011f08:	69f9      	ldr	r1, [r7, #28]
 8011f0a:	6938      	ldr	r0, [r7, #16]
 8011f0c:	f7ff fe4f 	bl	8011bae <put_fat>
 8011f10:	4603      	mov	r3, r0
 8011f12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011f14:	7dfb      	ldrb	r3, [r7, #23]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d109      	bne.n	8011f2e <create_chain+0xe2>
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d006      	beq.n	8011f2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011f20:	69fa      	ldr	r2, [r7, #28]
 8011f22:	6839      	ldr	r1, [r7, #0]
 8011f24:	6938      	ldr	r0, [r7, #16]
 8011f26:	f7ff fe42 	bl	8011bae <put_fat>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011f2e:	7dfb      	ldrb	r3, [r7, #23]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d116      	bne.n	8011f62 <create_chain+0x116>
		fs->last_clst = ncl;
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	69fa      	ldr	r2, [r7, #28]
 8011f38:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	695a      	ldr	r2, [r3, #20]
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	699b      	ldr	r3, [r3, #24]
 8011f42:	3b02      	subs	r3, #2
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d804      	bhi.n	8011f52 <create_chain+0x106>
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	695b      	ldr	r3, [r3, #20]
 8011f4c:	1e5a      	subs	r2, r3, #1
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	791b      	ldrb	r3, [r3, #4]
 8011f56:	f043 0301 	orr.w	r3, r3, #1
 8011f5a:	b2da      	uxtb	r2, r3
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	711a      	strb	r2, [r3, #4]
 8011f60:	e007      	b.n	8011f72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011f62:	7dfb      	ldrb	r3, [r7, #23]
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d102      	bne.n	8011f6e <create_chain+0x122>
 8011f68:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6c:	e000      	b.n	8011f70 <create_chain+0x124>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011f72:	69fb      	ldr	r3, [r7, #28]
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3720      	adds	r7, #32
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b087      	sub	sp, #28
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f90:	3304      	adds	r3, #4
 8011f92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	0a5b      	lsrs	r3, r3, #9
 8011f98:	68fa      	ldr	r2, [r7, #12]
 8011f9a:	8952      	ldrh	r2, [r2, #10]
 8011f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fa0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	1d1a      	adds	r2, r3, #4
 8011fa6:	613a      	str	r2, [r7, #16]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d101      	bne.n	8011fb6 <clmt_clust+0x3a>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	e010      	b.n	8011fd8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011fb6:	697a      	ldr	r2, [r7, #20]
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d307      	bcc.n	8011fce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011fbe:	697a      	ldr	r2, [r7, #20]
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	1ad3      	subs	r3, r2, r3
 8011fc4:	617b      	str	r3, [r7, #20]
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	3304      	adds	r3, #4
 8011fca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011fcc:	e7e9      	b.n	8011fa2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011fce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	4413      	add	r3, r2
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	371c      	adds	r7, #28
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ffa:	d204      	bcs.n	8012006 <dir_sdi+0x22>
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	f003 031f 	and.w	r3, r3, #31
 8012002:	2b00      	cmp	r3, #0
 8012004:	d001      	beq.n	801200a <dir_sdi+0x26>
		return FR_INT_ERR;
 8012006:	2302      	movs	r3, #2
 8012008:	e063      	b.n	80120d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	683a      	ldr	r2, [r7, #0]
 801200e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	689b      	ldr	r3, [r3, #8]
 8012014:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d106      	bne.n	801202a <dir_sdi+0x46>
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	2b02      	cmp	r3, #2
 8012022:	d902      	bls.n	801202a <dir_sdi+0x46>
		clst = fs->dirbase;
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012028:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d10c      	bne.n	801204a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	095b      	lsrs	r3, r3, #5
 8012034:	693a      	ldr	r2, [r7, #16]
 8012036:	8912      	ldrh	r2, [r2, #8]
 8012038:	4293      	cmp	r3, r2
 801203a:	d301      	bcc.n	8012040 <dir_sdi+0x5c>
 801203c:	2302      	movs	r3, #2
 801203e:	e048      	b.n	80120d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	61da      	str	r2, [r3, #28]
 8012048:	e029      	b.n	801209e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	895b      	ldrh	r3, [r3, #10]
 801204e:	025b      	lsls	r3, r3, #9
 8012050:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012052:	e019      	b.n	8012088 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6979      	ldr	r1, [r7, #20]
 8012058:	4618      	mov	r0, r3
 801205a:	f7ff fd00 	bl	8011a5e <get_fat>
 801205e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012066:	d101      	bne.n	801206c <dir_sdi+0x88>
 8012068:	2301      	movs	r3, #1
 801206a:	e032      	b.n	80120d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	2b01      	cmp	r3, #1
 8012070:	d904      	bls.n	801207c <dir_sdi+0x98>
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	699b      	ldr	r3, [r3, #24]
 8012076:	697a      	ldr	r2, [r7, #20]
 8012078:	429a      	cmp	r2, r3
 801207a:	d301      	bcc.n	8012080 <dir_sdi+0x9c>
 801207c:	2302      	movs	r3, #2
 801207e:	e028      	b.n	80120d2 <dir_sdi+0xee>
			ofs -= csz;
 8012080:	683a      	ldr	r2, [r7, #0]
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012088:	683a      	ldr	r2, [r7, #0]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	429a      	cmp	r2, r3
 801208e:	d2e1      	bcs.n	8012054 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012090:	6979      	ldr	r1, [r7, #20]
 8012092:	6938      	ldr	r0, [r7, #16]
 8012094:	f7ff fcc4 	bl	8011a20 <clust2sect>
 8012098:	4602      	mov	r2, r0
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	697a      	ldr	r2, [r7, #20]
 80120a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	69db      	ldr	r3, [r3, #28]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d101      	bne.n	80120b0 <dir_sdi+0xcc>
 80120ac:	2302      	movs	r3, #2
 80120ae:	e010      	b.n	80120d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	69da      	ldr	r2, [r3, #28]
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	0a5b      	lsrs	r3, r3, #9
 80120b8:	441a      	add	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120ca:	441a      	add	r2, r3
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80120d0:	2300      	movs	r3, #0
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3718      	adds	r7, #24
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b086      	sub	sp, #24
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
 80120e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	695b      	ldr	r3, [r3, #20]
 80120ee:	3320      	adds	r3, #32
 80120f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	69db      	ldr	r3, [r3, #28]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d003      	beq.n	8012102 <dir_next+0x28>
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012100:	d301      	bcc.n	8012106 <dir_next+0x2c>
 8012102:	2304      	movs	r3, #4
 8012104:	e0aa      	b.n	801225c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801210c:	2b00      	cmp	r3, #0
 801210e:	f040 8098 	bne.w	8012242 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	69db      	ldr	r3, [r3, #28]
 8012116:	1c5a      	adds	r2, r3, #1
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	699b      	ldr	r3, [r3, #24]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d10b      	bne.n	801213c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	095b      	lsrs	r3, r3, #5
 8012128:	68fa      	ldr	r2, [r7, #12]
 801212a:	8912      	ldrh	r2, [r2, #8]
 801212c:	4293      	cmp	r3, r2
 801212e:	f0c0 8088 	bcc.w	8012242 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2200      	movs	r2, #0
 8012136:	61da      	str	r2, [r3, #28]
 8012138:	2304      	movs	r3, #4
 801213a:	e08f      	b.n	801225c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	0a5b      	lsrs	r3, r3, #9
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	8952      	ldrh	r2, [r2, #10]
 8012144:	3a01      	subs	r2, #1
 8012146:	4013      	ands	r3, r2
 8012148:	2b00      	cmp	r3, #0
 801214a:	d17a      	bne.n	8012242 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	699b      	ldr	r3, [r3, #24]
 8012152:	4619      	mov	r1, r3
 8012154:	4610      	mov	r0, r2
 8012156:	f7ff fc82 	bl	8011a5e <get_fat>
 801215a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	2b01      	cmp	r3, #1
 8012160:	d801      	bhi.n	8012166 <dir_next+0x8c>
 8012162:	2302      	movs	r3, #2
 8012164:	e07a      	b.n	801225c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801216c:	d101      	bne.n	8012172 <dir_next+0x98>
 801216e:	2301      	movs	r3, #1
 8012170:	e074      	b.n	801225c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	699b      	ldr	r3, [r3, #24]
 8012176:	697a      	ldr	r2, [r7, #20]
 8012178:	429a      	cmp	r2, r3
 801217a:	d358      	bcc.n	801222e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d104      	bne.n	801218c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	61da      	str	r2, [r3, #28]
 8012188:	2304      	movs	r3, #4
 801218a:	e067      	b.n	801225c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	699b      	ldr	r3, [r3, #24]
 8012192:	4619      	mov	r1, r3
 8012194:	4610      	mov	r0, r2
 8012196:	f7ff fe59 	bl	8011e4c <create_chain>
 801219a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d101      	bne.n	80121a6 <dir_next+0xcc>
 80121a2:	2307      	movs	r3, #7
 80121a4:	e05a      	b.n	801225c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d101      	bne.n	80121b0 <dir_next+0xd6>
 80121ac:	2302      	movs	r3, #2
 80121ae:	e055      	b.n	801225c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121b6:	d101      	bne.n	80121bc <dir_next+0xe2>
 80121b8:	2301      	movs	r3, #1
 80121ba:	e04f      	b.n	801225c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80121bc:	68f8      	ldr	r0, [r7, #12]
 80121be:	f7ff fb4f 	bl	8011860 <sync_window>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d001      	beq.n	80121cc <dir_next+0xf2>
 80121c8:	2301      	movs	r3, #1
 80121ca:	e047      	b.n	801225c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	3334      	adds	r3, #52	; 0x34
 80121d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121d4:	2100      	movs	r1, #0
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7ff f947 	bl	801146a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121dc:	2300      	movs	r3, #0
 80121de:	613b      	str	r3, [r7, #16]
 80121e0:	6979      	ldr	r1, [r7, #20]
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f7ff fc1c 	bl	8011a20 <clust2sect>
 80121e8:	4602      	mov	r2, r0
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	631a      	str	r2, [r3, #48]	; 0x30
 80121ee:	e012      	b.n	8012216 <dir_next+0x13c>
						fs->wflag = 1;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	2201      	movs	r2, #1
 80121f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	f7ff fb32 	bl	8011860 <sync_window>
 80121fc:	4603      	mov	r3, r0
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d001      	beq.n	8012206 <dir_next+0x12c>
 8012202:	2301      	movs	r3, #1
 8012204:	e02a      	b.n	801225c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	3301      	adds	r3, #1
 801220a:	613b      	str	r3, [r7, #16]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012210:	1c5a      	adds	r2, r3, #1
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	631a      	str	r2, [r3, #48]	; 0x30
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	895b      	ldrh	r3, [r3, #10]
 801221a:	461a      	mov	r2, r3
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	4293      	cmp	r3, r2
 8012220:	d3e6      	bcc.n	80121f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	1ad2      	subs	r2, r2, r3
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	697a      	ldr	r2, [r7, #20]
 8012232:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012234:	6979      	ldr	r1, [r7, #20]
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f7ff fbf2 	bl	8011a20 <clust2sect>
 801223c:	4602      	mov	r2, r0
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	68ba      	ldr	r2, [r7, #8]
 8012246:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012254:	441a      	add	r2, r3
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801225a:	2300      	movs	r3, #0
}
 801225c:	4618      	mov	r0, r3
 801225e:	3718      	adds	r7, #24
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012274:	2100      	movs	r1, #0
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7ff feb4 	bl	8011fe4 <dir_sdi>
 801227c:	4603      	mov	r3, r0
 801227e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012280:	7dfb      	ldrb	r3, [r7, #23]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d12b      	bne.n	80122de <dir_alloc+0x7a>
		n = 0;
 8012286:	2300      	movs	r3, #0
 8012288:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	69db      	ldr	r3, [r3, #28]
 801228e:	4619      	mov	r1, r3
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f7ff fb29 	bl	80118e8 <move_window>
 8012296:	4603      	mov	r3, r0
 8012298:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801229a:	7dfb      	ldrb	r3, [r7, #23]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d11d      	bne.n	80122dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6a1b      	ldr	r3, [r3, #32]
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	2be5      	cmp	r3, #229	; 0xe5
 80122a8:	d004      	beq.n	80122b4 <dir_alloc+0x50>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6a1b      	ldr	r3, [r3, #32]
 80122ae:	781b      	ldrb	r3, [r3, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d107      	bne.n	80122c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	3301      	adds	r3, #1
 80122b8:	613b      	str	r3, [r7, #16]
 80122ba:	693a      	ldr	r2, [r7, #16]
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d102      	bne.n	80122c8 <dir_alloc+0x64>
 80122c2:	e00c      	b.n	80122de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80122c4:	2300      	movs	r3, #0
 80122c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80122c8:	2101      	movs	r1, #1
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7ff ff05 	bl	80120da <dir_next>
 80122d0:	4603      	mov	r3, r0
 80122d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80122d4:	7dfb      	ldrb	r3, [r7, #23]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d0d7      	beq.n	801228a <dir_alloc+0x26>
 80122da:	e000      	b.n	80122de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80122dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80122de:	7dfb      	ldrb	r3, [r7, #23]
 80122e0:	2b04      	cmp	r3, #4
 80122e2:	d101      	bne.n	80122e8 <dir_alloc+0x84>
 80122e4:	2307      	movs	r3, #7
 80122e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80122e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3718      	adds	r7, #24
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b084      	sub	sp, #16
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	331a      	adds	r3, #26
 8012300:	4618      	mov	r0, r3
 8012302:	f7ff f80f 	bl	8011324 <ld_word>
 8012306:	4603      	mov	r3, r0
 8012308:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	2b03      	cmp	r3, #3
 8012310:	d109      	bne.n	8012326 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	3314      	adds	r3, #20
 8012316:	4618      	mov	r0, r3
 8012318:	f7ff f804 	bl	8011324 <ld_word>
 801231c:	4603      	mov	r3, r0
 801231e:	041b      	lsls	r3, r3, #16
 8012320:	68fa      	ldr	r2, [r7, #12]
 8012322:	4313      	orrs	r3, r2
 8012324:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012326:	68fb      	ldr	r3, [r7, #12]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	331a      	adds	r3, #26
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	b292      	uxth	r2, r2
 8012344:	4611      	mov	r1, r2
 8012346:	4618      	mov	r0, r3
 8012348:	f7ff f827 	bl	801139a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	2b03      	cmp	r3, #3
 8012352:	d109      	bne.n	8012368 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	f103 0214 	add.w	r2, r3, #20
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	0c1b      	lsrs	r3, r3, #16
 801235e:	b29b      	uxth	r3, r3
 8012360:	4619      	mov	r1, r3
 8012362:	4610      	mov	r0, r2
 8012364:	f7ff f819 	bl	801139a <st_word>
	}
}
 8012368:	bf00      	nop
 801236a:	3710      	adds	r7, #16
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801237a:	2304      	movs	r3, #4
 801237c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012384:	e03c      	b.n	8012400 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	69db      	ldr	r3, [r3, #28]
 801238a:	4619      	mov	r1, r3
 801238c:	6938      	ldr	r0, [r7, #16]
 801238e:	f7ff faab 	bl	80118e8 <move_window>
 8012392:	4603      	mov	r3, r0
 8012394:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012396:	7dfb      	ldrb	r3, [r7, #23]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d136      	bne.n	801240a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6a1b      	ldr	r3, [r3, #32]
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80123a4:	7bfb      	ldrb	r3, [r7, #15]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d102      	bne.n	80123b0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80123aa:	2304      	movs	r3, #4
 80123ac:	75fb      	strb	r3, [r7, #23]
 80123ae:	e031      	b.n	8012414 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6a1b      	ldr	r3, [r3, #32]
 80123b4:	330b      	adds	r3, #11
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123bc:	73bb      	strb	r3, [r7, #14]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	7bba      	ldrb	r2, [r7, #14]
 80123c2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80123c4:	7bfb      	ldrb	r3, [r7, #15]
 80123c6:	2be5      	cmp	r3, #229	; 0xe5
 80123c8:	d011      	beq.n	80123ee <dir_read+0x7e>
 80123ca:	7bfb      	ldrb	r3, [r7, #15]
 80123cc:	2b2e      	cmp	r3, #46	; 0x2e
 80123ce:	d00e      	beq.n	80123ee <dir_read+0x7e>
 80123d0:	7bbb      	ldrb	r3, [r7, #14]
 80123d2:	2b0f      	cmp	r3, #15
 80123d4:	d00b      	beq.n	80123ee <dir_read+0x7e>
 80123d6:	7bbb      	ldrb	r3, [r7, #14]
 80123d8:	f023 0320 	bic.w	r3, r3, #32
 80123dc:	2b08      	cmp	r3, #8
 80123de:	bf0c      	ite	eq
 80123e0:	2301      	moveq	r3, #1
 80123e2:	2300      	movne	r3, #0
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	461a      	mov	r2, r3
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d00f      	beq.n	801240e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80123ee:	2100      	movs	r1, #0
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7ff fe72 	bl	80120da <dir_next>
 80123f6:	4603      	mov	r3, r0
 80123f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80123fa:	7dfb      	ldrb	r3, [r7, #23]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d108      	bne.n	8012412 <dir_read+0xa2>
	while (dp->sect) {
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	69db      	ldr	r3, [r3, #28]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d1be      	bne.n	8012386 <dir_read+0x16>
 8012408:	e004      	b.n	8012414 <dir_read+0xa4>
		if (res != FR_OK) break;
 801240a:	bf00      	nop
 801240c:	e002      	b.n	8012414 <dir_read+0xa4>
				break;
 801240e:	bf00      	nop
 8012410:	e000      	b.n	8012414 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012412:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012414:	7dfb      	ldrb	r3, [r7, #23]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d002      	beq.n	8012420 <dir_read+0xb0>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2200      	movs	r2, #0
 801241e:	61da      	str	r2, [r3, #28]
	return res;
 8012420:	7dfb      	ldrb	r3, [r7, #23]
}
 8012422:	4618      	mov	r0, r3
 8012424:	3718      	adds	r7, #24
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}

0801242a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801242a:	b580      	push	{r7, lr}
 801242c:	b086      	sub	sp, #24
 801242e:	af00      	add	r7, sp, #0
 8012430:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012438:	2100      	movs	r1, #0
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f7ff fdd2 	bl	8011fe4 <dir_sdi>
 8012440:	4603      	mov	r3, r0
 8012442:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012444:	7dfb      	ldrb	r3, [r7, #23]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d001      	beq.n	801244e <dir_find+0x24>
 801244a:	7dfb      	ldrb	r3, [r7, #23]
 801244c:	e03e      	b.n	80124cc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	69db      	ldr	r3, [r3, #28]
 8012452:	4619      	mov	r1, r3
 8012454:	6938      	ldr	r0, [r7, #16]
 8012456:	f7ff fa47 	bl	80118e8 <move_window>
 801245a:	4603      	mov	r3, r0
 801245c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801245e:	7dfb      	ldrb	r3, [r7, #23]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d12f      	bne.n	80124c4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a1b      	ldr	r3, [r3, #32]
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801246c:	7bfb      	ldrb	r3, [r7, #15]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d102      	bne.n	8012478 <dir_find+0x4e>
 8012472:	2304      	movs	r3, #4
 8012474:	75fb      	strb	r3, [r7, #23]
 8012476:	e028      	b.n	80124ca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6a1b      	ldr	r3, [r3, #32]
 801247c:	330b      	adds	r3, #11
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012484:	b2da      	uxtb	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6a1b      	ldr	r3, [r3, #32]
 801248e:	330b      	adds	r3, #11
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	f003 0308 	and.w	r3, r3, #8
 8012496:	2b00      	cmp	r3, #0
 8012498:	d10a      	bne.n	80124b0 <dir_find+0x86>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6a18      	ldr	r0, [r3, #32]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	3324      	adds	r3, #36	; 0x24
 80124a2:	220b      	movs	r2, #11
 80124a4:	4619      	mov	r1, r3
 80124a6:	f7fe fffb 	bl	80114a0 <mem_cmp>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00b      	beq.n	80124c8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80124b0:	2100      	movs	r1, #0
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f7ff fe11 	bl	80120da <dir_next>
 80124b8:	4603      	mov	r3, r0
 80124ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80124bc:	7dfb      	ldrb	r3, [r7, #23]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d0c5      	beq.n	801244e <dir_find+0x24>
 80124c2:	e002      	b.n	80124ca <dir_find+0xa0>
		if (res != FR_OK) break;
 80124c4:	bf00      	nop
 80124c6:	e000      	b.n	80124ca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80124c8:	bf00      	nop

	return res;
 80124ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3718      	adds	r7, #24
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80124e2:	2101      	movs	r1, #1
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7ff febd 	bl	8012264 <dir_alloc>
 80124ea:	4603      	mov	r3, r0
 80124ec:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80124ee:	7bfb      	ldrb	r3, [r7, #15]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d11c      	bne.n	801252e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	69db      	ldr	r3, [r3, #28]
 80124f8:	4619      	mov	r1, r3
 80124fa:	68b8      	ldr	r0, [r7, #8]
 80124fc:	f7ff f9f4 	bl	80118e8 <move_window>
 8012500:	4603      	mov	r3, r0
 8012502:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012504:	7bfb      	ldrb	r3, [r7, #15]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d111      	bne.n	801252e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6a1b      	ldr	r3, [r3, #32]
 801250e:	2220      	movs	r2, #32
 8012510:	2100      	movs	r1, #0
 8012512:	4618      	mov	r0, r3
 8012514:	f7fe ffa9 	bl	801146a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6a18      	ldr	r0, [r3, #32]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	3324      	adds	r3, #36	; 0x24
 8012520:	220b      	movs	r2, #11
 8012522:	4619      	mov	r1, r3
 8012524:	f7fe ff80 	bl	8011428 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	2201      	movs	r2, #1
 801252c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012530:	4618      	mov	r0, r3
 8012532:	3710      	adds	r7, #16
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b084      	sub	sp, #16
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	69db      	ldr	r3, [r3, #28]
 801254a:	4619      	mov	r1, r3
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	f7ff f9cb 	bl	80118e8 <move_window>
 8012552:	4603      	mov	r3, r0
 8012554:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012556:	7afb      	ldrb	r3, [r7, #11]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d106      	bne.n	801256a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6a1b      	ldr	r3, [r3, #32]
 8012560:	22e5      	movs	r2, #229	; 0xe5
 8012562:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2201      	movs	r2, #1
 8012568:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801256a:	7afb      	ldrb	r3, [r7, #11]
}
 801256c:	4618      	mov	r0, r3
 801256e:	3710      	adds	r7, #16
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b086      	sub	sp, #24
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	2200      	movs	r2, #0
 8012582:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	69db      	ldr	r3, [r3, #28]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d04e      	beq.n	801262a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801258c:	2300      	movs	r3, #0
 801258e:	613b      	str	r3, [r7, #16]
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012594:	e021      	b.n	80125da <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6a1a      	ldr	r2, [r3, #32]
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	1c59      	adds	r1, r3, #1
 801259e:	6179      	str	r1, [r7, #20]
 80125a0:	4413      	add	r3, r2
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80125a6:	7bfb      	ldrb	r3, [r7, #15]
 80125a8:	2b20      	cmp	r3, #32
 80125aa:	d100      	bne.n	80125ae <get_fileinfo+0x3a>
 80125ac:	e015      	b.n	80125da <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80125ae:	7bfb      	ldrb	r3, [r7, #15]
 80125b0:	2b05      	cmp	r3, #5
 80125b2:	d101      	bne.n	80125b8 <get_fileinfo+0x44>
 80125b4:	23e5      	movs	r3, #229	; 0xe5
 80125b6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	2b09      	cmp	r3, #9
 80125bc:	d106      	bne.n	80125cc <get_fileinfo+0x58>
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	1c5a      	adds	r2, r3, #1
 80125c2:	613a      	str	r2, [r7, #16]
 80125c4:	683a      	ldr	r2, [r7, #0]
 80125c6:	4413      	add	r3, r2
 80125c8:	222e      	movs	r2, #46	; 0x2e
 80125ca:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	1c5a      	adds	r2, r3, #1
 80125d0:	613a      	str	r2, [r7, #16]
 80125d2:	683a      	ldr	r2, [r7, #0]
 80125d4:	4413      	add	r3, r2
 80125d6:	7bfa      	ldrb	r2, [r7, #15]
 80125d8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	2b0a      	cmp	r3, #10
 80125de:	d9da      	bls.n	8012596 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80125e0:	683a      	ldr	r2, [r7, #0]
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	4413      	add	r3, r2
 80125e6:	3309      	adds	r3, #9
 80125e8:	2200      	movs	r2, #0
 80125ea:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a1b      	ldr	r3, [r3, #32]
 80125f0:	7ada      	ldrb	r2, [r3, #11]
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6a1b      	ldr	r3, [r3, #32]
 80125fa:	331c      	adds	r3, #28
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7fe fea9 	bl	8011354 <ld_dword>
 8012602:	4602      	mov	r2, r0
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6a1b      	ldr	r3, [r3, #32]
 801260c:	3316      	adds	r3, #22
 801260e:	4618      	mov	r0, r3
 8012610:	f7fe fea0 	bl	8011354 <ld_dword>
 8012614:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	b29a      	uxth	r2, r3
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	80da      	strh	r2, [r3, #6]
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	0c1b      	lsrs	r3, r3, #16
 8012622:	b29a      	uxth	r2, r3
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	809a      	strh	r2, [r3, #4]
 8012628:	e000      	b.n	801262c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801262a:	bf00      	nop
}
 801262c:	3718      	adds	r7, #24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
	...

08012634 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b088      	sub	sp, #32
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	60fb      	str	r3, [r7, #12]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	3324      	adds	r3, #36	; 0x24
 8012648:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801264a:	220b      	movs	r2, #11
 801264c:	2120      	movs	r1, #32
 801264e:	68b8      	ldr	r0, [r7, #8]
 8012650:	f7fe ff0b 	bl	801146a <mem_set>
	si = i = 0; ni = 8;
 8012654:	2300      	movs	r3, #0
 8012656:	613b      	str	r3, [r7, #16]
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	61fb      	str	r3, [r7, #28]
 801265c:	2308      	movs	r3, #8
 801265e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	1c5a      	adds	r2, r3, #1
 8012664:	61fa      	str	r2, [r7, #28]
 8012666:	68fa      	ldr	r2, [r7, #12]
 8012668:	4413      	add	r3, r2
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801266e:	7efb      	ldrb	r3, [r7, #27]
 8012670:	2b20      	cmp	r3, #32
 8012672:	d94e      	bls.n	8012712 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012674:	7efb      	ldrb	r3, [r7, #27]
 8012676:	2b2f      	cmp	r3, #47	; 0x2f
 8012678:	d006      	beq.n	8012688 <create_name+0x54>
 801267a:	7efb      	ldrb	r3, [r7, #27]
 801267c:	2b5c      	cmp	r3, #92	; 0x5c
 801267e:	d110      	bne.n	80126a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012680:	e002      	b.n	8012688 <create_name+0x54>
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	3301      	adds	r3, #1
 8012686:	61fb      	str	r3, [r7, #28]
 8012688:	68fa      	ldr	r2, [r7, #12]
 801268a:	69fb      	ldr	r3, [r7, #28]
 801268c:	4413      	add	r3, r2
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	2b2f      	cmp	r3, #47	; 0x2f
 8012692:	d0f6      	beq.n	8012682 <create_name+0x4e>
 8012694:	68fa      	ldr	r2, [r7, #12]
 8012696:	69fb      	ldr	r3, [r7, #28]
 8012698:	4413      	add	r3, r2
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	2b5c      	cmp	r3, #92	; 0x5c
 801269e:	d0f0      	beq.n	8012682 <create_name+0x4e>
			break;
 80126a0:	e038      	b.n	8012714 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80126a2:	7efb      	ldrb	r3, [r7, #27]
 80126a4:	2b2e      	cmp	r3, #46	; 0x2e
 80126a6:	d003      	beq.n	80126b0 <create_name+0x7c>
 80126a8:	693a      	ldr	r2, [r7, #16]
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d30c      	bcc.n	80126ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	2b0b      	cmp	r3, #11
 80126b4:	d002      	beq.n	80126bc <create_name+0x88>
 80126b6:	7efb      	ldrb	r3, [r7, #27]
 80126b8:	2b2e      	cmp	r3, #46	; 0x2e
 80126ba:	d001      	beq.n	80126c0 <create_name+0x8c>
 80126bc:	2306      	movs	r3, #6
 80126be:	e044      	b.n	801274a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80126c0:	2308      	movs	r3, #8
 80126c2:	613b      	str	r3, [r7, #16]
 80126c4:	230b      	movs	r3, #11
 80126c6:	617b      	str	r3, [r7, #20]
			continue;
 80126c8:	e022      	b.n	8012710 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80126ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	da04      	bge.n	80126dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80126d2:	7efb      	ldrb	r3, [r7, #27]
 80126d4:	3b80      	subs	r3, #128	; 0x80
 80126d6:	4a1f      	ldr	r2, [pc, #124]	; (8012754 <create_name+0x120>)
 80126d8:	5cd3      	ldrb	r3, [r2, r3]
 80126da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80126dc:	7efb      	ldrb	r3, [r7, #27]
 80126de:	4619      	mov	r1, r3
 80126e0:	481d      	ldr	r0, [pc, #116]	; (8012758 <create_name+0x124>)
 80126e2:	f7fe ff04 	bl	80114ee <chk_chr>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d001      	beq.n	80126f0 <create_name+0xbc>
 80126ec:	2306      	movs	r3, #6
 80126ee:	e02c      	b.n	801274a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80126f0:	7efb      	ldrb	r3, [r7, #27]
 80126f2:	2b60      	cmp	r3, #96	; 0x60
 80126f4:	d905      	bls.n	8012702 <create_name+0xce>
 80126f6:	7efb      	ldrb	r3, [r7, #27]
 80126f8:	2b7a      	cmp	r3, #122	; 0x7a
 80126fa:	d802      	bhi.n	8012702 <create_name+0xce>
 80126fc:	7efb      	ldrb	r3, [r7, #27]
 80126fe:	3b20      	subs	r3, #32
 8012700:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	1c5a      	adds	r2, r3, #1
 8012706:	613a      	str	r2, [r7, #16]
 8012708:	68ba      	ldr	r2, [r7, #8]
 801270a:	4413      	add	r3, r2
 801270c:	7efa      	ldrb	r2, [r7, #27]
 801270e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012710:	e7a6      	b.n	8012660 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012712:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012714:	68fa      	ldr	r2, [r7, #12]
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	441a      	add	r2, r3
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d101      	bne.n	8012728 <create_name+0xf4>
 8012724:	2306      	movs	r3, #6
 8012726:	e010      	b.n	801274a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2be5      	cmp	r3, #229	; 0xe5
 801272e:	d102      	bne.n	8012736 <create_name+0x102>
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	2205      	movs	r2, #5
 8012734:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012736:	7efb      	ldrb	r3, [r7, #27]
 8012738:	2b20      	cmp	r3, #32
 801273a:	d801      	bhi.n	8012740 <create_name+0x10c>
 801273c:	2204      	movs	r2, #4
 801273e:	e000      	b.n	8012742 <create_name+0x10e>
 8012740:	2200      	movs	r2, #0
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	330b      	adds	r3, #11
 8012746:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012748:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801274a:	4618      	mov	r0, r3
 801274c:	3720      	adds	r7, #32
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
 8012752:	bf00      	nop
 8012754:	0801a9d8 	.word	0x0801a9d8
 8012758:	0801a914 	.word	0x0801a914

0801275c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b086      	sub	sp, #24
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012770:	e002      	b.n	8012778 <follow_path+0x1c>
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	3301      	adds	r3, #1
 8012776:	603b      	str	r3, [r7, #0]
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	2b2f      	cmp	r3, #47	; 0x2f
 801277e:	d0f8      	beq.n	8012772 <follow_path+0x16>
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	2b5c      	cmp	r3, #92	; 0x5c
 8012786:	d0f4      	beq.n	8012772 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	2200      	movs	r2, #0
 801278c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b1f      	cmp	r3, #31
 8012794:	d80a      	bhi.n	80127ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2280      	movs	r2, #128	; 0x80
 801279a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801279e:	2100      	movs	r1, #0
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff fc1f 	bl	8011fe4 <dir_sdi>
 80127a6:	4603      	mov	r3, r0
 80127a8:	75fb      	strb	r3, [r7, #23]
 80127aa:	e043      	b.n	8012834 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80127ac:	463b      	mov	r3, r7
 80127ae:	4619      	mov	r1, r3
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7ff ff3f 	bl	8012634 <create_name>
 80127b6:	4603      	mov	r3, r0
 80127b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d134      	bne.n	801282a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7ff fe32 	bl	801242a <dir_find>
 80127c6:	4603      	mov	r3, r0
 80127c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80127d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80127d2:	7dfb      	ldrb	r3, [r7, #23]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00a      	beq.n	80127ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80127d8:	7dfb      	ldrb	r3, [r7, #23]
 80127da:	2b04      	cmp	r3, #4
 80127dc:	d127      	bne.n	801282e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80127de:	7afb      	ldrb	r3, [r7, #11]
 80127e0:	f003 0304 	and.w	r3, r3, #4
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d122      	bne.n	801282e <follow_path+0xd2>
 80127e8:	2305      	movs	r3, #5
 80127ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80127ec:	e01f      	b.n	801282e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80127ee:	7afb      	ldrb	r3, [r7, #11]
 80127f0:	f003 0304 	and.w	r3, r3, #4
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d11c      	bne.n	8012832 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	799b      	ldrb	r3, [r3, #6]
 80127fc:	f003 0310 	and.w	r3, r3, #16
 8012800:	2b00      	cmp	r3, #0
 8012802:	d102      	bne.n	801280a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012804:	2305      	movs	r3, #5
 8012806:	75fb      	strb	r3, [r7, #23]
 8012808:	e014      	b.n	8012834 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	695b      	ldr	r3, [r3, #20]
 8012814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012818:	4413      	add	r3, r2
 801281a:	4619      	mov	r1, r3
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	f7ff fd68 	bl	80122f2 <ld_clust>
 8012822:	4602      	mov	r2, r0
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012828:	e7c0      	b.n	80127ac <follow_path+0x50>
			if (res != FR_OK) break;
 801282a:	bf00      	nop
 801282c:	e002      	b.n	8012834 <follow_path+0xd8>
				break;
 801282e:	bf00      	nop
 8012830:	e000      	b.n	8012834 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012832:	bf00      	nop
			}
		}
	}

	return res;
 8012834:	7dfb      	ldrb	r3, [r7, #23]
}
 8012836:	4618      	mov	r0, r3
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801283e:	b480      	push	{r7}
 8012840:	b087      	sub	sp, #28
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012846:	f04f 33ff 	mov.w	r3, #4294967295
 801284a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d031      	beq.n	80128b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	617b      	str	r3, [r7, #20]
 801285a:	e002      	b.n	8012862 <get_ldnumber+0x24>
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	3301      	adds	r3, #1
 8012860:	617b      	str	r3, [r7, #20]
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	2b20      	cmp	r3, #32
 8012868:	d903      	bls.n	8012872 <get_ldnumber+0x34>
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	2b3a      	cmp	r3, #58	; 0x3a
 8012870:	d1f4      	bne.n	801285c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	2b3a      	cmp	r3, #58	; 0x3a
 8012878:	d11c      	bne.n	80128b4 <get_ldnumber+0x76>
			tp = *path;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	1c5a      	adds	r2, r3, #1
 8012884:	60fa      	str	r2, [r7, #12]
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	3b30      	subs	r3, #48	; 0x30
 801288a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	2b09      	cmp	r3, #9
 8012890:	d80e      	bhi.n	80128b0 <get_ldnumber+0x72>
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	429a      	cmp	r2, r3
 8012898:	d10a      	bne.n	80128b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d107      	bne.n	80128b0 <get_ldnumber+0x72>
					vol = (int)i;
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	3301      	adds	r3, #1
 80128a8:	617b      	str	r3, [r7, #20]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	697a      	ldr	r2, [r7, #20]
 80128ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	e002      	b.n	80128ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80128b4:	2300      	movs	r3, #0
 80128b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80128b8:	693b      	ldr	r3, [r7, #16]
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	371c      	adds	r7, #28
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr
	...

080128c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2200      	movs	r2, #0
 80128d6:	70da      	strb	r2, [r3, #3]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f04f 32ff 	mov.w	r2, #4294967295
 80128de:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80128e0:	6839      	ldr	r1, [r7, #0]
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff f800 	bl	80118e8 <move_window>
 80128e8:	4603      	mov	r3, r0
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d001      	beq.n	80128f2 <check_fs+0x2a>
 80128ee:	2304      	movs	r3, #4
 80128f0:	e038      	b.n	8012964 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	3334      	adds	r3, #52	; 0x34
 80128f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fe fd12 	bl	8011324 <ld_word>
 8012900:	4603      	mov	r3, r0
 8012902:	461a      	mov	r2, r3
 8012904:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012908:	429a      	cmp	r2, r3
 801290a:	d001      	beq.n	8012910 <check_fs+0x48>
 801290c:	2303      	movs	r3, #3
 801290e:	e029      	b.n	8012964 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012916:	2be9      	cmp	r3, #233	; 0xe9
 8012918:	d009      	beq.n	801292e <check_fs+0x66>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012920:	2beb      	cmp	r3, #235	; 0xeb
 8012922:	d11e      	bne.n	8012962 <check_fs+0x9a>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801292a:	2b90      	cmp	r3, #144	; 0x90
 801292c:	d119      	bne.n	8012962 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	3334      	adds	r3, #52	; 0x34
 8012932:	3336      	adds	r3, #54	; 0x36
 8012934:	4618      	mov	r0, r3
 8012936:	f7fe fd0d 	bl	8011354 <ld_dword>
 801293a:	4603      	mov	r3, r0
 801293c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012940:	4a0a      	ldr	r2, [pc, #40]	; (801296c <check_fs+0xa4>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d101      	bne.n	801294a <check_fs+0x82>
 8012946:	2300      	movs	r3, #0
 8012948:	e00c      	b.n	8012964 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3334      	adds	r3, #52	; 0x34
 801294e:	3352      	adds	r3, #82	; 0x52
 8012950:	4618      	mov	r0, r3
 8012952:	f7fe fcff 	bl	8011354 <ld_dword>
 8012956:	4603      	mov	r3, r0
 8012958:	4a05      	ldr	r2, [pc, #20]	; (8012970 <check_fs+0xa8>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d101      	bne.n	8012962 <check_fs+0x9a>
 801295e:	2300      	movs	r3, #0
 8012960:	e000      	b.n	8012964 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012962:	2302      	movs	r3, #2
}
 8012964:	4618      	mov	r0, r3
 8012966:	3708      	adds	r7, #8
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}
 801296c:	00544146 	.word	0x00544146
 8012970:	33544146 	.word	0x33544146

08012974 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b096      	sub	sp, #88	; 0x58
 8012978:	af00      	add	r7, sp, #0
 801297a:	60f8      	str	r0, [r7, #12]
 801297c:	60b9      	str	r1, [r7, #8]
 801297e:	4613      	mov	r3, r2
 8012980:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	2200      	movs	r2, #0
 8012986:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	f7ff ff58 	bl	801283e <get_ldnumber>
 801298e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012992:	2b00      	cmp	r3, #0
 8012994:	da01      	bge.n	801299a <find_volume+0x26>
 8012996:	230b      	movs	r3, #11
 8012998:	e235      	b.n	8012e06 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801299a:	4aa5      	ldr	r2, [pc, #660]	; (8012c30 <find_volume+0x2bc>)
 801299c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80129a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d101      	bne.n	80129ae <find_volume+0x3a>
 80129aa:	230c      	movs	r3, #12
 80129ac:	e22b      	b.n	8012e06 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80129ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80129b0:	f7fe fdb8 	bl	8011524 <lock_fs>
 80129b4:	4603      	mov	r3, r0
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d101      	bne.n	80129be <find_volume+0x4a>
 80129ba:	230f      	movs	r3, #15
 80129bc:	e223      	b.n	8012e06 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80129c4:	79fb      	ldrb	r3, [r7, #7]
 80129c6:	f023 0301 	bic.w	r3, r3, #1
 80129ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80129cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d01a      	beq.n	8012a0a <find_volume+0x96>
		stat = disk_status(fs->drv);
 80129d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d6:	785b      	ldrb	r3, [r3, #1]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7fe fc05 	bl	80111e8 <disk_status>
 80129de:	4603      	mov	r3, r0
 80129e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80129e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129e8:	f003 0301 	and.w	r3, r3, #1
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d10c      	bne.n	8012a0a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80129f0:	79fb      	ldrb	r3, [r7, #7]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d007      	beq.n	8012a06 <find_volume+0x92>
 80129f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129fa:	f003 0304 	and.w	r3, r3, #4
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d001      	beq.n	8012a06 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8012a02:	230a      	movs	r3, #10
 8012a04:	e1ff      	b.n	8012e06 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8012a06:	2300      	movs	r3, #0
 8012a08:	e1fd      	b.n	8012e06 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a12:	b2da      	uxtb	r2, r3
 8012a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1a:	785b      	ldrb	r3, [r3, #1]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fe fbfd 	bl	801121c <disk_initialize>
 8012a22:	4603      	mov	r3, r0
 8012a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012a28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a2c:	f003 0301 	and.w	r3, r3, #1
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012a34:	2303      	movs	r3, #3
 8012a36:	e1e6      	b.n	8012e06 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012a38:	79fb      	ldrb	r3, [r7, #7]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d007      	beq.n	8012a4e <find_volume+0xda>
 8012a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a42:	f003 0304 	and.w	r3, r3, #4
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d001      	beq.n	8012a4e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8012a4a:	230a      	movs	r3, #10
 8012a4c:	e1db      	b.n	8012e06 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012a52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a56:	f7ff ff37 	bl	80128c8 <check_fs>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a64:	2b02      	cmp	r3, #2
 8012a66:	d149      	bne.n	8012afc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a68:	2300      	movs	r3, #0
 8012a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8012a6c:	e01e      	b.n	8012aac <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a76:	011b      	lsls	r3, r3, #4
 8012a78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012a7c:	4413      	add	r3, r2
 8012a7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a82:	3304      	adds	r3, #4
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d006      	beq.n	8012a98 <find_volume+0x124>
 8012a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8c:	3308      	adds	r3, #8
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fe fc60 	bl	8011354 <ld_dword>
 8012a94:	4602      	mov	r2, r0
 8012a96:	e000      	b.n	8012a9a <find_volume+0x126>
 8012a98:	2200      	movs	r2, #0
 8012a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	3358      	adds	r3, #88	; 0x58
 8012aa0:	443b      	add	r3, r7
 8012aa2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8012aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aae:	2b03      	cmp	r3, #3
 8012ab0:	d9dd      	bls.n	8012a6e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d002      	beq.n	8012ac2 <find_volume+0x14e>
 8012abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012abe:	3b01      	subs	r3, #1
 8012ac0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	3358      	adds	r3, #88	; 0x58
 8012ac8:	443b      	add	r3, r7
 8012aca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ace:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d005      	beq.n	8012ae2 <find_volume+0x16e>
 8012ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ad8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ada:	f7ff fef5 	bl	80128c8 <check_fs>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	e000      	b.n	8012ae4 <find_volume+0x170>
 8012ae2:	2303      	movs	r3, #3
 8012ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d905      	bls.n	8012afc <find_volume+0x188>
 8012af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012af2:	3301      	adds	r3, #1
 8012af4:	643b      	str	r3, [r7, #64]	; 0x40
 8012af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012af8:	2b03      	cmp	r3, #3
 8012afa:	d9e2      	bls.n	8012ac2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b00:	2b04      	cmp	r3, #4
 8012b02:	d101      	bne.n	8012b08 <find_volume+0x194>
 8012b04:	2301      	movs	r3, #1
 8012b06:	e17e      	b.n	8012e06 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b0c:	2b01      	cmp	r3, #1
 8012b0e:	d901      	bls.n	8012b14 <find_volume+0x1a0>
 8012b10:	230d      	movs	r3, #13
 8012b12:	e178      	b.n	8012e06 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b16:	3334      	adds	r3, #52	; 0x34
 8012b18:	330b      	adds	r3, #11
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fe fc02 	bl	8011324 <ld_word>
 8012b20:	4603      	mov	r3, r0
 8012b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b26:	d001      	beq.n	8012b2c <find_volume+0x1b8>
 8012b28:	230d      	movs	r3, #13
 8012b2a:	e16c      	b.n	8012e06 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2e:	3334      	adds	r3, #52	; 0x34
 8012b30:	3316      	adds	r3, #22
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fe fbf6 	bl	8011324 <ld_word>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d106      	bne.n	8012b50 <find_volume+0x1dc>
 8012b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b44:	3334      	adds	r3, #52	; 0x34
 8012b46:	3324      	adds	r3, #36	; 0x24
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7fe fc03 	bl	8011354 <ld_dword>
 8012b4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b54:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b58:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b62:	789b      	ldrb	r3, [r3, #2]
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d005      	beq.n	8012b74 <find_volume+0x200>
 8012b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6a:	789b      	ldrb	r3, [r3, #2]
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d001      	beq.n	8012b74 <find_volume+0x200>
 8012b70:	230d      	movs	r3, #13
 8012b72:	e148      	b.n	8012e06 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b76:	789b      	ldrb	r3, [r3, #2]
 8012b78:	461a      	mov	r2, r3
 8012b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b7c:	fb02 f303 	mul.w	r3, r2, r3
 8012b80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012b88:	b29a      	uxth	r2, r3
 8012b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b90:	895b      	ldrh	r3, [r3, #10]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d008      	beq.n	8012ba8 <find_volume+0x234>
 8012b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b98:	895b      	ldrh	r3, [r3, #10]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9e:	895b      	ldrh	r3, [r3, #10]
 8012ba0:	3b01      	subs	r3, #1
 8012ba2:	4013      	ands	r3, r2
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d001      	beq.n	8012bac <find_volume+0x238>
 8012ba8:	230d      	movs	r3, #13
 8012baa:	e12c      	b.n	8012e06 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bae:	3334      	adds	r3, #52	; 0x34
 8012bb0:	3311      	adds	r3, #17
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7fe fbb6 	bl	8011324 <ld_word>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	461a      	mov	r2, r3
 8012bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc2:	891b      	ldrh	r3, [r3, #8]
 8012bc4:	f003 030f 	and.w	r3, r3, #15
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d001      	beq.n	8012bd2 <find_volume+0x25e>
 8012bce:	230d      	movs	r3, #13
 8012bd0:	e119      	b.n	8012e06 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd4:	3334      	adds	r3, #52	; 0x34
 8012bd6:	3313      	adds	r3, #19
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe fba3 	bl	8011324 <ld_word>
 8012bde:	4603      	mov	r3, r0
 8012be0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d106      	bne.n	8012bf6 <find_volume+0x282>
 8012be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bea:	3334      	adds	r3, #52	; 0x34
 8012bec:	3320      	adds	r3, #32
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fe fbb0 	bl	8011354 <ld_dword>
 8012bf4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf8:	3334      	adds	r3, #52	; 0x34
 8012bfa:	330e      	adds	r3, #14
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7fe fb91 	bl	8011324 <ld_word>
 8012c02:	4603      	mov	r3, r0
 8012c04:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012c06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d101      	bne.n	8012c10 <find_volume+0x29c>
 8012c0c:	230d      	movs	r3, #13
 8012c0e:	e0fa      	b.n	8012e06 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012c10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c14:	4413      	add	r3, r2
 8012c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c18:	8912      	ldrh	r2, [r2, #8]
 8012c1a:	0912      	lsrs	r2, r2, #4
 8012c1c:	b292      	uxth	r2, r2
 8012c1e:	4413      	add	r3, r2
 8012c20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d204      	bcs.n	8012c34 <find_volume+0x2c0>
 8012c2a:	230d      	movs	r3, #13
 8012c2c:	e0eb      	b.n	8012e06 <find_volume+0x492>
 8012c2e:	bf00      	nop
 8012c30:	20006804 	.word	0x20006804
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c38:	1ad3      	subs	r3, r2, r3
 8012c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c3c:	8952      	ldrh	r2, [r2, #10]
 8012c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c42:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d101      	bne.n	8012c4e <find_volume+0x2da>
 8012c4a:	230d      	movs	r3, #13
 8012c4c:	e0db      	b.n	8012e06 <find_volume+0x492>
		fmt = FS_FAT32;
 8012c4e:	2303      	movs	r3, #3
 8012c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d802      	bhi.n	8012c64 <find_volume+0x2f0>
 8012c5e:	2302      	movs	r3, #2
 8012c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d802      	bhi.n	8012c74 <find_volume+0x300>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c76:	1c9a      	adds	r2, r3, #2
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c80:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012c82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c86:	441a      	add	r2, r3
 8012c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012c8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c90:	441a      	add	r2, r3
 8012c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c94:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012c96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c9a:	2b03      	cmp	r3, #3
 8012c9c:	d11e      	bne.n	8012cdc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca0:	3334      	adds	r3, #52	; 0x34
 8012ca2:	332a      	adds	r3, #42	; 0x2a
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7fe fb3d 	bl	8011324 <ld_word>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d001      	beq.n	8012cb4 <find_volume+0x340>
 8012cb0:	230d      	movs	r3, #13
 8012cb2:	e0a8      	b.n	8012e06 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb6:	891b      	ldrh	r3, [r3, #8]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d001      	beq.n	8012cc0 <find_volume+0x34c>
 8012cbc:	230d      	movs	r3, #13
 8012cbe:	e0a2      	b.n	8012e06 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc2:	3334      	adds	r3, #52	; 0x34
 8012cc4:	332c      	adds	r3, #44	; 0x2c
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7fe fb44 	bl	8011354 <ld_dword>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd4:	699b      	ldr	r3, [r3, #24]
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8012cda:	e01f      	b.n	8012d1c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cde:	891b      	ldrh	r3, [r3, #8]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d101      	bne.n	8012ce8 <find_volume+0x374>
 8012ce4:	230d      	movs	r3, #13
 8012ce6:	e08e      	b.n	8012e06 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cee:	441a      	add	r2, r3
 8012cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cf8:	2b02      	cmp	r3, #2
 8012cfa:	d103      	bne.n	8012d04 <find_volume+0x390>
 8012cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfe:	699b      	ldr	r3, [r3, #24]
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	e00a      	b.n	8012d1a <find_volume+0x3a6>
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	699a      	ldr	r2, [r3, #24]
 8012d08:	4613      	mov	r3, r2
 8012d0a:	005b      	lsls	r3, r3, #1
 8012d0c:	4413      	add	r3, r2
 8012d0e:	085a      	lsrs	r2, r3, #1
 8012d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d12:	699b      	ldr	r3, [r3, #24]
 8012d14:	f003 0301 	and.w	r3, r3, #1
 8012d18:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012d1a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	69da      	ldr	r2, [r3, #28]
 8012d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d22:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012d26:	0a5b      	lsrs	r3, r3, #9
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d201      	bcs.n	8012d30 <find_volume+0x3bc>
 8012d2c:	230d      	movs	r3, #13
 8012d2e:	e06a      	b.n	8012e06 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d32:	f04f 32ff 	mov.w	r2, #4294967295
 8012d36:	615a      	str	r2, [r3, #20]
 8012d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3a:	695a      	ldr	r2, [r3, #20]
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d42:	2280      	movs	r2, #128	; 0x80
 8012d44:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d4a:	2b03      	cmp	r3, #3
 8012d4c:	d149      	bne.n	8012de2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d50:	3334      	adds	r3, #52	; 0x34
 8012d52:	3330      	adds	r3, #48	; 0x30
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7fe fae5 	bl	8011324 <ld_word>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	d140      	bne.n	8012de2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d62:	3301      	adds	r3, #1
 8012d64:	4619      	mov	r1, r3
 8012d66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d68:	f7fe fdbe 	bl	80118e8 <move_window>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d137      	bne.n	8012de2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8012d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d74:	2200      	movs	r2, #0
 8012d76:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7a:	3334      	adds	r3, #52	; 0x34
 8012d7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7fe facf 	bl	8011324 <ld_word>
 8012d86:	4603      	mov	r3, r0
 8012d88:	461a      	mov	r2, r3
 8012d8a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d127      	bne.n	8012de2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d94:	3334      	adds	r3, #52	; 0x34
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fe fadc 	bl	8011354 <ld_dword>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	4a1c      	ldr	r2, [pc, #112]	; (8012e10 <find_volume+0x49c>)
 8012da0:	4293      	cmp	r3, r2
 8012da2:	d11e      	bne.n	8012de2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da6:	3334      	adds	r3, #52	; 0x34
 8012da8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7fe fad1 	bl	8011354 <ld_dword>
 8012db2:	4603      	mov	r3, r0
 8012db4:	4a17      	ldr	r2, [pc, #92]	; (8012e14 <find_volume+0x4a0>)
 8012db6:	4293      	cmp	r3, r2
 8012db8:	d113      	bne.n	8012de2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dbc:	3334      	adds	r3, #52	; 0x34
 8012dbe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7fe fac6 	bl	8011354 <ld_dword>
 8012dc8:	4602      	mov	r2, r0
 8012dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dcc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd0:	3334      	adds	r3, #52	; 0x34
 8012dd2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7fe fabc 	bl	8011354 <ld_dword>
 8012ddc:	4602      	mov	r2, r0
 8012dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012de8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012dea:	4b0b      	ldr	r3, [pc, #44]	; (8012e18 <find_volume+0x4a4>)
 8012dec:	881b      	ldrh	r3, [r3, #0]
 8012dee:	3301      	adds	r3, #1
 8012df0:	b29a      	uxth	r2, r3
 8012df2:	4b09      	ldr	r3, [pc, #36]	; (8012e18 <find_volume+0x4a4>)
 8012df4:	801a      	strh	r2, [r3, #0]
 8012df6:	4b08      	ldr	r3, [pc, #32]	; (8012e18 <find_volume+0x4a4>)
 8012df8:	881a      	ldrh	r2, [r3, #0]
 8012dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012dfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e00:	f7fe fd0a 	bl	8011818 <clear_lock>
#endif
	return FR_OK;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3758      	adds	r7, #88	; 0x58
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
 8012e0e:	bf00      	nop
 8012e10:	41615252 	.word	0x41615252
 8012e14:	61417272 	.word	0x61417272
 8012e18:	20006808 	.word	0x20006808

08012e1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b084      	sub	sp, #16
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012e26:	2309      	movs	r3, #9
 8012e28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d02e      	beq.n	8012e8e <validate+0x72>
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d02a      	beq.n	8012e8e <validate+0x72>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d025      	beq.n	8012e8e <validate+0x72>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	889a      	ldrh	r2, [r3, #4]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	88db      	ldrh	r3, [r3, #6]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d11e      	bne.n	8012e8e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7fe fb65 	bl	8011524 <lock_fs>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d014      	beq.n	8012e8a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	785b      	ldrb	r3, [r3, #1]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fe f9be 	bl	80111e8 <disk_status>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	f003 0301 	and.w	r3, r3, #1
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d102      	bne.n	8012e7c <validate+0x60>
				res = FR_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	73fb      	strb	r3, [r7, #15]
 8012e7a:	e008      	b.n	8012e8e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2100      	movs	r1, #0
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fe fb64 	bl	8011550 <unlock_fs>
 8012e88:	e001      	b.n	8012e8e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012e8a:	230f      	movs	r3, #15
 8012e8c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012e8e:	7bfb      	ldrb	r3, [r7, #15]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d102      	bne.n	8012e9a <validate+0x7e>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	e000      	b.n	8012e9c <validate+0x80>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	683a      	ldr	r2, [r7, #0]
 8012e9e:	6013      	str	r3, [r2, #0]
	return res;
 8012ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3710      	adds	r7, #16
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
	...

08012eac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b088      	sub	sp, #32
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	60f8      	str	r0, [r7, #12]
 8012eb4:	60b9      	str	r1, [r7, #8]
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012ebe:	f107 0310 	add.w	r3, r7, #16
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7ff fcbb 	bl	801283e <get_ldnumber>
 8012ec8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012eca:	69fb      	ldr	r3, [r7, #28]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	da01      	bge.n	8012ed4 <f_mount+0x28>
 8012ed0:	230b      	movs	r3, #11
 8012ed2:	e048      	b.n	8012f66 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012ed4:	4a26      	ldr	r2, [pc, #152]	; (8012f70 <f_mount+0xc4>)
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012edc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012ede:	69bb      	ldr	r3, [r7, #24]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d00f      	beq.n	8012f04 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012ee4:	69b8      	ldr	r0, [r7, #24]
 8012ee6:	f7fe fc97 	bl	8011818 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	68db      	ldr	r3, [r3, #12]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f000 ffc3 	bl	8013e7a <ff_del_syncobj>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d101      	bne.n	8012efe <f_mount+0x52>
 8012efa:	2302      	movs	r3, #2
 8012efc:	e033      	b.n	8012f66 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	2200      	movs	r2, #0
 8012f02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d00f      	beq.n	8012f2a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012f10:	69fb      	ldr	r3, [r7, #28]
 8012f12:	b2da      	uxtb	r2, r3
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	330c      	adds	r3, #12
 8012f18:	4619      	mov	r1, r3
 8012f1a:	4610      	mov	r0, r2
 8012f1c:	f000 ff8d 	bl	8013e3a <ff_cre_syncobj>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d101      	bne.n	8012f2a <f_mount+0x7e>
 8012f26:	2302      	movs	r3, #2
 8012f28:	e01d      	b.n	8012f66 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012f2a:	68fa      	ldr	r2, [r7, #12]
 8012f2c:	4910      	ldr	r1, [pc, #64]	; (8012f70 <f_mount+0xc4>)
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d002      	beq.n	8012f40 <f_mount+0x94>
 8012f3a:	79fb      	ldrb	r3, [r7, #7]
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	d001      	beq.n	8012f44 <f_mount+0x98>
 8012f40:	2300      	movs	r3, #0
 8012f42:	e010      	b.n	8012f66 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012f44:	f107 010c 	add.w	r1, r7, #12
 8012f48:	f107 0308 	add.w	r3, r7, #8
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7ff fd10 	bl	8012974 <find_volume>
 8012f54:	4603      	mov	r3, r0
 8012f56:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	7dfa      	ldrb	r2, [r7, #23]
 8012f5c:	4611      	mov	r1, r2
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fe faf6 	bl	8011550 <unlock_fs>
 8012f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3720      	adds	r7, #32
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	20006804 	.word	0x20006804

08012f74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b098      	sub	sp, #96	; 0x60
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	4613      	mov	r3, r2
 8012f80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d101      	bne.n	8012f8c <f_open+0x18>
 8012f88:	2309      	movs	r3, #9
 8012f8a:	e1b4      	b.n	80132f6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012f8c:	79fb      	ldrb	r3, [r7, #7]
 8012f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012f94:	79fa      	ldrb	r2, [r7, #7]
 8012f96:	f107 0110 	add.w	r1, r7, #16
 8012f9a:	f107 0308 	add.w	r3, r7, #8
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7ff fce8 	bl	8012974 <find_volume>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012faa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	f040 8191 	bne.w	80132d6 <f_open+0x362>
		dj.obj.fs = fs;
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012fb8:	68ba      	ldr	r2, [r7, #8]
 8012fba:	f107 0314 	add.w	r3, r7, #20
 8012fbe:	4611      	mov	r1, r2
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7ff fbcb 	bl	801275c <follow_path>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d11a      	bne.n	801300a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012fd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012fd8:	b25b      	sxtb	r3, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	da03      	bge.n	8012fe6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012fde:	2306      	movs	r3, #6
 8012fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fe4:	e011      	b.n	801300a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012fe6:	79fb      	ldrb	r3, [r7, #7]
 8012fe8:	f023 0301 	bic.w	r3, r3, #1
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	bf14      	ite	ne
 8012ff0:	2301      	movne	r3, #1
 8012ff2:	2300      	moveq	r3, #0
 8012ff4:	b2db      	uxtb	r3, r3
 8012ff6:	461a      	mov	r2, r3
 8012ff8:	f107 0314 	add.w	r3, r7, #20
 8012ffc:	4611      	mov	r1, r2
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fe fac2 	bl	8011588 <chk_lock>
 8013004:	4603      	mov	r3, r0
 8013006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801300a:	79fb      	ldrb	r3, [r7, #7]
 801300c:	f003 031c 	and.w	r3, r3, #28
 8013010:	2b00      	cmp	r3, #0
 8013012:	d07f      	beq.n	8013114 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013018:	2b00      	cmp	r3, #0
 801301a:	d017      	beq.n	801304c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801301c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013020:	2b04      	cmp	r3, #4
 8013022:	d10e      	bne.n	8013042 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013024:	f7fe fb0c 	bl	8011640 <enq_lock>
 8013028:	4603      	mov	r3, r0
 801302a:	2b00      	cmp	r3, #0
 801302c:	d006      	beq.n	801303c <f_open+0xc8>
 801302e:	f107 0314 	add.w	r3, r7, #20
 8013032:	4618      	mov	r0, r3
 8013034:	f7ff fa4e 	bl	80124d4 <dir_register>
 8013038:	4603      	mov	r3, r0
 801303a:	e000      	b.n	801303e <f_open+0xca>
 801303c:	2312      	movs	r3, #18
 801303e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013042:	79fb      	ldrb	r3, [r7, #7]
 8013044:	f043 0308 	orr.w	r3, r3, #8
 8013048:	71fb      	strb	r3, [r7, #7]
 801304a:	e010      	b.n	801306e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801304c:	7ebb      	ldrb	r3, [r7, #26]
 801304e:	f003 0311 	and.w	r3, r3, #17
 8013052:	2b00      	cmp	r3, #0
 8013054:	d003      	beq.n	801305e <f_open+0xea>
					res = FR_DENIED;
 8013056:	2307      	movs	r3, #7
 8013058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801305c:	e007      	b.n	801306e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801305e:	79fb      	ldrb	r3, [r7, #7]
 8013060:	f003 0304 	and.w	r3, r3, #4
 8013064:	2b00      	cmp	r3, #0
 8013066:	d002      	beq.n	801306e <f_open+0xfa>
 8013068:	2308      	movs	r3, #8
 801306a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801306e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013072:	2b00      	cmp	r3, #0
 8013074:	d168      	bne.n	8013148 <f_open+0x1d4>
 8013076:	79fb      	ldrb	r3, [r7, #7]
 8013078:	f003 0308 	and.w	r3, r3, #8
 801307c:	2b00      	cmp	r3, #0
 801307e:	d063      	beq.n	8013148 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013080:	f7fa fbb6 	bl	800d7f0 <get_fattime>
 8013084:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013088:	330e      	adds	r3, #14
 801308a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801308c:	4618      	mov	r0, r3
 801308e:	f7fe f99f 	bl	80113d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013094:	3316      	adds	r3, #22
 8013096:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013098:	4618      	mov	r0, r3
 801309a:	f7fe f999 	bl	80113d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130a0:	330b      	adds	r3, #11
 80130a2:	2220      	movs	r2, #32
 80130a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130aa:	4611      	mov	r1, r2
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7ff f920 	bl	80122f2 <ld_clust>
 80130b2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80130b8:	2200      	movs	r2, #0
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7ff f938 	bl	8012330 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80130c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c2:	331c      	adds	r3, #28
 80130c4:	2100      	movs	r1, #0
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fe f982 	bl	80113d0 <st_dword>
					fs->wflag = 1;
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	2201      	movs	r2, #1
 80130d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80130d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d037      	beq.n	8013148 <f_open+0x1d4>
						dw = fs->winsect;
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130dc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80130de:	f107 0314 	add.w	r3, r7, #20
 80130e2:	2200      	movs	r2, #0
 80130e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fe fe4b 	bl	8011d82 <remove_chain>
 80130ec:	4603      	mov	r3, r0
 80130ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80130f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d126      	bne.n	8013148 <f_open+0x1d4>
							res = move_window(fs, dw);
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fe fbf2 	bl	80118e8 <move_window>
 8013104:	4603      	mov	r3, r0
 8013106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801310e:	3a01      	subs	r2, #1
 8013110:	611a      	str	r2, [r3, #16]
 8013112:	e019      	b.n	8013148 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013118:	2b00      	cmp	r3, #0
 801311a:	d115      	bne.n	8013148 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801311c:	7ebb      	ldrb	r3, [r7, #26]
 801311e:	f003 0310 	and.w	r3, r3, #16
 8013122:	2b00      	cmp	r3, #0
 8013124:	d003      	beq.n	801312e <f_open+0x1ba>
					res = FR_NO_FILE;
 8013126:	2304      	movs	r3, #4
 8013128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801312c:	e00c      	b.n	8013148 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801312e:	79fb      	ldrb	r3, [r7, #7]
 8013130:	f003 0302 	and.w	r3, r3, #2
 8013134:	2b00      	cmp	r3, #0
 8013136:	d007      	beq.n	8013148 <f_open+0x1d4>
 8013138:	7ebb      	ldrb	r3, [r7, #26]
 801313a:	f003 0301 	and.w	r3, r3, #1
 801313e:	2b00      	cmp	r3, #0
 8013140:	d002      	beq.n	8013148 <f_open+0x1d4>
						res = FR_DENIED;
 8013142:	2307      	movs	r3, #7
 8013144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801314c:	2b00      	cmp	r3, #0
 801314e:	d128      	bne.n	80131a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013150:	79fb      	ldrb	r3, [r7, #7]
 8013152:	f003 0308 	and.w	r3, r3, #8
 8013156:	2b00      	cmp	r3, #0
 8013158:	d003      	beq.n	8013162 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801315a:	79fb      	ldrb	r3, [r7, #7]
 801315c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013160:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801316a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013170:	79fb      	ldrb	r3, [r7, #7]
 8013172:	f023 0301 	bic.w	r3, r3, #1
 8013176:	2b00      	cmp	r3, #0
 8013178:	bf14      	ite	ne
 801317a:	2301      	movne	r3, #1
 801317c:	2300      	moveq	r3, #0
 801317e:	b2db      	uxtb	r3, r3
 8013180:	461a      	mov	r2, r3
 8013182:	f107 0314 	add.w	r3, r7, #20
 8013186:	4611      	mov	r1, r2
 8013188:	4618      	mov	r0, r3
 801318a:	f7fe fa7b 	bl	8011684 <inc_lock>
 801318e:	4602      	mov	r2, r0
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	691b      	ldr	r3, [r3, #16]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d102      	bne.n	80131a2 <f_open+0x22e>
 801319c:	2302      	movs	r3, #2
 801319e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80131a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	f040 8095 	bne.w	80132d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131b0:	4611      	mov	r1, r2
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7ff f89d 	bl	80122f2 <ld_clust>
 80131b8:	4602      	mov	r2, r0
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80131be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131c0:	331c      	adds	r3, #28
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7fe f8c6 	bl	8011354 <ld_dword>
 80131c8:	4602      	mov	r2, r0
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	2200      	movs	r2, #0
 80131d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80131d4:	693a      	ldr	r2, [r7, #16]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	88da      	ldrh	r2, [r3, #6]
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	79fa      	ldrb	r2, [r7, #7]
 80131e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2200      	movs	r2, #0
 80131ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2200      	movs	r2, #0
 80131f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2200      	movs	r2, #0
 80131f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	3330      	adds	r3, #48	; 0x30
 80131fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013202:	2100      	movs	r1, #0
 8013204:	4618      	mov	r0, r3
 8013206:	f7fe f930 	bl	801146a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801320a:	79fb      	ldrb	r3, [r7, #7]
 801320c:	f003 0320 	and.w	r3, r3, #32
 8013210:	2b00      	cmp	r3, #0
 8013212:	d060      	beq.n	80132d6 <f_open+0x362>
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d05c      	beq.n	80132d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	68da      	ldr	r2, [r3, #12]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	895b      	ldrh	r3, [r3, #10]
 8013228:	025b      	lsls	r3, r3, #9
 801322a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	689b      	ldr	r3, [r3, #8]
 8013230:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	657b      	str	r3, [r7, #84]	; 0x54
 8013238:	e016      	b.n	8013268 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801323e:	4618      	mov	r0, r3
 8013240:	f7fe fc0d 	bl	8011a5e <get_fat>
 8013244:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013248:	2b01      	cmp	r3, #1
 801324a:	d802      	bhi.n	8013252 <f_open+0x2de>
 801324c:	2302      	movs	r3, #2
 801324e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013258:	d102      	bne.n	8013260 <f_open+0x2ec>
 801325a:	2301      	movs	r3, #1
 801325c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013264:	1ad3      	subs	r3, r2, r3
 8013266:	657b      	str	r3, [r7, #84]	; 0x54
 8013268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801326c:	2b00      	cmp	r3, #0
 801326e:	d103      	bne.n	8013278 <f_open+0x304>
 8013270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013274:	429a      	cmp	r2, r3
 8013276:	d8e0      	bhi.n	801323a <f_open+0x2c6>
				}
				fp->clust = clst;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801327c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801327e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013282:	2b00      	cmp	r3, #0
 8013284:	d127      	bne.n	80132d6 <f_open+0x362>
 8013286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801328c:	2b00      	cmp	r3, #0
 801328e:	d022      	beq.n	80132d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013294:	4618      	mov	r0, r3
 8013296:	f7fe fbc3 	bl	8011a20 <clust2sect>
 801329a:	6478      	str	r0, [r7, #68]	; 0x44
 801329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d103      	bne.n	80132aa <f_open+0x336>
						res = FR_INT_ERR;
 80132a2:	2302      	movs	r3, #2
 80132a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80132a8:	e015      	b.n	80132d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80132aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132ac:	0a5a      	lsrs	r2, r3, #9
 80132ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132b0:	441a      	add	r2, r3
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	7858      	ldrb	r0, [r3, #1]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	6a1a      	ldr	r2, [r3, #32]
 80132c4:	2301      	movs	r3, #1
 80132c6:	f7fd ffcf 	bl	8011268 <disk_read>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <f_open+0x362>
 80132d0:	2301      	movs	r3, #1
 80132d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80132d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d002      	beq.n	80132e4 <f_open+0x370>
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2200      	movs	r2, #0
 80132e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80132ea:	4611      	mov	r1, r2
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7fe f92f 	bl	8011550 <unlock_fs>
 80132f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3760      	adds	r7, #96	; 0x60
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}

080132fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80132fe:	b580      	push	{r7, lr}
 8013300:	b08c      	sub	sp, #48	; 0x30
 8013302:	af00      	add	r7, sp, #0
 8013304:	60f8      	str	r0, [r7, #12]
 8013306:	60b9      	str	r1, [r7, #8]
 8013308:	607a      	str	r2, [r7, #4]
 801330a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	2200      	movs	r2, #0
 8013314:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f107 0210 	add.w	r2, r7, #16
 801331c:	4611      	mov	r1, r2
 801331e:	4618      	mov	r0, r3
 8013320:	f7ff fd7c 	bl	8012e1c <validate>
 8013324:	4603      	mov	r3, r0
 8013326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801332a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801332e:	2b00      	cmp	r3, #0
 8013330:	d107      	bne.n	8013342 <f_write+0x44>
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	7d5b      	ldrb	r3, [r3, #21]
 8013336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801333a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801333e:	2b00      	cmp	r3, #0
 8013340:	d009      	beq.n	8013356 <f_write+0x58>
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013348:	4611      	mov	r1, r2
 801334a:	4618      	mov	r0, r3
 801334c:	f7fe f900 	bl	8011550 <unlock_fs>
 8013350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013354:	e173      	b.n	801363e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	7d1b      	ldrb	r3, [r3, #20]
 801335a:	f003 0302 	and.w	r3, r3, #2
 801335e:	2b00      	cmp	r3, #0
 8013360:	d106      	bne.n	8013370 <f_write+0x72>
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	2107      	movs	r1, #7
 8013366:	4618      	mov	r0, r3
 8013368:	f7fe f8f2 	bl	8011550 <unlock_fs>
 801336c:	2307      	movs	r3, #7
 801336e:	e166      	b.n	801363e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	699a      	ldr	r2, [r3, #24]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	441a      	add	r2, r3
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	699b      	ldr	r3, [r3, #24]
 801337c:	429a      	cmp	r2, r3
 801337e:	f080 814b 	bcs.w	8013618 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	699b      	ldr	r3, [r3, #24]
 8013386:	43db      	mvns	r3, r3
 8013388:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801338a:	e145      	b.n	8013618 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	699b      	ldr	r3, [r3, #24]
 8013390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013394:	2b00      	cmp	r3, #0
 8013396:	f040 8101 	bne.w	801359c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	699b      	ldr	r3, [r3, #24]
 801339e:	0a5b      	lsrs	r3, r3, #9
 80133a0:	693a      	ldr	r2, [r7, #16]
 80133a2:	8952      	ldrh	r2, [r2, #10]
 80133a4:	3a01      	subs	r2, #1
 80133a6:	4013      	ands	r3, r2
 80133a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80133aa:	69bb      	ldr	r3, [r7, #24]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d14d      	bne.n	801344c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	699b      	ldr	r3, [r3, #24]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d10c      	bne.n	80133d2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	689b      	ldr	r3, [r3, #8]
 80133bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d11a      	bne.n	80133fa <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2100      	movs	r1, #0
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7fe fd3f 	bl	8011e4c <create_chain>
 80133ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80133d0:	e013      	b.n	80133fa <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d007      	beq.n	80133ea <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	699b      	ldr	r3, [r3, #24]
 80133de:	4619      	mov	r1, r3
 80133e0:	68f8      	ldr	r0, [r7, #12]
 80133e2:	f7fe fdcb 	bl	8011f7c <clmt_clust>
 80133e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80133e8:	e007      	b.n	80133fa <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80133ea:	68fa      	ldr	r2, [r7, #12]
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	69db      	ldr	r3, [r3, #28]
 80133f0:	4619      	mov	r1, r3
 80133f2:	4610      	mov	r0, r2
 80133f4:	f7fe fd2a 	bl	8011e4c <create_chain>
 80133f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80133fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	f000 8110 	beq.w	8013622 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013404:	2b01      	cmp	r3, #1
 8013406:	d109      	bne.n	801341c <f_write+0x11e>
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2202      	movs	r2, #2
 801340c:	755a      	strb	r2, [r3, #21]
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	2102      	movs	r1, #2
 8013412:	4618      	mov	r0, r3
 8013414:	f7fe f89c 	bl	8011550 <unlock_fs>
 8013418:	2302      	movs	r3, #2
 801341a:	e110      	b.n	801363e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013422:	d109      	bne.n	8013438 <f_write+0x13a>
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	2201      	movs	r2, #1
 8013428:	755a      	strb	r2, [r3, #21]
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	2101      	movs	r1, #1
 801342e:	4618      	mov	r0, r3
 8013430:	f7fe f88e 	bl	8011550 <unlock_fs>
 8013434:	2301      	movs	r3, #1
 8013436:	e102      	b.n	801363e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801343c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	689b      	ldr	r3, [r3, #8]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d102      	bne.n	801344c <f_write+0x14e>
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801344a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	7d1b      	ldrb	r3, [r3, #20]
 8013450:	b25b      	sxtb	r3, r3
 8013452:	2b00      	cmp	r3, #0
 8013454:	da1d      	bge.n	8013492 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	7858      	ldrb	r0, [r3, #1]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	6a1a      	ldr	r2, [r3, #32]
 8013464:	2301      	movs	r3, #1
 8013466:	f7fd ff1f 	bl	80112a8 <disk_write>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d009      	beq.n	8013484 <f_write+0x186>
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2201      	movs	r2, #1
 8013474:	755a      	strb	r2, [r3, #21]
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	2101      	movs	r1, #1
 801347a:	4618      	mov	r0, r3
 801347c:	f7fe f868 	bl	8011550 <unlock_fs>
 8013480:	2301      	movs	r3, #1
 8013482:	e0dc      	b.n	801363e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	7d1b      	ldrb	r3, [r3, #20]
 8013488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801348c:	b2da      	uxtb	r2, r3
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013492:	693a      	ldr	r2, [r7, #16]
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	69db      	ldr	r3, [r3, #28]
 8013498:	4619      	mov	r1, r3
 801349a:	4610      	mov	r0, r2
 801349c:	f7fe fac0 	bl	8011a20 <clust2sect>
 80134a0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d109      	bne.n	80134bc <f_write+0x1be>
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2202      	movs	r2, #2
 80134ac:	755a      	strb	r2, [r3, #21]
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	2102      	movs	r1, #2
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fe f84c 	bl	8011550 <unlock_fs>
 80134b8:	2302      	movs	r3, #2
 80134ba:	e0c0      	b.n	801363e <f_write+0x340>
			sect += csect;
 80134bc:	697a      	ldr	r2, [r7, #20]
 80134be:	69bb      	ldr	r3, [r7, #24]
 80134c0:	4413      	add	r3, r2
 80134c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	0a5b      	lsrs	r3, r3, #9
 80134c8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80134ca:	6a3b      	ldr	r3, [r7, #32]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d041      	beq.n	8013554 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80134d0:	69ba      	ldr	r2, [r7, #24]
 80134d2:	6a3b      	ldr	r3, [r7, #32]
 80134d4:	4413      	add	r3, r2
 80134d6:	693a      	ldr	r2, [r7, #16]
 80134d8:	8952      	ldrh	r2, [r2, #10]
 80134da:	4293      	cmp	r3, r2
 80134dc:	d905      	bls.n	80134ea <f_write+0x1ec>
					cc = fs->csize - csect;
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	895b      	ldrh	r3, [r3, #10]
 80134e2:	461a      	mov	r2, r3
 80134e4:	69bb      	ldr	r3, [r7, #24]
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	7858      	ldrb	r0, [r3, #1]
 80134ee:	6a3b      	ldr	r3, [r7, #32]
 80134f0:	697a      	ldr	r2, [r7, #20]
 80134f2:	69f9      	ldr	r1, [r7, #28]
 80134f4:	f7fd fed8 	bl	80112a8 <disk_write>
 80134f8:	4603      	mov	r3, r0
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d009      	beq.n	8013512 <f_write+0x214>
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2201      	movs	r2, #1
 8013502:	755a      	strb	r2, [r3, #21]
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	2101      	movs	r1, #1
 8013508:	4618      	mov	r0, r3
 801350a:	f7fe f821 	bl	8011550 <unlock_fs>
 801350e:	2301      	movs	r3, #1
 8013510:	e095      	b.n	801363e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	6a1a      	ldr	r2, [r3, #32]
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	6a3a      	ldr	r2, [r7, #32]
 801351c:	429a      	cmp	r2, r3
 801351e:	d915      	bls.n	801354c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	6a1a      	ldr	r2, [r3, #32]
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	025b      	lsls	r3, r3, #9
 8013530:	69fa      	ldr	r2, [r7, #28]
 8013532:	4413      	add	r3, r2
 8013534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013538:	4619      	mov	r1, r3
 801353a:	f7fd ff75 	bl	8011428 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	7d1b      	ldrb	r3, [r3, #20]
 8013542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013546:	b2da      	uxtb	r2, r3
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801354c:	6a3b      	ldr	r3, [r7, #32]
 801354e:	025b      	lsls	r3, r3, #9
 8013550:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013552:	e044      	b.n	80135de <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6a1b      	ldr	r3, [r3, #32]
 8013558:	697a      	ldr	r2, [r7, #20]
 801355a:	429a      	cmp	r2, r3
 801355c:	d01b      	beq.n	8013596 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	699a      	ldr	r2, [r3, #24]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013566:	429a      	cmp	r2, r3
 8013568:	d215      	bcs.n	8013596 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	7858      	ldrb	r0, [r3, #1]
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013574:	2301      	movs	r3, #1
 8013576:	697a      	ldr	r2, [r7, #20]
 8013578:	f7fd fe76 	bl	8011268 <disk_read>
 801357c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801357e:	2b00      	cmp	r3, #0
 8013580:	d009      	beq.n	8013596 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	2201      	movs	r2, #1
 8013586:	755a      	strb	r2, [r3, #21]
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	2101      	movs	r1, #1
 801358c:	4618      	mov	r0, r3
 801358e:	f7fd ffdf 	bl	8011550 <unlock_fs>
 8013592:	2301      	movs	r3, #1
 8013594:	e053      	b.n	801363e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	697a      	ldr	r2, [r7, #20]
 801359a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	699b      	ldr	r3, [r3, #24]
 80135a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80135a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80135aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d901      	bls.n	80135b6 <f_write+0x2b8>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	699b      	ldr	r3, [r3, #24]
 80135c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135c4:	4413      	add	r3, r2
 80135c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135c8:	69f9      	ldr	r1, [r7, #28]
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7fd ff2c 	bl	8011428 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	7d1b      	ldrb	r3, [r3, #20]
 80135d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80135d8:	b2da      	uxtb	r2, r3
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80135de:	69fa      	ldr	r2, [r7, #28]
 80135e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e2:	4413      	add	r3, r2
 80135e4:	61fb      	str	r3, [r7, #28]
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	699a      	ldr	r2, [r3, #24]
 80135ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ec:	441a      	add	r2, r3
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	619a      	str	r2, [r3, #24]
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	68da      	ldr	r2, [r3, #12]
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	699b      	ldr	r3, [r3, #24]
 80135fa:	429a      	cmp	r2, r3
 80135fc:	bf38      	it	cc
 80135fe:	461a      	movcc	r2, r3
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	60da      	str	r2, [r3, #12]
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801360a:	441a      	add	r2, r3
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	601a      	str	r2, [r3, #0]
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013614:	1ad3      	subs	r3, r2, r3
 8013616:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	f47f aeb6 	bne.w	801338c <f_write+0x8e>
 8013620:	e000      	b.n	8013624 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013622:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	7d1b      	ldrb	r3, [r3, #20]
 8013628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801362c:	b2da      	uxtb	r2, r3
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	2100      	movs	r1, #0
 8013636:	4618      	mov	r0, r3
 8013638:	f7fd ff8a 	bl	8011550 <unlock_fs>
 801363c:	2300      	movs	r3, #0
}
 801363e:	4618      	mov	r0, r3
 8013640:	3730      	adds	r7, #48	; 0x30
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b086      	sub	sp, #24
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f107 0208 	add.w	r2, r7, #8
 8013654:	4611      	mov	r1, r2
 8013656:	4618      	mov	r0, r3
 8013658:	f7ff fbe0 	bl	8012e1c <validate>
 801365c:	4603      	mov	r3, r0
 801365e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013660:	7dfb      	ldrb	r3, [r7, #23]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d16d      	bne.n	8013742 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	7d1b      	ldrb	r3, [r3, #20]
 801366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801366e:	2b00      	cmp	r3, #0
 8013670:	d067      	beq.n	8013742 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	7d1b      	ldrb	r3, [r3, #20]
 8013676:	b25b      	sxtb	r3, r3
 8013678:	2b00      	cmp	r3, #0
 801367a:	da1a      	bge.n	80136b2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	7858      	ldrb	r0, [r3, #1]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6a1a      	ldr	r2, [r3, #32]
 801368a:	2301      	movs	r3, #1
 801368c:	f7fd fe0c 	bl	80112a8 <disk_write>
 8013690:	4603      	mov	r3, r0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d006      	beq.n	80136a4 <f_sync+0x5e>
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2101      	movs	r1, #1
 801369a:	4618      	mov	r0, r3
 801369c:	f7fd ff58 	bl	8011550 <unlock_fs>
 80136a0:	2301      	movs	r3, #1
 80136a2:	e055      	b.n	8013750 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	7d1b      	ldrb	r3, [r3, #20]
 80136a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136ac:	b2da      	uxtb	r2, r3
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80136b2:	f7fa f89d 	bl	800d7f0 <get_fattime>
 80136b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80136b8:	68ba      	ldr	r2, [r7, #8]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136be:	4619      	mov	r1, r3
 80136c0:	4610      	mov	r0, r2
 80136c2:	f7fe f911 	bl	80118e8 <move_window>
 80136c6:	4603      	mov	r3, r0
 80136c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80136ca:	7dfb      	ldrb	r3, [r7, #23]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d138      	bne.n	8013742 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	330b      	adds	r3, #11
 80136da:	781a      	ldrb	r2, [r3, #0]
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	330b      	adds	r3, #11
 80136e0:	f042 0220 	orr.w	r2, r2, #32
 80136e4:	b2d2      	uxtb	r2, r2
 80136e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6818      	ldr	r0, [r3, #0]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	689b      	ldr	r3, [r3, #8]
 80136f0:	461a      	mov	r2, r3
 80136f2:	68f9      	ldr	r1, [r7, #12]
 80136f4:	f7fe fe1c 	bl	8012330 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f103 021c 	add.w	r2, r3, #28
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	4619      	mov	r1, r3
 8013704:	4610      	mov	r0, r2
 8013706:	f7fd fe63 	bl	80113d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	3316      	adds	r3, #22
 801370e:	6939      	ldr	r1, [r7, #16]
 8013710:	4618      	mov	r0, r3
 8013712:	f7fd fe5d 	bl	80113d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	3312      	adds	r3, #18
 801371a:	2100      	movs	r1, #0
 801371c:	4618      	mov	r0, r3
 801371e:	f7fd fe3c 	bl	801139a <st_word>
					fs->wflag = 1;
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	2201      	movs	r2, #1
 8013726:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	4618      	mov	r0, r3
 801372c:	f7fe f90a 	bl	8011944 <sync_fs>
 8013730:	4603      	mov	r3, r0
 8013732:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	7d1b      	ldrb	r3, [r3, #20]
 8013738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801373c:	b2da      	uxtb	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	7dfa      	ldrb	r2, [r7, #23]
 8013746:	4611      	mov	r1, r2
 8013748:	4618      	mov	r0, r3
 801374a:	f7fd ff01 	bl	8011550 <unlock_fs>
 801374e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013750:	4618      	mov	r0, r3
 8013752:	3718      	adds	r7, #24
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f7ff ff70 	bl	8013646 <f_sync>
 8013766:	4603      	mov	r3, r0
 8013768:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801376a:	7bfb      	ldrb	r3, [r7, #15]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d11d      	bne.n	80137ac <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f107 0208 	add.w	r2, r7, #8
 8013776:	4611      	mov	r1, r2
 8013778:	4618      	mov	r0, r3
 801377a:	f7ff fb4f 	bl	8012e1c <validate>
 801377e:	4603      	mov	r3, r0
 8013780:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013782:	7bfb      	ldrb	r3, [r7, #15]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d111      	bne.n	80137ac <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	691b      	ldr	r3, [r3, #16]
 801378c:	4618      	mov	r0, r3
 801378e:	f7fe f807 	bl	80117a0 <dec_lock>
 8013792:	4603      	mov	r3, r0
 8013794:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013796:	7bfb      	ldrb	r3, [r7, #15]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d102      	bne.n	80137a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2200      	movs	r2, #0
 80137a0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	2100      	movs	r1, #0
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fd fed2 	bl	8011550 <unlock_fs>
#endif
		}
	}
	return res;
 80137ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b086      	sub	sp, #24
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
 80137be:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d101      	bne.n	80137ca <f_opendir+0x14>
 80137c6:	2309      	movs	r3, #9
 80137c8:	e06a      	b.n	80138a0 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80137ce:	f107 010c 	add.w	r1, r7, #12
 80137d2:	463b      	mov	r3, r7
 80137d4:	2200      	movs	r2, #0
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7ff f8cc 	bl	8012974 <find_volume>
 80137dc:	4603      	mov	r3, r0
 80137de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80137e0:	7dfb      	ldrb	r3, [r7, #23]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d14f      	bne.n	8013886 <f_opendir+0xd0>
		obj->fs = fs;
 80137e6:	68fa      	ldr	r2, [r7, #12]
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	4619      	mov	r1, r3
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7fe ffb3 	bl	801275c <follow_path>
 80137f6:	4603      	mov	r3, r0
 80137f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80137fa:	7dfb      	ldrb	r3, [r7, #23]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d13d      	bne.n	801387c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013806:	b25b      	sxtb	r3, r3
 8013808:	2b00      	cmp	r3, #0
 801380a:	db12      	blt.n	8013832 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	799b      	ldrb	r3, [r3, #6]
 8013810:	f003 0310 	and.w	r3, r3, #16
 8013814:	2b00      	cmp	r3, #0
 8013816:	d00a      	beq.n	801382e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013818:	68fa      	ldr	r2, [r7, #12]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6a1b      	ldr	r3, [r3, #32]
 801381e:	4619      	mov	r1, r3
 8013820:	4610      	mov	r0, r2
 8013822:	f7fe fd66 	bl	80122f2 <ld_clust>
 8013826:	4602      	mov	r2, r0
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	609a      	str	r2, [r3, #8]
 801382c:	e001      	b.n	8013832 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801382e:	2305      	movs	r3, #5
 8013830:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013832:	7dfb      	ldrb	r3, [r7, #23]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d121      	bne.n	801387c <f_opendir+0xc6>
				obj->id = fs->id;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	88da      	ldrh	r2, [r3, #6]
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013840:	2100      	movs	r1, #0
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7fe fbce 	bl	8011fe4 <dir_sdi>
 8013848:	4603      	mov	r3, r0
 801384a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801384c:	7dfb      	ldrb	r3, [r7, #23]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d114      	bne.n	801387c <f_opendir+0xc6>
					if (obj->sclust) {
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d00d      	beq.n	8013876 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801385a:	2100      	movs	r1, #0
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f7fd ff11 	bl	8011684 <inc_lock>
 8013862:	4602      	mov	r2, r0
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	691b      	ldr	r3, [r3, #16]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d105      	bne.n	801387c <f_opendir+0xc6>
 8013870:	2312      	movs	r3, #18
 8013872:	75fb      	strb	r3, [r7, #23]
 8013874:	e002      	b.n	801387c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	2200      	movs	r2, #0
 801387a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801387c:	7dfb      	ldrb	r3, [r7, #23]
 801387e:	2b04      	cmp	r3, #4
 8013880:	d101      	bne.n	8013886 <f_opendir+0xd0>
 8013882:	2305      	movs	r3, #5
 8013884:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013886:	7dfb      	ldrb	r3, [r7, #23]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d002      	beq.n	8013892 <f_opendir+0xdc>
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	2200      	movs	r2, #0
 8013890:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	7dfa      	ldrb	r2, [r7, #23]
 8013896:	4611      	mov	r1, r2
 8013898:	4618      	mov	r0, r3
 801389a:	f7fd fe59 	bl	8011550 <unlock_fs>
 801389e:	7dfb      	ldrb	r3, [r7, #23]
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3718      	adds	r7, #24
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b084      	sub	sp, #16
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f107 0208 	add.w	r2, r7, #8
 80138b6:	4611      	mov	r1, r2
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7ff faaf 	bl	8012e1c <validate>
 80138be:	4603      	mov	r3, r0
 80138c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80138c2:	7bfb      	ldrb	r3, [r7, #15]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d115      	bne.n	80138f4 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	691b      	ldr	r3, [r3, #16]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d006      	beq.n	80138de <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	691b      	ldr	r3, [r3, #16]
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7fd ff63 	bl	80117a0 <dec_lock>
 80138da:	4603      	mov	r3, r0
 80138dc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80138de:	7bfb      	ldrb	r3, [r7, #15]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d102      	bne.n	80138ea <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	2200      	movs	r2, #0
 80138e8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	2100      	movs	r1, #0
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7fd fe2e 	bl	8011550 <unlock_fs>
#endif
	}
	return res;
 80138f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3710      	adds	r7, #16
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}

080138fe <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80138fe:	b580      	push	{r7, lr}
 8013900:	b084      	sub	sp, #16
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
 8013906:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f107 0208 	add.w	r2, r7, #8
 801390e:	4611      	mov	r1, r2
 8013910:	4618      	mov	r0, r3
 8013912:	f7ff fa83 	bl	8012e1c <validate>
 8013916:	4603      	mov	r3, r0
 8013918:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801391a:	7bfb      	ldrb	r3, [r7, #15]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d126      	bne.n	801396e <f_readdir+0x70>
		if (!fno) {
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d106      	bne.n	8013934 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013926:	2100      	movs	r1, #0
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7fe fb5b 	bl	8011fe4 <dir_sdi>
 801392e:	4603      	mov	r3, r0
 8013930:	73fb      	strb	r3, [r7, #15]
 8013932:	e01c      	b.n	801396e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8013934:	2100      	movs	r1, #0
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7fe fd1a 	bl	8012370 <dir_read>
 801393c:	4603      	mov	r3, r0
 801393e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013940:	7bfb      	ldrb	r3, [r7, #15]
 8013942:	2b04      	cmp	r3, #4
 8013944:	d101      	bne.n	801394a <f_readdir+0x4c>
 8013946:	2300      	movs	r3, #0
 8013948:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801394a:	7bfb      	ldrb	r3, [r7, #15]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d10e      	bne.n	801396e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013950:	6839      	ldr	r1, [r7, #0]
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f7fe fe0e 	bl	8012574 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013958:	2100      	movs	r1, #0
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f7fe fbbd 	bl	80120da <dir_next>
 8013960:	4603      	mov	r3, r0
 8013962:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013964:	7bfb      	ldrb	r3, [r7, #15]
 8013966:	2b04      	cmp	r3, #4
 8013968:	d101      	bne.n	801396e <f_readdir+0x70>
 801396a:	2300      	movs	r3, #0
 801396c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	7bfa      	ldrb	r2, [r7, #15]
 8013972:	4611      	mov	r1, r2
 8013974:	4618      	mov	r0, r3
 8013976:	f7fd fdeb 	bl	8011550 <unlock_fs>
 801397a:	7bfb      	ldrb	r3, [r7, #15]
}
 801397c:	4618      	mov	r0, r3
 801397e:	3710      	adds	r7, #16
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b090      	sub	sp, #64	; 0x40
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801398e:	f107 010c 	add.w	r1, r7, #12
 8013992:	1d3b      	adds	r3, r7, #4
 8013994:	2200      	movs	r2, #0
 8013996:	4618      	mov	r0, r3
 8013998:	f7fe ffec 	bl	8012974 <find_volume>
 801399c:	4603      	mov	r3, r0
 801399e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80139a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d11f      	bne.n	80139ea <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	f107 030c 	add.w	r3, r7, #12
 80139b0:	4611      	mov	r1, r2
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7fe fed2 	bl	801275c <follow_path>
 80139b8:	4603      	mov	r3, r0
 80139ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80139be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d111      	bne.n	80139ea <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80139c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80139ca:	b25b      	sxtb	r3, r3
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	da03      	bge.n	80139d8 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80139d0:	2306      	movs	r3, #6
 80139d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80139d6:	e008      	b.n	80139ea <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d005      	beq.n	80139ea <f_stat+0x66>
 80139de:	f107 030c 	add.w	r3, r7, #12
 80139e2:	6839      	ldr	r1, [r7, #0]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fe fdc5 	bl	8012574 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80139f0:	4611      	mov	r1, r2
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fd fdac 	bl	8011550 <unlock_fs>
 80139f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3740      	adds	r7, #64	; 0x40
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b09e      	sub	sp, #120	; 0x78
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013a10:	f107 010c 	add.w	r1, r7, #12
 8013a14:	1d3b      	adds	r3, r7, #4
 8013a16:	2202      	movs	r2, #2
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7fe ffab 	bl	8012974 <find_volume>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013a28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	f040 808e 	bne.w	8013b4e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a38:	4611      	mov	r1, r2
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7fe fe8e 	bl	801275c <follow_path>
 8013a40:	4603      	mov	r3, r0
 8013a42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013a46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d108      	bne.n	8013a60 <f_unlink+0x5c>
 8013a4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a52:	2102      	movs	r1, #2
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7fd fd97 	bl	8011588 <chk_lock>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013a60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d172      	bne.n	8013b4e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013a68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013a6c:	b25b      	sxtb	r3, r3
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	da03      	bge.n	8013a7a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013a72:	2306      	movs	r3, #6
 8013a74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013a78:	e008      	b.n	8013a8c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013a7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013a7e:	f003 0301 	and.w	r3, r3, #1
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d002      	beq.n	8013a8c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013a86:	2307      	movs	r3, #7
 8013a88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013a8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d134      	bne.n	8013afe <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013a98:	4611      	mov	r1, r2
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fe fc29 	bl	80122f2 <ld_clust>
 8013aa0:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013aa2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013aa6:	f003 0310 	and.w	r3, r3, #16
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d027      	beq.n	8013afe <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013ab4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013ab6:	f107 0310 	add.w	r3, r7, #16
 8013aba:	2100      	movs	r1, #0
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7fe fa91 	bl	8011fe4 <dir_sdi>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013ac8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d116      	bne.n	8013afe <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013ad0:	f107 0310 	add.w	r3, r7, #16
 8013ad4:	2100      	movs	r1, #0
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7fe fc4a 	bl	8012370 <dir_read>
 8013adc:	4603      	mov	r3, r0
 8013ade:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013ae2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d102      	bne.n	8013af0 <f_unlink+0xec>
 8013aea:	2307      	movs	r3, #7
 8013aec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013af0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013af4:	2b04      	cmp	r3, #4
 8013af6:	d102      	bne.n	8013afe <f_unlink+0xfa>
 8013af8:	2300      	movs	r3, #0
 8013afa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013afe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d123      	bne.n	8013b4e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7fe fd14 	bl	8012538 <dir_remove>
 8013b10:	4603      	mov	r3, r0
 8013b12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013b16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d10c      	bne.n	8013b38 <f_unlink+0x134>
 8013b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d009      	beq.n	8013b38 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b28:	2200      	movs	r2, #0
 8013b2a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7fe f928 	bl	8011d82 <remove_chain>
 8013b32:	4603      	mov	r3, r0
 8013b34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013b38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d106      	bne.n	8013b4e <f_unlink+0x14a>
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7fd fefe 	bl	8011944 <sync_fs>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8013b54:	4611      	mov	r1, r2
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7fd fcfa 	bl	8011550 <unlock_fs>
 8013b5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3778      	adds	r7, #120	; 0x78
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b096      	sub	sp, #88	; 0x58
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013b70:	f107 0108 	add.w	r1, r7, #8
 8013b74:	1d3b      	adds	r3, r7, #4
 8013b76:	2202      	movs	r2, #2
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fe fefb 	bl	8012974 <find_volume>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f040 80ec 	bne.w	8013d6a <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013b92:	687a      	ldr	r2, [r7, #4]
 8013b94:	f107 030c 	add.w	r3, r7, #12
 8013b98:	4611      	mov	r1, r2
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fe fdde 	bl	801275c <follow_path>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013ba6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d102      	bne.n	8013bb4 <f_mkdir+0x4c>
 8013bae:	2308      	movs	r3, #8
 8013bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bb8:	2b04      	cmp	r3, #4
 8013bba:	f040 80d6 	bne.w	8013d6a <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013bbe:	f107 030c 	add.w	r3, r7, #12
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fe f941 	bl	8011e4c <create_chain>
 8013bca:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	895b      	ldrh	r3, [r3, #10]
 8013bd0:	025b      	lsls	r3, r3, #9
 8013bd2:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d102      	bne.n	8013be6 <f_mkdir+0x7e>
 8013be0:	2307      	movs	r3, #7
 8013be2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013be8:	2b01      	cmp	r3, #1
 8013bea:	d102      	bne.n	8013bf2 <f_mkdir+0x8a>
 8013bec:	2302      	movs	r3, #2
 8013bee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf8:	d102      	bne.n	8013c00 <f_mkdir+0x98>
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013c00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d106      	bne.n	8013c16 <f_mkdir+0xae>
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fd fe28 	bl	8011860 <sync_window>
 8013c10:	4603      	mov	r3, r0
 8013c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013c16:	f7f9 fdeb 	bl	800d7f0 <get_fattime>
 8013c1a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d16a      	bne.n	8013cfa <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fd fef9 	bl	8011a20 <clust2sect>
 8013c2e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	3334      	adds	r3, #52	; 0x34
 8013c34:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c3a:	2100      	movs	r1, #0
 8013c3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013c3e:	f7fd fc14 	bl	801146a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013c42:	220b      	movs	r2, #11
 8013c44:	2120      	movs	r1, #32
 8013c46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013c48:	f7fd fc0f 	bl	801146a <mem_set>
					dir[DIR_Name] = '.';
 8013c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c4e:	222e      	movs	r2, #46	; 0x2e
 8013c50:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c54:	330b      	adds	r3, #11
 8013c56:	2210      	movs	r2, #16
 8013c58:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c5c:	3316      	adds	r3, #22
 8013c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7fd fbb5 	bl	80113d0 <st_dword>
					st_clust(fs, dir, dcl);
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7fe fb5f 	bl	8012330 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c74:	3320      	adds	r3, #32
 8013c76:	2220      	movs	r2, #32
 8013c78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7fd fbd4 	bl	8011428 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c82:	3321      	adds	r3, #33	; 0x21
 8013c84:	222e      	movs	r2, #46	; 0x2e
 8013c86:	701a      	strb	r2, [r3, #0]
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	2b03      	cmp	r3, #3
 8013c92:	d106      	bne.n	8013ca2 <f_mkdir+0x13a>
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d101      	bne.n	8013ca2 <f_mkdir+0x13a>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013ca2:	68b8      	ldr	r0, [r7, #8]
 8013ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ca6:	3320      	adds	r3, #32
 8013ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013caa:	4619      	mov	r1, r3
 8013cac:	f7fe fb40 	bl	8012330 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	895b      	ldrh	r3, [r3, #10]
 8013cb4:	653b      	str	r3, [r7, #80]	; 0x50
 8013cb6:	e01b      	b.n	8013cf0 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8013cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cba:	1c5a      	adds	r2, r3, #1
 8013cbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013cbe:	68ba      	ldr	r2, [r7, #8]
 8013cc0:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	2201      	movs	r2, #1
 8013cc6:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7fd fdc8 	bl	8011860 <sync_window>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d10c      	bne.n	8013cf8 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ce2:	2100      	movs	r1, #0
 8013ce4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ce6:	f7fd fbc0 	bl	801146a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cec:	3b01      	subs	r3, #1
 8013cee:	653b      	str	r3, [r7, #80]	; 0x50
 8013cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d1e0      	bne.n	8013cb8 <f_mkdir+0x150>
 8013cf6:	e000      	b.n	8013cfa <f_mkdir+0x192>
					if (res != FR_OK) break;
 8013cf8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013cfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d107      	bne.n	8013d12 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013d02:	f107 030c 	add.w	r3, r7, #12
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7fe fbe4 	bl	80124d4 <dir_register>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d120      	bne.n	8013d5c <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d20:	3316      	adds	r3, #22
 8013d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7fd fb53 	bl	80113d0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fe fafd 	bl	8012330 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d38:	330b      	adds	r3, #11
 8013d3a:	2210      	movs	r2, #16
 8013d3c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	2201      	movs	r2, #1
 8013d42:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013d44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d10e      	bne.n	8013d6a <f_mkdir+0x202>
					res = sync_fs(fs);
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fd fdf8 	bl	8011944 <sync_fs>
 8013d54:	4603      	mov	r3, r0
 8013d56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013d5a:	e006      	b.n	8013d6a <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013d5c:	f107 030c 	add.w	r3, r7, #12
 8013d60:	2200      	movs	r2, #0
 8013d62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fe f80c 	bl	8011d82 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013d70:	4611      	mov	r1, r2
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7fd fbec 	bl	8011550 <unlock_fs>
 8013d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3758      	adds	r7, #88	; 0x58
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013d84:	b480      	push	{r7}
 8013d86:	b087      	sub	sp, #28
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	4613      	mov	r3, r2
 8013d90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013d92:	2301      	movs	r3, #1
 8013d94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013d96:	2300      	movs	r3, #0
 8013d98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013d9a:	4b1f      	ldr	r3, [pc, #124]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013d9c:	7a5b      	ldrb	r3, [r3, #9]
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d131      	bne.n	8013e08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013da4:	4b1c      	ldr	r3, [pc, #112]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013da6:	7a5b      	ldrb	r3, [r3, #9]
 8013da8:	b2db      	uxtb	r3, r3
 8013daa:	461a      	mov	r2, r3
 8013dac:	4b1a      	ldr	r3, [pc, #104]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013dae:	2100      	movs	r1, #0
 8013db0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013db2:	4b19      	ldr	r3, [pc, #100]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013db4:	7a5b      	ldrb	r3, [r3, #9]
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	4a17      	ldr	r2, [pc, #92]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	4413      	add	r3, r2
 8013dbe:	68fa      	ldr	r2, [r7, #12]
 8013dc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013dc2:	4b15      	ldr	r3, [pc, #84]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013dc4:	7a5b      	ldrb	r3, [r3, #9]
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	461a      	mov	r2, r3
 8013dca:	4b13      	ldr	r3, [pc, #76]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013dcc:	4413      	add	r3, r2
 8013dce:	79fa      	ldrb	r2, [r7, #7]
 8013dd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013dd2:	4b11      	ldr	r3, [pc, #68]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013dd4:	7a5b      	ldrb	r3, [r3, #9]
 8013dd6:	b2db      	uxtb	r3, r3
 8013dd8:	1c5a      	adds	r2, r3, #1
 8013dda:	b2d1      	uxtb	r1, r2
 8013ddc:	4a0e      	ldr	r2, [pc, #56]	; (8013e18 <FATFS_LinkDriverEx+0x94>)
 8013dde:	7251      	strb	r1, [r2, #9]
 8013de0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013de2:	7dbb      	ldrb	r3, [r7, #22]
 8013de4:	3330      	adds	r3, #48	; 0x30
 8013de6:	b2da      	uxtb	r2, r3
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	3301      	adds	r3, #1
 8013df0:	223a      	movs	r2, #58	; 0x3a
 8013df2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	3302      	adds	r3, #2
 8013df8:	222f      	movs	r2, #47	; 0x2f
 8013dfa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	3303      	adds	r3, #3
 8013e00:	2200      	movs	r2, #0
 8013e02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013e04:	2300      	movs	r3, #0
 8013e06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	371c      	adds	r7, #28
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr
 8013e16:	bf00      	nop
 8013e18:	2000682c 	.word	0x2000682c

08013e1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013e26:	2200      	movs	r2, #0
 8013e28:	6839      	ldr	r1, [r7, #0]
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f7ff ffaa 	bl	8013d84 <FATFS_LinkDriverEx>
 8013e30:	4603      	mov	r3, r0
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3708      	adds	r7, #8
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}

08013e3a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8013e3a:	b580      	push	{r7, lr}
 8013e3c:	b086      	sub	sp, #24
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	4603      	mov	r3, r0
 8013e42:	6039      	str	r1, [r7, #0]
 8013e44:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8013e46:	2300      	movs	r3, #0
 8013e48:	60fb      	str	r3, [r7, #12]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013e4e:	f107 030c 	add.w	r3, r7, #12
 8013e52:	2101      	movs	r1, #1
 8013e54:	4618      	mov	r0, r3
 8013e56:	f000 f8e9 	bl	801402c <osSemaphoreCreate>
 8013e5a:	4602      	mov	r2, r0
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	bf14      	ite	ne
 8013e68:	2301      	movne	r3, #1
 8013e6a:	2300      	moveq	r3, #0
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	617b      	str	r3, [r7, #20]

    return ret;
 8013e70:	697b      	ldr	r3, [r7, #20]
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3718      	adds	r7, #24
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}

08013e7a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8013e7a:	b580      	push	{r7, lr}
 8013e7c:	b082      	sub	sp, #8
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f000 f988 	bl	8014198 <osSemaphoreDelete>
#endif
    return 1;
 8013e88:	2301      	movs	r3, #1
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3708      	adds	r7, #8
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b084      	sub	sp, #16
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8013e9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 f8f4 	bl	8014090 <osSemaphoreWait>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d101      	bne.n	8013eb2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8013eae:	2301      	movs	r3, #1
 8013eb0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3710      	adds	r7, #16
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f000 f931 	bl	801412c <osSemaphoreRelease>
#endif
}
 8013eca:	bf00      	nop
 8013ecc:	3708      	adds	r7, #8
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}

08013ed2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013ed2:	b480      	push	{r7}
 8013ed4:	b085      	sub	sp, #20
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	4603      	mov	r3, r0
 8013eda:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013edc:	2300      	movs	r3, #0
 8013ede:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ee4:	2b84      	cmp	r3, #132	; 0x84
 8013ee6:	d005      	beq.n	8013ef4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013ee8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	4413      	add	r3, r2
 8013ef0:	3303      	adds	r3, #3
 8013ef2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3714      	adds	r7, #20
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr

08013f02 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013f02:	b480      	push	{r7}
 8013f04:	b083      	sub	sp, #12
 8013f06:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013f08:	f3ef 8305 	mrs	r3, IPSR
 8013f0c:	607b      	str	r3, [r7, #4]
  return(result);
 8013f0e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	bf14      	ite	ne
 8013f14:	2301      	movne	r3, #1
 8013f16:	2300      	moveq	r3, #0
 8013f18:	b2db      	uxtb	r3, r3
}
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	370c      	adds	r7, #12
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f24:	4770      	bx	lr

08013f26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013f26:	b580      	push	{r7, lr}
 8013f28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013f2a:	f001 fc05 	bl	8015738 <vTaskStartScheduler>
  
  return osOK;
 8013f2e:	2300      	movs	r3, #0
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8013f38:	f002 f832 	bl	8015fa0 <xTaskGetSchedulerState>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b01      	cmp	r3, #1
 8013f40:	d101      	bne.n	8013f46 <osKernelRunning+0x12>
    return 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	e000      	b.n	8013f48 <osKernelRunning+0x14>
  else
    return 1;
 8013f46:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8013f50:	f7ff ffd7 	bl	8013f02 <inHandlerMode>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d003      	beq.n	8013f62 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8013f5a:	f001 fd11 	bl	8015980 <xTaskGetTickCountFromISR>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	e002      	b.n	8013f68 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8013f62:	f001 fcfd 	bl	8015960 <xTaskGetTickCount>
 8013f66:	4603      	mov	r3, r0
  }
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f6e:	b089      	sub	sp, #36	; 0x24
 8013f70:	af04      	add	r7, sp, #16
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	695b      	ldr	r3, [r3, #20]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d020      	beq.n	8013fc0 <osThreadCreate+0x54>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	699b      	ldr	r3, [r3, #24]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d01c      	beq.n	8013fc0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	685c      	ldr	r4, [r3, #4]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	691e      	ldr	r6, [r3, #16]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ff ff9a 	bl	8013ed2 <makeFreeRtosPriority>
 8013f9e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	695b      	ldr	r3, [r3, #20]
 8013fa4:	687a      	ldr	r2, [r7, #4]
 8013fa6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013fa8:	9202      	str	r2, [sp, #8]
 8013faa:	9301      	str	r3, [sp, #4]
 8013fac:	9100      	str	r1, [sp, #0]
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	4632      	mov	r2, r6
 8013fb2:	4629      	mov	r1, r5
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f001 f9e1 	bl	801537c <xTaskCreateStatic>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	60fb      	str	r3, [r7, #12]
 8013fbe:	e01c      	b.n	8013ffa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	685c      	ldr	r4, [r3, #4]
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013fcc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7ff ff7c 	bl	8013ed2 <makeFreeRtosPriority>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	f107 030c 	add.w	r3, r7, #12
 8013fe0:	9301      	str	r3, [sp, #4]
 8013fe2:	9200      	str	r2, [sp, #0]
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	4632      	mov	r2, r6
 8013fe8:	4629      	mov	r1, r5
 8013fea:	4620      	mov	r0, r4
 8013fec:	f001 fa23 	bl	8015436 <xTaskCreate>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d001      	beq.n	8013ffa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	e000      	b.n	8013ffc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3714      	adds	r7, #20
 8014000:	46bd      	mov	sp, r7
 8014002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014004 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d001      	beq.n	801401a <osDelay+0x16>
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	e000      	b.n	801401c <osDelay+0x18>
 801401a:	2301      	movs	r3, #1
 801401c:	4618      	mov	r0, r3
 801401e:	f001 fb57 	bl	80156d0 <vTaskDelay>
  
  return osOK;
 8014022:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014024:	4618      	mov	r0, r3
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}

0801402c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801402c:	b580      	push	{r7, lr}
 801402e:	b086      	sub	sp, #24
 8014030:	af02      	add	r7, sp, #8
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d00f      	beq.n	801405e <osSemaphoreCreate+0x32>
    if (count == 1) {
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	2b01      	cmp	r3, #1
 8014042:	d10a      	bne.n	801405a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	2203      	movs	r2, #3
 801404a:	9200      	str	r2, [sp, #0]
 801404c:	2200      	movs	r2, #0
 801404e:	2100      	movs	r1, #0
 8014050:	2001      	movs	r0, #1
 8014052:	f000 fab9 	bl	80145c8 <xQueueGenericCreateStatic>
 8014056:	4603      	mov	r3, r0
 8014058:	e016      	b.n	8014088 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801405a:	2300      	movs	r3, #0
 801405c:	e014      	b.n	8014088 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	2b01      	cmp	r3, #1
 8014062:	d110      	bne.n	8014086 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8014064:	2203      	movs	r2, #3
 8014066:	2100      	movs	r1, #0
 8014068:	2001      	movs	r0, #1
 801406a:	f000 fb25 	bl	80146b8 <xQueueGenericCreate>
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d005      	beq.n	8014082 <osSemaphoreCreate+0x56>
 8014076:	2300      	movs	r3, #0
 8014078:	2200      	movs	r2, #0
 801407a:	2100      	movs	r1, #0
 801407c:	68f8      	ldr	r0, [r7, #12]
 801407e:	f000 fb75 	bl	801476c <xQueueGenericSend>
      return sema;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	e000      	b.n	8014088 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8014086:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8014088:	4618      	mov	r0, r3
 801408a:	3710      	adds	r7, #16
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}

08014090 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b084      	sub	sp, #16
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801409a:	2300      	movs	r3, #0
 801409c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d101      	bne.n	80140a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80140a4:	2380      	movs	r3, #128	; 0x80
 80140a6:	e03a      	b.n	801411e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80140a8:	2300      	movs	r3, #0
 80140aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b2:	d103      	bne.n	80140bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80140b4:	f04f 33ff 	mov.w	r3, #4294967295
 80140b8:	60fb      	str	r3, [r7, #12]
 80140ba:	e009      	b.n	80140d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d006      	beq.n	80140d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d101      	bne.n	80140d0 <osSemaphoreWait+0x40>
      ticks = 1;
 80140cc:	2301      	movs	r3, #1
 80140ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80140d0:	f7ff ff17 	bl	8013f02 <inHandlerMode>
 80140d4:	4603      	mov	r3, r0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d017      	beq.n	801410a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80140da:	f107 0308 	add.w	r3, r7, #8
 80140de:	461a      	mov	r2, r3
 80140e0:	2100      	movs	r1, #0
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f000 ff54 	bl	8014f90 <xQueueReceiveFromISR>
 80140e8:	4603      	mov	r3, r0
 80140ea:	2b01      	cmp	r3, #1
 80140ec:	d001      	beq.n	80140f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80140ee:	23ff      	movs	r3, #255	; 0xff
 80140f0:	e015      	b.n	801411e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d011      	beq.n	801411c <osSemaphoreWait+0x8c>
 80140f8:	4b0b      	ldr	r3, [pc, #44]	; (8014128 <osSemaphoreWait+0x98>)
 80140fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140fe:	601a      	str	r2, [r3, #0]
 8014100:	f3bf 8f4f 	dsb	sy
 8014104:	f3bf 8f6f 	isb	sy
 8014108:	e008      	b.n	801411c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801410a:	68f9      	ldr	r1, [r7, #12]
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f000 fe33 	bl	8014d78 <xQueueSemaphoreTake>
 8014112:	4603      	mov	r3, r0
 8014114:	2b01      	cmp	r3, #1
 8014116:	d001      	beq.n	801411c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014118:	23ff      	movs	r3, #255	; 0xff
 801411a:	e000      	b.n	801411e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801411c:	2300      	movs	r3, #0
}
 801411e:	4618      	mov	r0, r3
 8014120:	3710      	adds	r7, #16
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
 8014126:	bf00      	nop
 8014128:	e000ed04 	.word	0xe000ed04

0801412c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014134:	2300      	movs	r3, #0
 8014136:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014138:	2300      	movs	r3, #0
 801413a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801413c:	f7ff fee1 	bl	8013f02 <inHandlerMode>
 8014140:	4603      	mov	r3, r0
 8014142:	2b00      	cmp	r3, #0
 8014144:	d016      	beq.n	8014174 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014146:	f107 0308 	add.w	r3, r7, #8
 801414a:	4619      	mov	r1, r3
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fca6 	bl	8014a9e <xQueueGiveFromISR>
 8014152:	4603      	mov	r3, r0
 8014154:	2b01      	cmp	r3, #1
 8014156:	d001      	beq.n	801415c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014158:	23ff      	movs	r3, #255	; 0xff
 801415a:	e017      	b.n	801418c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d013      	beq.n	801418a <osSemaphoreRelease+0x5e>
 8014162:	4b0c      	ldr	r3, [pc, #48]	; (8014194 <osSemaphoreRelease+0x68>)
 8014164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014168:	601a      	str	r2, [r3, #0]
 801416a:	f3bf 8f4f 	dsb	sy
 801416e:	f3bf 8f6f 	isb	sy
 8014172:	e00a      	b.n	801418a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014174:	2300      	movs	r3, #0
 8014176:	2200      	movs	r2, #0
 8014178:	2100      	movs	r1, #0
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f000 faf6 	bl	801476c <xQueueGenericSend>
 8014180:	4603      	mov	r3, r0
 8014182:	2b01      	cmp	r3, #1
 8014184:	d001      	beq.n	801418a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014186:	23ff      	movs	r3, #255	; 0xff
 8014188:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801418a:	68fb      	ldr	r3, [r7, #12]
}
 801418c:	4618      	mov	r0, r3
 801418e:	3710      	adds	r7, #16
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	e000ed04 	.word	0xe000ed04

08014198 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80141a0:	f7ff feaf 	bl	8013f02 <inHandlerMode>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d001      	beq.n	80141ae <osSemaphoreDelete+0x16>
    return osErrorISR;
 80141aa:	2382      	movs	r3, #130	; 0x82
 80141ac:	e003      	b.n	80141b6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f000 ff6e 	bl	8015090 <vQueueDelete>

  return osOK; 
 80141b4:	2300      	movs	r3, #0
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3708      	adds	r7, #8
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}

080141be <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80141be:	b590      	push	{r4, r7, lr}
 80141c0:	b085      	sub	sp, #20
 80141c2:	af02      	add	r7, sp, #8
 80141c4:	6078      	str	r0, [r7, #4]
 80141c6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	689b      	ldr	r3, [r3, #8]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d011      	beq.n	80141f4 <osMessageCreate+0x36>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d00d      	beq.n	80141f4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6818      	ldr	r0, [r3, #0]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6859      	ldr	r1, [r3, #4]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	689a      	ldr	r2, [r3, #8]
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	2400      	movs	r4, #0
 80141ea:	9400      	str	r4, [sp, #0]
 80141ec:	f000 f9ec 	bl	80145c8 <xQueueGenericCreateStatic>
 80141f0:	4603      	mov	r3, r0
 80141f2:	e008      	b.n	8014206 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	6818      	ldr	r0, [r3, #0]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	2200      	movs	r2, #0
 80141fe:	4619      	mov	r1, r3
 8014200:	f000 fa5a 	bl	80146b8 <xQueueGenericCreate>
 8014204:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014206:	4618      	mov	r0, r3
 8014208:	370c      	adds	r7, #12
 801420a:	46bd      	mov	sp, r7
 801420c:	bd90      	pop	{r4, r7, pc}
	...

08014210 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b086      	sub	sp, #24
 8014214:	af00      	add	r7, sp, #0
 8014216:	60f8      	str	r0, [r7, #12]
 8014218:	60b9      	str	r1, [r7, #8]
 801421a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801421c:	2300      	movs	r3, #0
 801421e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d101      	bne.n	801422e <osMessagePut+0x1e>
    ticks = 1;
 801422a:	2301      	movs	r3, #1
 801422c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801422e:	f7ff fe68 	bl	8013f02 <inHandlerMode>
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	d018      	beq.n	801426a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014238:	f107 0210 	add.w	r2, r7, #16
 801423c:	f107 0108 	add.w	r1, r7, #8
 8014240:	2300      	movs	r3, #0
 8014242:	68f8      	ldr	r0, [r7, #12]
 8014244:	f000 fb90 	bl	8014968 <xQueueGenericSendFromISR>
 8014248:	4603      	mov	r3, r0
 801424a:	2b01      	cmp	r3, #1
 801424c:	d001      	beq.n	8014252 <osMessagePut+0x42>
      return osErrorOS;
 801424e:	23ff      	movs	r3, #255	; 0xff
 8014250:	e018      	b.n	8014284 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014252:	693b      	ldr	r3, [r7, #16]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d014      	beq.n	8014282 <osMessagePut+0x72>
 8014258:	4b0c      	ldr	r3, [pc, #48]	; (801428c <osMessagePut+0x7c>)
 801425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801425e:	601a      	str	r2, [r3, #0]
 8014260:	f3bf 8f4f 	dsb	sy
 8014264:	f3bf 8f6f 	isb	sy
 8014268:	e00b      	b.n	8014282 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801426a:	f107 0108 	add.w	r1, r7, #8
 801426e:	2300      	movs	r3, #0
 8014270:	697a      	ldr	r2, [r7, #20]
 8014272:	68f8      	ldr	r0, [r7, #12]
 8014274:	f000 fa7a 	bl	801476c <xQueueGenericSend>
 8014278:	4603      	mov	r3, r0
 801427a:	2b01      	cmp	r3, #1
 801427c:	d001      	beq.n	8014282 <osMessagePut+0x72>
      return osErrorOS;
 801427e:	23ff      	movs	r3, #255	; 0xff
 8014280:	e000      	b.n	8014284 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014282:	2300      	movs	r3, #0
}
 8014284:	4618      	mov	r0, r3
 8014286:	3718      	adds	r7, #24
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	e000ed04 	.word	0xe000ed04

08014290 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014290:	b590      	push	{r4, r7, lr}
 8014292:	b08b      	sub	sp, #44	; 0x2c
 8014294:	af00      	add	r7, sp, #0
 8014296:	60f8      	str	r0, [r7, #12]
 8014298:	60b9      	str	r1, [r7, #8]
 801429a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80142a0:	2300      	movs	r3, #0
 80142a2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d10a      	bne.n	80142c0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80142aa:	2380      	movs	r3, #128	; 0x80
 80142ac:	617b      	str	r3, [r7, #20]
    return event;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	461c      	mov	r4, r3
 80142b2:	f107 0314 	add.w	r3, r7, #20
 80142b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80142ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80142be:	e054      	b.n	801436a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80142c0:	2300      	movs	r3, #0
 80142c2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80142c4:	2300      	movs	r3, #0
 80142c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ce:	d103      	bne.n	80142d8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80142d0:	f04f 33ff 	mov.w	r3, #4294967295
 80142d4:	627b      	str	r3, [r7, #36]	; 0x24
 80142d6:	e009      	b.n	80142ec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d006      	beq.n	80142ec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80142e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d101      	bne.n	80142ec <osMessageGet+0x5c>
      ticks = 1;
 80142e8:	2301      	movs	r3, #1
 80142ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80142ec:	f7ff fe09 	bl	8013f02 <inHandlerMode>
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d01c      	beq.n	8014330 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80142f6:	f107 0220 	add.w	r2, r7, #32
 80142fa:	f107 0314 	add.w	r3, r7, #20
 80142fe:	3304      	adds	r3, #4
 8014300:	4619      	mov	r1, r3
 8014302:	68b8      	ldr	r0, [r7, #8]
 8014304:	f000 fe44 	bl	8014f90 <xQueueReceiveFromISR>
 8014308:	4603      	mov	r3, r0
 801430a:	2b01      	cmp	r3, #1
 801430c:	d102      	bne.n	8014314 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801430e:	2310      	movs	r3, #16
 8014310:	617b      	str	r3, [r7, #20]
 8014312:	e001      	b.n	8014318 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014314:	2300      	movs	r3, #0
 8014316:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014318:	6a3b      	ldr	r3, [r7, #32]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d01d      	beq.n	801435a <osMessageGet+0xca>
 801431e:	4b15      	ldr	r3, [pc, #84]	; (8014374 <osMessageGet+0xe4>)
 8014320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	f3bf 8f4f 	dsb	sy
 801432a:	f3bf 8f6f 	isb	sy
 801432e:	e014      	b.n	801435a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014330:	f107 0314 	add.w	r3, r7, #20
 8014334:	3304      	adds	r3, #4
 8014336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014338:	4619      	mov	r1, r3
 801433a:	68b8      	ldr	r0, [r7, #8]
 801433c:	f000 fc3c 	bl	8014bb8 <xQueueReceive>
 8014340:	4603      	mov	r3, r0
 8014342:	2b01      	cmp	r3, #1
 8014344:	d102      	bne.n	801434c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014346:	2310      	movs	r3, #16
 8014348:	617b      	str	r3, [r7, #20]
 801434a:	e006      	b.n	801435a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434e:	2b00      	cmp	r3, #0
 8014350:	d101      	bne.n	8014356 <osMessageGet+0xc6>
 8014352:	2300      	movs	r3, #0
 8014354:	e000      	b.n	8014358 <osMessageGet+0xc8>
 8014356:	2340      	movs	r3, #64	; 0x40
 8014358:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	461c      	mov	r4, r3
 801435e:	f107 0314 	add.w	r3, r7, #20
 8014362:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014366:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801436a:	68f8      	ldr	r0, [r7, #12]
 801436c:	372c      	adds	r7, #44	; 0x2c
 801436e:	46bd      	mov	sp, r7
 8014370:	bd90      	pop	{r4, r7, pc}
 8014372:	bf00      	nop
 8014374:	e000ed04 	.word	0xe000ed04

08014378 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8014378:	b480      	push	{r7}
 801437a:	b083      	sub	sp, #12
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 8014382:	2381      	movs	r3, #129	; 0x81
#endif
}
 8014384:	4618      	mov	r0, r3
 8014386:	370c      	adds	r7, #12
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr

08014390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f103 0208 	add.w	r2, r3, #8
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f04f 32ff 	mov.w	r2, #4294967295
 80143a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f103 0208 	add.w	r2, r3, #8
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f103 0208 	add.w	r2, r3, #8
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80143c4:	bf00      	nop
 80143c6:	370c      	adds	r7, #12
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr

080143d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80143d0:	b480      	push	{r7}
 80143d2:	b083      	sub	sp, #12
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2200      	movs	r2, #0
 80143dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80143de:	bf00      	nop
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr

080143ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80143ea:	b480      	push	{r7}
 80143ec:	b085      	sub	sp, #20
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
 80143f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	685b      	ldr	r3, [r3, #4]
 80143f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	68fa      	ldr	r2, [r7, #12]
 80143fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	689a      	ldr	r2, [r3, #8]
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	683a      	ldr	r2, [r7, #0]
 801440e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	683a      	ldr	r2, [r7, #0]
 8014414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	687a      	ldr	r2, [r7, #4]
 801441a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	1c5a      	adds	r2, r3, #1
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	601a      	str	r2, [r3, #0]
}
 8014426:	bf00      	nop
 8014428:	3714      	adds	r7, #20
 801442a:	46bd      	mov	sp, r7
 801442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014430:	4770      	bx	lr

08014432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014432:	b480      	push	{r7}
 8014434:	b085      	sub	sp, #20
 8014436:	af00      	add	r7, sp, #0
 8014438:	6078      	str	r0, [r7, #4]
 801443a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014448:	d103      	bne.n	8014452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	691b      	ldr	r3, [r3, #16]
 801444e:	60fb      	str	r3, [r7, #12]
 8014450:	e00c      	b.n	801446c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	3308      	adds	r3, #8
 8014456:	60fb      	str	r3, [r7, #12]
 8014458:	e002      	b.n	8014460 <vListInsert+0x2e>
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	60fb      	str	r3, [r7, #12]
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	685b      	ldr	r3, [r3, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	68ba      	ldr	r2, [r7, #8]
 8014468:	429a      	cmp	r2, r3
 801446a:	d2f6      	bcs.n	801445a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	685a      	ldr	r2, [r3, #4]
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	683a      	ldr	r2, [r7, #0]
 801447a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	683a      	ldr	r2, [r7, #0]
 8014486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	1c5a      	adds	r2, r3, #1
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	601a      	str	r2, [r3, #0]
}
 8014498:	bf00      	nop
 801449a:	3714      	adds	r7, #20
 801449c:	46bd      	mov	sp, r7
 801449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a2:	4770      	bx	lr

080144a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80144a4:	b480      	push	{r7}
 80144a6:	b085      	sub	sp, #20
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	691b      	ldr	r3, [r3, #16]
 80144b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	687a      	ldr	r2, [r7, #4]
 80144b8:	6892      	ldr	r2, [r2, #8]
 80144ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	689b      	ldr	r3, [r3, #8]
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	6852      	ldr	r2, [r2, #4]
 80144c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d103      	bne.n	80144d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	689a      	ldr	r2, [r3, #8]
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2200      	movs	r2, #0
 80144dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	1e5a      	subs	r2, r3, #1
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	3714      	adds	r7, #20
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr

080144f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d10a      	bne.n	8014522 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014510:	f383 8811 	msr	BASEPRI, r3
 8014514:	f3bf 8f6f 	isb	sy
 8014518:	f3bf 8f4f 	dsb	sy
 801451c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801451e:	bf00      	nop
 8014520:	e7fe      	b.n	8014520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014522:	f002 f88f 	bl	8016644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801452e:	68f9      	ldr	r1, [r7, #12]
 8014530:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014532:	fb01 f303 	mul.w	r3, r1, r3
 8014536:	441a      	add	r2, r3
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2200      	movs	r2, #0
 8014540:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014552:	3b01      	subs	r3, #1
 8014554:	68f9      	ldr	r1, [r7, #12]
 8014556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014558:	fb01 f303 	mul.w	r3, r1, r3
 801455c:	441a      	add	r2, r3
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	22ff      	movs	r2, #255	; 0xff
 8014566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	22ff      	movs	r2, #255	; 0xff
 801456e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d114      	bne.n	80145a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	691b      	ldr	r3, [r3, #16]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d01a      	beq.n	80145b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	3310      	adds	r3, #16
 8014584:	4618      	mov	r0, r3
 8014586:	f001 fb4b 	bl	8015c20 <xTaskRemoveFromEventList>
 801458a:	4603      	mov	r3, r0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d012      	beq.n	80145b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014590:	4b0c      	ldr	r3, [pc, #48]	; (80145c4 <xQueueGenericReset+0xcc>)
 8014592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014596:	601a      	str	r2, [r3, #0]
 8014598:	f3bf 8f4f 	dsb	sy
 801459c:	f3bf 8f6f 	isb	sy
 80145a0:	e009      	b.n	80145b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	3310      	adds	r3, #16
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7ff fef2 	bl	8014390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	3324      	adds	r3, #36	; 0x24
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7ff feed 	bl	8014390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80145b6:	f002 f875 	bl	80166a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80145ba:	2301      	movs	r3, #1
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3710      	adds	r7, #16
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}
 80145c4:	e000ed04 	.word	0xe000ed04

080145c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b08e      	sub	sp, #56	; 0x38
 80145cc:	af02      	add	r7, sp, #8
 80145ce:	60f8      	str	r0, [r7, #12]
 80145d0:	60b9      	str	r1, [r7, #8]
 80145d2:	607a      	str	r2, [r7, #4]
 80145d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d10a      	bne.n	80145f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80145dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e0:	f383 8811 	msr	BASEPRI, r3
 80145e4:	f3bf 8f6f 	isb	sy
 80145e8:	f3bf 8f4f 	dsb	sy
 80145ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80145ee:	bf00      	nop
 80145f0:	e7fe      	b.n	80145f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10a      	bne.n	801460e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80145f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fc:	f383 8811 	msr	BASEPRI, r3
 8014600:	f3bf 8f6f 	isb	sy
 8014604:	f3bf 8f4f 	dsb	sy
 8014608:	627b      	str	r3, [r7, #36]	; 0x24
}
 801460a:	bf00      	nop
 801460c:	e7fe      	b.n	801460c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d002      	beq.n	801461a <xQueueGenericCreateStatic+0x52>
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d001      	beq.n	801461e <xQueueGenericCreateStatic+0x56>
 801461a:	2301      	movs	r3, #1
 801461c:	e000      	b.n	8014620 <xQueueGenericCreateStatic+0x58>
 801461e:	2300      	movs	r3, #0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d10a      	bne.n	801463a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014628:	f383 8811 	msr	BASEPRI, r3
 801462c:	f3bf 8f6f 	isb	sy
 8014630:	f3bf 8f4f 	dsb	sy
 8014634:	623b      	str	r3, [r7, #32]
}
 8014636:	bf00      	nop
 8014638:	e7fe      	b.n	8014638 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d102      	bne.n	8014646 <xQueueGenericCreateStatic+0x7e>
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d101      	bne.n	801464a <xQueueGenericCreateStatic+0x82>
 8014646:	2301      	movs	r3, #1
 8014648:	e000      	b.n	801464c <xQueueGenericCreateStatic+0x84>
 801464a:	2300      	movs	r3, #0
 801464c:	2b00      	cmp	r3, #0
 801464e:	d10a      	bne.n	8014666 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014654:	f383 8811 	msr	BASEPRI, r3
 8014658:	f3bf 8f6f 	isb	sy
 801465c:	f3bf 8f4f 	dsb	sy
 8014660:	61fb      	str	r3, [r7, #28]
}
 8014662:	bf00      	nop
 8014664:	e7fe      	b.n	8014664 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014666:	2348      	movs	r3, #72	; 0x48
 8014668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	2b48      	cmp	r3, #72	; 0x48
 801466e:	d00a      	beq.n	8014686 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014674:	f383 8811 	msr	BASEPRI, r3
 8014678:	f3bf 8f6f 	isb	sy
 801467c:	f3bf 8f4f 	dsb	sy
 8014680:	61bb      	str	r3, [r7, #24]
}
 8014682:	bf00      	nop
 8014684:	e7fe      	b.n	8014684 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014686:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801468e:	2b00      	cmp	r3, #0
 8014690:	d00d      	beq.n	80146ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014694:	2201      	movs	r2, #1
 8014696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801469a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a0:	9300      	str	r3, [sp, #0]
 80146a2:	4613      	mov	r3, r2
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	68b9      	ldr	r1, [r7, #8]
 80146a8:	68f8      	ldr	r0, [r7, #12]
 80146aa:	f000 f83f 	bl	801472c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80146ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3730      	adds	r7, #48	; 0x30
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b08a      	sub	sp, #40	; 0x28
 80146bc:	af02      	add	r7, sp, #8
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	4613      	mov	r3, r2
 80146c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d10a      	bne.n	80146e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80146cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d0:	f383 8811 	msr	BASEPRI, r3
 80146d4:	f3bf 8f6f 	isb	sy
 80146d8:	f3bf 8f4f 	dsb	sy
 80146dc:	613b      	str	r3, [r7, #16]
}
 80146de:	bf00      	nop
 80146e0:	e7fe      	b.n	80146e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	68ba      	ldr	r2, [r7, #8]
 80146e6:	fb02 f303 	mul.w	r3, r2, r3
 80146ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80146ec:	69fb      	ldr	r3, [r7, #28]
 80146ee:	3348      	adds	r3, #72	; 0x48
 80146f0:	4618      	mov	r0, r3
 80146f2:	f002 f8c9 	bl	8016888 <pvPortMalloc>
 80146f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d011      	beq.n	8014722 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80146fe:	69bb      	ldr	r3, [r7, #24]
 8014700:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	3348      	adds	r3, #72	; 0x48
 8014706:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	2200      	movs	r2, #0
 801470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014710:	79fa      	ldrb	r2, [r7, #7]
 8014712:	69bb      	ldr	r3, [r7, #24]
 8014714:	9300      	str	r3, [sp, #0]
 8014716:	4613      	mov	r3, r2
 8014718:	697a      	ldr	r2, [r7, #20]
 801471a:	68b9      	ldr	r1, [r7, #8]
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f000 f805 	bl	801472c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014722:	69bb      	ldr	r3, [r7, #24]
	}
 8014724:	4618      	mov	r0, r3
 8014726:	3720      	adds	r7, #32
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}

0801472c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b084      	sub	sp, #16
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
 8014738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d103      	bne.n	8014748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014740:	69bb      	ldr	r3, [r7, #24]
 8014742:	69ba      	ldr	r2, [r7, #24]
 8014744:	601a      	str	r2, [r3, #0]
 8014746:	e002      	b.n	801474e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	687a      	ldr	r2, [r7, #4]
 801474c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	68fa      	ldr	r2, [r7, #12]
 8014752:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801475a:	2101      	movs	r1, #1
 801475c:	69b8      	ldr	r0, [r7, #24]
 801475e:	f7ff fecb 	bl	80144f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014762:	bf00      	nop
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
	...

0801476c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b08e      	sub	sp, #56	; 0x38
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	607a      	str	r2, [r7, #4]
 8014778:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801477a:	2300      	movs	r3, #0
 801477c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014784:	2b00      	cmp	r3, #0
 8014786:	d10a      	bne.n	801479e <xQueueGenericSend+0x32>
	__asm volatile
 8014788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801478c:	f383 8811 	msr	BASEPRI, r3
 8014790:	f3bf 8f6f 	isb	sy
 8014794:	f3bf 8f4f 	dsb	sy
 8014798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801479a:	bf00      	nop
 801479c:	e7fe      	b.n	801479c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d103      	bne.n	80147ac <xQueueGenericSend+0x40>
 80147a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d101      	bne.n	80147b0 <xQueueGenericSend+0x44>
 80147ac:	2301      	movs	r3, #1
 80147ae:	e000      	b.n	80147b2 <xQueueGenericSend+0x46>
 80147b0:	2300      	movs	r3, #0
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d10a      	bne.n	80147cc <xQueueGenericSend+0x60>
	__asm volatile
 80147b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ba:	f383 8811 	msr	BASEPRI, r3
 80147be:	f3bf 8f6f 	isb	sy
 80147c2:	f3bf 8f4f 	dsb	sy
 80147c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80147c8:	bf00      	nop
 80147ca:	e7fe      	b.n	80147ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	2b02      	cmp	r3, #2
 80147d0:	d103      	bne.n	80147da <xQueueGenericSend+0x6e>
 80147d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d101      	bne.n	80147de <xQueueGenericSend+0x72>
 80147da:	2301      	movs	r3, #1
 80147dc:	e000      	b.n	80147e0 <xQueueGenericSend+0x74>
 80147de:	2300      	movs	r3, #0
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d10a      	bne.n	80147fa <xQueueGenericSend+0x8e>
	__asm volatile
 80147e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e8:	f383 8811 	msr	BASEPRI, r3
 80147ec:	f3bf 8f6f 	isb	sy
 80147f0:	f3bf 8f4f 	dsb	sy
 80147f4:	623b      	str	r3, [r7, #32]
}
 80147f6:	bf00      	nop
 80147f8:	e7fe      	b.n	80147f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80147fa:	f001 fbd1 	bl	8015fa0 <xTaskGetSchedulerState>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	d102      	bne.n	801480a <xQueueGenericSend+0x9e>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d101      	bne.n	801480e <xQueueGenericSend+0xa2>
 801480a:	2301      	movs	r3, #1
 801480c:	e000      	b.n	8014810 <xQueueGenericSend+0xa4>
 801480e:	2300      	movs	r3, #0
 8014810:	2b00      	cmp	r3, #0
 8014812:	d10a      	bne.n	801482a <xQueueGenericSend+0xbe>
	__asm volatile
 8014814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014818:	f383 8811 	msr	BASEPRI, r3
 801481c:	f3bf 8f6f 	isb	sy
 8014820:	f3bf 8f4f 	dsb	sy
 8014824:	61fb      	str	r3, [r7, #28]
}
 8014826:	bf00      	nop
 8014828:	e7fe      	b.n	8014828 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801482a:	f001 ff0b 	bl	8016644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014836:	429a      	cmp	r2, r3
 8014838:	d302      	bcc.n	8014840 <xQueueGenericSend+0xd4>
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	2b02      	cmp	r3, #2
 801483e:	d129      	bne.n	8014894 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014840:	683a      	ldr	r2, [r7, #0]
 8014842:	68b9      	ldr	r1, [r7, #8]
 8014844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014846:	f000 fc5e 	bl	8015106 <prvCopyDataToQueue>
 801484a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014850:	2b00      	cmp	r3, #0
 8014852:	d010      	beq.n	8014876 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014856:	3324      	adds	r3, #36	; 0x24
 8014858:	4618      	mov	r0, r3
 801485a:	f001 f9e1 	bl	8015c20 <xTaskRemoveFromEventList>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d013      	beq.n	801488c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014864:	4b3f      	ldr	r3, [pc, #252]	; (8014964 <xQueueGenericSend+0x1f8>)
 8014866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801486a:	601a      	str	r2, [r3, #0]
 801486c:	f3bf 8f4f 	dsb	sy
 8014870:	f3bf 8f6f 	isb	sy
 8014874:	e00a      	b.n	801488c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014878:	2b00      	cmp	r3, #0
 801487a:	d007      	beq.n	801488c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801487c:	4b39      	ldr	r3, [pc, #228]	; (8014964 <xQueueGenericSend+0x1f8>)
 801487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014882:	601a      	str	r2, [r3, #0]
 8014884:	f3bf 8f4f 	dsb	sy
 8014888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801488c:	f001 ff0a 	bl	80166a4 <vPortExitCritical>
				return pdPASS;
 8014890:	2301      	movs	r3, #1
 8014892:	e063      	b.n	801495c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d103      	bne.n	80148a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801489a:	f001 ff03 	bl	80166a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801489e:	2300      	movs	r3, #0
 80148a0:	e05c      	b.n	801495c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80148a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d106      	bne.n	80148b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80148a8:	f107 0314 	add.w	r3, r7, #20
 80148ac:	4618      	mov	r0, r3
 80148ae:	f001 fa19 	bl	8015ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80148b2:	2301      	movs	r3, #1
 80148b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80148b6:	f001 fef5 	bl	80166a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80148ba:	f000 ffa7 	bl	801580c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80148be:	f001 fec1 	bl	8016644 <vPortEnterCritical>
 80148c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148c8:	b25b      	sxtb	r3, r3
 80148ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148ce:	d103      	bne.n	80148d8 <xQueueGenericSend+0x16c>
 80148d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d2:	2200      	movs	r2, #0
 80148d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148de:	b25b      	sxtb	r3, r3
 80148e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148e4:	d103      	bne.n	80148ee <xQueueGenericSend+0x182>
 80148e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e8:	2200      	movs	r2, #0
 80148ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80148ee:	f001 fed9 	bl	80166a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80148f2:	1d3a      	adds	r2, r7, #4
 80148f4:	f107 0314 	add.w	r3, r7, #20
 80148f8:	4611      	mov	r1, r2
 80148fa:	4618      	mov	r0, r3
 80148fc:	f001 fa08 	bl	8015d10 <xTaskCheckForTimeOut>
 8014900:	4603      	mov	r3, r0
 8014902:	2b00      	cmp	r3, #0
 8014904:	d124      	bne.n	8014950 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014908:	f000 fcf5 	bl	80152f6 <prvIsQueueFull>
 801490c:	4603      	mov	r3, r0
 801490e:	2b00      	cmp	r3, #0
 8014910:	d018      	beq.n	8014944 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014914:	3310      	adds	r3, #16
 8014916:	687a      	ldr	r2, [r7, #4]
 8014918:	4611      	mov	r1, r2
 801491a:	4618      	mov	r0, r3
 801491c:	f001 f95c 	bl	8015bd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014922:	f000 fc80 	bl	8015226 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014926:	f000 ff7f 	bl	8015828 <xTaskResumeAll>
 801492a:	4603      	mov	r3, r0
 801492c:	2b00      	cmp	r3, #0
 801492e:	f47f af7c 	bne.w	801482a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014932:	4b0c      	ldr	r3, [pc, #48]	; (8014964 <xQueueGenericSend+0x1f8>)
 8014934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014938:	601a      	str	r2, [r3, #0]
 801493a:	f3bf 8f4f 	dsb	sy
 801493e:	f3bf 8f6f 	isb	sy
 8014942:	e772      	b.n	801482a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014946:	f000 fc6e 	bl	8015226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801494a:	f000 ff6d 	bl	8015828 <xTaskResumeAll>
 801494e:	e76c      	b.n	801482a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014952:	f000 fc68 	bl	8015226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014956:	f000 ff67 	bl	8015828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801495a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801495c:	4618      	mov	r0, r3
 801495e:	3738      	adds	r7, #56	; 0x38
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	e000ed04 	.word	0xe000ed04

08014968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b090      	sub	sp, #64	; 0x40
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
 8014974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497c:	2b00      	cmp	r3, #0
 801497e:	d10a      	bne.n	8014996 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014984:	f383 8811 	msr	BASEPRI, r3
 8014988:	f3bf 8f6f 	isb	sy
 801498c:	f3bf 8f4f 	dsb	sy
 8014990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014992:	bf00      	nop
 8014994:	e7fe      	b.n	8014994 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d103      	bne.n	80149a4 <xQueueGenericSendFromISR+0x3c>
 801499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d101      	bne.n	80149a8 <xQueueGenericSendFromISR+0x40>
 80149a4:	2301      	movs	r3, #1
 80149a6:	e000      	b.n	80149aa <xQueueGenericSendFromISR+0x42>
 80149a8:	2300      	movs	r3, #0
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d10a      	bne.n	80149c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80149ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b2:	f383 8811 	msr	BASEPRI, r3
 80149b6:	f3bf 8f6f 	isb	sy
 80149ba:	f3bf 8f4f 	dsb	sy
 80149be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80149c0:	bf00      	nop
 80149c2:	e7fe      	b.n	80149c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	2b02      	cmp	r3, #2
 80149c8:	d103      	bne.n	80149d2 <xQueueGenericSendFromISR+0x6a>
 80149ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d101      	bne.n	80149d6 <xQueueGenericSendFromISR+0x6e>
 80149d2:	2301      	movs	r3, #1
 80149d4:	e000      	b.n	80149d8 <xQueueGenericSendFromISR+0x70>
 80149d6:	2300      	movs	r3, #0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d10a      	bne.n	80149f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80149dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e0:	f383 8811 	msr	BASEPRI, r3
 80149e4:	f3bf 8f6f 	isb	sy
 80149e8:	f3bf 8f4f 	dsb	sy
 80149ec:	623b      	str	r3, [r7, #32]
}
 80149ee:	bf00      	nop
 80149f0:	e7fe      	b.n	80149f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149f2:	f001 ff09 	bl	8016808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80149f6:	f3ef 8211 	mrs	r2, BASEPRI
 80149fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fe:	f383 8811 	msr	BASEPRI, r3
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	f3bf 8f4f 	dsb	sy
 8014a0a:	61fa      	str	r2, [r7, #28]
 8014a0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014a0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d302      	bcc.n	8014a24 <xQueueGenericSendFromISR+0xbc>
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	d12f      	bne.n	8014a84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014a34:	683a      	ldr	r2, [r7, #0]
 8014a36:	68b9      	ldr	r1, [r7, #8]
 8014a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014a3a:	f000 fb64 	bl	8015106 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014a3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a46:	d112      	bne.n	8014a6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d016      	beq.n	8014a7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a52:	3324      	adds	r3, #36	; 0x24
 8014a54:	4618      	mov	r0, r3
 8014a56:	f001 f8e3 	bl	8015c20 <xTaskRemoveFromEventList>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00e      	beq.n	8014a7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d00b      	beq.n	8014a7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2201      	movs	r2, #1
 8014a6a:	601a      	str	r2, [r3, #0]
 8014a6c:	e007      	b.n	8014a7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014a72:	3301      	adds	r3, #1
 8014a74:	b2db      	uxtb	r3, r3
 8014a76:	b25a      	sxtb	r2, r3
 8014a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014a7e:	2301      	movs	r3, #1
 8014a80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014a82:	e001      	b.n	8014a88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014a84:	2300      	movs	r3, #0
 8014a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014a92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3740      	adds	r7, #64	; 0x40
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}

08014a9e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014a9e:	b580      	push	{r7, lr}
 8014aa0:	b08e      	sub	sp, #56	; 0x38
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	6078      	str	r0, [r7, #4]
 8014aa6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d10a      	bne.n	8014ac8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab6:	f383 8811 	msr	BASEPRI, r3
 8014aba:	f3bf 8f6f 	isb	sy
 8014abe:	f3bf 8f4f 	dsb	sy
 8014ac2:	623b      	str	r3, [r7, #32]
}
 8014ac4:	bf00      	nop
 8014ac6:	e7fe      	b.n	8014ac6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00a      	beq.n	8014ae6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8014ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	61fb      	str	r3, [r7, #28]
}
 8014ae2:	bf00      	nop
 8014ae4:	e7fe      	b.n	8014ae4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d103      	bne.n	8014af6 <xQueueGiveFromISR+0x58>
 8014aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af0:	689b      	ldr	r3, [r3, #8]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d101      	bne.n	8014afa <xQueueGiveFromISR+0x5c>
 8014af6:	2301      	movs	r3, #1
 8014af8:	e000      	b.n	8014afc <xQueueGiveFromISR+0x5e>
 8014afa:	2300      	movs	r3, #0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d10a      	bne.n	8014b16 <xQueueGiveFromISR+0x78>
	__asm volatile
 8014b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b04:	f383 8811 	msr	BASEPRI, r3
 8014b08:	f3bf 8f6f 	isb	sy
 8014b0c:	f3bf 8f4f 	dsb	sy
 8014b10:	61bb      	str	r3, [r7, #24]
}
 8014b12:	bf00      	nop
 8014b14:	e7fe      	b.n	8014b14 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b16:	f001 fe77 	bl	8016808 <vPortValidateInterruptPriority>
	__asm volatile
 8014b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8014b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b22:	f383 8811 	msr	BASEPRI, r3
 8014b26:	f3bf 8f6f 	isb	sy
 8014b2a:	f3bf 8f4f 	dsb	sy
 8014b2e:	617a      	str	r2, [r7, #20]
 8014b30:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014b32:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014b34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b42:	429a      	cmp	r2, r3
 8014b44:	d22b      	bcs.n	8014b9e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b52:	1c5a      	adds	r2, r3, #1
 8014b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b56:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014b58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b60:	d112      	bne.n	8014b88 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d016      	beq.n	8014b98 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6c:	3324      	adds	r3, #36	; 0x24
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f001 f856 	bl	8015c20 <xTaskRemoveFromEventList>
 8014b74:	4603      	mov	r3, r0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d00e      	beq.n	8014b98 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d00b      	beq.n	8014b98 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	2201      	movs	r2, #1
 8014b84:	601a      	str	r2, [r3, #0]
 8014b86:	e007      	b.n	8014b98 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	b2db      	uxtb	r3, r3
 8014b90:	b25a      	sxtb	r2, r3
 8014b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014b98:	2301      	movs	r3, #1
 8014b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8014b9c:	e001      	b.n	8014ba2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8014ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f383 8811 	msr	BASEPRI, r3
}
 8014bac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3738      	adds	r7, #56	; 0x38
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b08c      	sub	sp, #48	; 0x30
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d10a      	bne.n	8014be8 <xQueueReceive+0x30>
	__asm volatile
 8014bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd6:	f383 8811 	msr	BASEPRI, r3
 8014bda:	f3bf 8f6f 	isb	sy
 8014bde:	f3bf 8f4f 	dsb	sy
 8014be2:	623b      	str	r3, [r7, #32]
}
 8014be4:	bf00      	nop
 8014be6:	e7fe      	b.n	8014be6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d103      	bne.n	8014bf6 <xQueueReceive+0x3e>
 8014bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d101      	bne.n	8014bfa <xQueueReceive+0x42>
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	e000      	b.n	8014bfc <xQueueReceive+0x44>
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d10a      	bne.n	8014c16 <xQueueReceive+0x5e>
	__asm volatile
 8014c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c04:	f383 8811 	msr	BASEPRI, r3
 8014c08:	f3bf 8f6f 	isb	sy
 8014c0c:	f3bf 8f4f 	dsb	sy
 8014c10:	61fb      	str	r3, [r7, #28]
}
 8014c12:	bf00      	nop
 8014c14:	e7fe      	b.n	8014c14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c16:	f001 f9c3 	bl	8015fa0 <xTaskGetSchedulerState>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d102      	bne.n	8014c26 <xQueueReceive+0x6e>
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d101      	bne.n	8014c2a <xQueueReceive+0x72>
 8014c26:	2301      	movs	r3, #1
 8014c28:	e000      	b.n	8014c2c <xQueueReceive+0x74>
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d10a      	bne.n	8014c46 <xQueueReceive+0x8e>
	__asm volatile
 8014c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	61bb      	str	r3, [r7, #24]
}
 8014c42:	bf00      	nop
 8014c44:	e7fe      	b.n	8014c44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014c46:	f001 fcfd 	bl	8016644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d01f      	beq.n	8014c96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014c56:	68b9      	ldr	r1, [r7, #8]
 8014c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c5a:	f000 fabe 	bl	80151da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c60:	1e5a      	subs	r2, r3, #1
 8014c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c68:	691b      	ldr	r3, [r3, #16]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d00f      	beq.n	8014c8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c70:	3310      	adds	r3, #16
 8014c72:	4618      	mov	r0, r3
 8014c74:	f000 ffd4 	bl	8015c20 <xTaskRemoveFromEventList>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d007      	beq.n	8014c8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014c7e:	4b3d      	ldr	r3, [pc, #244]	; (8014d74 <xQueueReceive+0x1bc>)
 8014c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c84:	601a      	str	r2, [r3, #0]
 8014c86:	f3bf 8f4f 	dsb	sy
 8014c8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014c8e:	f001 fd09 	bl	80166a4 <vPortExitCritical>
				return pdPASS;
 8014c92:	2301      	movs	r3, #1
 8014c94:	e069      	b.n	8014d6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d103      	bne.n	8014ca4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014c9c:	f001 fd02 	bl	80166a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	e062      	b.n	8014d6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d106      	bne.n	8014cb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014caa:	f107 0310 	add.w	r3, r7, #16
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f001 f818 	bl	8015ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014cb4:	2301      	movs	r3, #1
 8014cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014cb8:	f001 fcf4 	bl	80166a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014cbc:	f000 fda6 	bl	801580c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014cc0:	f001 fcc0 	bl	8016644 <vPortEnterCritical>
 8014cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014cca:	b25b      	sxtb	r3, r3
 8014ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cd0:	d103      	bne.n	8014cda <xQueueReceive+0x122>
 8014cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ce0:	b25b      	sxtb	r3, r3
 8014ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ce6:	d103      	bne.n	8014cf0 <xQueueReceive+0x138>
 8014ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cea:	2200      	movs	r2, #0
 8014cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014cf0:	f001 fcd8 	bl	80166a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014cf4:	1d3a      	adds	r2, r7, #4
 8014cf6:	f107 0310 	add.w	r3, r7, #16
 8014cfa:	4611      	mov	r1, r2
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f001 f807 	bl	8015d10 <xTaskCheckForTimeOut>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d123      	bne.n	8014d50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d0a:	f000 fade 	bl	80152ca <prvIsQueueEmpty>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d017      	beq.n	8014d44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d16:	3324      	adds	r3, #36	; 0x24
 8014d18:	687a      	ldr	r2, [r7, #4]
 8014d1a:	4611      	mov	r1, r2
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f000 ff5b 	bl	8015bd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d24:	f000 fa7f 	bl	8015226 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014d28:	f000 fd7e 	bl	8015828 <xTaskResumeAll>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d189      	bne.n	8014c46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014d32:	4b10      	ldr	r3, [pc, #64]	; (8014d74 <xQueueReceive+0x1bc>)
 8014d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d38:	601a      	str	r2, [r3, #0]
 8014d3a:	f3bf 8f4f 	dsb	sy
 8014d3e:	f3bf 8f6f 	isb	sy
 8014d42:	e780      	b.n	8014c46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d46:	f000 fa6e 	bl	8015226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014d4a:	f000 fd6d 	bl	8015828 <xTaskResumeAll>
 8014d4e:	e77a      	b.n	8014c46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d52:	f000 fa68 	bl	8015226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014d56:	f000 fd67 	bl	8015828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d5c:	f000 fab5 	bl	80152ca <prvIsQueueEmpty>
 8014d60:	4603      	mov	r3, r0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	f43f af6f 	beq.w	8014c46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014d68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3730      	adds	r7, #48	; 0x30
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	e000ed04 	.word	0xe000ed04

08014d78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b08e      	sub	sp, #56	; 0x38
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014d82:	2300      	movs	r3, #0
 8014d84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d10a      	bne.n	8014daa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8014d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d98:	f383 8811 	msr	BASEPRI, r3
 8014d9c:	f3bf 8f6f 	isb	sy
 8014da0:	f3bf 8f4f 	dsb	sy
 8014da4:	623b      	str	r3, [r7, #32]
}
 8014da6:	bf00      	nop
 8014da8:	e7fe      	b.n	8014da8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d00a      	beq.n	8014dc8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8014db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db6:	f383 8811 	msr	BASEPRI, r3
 8014dba:	f3bf 8f6f 	isb	sy
 8014dbe:	f3bf 8f4f 	dsb	sy
 8014dc2:	61fb      	str	r3, [r7, #28]
}
 8014dc4:	bf00      	nop
 8014dc6:	e7fe      	b.n	8014dc6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014dc8:	f001 f8ea 	bl	8015fa0 <xTaskGetSchedulerState>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d102      	bne.n	8014dd8 <xQueueSemaphoreTake+0x60>
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d101      	bne.n	8014ddc <xQueueSemaphoreTake+0x64>
 8014dd8:	2301      	movs	r3, #1
 8014dda:	e000      	b.n	8014dde <xQueueSemaphoreTake+0x66>
 8014ddc:	2300      	movs	r3, #0
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d10a      	bne.n	8014df8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8014de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de6:	f383 8811 	msr	BASEPRI, r3
 8014dea:	f3bf 8f6f 	isb	sy
 8014dee:	f3bf 8f4f 	dsb	sy
 8014df2:	61bb      	str	r3, [r7, #24]
}
 8014df4:	bf00      	nop
 8014df6:	e7fe      	b.n	8014df6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014df8:	f001 fc24 	bl	8016644 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d024      	beq.n	8014e52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e0a:	1e5a      	subs	r2, r3, #1
 8014e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d104      	bne.n	8014e22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014e18:	f001 fa6a 	bl	80162f0 <pvTaskIncrementMutexHeldCount>
 8014e1c:	4602      	mov	r2, r0
 8014e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e24:	691b      	ldr	r3, [r3, #16]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d00f      	beq.n	8014e4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2c:	3310      	adds	r3, #16
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f000 fef6 	bl	8015c20 <xTaskRemoveFromEventList>
 8014e34:	4603      	mov	r3, r0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d007      	beq.n	8014e4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014e3a:	4b54      	ldr	r3, [pc, #336]	; (8014f8c <xQueueSemaphoreTake+0x214>)
 8014e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e40:	601a      	str	r2, [r3, #0]
 8014e42:	f3bf 8f4f 	dsb	sy
 8014e46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014e4a:	f001 fc2b 	bl	80166a4 <vPortExitCritical>
				return pdPASS;
 8014e4e:	2301      	movs	r3, #1
 8014e50:	e097      	b.n	8014f82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d111      	bne.n	8014e7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00a      	beq.n	8014e74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8014e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e62:	f383 8811 	msr	BASEPRI, r3
 8014e66:	f3bf 8f6f 	isb	sy
 8014e6a:	f3bf 8f4f 	dsb	sy
 8014e6e:	617b      	str	r3, [r7, #20]
}
 8014e70:	bf00      	nop
 8014e72:	e7fe      	b.n	8014e72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014e74:	f001 fc16 	bl	80166a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	e082      	b.n	8014f82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d106      	bne.n	8014e90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e82:	f107 030c 	add.w	r3, r7, #12
 8014e86:	4618      	mov	r0, r3
 8014e88:	f000 ff2c 	bl	8015ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014e90:	f001 fc08 	bl	80166a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014e94:	f000 fcba 	bl	801580c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014e98:	f001 fbd4 	bl	8016644 <vPortEnterCritical>
 8014e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ea2:	b25b      	sxtb	r3, r3
 8014ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ea8:	d103      	bne.n	8014eb2 <xQueueSemaphoreTake+0x13a>
 8014eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eac:	2200      	movs	r2, #0
 8014eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014eb8:	b25b      	sxtb	r3, r3
 8014eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ebe:	d103      	bne.n	8014ec8 <xQueueSemaphoreTake+0x150>
 8014ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014ec8:	f001 fbec 	bl	80166a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014ecc:	463a      	mov	r2, r7
 8014ece:	f107 030c 	add.w	r3, r7, #12
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f000 ff1b 	bl	8015d10 <xTaskCheckForTimeOut>
 8014eda:	4603      	mov	r3, r0
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d132      	bne.n	8014f46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ee2:	f000 f9f2 	bl	80152ca <prvIsQueueEmpty>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d026      	beq.n	8014f3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d109      	bne.n	8014f08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8014ef4:	f001 fba6 	bl	8016644 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014efa:	689b      	ldr	r3, [r3, #8]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f001 f86d 	bl	8015fdc <xTaskPriorityInherit>
 8014f02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014f04:	f001 fbce 	bl	80166a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f0a:	3324      	adds	r3, #36	; 0x24
 8014f0c:	683a      	ldr	r2, [r7, #0]
 8014f0e:	4611      	mov	r1, r2
 8014f10:	4618      	mov	r0, r3
 8014f12:	f000 fe61 	bl	8015bd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f18:	f000 f985 	bl	8015226 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014f1c:	f000 fc84 	bl	8015828 <xTaskResumeAll>
 8014f20:	4603      	mov	r3, r0
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	f47f af68 	bne.w	8014df8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8014f28:	4b18      	ldr	r3, [pc, #96]	; (8014f8c <xQueueSemaphoreTake+0x214>)
 8014f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f2e:	601a      	str	r2, [r3, #0]
 8014f30:	f3bf 8f4f 	dsb	sy
 8014f34:	f3bf 8f6f 	isb	sy
 8014f38:	e75e      	b.n	8014df8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f3c:	f000 f973 	bl	8015226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f40:	f000 fc72 	bl	8015828 <xTaskResumeAll>
 8014f44:	e758      	b.n	8014df8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014f46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f48:	f000 f96d 	bl	8015226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f4c:	f000 fc6c 	bl	8015828 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014f50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f52:	f000 f9ba 	bl	80152ca <prvIsQueueEmpty>
 8014f56:	4603      	mov	r3, r0
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	f43f af4d 	beq.w	8014df8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d00d      	beq.n	8014f80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8014f64:	f001 fb6e 	bl	8016644 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f6a:	f000 f8b4 	bl	80150d6 <prvGetDisinheritPriorityAfterTimeout>
 8014f6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f72:	689b      	ldr	r3, [r3, #8]
 8014f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f76:	4618      	mov	r0, r3
 8014f78:	f001 f92c 	bl	80161d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014f7c:	f001 fb92 	bl	80166a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014f80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	3738      	adds	r7, #56	; 0x38
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	e000ed04 	.word	0xe000ed04

08014f90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b08e      	sub	sp, #56	; 0x38
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	60f8      	str	r0, [r7, #12]
 8014f98:	60b9      	str	r1, [r7, #8]
 8014f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d10a      	bne.n	8014fbc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014faa:	f383 8811 	msr	BASEPRI, r3
 8014fae:	f3bf 8f6f 	isb	sy
 8014fb2:	f3bf 8f4f 	dsb	sy
 8014fb6:	623b      	str	r3, [r7, #32]
}
 8014fb8:	bf00      	nop
 8014fba:	e7fe      	b.n	8014fba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d103      	bne.n	8014fca <xQueueReceiveFromISR+0x3a>
 8014fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d101      	bne.n	8014fce <xQueueReceiveFromISR+0x3e>
 8014fca:	2301      	movs	r3, #1
 8014fcc:	e000      	b.n	8014fd0 <xQueueReceiveFromISR+0x40>
 8014fce:	2300      	movs	r3, #0
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d10a      	bne.n	8014fea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd8:	f383 8811 	msr	BASEPRI, r3
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f3bf 8f4f 	dsb	sy
 8014fe4:	61fb      	str	r3, [r7, #28]
}
 8014fe6:	bf00      	nop
 8014fe8:	e7fe      	b.n	8014fe8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014fea:	f001 fc0d 	bl	8016808 <vPortValidateInterruptPriority>
	__asm volatile
 8014fee:	f3ef 8211 	mrs	r2, BASEPRI
 8014ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff6:	f383 8811 	msr	BASEPRI, r3
 8014ffa:	f3bf 8f6f 	isb	sy
 8014ffe:	f3bf 8f4f 	dsb	sy
 8015002:	61ba      	str	r2, [r7, #24]
 8015004:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015006:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015008:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801500e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015012:	2b00      	cmp	r3, #0
 8015014:	d02f      	beq.n	8015076 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801501c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015020:	68b9      	ldr	r1, [r7, #8]
 8015022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015024:	f000 f8d9 	bl	80151da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502a:	1e5a      	subs	r2, r3, #1
 801502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801502e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015030:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015038:	d112      	bne.n	8015060 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503c:	691b      	ldr	r3, [r3, #16]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d016      	beq.n	8015070 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015044:	3310      	adds	r3, #16
 8015046:	4618      	mov	r0, r3
 8015048:	f000 fdea 	bl	8015c20 <xTaskRemoveFromEventList>
 801504c:	4603      	mov	r3, r0
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00e      	beq.n	8015070 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d00b      	beq.n	8015070 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2201      	movs	r2, #1
 801505c:	601a      	str	r2, [r3, #0]
 801505e:	e007      	b.n	8015070 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015064:	3301      	adds	r3, #1
 8015066:	b2db      	uxtb	r3, r3
 8015068:	b25a      	sxtb	r2, r3
 801506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801506c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015070:	2301      	movs	r3, #1
 8015072:	637b      	str	r3, [r7, #52]	; 0x34
 8015074:	e001      	b.n	801507a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015076:	2300      	movs	r3, #0
 8015078:	637b      	str	r3, [r7, #52]	; 0x34
 801507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801507c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	f383 8811 	msr	BASEPRI, r3
}
 8015084:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015088:	4618      	mov	r0, r3
 801508a:	3738      	adds	r7, #56	; 0x38
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d10a      	bne.n	80150b8 <vQueueDelete+0x28>
	__asm volatile
 80150a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a6:	f383 8811 	msr	BASEPRI, r3
 80150aa:	f3bf 8f6f 	isb	sy
 80150ae:	f3bf 8f4f 	dsb	sy
 80150b2:	60bb      	str	r3, [r7, #8]
}
 80150b4:	bf00      	nop
 80150b6:	e7fe      	b.n	80150b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80150b8:	68f8      	ldr	r0, [r7, #12]
 80150ba:	f000 f935 	bl	8015328 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d102      	bne.n	80150ce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80150c8:	68f8      	ldr	r0, [r7, #12]
 80150ca:	f001 fca9 	bl	8016a20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80150ce:	bf00      	nop
 80150d0:	3710      	adds	r7, #16
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}

080150d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80150d6:	b480      	push	{r7}
 80150d8:	b085      	sub	sp, #20
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d006      	beq.n	80150f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	f1c3 0307 	rsb	r3, r3, #7
 80150f0:	60fb      	str	r3, [r7, #12]
 80150f2:	e001      	b.n	80150f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80150f4:	2300      	movs	r3, #0
 80150f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80150f8:	68fb      	ldr	r3, [r7, #12]
	}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3714      	adds	r7, #20
 80150fe:	46bd      	mov	sp, r7
 8015100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015104:	4770      	bx	lr

08015106 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015106:	b580      	push	{r7, lr}
 8015108:	b086      	sub	sp, #24
 801510a:	af00      	add	r7, sp, #0
 801510c:	60f8      	str	r0, [r7, #12]
 801510e:	60b9      	str	r1, [r7, #8]
 8015110:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015112:	2300      	movs	r3, #0
 8015114:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801511a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015120:	2b00      	cmp	r3, #0
 8015122:	d10d      	bne.n	8015140 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d14d      	bne.n	80151c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	689b      	ldr	r3, [r3, #8]
 8015130:	4618      	mov	r0, r3
 8015132:	f000 ffc9 	bl	80160c8 <xTaskPriorityDisinherit>
 8015136:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2200      	movs	r2, #0
 801513c:	609a      	str	r2, [r3, #8]
 801513e:	e043      	b.n	80151c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d119      	bne.n	801517a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	6858      	ldr	r0, [r3, #4]
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801514e:	461a      	mov	r2, r3
 8015150:	68b9      	ldr	r1, [r7, #8]
 8015152:	f003 fa59 	bl	8018608 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	685a      	ldr	r2, [r3, #4]
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801515e:	441a      	add	r2, r3
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	685a      	ldr	r2, [r3, #4]
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	689b      	ldr	r3, [r3, #8]
 801516c:	429a      	cmp	r2, r3
 801516e:	d32b      	bcc.n	80151c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	605a      	str	r2, [r3, #4]
 8015178:	e026      	b.n	80151c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	68d8      	ldr	r0, [r3, #12]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015182:	461a      	mov	r2, r3
 8015184:	68b9      	ldr	r1, [r7, #8]
 8015186:	f003 fa3f 	bl	8018608 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	68da      	ldr	r2, [r3, #12]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015192:	425b      	negs	r3, r3
 8015194:	441a      	add	r2, r3
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	68da      	ldr	r2, [r3, #12]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d207      	bcs.n	80151b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	689a      	ldr	r2, [r3, #8]
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151ae:	425b      	negs	r3, r3
 80151b0:	441a      	add	r2, r3
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2b02      	cmp	r3, #2
 80151ba:	d105      	bne.n	80151c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d002      	beq.n	80151c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	3b01      	subs	r3, #1
 80151c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	1c5a      	adds	r2, r3, #1
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80151d0:	697b      	ldr	r3, [r7, #20]
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3718      	adds	r7, #24
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}

080151da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80151da:	b580      	push	{r7, lr}
 80151dc:	b082      	sub	sp, #8
 80151de:	af00      	add	r7, sp, #0
 80151e0:	6078      	str	r0, [r7, #4]
 80151e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d018      	beq.n	801521e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	68da      	ldr	r2, [r3, #12]
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151f4:	441a      	add	r2, r3
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	68da      	ldr	r2, [r3, #12]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	689b      	ldr	r3, [r3, #8]
 8015202:	429a      	cmp	r2, r3
 8015204:	d303      	bcc.n	801520e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681a      	ldr	r2, [r3, #0]
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	68d9      	ldr	r1, [r3, #12]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015216:	461a      	mov	r2, r3
 8015218:	6838      	ldr	r0, [r7, #0]
 801521a:	f003 f9f5 	bl	8018608 <memcpy>
	}
}
 801521e:	bf00      	nop
 8015220:	3708      	adds	r7, #8
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}

08015226 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015226:	b580      	push	{r7, lr}
 8015228:	b084      	sub	sp, #16
 801522a:	af00      	add	r7, sp, #0
 801522c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801522e:	f001 fa09 	bl	8016644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015238:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801523a:	e011      	b.n	8015260 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015240:	2b00      	cmp	r3, #0
 8015242:	d012      	beq.n	801526a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	3324      	adds	r3, #36	; 0x24
 8015248:	4618      	mov	r0, r3
 801524a:	f000 fce9 	bl	8015c20 <xTaskRemoveFromEventList>
 801524e:	4603      	mov	r3, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	d001      	beq.n	8015258 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015254:	f000 fdbe 	bl	8015dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015258:	7bfb      	ldrb	r3, [r7, #15]
 801525a:	3b01      	subs	r3, #1
 801525c:	b2db      	uxtb	r3, r3
 801525e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015264:	2b00      	cmp	r3, #0
 8015266:	dce9      	bgt.n	801523c <prvUnlockQueue+0x16>
 8015268:	e000      	b.n	801526c <prvUnlockQueue+0x46>
					break;
 801526a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	22ff      	movs	r2, #255	; 0xff
 8015270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015274:	f001 fa16 	bl	80166a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015278:	f001 f9e4 	bl	8016644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015282:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015284:	e011      	b.n	80152aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	691b      	ldr	r3, [r3, #16]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d012      	beq.n	80152b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	3310      	adds	r3, #16
 8015292:	4618      	mov	r0, r3
 8015294:	f000 fcc4 	bl	8015c20 <xTaskRemoveFromEventList>
 8015298:	4603      	mov	r3, r0
 801529a:	2b00      	cmp	r3, #0
 801529c:	d001      	beq.n	80152a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801529e:	f000 fd99 	bl	8015dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80152a2:	7bbb      	ldrb	r3, [r7, #14]
 80152a4:	3b01      	subs	r3, #1
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80152aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	dce9      	bgt.n	8015286 <prvUnlockQueue+0x60>
 80152b2:	e000      	b.n	80152b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80152b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	22ff      	movs	r2, #255	; 0xff
 80152ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80152be:	f001 f9f1 	bl	80166a4 <vPortExitCritical>
}
 80152c2:	bf00      	nop
 80152c4:	3710      	adds	r7, #16
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}

080152ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80152ca:	b580      	push	{r7, lr}
 80152cc:	b084      	sub	sp, #16
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80152d2:	f001 f9b7 	bl	8016644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d102      	bne.n	80152e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80152de:	2301      	movs	r3, #1
 80152e0:	60fb      	str	r3, [r7, #12]
 80152e2:	e001      	b.n	80152e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80152e4:	2300      	movs	r3, #0
 80152e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80152e8:	f001 f9dc 	bl	80166a4 <vPortExitCritical>

	return xReturn;
 80152ec:	68fb      	ldr	r3, [r7, #12]
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3710      	adds	r7, #16
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}

080152f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80152f6:	b580      	push	{r7, lr}
 80152f8:	b084      	sub	sp, #16
 80152fa:	af00      	add	r7, sp, #0
 80152fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80152fe:	f001 f9a1 	bl	8016644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801530a:	429a      	cmp	r2, r3
 801530c:	d102      	bne.n	8015314 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801530e:	2301      	movs	r3, #1
 8015310:	60fb      	str	r3, [r7, #12]
 8015312:	e001      	b.n	8015318 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015314:	2300      	movs	r3, #0
 8015316:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015318:	f001 f9c4 	bl	80166a4 <vPortExitCritical>

	return xReturn;
 801531c:	68fb      	ldr	r3, [r7, #12]
}
 801531e:	4618      	mov	r0, r3
 8015320:	3710      	adds	r7, #16
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
	...

08015328 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015328:	b480      	push	{r7}
 801532a:	b085      	sub	sp, #20
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015330:	2300      	movs	r3, #0
 8015332:	60fb      	str	r3, [r7, #12]
 8015334:	e016      	b.n	8015364 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015336:	4a10      	ldr	r2, [pc, #64]	; (8015378 <vQueueUnregisterQueue+0x50>)
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	00db      	lsls	r3, r3, #3
 801533c:	4413      	add	r3, r2
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	687a      	ldr	r2, [r7, #4]
 8015342:	429a      	cmp	r2, r3
 8015344:	d10b      	bne.n	801535e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015346:	4a0c      	ldr	r2, [pc, #48]	; (8015378 <vQueueUnregisterQueue+0x50>)
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2100      	movs	r1, #0
 801534c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015350:	4a09      	ldr	r2, [pc, #36]	; (8015378 <vQueueUnregisterQueue+0x50>)
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	00db      	lsls	r3, r3, #3
 8015356:	4413      	add	r3, r2
 8015358:	2200      	movs	r2, #0
 801535a:	605a      	str	r2, [r3, #4]
				break;
 801535c:	e006      	b.n	801536c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	3301      	adds	r3, #1
 8015362:	60fb      	str	r3, [r7, #12]
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	2b07      	cmp	r3, #7
 8015368:	d9e5      	bls.n	8015336 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801536a:	bf00      	nop
 801536c:	bf00      	nop
 801536e:	3714      	adds	r7, #20
 8015370:	46bd      	mov	sp, r7
 8015372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015376:	4770      	bx	lr
 8015378:	20006838 	.word	0x20006838

0801537c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801537c:	b580      	push	{r7, lr}
 801537e:	b08e      	sub	sp, #56	; 0x38
 8015380:	af04      	add	r7, sp, #16
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	60b9      	str	r1, [r7, #8]
 8015386:	607a      	str	r2, [r7, #4]
 8015388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801538c:	2b00      	cmp	r3, #0
 801538e:	d10a      	bne.n	80153a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8015390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015394:	f383 8811 	msr	BASEPRI, r3
 8015398:	f3bf 8f6f 	isb	sy
 801539c:	f3bf 8f4f 	dsb	sy
 80153a0:	623b      	str	r3, [r7, #32]
}
 80153a2:	bf00      	nop
 80153a4:	e7fe      	b.n	80153a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80153a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d10a      	bne.n	80153c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80153ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153b0:	f383 8811 	msr	BASEPRI, r3
 80153b4:	f3bf 8f6f 	isb	sy
 80153b8:	f3bf 8f4f 	dsb	sy
 80153bc:	61fb      	str	r3, [r7, #28]
}
 80153be:	bf00      	nop
 80153c0:	e7fe      	b.n	80153c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80153c2:	23a0      	movs	r3, #160	; 0xa0
 80153c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	2ba0      	cmp	r3, #160	; 0xa0
 80153ca:	d00a      	beq.n	80153e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80153cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d0:	f383 8811 	msr	BASEPRI, r3
 80153d4:	f3bf 8f6f 	isb	sy
 80153d8:	f3bf 8f4f 	dsb	sy
 80153dc:	61bb      	str	r3, [r7, #24]
}
 80153de:	bf00      	nop
 80153e0:	e7fe      	b.n	80153e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80153e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80153e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d01e      	beq.n	8015428 <xTaskCreateStatic+0xac>
 80153ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d01b      	beq.n	8015428 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80153f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80153f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80153f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80153fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fc:	2202      	movs	r2, #2
 80153fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015402:	2300      	movs	r3, #0
 8015404:	9303      	str	r3, [sp, #12]
 8015406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015408:	9302      	str	r3, [sp, #8]
 801540a:	f107 0314 	add.w	r3, r7, #20
 801540e:	9301      	str	r3, [sp, #4]
 8015410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015412:	9300      	str	r3, [sp, #0]
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	687a      	ldr	r2, [r7, #4]
 8015418:	68b9      	ldr	r1, [r7, #8]
 801541a:	68f8      	ldr	r0, [r7, #12]
 801541c:	f000 f850 	bl	80154c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015422:	f000 f8eb 	bl	80155fc <prvAddNewTaskToReadyList>
 8015426:	e001      	b.n	801542c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8015428:	2300      	movs	r3, #0
 801542a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801542c:	697b      	ldr	r3, [r7, #20]
	}
 801542e:	4618      	mov	r0, r3
 8015430:	3728      	adds	r7, #40	; 0x28
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015436:	b580      	push	{r7, lr}
 8015438:	b08c      	sub	sp, #48	; 0x30
 801543a:	af04      	add	r7, sp, #16
 801543c:	60f8      	str	r0, [r7, #12]
 801543e:	60b9      	str	r1, [r7, #8]
 8015440:	603b      	str	r3, [r7, #0]
 8015442:	4613      	mov	r3, r2
 8015444:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015446:	88fb      	ldrh	r3, [r7, #6]
 8015448:	009b      	lsls	r3, r3, #2
 801544a:	4618      	mov	r0, r3
 801544c:	f001 fa1c 	bl	8016888 <pvPortMalloc>
 8015450:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d00e      	beq.n	8015476 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015458:	20a0      	movs	r0, #160	; 0xa0
 801545a:	f001 fa15 	bl	8016888 <pvPortMalloc>
 801545e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015460:	69fb      	ldr	r3, [r7, #28]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d003      	beq.n	801546e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	697a      	ldr	r2, [r7, #20]
 801546a:	631a      	str	r2, [r3, #48]	; 0x30
 801546c:	e005      	b.n	801547a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801546e:	6978      	ldr	r0, [r7, #20]
 8015470:	f001 fad6 	bl	8016a20 <vPortFree>
 8015474:	e001      	b.n	801547a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015476:	2300      	movs	r3, #0
 8015478:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d017      	beq.n	80154b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015480:	69fb      	ldr	r3, [r7, #28]
 8015482:	2200      	movs	r2, #0
 8015484:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015488:	88fa      	ldrh	r2, [r7, #6]
 801548a:	2300      	movs	r3, #0
 801548c:	9303      	str	r3, [sp, #12]
 801548e:	69fb      	ldr	r3, [r7, #28]
 8015490:	9302      	str	r3, [sp, #8]
 8015492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015494:	9301      	str	r3, [sp, #4]
 8015496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015498:	9300      	str	r3, [sp, #0]
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	68b9      	ldr	r1, [r7, #8]
 801549e:	68f8      	ldr	r0, [r7, #12]
 80154a0:	f000 f80e 	bl	80154c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80154a4:	69f8      	ldr	r0, [r7, #28]
 80154a6:	f000 f8a9 	bl	80155fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80154aa:	2301      	movs	r3, #1
 80154ac:	61bb      	str	r3, [r7, #24]
 80154ae:	e002      	b.n	80154b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80154b0:	f04f 33ff 	mov.w	r3, #4294967295
 80154b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80154b6:	69bb      	ldr	r3, [r7, #24]
	}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3720      	adds	r7, #32
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}

080154c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b088      	sub	sp, #32
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	607a      	str	r2, [r7, #4]
 80154cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80154ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80154d8:	3b01      	subs	r3, #1
 80154da:	009b      	lsls	r3, r3, #2
 80154dc:	4413      	add	r3, r2
 80154de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80154e0:	69bb      	ldr	r3, [r7, #24]
 80154e2:	f023 0307 	bic.w	r3, r3, #7
 80154e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	f003 0307 	and.w	r3, r3, #7
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d00a      	beq.n	8015508 <prvInitialiseNewTask+0x48>
	__asm volatile
 80154f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f6:	f383 8811 	msr	BASEPRI, r3
 80154fa:	f3bf 8f6f 	isb	sy
 80154fe:	f3bf 8f4f 	dsb	sy
 8015502:	617b      	str	r3, [r7, #20]
}
 8015504:	bf00      	nop
 8015506:	e7fe      	b.n	8015506 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d01f      	beq.n	801554e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801550e:	2300      	movs	r3, #0
 8015510:	61fb      	str	r3, [r7, #28]
 8015512:	e012      	b.n	801553a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015514:	68ba      	ldr	r2, [r7, #8]
 8015516:	69fb      	ldr	r3, [r7, #28]
 8015518:	4413      	add	r3, r2
 801551a:	7819      	ldrb	r1, [r3, #0]
 801551c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801551e:	69fb      	ldr	r3, [r7, #28]
 8015520:	4413      	add	r3, r2
 8015522:	3334      	adds	r3, #52	; 0x34
 8015524:	460a      	mov	r2, r1
 8015526:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015528:	68ba      	ldr	r2, [r7, #8]
 801552a:	69fb      	ldr	r3, [r7, #28]
 801552c:	4413      	add	r3, r2
 801552e:	781b      	ldrb	r3, [r3, #0]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d006      	beq.n	8015542 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015534:	69fb      	ldr	r3, [r7, #28]
 8015536:	3301      	adds	r3, #1
 8015538:	61fb      	str	r3, [r7, #28]
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	2b0f      	cmp	r3, #15
 801553e:	d9e9      	bls.n	8015514 <prvInitialiseNewTask+0x54>
 8015540:	e000      	b.n	8015544 <prvInitialiseNewTask+0x84>
			{
				break;
 8015542:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015546:	2200      	movs	r2, #0
 8015548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801554c:	e003      	b.n	8015556 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015550:	2200      	movs	r2, #0
 8015552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015558:	2b06      	cmp	r3, #6
 801555a:	d901      	bls.n	8015560 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801555c:	2306      	movs	r3, #6
 801555e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015564:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801556a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801556e:	2200      	movs	r2, #0
 8015570:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015574:	3304      	adds	r3, #4
 8015576:	4618      	mov	r0, r3
 8015578:	f7fe ff2a 	bl	80143d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557e:	3318      	adds	r3, #24
 8015580:	4618      	mov	r0, r3
 8015582:	f7fe ff25 	bl	80143d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801558a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558e:	f1c3 0207 	rsb	r2, r3, #7
 8015592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015594:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801559a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801559e:	2200      	movs	r2, #0
 80155a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80155a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155a6:	2200      	movs	r2, #0
 80155a8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80155ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ae:	334c      	adds	r3, #76	; 0x4c
 80155b0:	224c      	movs	r2, #76	; 0x4c
 80155b2:	2100      	movs	r1, #0
 80155b4:	4618      	mov	r0, r3
 80155b6:	f002 ff53 	bl	8018460 <memset>
 80155ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155bc:	4a0c      	ldr	r2, [pc, #48]	; (80155f0 <prvInitialiseNewTask+0x130>)
 80155be:	651a      	str	r2, [r3, #80]	; 0x50
 80155c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c2:	4a0c      	ldr	r2, [pc, #48]	; (80155f4 <prvInitialiseNewTask+0x134>)
 80155c4:	655a      	str	r2, [r3, #84]	; 0x54
 80155c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c8:	4a0b      	ldr	r2, [pc, #44]	; (80155f8 <prvInitialiseNewTask+0x138>)
 80155ca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80155cc:	683a      	ldr	r2, [r7, #0]
 80155ce:	68f9      	ldr	r1, [r7, #12]
 80155d0:	69b8      	ldr	r0, [r7, #24]
 80155d2:	f000 ff07 	bl	80163e4 <pxPortInitialiseStack>
 80155d6:	4602      	mov	r2, r0
 80155d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80155dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d002      	beq.n	80155e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80155e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80155e8:	bf00      	nop
 80155ea:	3720      	adds	r7, #32
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}
 80155f0:	2000b22c 	.word	0x2000b22c
 80155f4:	2000b294 	.word	0x2000b294
 80155f8:	2000b2fc 	.word	0x2000b2fc

080155fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015604:	f001 f81e 	bl	8016644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015608:	4b2a      	ldr	r3, [pc, #168]	; (80156b4 <prvAddNewTaskToReadyList+0xb8>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	3301      	adds	r3, #1
 801560e:	4a29      	ldr	r2, [pc, #164]	; (80156b4 <prvAddNewTaskToReadyList+0xb8>)
 8015610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015612:	4b29      	ldr	r3, [pc, #164]	; (80156b8 <prvAddNewTaskToReadyList+0xbc>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d109      	bne.n	801562e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801561a:	4a27      	ldr	r2, [pc, #156]	; (80156b8 <prvAddNewTaskToReadyList+0xbc>)
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015620:	4b24      	ldr	r3, [pc, #144]	; (80156b4 <prvAddNewTaskToReadyList+0xb8>)
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	2b01      	cmp	r3, #1
 8015626:	d110      	bne.n	801564a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015628:	f000 fbf8 	bl	8015e1c <prvInitialiseTaskLists>
 801562c:	e00d      	b.n	801564a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801562e:	4b23      	ldr	r3, [pc, #140]	; (80156bc <prvAddNewTaskToReadyList+0xc0>)
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d109      	bne.n	801564a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015636:	4b20      	ldr	r3, [pc, #128]	; (80156b8 <prvAddNewTaskToReadyList+0xbc>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015640:	429a      	cmp	r2, r3
 8015642:	d802      	bhi.n	801564a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015644:	4a1c      	ldr	r2, [pc, #112]	; (80156b8 <prvAddNewTaskToReadyList+0xbc>)
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801564a:	4b1d      	ldr	r3, [pc, #116]	; (80156c0 <prvAddNewTaskToReadyList+0xc4>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	3301      	adds	r3, #1
 8015650:	4a1b      	ldr	r2, [pc, #108]	; (80156c0 <prvAddNewTaskToReadyList+0xc4>)
 8015652:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015658:	2201      	movs	r2, #1
 801565a:	409a      	lsls	r2, r3
 801565c:	4b19      	ldr	r3, [pc, #100]	; (80156c4 <prvAddNewTaskToReadyList+0xc8>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	4313      	orrs	r3, r2
 8015662:	4a18      	ldr	r2, [pc, #96]	; (80156c4 <prvAddNewTaskToReadyList+0xc8>)
 8015664:	6013      	str	r3, [r2, #0]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801566a:	4613      	mov	r3, r2
 801566c:	009b      	lsls	r3, r3, #2
 801566e:	4413      	add	r3, r2
 8015670:	009b      	lsls	r3, r3, #2
 8015672:	4a15      	ldr	r2, [pc, #84]	; (80156c8 <prvAddNewTaskToReadyList+0xcc>)
 8015674:	441a      	add	r2, r3
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	3304      	adds	r3, #4
 801567a:	4619      	mov	r1, r3
 801567c:	4610      	mov	r0, r2
 801567e:	f7fe feb4 	bl	80143ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015682:	f001 f80f 	bl	80166a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015686:	4b0d      	ldr	r3, [pc, #52]	; (80156bc <prvAddNewTaskToReadyList+0xc0>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d00e      	beq.n	80156ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801568e:	4b0a      	ldr	r3, [pc, #40]	; (80156b8 <prvAddNewTaskToReadyList+0xbc>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015698:	429a      	cmp	r2, r3
 801569a:	d207      	bcs.n	80156ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801569c:	4b0b      	ldr	r3, [pc, #44]	; (80156cc <prvAddNewTaskToReadyList+0xd0>)
 801569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156a2:	601a      	str	r2, [r3, #0]
 80156a4:	f3bf 8f4f 	dsb	sy
 80156a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80156ac:	bf00      	nop
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	20006978 	.word	0x20006978
 80156b8:	20006878 	.word	0x20006878
 80156bc:	20006984 	.word	0x20006984
 80156c0:	20006994 	.word	0x20006994
 80156c4:	20006980 	.word	0x20006980
 80156c8:	2000687c 	.word	0x2000687c
 80156cc:	e000ed04 	.word	0xe000ed04

080156d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b084      	sub	sp, #16
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80156d8:	2300      	movs	r3, #0
 80156da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d017      	beq.n	8015712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80156e2:	4b13      	ldr	r3, [pc, #76]	; (8015730 <vTaskDelay+0x60>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d00a      	beq.n	8015700 <vTaskDelay+0x30>
	__asm volatile
 80156ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ee:	f383 8811 	msr	BASEPRI, r3
 80156f2:	f3bf 8f6f 	isb	sy
 80156f6:	f3bf 8f4f 	dsb	sy
 80156fa:	60bb      	str	r3, [r7, #8]
}
 80156fc:	bf00      	nop
 80156fe:	e7fe      	b.n	80156fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015700:	f000 f884 	bl	801580c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015704:	2100      	movs	r1, #0
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f000 fe06 	bl	8016318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801570c:	f000 f88c 	bl	8015828 <xTaskResumeAll>
 8015710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d107      	bne.n	8015728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015718:	4b06      	ldr	r3, [pc, #24]	; (8015734 <vTaskDelay+0x64>)
 801571a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801571e:	601a      	str	r2, [r3, #0]
 8015720:	f3bf 8f4f 	dsb	sy
 8015724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015728:	bf00      	nop
 801572a:	3710      	adds	r7, #16
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	200069a0 	.word	0x200069a0
 8015734:	e000ed04 	.word	0xe000ed04

08015738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b08a      	sub	sp, #40	; 0x28
 801573c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801573e:	2300      	movs	r3, #0
 8015740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015742:	2300      	movs	r3, #0
 8015744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015746:	463a      	mov	r2, r7
 8015748:	1d39      	adds	r1, r7, #4
 801574a:	f107 0308 	add.w	r3, r7, #8
 801574e:	4618      	mov	r0, r3
 8015750:	f7ec f844 	bl	80017dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015754:	6839      	ldr	r1, [r7, #0]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	68ba      	ldr	r2, [r7, #8]
 801575a:	9202      	str	r2, [sp, #8]
 801575c:	9301      	str	r3, [sp, #4]
 801575e:	2300      	movs	r3, #0
 8015760:	9300      	str	r3, [sp, #0]
 8015762:	2300      	movs	r3, #0
 8015764:	460a      	mov	r2, r1
 8015766:	4921      	ldr	r1, [pc, #132]	; (80157ec <vTaskStartScheduler+0xb4>)
 8015768:	4821      	ldr	r0, [pc, #132]	; (80157f0 <vTaskStartScheduler+0xb8>)
 801576a:	f7ff fe07 	bl	801537c <xTaskCreateStatic>
 801576e:	4603      	mov	r3, r0
 8015770:	4a20      	ldr	r2, [pc, #128]	; (80157f4 <vTaskStartScheduler+0xbc>)
 8015772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015774:	4b1f      	ldr	r3, [pc, #124]	; (80157f4 <vTaskStartScheduler+0xbc>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d002      	beq.n	8015782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801577c:	2301      	movs	r3, #1
 801577e:	617b      	str	r3, [r7, #20]
 8015780:	e001      	b.n	8015786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015782:	2300      	movs	r3, #0
 8015784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	2b01      	cmp	r3, #1
 801578a:	d11b      	bne.n	80157c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 801578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015790:	f383 8811 	msr	BASEPRI, r3
 8015794:	f3bf 8f6f 	isb	sy
 8015798:	f3bf 8f4f 	dsb	sy
 801579c:	613b      	str	r3, [r7, #16]
}
 801579e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80157a0:	4b15      	ldr	r3, [pc, #84]	; (80157f8 <vTaskStartScheduler+0xc0>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	334c      	adds	r3, #76	; 0x4c
 80157a6:	4a15      	ldr	r2, [pc, #84]	; (80157fc <vTaskStartScheduler+0xc4>)
 80157a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80157aa:	4b15      	ldr	r3, [pc, #84]	; (8015800 <vTaskStartScheduler+0xc8>)
 80157ac:	f04f 32ff 	mov.w	r2, #4294967295
 80157b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80157b2:	4b14      	ldr	r3, [pc, #80]	; (8015804 <vTaskStartScheduler+0xcc>)
 80157b4:	2201      	movs	r2, #1
 80157b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80157b8:	4b13      	ldr	r3, [pc, #76]	; (8015808 <vTaskStartScheduler+0xd0>)
 80157ba:	2200      	movs	r2, #0
 80157bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80157be:	f000 fe9f 	bl	8016500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80157c2:	e00e      	b.n	80157e2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157ca:	d10a      	bne.n	80157e2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80157cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d0:	f383 8811 	msr	BASEPRI, r3
 80157d4:	f3bf 8f6f 	isb	sy
 80157d8:	f3bf 8f4f 	dsb	sy
 80157dc:	60fb      	str	r3, [r7, #12]
}
 80157de:	bf00      	nop
 80157e0:	e7fe      	b.n	80157e0 <vTaskStartScheduler+0xa8>
}
 80157e2:	bf00      	nop
 80157e4:	3718      	adds	r7, #24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	0801a958 	.word	0x0801a958
 80157f0:	08015ded 	.word	0x08015ded
 80157f4:	2000699c 	.word	0x2000699c
 80157f8:	20006878 	.word	0x20006878
 80157fc:	200001a4 	.word	0x200001a4
 8015800:	20006998 	.word	0x20006998
 8015804:	20006984 	.word	0x20006984
 8015808:	2000697c 	.word	0x2000697c

0801580c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801580c:	b480      	push	{r7}
 801580e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015810:	4b04      	ldr	r3, [pc, #16]	; (8015824 <vTaskSuspendAll+0x18>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	3301      	adds	r3, #1
 8015816:	4a03      	ldr	r2, [pc, #12]	; (8015824 <vTaskSuspendAll+0x18>)
 8015818:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801581a:	bf00      	nop
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr
 8015824:	200069a0 	.word	0x200069a0

08015828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b084      	sub	sp, #16
 801582c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801582e:	2300      	movs	r3, #0
 8015830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015832:	2300      	movs	r3, #0
 8015834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015836:	4b41      	ldr	r3, [pc, #260]	; (801593c <xTaskResumeAll+0x114>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d10a      	bne.n	8015854 <xTaskResumeAll+0x2c>
	__asm volatile
 801583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015842:	f383 8811 	msr	BASEPRI, r3
 8015846:	f3bf 8f6f 	isb	sy
 801584a:	f3bf 8f4f 	dsb	sy
 801584e:	603b      	str	r3, [r7, #0]
}
 8015850:	bf00      	nop
 8015852:	e7fe      	b.n	8015852 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015854:	f000 fef6 	bl	8016644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015858:	4b38      	ldr	r3, [pc, #224]	; (801593c <xTaskResumeAll+0x114>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	3b01      	subs	r3, #1
 801585e:	4a37      	ldr	r2, [pc, #220]	; (801593c <xTaskResumeAll+0x114>)
 8015860:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015862:	4b36      	ldr	r3, [pc, #216]	; (801593c <xTaskResumeAll+0x114>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d161      	bne.n	801592e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801586a:	4b35      	ldr	r3, [pc, #212]	; (8015940 <xTaskResumeAll+0x118>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d05d      	beq.n	801592e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015872:	e02e      	b.n	80158d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015874:	4b33      	ldr	r3, [pc, #204]	; (8015944 <xTaskResumeAll+0x11c>)
 8015876:	68db      	ldr	r3, [r3, #12]
 8015878:	68db      	ldr	r3, [r3, #12]
 801587a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	3318      	adds	r3, #24
 8015880:	4618      	mov	r0, r3
 8015882:	f7fe fe0f 	bl	80144a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	3304      	adds	r3, #4
 801588a:	4618      	mov	r0, r3
 801588c:	f7fe fe0a 	bl	80144a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015894:	2201      	movs	r2, #1
 8015896:	409a      	lsls	r2, r3
 8015898:	4b2b      	ldr	r3, [pc, #172]	; (8015948 <xTaskResumeAll+0x120>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	4313      	orrs	r3, r2
 801589e:	4a2a      	ldr	r2, [pc, #168]	; (8015948 <xTaskResumeAll+0x120>)
 80158a0:	6013      	str	r3, [r2, #0]
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158a6:	4613      	mov	r3, r2
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	4413      	add	r3, r2
 80158ac:	009b      	lsls	r3, r3, #2
 80158ae:	4a27      	ldr	r2, [pc, #156]	; (801594c <xTaskResumeAll+0x124>)
 80158b0:	441a      	add	r2, r3
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	3304      	adds	r3, #4
 80158b6:	4619      	mov	r1, r3
 80158b8:	4610      	mov	r0, r2
 80158ba:	f7fe fd96 	bl	80143ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158c2:	4b23      	ldr	r3, [pc, #140]	; (8015950 <xTaskResumeAll+0x128>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d302      	bcc.n	80158d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80158cc:	4b21      	ldr	r3, [pc, #132]	; (8015954 <xTaskResumeAll+0x12c>)
 80158ce:	2201      	movs	r2, #1
 80158d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80158d2:	4b1c      	ldr	r3, [pc, #112]	; (8015944 <xTaskResumeAll+0x11c>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d1cc      	bne.n	8015874 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d001      	beq.n	80158e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80158e0:	f000 fb3e 	bl	8015f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80158e4:	4b1c      	ldr	r3, [pc, #112]	; (8015958 <xTaskResumeAll+0x130>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d010      	beq.n	8015912 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80158f0:	f000 f858 	bl	80159a4 <xTaskIncrementTick>
 80158f4:	4603      	mov	r3, r0
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d002      	beq.n	8015900 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80158fa:	4b16      	ldr	r3, [pc, #88]	; (8015954 <xTaskResumeAll+0x12c>)
 80158fc:	2201      	movs	r2, #1
 80158fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	3b01      	subs	r3, #1
 8015904:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d1f1      	bne.n	80158f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801590c:	4b12      	ldr	r3, [pc, #72]	; (8015958 <xTaskResumeAll+0x130>)
 801590e:	2200      	movs	r2, #0
 8015910:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015912:	4b10      	ldr	r3, [pc, #64]	; (8015954 <xTaskResumeAll+0x12c>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d009      	beq.n	801592e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801591a:	2301      	movs	r3, #1
 801591c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801591e:	4b0f      	ldr	r3, [pc, #60]	; (801595c <xTaskResumeAll+0x134>)
 8015920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	f3bf 8f4f 	dsb	sy
 801592a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801592e:	f000 feb9 	bl	80166a4 <vPortExitCritical>

	return xAlreadyYielded;
 8015932:	68bb      	ldr	r3, [r7, #8]
}
 8015934:	4618      	mov	r0, r3
 8015936:	3710      	adds	r7, #16
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	200069a0 	.word	0x200069a0
 8015940:	20006978 	.word	0x20006978
 8015944:	20006938 	.word	0x20006938
 8015948:	20006980 	.word	0x20006980
 801594c:	2000687c 	.word	0x2000687c
 8015950:	20006878 	.word	0x20006878
 8015954:	2000698c 	.word	0x2000698c
 8015958:	20006988 	.word	0x20006988
 801595c:	e000ed04 	.word	0xe000ed04

08015960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015966:	4b05      	ldr	r3, [pc, #20]	; (801597c <xTaskGetTickCount+0x1c>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801596c:	687b      	ldr	r3, [r7, #4]
}
 801596e:	4618      	mov	r0, r3
 8015970:	370c      	adds	r7, #12
 8015972:	46bd      	mov	sp, r7
 8015974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015978:	4770      	bx	lr
 801597a:	bf00      	nop
 801597c:	2000697c 	.word	0x2000697c

08015980 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015986:	f000 ff3f 	bl	8016808 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801598a:	2300      	movs	r3, #0
 801598c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801598e:	4b04      	ldr	r3, [pc, #16]	; (80159a0 <xTaskGetTickCountFromISR+0x20>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015994:	683b      	ldr	r3, [r7, #0]
}
 8015996:	4618      	mov	r0, r3
 8015998:	3708      	adds	r7, #8
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}
 801599e:	bf00      	nop
 80159a0:	2000697c 	.word	0x2000697c

080159a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b086      	sub	sp, #24
 80159a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80159aa:	2300      	movs	r3, #0
 80159ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159ae:	4b4e      	ldr	r3, [pc, #312]	; (8015ae8 <xTaskIncrementTick+0x144>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	f040 808e 	bne.w	8015ad4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80159b8:	4b4c      	ldr	r3, [pc, #304]	; (8015aec <xTaskIncrementTick+0x148>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	3301      	adds	r3, #1
 80159be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80159c0:	4a4a      	ldr	r2, [pc, #296]	; (8015aec <xTaskIncrementTick+0x148>)
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d120      	bne.n	8015a0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80159cc:	4b48      	ldr	r3, [pc, #288]	; (8015af0 <xTaskIncrementTick+0x14c>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d00a      	beq.n	80159ec <xTaskIncrementTick+0x48>
	__asm volatile
 80159d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159da:	f383 8811 	msr	BASEPRI, r3
 80159de:	f3bf 8f6f 	isb	sy
 80159e2:	f3bf 8f4f 	dsb	sy
 80159e6:	603b      	str	r3, [r7, #0]
}
 80159e8:	bf00      	nop
 80159ea:	e7fe      	b.n	80159ea <xTaskIncrementTick+0x46>
 80159ec:	4b40      	ldr	r3, [pc, #256]	; (8015af0 <xTaskIncrementTick+0x14c>)
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	60fb      	str	r3, [r7, #12]
 80159f2:	4b40      	ldr	r3, [pc, #256]	; (8015af4 <xTaskIncrementTick+0x150>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	4a3e      	ldr	r2, [pc, #248]	; (8015af0 <xTaskIncrementTick+0x14c>)
 80159f8:	6013      	str	r3, [r2, #0]
 80159fa:	4a3e      	ldr	r2, [pc, #248]	; (8015af4 <xTaskIncrementTick+0x150>)
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	6013      	str	r3, [r2, #0]
 8015a00:	4b3d      	ldr	r3, [pc, #244]	; (8015af8 <xTaskIncrementTick+0x154>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	3301      	adds	r3, #1
 8015a06:	4a3c      	ldr	r2, [pc, #240]	; (8015af8 <xTaskIncrementTick+0x154>)
 8015a08:	6013      	str	r3, [r2, #0]
 8015a0a:	f000 faa9 	bl	8015f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015a0e:	4b3b      	ldr	r3, [pc, #236]	; (8015afc <xTaskIncrementTick+0x158>)
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	693a      	ldr	r2, [r7, #16]
 8015a14:	429a      	cmp	r2, r3
 8015a16:	d348      	bcc.n	8015aaa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a18:	4b35      	ldr	r3, [pc, #212]	; (8015af0 <xTaskIncrementTick+0x14c>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d104      	bne.n	8015a2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a22:	4b36      	ldr	r3, [pc, #216]	; (8015afc <xTaskIncrementTick+0x158>)
 8015a24:	f04f 32ff 	mov.w	r2, #4294967295
 8015a28:	601a      	str	r2, [r3, #0]
					break;
 8015a2a:	e03e      	b.n	8015aaa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a2c:	4b30      	ldr	r3, [pc, #192]	; (8015af0 <xTaskIncrementTick+0x14c>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	68db      	ldr	r3, [r3, #12]
 8015a32:	68db      	ldr	r3, [r3, #12]
 8015a34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015a3c:	693a      	ldr	r2, [r7, #16]
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	429a      	cmp	r2, r3
 8015a42:	d203      	bcs.n	8015a4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015a44:	4a2d      	ldr	r2, [pc, #180]	; (8015afc <xTaskIncrementTick+0x158>)
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015a4a:	e02e      	b.n	8015aaa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	3304      	adds	r3, #4
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7fe fd27 	bl	80144a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d004      	beq.n	8015a68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015a5e:	68bb      	ldr	r3, [r7, #8]
 8015a60:	3318      	adds	r3, #24
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7fe fd1e 	bl	80144a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a6c:	2201      	movs	r2, #1
 8015a6e:	409a      	lsls	r2, r3
 8015a70:	4b23      	ldr	r3, [pc, #140]	; (8015b00 <xTaskIncrementTick+0x15c>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4313      	orrs	r3, r2
 8015a76:	4a22      	ldr	r2, [pc, #136]	; (8015b00 <xTaskIncrementTick+0x15c>)
 8015a78:	6013      	str	r3, [r2, #0]
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a7e:	4613      	mov	r3, r2
 8015a80:	009b      	lsls	r3, r3, #2
 8015a82:	4413      	add	r3, r2
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	4a1f      	ldr	r2, [pc, #124]	; (8015b04 <xTaskIncrementTick+0x160>)
 8015a88:	441a      	add	r2, r3
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	3304      	adds	r3, #4
 8015a8e:	4619      	mov	r1, r3
 8015a90:	4610      	mov	r0, r2
 8015a92:	f7fe fcaa 	bl	80143ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a9a:	4b1b      	ldr	r3, [pc, #108]	; (8015b08 <xTaskIncrementTick+0x164>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d3b9      	bcc.n	8015a18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015aa8:	e7b6      	b.n	8015a18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015aaa:	4b17      	ldr	r3, [pc, #92]	; (8015b08 <xTaskIncrementTick+0x164>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ab0:	4914      	ldr	r1, [pc, #80]	; (8015b04 <xTaskIncrementTick+0x160>)
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	009b      	lsls	r3, r3, #2
 8015ab6:	4413      	add	r3, r2
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	440b      	add	r3, r1
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d901      	bls.n	8015ac6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015ac6:	4b11      	ldr	r3, [pc, #68]	; (8015b0c <xTaskIncrementTick+0x168>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d007      	beq.n	8015ade <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8015ace:	2301      	movs	r3, #1
 8015ad0:	617b      	str	r3, [r7, #20]
 8015ad2:	e004      	b.n	8015ade <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015ad4:	4b0e      	ldr	r3, [pc, #56]	; (8015b10 <xTaskIncrementTick+0x16c>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	3301      	adds	r3, #1
 8015ada:	4a0d      	ldr	r2, [pc, #52]	; (8015b10 <xTaskIncrementTick+0x16c>)
 8015adc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015ade:	697b      	ldr	r3, [r7, #20]
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3718      	adds	r7, #24
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}
 8015ae8:	200069a0 	.word	0x200069a0
 8015aec:	2000697c 	.word	0x2000697c
 8015af0:	20006930 	.word	0x20006930
 8015af4:	20006934 	.word	0x20006934
 8015af8:	20006990 	.word	0x20006990
 8015afc:	20006998 	.word	0x20006998
 8015b00:	20006980 	.word	0x20006980
 8015b04:	2000687c 	.word	0x2000687c
 8015b08:	20006878 	.word	0x20006878
 8015b0c:	2000698c 	.word	0x2000698c
 8015b10:	20006988 	.word	0x20006988

08015b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015b14:	b480      	push	{r7}
 8015b16:	b087      	sub	sp, #28
 8015b18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015b1a:	4b29      	ldr	r3, [pc, #164]	; (8015bc0 <vTaskSwitchContext+0xac>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d003      	beq.n	8015b2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015b22:	4b28      	ldr	r3, [pc, #160]	; (8015bc4 <vTaskSwitchContext+0xb0>)
 8015b24:	2201      	movs	r2, #1
 8015b26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015b28:	e044      	b.n	8015bb4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8015b2a:	4b26      	ldr	r3, [pc, #152]	; (8015bc4 <vTaskSwitchContext+0xb0>)
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b30:	4b25      	ldr	r3, [pc, #148]	; (8015bc8 <vTaskSwitchContext+0xb4>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	fab3 f383 	clz	r3, r3
 8015b3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015b3e:	7afb      	ldrb	r3, [r7, #11]
 8015b40:	f1c3 031f 	rsb	r3, r3, #31
 8015b44:	617b      	str	r3, [r7, #20]
 8015b46:	4921      	ldr	r1, [pc, #132]	; (8015bcc <vTaskSwitchContext+0xb8>)
 8015b48:	697a      	ldr	r2, [r7, #20]
 8015b4a:	4613      	mov	r3, r2
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	4413      	add	r3, r2
 8015b50:	009b      	lsls	r3, r3, #2
 8015b52:	440b      	add	r3, r1
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d10a      	bne.n	8015b70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8015b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b5e:	f383 8811 	msr	BASEPRI, r3
 8015b62:	f3bf 8f6f 	isb	sy
 8015b66:	f3bf 8f4f 	dsb	sy
 8015b6a:	607b      	str	r3, [r7, #4]
}
 8015b6c:	bf00      	nop
 8015b6e:	e7fe      	b.n	8015b6e <vTaskSwitchContext+0x5a>
 8015b70:	697a      	ldr	r2, [r7, #20]
 8015b72:	4613      	mov	r3, r2
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	4413      	add	r3, r2
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	4a14      	ldr	r2, [pc, #80]	; (8015bcc <vTaskSwitchContext+0xb8>)
 8015b7c:	4413      	add	r3, r2
 8015b7e:	613b      	str	r3, [r7, #16]
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	685b      	ldr	r3, [r3, #4]
 8015b84:	685a      	ldr	r2, [r3, #4]
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	605a      	str	r2, [r3, #4]
 8015b8a:	693b      	ldr	r3, [r7, #16]
 8015b8c:	685a      	ldr	r2, [r3, #4]
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	3308      	adds	r3, #8
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d104      	bne.n	8015ba0 <vTaskSwitchContext+0x8c>
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	685a      	ldr	r2, [r3, #4]
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	605a      	str	r2, [r3, #4]
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	685b      	ldr	r3, [r3, #4]
 8015ba4:	68db      	ldr	r3, [r3, #12]
 8015ba6:	4a0a      	ldr	r2, [pc, #40]	; (8015bd0 <vTaskSwitchContext+0xbc>)
 8015ba8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015baa:	4b09      	ldr	r3, [pc, #36]	; (8015bd0 <vTaskSwitchContext+0xbc>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	334c      	adds	r3, #76	; 0x4c
 8015bb0:	4a08      	ldr	r2, [pc, #32]	; (8015bd4 <vTaskSwitchContext+0xc0>)
 8015bb2:	6013      	str	r3, [r2, #0]
}
 8015bb4:	bf00      	nop
 8015bb6:	371c      	adds	r7, #28
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbe:	4770      	bx	lr
 8015bc0:	200069a0 	.word	0x200069a0
 8015bc4:	2000698c 	.word	0x2000698c
 8015bc8:	20006980 	.word	0x20006980
 8015bcc:	2000687c 	.word	0x2000687c
 8015bd0:	20006878 	.word	0x20006878
 8015bd4:	200001a4 	.word	0x200001a4

08015bd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d10a      	bne.n	8015bfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bec:	f383 8811 	msr	BASEPRI, r3
 8015bf0:	f3bf 8f6f 	isb	sy
 8015bf4:	f3bf 8f4f 	dsb	sy
 8015bf8:	60fb      	str	r3, [r7, #12]
}
 8015bfa:	bf00      	nop
 8015bfc:	e7fe      	b.n	8015bfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015bfe:	4b07      	ldr	r3, [pc, #28]	; (8015c1c <vTaskPlaceOnEventList+0x44>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	3318      	adds	r3, #24
 8015c04:	4619      	mov	r1, r3
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f7fe fc13 	bl	8014432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015c0c:	2101      	movs	r1, #1
 8015c0e:	6838      	ldr	r0, [r7, #0]
 8015c10:	f000 fb82 	bl	8016318 <prvAddCurrentTaskToDelayedList>
}
 8015c14:	bf00      	nop
 8015c16:	3710      	adds	r7, #16
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}
 8015c1c:	20006878 	.word	0x20006878

08015c20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b086      	sub	sp, #24
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	68db      	ldr	r3, [r3, #12]
 8015c2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d10a      	bne.n	8015c4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c3a:	f383 8811 	msr	BASEPRI, r3
 8015c3e:	f3bf 8f6f 	isb	sy
 8015c42:	f3bf 8f4f 	dsb	sy
 8015c46:	60fb      	str	r3, [r7, #12]
}
 8015c48:	bf00      	nop
 8015c4a:	e7fe      	b.n	8015c4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	3318      	adds	r3, #24
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7fe fc27 	bl	80144a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c56:	4b1d      	ldr	r3, [pc, #116]	; (8015ccc <xTaskRemoveFromEventList+0xac>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d11c      	bne.n	8015c98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	3304      	adds	r3, #4
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7fe fc1e 	bl	80144a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	409a      	lsls	r2, r3
 8015c70:	4b17      	ldr	r3, [pc, #92]	; (8015cd0 <xTaskRemoveFromEventList+0xb0>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	4313      	orrs	r3, r2
 8015c76:	4a16      	ldr	r2, [pc, #88]	; (8015cd0 <xTaskRemoveFromEventList+0xb0>)
 8015c78:	6013      	str	r3, [r2, #0]
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c7e:	4613      	mov	r3, r2
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	4413      	add	r3, r2
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	4a13      	ldr	r2, [pc, #76]	; (8015cd4 <xTaskRemoveFromEventList+0xb4>)
 8015c88:	441a      	add	r2, r3
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	4619      	mov	r1, r3
 8015c90:	4610      	mov	r0, r2
 8015c92:	f7fe fbaa 	bl	80143ea <vListInsertEnd>
 8015c96:	e005      	b.n	8015ca4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	3318      	adds	r3, #24
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	480e      	ldr	r0, [pc, #56]	; (8015cd8 <xTaskRemoveFromEventList+0xb8>)
 8015ca0:	f7fe fba3 	bl	80143ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ca8:	4b0c      	ldr	r3, [pc, #48]	; (8015cdc <xTaskRemoveFromEventList+0xbc>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d905      	bls.n	8015cbe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015cb6:	4b0a      	ldr	r3, [pc, #40]	; (8015ce0 <xTaskRemoveFromEventList+0xc0>)
 8015cb8:	2201      	movs	r2, #1
 8015cba:	601a      	str	r2, [r3, #0]
 8015cbc:	e001      	b.n	8015cc2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015cc2:	697b      	ldr	r3, [r7, #20]
}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	3718      	adds	r7, #24
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	200069a0 	.word	0x200069a0
 8015cd0:	20006980 	.word	0x20006980
 8015cd4:	2000687c 	.word	0x2000687c
 8015cd8:	20006938 	.word	0x20006938
 8015cdc:	20006878 	.word	0x20006878
 8015ce0:	2000698c 	.word	0x2000698c

08015ce4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015cec:	4b06      	ldr	r3, [pc, #24]	; (8015d08 <vTaskInternalSetTimeOutState+0x24>)
 8015cee:	681a      	ldr	r2, [r3, #0]
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015cf4:	4b05      	ldr	r3, [pc, #20]	; (8015d0c <vTaskInternalSetTimeOutState+0x28>)
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	605a      	str	r2, [r3, #4]
}
 8015cfc:	bf00      	nop
 8015cfe:	370c      	adds	r7, #12
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr
 8015d08:	20006990 	.word	0x20006990
 8015d0c:	2000697c 	.word	0x2000697c

08015d10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b088      	sub	sp, #32
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d10a      	bne.n	8015d36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d24:	f383 8811 	msr	BASEPRI, r3
 8015d28:	f3bf 8f6f 	isb	sy
 8015d2c:	f3bf 8f4f 	dsb	sy
 8015d30:	613b      	str	r3, [r7, #16]
}
 8015d32:	bf00      	nop
 8015d34:	e7fe      	b.n	8015d34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d10a      	bne.n	8015d52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d40:	f383 8811 	msr	BASEPRI, r3
 8015d44:	f3bf 8f6f 	isb	sy
 8015d48:	f3bf 8f4f 	dsb	sy
 8015d4c:	60fb      	str	r3, [r7, #12]
}
 8015d4e:	bf00      	nop
 8015d50:	e7fe      	b.n	8015d50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015d52:	f000 fc77 	bl	8016644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015d56:	4b1d      	ldr	r3, [pc, #116]	; (8015dcc <xTaskCheckForTimeOut+0xbc>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	69ba      	ldr	r2, [r7, #24]
 8015d62:	1ad3      	subs	r3, r2, r3
 8015d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d6e:	d102      	bne.n	8015d76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015d70:	2300      	movs	r3, #0
 8015d72:	61fb      	str	r3, [r7, #28]
 8015d74:	e023      	b.n	8015dbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681a      	ldr	r2, [r3, #0]
 8015d7a:	4b15      	ldr	r3, [pc, #84]	; (8015dd0 <xTaskCheckForTimeOut+0xc0>)
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	429a      	cmp	r2, r3
 8015d80:	d007      	beq.n	8015d92 <xTaskCheckForTimeOut+0x82>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	685b      	ldr	r3, [r3, #4]
 8015d86:	69ba      	ldr	r2, [r7, #24]
 8015d88:	429a      	cmp	r2, r3
 8015d8a:	d302      	bcc.n	8015d92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	61fb      	str	r3, [r7, #28]
 8015d90:	e015      	b.n	8015dbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	697a      	ldr	r2, [r7, #20]
 8015d98:	429a      	cmp	r2, r3
 8015d9a:	d20b      	bcs.n	8015db4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	681a      	ldr	r2, [r3, #0]
 8015da0:	697b      	ldr	r3, [r7, #20]
 8015da2:	1ad2      	subs	r2, r2, r3
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f7ff ff9b 	bl	8015ce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015dae:	2300      	movs	r3, #0
 8015db0:	61fb      	str	r3, [r7, #28]
 8015db2:	e004      	b.n	8015dbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015db4:	683b      	ldr	r3, [r7, #0]
 8015db6:	2200      	movs	r2, #0
 8015db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015dba:	2301      	movs	r3, #1
 8015dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015dbe:	f000 fc71 	bl	80166a4 <vPortExitCritical>

	return xReturn;
 8015dc2:	69fb      	ldr	r3, [r7, #28]
}
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3720      	adds	r7, #32
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	2000697c 	.word	0x2000697c
 8015dd0:	20006990 	.word	0x20006990

08015dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015dd8:	4b03      	ldr	r3, [pc, #12]	; (8015de8 <vTaskMissedYield+0x14>)
 8015dda:	2201      	movs	r2, #1
 8015ddc:	601a      	str	r2, [r3, #0]
}
 8015dde:	bf00      	nop
 8015de0:	46bd      	mov	sp, r7
 8015de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de6:	4770      	bx	lr
 8015de8:	2000698c 	.word	0x2000698c

08015dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b082      	sub	sp, #8
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015df4:	f000 f852 	bl	8015e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015df8:	4b06      	ldr	r3, [pc, #24]	; (8015e14 <prvIdleTask+0x28>)
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	2b01      	cmp	r3, #1
 8015dfe:	d9f9      	bls.n	8015df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015e00:	4b05      	ldr	r3, [pc, #20]	; (8015e18 <prvIdleTask+0x2c>)
 8015e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e06:	601a      	str	r2, [r3, #0]
 8015e08:	f3bf 8f4f 	dsb	sy
 8015e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015e10:	e7f0      	b.n	8015df4 <prvIdleTask+0x8>
 8015e12:	bf00      	nop
 8015e14:	2000687c 	.word	0x2000687c
 8015e18:	e000ed04 	.word	0xe000ed04

08015e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e22:	2300      	movs	r3, #0
 8015e24:	607b      	str	r3, [r7, #4]
 8015e26:	e00c      	b.n	8015e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	009b      	lsls	r3, r3, #2
 8015e2e:	4413      	add	r3, r2
 8015e30:	009b      	lsls	r3, r3, #2
 8015e32:	4a12      	ldr	r2, [pc, #72]	; (8015e7c <prvInitialiseTaskLists+0x60>)
 8015e34:	4413      	add	r3, r2
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7fe faaa 	bl	8014390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	3301      	adds	r3, #1
 8015e40:	607b      	str	r3, [r7, #4]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2b06      	cmp	r3, #6
 8015e46:	d9ef      	bls.n	8015e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015e48:	480d      	ldr	r0, [pc, #52]	; (8015e80 <prvInitialiseTaskLists+0x64>)
 8015e4a:	f7fe faa1 	bl	8014390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015e4e:	480d      	ldr	r0, [pc, #52]	; (8015e84 <prvInitialiseTaskLists+0x68>)
 8015e50:	f7fe fa9e 	bl	8014390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015e54:	480c      	ldr	r0, [pc, #48]	; (8015e88 <prvInitialiseTaskLists+0x6c>)
 8015e56:	f7fe fa9b 	bl	8014390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015e5a:	480c      	ldr	r0, [pc, #48]	; (8015e8c <prvInitialiseTaskLists+0x70>)
 8015e5c:	f7fe fa98 	bl	8014390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015e60:	480b      	ldr	r0, [pc, #44]	; (8015e90 <prvInitialiseTaskLists+0x74>)
 8015e62:	f7fe fa95 	bl	8014390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015e66:	4b0b      	ldr	r3, [pc, #44]	; (8015e94 <prvInitialiseTaskLists+0x78>)
 8015e68:	4a05      	ldr	r2, [pc, #20]	; (8015e80 <prvInitialiseTaskLists+0x64>)
 8015e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015e6c:	4b0a      	ldr	r3, [pc, #40]	; (8015e98 <prvInitialiseTaskLists+0x7c>)
 8015e6e:	4a05      	ldr	r2, [pc, #20]	; (8015e84 <prvInitialiseTaskLists+0x68>)
 8015e70:	601a      	str	r2, [r3, #0]
}
 8015e72:	bf00      	nop
 8015e74:	3708      	adds	r7, #8
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	2000687c 	.word	0x2000687c
 8015e80:	20006908 	.word	0x20006908
 8015e84:	2000691c 	.word	0x2000691c
 8015e88:	20006938 	.word	0x20006938
 8015e8c:	2000694c 	.word	0x2000694c
 8015e90:	20006964 	.word	0x20006964
 8015e94:	20006930 	.word	0x20006930
 8015e98:	20006934 	.word	0x20006934

08015e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ea2:	e019      	b.n	8015ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015ea4:	f000 fbce 	bl	8016644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ea8:	4b10      	ldr	r3, [pc, #64]	; (8015eec <prvCheckTasksWaitingTermination+0x50>)
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	68db      	ldr	r3, [r3, #12]
 8015eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	3304      	adds	r3, #4
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7fe faf5 	bl	80144a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015eba:	4b0d      	ldr	r3, [pc, #52]	; (8015ef0 <prvCheckTasksWaitingTermination+0x54>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	3b01      	subs	r3, #1
 8015ec0:	4a0b      	ldr	r2, [pc, #44]	; (8015ef0 <prvCheckTasksWaitingTermination+0x54>)
 8015ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015ec4:	4b0b      	ldr	r3, [pc, #44]	; (8015ef4 <prvCheckTasksWaitingTermination+0x58>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	3b01      	subs	r3, #1
 8015eca:	4a0a      	ldr	r2, [pc, #40]	; (8015ef4 <prvCheckTasksWaitingTermination+0x58>)
 8015ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015ece:	f000 fbe9 	bl	80166a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f000 f810 	bl	8015ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ed8:	4b06      	ldr	r3, [pc, #24]	; (8015ef4 <prvCheckTasksWaitingTermination+0x58>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d1e1      	bne.n	8015ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015ee0:	bf00      	nop
 8015ee2:	bf00      	nop
 8015ee4:	3708      	adds	r7, #8
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	2000694c 	.word	0x2000694c
 8015ef0:	20006978 	.word	0x20006978
 8015ef4:	20006960 	.word	0x20006960

08015ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	334c      	adds	r3, #76	; 0x4c
 8015f04:	4618      	mov	r0, r3
 8015f06:	f002 fac7 	bl	8018498 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d108      	bne.n	8015f26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f000 fd81 	bl	8016a20 <vPortFree>
				vPortFree( pxTCB );
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f000 fd7e 	bl	8016a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015f24:	e018      	b.n	8015f58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8015f2c:	2b01      	cmp	r3, #1
 8015f2e:	d103      	bne.n	8015f38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 fd75 	bl	8016a20 <vPortFree>
	}
 8015f36:	e00f      	b.n	8015f58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8015f3e:	2b02      	cmp	r3, #2
 8015f40:	d00a      	beq.n	8015f58 <prvDeleteTCB+0x60>
	__asm volatile
 8015f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f46:	f383 8811 	msr	BASEPRI, r3
 8015f4a:	f3bf 8f6f 	isb	sy
 8015f4e:	f3bf 8f4f 	dsb	sy
 8015f52:	60fb      	str	r3, [r7, #12]
}
 8015f54:	bf00      	nop
 8015f56:	e7fe      	b.n	8015f56 <prvDeleteTCB+0x5e>
	}
 8015f58:	bf00      	nop
 8015f5a:	3710      	adds	r7, #16
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015f60:	b480      	push	{r7}
 8015f62:	b083      	sub	sp, #12
 8015f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f66:	4b0c      	ldr	r3, [pc, #48]	; (8015f98 <prvResetNextTaskUnblockTime+0x38>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d104      	bne.n	8015f7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f70:	4b0a      	ldr	r3, [pc, #40]	; (8015f9c <prvResetNextTaskUnblockTime+0x3c>)
 8015f72:	f04f 32ff 	mov.w	r2, #4294967295
 8015f76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015f78:	e008      	b.n	8015f8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f7a:	4b07      	ldr	r3, [pc, #28]	; (8015f98 <prvResetNextTaskUnblockTime+0x38>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	68db      	ldr	r3, [r3, #12]
 8015f80:	68db      	ldr	r3, [r3, #12]
 8015f82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	4a04      	ldr	r2, [pc, #16]	; (8015f9c <prvResetNextTaskUnblockTime+0x3c>)
 8015f8a:	6013      	str	r3, [r2, #0]
}
 8015f8c:	bf00      	nop
 8015f8e:	370c      	adds	r7, #12
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr
 8015f98:	20006930 	.word	0x20006930
 8015f9c:	20006998 	.word	0x20006998

08015fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b083      	sub	sp, #12
 8015fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015fa6:	4b0b      	ldr	r3, [pc, #44]	; (8015fd4 <xTaskGetSchedulerState+0x34>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d102      	bne.n	8015fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015fae:	2301      	movs	r3, #1
 8015fb0:	607b      	str	r3, [r7, #4]
 8015fb2:	e008      	b.n	8015fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015fb4:	4b08      	ldr	r3, [pc, #32]	; (8015fd8 <xTaskGetSchedulerState+0x38>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d102      	bne.n	8015fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015fbc:	2302      	movs	r3, #2
 8015fbe:	607b      	str	r3, [r7, #4]
 8015fc0:	e001      	b.n	8015fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015fc6:	687b      	ldr	r3, [r7, #4]
	}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	370c      	adds	r7, #12
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd2:	4770      	bx	lr
 8015fd4:	20006984 	.word	0x20006984
 8015fd8:	200069a0 	.word	0x200069a0

08015fdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d05e      	beq.n	80160b0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ff6:	4b31      	ldr	r3, [pc, #196]	; (80160bc <xTaskPriorityInherit+0xe0>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	d24e      	bcs.n	801609e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	699b      	ldr	r3, [r3, #24]
 8016004:	2b00      	cmp	r3, #0
 8016006:	db06      	blt.n	8016016 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016008:	4b2c      	ldr	r3, [pc, #176]	; (80160bc <xTaskPriorityInherit+0xe0>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801600e:	f1c3 0207 	rsb	r2, r3, #7
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016016:	68bb      	ldr	r3, [r7, #8]
 8016018:	6959      	ldr	r1, [r3, #20]
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801601e:	4613      	mov	r3, r2
 8016020:	009b      	lsls	r3, r3, #2
 8016022:	4413      	add	r3, r2
 8016024:	009b      	lsls	r3, r3, #2
 8016026:	4a26      	ldr	r2, [pc, #152]	; (80160c0 <xTaskPriorityInherit+0xe4>)
 8016028:	4413      	add	r3, r2
 801602a:	4299      	cmp	r1, r3
 801602c:	d12f      	bne.n	801608e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	3304      	adds	r3, #4
 8016032:	4618      	mov	r0, r3
 8016034:	f7fe fa36 	bl	80144a4 <uxListRemove>
 8016038:	4603      	mov	r3, r0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d10a      	bne.n	8016054 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016042:	2201      	movs	r2, #1
 8016044:	fa02 f303 	lsl.w	r3, r2, r3
 8016048:	43da      	mvns	r2, r3
 801604a:	4b1e      	ldr	r3, [pc, #120]	; (80160c4 <xTaskPriorityInherit+0xe8>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	4013      	ands	r3, r2
 8016050:	4a1c      	ldr	r2, [pc, #112]	; (80160c4 <xTaskPriorityInherit+0xe8>)
 8016052:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016054:	4b19      	ldr	r3, [pc, #100]	; (80160bc <xTaskPriorityInherit+0xe0>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016062:	2201      	movs	r2, #1
 8016064:	409a      	lsls	r2, r3
 8016066:	4b17      	ldr	r3, [pc, #92]	; (80160c4 <xTaskPriorityInherit+0xe8>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	4313      	orrs	r3, r2
 801606c:	4a15      	ldr	r2, [pc, #84]	; (80160c4 <xTaskPriorityInherit+0xe8>)
 801606e:	6013      	str	r3, [r2, #0]
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016074:	4613      	mov	r3, r2
 8016076:	009b      	lsls	r3, r3, #2
 8016078:	4413      	add	r3, r2
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	4a10      	ldr	r2, [pc, #64]	; (80160c0 <xTaskPriorityInherit+0xe4>)
 801607e:	441a      	add	r2, r3
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	3304      	adds	r3, #4
 8016084:	4619      	mov	r1, r3
 8016086:	4610      	mov	r0, r2
 8016088:	f7fe f9af 	bl	80143ea <vListInsertEnd>
 801608c:	e004      	b.n	8016098 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801608e:	4b0b      	ldr	r3, [pc, #44]	; (80160bc <xTaskPriorityInherit+0xe0>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016098:	2301      	movs	r3, #1
 801609a:	60fb      	str	r3, [r7, #12]
 801609c:	e008      	b.n	80160b0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80160a2:	4b06      	ldr	r3, [pc, #24]	; (80160bc <xTaskPriorityInherit+0xe0>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d201      	bcs.n	80160b0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80160ac:	2301      	movs	r3, #1
 80160ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80160b0:	68fb      	ldr	r3, [r7, #12]
	}
 80160b2:	4618      	mov	r0, r3
 80160b4:	3710      	adds	r7, #16
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}
 80160ba:	bf00      	nop
 80160bc:	20006878 	.word	0x20006878
 80160c0:	2000687c 	.word	0x2000687c
 80160c4:	20006980 	.word	0x20006980

080160c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b086      	sub	sp, #24
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80160d4:	2300      	movs	r3, #0
 80160d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d06e      	beq.n	80161bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80160de:	4b3a      	ldr	r3, [pc, #232]	; (80161c8 <xTaskPriorityDisinherit+0x100>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	693a      	ldr	r2, [r7, #16]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d00a      	beq.n	80160fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80160e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ec:	f383 8811 	msr	BASEPRI, r3
 80160f0:	f3bf 8f6f 	isb	sy
 80160f4:	f3bf 8f4f 	dsb	sy
 80160f8:	60fb      	str	r3, [r7, #12]
}
 80160fa:	bf00      	nop
 80160fc:	e7fe      	b.n	80160fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80160fe:	693b      	ldr	r3, [r7, #16]
 8016100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016102:	2b00      	cmp	r3, #0
 8016104:	d10a      	bne.n	801611c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801610a:	f383 8811 	msr	BASEPRI, r3
 801610e:	f3bf 8f6f 	isb	sy
 8016112:	f3bf 8f4f 	dsb	sy
 8016116:	60bb      	str	r3, [r7, #8]
}
 8016118:	bf00      	nop
 801611a:	e7fe      	b.n	801611a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801611c:	693b      	ldr	r3, [r7, #16]
 801611e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016120:	1e5a      	subs	r2, r3, #1
 8016122:	693b      	ldr	r3, [r7, #16]
 8016124:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801612e:	429a      	cmp	r2, r3
 8016130:	d044      	beq.n	80161bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016132:	693b      	ldr	r3, [r7, #16]
 8016134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016136:	2b00      	cmp	r3, #0
 8016138:	d140      	bne.n	80161bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801613a:	693b      	ldr	r3, [r7, #16]
 801613c:	3304      	adds	r3, #4
 801613e:	4618      	mov	r0, r3
 8016140:	f7fe f9b0 	bl	80144a4 <uxListRemove>
 8016144:	4603      	mov	r3, r0
 8016146:	2b00      	cmp	r3, #0
 8016148:	d115      	bne.n	8016176 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801614e:	491f      	ldr	r1, [pc, #124]	; (80161cc <xTaskPriorityDisinherit+0x104>)
 8016150:	4613      	mov	r3, r2
 8016152:	009b      	lsls	r3, r3, #2
 8016154:	4413      	add	r3, r2
 8016156:	009b      	lsls	r3, r3, #2
 8016158:	440b      	add	r3, r1
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d10a      	bne.n	8016176 <xTaskPriorityDisinherit+0xae>
 8016160:	693b      	ldr	r3, [r7, #16]
 8016162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016164:	2201      	movs	r2, #1
 8016166:	fa02 f303 	lsl.w	r3, r2, r3
 801616a:	43da      	mvns	r2, r3
 801616c:	4b18      	ldr	r3, [pc, #96]	; (80161d0 <xTaskPriorityDisinherit+0x108>)
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	4013      	ands	r3, r2
 8016172:	4a17      	ldr	r2, [pc, #92]	; (80161d0 <xTaskPriorityDisinherit+0x108>)
 8016174:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016182:	f1c3 0207 	rsb	r2, r3, #7
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801618a:	693b      	ldr	r3, [r7, #16]
 801618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801618e:	2201      	movs	r2, #1
 8016190:	409a      	lsls	r2, r3
 8016192:	4b0f      	ldr	r3, [pc, #60]	; (80161d0 <xTaskPriorityDisinherit+0x108>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	4313      	orrs	r3, r2
 8016198:	4a0d      	ldr	r2, [pc, #52]	; (80161d0 <xTaskPriorityDisinherit+0x108>)
 801619a:	6013      	str	r3, [r2, #0]
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161a0:	4613      	mov	r3, r2
 80161a2:	009b      	lsls	r3, r3, #2
 80161a4:	4413      	add	r3, r2
 80161a6:	009b      	lsls	r3, r3, #2
 80161a8:	4a08      	ldr	r2, [pc, #32]	; (80161cc <xTaskPriorityDisinherit+0x104>)
 80161aa:	441a      	add	r2, r3
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	3304      	adds	r3, #4
 80161b0:	4619      	mov	r1, r3
 80161b2:	4610      	mov	r0, r2
 80161b4:	f7fe f919 	bl	80143ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80161b8:	2301      	movs	r3, #1
 80161ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80161bc:	697b      	ldr	r3, [r7, #20]
	}
 80161be:	4618      	mov	r0, r3
 80161c0:	3718      	adds	r7, #24
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	20006878 	.word	0x20006878
 80161cc:	2000687c 	.word	0x2000687c
 80161d0:	20006980 	.word	0x20006980

080161d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b088      	sub	sp, #32
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80161e2:	2301      	movs	r3, #1
 80161e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d077      	beq.n	80162dc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80161ec:	69bb      	ldr	r3, [r7, #24]
 80161ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d10a      	bne.n	801620a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80161f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161f8:	f383 8811 	msr	BASEPRI, r3
 80161fc:	f3bf 8f6f 	isb	sy
 8016200:	f3bf 8f4f 	dsb	sy
 8016204:	60fb      	str	r3, [r7, #12]
}
 8016206:	bf00      	nop
 8016208:	e7fe      	b.n	8016208 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801620a:	69bb      	ldr	r3, [r7, #24]
 801620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801620e:	683a      	ldr	r2, [r7, #0]
 8016210:	429a      	cmp	r2, r3
 8016212:	d902      	bls.n	801621a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	61fb      	str	r3, [r7, #28]
 8016218:	e002      	b.n	8016220 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801621a:	69bb      	ldr	r3, [r7, #24]
 801621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801621e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016220:	69bb      	ldr	r3, [r7, #24]
 8016222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016224:	69fa      	ldr	r2, [r7, #28]
 8016226:	429a      	cmp	r2, r3
 8016228:	d058      	beq.n	80162dc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801622a:	69bb      	ldr	r3, [r7, #24]
 801622c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801622e:	697a      	ldr	r2, [r7, #20]
 8016230:	429a      	cmp	r2, r3
 8016232:	d153      	bne.n	80162dc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016234:	4b2b      	ldr	r3, [pc, #172]	; (80162e4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	69ba      	ldr	r2, [r7, #24]
 801623a:	429a      	cmp	r2, r3
 801623c:	d10a      	bne.n	8016254 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016242:	f383 8811 	msr	BASEPRI, r3
 8016246:	f3bf 8f6f 	isb	sy
 801624a:	f3bf 8f4f 	dsb	sy
 801624e:	60bb      	str	r3, [r7, #8]
}
 8016250:	bf00      	nop
 8016252:	e7fe      	b.n	8016252 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016254:	69bb      	ldr	r3, [r7, #24]
 8016256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016258:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801625a:	69bb      	ldr	r3, [r7, #24]
 801625c:	69fa      	ldr	r2, [r7, #28]
 801625e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016260:	69bb      	ldr	r3, [r7, #24]
 8016262:	699b      	ldr	r3, [r3, #24]
 8016264:	2b00      	cmp	r3, #0
 8016266:	db04      	blt.n	8016272 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	f1c3 0207 	rsb	r2, r3, #7
 801626e:	69bb      	ldr	r3, [r7, #24]
 8016270:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016272:	69bb      	ldr	r3, [r7, #24]
 8016274:	6959      	ldr	r1, [r3, #20]
 8016276:	693a      	ldr	r2, [r7, #16]
 8016278:	4613      	mov	r3, r2
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	4413      	add	r3, r2
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	4a19      	ldr	r2, [pc, #100]	; (80162e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016282:	4413      	add	r3, r2
 8016284:	4299      	cmp	r1, r3
 8016286:	d129      	bne.n	80162dc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	3304      	adds	r3, #4
 801628c:	4618      	mov	r0, r3
 801628e:	f7fe f909 	bl	80144a4 <uxListRemove>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	d10a      	bne.n	80162ae <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016298:	69bb      	ldr	r3, [r7, #24]
 801629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801629c:	2201      	movs	r2, #1
 801629e:	fa02 f303 	lsl.w	r3, r2, r3
 80162a2:	43da      	mvns	r2, r3
 80162a4:	4b11      	ldr	r3, [pc, #68]	; (80162ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	4013      	ands	r3, r2
 80162aa:	4a10      	ldr	r2, [pc, #64]	; (80162ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80162ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80162ae:	69bb      	ldr	r3, [r7, #24]
 80162b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162b2:	2201      	movs	r2, #1
 80162b4:	409a      	lsls	r2, r3
 80162b6:	4b0d      	ldr	r3, [pc, #52]	; (80162ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	4313      	orrs	r3, r2
 80162bc:	4a0b      	ldr	r2, [pc, #44]	; (80162ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80162be:	6013      	str	r3, [r2, #0]
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162c4:	4613      	mov	r3, r2
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	4413      	add	r3, r2
 80162ca:	009b      	lsls	r3, r3, #2
 80162cc:	4a06      	ldr	r2, [pc, #24]	; (80162e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80162ce:	441a      	add	r2, r3
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	3304      	adds	r3, #4
 80162d4:	4619      	mov	r1, r3
 80162d6:	4610      	mov	r0, r2
 80162d8:	f7fe f887 	bl	80143ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80162dc:	bf00      	nop
 80162de:	3720      	adds	r7, #32
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}
 80162e4:	20006878 	.word	0x20006878
 80162e8:	2000687c 	.word	0x2000687c
 80162ec:	20006980 	.word	0x20006980

080162f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80162f0:	b480      	push	{r7}
 80162f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80162f4:	4b07      	ldr	r3, [pc, #28]	; (8016314 <pvTaskIncrementMutexHeldCount+0x24>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d004      	beq.n	8016306 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80162fc:	4b05      	ldr	r3, [pc, #20]	; (8016314 <pvTaskIncrementMutexHeldCount+0x24>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016302:	3201      	adds	r2, #1
 8016304:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016306:	4b03      	ldr	r3, [pc, #12]	; (8016314 <pvTaskIncrementMutexHeldCount+0x24>)
 8016308:	681b      	ldr	r3, [r3, #0]
	}
 801630a:	4618      	mov	r0, r3
 801630c:	46bd      	mov	sp, r7
 801630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016312:	4770      	bx	lr
 8016314:	20006878 	.word	0x20006878

08016318 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b084      	sub	sp, #16
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016322:	4b29      	ldr	r3, [pc, #164]	; (80163c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016328:	4b28      	ldr	r3, [pc, #160]	; (80163cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	3304      	adds	r3, #4
 801632e:	4618      	mov	r0, r3
 8016330:	f7fe f8b8 	bl	80144a4 <uxListRemove>
 8016334:	4603      	mov	r3, r0
 8016336:	2b00      	cmp	r3, #0
 8016338:	d10b      	bne.n	8016352 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801633a:	4b24      	ldr	r3, [pc, #144]	; (80163cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016340:	2201      	movs	r2, #1
 8016342:	fa02 f303 	lsl.w	r3, r2, r3
 8016346:	43da      	mvns	r2, r3
 8016348:	4b21      	ldr	r3, [pc, #132]	; (80163d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	4013      	ands	r3, r2
 801634e:	4a20      	ldr	r2, [pc, #128]	; (80163d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016350:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016358:	d10a      	bne.n	8016370 <prvAddCurrentTaskToDelayedList+0x58>
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d007      	beq.n	8016370 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016360:	4b1a      	ldr	r3, [pc, #104]	; (80163cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	3304      	adds	r3, #4
 8016366:	4619      	mov	r1, r3
 8016368:	481a      	ldr	r0, [pc, #104]	; (80163d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801636a:	f7fe f83e 	bl	80143ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801636e:	e026      	b.n	80163be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016370:	68fa      	ldr	r2, [r7, #12]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	4413      	add	r3, r2
 8016376:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016378:	4b14      	ldr	r3, [pc, #80]	; (80163cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	68ba      	ldr	r2, [r7, #8]
 801637e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016380:	68ba      	ldr	r2, [r7, #8]
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	429a      	cmp	r2, r3
 8016386:	d209      	bcs.n	801639c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016388:	4b13      	ldr	r3, [pc, #76]	; (80163d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	4b0f      	ldr	r3, [pc, #60]	; (80163cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	3304      	adds	r3, #4
 8016392:	4619      	mov	r1, r3
 8016394:	4610      	mov	r0, r2
 8016396:	f7fe f84c 	bl	8014432 <vListInsert>
}
 801639a:	e010      	b.n	80163be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801639c:	4b0f      	ldr	r3, [pc, #60]	; (80163dc <prvAddCurrentTaskToDelayedList+0xc4>)
 801639e:	681a      	ldr	r2, [r3, #0]
 80163a0:	4b0a      	ldr	r3, [pc, #40]	; (80163cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	3304      	adds	r3, #4
 80163a6:	4619      	mov	r1, r3
 80163a8:	4610      	mov	r0, r2
 80163aa:	f7fe f842 	bl	8014432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80163ae:	4b0c      	ldr	r3, [pc, #48]	; (80163e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	68ba      	ldr	r2, [r7, #8]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d202      	bcs.n	80163be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80163b8:	4a09      	ldr	r2, [pc, #36]	; (80163e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	6013      	str	r3, [r2, #0]
}
 80163be:	bf00      	nop
 80163c0:	3710      	adds	r7, #16
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	2000697c 	.word	0x2000697c
 80163cc:	20006878 	.word	0x20006878
 80163d0:	20006980 	.word	0x20006980
 80163d4:	20006964 	.word	0x20006964
 80163d8:	20006934 	.word	0x20006934
 80163dc:	20006930 	.word	0x20006930
 80163e0:	20006998 	.word	0x20006998

080163e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80163e4:	b480      	push	{r7}
 80163e6:	b085      	sub	sp, #20
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	3b04      	subs	r3, #4
 80163f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80163fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	3b04      	subs	r3, #4
 8016402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	f023 0201 	bic.w	r2, r3, #1
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	3b04      	subs	r3, #4
 8016412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016414:	4a0c      	ldr	r2, [pc, #48]	; (8016448 <pxPortInitialiseStack+0x64>)
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	3b14      	subs	r3, #20
 801641e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016420:	687a      	ldr	r2, [r7, #4]
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	3b04      	subs	r3, #4
 801642a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	f06f 0202 	mvn.w	r2, #2
 8016432:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	3b20      	subs	r3, #32
 8016438:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801643a:	68fb      	ldr	r3, [r7, #12]
}
 801643c:	4618      	mov	r0, r3
 801643e:	3714      	adds	r7, #20
 8016440:	46bd      	mov	sp, r7
 8016442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016446:	4770      	bx	lr
 8016448:	0801644d 	.word	0x0801644d

0801644c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801644c:	b480      	push	{r7}
 801644e:	b085      	sub	sp, #20
 8016450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016452:	2300      	movs	r3, #0
 8016454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016456:	4b12      	ldr	r3, [pc, #72]	; (80164a0 <prvTaskExitError+0x54>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801645e:	d00a      	beq.n	8016476 <prvTaskExitError+0x2a>
	__asm volatile
 8016460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016464:	f383 8811 	msr	BASEPRI, r3
 8016468:	f3bf 8f6f 	isb	sy
 801646c:	f3bf 8f4f 	dsb	sy
 8016470:	60fb      	str	r3, [r7, #12]
}
 8016472:	bf00      	nop
 8016474:	e7fe      	b.n	8016474 <prvTaskExitError+0x28>
	__asm volatile
 8016476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801647a:	f383 8811 	msr	BASEPRI, r3
 801647e:	f3bf 8f6f 	isb	sy
 8016482:	f3bf 8f4f 	dsb	sy
 8016486:	60bb      	str	r3, [r7, #8]
}
 8016488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801648a:	bf00      	nop
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d0fc      	beq.n	801648c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016492:	bf00      	nop
 8016494:	bf00      	nop
 8016496:	3714      	adds	r7, #20
 8016498:	46bd      	mov	sp, r7
 801649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649e:	4770      	bx	lr
 80164a0:	200000c8 	.word	0x200000c8
	...

080164b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80164b0:	4b07      	ldr	r3, [pc, #28]	; (80164d0 <pxCurrentTCBConst2>)
 80164b2:	6819      	ldr	r1, [r3, #0]
 80164b4:	6808      	ldr	r0, [r1, #0]
 80164b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ba:	f380 8809 	msr	PSP, r0
 80164be:	f3bf 8f6f 	isb	sy
 80164c2:	f04f 0000 	mov.w	r0, #0
 80164c6:	f380 8811 	msr	BASEPRI, r0
 80164ca:	4770      	bx	lr
 80164cc:	f3af 8000 	nop.w

080164d0 <pxCurrentTCBConst2>:
 80164d0:	20006878 	.word	0x20006878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80164d4:	bf00      	nop
 80164d6:	bf00      	nop

080164d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80164d8:	4808      	ldr	r0, [pc, #32]	; (80164fc <prvPortStartFirstTask+0x24>)
 80164da:	6800      	ldr	r0, [r0, #0]
 80164dc:	6800      	ldr	r0, [r0, #0]
 80164de:	f380 8808 	msr	MSP, r0
 80164e2:	f04f 0000 	mov.w	r0, #0
 80164e6:	f380 8814 	msr	CONTROL, r0
 80164ea:	b662      	cpsie	i
 80164ec:	b661      	cpsie	f
 80164ee:	f3bf 8f4f 	dsb	sy
 80164f2:	f3bf 8f6f 	isb	sy
 80164f6:	df00      	svc	0
 80164f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80164fa:	bf00      	nop
 80164fc:	e000ed08 	.word	0xe000ed08

08016500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b086      	sub	sp, #24
 8016504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016506:	4b46      	ldr	r3, [pc, #280]	; (8016620 <xPortStartScheduler+0x120>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4a46      	ldr	r2, [pc, #280]	; (8016624 <xPortStartScheduler+0x124>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d10a      	bne.n	8016526 <xPortStartScheduler+0x26>
	__asm volatile
 8016510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016514:	f383 8811 	msr	BASEPRI, r3
 8016518:	f3bf 8f6f 	isb	sy
 801651c:	f3bf 8f4f 	dsb	sy
 8016520:	613b      	str	r3, [r7, #16]
}
 8016522:	bf00      	nop
 8016524:	e7fe      	b.n	8016524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016526:	4b3e      	ldr	r3, [pc, #248]	; (8016620 <xPortStartScheduler+0x120>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	4a3f      	ldr	r2, [pc, #252]	; (8016628 <xPortStartScheduler+0x128>)
 801652c:	4293      	cmp	r3, r2
 801652e:	d10a      	bne.n	8016546 <xPortStartScheduler+0x46>
	__asm volatile
 8016530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016534:	f383 8811 	msr	BASEPRI, r3
 8016538:	f3bf 8f6f 	isb	sy
 801653c:	f3bf 8f4f 	dsb	sy
 8016540:	60fb      	str	r3, [r7, #12]
}
 8016542:	bf00      	nop
 8016544:	e7fe      	b.n	8016544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016546:	4b39      	ldr	r3, [pc, #228]	; (801662c <xPortStartScheduler+0x12c>)
 8016548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	b2db      	uxtb	r3, r3
 8016550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	22ff      	movs	r2, #255	; 0xff
 8016556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016560:	78fb      	ldrb	r3, [r7, #3]
 8016562:	b2db      	uxtb	r3, r3
 8016564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016568:	b2da      	uxtb	r2, r3
 801656a:	4b31      	ldr	r3, [pc, #196]	; (8016630 <xPortStartScheduler+0x130>)
 801656c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801656e:	4b31      	ldr	r3, [pc, #196]	; (8016634 <xPortStartScheduler+0x134>)
 8016570:	2207      	movs	r2, #7
 8016572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016574:	e009      	b.n	801658a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016576:	4b2f      	ldr	r3, [pc, #188]	; (8016634 <xPortStartScheduler+0x134>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	3b01      	subs	r3, #1
 801657c:	4a2d      	ldr	r2, [pc, #180]	; (8016634 <xPortStartScheduler+0x134>)
 801657e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016580:	78fb      	ldrb	r3, [r7, #3]
 8016582:	b2db      	uxtb	r3, r3
 8016584:	005b      	lsls	r3, r3, #1
 8016586:	b2db      	uxtb	r3, r3
 8016588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801658a:	78fb      	ldrb	r3, [r7, #3]
 801658c:	b2db      	uxtb	r3, r3
 801658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016592:	2b80      	cmp	r3, #128	; 0x80
 8016594:	d0ef      	beq.n	8016576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016596:	4b27      	ldr	r3, [pc, #156]	; (8016634 <xPortStartScheduler+0x134>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f1c3 0307 	rsb	r3, r3, #7
 801659e:	2b04      	cmp	r3, #4
 80165a0:	d00a      	beq.n	80165b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80165a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165a6:	f383 8811 	msr	BASEPRI, r3
 80165aa:	f3bf 8f6f 	isb	sy
 80165ae:	f3bf 8f4f 	dsb	sy
 80165b2:	60bb      	str	r3, [r7, #8]
}
 80165b4:	bf00      	nop
 80165b6:	e7fe      	b.n	80165b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80165b8:	4b1e      	ldr	r3, [pc, #120]	; (8016634 <xPortStartScheduler+0x134>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	021b      	lsls	r3, r3, #8
 80165be:	4a1d      	ldr	r2, [pc, #116]	; (8016634 <xPortStartScheduler+0x134>)
 80165c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80165c2:	4b1c      	ldr	r3, [pc, #112]	; (8016634 <xPortStartScheduler+0x134>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80165ca:	4a1a      	ldr	r2, [pc, #104]	; (8016634 <xPortStartScheduler+0x134>)
 80165cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	b2da      	uxtb	r2, r3
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80165d6:	4b18      	ldr	r3, [pc, #96]	; (8016638 <xPortStartScheduler+0x138>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	4a17      	ldr	r2, [pc, #92]	; (8016638 <xPortStartScheduler+0x138>)
 80165dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80165e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80165e2:	4b15      	ldr	r3, [pc, #84]	; (8016638 <xPortStartScheduler+0x138>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	4a14      	ldr	r2, [pc, #80]	; (8016638 <xPortStartScheduler+0x138>)
 80165e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80165ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80165ee:	f000 f8dd 	bl	80167ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80165f2:	4b12      	ldr	r3, [pc, #72]	; (801663c <xPortStartScheduler+0x13c>)
 80165f4:	2200      	movs	r2, #0
 80165f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80165f8:	f000 f8fc 	bl	80167f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80165fc:	4b10      	ldr	r3, [pc, #64]	; (8016640 <xPortStartScheduler+0x140>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	4a0f      	ldr	r2, [pc, #60]	; (8016640 <xPortStartScheduler+0x140>)
 8016602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016608:	f7ff ff66 	bl	80164d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801660c:	f7ff fa82 	bl	8015b14 <vTaskSwitchContext>
	prvTaskExitError();
 8016610:	f7ff ff1c 	bl	801644c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016614:	2300      	movs	r3, #0
}
 8016616:	4618      	mov	r0, r3
 8016618:	3718      	adds	r7, #24
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	e000ed00 	.word	0xe000ed00
 8016624:	410fc271 	.word	0x410fc271
 8016628:	410fc270 	.word	0x410fc270
 801662c:	e000e400 	.word	0xe000e400
 8016630:	200069a4 	.word	0x200069a4
 8016634:	200069a8 	.word	0x200069a8
 8016638:	e000ed20 	.word	0xe000ed20
 801663c:	200000c8 	.word	0x200000c8
 8016640:	e000ef34 	.word	0xe000ef34

08016644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
	__asm volatile
 801664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801664e:	f383 8811 	msr	BASEPRI, r3
 8016652:	f3bf 8f6f 	isb	sy
 8016656:	f3bf 8f4f 	dsb	sy
 801665a:	607b      	str	r3, [r7, #4]
}
 801665c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801665e:	4b0f      	ldr	r3, [pc, #60]	; (801669c <vPortEnterCritical+0x58>)
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	3301      	adds	r3, #1
 8016664:	4a0d      	ldr	r2, [pc, #52]	; (801669c <vPortEnterCritical+0x58>)
 8016666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016668:	4b0c      	ldr	r3, [pc, #48]	; (801669c <vPortEnterCritical+0x58>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	2b01      	cmp	r3, #1
 801666e:	d10f      	bne.n	8016690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016670:	4b0b      	ldr	r3, [pc, #44]	; (80166a0 <vPortEnterCritical+0x5c>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	b2db      	uxtb	r3, r3
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00a      	beq.n	8016690 <vPortEnterCritical+0x4c>
	__asm volatile
 801667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667e:	f383 8811 	msr	BASEPRI, r3
 8016682:	f3bf 8f6f 	isb	sy
 8016686:	f3bf 8f4f 	dsb	sy
 801668a:	603b      	str	r3, [r7, #0]
}
 801668c:	bf00      	nop
 801668e:	e7fe      	b.n	801668e <vPortEnterCritical+0x4a>
	}
}
 8016690:	bf00      	nop
 8016692:	370c      	adds	r7, #12
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr
 801669c:	200000c8 	.word	0x200000c8
 80166a0:	e000ed04 	.word	0xe000ed04

080166a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80166aa:	4b12      	ldr	r3, [pc, #72]	; (80166f4 <vPortExitCritical+0x50>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d10a      	bne.n	80166c8 <vPortExitCritical+0x24>
	__asm volatile
 80166b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b6:	f383 8811 	msr	BASEPRI, r3
 80166ba:	f3bf 8f6f 	isb	sy
 80166be:	f3bf 8f4f 	dsb	sy
 80166c2:	607b      	str	r3, [r7, #4]
}
 80166c4:	bf00      	nop
 80166c6:	e7fe      	b.n	80166c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80166c8:	4b0a      	ldr	r3, [pc, #40]	; (80166f4 <vPortExitCritical+0x50>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	3b01      	subs	r3, #1
 80166ce:	4a09      	ldr	r2, [pc, #36]	; (80166f4 <vPortExitCritical+0x50>)
 80166d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80166d2:	4b08      	ldr	r3, [pc, #32]	; (80166f4 <vPortExitCritical+0x50>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d105      	bne.n	80166e6 <vPortExitCritical+0x42>
 80166da:	2300      	movs	r3, #0
 80166dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	f383 8811 	msr	BASEPRI, r3
}
 80166e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80166e6:	bf00      	nop
 80166e8:	370c      	adds	r7, #12
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr
 80166f2:	bf00      	nop
 80166f4:	200000c8 	.word	0x200000c8
	...

08016700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016700:	f3ef 8009 	mrs	r0, PSP
 8016704:	f3bf 8f6f 	isb	sy
 8016708:	4b15      	ldr	r3, [pc, #84]	; (8016760 <pxCurrentTCBConst>)
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	f01e 0f10 	tst.w	lr, #16
 8016710:	bf08      	it	eq
 8016712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801671a:	6010      	str	r0, [r2, #0]
 801671c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016724:	f380 8811 	msr	BASEPRI, r0
 8016728:	f3bf 8f4f 	dsb	sy
 801672c:	f3bf 8f6f 	isb	sy
 8016730:	f7ff f9f0 	bl	8015b14 <vTaskSwitchContext>
 8016734:	f04f 0000 	mov.w	r0, #0
 8016738:	f380 8811 	msr	BASEPRI, r0
 801673c:	bc09      	pop	{r0, r3}
 801673e:	6819      	ldr	r1, [r3, #0]
 8016740:	6808      	ldr	r0, [r1, #0]
 8016742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016746:	f01e 0f10 	tst.w	lr, #16
 801674a:	bf08      	it	eq
 801674c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016750:	f380 8809 	msr	PSP, r0
 8016754:	f3bf 8f6f 	isb	sy
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop
 801675c:	f3af 8000 	nop.w

08016760 <pxCurrentTCBConst>:
 8016760:	20006878 	.word	0x20006878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016764:	bf00      	nop
 8016766:	bf00      	nop

08016768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
	__asm volatile
 801676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016772:	f383 8811 	msr	BASEPRI, r3
 8016776:	f3bf 8f6f 	isb	sy
 801677a:	f3bf 8f4f 	dsb	sy
 801677e:	607b      	str	r3, [r7, #4]
}
 8016780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016782:	f7ff f90f 	bl	80159a4 <xTaskIncrementTick>
 8016786:	4603      	mov	r3, r0
 8016788:	2b00      	cmp	r3, #0
 801678a:	d003      	beq.n	8016794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801678c:	4b06      	ldr	r3, [pc, #24]	; (80167a8 <SysTick_Handler+0x40>)
 801678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016792:	601a      	str	r2, [r3, #0]
 8016794:	2300      	movs	r3, #0
 8016796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	f383 8811 	msr	BASEPRI, r3
}
 801679e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80167a0:	bf00      	nop
 80167a2:	3708      	adds	r7, #8
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	e000ed04 	.word	0xe000ed04

080167ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80167ac:	b480      	push	{r7}
 80167ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80167b0:	4b0b      	ldr	r3, [pc, #44]	; (80167e0 <vPortSetupTimerInterrupt+0x34>)
 80167b2:	2200      	movs	r2, #0
 80167b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80167b6:	4b0b      	ldr	r3, [pc, #44]	; (80167e4 <vPortSetupTimerInterrupt+0x38>)
 80167b8:	2200      	movs	r2, #0
 80167ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80167bc:	4b0a      	ldr	r3, [pc, #40]	; (80167e8 <vPortSetupTimerInterrupt+0x3c>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4a0a      	ldr	r2, [pc, #40]	; (80167ec <vPortSetupTimerInterrupt+0x40>)
 80167c2:	fba2 2303 	umull	r2, r3, r2, r3
 80167c6:	099b      	lsrs	r3, r3, #6
 80167c8:	4a09      	ldr	r2, [pc, #36]	; (80167f0 <vPortSetupTimerInterrupt+0x44>)
 80167ca:	3b01      	subs	r3, #1
 80167cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80167ce:	4b04      	ldr	r3, [pc, #16]	; (80167e0 <vPortSetupTimerInterrupt+0x34>)
 80167d0:	2207      	movs	r2, #7
 80167d2:	601a      	str	r2, [r3, #0]
}
 80167d4:	bf00      	nop
 80167d6:	46bd      	mov	sp, r7
 80167d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167dc:	4770      	bx	lr
 80167de:	bf00      	nop
 80167e0:	e000e010 	.word	0xe000e010
 80167e4:	e000e018 	.word	0xe000e018
 80167e8:	20000014 	.word	0x20000014
 80167ec:	10624dd3 	.word	0x10624dd3
 80167f0:	e000e014 	.word	0xe000e014

080167f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80167f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016804 <vPortEnableVFP+0x10>
 80167f8:	6801      	ldr	r1, [r0, #0]
 80167fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80167fe:	6001      	str	r1, [r0, #0]
 8016800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016802:	bf00      	nop
 8016804:	e000ed88 	.word	0xe000ed88

08016808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016808:	b480      	push	{r7}
 801680a:	b085      	sub	sp, #20
 801680c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801680e:	f3ef 8305 	mrs	r3, IPSR
 8016812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	2b0f      	cmp	r3, #15
 8016818:	d914      	bls.n	8016844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801681a:	4a17      	ldr	r2, [pc, #92]	; (8016878 <vPortValidateInterruptPriority+0x70>)
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	4413      	add	r3, r2
 8016820:	781b      	ldrb	r3, [r3, #0]
 8016822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016824:	4b15      	ldr	r3, [pc, #84]	; (801687c <vPortValidateInterruptPriority+0x74>)
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	7afa      	ldrb	r2, [r7, #11]
 801682a:	429a      	cmp	r2, r3
 801682c:	d20a      	bcs.n	8016844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016832:	f383 8811 	msr	BASEPRI, r3
 8016836:	f3bf 8f6f 	isb	sy
 801683a:	f3bf 8f4f 	dsb	sy
 801683e:	607b      	str	r3, [r7, #4]
}
 8016840:	bf00      	nop
 8016842:	e7fe      	b.n	8016842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016844:	4b0e      	ldr	r3, [pc, #56]	; (8016880 <vPortValidateInterruptPriority+0x78>)
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801684c:	4b0d      	ldr	r3, [pc, #52]	; (8016884 <vPortValidateInterruptPriority+0x7c>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	429a      	cmp	r2, r3
 8016852:	d90a      	bls.n	801686a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016858:	f383 8811 	msr	BASEPRI, r3
 801685c:	f3bf 8f6f 	isb	sy
 8016860:	f3bf 8f4f 	dsb	sy
 8016864:	603b      	str	r3, [r7, #0]
}
 8016866:	bf00      	nop
 8016868:	e7fe      	b.n	8016868 <vPortValidateInterruptPriority+0x60>
	}
 801686a:	bf00      	nop
 801686c:	3714      	adds	r7, #20
 801686e:	46bd      	mov	sp, r7
 8016870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016874:	4770      	bx	lr
 8016876:	bf00      	nop
 8016878:	e000e3f0 	.word	0xe000e3f0
 801687c:	200069a4 	.word	0x200069a4
 8016880:	e000ed0c 	.word	0xe000ed0c
 8016884:	200069a8 	.word	0x200069a8

08016888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b08a      	sub	sp, #40	; 0x28
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016890:	2300      	movs	r3, #0
 8016892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016894:	f7fe ffba 	bl	801580c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016898:	4b5b      	ldr	r3, [pc, #364]	; (8016a08 <pvPortMalloc+0x180>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d101      	bne.n	80168a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80168a0:	f000 f920 	bl	8016ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80168a4:	4b59      	ldr	r3, [pc, #356]	; (8016a0c <pvPortMalloc+0x184>)
 80168a6:	681a      	ldr	r2, [r3, #0]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	4013      	ands	r3, r2
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	f040 8093 	bne.w	80169d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d01d      	beq.n	80168f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80168b8:	2208      	movs	r2, #8
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	4413      	add	r3, r2
 80168be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f003 0307 	and.w	r3, r3, #7
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d014      	beq.n	80168f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f023 0307 	bic.w	r3, r3, #7
 80168d0:	3308      	adds	r3, #8
 80168d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f003 0307 	and.w	r3, r3, #7
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d00a      	beq.n	80168f4 <pvPortMalloc+0x6c>
	__asm volatile
 80168de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e2:	f383 8811 	msr	BASEPRI, r3
 80168e6:	f3bf 8f6f 	isb	sy
 80168ea:	f3bf 8f4f 	dsb	sy
 80168ee:	617b      	str	r3, [r7, #20]
}
 80168f0:	bf00      	nop
 80168f2:	e7fe      	b.n	80168f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d06e      	beq.n	80169d8 <pvPortMalloc+0x150>
 80168fa:	4b45      	ldr	r3, [pc, #276]	; (8016a10 <pvPortMalloc+0x188>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	687a      	ldr	r2, [r7, #4]
 8016900:	429a      	cmp	r2, r3
 8016902:	d869      	bhi.n	80169d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016904:	4b43      	ldr	r3, [pc, #268]	; (8016a14 <pvPortMalloc+0x18c>)
 8016906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016908:	4b42      	ldr	r3, [pc, #264]	; (8016a14 <pvPortMalloc+0x18c>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801690e:	e004      	b.n	801691a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	687a      	ldr	r2, [r7, #4]
 8016920:	429a      	cmp	r2, r3
 8016922:	d903      	bls.n	801692c <pvPortMalloc+0xa4>
 8016924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d1f1      	bne.n	8016910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801692c:	4b36      	ldr	r3, [pc, #216]	; (8016a08 <pvPortMalloc+0x180>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016932:	429a      	cmp	r2, r3
 8016934:	d050      	beq.n	80169d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016936:	6a3b      	ldr	r3, [r7, #32]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	2208      	movs	r2, #8
 801693c:	4413      	add	r3, r2
 801693e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	6a3b      	ldr	r3, [r7, #32]
 8016946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801694a:	685a      	ldr	r2, [r3, #4]
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	1ad2      	subs	r2, r2, r3
 8016950:	2308      	movs	r3, #8
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	429a      	cmp	r2, r3
 8016956:	d91f      	bls.n	8016998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	4413      	add	r3, r2
 801695e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016960:	69bb      	ldr	r3, [r7, #24]
 8016962:	f003 0307 	and.w	r3, r3, #7
 8016966:	2b00      	cmp	r3, #0
 8016968:	d00a      	beq.n	8016980 <pvPortMalloc+0xf8>
	__asm volatile
 801696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801696e:	f383 8811 	msr	BASEPRI, r3
 8016972:	f3bf 8f6f 	isb	sy
 8016976:	f3bf 8f4f 	dsb	sy
 801697a:	613b      	str	r3, [r7, #16]
}
 801697c:	bf00      	nop
 801697e:	e7fe      	b.n	801697e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016982:	685a      	ldr	r2, [r3, #4]
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	1ad2      	subs	r2, r2, r3
 8016988:	69bb      	ldr	r3, [r7, #24]
 801698a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698e:	687a      	ldr	r2, [r7, #4]
 8016990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016992:	69b8      	ldr	r0, [r7, #24]
 8016994:	f000 f908 	bl	8016ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016998:	4b1d      	ldr	r3, [pc, #116]	; (8016a10 <pvPortMalloc+0x188>)
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	1ad3      	subs	r3, r2, r3
 80169a2:	4a1b      	ldr	r2, [pc, #108]	; (8016a10 <pvPortMalloc+0x188>)
 80169a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80169a6:	4b1a      	ldr	r3, [pc, #104]	; (8016a10 <pvPortMalloc+0x188>)
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	4b1b      	ldr	r3, [pc, #108]	; (8016a18 <pvPortMalloc+0x190>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	429a      	cmp	r2, r3
 80169b0:	d203      	bcs.n	80169ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80169b2:	4b17      	ldr	r3, [pc, #92]	; (8016a10 <pvPortMalloc+0x188>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	4a18      	ldr	r2, [pc, #96]	; (8016a18 <pvPortMalloc+0x190>)
 80169b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80169ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169bc:	685a      	ldr	r2, [r3, #4]
 80169be:	4b13      	ldr	r3, [pc, #76]	; (8016a0c <pvPortMalloc+0x184>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	431a      	orrs	r2, r3
 80169c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80169c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ca:	2200      	movs	r2, #0
 80169cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80169ce:	4b13      	ldr	r3, [pc, #76]	; (8016a1c <pvPortMalloc+0x194>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	3301      	adds	r3, #1
 80169d4:	4a11      	ldr	r2, [pc, #68]	; (8016a1c <pvPortMalloc+0x194>)
 80169d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80169d8:	f7fe ff26 	bl	8015828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80169dc:	69fb      	ldr	r3, [r7, #28]
 80169de:	f003 0307 	and.w	r3, r3, #7
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d00a      	beq.n	80169fc <pvPortMalloc+0x174>
	__asm volatile
 80169e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ea:	f383 8811 	msr	BASEPRI, r3
 80169ee:	f3bf 8f6f 	isb	sy
 80169f2:	f3bf 8f4f 	dsb	sy
 80169f6:	60fb      	str	r3, [r7, #12]
}
 80169f8:	bf00      	nop
 80169fa:	e7fe      	b.n	80169fa <pvPortMalloc+0x172>
	return pvReturn;
 80169fc:	69fb      	ldr	r3, [r7, #28]
}
 80169fe:	4618      	mov	r0, r3
 8016a00:	3728      	adds	r7, #40	; 0x28
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	2000a5b4 	.word	0x2000a5b4
 8016a0c:	2000a5c8 	.word	0x2000a5c8
 8016a10:	2000a5b8 	.word	0x2000a5b8
 8016a14:	2000a5ac 	.word	0x2000a5ac
 8016a18:	2000a5bc 	.word	0x2000a5bc
 8016a1c:	2000a5c0 	.word	0x2000a5c0

08016a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b086      	sub	sp, #24
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d04d      	beq.n	8016ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016a32:	2308      	movs	r3, #8
 8016a34:	425b      	negs	r3, r3
 8016a36:	697a      	ldr	r2, [r7, #20]
 8016a38:	4413      	add	r3, r2
 8016a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016a3c:	697b      	ldr	r3, [r7, #20]
 8016a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	685a      	ldr	r2, [r3, #4]
 8016a44:	4b24      	ldr	r3, [pc, #144]	; (8016ad8 <vPortFree+0xb8>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	4013      	ands	r3, r2
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d10a      	bne.n	8016a64 <vPortFree+0x44>
	__asm volatile
 8016a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a52:	f383 8811 	msr	BASEPRI, r3
 8016a56:	f3bf 8f6f 	isb	sy
 8016a5a:	f3bf 8f4f 	dsb	sy
 8016a5e:	60fb      	str	r3, [r7, #12]
}
 8016a60:	bf00      	nop
 8016a62:	e7fe      	b.n	8016a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016a64:	693b      	ldr	r3, [r7, #16]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d00a      	beq.n	8016a82 <vPortFree+0x62>
	__asm volatile
 8016a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a70:	f383 8811 	msr	BASEPRI, r3
 8016a74:	f3bf 8f6f 	isb	sy
 8016a78:	f3bf 8f4f 	dsb	sy
 8016a7c:	60bb      	str	r3, [r7, #8]
}
 8016a7e:	bf00      	nop
 8016a80:	e7fe      	b.n	8016a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	685a      	ldr	r2, [r3, #4]
 8016a86:	4b14      	ldr	r3, [pc, #80]	; (8016ad8 <vPortFree+0xb8>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	4013      	ands	r3, r2
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d01e      	beq.n	8016ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d11a      	bne.n	8016ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	685a      	ldr	r2, [r3, #4]
 8016a9c:	4b0e      	ldr	r3, [pc, #56]	; (8016ad8 <vPortFree+0xb8>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	43db      	mvns	r3, r3
 8016aa2:	401a      	ands	r2, r3
 8016aa4:	693b      	ldr	r3, [r7, #16]
 8016aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016aa8:	f7fe feb0 	bl	801580c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	685a      	ldr	r2, [r3, #4]
 8016ab0:	4b0a      	ldr	r3, [pc, #40]	; (8016adc <vPortFree+0xbc>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	4a09      	ldr	r2, [pc, #36]	; (8016adc <vPortFree+0xbc>)
 8016ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016aba:	6938      	ldr	r0, [r7, #16]
 8016abc:	f000 f874 	bl	8016ba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016ac0:	4b07      	ldr	r3, [pc, #28]	; (8016ae0 <vPortFree+0xc0>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	3301      	adds	r3, #1
 8016ac6:	4a06      	ldr	r2, [pc, #24]	; (8016ae0 <vPortFree+0xc0>)
 8016ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016aca:	f7fe fead 	bl	8015828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016ace:	bf00      	nop
 8016ad0:	3718      	adds	r7, #24
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	bf00      	nop
 8016ad8:	2000a5c8 	.word	0x2000a5c8
 8016adc:	2000a5b8 	.word	0x2000a5b8
 8016ae0:	2000a5c4 	.word	0x2000a5c4

08016ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016ae4:	b480      	push	{r7}
 8016ae6:	b085      	sub	sp, #20
 8016ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016aea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016af0:	4b27      	ldr	r3, [pc, #156]	; (8016b90 <prvHeapInit+0xac>)
 8016af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	f003 0307 	and.w	r3, r3, #7
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d00c      	beq.n	8016b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	3307      	adds	r3, #7
 8016b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	f023 0307 	bic.w	r3, r3, #7
 8016b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016b0c:	68ba      	ldr	r2, [r7, #8]
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	1ad3      	subs	r3, r2, r3
 8016b12:	4a1f      	ldr	r2, [pc, #124]	; (8016b90 <prvHeapInit+0xac>)
 8016b14:	4413      	add	r3, r2
 8016b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016b1c:	4a1d      	ldr	r2, [pc, #116]	; (8016b94 <prvHeapInit+0xb0>)
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016b22:	4b1c      	ldr	r3, [pc, #112]	; (8016b94 <prvHeapInit+0xb0>)
 8016b24:	2200      	movs	r2, #0
 8016b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	68ba      	ldr	r2, [r7, #8]
 8016b2c:	4413      	add	r3, r2
 8016b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016b30:	2208      	movs	r2, #8
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	1a9b      	subs	r3, r3, r2
 8016b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	f023 0307 	bic.w	r3, r3, #7
 8016b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	4a15      	ldr	r2, [pc, #84]	; (8016b98 <prvHeapInit+0xb4>)
 8016b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016b46:	4b14      	ldr	r3, [pc, #80]	; (8016b98 <prvHeapInit+0xb4>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016b4e:	4b12      	ldr	r3, [pc, #72]	; (8016b98 <prvHeapInit+0xb4>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	2200      	movs	r2, #0
 8016b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	68fa      	ldr	r2, [r7, #12]
 8016b5e:	1ad2      	subs	r2, r2, r3
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016b64:	4b0c      	ldr	r3, [pc, #48]	; (8016b98 <prvHeapInit+0xb4>)
 8016b66:	681a      	ldr	r2, [r3, #0]
 8016b68:	683b      	ldr	r3, [r7, #0]
 8016b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016b6c:	683b      	ldr	r3, [r7, #0]
 8016b6e:	685b      	ldr	r3, [r3, #4]
 8016b70:	4a0a      	ldr	r2, [pc, #40]	; (8016b9c <prvHeapInit+0xb8>)
 8016b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016b74:	683b      	ldr	r3, [r7, #0]
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	4a09      	ldr	r2, [pc, #36]	; (8016ba0 <prvHeapInit+0xbc>)
 8016b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016b7c:	4b09      	ldr	r3, [pc, #36]	; (8016ba4 <prvHeapInit+0xc0>)
 8016b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016b82:	601a      	str	r2, [r3, #0]
}
 8016b84:	bf00      	nop
 8016b86:	3714      	adds	r7, #20
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8e:	4770      	bx	lr
 8016b90:	200069ac 	.word	0x200069ac
 8016b94:	2000a5ac 	.word	0x2000a5ac
 8016b98:	2000a5b4 	.word	0x2000a5b4
 8016b9c:	2000a5bc 	.word	0x2000a5bc
 8016ba0:	2000a5b8 	.word	0x2000a5b8
 8016ba4:	2000a5c8 	.word	0x2000a5c8

08016ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016ba8:	b480      	push	{r7}
 8016baa:	b085      	sub	sp, #20
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016bb0:	4b28      	ldr	r3, [pc, #160]	; (8016c54 <prvInsertBlockIntoFreeList+0xac>)
 8016bb2:	60fb      	str	r3, [r7, #12]
 8016bb4:	e002      	b.n	8016bbc <prvInsertBlockIntoFreeList+0x14>
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	60fb      	str	r3, [r7, #12]
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	687a      	ldr	r2, [r7, #4]
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	d8f7      	bhi.n	8016bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	68ba      	ldr	r2, [r7, #8]
 8016bd0:	4413      	add	r3, r2
 8016bd2:	687a      	ldr	r2, [r7, #4]
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d108      	bne.n	8016bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	685a      	ldr	r2, [r3, #4]
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	685b      	ldr	r3, [r3, #4]
 8016be0:	441a      	add	r2, r3
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	685b      	ldr	r3, [r3, #4]
 8016bf2:	68ba      	ldr	r2, [r7, #8]
 8016bf4:	441a      	add	r2, r3
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d118      	bne.n	8016c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	681a      	ldr	r2, [r3, #0]
 8016c02:	4b15      	ldr	r3, [pc, #84]	; (8016c58 <prvInsertBlockIntoFreeList+0xb0>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d00d      	beq.n	8016c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	685a      	ldr	r2, [r3, #4]
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	685b      	ldr	r3, [r3, #4]
 8016c14:	441a      	add	r2, r3
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	681a      	ldr	r2, [r3, #0]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	601a      	str	r2, [r3, #0]
 8016c24:	e008      	b.n	8016c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016c26:	4b0c      	ldr	r3, [pc, #48]	; (8016c58 <prvInsertBlockIntoFreeList+0xb0>)
 8016c28:	681a      	ldr	r2, [r3, #0]
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	601a      	str	r2, [r3, #0]
 8016c2e:	e003      	b.n	8016c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016c38:	68fa      	ldr	r2, [r7, #12]
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d002      	beq.n	8016c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	687a      	ldr	r2, [r7, #4]
 8016c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c46:	bf00      	nop
 8016c48:	3714      	adds	r7, #20
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c50:	4770      	bx	lr
 8016c52:	bf00      	nop
 8016c54:	2000a5ac 	.word	0x2000a5ac
 8016c58:	2000a5b4 	.word	0x2000a5b4

08016c5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016c60:	2200      	movs	r2, #0
 8016c62:	4912      	ldr	r1, [pc, #72]	; (8016cac <MX_USB_DEVICE_Init+0x50>)
 8016c64:	4812      	ldr	r0, [pc, #72]	; (8016cb0 <MX_USB_DEVICE_Init+0x54>)
 8016c66:	f7f8 ffbe 	bl	800fbe6 <USBD_Init>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d001      	beq.n	8016c74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016c70:	f7eb fcec 	bl	800264c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8016c74:	490f      	ldr	r1, [pc, #60]	; (8016cb4 <MX_USB_DEVICE_Init+0x58>)
 8016c76:	480e      	ldr	r0, [pc, #56]	; (8016cb0 <MX_USB_DEVICE_Init+0x54>)
 8016c78:	f7f8 ffe5 	bl	800fc46 <USBD_RegisterClass>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d001      	beq.n	8016c86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016c82:	f7eb fce3 	bl	800264c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8016c86:	490c      	ldr	r1, [pc, #48]	; (8016cb8 <MX_USB_DEVICE_Init+0x5c>)
 8016c88:	4809      	ldr	r0, [pc, #36]	; (8016cb0 <MX_USB_DEVICE_Init+0x54>)
 8016c8a:	f7f7 fa8f 	bl	800e1ac <USBD_MSC_RegisterStorage>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d001      	beq.n	8016c98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016c94:	f7eb fcda 	bl	800264c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016c98:	4805      	ldr	r0, [pc, #20]	; (8016cb0 <MX_USB_DEVICE_Init+0x54>)
 8016c9a:	f7f9 f80a 	bl	800fcb2 <USBD_Start>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d001      	beq.n	8016ca8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016ca4:	f7eb fcd2 	bl	800264c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016ca8:	bf00      	nop
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	200000cc 	.word	0x200000cc
 8016cb0:	2000a5cc 	.word	0x2000a5cc
 8016cb4:	20000020 	.word	0x20000020
 8016cb8:	2000012c 	.word	0x2000012c

08016cbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	b083      	sub	sp, #12
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	6039      	str	r1, [r7, #0]
 8016cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016cc8:	683b      	ldr	r3, [r7, #0]
 8016cca:	2212      	movs	r2, #18
 8016ccc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016cce:	4b03      	ldr	r3, [pc, #12]	; (8016cdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	370c      	adds	r7, #12
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cda:	4770      	bx	lr
 8016cdc:	200000ec 	.word	0x200000ec

08016ce0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	b083      	sub	sp, #12
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	6039      	str	r1, [r7, #0]
 8016cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	2204      	movs	r2, #4
 8016cf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016cf2:	4b03      	ldr	r3, [pc, #12]	; (8016d00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	370c      	adds	r7, #12
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr
 8016d00:	2000010c 	.word	0x2000010c

08016d04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	6039      	str	r1, [r7, #0]
 8016d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016d10:	79fb      	ldrb	r3, [r7, #7]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d105      	bne.n	8016d22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d16:	683a      	ldr	r2, [r7, #0]
 8016d18:	4907      	ldr	r1, [pc, #28]	; (8016d38 <USBD_FS_ProductStrDescriptor+0x34>)
 8016d1a:	4808      	ldr	r0, [pc, #32]	; (8016d3c <USBD_FS_ProductStrDescriptor+0x38>)
 8016d1c:	f7fa f9a0 	bl	8011060 <USBD_GetString>
 8016d20:	e004      	b.n	8016d2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d22:	683a      	ldr	r2, [r7, #0]
 8016d24:	4904      	ldr	r1, [pc, #16]	; (8016d38 <USBD_FS_ProductStrDescriptor+0x34>)
 8016d26:	4805      	ldr	r0, [pc, #20]	; (8016d3c <USBD_FS_ProductStrDescriptor+0x38>)
 8016d28:	f7fa f99a 	bl	8011060 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016d2c:	4b02      	ldr	r3, [pc, #8]	; (8016d38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3708      	adds	r7, #8
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop
 8016d38:	2000a8a8 	.word	0x2000a8a8
 8016d3c:	0801a960 	.word	0x0801a960

08016d40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	4603      	mov	r3, r0
 8016d48:	6039      	str	r1, [r7, #0]
 8016d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016d4c:	683a      	ldr	r2, [r7, #0]
 8016d4e:	4904      	ldr	r1, [pc, #16]	; (8016d60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016d50:	4804      	ldr	r0, [pc, #16]	; (8016d64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016d52:	f7fa f985 	bl	8011060 <USBD_GetString>
  return USBD_StrDesc;
 8016d56:	4b02      	ldr	r3, [pc, #8]	; (8016d60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3708      	adds	r7, #8
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}
 8016d60:	2000a8a8 	.word	0x2000a8a8
 8016d64:	0801a974 	.word	0x0801a974

08016d68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b082      	sub	sp, #8
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	4603      	mov	r3, r0
 8016d70:	6039      	str	r1, [r7, #0]
 8016d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	221a      	movs	r2, #26
 8016d78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016d7a:	f000 f855 	bl	8016e28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016d7e:	4b02      	ldr	r3, [pc, #8]	; (8016d88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3708      	adds	r7, #8
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	20000110 	.word	0x20000110

08016d8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	4603      	mov	r3, r0
 8016d94:	6039      	str	r1, [r7, #0]
 8016d96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016d98:	79fb      	ldrb	r3, [r7, #7]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d105      	bne.n	8016daa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016d9e:	683a      	ldr	r2, [r7, #0]
 8016da0:	4907      	ldr	r1, [pc, #28]	; (8016dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016da2:	4808      	ldr	r0, [pc, #32]	; (8016dc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016da4:	f7fa f95c 	bl	8011060 <USBD_GetString>
 8016da8:	e004      	b.n	8016db4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016daa:	683a      	ldr	r2, [r7, #0]
 8016dac:	4904      	ldr	r1, [pc, #16]	; (8016dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016dae:	4805      	ldr	r0, [pc, #20]	; (8016dc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016db0:	f7fa f956 	bl	8011060 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016db4:	4b02      	ldr	r3, [pc, #8]	; (8016dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	3708      	adds	r7, #8
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}
 8016dbe:	bf00      	nop
 8016dc0:	2000a8a8 	.word	0x2000a8a8
 8016dc4:	0801a988 	.word	0x0801a988

08016dc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	4603      	mov	r3, r0
 8016dd0:	6039      	str	r1, [r7, #0]
 8016dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016dd4:	79fb      	ldrb	r3, [r7, #7]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d105      	bne.n	8016de6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016dda:	683a      	ldr	r2, [r7, #0]
 8016ddc:	4907      	ldr	r1, [pc, #28]	; (8016dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016dde:	4808      	ldr	r0, [pc, #32]	; (8016e00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016de0:	f7fa f93e 	bl	8011060 <USBD_GetString>
 8016de4:	e004      	b.n	8016df0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016de6:	683a      	ldr	r2, [r7, #0]
 8016de8:	4904      	ldr	r1, [pc, #16]	; (8016dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016dea:	4805      	ldr	r0, [pc, #20]	; (8016e00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016dec:	f7fa f938 	bl	8011060 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016df0:	4b02      	ldr	r3, [pc, #8]	; (8016dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3708      	adds	r7, #8
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	2000a8a8 	.word	0x2000a8a8
 8016e00:	0801a994 	.word	0x0801a994

08016e04 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e04:	b480      	push	{r7}
 8016e06:	b083      	sub	sp, #12
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	6039      	str	r1, [r7, #0]
 8016e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8016e10:	683b      	ldr	r3, [r7, #0]
 8016e12:	220c      	movs	r2, #12
 8016e14:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8016e16:	4b03      	ldr	r3, [pc, #12]	; (8016e24 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016e18:	4618      	mov	r0, r3
 8016e1a:	370c      	adds	r7, #12
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e22:	4770      	bx	lr
 8016e24:	20000100 	.word	0x20000100

08016e28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016e2e:	4b0f      	ldr	r3, [pc, #60]	; (8016e6c <Get_SerialNum+0x44>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016e34:	4b0e      	ldr	r3, [pc, #56]	; (8016e70 <Get_SerialNum+0x48>)
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016e3a:	4b0e      	ldr	r3, [pc, #56]	; (8016e74 <Get_SerialNum+0x4c>)
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016e40:	68fa      	ldr	r2, [r7, #12]
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	4413      	add	r3, r2
 8016e46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d009      	beq.n	8016e62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016e4e:	2208      	movs	r2, #8
 8016e50:	4909      	ldr	r1, [pc, #36]	; (8016e78 <Get_SerialNum+0x50>)
 8016e52:	68f8      	ldr	r0, [r7, #12]
 8016e54:	f000 f814 	bl	8016e80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016e58:	2204      	movs	r2, #4
 8016e5a:	4908      	ldr	r1, [pc, #32]	; (8016e7c <Get_SerialNum+0x54>)
 8016e5c:	68b8      	ldr	r0, [r7, #8]
 8016e5e:	f000 f80f 	bl	8016e80 <IntToUnicode>
  }
}
 8016e62:	bf00      	nop
 8016e64:	3710      	adds	r7, #16
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd80      	pop	{r7, pc}
 8016e6a:	bf00      	nop
 8016e6c:	1fff7a10 	.word	0x1fff7a10
 8016e70:	1fff7a14 	.word	0x1fff7a14
 8016e74:	1fff7a18 	.word	0x1fff7a18
 8016e78:	20000112 	.word	0x20000112
 8016e7c:	20000122 	.word	0x20000122

08016e80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016e80:	b480      	push	{r7}
 8016e82:	b087      	sub	sp, #28
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	4613      	mov	r3, r2
 8016e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016e92:	2300      	movs	r3, #0
 8016e94:	75fb      	strb	r3, [r7, #23]
 8016e96:	e027      	b.n	8016ee8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	0f1b      	lsrs	r3, r3, #28
 8016e9c:	2b09      	cmp	r3, #9
 8016e9e:	d80b      	bhi.n	8016eb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	0f1b      	lsrs	r3, r3, #28
 8016ea4:	b2da      	uxtb	r2, r3
 8016ea6:	7dfb      	ldrb	r3, [r7, #23]
 8016ea8:	005b      	lsls	r3, r3, #1
 8016eaa:	4619      	mov	r1, r3
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	440b      	add	r3, r1
 8016eb0:	3230      	adds	r2, #48	; 0x30
 8016eb2:	b2d2      	uxtb	r2, r2
 8016eb4:	701a      	strb	r2, [r3, #0]
 8016eb6:	e00a      	b.n	8016ece <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	0f1b      	lsrs	r3, r3, #28
 8016ebc:	b2da      	uxtb	r2, r3
 8016ebe:	7dfb      	ldrb	r3, [r7, #23]
 8016ec0:	005b      	lsls	r3, r3, #1
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	440b      	add	r3, r1
 8016ec8:	3237      	adds	r2, #55	; 0x37
 8016eca:	b2d2      	uxtb	r2, r2
 8016ecc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	011b      	lsls	r3, r3, #4
 8016ed2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016ed4:	7dfb      	ldrb	r3, [r7, #23]
 8016ed6:	005b      	lsls	r3, r3, #1
 8016ed8:	3301      	adds	r3, #1
 8016eda:	68ba      	ldr	r2, [r7, #8]
 8016edc:	4413      	add	r3, r2
 8016ede:	2200      	movs	r2, #0
 8016ee0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016ee2:	7dfb      	ldrb	r3, [r7, #23]
 8016ee4:	3301      	adds	r3, #1
 8016ee6:	75fb      	strb	r3, [r7, #23]
 8016ee8:	7dfa      	ldrb	r2, [r7, #23]
 8016eea:	79fb      	ldrb	r3, [r7, #7]
 8016eec:	429a      	cmp	r2, r3
 8016eee:	d3d3      	bcc.n	8016e98 <IntToUnicode+0x18>
  }
}
 8016ef0:	bf00      	nop
 8016ef2:	bf00      	nop
 8016ef4:	371c      	adds	r7, #28
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efc:	4770      	bx	lr

08016efe <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8016efe:	b480      	push	{r7}
 8016f00:	b083      	sub	sp, #12
 8016f02:	af00      	add	r7, sp, #0
 8016f04:	4603      	mov	r3, r0
 8016f06:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8016f08:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	370c      	adds	r7, #12
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f14:	4770      	bx	lr
	...

08016f18 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b08e      	sub	sp, #56	; 0x38
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	4603      	mov	r3, r0
 8016f20:	60b9      	str	r1, [r7, #8]
 8016f22:	607a      	str	r2, [r7, #4]
 8016f24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
		HAL_SD_CardInfoTypeDef info;

	  int8_t ret = -1;
 8016f26:	23ff      	movs	r3, #255	; 0xff
 8016f28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 8016f2c:	f107 0314 	add.w	r3, r7, #20
 8016f30:	4619      	mov	r1, r3
 8016f32:	480a      	ldr	r0, [pc, #40]	; (8016f5c <STORAGE_GetCapacity_FS+0x44>)
 8016f34:	f7f2 fb2a 	bl	800958c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8016f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3a:	1e5a      	subs	r2, r3, #1
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8016f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f42:	b29a      	uxth	r2, r3
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8016f48:	2300      	movs	r3, #0
 8016f4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8016f4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3738      	adds	r7, #56	; 0x38
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
 8016f5a:	bf00      	nop
 8016f5c:	200059e4 	.word	0x200059e4

08016f60 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8016f60:	b480      	push	{r7}
 8016f62:	b083      	sub	sp, #12
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	4603      	mov	r3, r0
 8016f68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 8016f6a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr

08016f78 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8016f78:	b480      	push	{r7}
 8016f7a:	b083      	sub	sp, #12
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	4603      	mov	r3, r0
 8016f80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8016f82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	370c      	adds	r7, #12
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8e:	4770      	bx	lr

08016f90 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b088      	sub	sp, #32
 8016f94:	af02      	add	r7, sp, #8
 8016f96:	60b9      	str	r1, [r7, #8]
 8016f98:	607a      	str	r2, [r7, #4]
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	73fb      	strb	r3, [r7, #15]
 8016fa0:	4613      	mov	r3, r2
 8016fa2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	 int8_t ret = -1;
 8016fa4:	23ff      	movs	r3, #255	; 0xff
 8016fa6:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8016fa8:	89bb      	ldrh	r3, [r7, #12]
 8016faa:	f04f 32ff 	mov.w	r2, #4294967295
 8016fae:	9200      	str	r2, [sp, #0]
 8016fb0:	687a      	ldr	r2, [r7, #4]
 8016fb2:	68b9      	ldr	r1, [r7, #8]
 8016fb4:	4808      	ldr	r0, [pc, #32]	; (8016fd8 <STORAGE_Read_FS+0x48>)
 8016fb6:	f7f1 fc15 	bl	80087e4 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8016fba:	bf00      	nop
 8016fbc:	4806      	ldr	r0, [pc, #24]	; (8016fd8 <STORAGE_Read_FS+0x48>)
 8016fbe:	f7f2 fbab 	bl	8009718 <HAL_SD_GetCardState>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	2b04      	cmp	r3, #4
 8016fc6:	d1f9      	bne.n	8016fbc <STORAGE_Read_FS+0x2c>
	  ret = 0;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8016fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	3718      	adds	r7, #24
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}
 8016fd8:	200059e4 	.word	0x200059e4

08016fdc <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b088      	sub	sp, #32
 8016fe0:	af02      	add	r7, sp, #8
 8016fe2:	60b9      	str	r1, [r7, #8]
 8016fe4:	607a      	str	r2, [r7, #4]
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	4603      	mov	r3, r0
 8016fea:	73fb      	strb	r3, [r7, #15]
 8016fec:	4613      	mov	r3, r2
 8016fee:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8016ff0:	23ff      	movs	r3, #255	; 0xff
 8016ff2:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8016ff4:	89bb      	ldrh	r3, [r7, #12]
 8016ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8016ffa:	9200      	str	r2, [sp, #0]
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	68b9      	ldr	r1, [r7, #8]
 8017000:	4808      	ldr	r0, [pc, #32]	; (8017024 <STORAGE_Write_FS+0x48>)
 8017002:	f7f1 fdcd 	bl	8008ba0 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8017006:	bf00      	nop
 8017008:	4806      	ldr	r0, [pc, #24]	; (8017024 <STORAGE_Write_FS+0x48>)
 801700a:	f7f2 fb85 	bl	8009718 <HAL_SD_GetCardState>
 801700e:	4603      	mov	r3, r0
 8017010:	2b04      	cmp	r3, #4
 8017012:	d1f9      	bne.n	8017008 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8017014:	2300      	movs	r3, #0
 8017016:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8017018:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801701c:	4618      	mov	r0, r3
 801701e:	3718      	adds	r7, #24
 8017020:	46bd      	mov	sp, r7
 8017022:	bd80      	pop	{r7, pc}
 8017024:	200059e4 	.word	0x200059e4

08017028 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017028:	b480      	push	{r7}
 801702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801702c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801702e:	4618      	mov	r0, r3
 8017030:	46bd      	mov	sp, r7
 8017032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017036:	4770      	bx	lr

08017038 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b0a0      	sub	sp, #128	; 0x80
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017040:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8017044:	2200      	movs	r2, #0
 8017046:	601a      	str	r2, [r3, #0]
 8017048:	605a      	str	r2, [r3, #4]
 801704a:	609a      	str	r2, [r3, #8]
 801704c:	60da      	str	r2, [r3, #12]
 801704e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017050:	f107 0310 	add.w	r3, r7, #16
 8017054:	225c      	movs	r2, #92	; 0x5c
 8017056:	2100      	movs	r1, #0
 8017058:	4618      	mov	r0, r3
 801705a:	f001 fa01 	bl	8018460 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017066:	d149      	bne.n	80170fc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8017068:	f44f 7380 	mov.w	r3, #256	; 0x100
 801706c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 801706e:	2300      	movs	r3, #0
 8017070:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017072:	f107 0310 	add.w	r3, r7, #16
 8017076:	4618      	mov	r0, r3
 8017078:	f7f0 fb0c 	bl	8007694 <HAL_RCCEx_PeriphCLKConfig>
 801707c:	4603      	mov	r3, r0
 801707e:	2b00      	cmp	r3, #0
 8017080:	d001      	beq.n	8017086 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8017082:	f7eb fae3 	bl	800264c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017086:	2300      	movs	r3, #0
 8017088:	60fb      	str	r3, [r7, #12]
 801708a:	4b1e      	ldr	r3, [pc, #120]	; (8017104 <HAL_PCD_MspInit+0xcc>)
 801708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801708e:	4a1d      	ldr	r2, [pc, #116]	; (8017104 <HAL_PCD_MspInit+0xcc>)
 8017090:	f043 0301 	orr.w	r3, r3, #1
 8017094:	6313      	str	r3, [r2, #48]	; 0x30
 8017096:	4b1b      	ldr	r3, [pc, #108]	; (8017104 <HAL_PCD_MspInit+0xcc>)
 8017098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801709a:	f003 0301 	and.w	r3, r3, #1
 801709e:	60fb      	str	r3, [r7, #12]
 80170a0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80170a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80170a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80170a8:	2302      	movs	r3, #2
 80170aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170ac:	2300      	movs	r3, #0
 80170ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80170b0:	2303      	movs	r3, #3
 80170b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80170b4:	230a      	movs	r3, #10
 80170b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80170b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80170bc:	4619      	mov	r1, r3
 80170be:	4812      	ldr	r0, [pc, #72]	; (8017108 <HAL_PCD_MspInit+0xd0>)
 80170c0:	f7ed fd30 	bl	8004b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80170c4:	4b0f      	ldr	r3, [pc, #60]	; (8017104 <HAL_PCD_MspInit+0xcc>)
 80170c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170c8:	4a0e      	ldr	r2, [pc, #56]	; (8017104 <HAL_PCD_MspInit+0xcc>)
 80170ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170ce:	6353      	str	r3, [r2, #52]	; 0x34
 80170d0:	2300      	movs	r3, #0
 80170d2:	60bb      	str	r3, [r7, #8]
 80170d4:	4b0b      	ldr	r3, [pc, #44]	; (8017104 <HAL_PCD_MspInit+0xcc>)
 80170d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170d8:	4a0a      	ldr	r2, [pc, #40]	; (8017104 <HAL_PCD_MspInit+0xcc>)
 80170da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80170de:	6453      	str	r3, [r2, #68]	; 0x44
 80170e0:	4b08      	ldr	r3, [pc, #32]	; (8017104 <HAL_PCD_MspInit+0xcc>)
 80170e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80170e8:	60bb      	str	r3, [r7, #8]
 80170ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80170ec:	2200      	movs	r2, #0
 80170ee:	2105      	movs	r1, #5
 80170f0:	2043      	movs	r0, #67	; 0x43
 80170f2:	f7ed f901 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80170f6:	2043      	movs	r0, #67	; 0x43
 80170f8:	f7ed f91a 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80170fc:	bf00      	nop
 80170fe:	3780      	adds	r7, #128	; 0x80
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}
 8017104:	40023800 	.word	0x40023800
 8017108:	40020000 	.word	0x40020000

0801710c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b082      	sub	sp, #8
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017120:	4619      	mov	r1, r3
 8017122:	4610      	mov	r0, r2
 8017124:	f7f8 fe12 	bl	800fd4c <USBD_LL_SetupStage>
}
 8017128:	bf00      	nop
 801712a:	3708      	adds	r7, #8
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}

08017130 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b082      	sub	sp, #8
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	460b      	mov	r3, r1
 801713a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017142:	78fa      	ldrb	r2, [r7, #3]
 8017144:	6879      	ldr	r1, [r7, #4]
 8017146:	4613      	mov	r3, r2
 8017148:	00db      	lsls	r3, r3, #3
 801714a:	4413      	add	r3, r2
 801714c:	009b      	lsls	r3, r3, #2
 801714e:	440b      	add	r3, r1
 8017150:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	78fb      	ldrb	r3, [r7, #3]
 8017158:	4619      	mov	r1, r3
 801715a:	f7f8 fe4c 	bl	800fdf6 <USBD_LL_DataOutStage>
}
 801715e:	bf00      	nop
 8017160:	3708      	adds	r7, #8
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}

08017166 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017166:	b580      	push	{r7, lr}
 8017168:	b082      	sub	sp, #8
 801716a:	af00      	add	r7, sp, #0
 801716c:	6078      	str	r0, [r7, #4]
 801716e:	460b      	mov	r3, r1
 8017170:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017178:	78fa      	ldrb	r2, [r7, #3]
 801717a:	6879      	ldr	r1, [r7, #4]
 801717c:	4613      	mov	r3, r2
 801717e:	00db      	lsls	r3, r3, #3
 8017180:	4413      	add	r3, r2
 8017182:	009b      	lsls	r3, r3, #2
 8017184:	440b      	add	r3, r1
 8017186:	334c      	adds	r3, #76	; 0x4c
 8017188:	681a      	ldr	r2, [r3, #0]
 801718a:	78fb      	ldrb	r3, [r7, #3]
 801718c:	4619      	mov	r1, r3
 801718e:	f7f8 fee5 	bl	800ff5c <USBD_LL_DataInStage>
}
 8017192:	bf00      	nop
 8017194:	3708      	adds	r7, #8
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}

0801719a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801719a:	b580      	push	{r7, lr}
 801719c:	b082      	sub	sp, #8
 801719e:	af00      	add	r7, sp, #0
 80171a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7f9 f819 	bl	80101e0 <USBD_LL_SOF>
}
 80171ae:	bf00      	nop
 80171b0:	3708      	adds	r7, #8
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}

080171b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171b6:	b580      	push	{r7, lr}
 80171b8:	b084      	sub	sp, #16
 80171ba:	af00      	add	r7, sp, #0
 80171bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80171be:	2301      	movs	r3, #1
 80171c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	68db      	ldr	r3, [r3, #12]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d102      	bne.n	80171d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80171ca:	2300      	movs	r3, #0
 80171cc:	73fb      	strb	r3, [r7, #15]
 80171ce:	e008      	b.n	80171e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	68db      	ldr	r3, [r3, #12]
 80171d4:	2b02      	cmp	r3, #2
 80171d6:	d102      	bne.n	80171de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80171d8:	2301      	movs	r3, #1
 80171da:	73fb      	strb	r3, [r7, #15]
 80171dc:	e001      	b.n	80171e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80171de:	f7eb fa35 	bl	800264c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171e8:	7bfa      	ldrb	r2, [r7, #15]
 80171ea:	4611      	mov	r1, r2
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7f8 ffb9 	bl	8010164 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171f8:	4618      	mov	r0, r3
 80171fa:	f7f8 ff61 	bl	80100c0 <USBD_LL_Reset>
}
 80171fe:	bf00      	nop
 8017200:	3710      	adds	r7, #16
 8017202:	46bd      	mov	sp, r7
 8017204:	bd80      	pop	{r7, pc}
	...

08017208 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b082      	sub	sp, #8
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017216:	4618      	mov	r0, r3
 8017218:	f7f8 ffb4 	bl	8010184 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	687a      	ldr	r2, [r7, #4]
 8017228:	6812      	ldr	r2, [r2, #0]
 801722a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801722e:	f043 0301 	orr.w	r3, r3, #1
 8017232:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	6a1b      	ldr	r3, [r3, #32]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d005      	beq.n	8017248 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801723c:	4b04      	ldr	r3, [pc, #16]	; (8017250 <HAL_PCD_SuspendCallback+0x48>)
 801723e:	691b      	ldr	r3, [r3, #16]
 8017240:	4a03      	ldr	r2, [pc, #12]	; (8017250 <HAL_PCD_SuspendCallback+0x48>)
 8017242:	f043 0306 	orr.w	r3, r3, #6
 8017246:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017248:	bf00      	nop
 801724a:	3708      	adds	r7, #8
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}
 8017250:	e000ed00 	.word	0xe000ed00

08017254 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017262:	4618      	mov	r0, r3
 8017264:	f7f8 ffa4 	bl	80101b0 <USBD_LL_Resume>
}
 8017268:	bf00      	nop
 801726a:	3708      	adds	r7, #8
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}

08017270 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b082      	sub	sp, #8
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
 8017278:	460b      	mov	r3, r1
 801727a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017282:	78fa      	ldrb	r2, [r7, #3]
 8017284:	4611      	mov	r1, r2
 8017286:	4618      	mov	r0, r3
 8017288:	f7f8 fffc 	bl	8010284 <USBD_LL_IsoOUTIncomplete>
}
 801728c:	bf00      	nop
 801728e:	3708      	adds	r7, #8
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}

08017294 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b082      	sub	sp, #8
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	460b      	mov	r3, r1
 801729e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172a6:	78fa      	ldrb	r2, [r7, #3]
 80172a8:	4611      	mov	r1, r2
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7f8 ffb8 	bl	8010220 <USBD_LL_IsoINIncomplete>
}
 80172b0:	bf00      	nop
 80172b2:	3708      	adds	r7, #8
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b082      	sub	sp, #8
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172c6:	4618      	mov	r0, r3
 80172c8:	f7f9 f80e 	bl	80102e8 <USBD_LL_DevConnected>
}
 80172cc:	bf00      	nop
 80172ce:	3708      	adds	r7, #8
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}

080172d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b082      	sub	sp, #8
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7f9 f80b 	bl	80102fe <USBD_LL_DevDisconnected>
}
 80172e8:	bf00      	nop
 80172ea:	3708      	adds	r7, #8
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}

080172f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b082      	sub	sp, #8
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	781b      	ldrb	r3, [r3, #0]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d13c      	bne.n	801737a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017300:	4a20      	ldr	r2, [pc, #128]	; (8017384 <USBD_LL_Init+0x94>)
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	4a1e      	ldr	r2, [pc, #120]	; (8017384 <USBD_LL_Init+0x94>)
 801730c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017310:	4b1c      	ldr	r3, [pc, #112]	; (8017384 <USBD_LL_Init+0x94>)
 8017312:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017316:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017318:	4b1a      	ldr	r3, [pc, #104]	; (8017384 <USBD_LL_Init+0x94>)
 801731a:	2206      	movs	r2, #6
 801731c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801731e:	4b19      	ldr	r3, [pc, #100]	; (8017384 <USBD_LL_Init+0x94>)
 8017320:	2202      	movs	r2, #2
 8017322:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017324:	4b17      	ldr	r3, [pc, #92]	; (8017384 <USBD_LL_Init+0x94>)
 8017326:	2200      	movs	r2, #0
 8017328:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801732a:	4b16      	ldr	r3, [pc, #88]	; (8017384 <USBD_LL_Init+0x94>)
 801732c:	2202      	movs	r2, #2
 801732e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017330:	4b14      	ldr	r3, [pc, #80]	; (8017384 <USBD_LL_Init+0x94>)
 8017332:	2200      	movs	r2, #0
 8017334:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017336:	4b13      	ldr	r3, [pc, #76]	; (8017384 <USBD_LL_Init+0x94>)
 8017338:	2200      	movs	r2, #0
 801733a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801733c:	4b11      	ldr	r3, [pc, #68]	; (8017384 <USBD_LL_Init+0x94>)
 801733e:	2200      	movs	r2, #0
 8017340:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017342:	4b10      	ldr	r3, [pc, #64]	; (8017384 <USBD_LL_Init+0x94>)
 8017344:	2200      	movs	r2, #0
 8017346:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017348:	4b0e      	ldr	r3, [pc, #56]	; (8017384 <USBD_LL_Init+0x94>)
 801734a:	2200      	movs	r2, #0
 801734c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801734e:	480d      	ldr	r0, [pc, #52]	; (8017384 <USBD_LL_Init+0x94>)
 8017350:	f7ee fd5d 	bl	8005e0e <HAL_PCD_Init>
 8017354:	4603      	mov	r3, r0
 8017356:	2b00      	cmp	r3, #0
 8017358:	d001      	beq.n	801735e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801735a:	f7eb f977 	bl	800264c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801735e:	2180      	movs	r1, #128	; 0x80
 8017360:	4808      	ldr	r0, [pc, #32]	; (8017384 <USBD_LL_Init+0x94>)
 8017362:	f7f0 f816 	bl	8007392 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017366:	2240      	movs	r2, #64	; 0x40
 8017368:	2100      	movs	r1, #0
 801736a:	4806      	ldr	r0, [pc, #24]	; (8017384 <USBD_LL_Init+0x94>)
 801736c:	f7ef ffca 	bl	8007304 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017370:	2280      	movs	r2, #128	; 0x80
 8017372:	2101      	movs	r1, #1
 8017374:	4803      	ldr	r0, [pc, #12]	; (8017384 <USBD_LL_Init+0x94>)
 8017376:	f7ef ffc5 	bl	8007304 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801737a:	2300      	movs	r3, #0
}
 801737c:	4618      	mov	r0, r3
 801737e:	3708      	adds	r7, #8
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}
 8017384:	2000aaa8 	.word	0x2000aaa8

08017388 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017390:	2300      	movs	r3, #0
 8017392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017394:	2300      	movs	r3, #0
 8017396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801739e:	4618      	mov	r0, r3
 80173a0:	f7ee fe59 	bl	8006056 <HAL_PCD_Start>
 80173a4:	4603      	mov	r3, r0
 80173a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173a8:	7bfb      	ldrb	r3, [r7, #15]
 80173aa:	4618      	mov	r0, r3
 80173ac:	f000 f9b0 	bl	8017710 <USBD_Get_USB_Status>
 80173b0:	4603      	mov	r3, r0
 80173b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3710      	adds	r7, #16
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}

080173be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80173be:	b580      	push	{r7, lr}
 80173c0:	b084      	sub	sp, #16
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	6078      	str	r0, [r7, #4]
 80173c6:	4608      	mov	r0, r1
 80173c8:	4611      	mov	r1, r2
 80173ca:	461a      	mov	r2, r3
 80173cc:	4603      	mov	r3, r0
 80173ce:	70fb      	strb	r3, [r7, #3]
 80173d0:	460b      	mov	r3, r1
 80173d2:	70bb      	strb	r3, [r7, #2]
 80173d4:	4613      	mov	r3, r2
 80173d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173d8:	2300      	movs	r3, #0
 80173da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173dc:	2300      	movs	r3, #0
 80173de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80173e6:	78bb      	ldrb	r3, [r7, #2]
 80173e8:	883a      	ldrh	r2, [r7, #0]
 80173ea:	78f9      	ldrb	r1, [r7, #3]
 80173ec:	f7ef fb57 	bl	8006a9e <HAL_PCD_EP_Open>
 80173f0:	4603      	mov	r3, r0
 80173f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173f4:	7bfb      	ldrb	r3, [r7, #15]
 80173f6:	4618      	mov	r0, r3
 80173f8:	f000 f98a 	bl	8017710 <USBD_Get_USB_Status>
 80173fc:	4603      	mov	r3, r0
 80173fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017400:	7bbb      	ldrb	r3, [r7, #14]
}
 8017402:	4618      	mov	r0, r3
 8017404:	3710      	adds	r7, #16
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}

0801740a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801740a:	b580      	push	{r7, lr}
 801740c:	b084      	sub	sp, #16
 801740e:	af00      	add	r7, sp, #0
 8017410:	6078      	str	r0, [r7, #4]
 8017412:	460b      	mov	r3, r1
 8017414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017416:	2300      	movs	r3, #0
 8017418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801741a:	2300      	movs	r3, #0
 801741c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017424:	78fa      	ldrb	r2, [r7, #3]
 8017426:	4611      	mov	r1, r2
 8017428:	4618      	mov	r0, r3
 801742a:	f7ef fba0 	bl	8006b6e <HAL_PCD_EP_Close>
 801742e:	4603      	mov	r3, r0
 8017430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017432:	7bfb      	ldrb	r3, [r7, #15]
 8017434:	4618      	mov	r0, r3
 8017436:	f000 f96b 	bl	8017710 <USBD_Get_USB_Status>
 801743a:	4603      	mov	r3, r0
 801743c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801743e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017440:	4618      	mov	r0, r3
 8017442:	3710      	adds	r7, #16
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}

08017448 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b084      	sub	sp, #16
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	460b      	mov	r3, r1
 8017452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017454:	2300      	movs	r3, #0
 8017456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017458:	2300      	movs	r3, #0
 801745a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017462:	78fa      	ldrb	r2, [r7, #3]
 8017464:	4611      	mov	r1, r2
 8017466:	4618      	mov	r0, r3
 8017468:	f7ef fd63 	bl	8006f32 <HAL_PCD_EP_Flush>
 801746c:	4603      	mov	r3, r0
 801746e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017470:	7bfb      	ldrb	r3, [r7, #15]
 8017472:	4618      	mov	r0, r3
 8017474:	f000 f94c 	bl	8017710 <USBD_Get_USB_Status>
 8017478:	4603      	mov	r3, r0
 801747a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801747c:	7bbb      	ldrb	r3, [r7, #14]
}
 801747e:	4618      	mov	r0, r3
 8017480:	3710      	adds	r7, #16
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}

08017486 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017486:	b580      	push	{r7, lr}
 8017488:	b084      	sub	sp, #16
 801748a:	af00      	add	r7, sp, #0
 801748c:	6078      	str	r0, [r7, #4]
 801748e:	460b      	mov	r3, r1
 8017490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017492:	2300      	movs	r3, #0
 8017494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017496:	2300      	movs	r3, #0
 8017498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174a0:	78fa      	ldrb	r2, [r7, #3]
 80174a2:	4611      	mov	r1, r2
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7ef fc59 	bl	8006d5c <HAL_PCD_EP_SetStall>
 80174aa:	4603      	mov	r3, r0
 80174ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174ae:	7bfb      	ldrb	r3, [r7, #15]
 80174b0:	4618      	mov	r0, r3
 80174b2:	f000 f92d 	bl	8017710 <USBD_Get_USB_Status>
 80174b6:	4603      	mov	r3, r0
 80174b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80174bc:	4618      	mov	r0, r3
 80174be:	3710      	adds	r7, #16
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b084      	sub	sp, #16
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	460b      	mov	r3, r1
 80174ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174d0:	2300      	movs	r3, #0
 80174d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174d4:	2300      	movs	r3, #0
 80174d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174de:	78fa      	ldrb	r2, [r7, #3]
 80174e0:	4611      	mov	r1, r2
 80174e2:	4618      	mov	r0, r3
 80174e4:	f7ef fc9e 	bl	8006e24 <HAL_PCD_EP_ClrStall>
 80174e8:	4603      	mov	r3, r0
 80174ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174ec:	7bfb      	ldrb	r3, [r7, #15]
 80174ee:	4618      	mov	r0, r3
 80174f0:	f000 f90e 	bl	8017710 <USBD_Get_USB_Status>
 80174f4:	4603      	mov	r3, r0
 80174f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80174fa:	4618      	mov	r0, r3
 80174fc:	3710      	adds	r7, #16
 80174fe:	46bd      	mov	sp, r7
 8017500:	bd80      	pop	{r7, pc}

08017502 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017502:	b480      	push	{r7}
 8017504:	b085      	sub	sp, #20
 8017506:	af00      	add	r7, sp, #0
 8017508:	6078      	str	r0, [r7, #4]
 801750a:	460b      	mov	r3, r1
 801750c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017514:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801751a:	2b00      	cmp	r3, #0
 801751c:	da0b      	bge.n	8017536 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801751e:	78fb      	ldrb	r3, [r7, #3]
 8017520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017524:	68f9      	ldr	r1, [r7, #12]
 8017526:	4613      	mov	r3, r2
 8017528:	00db      	lsls	r3, r3, #3
 801752a:	4413      	add	r3, r2
 801752c:	009b      	lsls	r3, r3, #2
 801752e:	440b      	add	r3, r1
 8017530:	333e      	adds	r3, #62	; 0x3e
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	e00b      	b.n	801754e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017536:	78fb      	ldrb	r3, [r7, #3]
 8017538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801753c:	68f9      	ldr	r1, [r7, #12]
 801753e:	4613      	mov	r3, r2
 8017540:	00db      	lsls	r3, r3, #3
 8017542:	4413      	add	r3, r2
 8017544:	009b      	lsls	r3, r3, #2
 8017546:	440b      	add	r3, r1
 8017548:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801754c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801754e:	4618      	mov	r0, r3
 8017550:	3714      	adds	r7, #20
 8017552:	46bd      	mov	sp, r7
 8017554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017558:	4770      	bx	lr

0801755a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801755a:	b580      	push	{r7, lr}
 801755c:	b084      	sub	sp, #16
 801755e:	af00      	add	r7, sp, #0
 8017560:	6078      	str	r0, [r7, #4]
 8017562:	460b      	mov	r3, r1
 8017564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017566:	2300      	movs	r3, #0
 8017568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801756a:	2300      	movs	r3, #0
 801756c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017574:	78fa      	ldrb	r2, [r7, #3]
 8017576:	4611      	mov	r1, r2
 8017578:	4618      	mov	r0, r3
 801757a:	f7ef fa6b 	bl	8006a54 <HAL_PCD_SetAddress>
 801757e:	4603      	mov	r3, r0
 8017580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017582:	7bfb      	ldrb	r3, [r7, #15]
 8017584:	4618      	mov	r0, r3
 8017586:	f000 f8c3 	bl	8017710 <USBD_Get_USB_Status>
 801758a:	4603      	mov	r3, r0
 801758c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801758e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017590:	4618      	mov	r0, r3
 8017592:	3710      	adds	r7, #16
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b086      	sub	sp, #24
 801759c:	af00      	add	r7, sp, #0
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	607a      	str	r2, [r7, #4]
 80175a2:	603b      	str	r3, [r7, #0]
 80175a4:	460b      	mov	r3, r1
 80175a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175a8:	2300      	movs	r3, #0
 80175aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175ac:	2300      	movs	r3, #0
 80175ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80175b6:	7af9      	ldrb	r1, [r7, #11]
 80175b8:	683b      	ldr	r3, [r7, #0]
 80175ba:	687a      	ldr	r2, [r7, #4]
 80175bc:	f7ef fb84 	bl	8006cc8 <HAL_PCD_EP_Transmit>
 80175c0:	4603      	mov	r3, r0
 80175c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175c4:	7dfb      	ldrb	r3, [r7, #23]
 80175c6:	4618      	mov	r0, r3
 80175c8:	f000 f8a2 	bl	8017710 <USBD_Get_USB_Status>
 80175cc:	4603      	mov	r3, r0
 80175ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80175d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3718      	adds	r7, #24
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}

080175da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80175da:	b580      	push	{r7, lr}
 80175dc:	b086      	sub	sp, #24
 80175de:	af00      	add	r7, sp, #0
 80175e0:	60f8      	str	r0, [r7, #12]
 80175e2:	607a      	str	r2, [r7, #4]
 80175e4:	603b      	str	r3, [r7, #0]
 80175e6:	460b      	mov	r3, r1
 80175e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175ea:	2300      	movs	r3, #0
 80175ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175ee:	2300      	movs	r3, #0
 80175f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80175f8:	7af9      	ldrb	r1, [r7, #11]
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	687a      	ldr	r2, [r7, #4]
 80175fe:	f7ef fb00 	bl	8006c02 <HAL_PCD_EP_Receive>
 8017602:	4603      	mov	r3, r0
 8017604:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017606:	7dfb      	ldrb	r3, [r7, #23]
 8017608:	4618      	mov	r0, r3
 801760a:	f000 f881 	bl	8017710 <USBD_Get_USB_Status>
 801760e:	4603      	mov	r3, r0
 8017610:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017612:	7dbb      	ldrb	r3, [r7, #22]
}
 8017614:	4618      	mov	r0, r3
 8017616:	3718      	adds	r7, #24
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}

0801761c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b082      	sub	sp, #8
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
 8017624:	460b      	mov	r3, r1
 8017626:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801762e:	78fa      	ldrb	r2, [r7, #3]
 8017630:	4611      	mov	r1, r2
 8017632:	4618      	mov	r0, r3
 8017634:	f7ef fb30 	bl	8006c98 <HAL_PCD_EP_GetRxCount>
 8017638:	4603      	mov	r3, r0
}
 801763a:	4618      	mov	r0, r3
 801763c:	3708      	adds	r7, #8
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
	...

08017644 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b082      	sub	sp, #8
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	460b      	mov	r3, r1
 801764e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017650:	78fb      	ldrb	r3, [r7, #3]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d002      	beq.n	801765c <HAL_PCDEx_LPM_Callback+0x18>
 8017656:	2b01      	cmp	r3, #1
 8017658:	d01f      	beq.n	801769a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801765a:	e03b      	b.n	80176d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6a1b      	ldr	r3, [r3, #32]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d007      	beq.n	8017674 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8017664:	f7ea ff74 	bl	8002550 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017668:	4b1c      	ldr	r3, [pc, #112]	; (80176dc <HAL_PCDEx_LPM_Callback+0x98>)
 801766a:	691b      	ldr	r3, [r3, #16]
 801766c:	4a1b      	ldr	r2, [pc, #108]	; (80176dc <HAL_PCDEx_LPM_Callback+0x98>)
 801766e:	f023 0306 	bic.w	r3, r3, #6
 8017672:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	687a      	ldr	r2, [r7, #4]
 8017680:	6812      	ldr	r2, [r2, #0]
 8017682:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017686:	f023 0301 	bic.w	r3, r3, #1
 801768a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017692:	4618      	mov	r0, r3
 8017694:	f7f8 fd8c 	bl	80101b0 <USBD_LL_Resume>
    break;
 8017698:	e01c      	b.n	80176d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	687a      	ldr	r2, [r7, #4]
 80176a6:	6812      	ldr	r2, [r2, #0]
 80176a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80176ac:	f043 0301 	orr.w	r3, r3, #1
 80176b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80176b8:	4618      	mov	r0, r3
 80176ba:	f7f8 fd63 	bl	8010184 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	6a1b      	ldr	r3, [r3, #32]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d005      	beq.n	80176d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80176c6:	4b05      	ldr	r3, [pc, #20]	; (80176dc <HAL_PCDEx_LPM_Callback+0x98>)
 80176c8:	691b      	ldr	r3, [r3, #16]
 80176ca:	4a04      	ldr	r2, [pc, #16]	; (80176dc <HAL_PCDEx_LPM_Callback+0x98>)
 80176cc:	f043 0306 	orr.w	r3, r3, #6
 80176d0:	6113      	str	r3, [r2, #16]
    break;
 80176d2:	bf00      	nop
}
 80176d4:	bf00      	nop
 80176d6:	3708      	adds	r7, #8
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	e000ed00 	.word	0xe000ed00

080176e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80176e0:	b480      	push	{r7}
 80176e2:	b083      	sub	sp, #12
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80176e8:	4b03      	ldr	r3, [pc, #12]	; (80176f8 <USBD_static_malloc+0x18>)
}
 80176ea:	4618      	mov	r0, r3
 80176ec:	370c      	adds	r7, #12
 80176ee:	46bd      	mov	sp, r7
 80176f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f4:	4770      	bx	lr
 80176f6:	bf00      	nop
 80176f8:	2000afb4 	.word	0x2000afb4

080176fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80176fc:	b480      	push	{r7}
 80176fe:	b083      	sub	sp, #12
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]

}
 8017704:	bf00      	nop
 8017706:	370c      	adds	r7, #12
 8017708:	46bd      	mov	sp, r7
 801770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770e:	4770      	bx	lr

08017710 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017710:	b480      	push	{r7}
 8017712:	b085      	sub	sp, #20
 8017714:	af00      	add	r7, sp, #0
 8017716:	4603      	mov	r3, r0
 8017718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801771a:	2300      	movs	r3, #0
 801771c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801771e:	79fb      	ldrb	r3, [r7, #7]
 8017720:	2b03      	cmp	r3, #3
 8017722:	d817      	bhi.n	8017754 <USBD_Get_USB_Status+0x44>
 8017724:	a201      	add	r2, pc, #4	; (adr r2, 801772c <USBD_Get_USB_Status+0x1c>)
 8017726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801772a:	bf00      	nop
 801772c:	0801773d 	.word	0x0801773d
 8017730:	08017743 	.word	0x08017743
 8017734:	08017749 	.word	0x08017749
 8017738:	0801774f 	.word	0x0801774f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801773c:	2300      	movs	r3, #0
 801773e:	73fb      	strb	r3, [r7, #15]
    break;
 8017740:	e00b      	b.n	801775a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017742:	2303      	movs	r3, #3
 8017744:	73fb      	strb	r3, [r7, #15]
    break;
 8017746:	e008      	b.n	801775a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017748:	2301      	movs	r3, #1
 801774a:	73fb      	strb	r3, [r7, #15]
    break;
 801774c:	e005      	b.n	801775a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801774e:	2303      	movs	r3, #3
 8017750:	73fb      	strb	r3, [r7, #15]
    break;
 8017752:	e002      	b.n	801775a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017754:	2303      	movs	r3, #3
 8017756:	73fb      	strb	r3, [r7, #15]
    break;
 8017758:	bf00      	nop
  }
  return usb_status;
 801775a:	7bfb      	ldrb	r3, [r7, #15]
}
 801775c:	4618      	mov	r0, r3
 801775e:	3714      	adds	r7, #20
 8017760:	46bd      	mov	sp, r7
 8017762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017766:	4770      	bx	lr

08017768 <__cvt>:
 8017768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801776c:	ec55 4b10 	vmov	r4, r5, d0
 8017770:	2d00      	cmp	r5, #0
 8017772:	460e      	mov	r6, r1
 8017774:	4619      	mov	r1, r3
 8017776:	462b      	mov	r3, r5
 8017778:	bfbb      	ittet	lt
 801777a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801777e:	461d      	movlt	r5, r3
 8017780:	2300      	movge	r3, #0
 8017782:	232d      	movlt	r3, #45	; 0x2d
 8017784:	700b      	strb	r3, [r1, #0]
 8017786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017788:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801778c:	4691      	mov	r9, r2
 801778e:	f023 0820 	bic.w	r8, r3, #32
 8017792:	bfbc      	itt	lt
 8017794:	4622      	movlt	r2, r4
 8017796:	4614      	movlt	r4, r2
 8017798:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801779c:	d005      	beq.n	80177aa <__cvt+0x42>
 801779e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80177a2:	d100      	bne.n	80177a6 <__cvt+0x3e>
 80177a4:	3601      	adds	r6, #1
 80177a6:	2102      	movs	r1, #2
 80177a8:	e000      	b.n	80177ac <__cvt+0x44>
 80177aa:	2103      	movs	r1, #3
 80177ac:	ab03      	add	r3, sp, #12
 80177ae:	9301      	str	r3, [sp, #4]
 80177b0:	ab02      	add	r3, sp, #8
 80177b2:	9300      	str	r3, [sp, #0]
 80177b4:	ec45 4b10 	vmov	d0, r4, r5
 80177b8:	4653      	mov	r3, sl
 80177ba:	4632      	mov	r2, r6
 80177bc:	f000 ffbc 	bl	8018738 <_dtoa_r>
 80177c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80177c4:	4607      	mov	r7, r0
 80177c6:	d102      	bne.n	80177ce <__cvt+0x66>
 80177c8:	f019 0f01 	tst.w	r9, #1
 80177cc:	d022      	beq.n	8017814 <__cvt+0xac>
 80177ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80177d2:	eb07 0906 	add.w	r9, r7, r6
 80177d6:	d110      	bne.n	80177fa <__cvt+0x92>
 80177d8:	783b      	ldrb	r3, [r7, #0]
 80177da:	2b30      	cmp	r3, #48	; 0x30
 80177dc:	d10a      	bne.n	80177f4 <__cvt+0x8c>
 80177de:	2200      	movs	r2, #0
 80177e0:	2300      	movs	r3, #0
 80177e2:	4620      	mov	r0, r4
 80177e4:	4629      	mov	r1, r5
 80177e6:	f7e9 f99f 	bl	8000b28 <__aeabi_dcmpeq>
 80177ea:	b918      	cbnz	r0, 80177f4 <__cvt+0x8c>
 80177ec:	f1c6 0601 	rsb	r6, r6, #1
 80177f0:	f8ca 6000 	str.w	r6, [sl]
 80177f4:	f8da 3000 	ldr.w	r3, [sl]
 80177f8:	4499      	add	r9, r3
 80177fa:	2200      	movs	r2, #0
 80177fc:	2300      	movs	r3, #0
 80177fe:	4620      	mov	r0, r4
 8017800:	4629      	mov	r1, r5
 8017802:	f7e9 f991 	bl	8000b28 <__aeabi_dcmpeq>
 8017806:	b108      	cbz	r0, 801780c <__cvt+0xa4>
 8017808:	f8cd 900c 	str.w	r9, [sp, #12]
 801780c:	2230      	movs	r2, #48	; 0x30
 801780e:	9b03      	ldr	r3, [sp, #12]
 8017810:	454b      	cmp	r3, r9
 8017812:	d307      	bcc.n	8017824 <__cvt+0xbc>
 8017814:	9b03      	ldr	r3, [sp, #12]
 8017816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017818:	1bdb      	subs	r3, r3, r7
 801781a:	4638      	mov	r0, r7
 801781c:	6013      	str	r3, [r2, #0]
 801781e:	b004      	add	sp, #16
 8017820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017824:	1c59      	adds	r1, r3, #1
 8017826:	9103      	str	r1, [sp, #12]
 8017828:	701a      	strb	r2, [r3, #0]
 801782a:	e7f0      	b.n	801780e <__cvt+0xa6>

0801782c <__exponent>:
 801782c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801782e:	4603      	mov	r3, r0
 8017830:	2900      	cmp	r1, #0
 8017832:	bfb8      	it	lt
 8017834:	4249      	neglt	r1, r1
 8017836:	f803 2b02 	strb.w	r2, [r3], #2
 801783a:	bfb4      	ite	lt
 801783c:	222d      	movlt	r2, #45	; 0x2d
 801783e:	222b      	movge	r2, #43	; 0x2b
 8017840:	2909      	cmp	r1, #9
 8017842:	7042      	strb	r2, [r0, #1]
 8017844:	dd2a      	ble.n	801789c <__exponent+0x70>
 8017846:	f10d 0207 	add.w	r2, sp, #7
 801784a:	4617      	mov	r7, r2
 801784c:	260a      	movs	r6, #10
 801784e:	4694      	mov	ip, r2
 8017850:	fb91 f5f6 	sdiv	r5, r1, r6
 8017854:	fb06 1415 	mls	r4, r6, r5, r1
 8017858:	3430      	adds	r4, #48	; 0x30
 801785a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801785e:	460c      	mov	r4, r1
 8017860:	2c63      	cmp	r4, #99	; 0x63
 8017862:	f102 32ff 	add.w	r2, r2, #4294967295
 8017866:	4629      	mov	r1, r5
 8017868:	dcf1      	bgt.n	801784e <__exponent+0x22>
 801786a:	3130      	adds	r1, #48	; 0x30
 801786c:	f1ac 0402 	sub.w	r4, ip, #2
 8017870:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017874:	1c41      	adds	r1, r0, #1
 8017876:	4622      	mov	r2, r4
 8017878:	42ba      	cmp	r2, r7
 801787a:	d30a      	bcc.n	8017892 <__exponent+0x66>
 801787c:	f10d 0209 	add.w	r2, sp, #9
 8017880:	eba2 020c 	sub.w	r2, r2, ip
 8017884:	42bc      	cmp	r4, r7
 8017886:	bf88      	it	hi
 8017888:	2200      	movhi	r2, #0
 801788a:	4413      	add	r3, r2
 801788c:	1a18      	subs	r0, r3, r0
 801788e:	b003      	add	sp, #12
 8017890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017892:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017896:	f801 5f01 	strb.w	r5, [r1, #1]!
 801789a:	e7ed      	b.n	8017878 <__exponent+0x4c>
 801789c:	2330      	movs	r3, #48	; 0x30
 801789e:	3130      	adds	r1, #48	; 0x30
 80178a0:	7083      	strb	r3, [r0, #2]
 80178a2:	70c1      	strb	r1, [r0, #3]
 80178a4:	1d03      	adds	r3, r0, #4
 80178a6:	e7f1      	b.n	801788c <__exponent+0x60>

080178a8 <_printf_float>:
 80178a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ac:	ed2d 8b02 	vpush	{d8}
 80178b0:	b08d      	sub	sp, #52	; 0x34
 80178b2:	460c      	mov	r4, r1
 80178b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80178b8:	4616      	mov	r6, r2
 80178ba:	461f      	mov	r7, r3
 80178bc:	4605      	mov	r5, r0
 80178be:	f000 fdd7 	bl	8018470 <_localeconv_r>
 80178c2:	f8d0 a000 	ldr.w	sl, [r0]
 80178c6:	4650      	mov	r0, sl
 80178c8:	f7e8 fd02 	bl	80002d0 <strlen>
 80178cc:	2300      	movs	r3, #0
 80178ce:	930a      	str	r3, [sp, #40]	; 0x28
 80178d0:	6823      	ldr	r3, [r4, #0]
 80178d2:	9305      	str	r3, [sp, #20]
 80178d4:	f8d8 3000 	ldr.w	r3, [r8]
 80178d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80178dc:	3307      	adds	r3, #7
 80178de:	f023 0307 	bic.w	r3, r3, #7
 80178e2:	f103 0208 	add.w	r2, r3, #8
 80178e6:	f8c8 2000 	str.w	r2, [r8]
 80178ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80178ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80178f2:	9307      	str	r3, [sp, #28]
 80178f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80178f8:	ee08 0a10 	vmov	s16, r0
 80178fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8017900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017904:	4b9e      	ldr	r3, [pc, #632]	; (8017b80 <_printf_float+0x2d8>)
 8017906:	f04f 32ff 	mov.w	r2, #4294967295
 801790a:	f7e9 f93f 	bl	8000b8c <__aeabi_dcmpun>
 801790e:	bb88      	cbnz	r0, 8017974 <_printf_float+0xcc>
 8017910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017914:	4b9a      	ldr	r3, [pc, #616]	; (8017b80 <_printf_float+0x2d8>)
 8017916:	f04f 32ff 	mov.w	r2, #4294967295
 801791a:	f7e9 f919 	bl	8000b50 <__aeabi_dcmple>
 801791e:	bb48      	cbnz	r0, 8017974 <_printf_float+0xcc>
 8017920:	2200      	movs	r2, #0
 8017922:	2300      	movs	r3, #0
 8017924:	4640      	mov	r0, r8
 8017926:	4649      	mov	r1, r9
 8017928:	f7e9 f908 	bl	8000b3c <__aeabi_dcmplt>
 801792c:	b110      	cbz	r0, 8017934 <_printf_float+0x8c>
 801792e:	232d      	movs	r3, #45	; 0x2d
 8017930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017934:	4a93      	ldr	r2, [pc, #588]	; (8017b84 <_printf_float+0x2dc>)
 8017936:	4b94      	ldr	r3, [pc, #592]	; (8017b88 <_printf_float+0x2e0>)
 8017938:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801793c:	bf94      	ite	ls
 801793e:	4690      	movls	r8, r2
 8017940:	4698      	movhi	r8, r3
 8017942:	2303      	movs	r3, #3
 8017944:	6123      	str	r3, [r4, #16]
 8017946:	9b05      	ldr	r3, [sp, #20]
 8017948:	f023 0304 	bic.w	r3, r3, #4
 801794c:	6023      	str	r3, [r4, #0]
 801794e:	f04f 0900 	mov.w	r9, #0
 8017952:	9700      	str	r7, [sp, #0]
 8017954:	4633      	mov	r3, r6
 8017956:	aa0b      	add	r2, sp, #44	; 0x2c
 8017958:	4621      	mov	r1, r4
 801795a:	4628      	mov	r0, r5
 801795c:	f000 f9da 	bl	8017d14 <_printf_common>
 8017960:	3001      	adds	r0, #1
 8017962:	f040 8090 	bne.w	8017a86 <_printf_float+0x1de>
 8017966:	f04f 30ff 	mov.w	r0, #4294967295
 801796a:	b00d      	add	sp, #52	; 0x34
 801796c:	ecbd 8b02 	vpop	{d8}
 8017970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017974:	4642      	mov	r2, r8
 8017976:	464b      	mov	r3, r9
 8017978:	4640      	mov	r0, r8
 801797a:	4649      	mov	r1, r9
 801797c:	f7e9 f906 	bl	8000b8c <__aeabi_dcmpun>
 8017980:	b140      	cbz	r0, 8017994 <_printf_float+0xec>
 8017982:	464b      	mov	r3, r9
 8017984:	2b00      	cmp	r3, #0
 8017986:	bfbc      	itt	lt
 8017988:	232d      	movlt	r3, #45	; 0x2d
 801798a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801798e:	4a7f      	ldr	r2, [pc, #508]	; (8017b8c <_printf_float+0x2e4>)
 8017990:	4b7f      	ldr	r3, [pc, #508]	; (8017b90 <_printf_float+0x2e8>)
 8017992:	e7d1      	b.n	8017938 <_printf_float+0x90>
 8017994:	6863      	ldr	r3, [r4, #4]
 8017996:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801799a:	9206      	str	r2, [sp, #24]
 801799c:	1c5a      	adds	r2, r3, #1
 801799e:	d13f      	bne.n	8017a20 <_printf_float+0x178>
 80179a0:	2306      	movs	r3, #6
 80179a2:	6063      	str	r3, [r4, #4]
 80179a4:	9b05      	ldr	r3, [sp, #20]
 80179a6:	6861      	ldr	r1, [r4, #4]
 80179a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80179ac:	2300      	movs	r3, #0
 80179ae:	9303      	str	r3, [sp, #12]
 80179b0:	ab0a      	add	r3, sp, #40	; 0x28
 80179b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80179b6:	ab09      	add	r3, sp, #36	; 0x24
 80179b8:	ec49 8b10 	vmov	d0, r8, r9
 80179bc:	9300      	str	r3, [sp, #0]
 80179be:	6022      	str	r2, [r4, #0]
 80179c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80179c4:	4628      	mov	r0, r5
 80179c6:	f7ff fecf 	bl	8017768 <__cvt>
 80179ca:	9b06      	ldr	r3, [sp, #24]
 80179cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80179ce:	2b47      	cmp	r3, #71	; 0x47
 80179d0:	4680      	mov	r8, r0
 80179d2:	d108      	bne.n	80179e6 <_printf_float+0x13e>
 80179d4:	1cc8      	adds	r0, r1, #3
 80179d6:	db02      	blt.n	80179de <_printf_float+0x136>
 80179d8:	6863      	ldr	r3, [r4, #4]
 80179da:	4299      	cmp	r1, r3
 80179dc:	dd41      	ble.n	8017a62 <_printf_float+0x1ba>
 80179de:	f1ab 0302 	sub.w	r3, fp, #2
 80179e2:	fa5f fb83 	uxtb.w	fp, r3
 80179e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80179ea:	d820      	bhi.n	8017a2e <_printf_float+0x186>
 80179ec:	3901      	subs	r1, #1
 80179ee:	465a      	mov	r2, fp
 80179f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80179f4:	9109      	str	r1, [sp, #36]	; 0x24
 80179f6:	f7ff ff19 	bl	801782c <__exponent>
 80179fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179fc:	1813      	adds	r3, r2, r0
 80179fe:	2a01      	cmp	r2, #1
 8017a00:	4681      	mov	r9, r0
 8017a02:	6123      	str	r3, [r4, #16]
 8017a04:	dc02      	bgt.n	8017a0c <_printf_float+0x164>
 8017a06:	6822      	ldr	r2, [r4, #0]
 8017a08:	07d2      	lsls	r2, r2, #31
 8017a0a:	d501      	bpl.n	8017a10 <_printf_float+0x168>
 8017a0c:	3301      	adds	r3, #1
 8017a0e:	6123      	str	r3, [r4, #16]
 8017a10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d09c      	beq.n	8017952 <_printf_float+0xaa>
 8017a18:	232d      	movs	r3, #45	; 0x2d
 8017a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a1e:	e798      	b.n	8017952 <_printf_float+0xaa>
 8017a20:	9a06      	ldr	r2, [sp, #24]
 8017a22:	2a47      	cmp	r2, #71	; 0x47
 8017a24:	d1be      	bne.n	80179a4 <_printf_float+0xfc>
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d1bc      	bne.n	80179a4 <_printf_float+0xfc>
 8017a2a:	2301      	movs	r3, #1
 8017a2c:	e7b9      	b.n	80179a2 <_printf_float+0xfa>
 8017a2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017a32:	d118      	bne.n	8017a66 <_printf_float+0x1be>
 8017a34:	2900      	cmp	r1, #0
 8017a36:	6863      	ldr	r3, [r4, #4]
 8017a38:	dd0b      	ble.n	8017a52 <_printf_float+0x1aa>
 8017a3a:	6121      	str	r1, [r4, #16]
 8017a3c:	b913      	cbnz	r3, 8017a44 <_printf_float+0x19c>
 8017a3e:	6822      	ldr	r2, [r4, #0]
 8017a40:	07d0      	lsls	r0, r2, #31
 8017a42:	d502      	bpl.n	8017a4a <_printf_float+0x1a2>
 8017a44:	3301      	adds	r3, #1
 8017a46:	440b      	add	r3, r1
 8017a48:	6123      	str	r3, [r4, #16]
 8017a4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8017a4c:	f04f 0900 	mov.w	r9, #0
 8017a50:	e7de      	b.n	8017a10 <_printf_float+0x168>
 8017a52:	b913      	cbnz	r3, 8017a5a <_printf_float+0x1b2>
 8017a54:	6822      	ldr	r2, [r4, #0]
 8017a56:	07d2      	lsls	r2, r2, #31
 8017a58:	d501      	bpl.n	8017a5e <_printf_float+0x1b6>
 8017a5a:	3302      	adds	r3, #2
 8017a5c:	e7f4      	b.n	8017a48 <_printf_float+0x1a0>
 8017a5e:	2301      	movs	r3, #1
 8017a60:	e7f2      	b.n	8017a48 <_printf_float+0x1a0>
 8017a62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a68:	4299      	cmp	r1, r3
 8017a6a:	db05      	blt.n	8017a78 <_printf_float+0x1d0>
 8017a6c:	6823      	ldr	r3, [r4, #0]
 8017a6e:	6121      	str	r1, [r4, #16]
 8017a70:	07d8      	lsls	r0, r3, #31
 8017a72:	d5ea      	bpl.n	8017a4a <_printf_float+0x1a2>
 8017a74:	1c4b      	adds	r3, r1, #1
 8017a76:	e7e7      	b.n	8017a48 <_printf_float+0x1a0>
 8017a78:	2900      	cmp	r1, #0
 8017a7a:	bfd4      	ite	le
 8017a7c:	f1c1 0202 	rsble	r2, r1, #2
 8017a80:	2201      	movgt	r2, #1
 8017a82:	4413      	add	r3, r2
 8017a84:	e7e0      	b.n	8017a48 <_printf_float+0x1a0>
 8017a86:	6823      	ldr	r3, [r4, #0]
 8017a88:	055a      	lsls	r2, r3, #21
 8017a8a:	d407      	bmi.n	8017a9c <_printf_float+0x1f4>
 8017a8c:	6923      	ldr	r3, [r4, #16]
 8017a8e:	4642      	mov	r2, r8
 8017a90:	4631      	mov	r1, r6
 8017a92:	4628      	mov	r0, r5
 8017a94:	47b8      	blx	r7
 8017a96:	3001      	adds	r0, #1
 8017a98:	d12c      	bne.n	8017af4 <_printf_float+0x24c>
 8017a9a:	e764      	b.n	8017966 <_printf_float+0xbe>
 8017a9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017aa0:	f240 80e0 	bls.w	8017c64 <_printf_float+0x3bc>
 8017aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	2300      	movs	r3, #0
 8017aac:	f7e9 f83c 	bl	8000b28 <__aeabi_dcmpeq>
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d034      	beq.n	8017b1e <_printf_float+0x276>
 8017ab4:	4a37      	ldr	r2, [pc, #220]	; (8017b94 <_printf_float+0x2ec>)
 8017ab6:	2301      	movs	r3, #1
 8017ab8:	4631      	mov	r1, r6
 8017aba:	4628      	mov	r0, r5
 8017abc:	47b8      	blx	r7
 8017abe:	3001      	adds	r0, #1
 8017ac0:	f43f af51 	beq.w	8017966 <_printf_float+0xbe>
 8017ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017ac8:	429a      	cmp	r2, r3
 8017aca:	db02      	blt.n	8017ad2 <_printf_float+0x22a>
 8017acc:	6823      	ldr	r3, [r4, #0]
 8017ace:	07d8      	lsls	r0, r3, #31
 8017ad0:	d510      	bpl.n	8017af4 <_printf_float+0x24c>
 8017ad2:	ee18 3a10 	vmov	r3, s16
 8017ad6:	4652      	mov	r2, sl
 8017ad8:	4631      	mov	r1, r6
 8017ada:	4628      	mov	r0, r5
 8017adc:	47b8      	blx	r7
 8017ade:	3001      	adds	r0, #1
 8017ae0:	f43f af41 	beq.w	8017966 <_printf_float+0xbe>
 8017ae4:	f04f 0800 	mov.w	r8, #0
 8017ae8:	f104 091a 	add.w	r9, r4, #26
 8017aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017aee:	3b01      	subs	r3, #1
 8017af0:	4543      	cmp	r3, r8
 8017af2:	dc09      	bgt.n	8017b08 <_printf_float+0x260>
 8017af4:	6823      	ldr	r3, [r4, #0]
 8017af6:	079b      	lsls	r3, r3, #30
 8017af8:	f100 8107 	bmi.w	8017d0a <_printf_float+0x462>
 8017afc:	68e0      	ldr	r0, [r4, #12]
 8017afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b00:	4298      	cmp	r0, r3
 8017b02:	bfb8      	it	lt
 8017b04:	4618      	movlt	r0, r3
 8017b06:	e730      	b.n	801796a <_printf_float+0xc2>
 8017b08:	2301      	movs	r3, #1
 8017b0a:	464a      	mov	r2, r9
 8017b0c:	4631      	mov	r1, r6
 8017b0e:	4628      	mov	r0, r5
 8017b10:	47b8      	blx	r7
 8017b12:	3001      	adds	r0, #1
 8017b14:	f43f af27 	beq.w	8017966 <_printf_float+0xbe>
 8017b18:	f108 0801 	add.w	r8, r8, #1
 8017b1c:	e7e6      	b.n	8017aec <_printf_float+0x244>
 8017b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	dc39      	bgt.n	8017b98 <_printf_float+0x2f0>
 8017b24:	4a1b      	ldr	r2, [pc, #108]	; (8017b94 <_printf_float+0x2ec>)
 8017b26:	2301      	movs	r3, #1
 8017b28:	4631      	mov	r1, r6
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	47b8      	blx	r7
 8017b2e:	3001      	adds	r0, #1
 8017b30:	f43f af19 	beq.w	8017966 <_printf_float+0xbe>
 8017b34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017b38:	4313      	orrs	r3, r2
 8017b3a:	d102      	bne.n	8017b42 <_printf_float+0x29a>
 8017b3c:	6823      	ldr	r3, [r4, #0]
 8017b3e:	07d9      	lsls	r1, r3, #31
 8017b40:	d5d8      	bpl.n	8017af4 <_printf_float+0x24c>
 8017b42:	ee18 3a10 	vmov	r3, s16
 8017b46:	4652      	mov	r2, sl
 8017b48:	4631      	mov	r1, r6
 8017b4a:	4628      	mov	r0, r5
 8017b4c:	47b8      	blx	r7
 8017b4e:	3001      	adds	r0, #1
 8017b50:	f43f af09 	beq.w	8017966 <_printf_float+0xbe>
 8017b54:	f04f 0900 	mov.w	r9, #0
 8017b58:	f104 0a1a 	add.w	sl, r4, #26
 8017b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b5e:	425b      	negs	r3, r3
 8017b60:	454b      	cmp	r3, r9
 8017b62:	dc01      	bgt.n	8017b68 <_printf_float+0x2c0>
 8017b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b66:	e792      	b.n	8017a8e <_printf_float+0x1e6>
 8017b68:	2301      	movs	r3, #1
 8017b6a:	4652      	mov	r2, sl
 8017b6c:	4631      	mov	r1, r6
 8017b6e:	4628      	mov	r0, r5
 8017b70:	47b8      	blx	r7
 8017b72:	3001      	adds	r0, #1
 8017b74:	f43f aef7 	beq.w	8017966 <_printf_float+0xbe>
 8017b78:	f109 0901 	add.w	r9, r9, #1
 8017b7c:	e7ee      	b.n	8017b5c <_printf_float+0x2b4>
 8017b7e:	bf00      	nop
 8017b80:	7fefffff 	.word	0x7fefffff
 8017b84:	0801aa7c 	.word	0x0801aa7c
 8017b88:	0801aa80 	.word	0x0801aa80
 8017b8c:	0801aa84 	.word	0x0801aa84
 8017b90:	0801aa88 	.word	0x0801aa88
 8017b94:	0801aa8c 	.word	0x0801aa8c
 8017b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	bfa8      	it	ge
 8017ba0:	461a      	movge	r2, r3
 8017ba2:	2a00      	cmp	r2, #0
 8017ba4:	4691      	mov	r9, r2
 8017ba6:	dc37      	bgt.n	8017c18 <_printf_float+0x370>
 8017ba8:	f04f 0b00 	mov.w	fp, #0
 8017bac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017bb0:	f104 021a 	add.w	r2, r4, #26
 8017bb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017bb6:	9305      	str	r3, [sp, #20]
 8017bb8:	eba3 0309 	sub.w	r3, r3, r9
 8017bbc:	455b      	cmp	r3, fp
 8017bbe:	dc33      	bgt.n	8017c28 <_printf_float+0x380>
 8017bc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	db3b      	blt.n	8017c40 <_printf_float+0x398>
 8017bc8:	6823      	ldr	r3, [r4, #0]
 8017bca:	07da      	lsls	r2, r3, #31
 8017bcc:	d438      	bmi.n	8017c40 <_printf_float+0x398>
 8017bce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017bd2:	eba2 0903 	sub.w	r9, r2, r3
 8017bd6:	9b05      	ldr	r3, [sp, #20]
 8017bd8:	1ad2      	subs	r2, r2, r3
 8017bda:	4591      	cmp	r9, r2
 8017bdc:	bfa8      	it	ge
 8017bde:	4691      	movge	r9, r2
 8017be0:	f1b9 0f00 	cmp.w	r9, #0
 8017be4:	dc35      	bgt.n	8017c52 <_printf_float+0x3aa>
 8017be6:	f04f 0800 	mov.w	r8, #0
 8017bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017bee:	f104 0a1a 	add.w	sl, r4, #26
 8017bf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017bf6:	1a9b      	subs	r3, r3, r2
 8017bf8:	eba3 0309 	sub.w	r3, r3, r9
 8017bfc:	4543      	cmp	r3, r8
 8017bfe:	f77f af79 	ble.w	8017af4 <_printf_float+0x24c>
 8017c02:	2301      	movs	r3, #1
 8017c04:	4652      	mov	r2, sl
 8017c06:	4631      	mov	r1, r6
 8017c08:	4628      	mov	r0, r5
 8017c0a:	47b8      	blx	r7
 8017c0c:	3001      	adds	r0, #1
 8017c0e:	f43f aeaa 	beq.w	8017966 <_printf_float+0xbe>
 8017c12:	f108 0801 	add.w	r8, r8, #1
 8017c16:	e7ec      	b.n	8017bf2 <_printf_float+0x34a>
 8017c18:	4613      	mov	r3, r2
 8017c1a:	4631      	mov	r1, r6
 8017c1c:	4642      	mov	r2, r8
 8017c1e:	4628      	mov	r0, r5
 8017c20:	47b8      	blx	r7
 8017c22:	3001      	adds	r0, #1
 8017c24:	d1c0      	bne.n	8017ba8 <_printf_float+0x300>
 8017c26:	e69e      	b.n	8017966 <_printf_float+0xbe>
 8017c28:	2301      	movs	r3, #1
 8017c2a:	4631      	mov	r1, r6
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	9205      	str	r2, [sp, #20]
 8017c30:	47b8      	blx	r7
 8017c32:	3001      	adds	r0, #1
 8017c34:	f43f ae97 	beq.w	8017966 <_printf_float+0xbe>
 8017c38:	9a05      	ldr	r2, [sp, #20]
 8017c3a:	f10b 0b01 	add.w	fp, fp, #1
 8017c3e:	e7b9      	b.n	8017bb4 <_printf_float+0x30c>
 8017c40:	ee18 3a10 	vmov	r3, s16
 8017c44:	4652      	mov	r2, sl
 8017c46:	4631      	mov	r1, r6
 8017c48:	4628      	mov	r0, r5
 8017c4a:	47b8      	blx	r7
 8017c4c:	3001      	adds	r0, #1
 8017c4e:	d1be      	bne.n	8017bce <_printf_float+0x326>
 8017c50:	e689      	b.n	8017966 <_printf_float+0xbe>
 8017c52:	9a05      	ldr	r2, [sp, #20]
 8017c54:	464b      	mov	r3, r9
 8017c56:	4442      	add	r2, r8
 8017c58:	4631      	mov	r1, r6
 8017c5a:	4628      	mov	r0, r5
 8017c5c:	47b8      	blx	r7
 8017c5e:	3001      	adds	r0, #1
 8017c60:	d1c1      	bne.n	8017be6 <_printf_float+0x33e>
 8017c62:	e680      	b.n	8017966 <_printf_float+0xbe>
 8017c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c66:	2a01      	cmp	r2, #1
 8017c68:	dc01      	bgt.n	8017c6e <_printf_float+0x3c6>
 8017c6a:	07db      	lsls	r3, r3, #31
 8017c6c:	d53a      	bpl.n	8017ce4 <_printf_float+0x43c>
 8017c6e:	2301      	movs	r3, #1
 8017c70:	4642      	mov	r2, r8
 8017c72:	4631      	mov	r1, r6
 8017c74:	4628      	mov	r0, r5
 8017c76:	47b8      	blx	r7
 8017c78:	3001      	adds	r0, #1
 8017c7a:	f43f ae74 	beq.w	8017966 <_printf_float+0xbe>
 8017c7e:	ee18 3a10 	vmov	r3, s16
 8017c82:	4652      	mov	r2, sl
 8017c84:	4631      	mov	r1, r6
 8017c86:	4628      	mov	r0, r5
 8017c88:	47b8      	blx	r7
 8017c8a:	3001      	adds	r0, #1
 8017c8c:	f43f ae6b 	beq.w	8017966 <_printf_float+0xbe>
 8017c90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017c94:	2200      	movs	r2, #0
 8017c96:	2300      	movs	r3, #0
 8017c98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8017c9c:	f7e8 ff44 	bl	8000b28 <__aeabi_dcmpeq>
 8017ca0:	b9d8      	cbnz	r0, 8017cda <_printf_float+0x432>
 8017ca2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017ca6:	f108 0201 	add.w	r2, r8, #1
 8017caa:	4631      	mov	r1, r6
 8017cac:	4628      	mov	r0, r5
 8017cae:	47b8      	blx	r7
 8017cb0:	3001      	adds	r0, #1
 8017cb2:	d10e      	bne.n	8017cd2 <_printf_float+0x42a>
 8017cb4:	e657      	b.n	8017966 <_printf_float+0xbe>
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	4652      	mov	r2, sl
 8017cba:	4631      	mov	r1, r6
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	47b8      	blx	r7
 8017cc0:	3001      	adds	r0, #1
 8017cc2:	f43f ae50 	beq.w	8017966 <_printf_float+0xbe>
 8017cc6:	f108 0801 	add.w	r8, r8, #1
 8017cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ccc:	3b01      	subs	r3, #1
 8017cce:	4543      	cmp	r3, r8
 8017cd0:	dcf1      	bgt.n	8017cb6 <_printf_float+0x40e>
 8017cd2:	464b      	mov	r3, r9
 8017cd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017cd8:	e6da      	b.n	8017a90 <_printf_float+0x1e8>
 8017cda:	f04f 0800 	mov.w	r8, #0
 8017cde:	f104 0a1a 	add.w	sl, r4, #26
 8017ce2:	e7f2      	b.n	8017cca <_printf_float+0x422>
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	4642      	mov	r2, r8
 8017ce8:	e7df      	b.n	8017caa <_printf_float+0x402>
 8017cea:	2301      	movs	r3, #1
 8017cec:	464a      	mov	r2, r9
 8017cee:	4631      	mov	r1, r6
 8017cf0:	4628      	mov	r0, r5
 8017cf2:	47b8      	blx	r7
 8017cf4:	3001      	adds	r0, #1
 8017cf6:	f43f ae36 	beq.w	8017966 <_printf_float+0xbe>
 8017cfa:	f108 0801 	add.w	r8, r8, #1
 8017cfe:	68e3      	ldr	r3, [r4, #12]
 8017d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d02:	1a5b      	subs	r3, r3, r1
 8017d04:	4543      	cmp	r3, r8
 8017d06:	dcf0      	bgt.n	8017cea <_printf_float+0x442>
 8017d08:	e6f8      	b.n	8017afc <_printf_float+0x254>
 8017d0a:	f04f 0800 	mov.w	r8, #0
 8017d0e:	f104 0919 	add.w	r9, r4, #25
 8017d12:	e7f4      	b.n	8017cfe <_printf_float+0x456>

08017d14 <_printf_common>:
 8017d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d18:	4616      	mov	r6, r2
 8017d1a:	4699      	mov	r9, r3
 8017d1c:	688a      	ldr	r2, [r1, #8]
 8017d1e:	690b      	ldr	r3, [r1, #16]
 8017d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017d24:	4293      	cmp	r3, r2
 8017d26:	bfb8      	it	lt
 8017d28:	4613      	movlt	r3, r2
 8017d2a:	6033      	str	r3, [r6, #0]
 8017d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017d30:	4607      	mov	r7, r0
 8017d32:	460c      	mov	r4, r1
 8017d34:	b10a      	cbz	r2, 8017d3a <_printf_common+0x26>
 8017d36:	3301      	adds	r3, #1
 8017d38:	6033      	str	r3, [r6, #0]
 8017d3a:	6823      	ldr	r3, [r4, #0]
 8017d3c:	0699      	lsls	r1, r3, #26
 8017d3e:	bf42      	ittt	mi
 8017d40:	6833      	ldrmi	r3, [r6, #0]
 8017d42:	3302      	addmi	r3, #2
 8017d44:	6033      	strmi	r3, [r6, #0]
 8017d46:	6825      	ldr	r5, [r4, #0]
 8017d48:	f015 0506 	ands.w	r5, r5, #6
 8017d4c:	d106      	bne.n	8017d5c <_printf_common+0x48>
 8017d4e:	f104 0a19 	add.w	sl, r4, #25
 8017d52:	68e3      	ldr	r3, [r4, #12]
 8017d54:	6832      	ldr	r2, [r6, #0]
 8017d56:	1a9b      	subs	r3, r3, r2
 8017d58:	42ab      	cmp	r3, r5
 8017d5a:	dc26      	bgt.n	8017daa <_printf_common+0x96>
 8017d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017d60:	1e13      	subs	r3, r2, #0
 8017d62:	6822      	ldr	r2, [r4, #0]
 8017d64:	bf18      	it	ne
 8017d66:	2301      	movne	r3, #1
 8017d68:	0692      	lsls	r2, r2, #26
 8017d6a:	d42b      	bmi.n	8017dc4 <_printf_common+0xb0>
 8017d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017d70:	4649      	mov	r1, r9
 8017d72:	4638      	mov	r0, r7
 8017d74:	47c0      	blx	r8
 8017d76:	3001      	adds	r0, #1
 8017d78:	d01e      	beq.n	8017db8 <_printf_common+0xa4>
 8017d7a:	6823      	ldr	r3, [r4, #0]
 8017d7c:	6922      	ldr	r2, [r4, #16]
 8017d7e:	f003 0306 	and.w	r3, r3, #6
 8017d82:	2b04      	cmp	r3, #4
 8017d84:	bf02      	ittt	eq
 8017d86:	68e5      	ldreq	r5, [r4, #12]
 8017d88:	6833      	ldreq	r3, [r6, #0]
 8017d8a:	1aed      	subeq	r5, r5, r3
 8017d8c:	68a3      	ldr	r3, [r4, #8]
 8017d8e:	bf0c      	ite	eq
 8017d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017d94:	2500      	movne	r5, #0
 8017d96:	4293      	cmp	r3, r2
 8017d98:	bfc4      	itt	gt
 8017d9a:	1a9b      	subgt	r3, r3, r2
 8017d9c:	18ed      	addgt	r5, r5, r3
 8017d9e:	2600      	movs	r6, #0
 8017da0:	341a      	adds	r4, #26
 8017da2:	42b5      	cmp	r5, r6
 8017da4:	d11a      	bne.n	8017ddc <_printf_common+0xc8>
 8017da6:	2000      	movs	r0, #0
 8017da8:	e008      	b.n	8017dbc <_printf_common+0xa8>
 8017daa:	2301      	movs	r3, #1
 8017dac:	4652      	mov	r2, sl
 8017dae:	4649      	mov	r1, r9
 8017db0:	4638      	mov	r0, r7
 8017db2:	47c0      	blx	r8
 8017db4:	3001      	adds	r0, #1
 8017db6:	d103      	bne.n	8017dc0 <_printf_common+0xac>
 8017db8:	f04f 30ff 	mov.w	r0, #4294967295
 8017dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dc0:	3501      	adds	r5, #1
 8017dc2:	e7c6      	b.n	8017d52 <_printf_common+0x3e>
 8017dc4:	18e1      	adds	r1, r4, r3
 8017dc6:	1c5a      	adds	r2, r3, #1
 8017dc8:	2030      	movs	r0, #48	; 0x30
 8017dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017dce:	4422      	add	r2, r4
 8017dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017dd8:	3302      	adds	r3, #2
 8017dda:	e7c7      	b.n	8017d6c <_printf_common+0x58>
 8017ddc:	2301      	movs	r3, #1
 8017dde:	4622      	mov	r2, r4
 8017de0:	4649      	mov	r1, r9
 8017de2:	4638      	mov	r0, r7
 8017de4:	47c0      	blx	r8
 8017de6:	3001      	adds	r0, #1
 8017de8:	d0e6      	beq.n	8017db8 <_printf_common+0xa4>
 8017dea:	3601      	adds	r6, #1
 8017dec:	e7d9      	b.n	8017da2 <_printf_common+0x8e>
	...

08017df0 <_printf_i>:
 8017df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017df4:	7e0f      	ldrb	r7, [r1, #24]
 8017df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017df8:	2f78      	cmp	r7, #120	; 0x78
 8017dfa:	4691      	mov	r9, r2
 8017dfc:	4680      	mov	r8, r0
 8017dfe:	460c      	mov	r4, r1
 8017e00:	469a      	mov	sl, r3
 8017e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017e06:	d807      	bhi.n	8017e18 <_printf_i+0x28>
 8017e08:	2f62      	cmp	r7, #98	; 0x62
 8017e0a:	d80a      	bhi.n	8017e22 <_printf_i+0x32>
 8017e0c:	2f00      	cmp	r7, #0
 8017e0e:	f000 80d4 	beq.w	8017fba <_printf_i+0x1ca>
 8017e12:	2f58      	cmp	r7, #88	; 0x58
 8017e14:	f000 80c0 	beq.w	8017f98 <_printf_i+0x1a8>
 8017e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017e20:	e03a      	b.n	8017e98 <_printf_i+0xa8>
 8017e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017e26:	2b15      	cmp	r3, #21
 8017e28:	d8f6      	bhi.n	8017e18 <_printf_i+0x28>
 8017e2a:	a101      	add	r1, pc, #4	; (adr r1, 8017e30 <_printf_i+0x40>)
 8017e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017e30:	08017e89 	.word	0x08017e89
 8017e34:	08017e9d 	.word	0x08017e9d
 8017e38:	08017e19 	.word	0x08017e19
 8017e3c:	08017e19 	.word	0x08017e19
 8017e40:	08017e19 	.word	0x08017e19
 8017e44:	08017e19 	.word	0x08017e19
 8017e48:	08017e9d 	.word	0x08017e9d
 8017e4c:	08017e19 	.word	0x08017e19
 8017e50:	08017e19 	.word	0x08017e19
 8017e54:	08017e19 	.word	0x08017e19
 8017e58:	08017e19 	.word	0x08017e19
 8017e5c:	08017fa1 	.word	0x08017fa1
 8017e60:	08017ec9 	.word	0x08017ec9
 8017e64:	08017f5b 	.word	0x08017f5b
 8017e68:	08017e19 	.word	0x08017e19
 8017e6c:	08017e19 	.word	0x08017e19
 8017e70:	08017fc3 	.word	0x08017fc3
 8017e74:	08017e19 	.word	0x08017e19
 8017e78:	08017ec9 	.word	0x08017ec9
 8017e7c:	08017e19 	.word	0x08017e19
 8017e80:	08017e19 	.word	0x08017e19
 8017e84:	08017f63 	.word	0x08017f63
 8017e88:	682b      	ldr	r3, [r5, #0]
 8017e8a:	1d1a      	adds	r2, r3, #4
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	602a      	str	r2, [r5, #0]
 8017e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017e98:	2301      	movs	r3, #1
 8017e9a:	e09f      	b.n	8017fdc <_printf_i+0x1ec>
 8017e9c:	6820      	ldr	r0, [r4, #0]
 8017e9e:	682b      	ldr	r3, [r5, #0]
 8017ea0:	0607      	lsls	r7, r0, #24
 8017ea2:	f103 0104 	add.w	r1, r3, #4
 8017ea6:	6029      	str	r1, [r5, #0]
 8017ea8:	d501      	bpl.n	8017eae <_printf_i+0xbe>
 8017eaa:	681e      	ldr	r6, [r3, #0]
 8017eac:	e003      	b.n	8017eb6 <_printf_i+0xc6>
 8017eae:	0646      	lsls	r6, r0, #25
 8017eb0:	d5fb      	bpl.n	8017eaa <_printf_i+0xba>
 8017eb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017eb6:	2e00      	cmp	r6, #0
 8017eb8:	da03      	bge.n	8017ec2 <_printf_i+0xd2>
 8017eba:	232d      	movs	r3, #45	; 0x2d
 8017ebc:	4276      	negs	r6, r6
 8017ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ec2:	485a      	ldr	r0, [pc, #360]	; (801802c <_printf_i+0x23c>)
 8017ec4:	230a      	movs	r3, #10
 8017ec6:	e012      	b.n	8017eee <_printf_i+0xfe>
 8017ec8:	682b      	ldr	r3, [r5, #0]
 8017eca:	6820      	ldr	r0, [r4, #0]
 8017ecc:	1d19      	adds	r1, r3, #4
 8017ece:	6029      	str	r1, [r5, #0]
 8017ed0:	0605      	lsls	r5, r0, #24
 8017ed2:	d501      	bpl.n	8017ed8 <_printf_i+0xe8>
 8017ed4:	681e      	ldr	r6, [r3, #0]
 8017ed6:	e002      	b.n	8017ede <_printf_i+0xee>
 8017ed8:	0641      	lsls	r1, r0, #25
 8017eda:	d5fb      	bpl.n	8017ed4 <_printf_i+0xe4>
 8017edc:	881e      	ldrh	r6, [r3, #0]
 8017ede:	4853      	ldr	r0, [pc, #332]	; (801802c <_printf_i+0x23c>)
 8017ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8017ee2:	bf0c      	ite	eq
 8017ee4:	2308      	moveq	r3, #8
 8017ee6:	230a      	movne	r3, #10
 8017ee8:	2100      	movs	r1, #0
 8017eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017eee:	6865      	ldr	r5, [r4, #4]
 8017ef0:	60a5      	str	r5, [r4, #8]
 8017ef2:	2d00      	cmp	r5, #0
 8017ef4:	bfa2      	ittt	ge
 8017ef6:	6821      	ldrge	r1, [r4, #0]
 8017ef8:	f021 0104 	bicge.w	r1, r1, #4
 8017efc:	6021      	strge	r1, [r4, #0]
 8017efe:	b90e      	cbnz	r6, 8017f04 <_printf_i+0x114>
 8017f00:	2d00      	cmp	r5, #0
 8017f02:	d04b      	beq.n	8017f9c <_printf_i+0x1ac>
 8017f04:	4615      	mov	r5, r2
 8017f06:	fbb6 f1f3 	udiv	r1, r6, r3
 8017f0a:	fb03 6711 	mls	r7, r3, r1, r6
 8017f0e:	5dc7      	ldrb	r7, [r0, r7]
 8017f10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017f14:	4637      	mov	r7, r6
 8017f16:	42bb      	cmp	r3, r7
 8017f18:	460e      	mov	r6, r1
 8017f1a:	d9f4      	bls.n	8017f06 <_printf_i+0x116>
 8017f1c:	2b08      	cmp	r3, #8
 8017f1e:	d10b      	bne.n	8017f38 <_printf_i+0x148>
 8017f20:	6823      	ldr	r3, [r4, #0]
 8017f22:	07de      	lsls	r6, r3, #31
 8017f24:	d508      	bpl.n	8017f38 <_printf_i+0x148>
 8017f26:	6923      	ldr	r3, [r4, #16]
 8017f28:	6861      	ldr	r1, [r4, #4]
 8017f2a:	4299      	cmp	r1, r3
 8017f2c:	bfde      	ittt	le
 8017f2e:	2330      	movle	r3, #48	; 0x30
 8017f30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017f34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017f38:	1b52      	subs	r2, r2, r5
 8017f3a:	6122      	str	r2, [r4, #16]
 8017f3c:	f8cd a000 	str.w	sl, [sp]
 8017f40:	464b      	mov	r3, r9
 8017f42:	aa03      	add	r2, sp, #12
 8017f44:	4621      	mov	r1, r4
 8017f46:	4640      	mov	r0, r8
 8017f48:	f7ff fee4 	bl	8017d14 <_printf_common>
 8017f4c:	3001      	adds	r0, #1
 8017f4e:	d14a      	bne.n	8017fe6 <_printf_i+0x1f6>
 8017f50:	f04f 30ff 	mov.w	r0, #4294967295
 8017f54:	b004      	add	sp, #16
 8017f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f5a:	6823      	ldr	r3, [r4, #0]
 8017f5c:	f043 0320 	orr.w	r3, r3, #32
 8017f60:	6023      	str	r3, [r4, #0]
 8017f62:	4833      	ldr	r0, [pc, #204]	; (8018030 <_printf_i+0x240>)
 8017f64:	2778      	movs	r7, #120	; 0x78
 8017f66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017f6a:	6823      	ldr	r3, [r4, #0]
 8017f6c:	6829      	ldr	r1, [r5, #0]
 8017f6e:	061f      	lsls	r7, r3, #24
 8017f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8017f74:	d402      	bmi.n	8017f7c <_printf_i+0x18c>
 8017f76:	065f      	lsls	r7, r3, #25
 8017f78:	bf48      	it	mi
 8017f7a:	b2b6      	uxthmi	r6, r6
 8017f7c:	07df      	lsls	r7, r3, #31
 8017f7e:	bf48      	it	mi
 8017f80:	f043 0320 	orrmi.w	r3, r3, #32
 8017f84:	6029      	str	r1, [r5, #0]
 8017f86:	bf48      	it	mi
 8017f88:	6023      	strmi	r3, [r4, #0]
 8017f8a:	b91e      	cbnz	r6, 8017f94 <_printf_i+0x1a4>
 8017f8c:	6823      	ldr	r3, [r4, #0]
 8017f8e:	f023 0320 	bic.w	r3, r3, #32
 8017f92:	6023      	str	r3, [r4, #0]
 8017f94:	2310      	movs	r3, #16
 8017f96:	e7a7      	b.n	8017ee8 <_printf_i+0xf8>
 8017f98:	4824      	ldr	r0, [pc, #144]	; (801802c <_printf_i+0x23c>)
 8017f9a:	e7e4      	b.n	8017f66 <_printf_i+0x176>
 8017f9c:	4615      	mov	r5, r2
 8017f9e:	e7bd      	b.n	8017f1c <_printf_i+0x12c>
 8017fa0:	682b      	ldr	r3, [r5, #0]
 8017fa2:	6826      	ldr	r6, [r4, #0]
 8017fa4:	6961      	ldr	r1, [r4, #20]
 8017fa6:	1d18      	adds	r0, r3, #4
 8017fa8:	6028      	str	r0, [r5, #0]
 8017faa:	0635      	lsls	r5, r6, #24
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	d501      	bpl.n	8017fb4 <_printf_i+0x1c4>
 8017fb0:	6019      	str	r1, [r3, #0]
 8017fb2:	e002      	b.n	8017fba <_printf_i+0x1ca>
 8017fb4:	0670      	lsls	r0, r6, #25
 8017fb6:	d5fb      	bpl.n	8017fb0 <_printf_i+0x1c0>
 8017fb8:	8019      	strh	r1, [r3, #0]
 8017fba:	2300      	movs	r3, #0
 8017fbc:	6123      	str	r3, [r4, #16]
 8017fbe:	4615      	mov	r5, r2
 8017fc0:	e7bc      	b.n	8017f3c <_printf_i+0x14c>
 8017fc2:	682b      	ldr	r3, [r5, #0]
 8017fc4:	1d1a      	adds	r2, r3, #4
 8017fc6:	602a      	str	r2, [r5, #0]
 8017fc8:	681d      	ldr	r5, [r3, #0]
 8017fca:	6862      	ldr	r2, [r4, #4]
 8017fcc:	2100      	movs	r1, #0
 8017fce:	4628      	mov	r0, r5
 8017fd0:	f7e8 f92e 	bl	8000230 <memchr>
 8017fd4:	b108      	cbz	r0, 8017fda <_printf_i+0x1ea>
 8017fd6:	1b40      	subs	r0, r0, r5
 8017fd8:	6060      	str	r0, [r4, #4]
 8017fda:	6863      	ldr	r3, [r4, #4]
 8017fdc:	6123      	str	r3, [r4, #16]
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017fe4:	e7aa      	b.n	8017f3c <_printf_i+0x14c>
 8017fe6:	6923      	ldr	r3, [r4, #16]
 8017fe8:	462a      	mov	r2, r5
 8017fea:	4649      	mov	r1, r9
 8017fec:	4640      	mov	r0, r8
 8017fee:	47d0      	blx	sl
 8017ff0:	3001      	adds	r0, #1
 8017ff2:	d0ad      	beq.n	8017f50 <_printf_i+0x160>
 8017ff4:	6823      	ldr	r3, [r4, #0]
 8017ff6:	079b      	lsls	r3, r3, #30
 8017ff8:	d413      	bmi.n	8018022 <_printf_i+0x232>
 8017ffa:	68e0      	ldr	r0, [r4, #12]
 8017ffc:	9b03      	ldr	r3, [sp, #12]
 8017ffe:	4298      	cmp	r0, r3
 8018000:	bfb8      	it	lt
 8018002:	4618      	movlt	r0, r3
 8018004:	e7a6      	b.n	8017f54 <_printf_i+0x164>
 8018006:	2301      	movs	r3, #1
 8018008:	4632      	mov	r2, r6
 801800a:	4649      	mov	r1, r9
 801800c:	4640      	mov	r0, r8
 801800e:	47d0      	blx	sl
 8018010:	3001      	adds	r0, #1
 8018012:	d09d      	beq.n	8017f50 <_printf_i+0x160>
 8018014:	3501      	adds	r5, #1
 8018016:	68e3      	ldr	r3, [r4, #12]
 8018018:	9903      	ldr	r1, [sp, #12]
 801801a:	1a5b      	subs	r3, r3, r1
 801801c:	42ab      	cmp	r3, r5
 801801e:	dcf2      	bgt.n	8018006 <_printf_i+0x216>
 8018020:	e7eb      	b.n	8017ffa <_printf_i+0x20a>
 8018022:	2500      	movs	r5, #0
 8018024:	f104 0619 	add.w	r6, r4, #25
 8018028:	e7f5      	b.n	8018016 <_printf_i+0x226>
 801802a:	bf00      	nop
 801802c:	0801aa8e 	.word	0x0801aa8e
 8018030:	0801aa9f 	.word	0x0801aa9f

08018034 <std>:
 8018034:	2300      	movs	r3, #0
 8018036:	b510      	push	{r4, lr}
 8018038:	4604      	mov	r4, r0
 801803a:	e9c0 3300 	strd	r3, r3, [r0]
 801803e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018042:	6083      	str	r3, [r0, #8]
 8018044:	8181      	strh	r1, [r0, #12]
 8018046:	6643      	str	r3, [r0, #100]	; 0x64
 8018048:	81c2      	strh	r2, [r0, #14]
 801804a:	6183      	str	r3, [r0, #24]
 801804c:	4619      	mov	r1, r3
 801804e:	2208      	movs	r2, #8
 8018050:	305c      	adds	r0, #92	; 0x5c
 8018052:	f000 fa05 	bl	8018460 <memset>
 8018056:	4b05      	ldr	r3, [pc, #20]	; (801806c <std+0x38>)
 8018058:	6263      	str	r3, [r4, #36]	; 0x24
 801805a:	4b05      	ldr	r3, [pc, #20]	; (8018070 <std+0x3c>)
 801805c:	62a3      	str	r3, [r4, #40]	; 0x28
 801805e:	4b05      	ldr	r3, [pc, #20]	; (8018074 <std+0x40>)
 8018060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018062:	4b05      	ldr	r3, [pc, #20]	; (8018078 <std+0x44>)
 8018064:	6224      	str	r4, [r4, #32]
 8018066:	6323      	str	r3, [r4, #48]	; 0x30
 8018068:	bd10      	pop	{r4, pc}
 801806a:	bf00      	nop
 801806c:	080182b1 	.word	0x080182b1
 8018070:	080182d3 	.word	0x080182d3
 8018074:	0801830b 	.word	0x0801830b
 8018078:	0801832f 	.word	0x0801832f

0801807c <stdio_exit_handler>:
 801807c:	4a02      	ldr	r2, [pc, #8]	; (8018088 <stdio_exit_handler+0xc>)
 801807e:	4903      	ldr	r1, [pc, #12]	; (801808c <stdio_exit_handler+0x10>)
 8018080:	4803      	ldr	r0, [pc, #12]	; (8018090 <stdio_exit_handler+0x14>)
 8018082:	f000 b869 	b.w	8018158 <_fwalk_sglue>
 8018086:	bf00      	nop
 8018088:	2000014c 	.word	0x2000014c
 801808c:	0801a259 	.word	0x0801a259
 8018090:	20000158 	.word	0x20000158

08018094 <cleanup_stdio>:
 8018094:	6841      	ldr	r1, [r0, #4]
 8018096:	4b0c      	ldr	r3, [pc, #48]	; (80180c8 <cleanup_stdio+0x34>)
 8018098:	4299      	cmp	r1, r3
 801809a:	b510      	push	{r4, lr}
 801809c:	4604      	mov	r4, r0
 801809e:	d001      	beq.n	80180a4 <cleanup_stdio+0x10>
 80180a0:	f002 f8da 	bl	801a258 <_fflush_r>
 80180a4:	68a1      	ldr	r1, [r4, #8]
 80180a6:	4b09      	ldr	r3, [pc, #36]	; (80180cc <cleanup_stdio+0x38>)
 80180a8:	4299      	cmp	r1, r3
 80180aa:	d002      	beq.n	80180b2 <cleanup_stdio+0x1e>
 80180ac:	4620      	mov	r0, r4
 80180ae:	f002 f8d3 	bl	801a258 <_fflush_r>
 80180b2:	68e1      	ldr	r1, [r4, #12]
 80180b4:	4b06      	ldr	r3, [pc, #24]	; (80180d0 <cleanup_stdio+0x3c>)
 80180b6:	4299      	cmp	r1, r3
 80180b8:	d004      	beq.n	80180c4 <cleanup_stdio+0x30>
 80180ba:	4620      	mov	r0, r4
 80180bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180c0:	f002 b8ca 	b.w	801a258 <_fflush_r>
 80180c4:	bd10      	pop	{r4, pc}
 80180c6:	bf00      	nop
 80180c8:	2000b22c 	.word	0x2000b22c
 80180cc:	2000b294 	.word	0x2000b294
 80180d0:	2000b2fc 	.word	0x2000b2fc

080180d4 <global_stdio_init.part.0>:
 80180d4:	b510      	push	{r4, lr}
 80180d6:	4b0b      	ldr	r3, [pc, #44]	; (8018104 <global_stdio_init.part.0+0x30>)
 80180d8:	4c0b      	ldr	r4, [pc, #44]	; (8018108 <global_stdio_init.part.0+0x34>)
 80180da:	4a0c      	ldr	r2, [pc, #48]	; (801810c <global_stdio_init.part.0+0x38>)
 80180dc:	601a      	str	r2, [r3, #0]
 80180de:	4620      	mov	r0, r4
 80180e0:	2200      	movs	r2, #0
 80180e2:	2104      	movs	r1, #4
 80180e4:	f7ff ffa6 	bl	8018034 <std>
 80180e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80180ec:	2201      	movs	r2, #1
 80180ee:	2109      	movs	r1, #9
 80180f0:	f7ff ffa0 	bl	8018034 <std>
 80180f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80180f8:	2202      	movs	r2, #2
 80180fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180fe:	2112      	movs	r1, #18
 8018100:	f7ff bf98 	b.w	8018034 <std>
 8018104:	2000b364 	.word	0x2000b364
 8018108:	2000b22c 	.word	0x2000b22c
 801810c:	0801807d 	.word	0x0801807d

08018110 <__sfp_lock_acquire>:
 8018110:	4801      	ldr	r0, [pc, #4]	; (8018118 <__sfp_lock_acquire+0x8>)
 8018112:	f000 ba77 	b.w	8018604 <__retarget_lock_acquire_recursive>
 8018116:	bf00      	nop
 8018118:	2000b36d 	.word	0x2000b36d

0801811c <__sfp_lock_release>:
 801811c:	4801      	ldr	r0, [pc, #4]	; (8018124 <__sfp_lock_release+0x8>)
 801811e:	f000 ba72 	b.w	8018606 <__retarget_lock_release_recursive>
 8018122:	bf00      	nop
 8018124:	2000b36d 	.word	0x2000b36d

08018128 <__sinit>:
 8018128:	b510      	push	{r4, lr}
 801812a:	4604      	mov	r4, r0
 801812c:	f7ff fff0 	bl	8018110 <__sfp_lock_acquire>
 8018130:	6a23      	ldr	r3, [r4, #32]
 8018132:	b11b      	cbz	r3, 801813c <__sinit+0x14>
 8018134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018138:	f7ff bff0 	b.w	801811c <__sfp_lock_release>
 801813c:	4b04      	ldr	r3, [pc, #16]	; (8018150 <__sinit+0x28>)
 801813e:	6223      	str	r3, [r4, #32]
 8018140:	4b04      	ldr	r3, [pc, #16]	; (8018154 <__sinit+0x2c>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d1f5      	bne.n	8018134 <__sinit+0xc>
 8018148:	f7ff ffc4 	bl	80180d4 <global_stdio_init.part.0>
 801814c:	e7f2      	b.n	8018134 <__sinit+0xc>
 801814e:	bf00      	nop
 8018150:	08018095 	.word	0x08018095
 8018154:	2000b364 	.word	0x2000b364

08018158 <_fwalk_sglue>:
 8018158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801815c:	4607      	mov	r7, r0
 801815e:	4688      	mov	r8, r1
 8018160:	4614      	mov	r4, r2
 8018162:	2600      	movs	r6, #0
 8018164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018168:	f1b9 0901 	subs.w	r9, r9, #1
 801816c:	d505      	bpl.n	801817a <_fwalk_sglue+0x22>
 801816e:	6824      	ldr	r4, [r4, #0]
 8018170:	2c00      	cmp	r4, #0
 8018172:	d1f7      	bne.n	8018164 <_fwalk_sglue+0xc>
 8018174:	4630      	mov	r0, r6
 8018176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801817a:	89ab      	ldrh	r3, [r5, #12]
 801817c:	2b01      	cmp	r3, #1
 801817e:	d907      	bls.n	8018190 <_fwalk_sglue+0x38>
 8018180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018184:	3301      	adds	r3, #1
 8018186:	d003      	beq.n	8018190 <_fwalk_sglue+0x38>
 8018188:	4629      	mov	r1, r5
 801818a:	4638      	mov	r0, r7
 801818c:	47c0      	blx	r8
 801818e:	4306      	orrs	r6, r0
 8018190:	3568      	adds	r5, #104	; 0x68
 8018192:	e7e9      	b.n	8018168 <_fwalk_sglue+0x10>

08018194 <iprintf>:
 8018194:	b40f      	push	{r0, r1, r2, r3}
 8018196:	b507      	push	{r0, r1, r2, lr}
 8018198:	4906      	ldr	r1, [pc, #24]	; (80181b4 <iprintf+0x20>)
 801819a:	ab04      	add	r3, sp, #16
 801819c:	6808      	ldr	r0, [r1, #0]
 801819e:	f853 2b04 	ldr.w	r2, [r3], #4
 80181a2:	6881      	ldr	r1, [r0, #8]
 80181a4:	9301      	str	r3, [sp, #4]
 80181a6:	f001 feb7 	bl	8019f18 <_vfiprintf_r>
 80181aa:	b003      	add	sp, #12
 80181ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80181b0:	b004      	add	sp, #16
 80181b2:	4770      	bx	lr
 80181b4:	200001a4 	.word	0x200001a4

080181b8 <_puts_r>:
 80181b8:	6a03      	ldr	r3, [r0, #32]
 80181ba:	b570      	push	{r4, r5, r6, lr}
 80181bc:	6884      	ldr	r4, [r0, #8]
 80181be:	4605      	mov	r5, r0
 80181c0:	460e      	mov	r6, r1
 80181c2:	b90b      	cbnz	r3, 80181c8 <_puts_r+0x10>
 80181c4:	f7ff ffb0 	bl	8018128 <__sinit>
 80181c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80181ca:	07db      	lsls	r3, r3, #31
 80181cc:	d405      	bmi.n	80181da <_puts_r+0x22>
 80181ce:	89a3      	ldrh	r3, [r4, #12]
 80181d0:	0598      	lsls	r0, r3, #22
 80181d2:	d402      	bmi.n	80181da <_puts_r+0x22>
 80181d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80181d6:	f000 fa15 	bl	8018604 <__retarget_lock_acquire_recursive>
 80181da:	89a3      	ldrh	r3, [r4, #12]
 80181dc:	0719      	lsls	r1, r3, #28
 80181de:	d513      	bpl.n	8018208 <_puts_r+0x50>
 80181e0:	6923      	ldr	r3, [r4, #16]
 80181e2:	b18b      	cbz	r3, 8018208 <_puts_r+0x50>
 80181e4:	3e01      	subs	r6, #1
 80181e6:	68a3      	ldr	r3, [r4, #8]
 80181e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80181ec:	3b01      	subs	r3, #1
 80181ee:	60a3      	str	r3, [r4, #8]
 80181f0:	b9e9      	cbnz	r1, 801822e <_puts_r+0x76>
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	da2e      	bge.n	8018254 <_puts_r+0x9c>
 80181f6:	4622      	mov	r2, r4
 80181f8:	210a      	movs	r1, #10
 80181fa:	4628      	mov	r0, r5
 80181fc:	f000 f89b 	bl	8018336 <__swbuf_r>
 8018200:	3001      	adds	r0, #1
 8018202:	d007      	beq.n	8018214 <_puts_r+0x5c>
 8018204:	250a      	movs	r5, #10
 8018206:	e007      	b.n	8018218 <_puts_r+0x60>
 8018208:	4621      	mov	r1, r4
 801820a:	4628      	mov	r0, r5
 801820c:	f000 f8d0 	bl	80183b0 <__swsetup_r>
 8018210:	2800      	cmp	r0, #0
 8018212:	d0e7      	beq.n	80181e4 <_puts_r+0x2c>
 8018214:	f04f 35ff 	mov.w	r5, #4294967295
 8018218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801821a:	07da      	lsls	r2, r3, #31
 801821c:	d405      	bmi.n	801822a <_puts_r+0x72>
 801821e:	89a3      	ldrh	r3, [r4, #12]
 8018220:	059b      	lsls	r3, r3, #22
 8018222:	d402      	bmi.n	801822a <_puts_r+0x72>
 8018224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018226:	f000 f9ee 	bl	8018606 <__retarget_lock_release_recursive>
 801822a:	4628      	mov	r0, r5
 801822c:	bd70      	pop	{r4, r5, r6, pc}
 801822e:	2b00      	cmp	r3, #0
 8018230:	da04      	bge.n	801823c <_puts_r+0x84>
 8018232:	69a2      	ldr	r2, [r4, #24]
 8018234:	429a      	cmp	r2, r3
 8018236:	dc06      	bgt.n	8018246 <_puts_r+0x8e>
 8018238:	290a      	cmp	r1, #10
 801823a:	d004      	beq.n	8018246 <_puts_r+0x8e>
 801823c:	6823      	ldr	r3, [r4, #0]
 801823e:	1c5a      	adds	r2, r3, #1
 8018240:	6022      	str	r2, [r4, #0]
 8018242:	7019      	strb	r1, [r3, #0]
 8018244:	e7cf      	b.n	80181e6 <_puts_r+0x2e>
 8018246:	4622      	mov	r2, r4
 8018248:	4628      	mov	r0, r5
 801824a:	f000 f874 	bl	8018336 <__swbuf_r>
 801824e:	3001      	adds	r0, #1
 8018250:	d1c9      	bne.n	80181e6 <_puts_r+0x2e>
 8018252:	e7df      	b.n	8018214 <_puts_r+0x5c>
 8018254:	6823      	ldr	r3, [r4, #0]
 8018256:	250a      	movs	r5, #10
 8018258:	1c5a      	adds	r2, r3, #1
 801825a:	6022      	str	r2, [r4, #0]
 801825c:	701d      	strb	r5, [r3, #0]
 801825e:	e7db      	b.n	8018218 <_puts_r+0x60>

08018260 <puts>:
 8018260:	4b02      	ldr	r3, [pc, #8]	; (801826c <puts+0xc>)
 8018262:	4601      	mov	r1, r0
 8018264:	6818      	ldr	r0, [r3, #0]
 8018266:	f7ff bfa7 	b.w	80181b8 <_puts_r>
 801826a:	bf00      	nop
 801826c:	200001a4 	.word	0x200001a4

08018270 <siprintf>:
 8018270:	b40e      	push	{r1, r2, r3}
 8018272:	b500      	push	{lr}
 8018274:	b09c      	sub	sp, #112	; 0x70
 8018276:	ab1d      	add	r3, sp, #116	; 0x74
 8018278:	9002      	str	r0, [sp, #8]
 801827a:	9006      	str	r0, [sp, #24]
 801827c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018280:	4809      	ldr	r0, [pc, #36]	; (80182a8 <siprintf+0x38>)
 8018282:	9107      	str	r1, [sp, #28]
 8018284:	9104      	str	r1, [sp, #16]
 8018286:	4909      	ldr	r1, [pc, #36]	; (80182ac <siprintf+0x3c>)
 8018288:	f853 2b04 	ldr.w	r2, [r3], #4
 801828c:	9105      	str	r1, [sp, #20]
 801828e:	6800      	ldr	r0, [r0, #0]
 8018290:	9301      	str	r3, [sp, #4]
 8018292:	a902      	add	r1, sp, #8
 8018294:	f001 fd18 	bl	8019cc8 <_svfiprintf_r>
 8018298:	9b02      	ldr	r3, [sp, #8]
 801829a:	2200      	movs	r2, #0
 801829c:	701a      	strb	r2, [r3, #0]
 801829e:	b01c      	add	sp, #112	; 0x70
 80182a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80182a4:	b003      	add	sp, #12
 80182a6:	4770      	bx	lr
 80182a8:	200001a4 	.word	0x200001a4
 80182ac:	ffff0208 	.word	0xffff0208

080182b0 <__sread>:
 80182b0:	b510      	push	{r4, lr}
 80182b2:	460c      	mov	r4, r1
 80182b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182b8:	f000 f956 	bl	8018568 <_read_r>
 80182bc:	2800      	cmp	r0, #0
 80182be:	bfab      	itete	ge
 80182c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80182c2:	89a3      	ldrhlt	r3, [r4, #12]
 80182c4:	181b      	addge	r3, r3, r0
 80182c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80182ca:	bfac      	ite	ge
 80182cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80182ce:	81a3      	strhlt	r3, [r4, #12]
 80182d0:	bd10      	pop	{r4, pc}

080182d2 <__swrite>:
 80182d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182d6:	461f      	mov	r7, r3
 80182d8:	898b      	ldrh	r3, [r1, #12]
 80182da:	05db      	lsls	r3, r3, #23
 80182dc:	4605      	mov	r5, r0
 80182de:	460c      	mov	r4, r1
 80182e0:	4616      	mov	r6, r2
 80182e2:	d505      	bpl.n	80182f0 <__swrite+0x1e>
 80182e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182e8:	2302      	movs	r3, #2
 80182ea:	2200      	movs	r2, #0
 80182ec:	f000 f92a 	bl	8018544 <_lseek_r>
 80182f0:	89a3      	ldrh	r3, [r4, #12]
 80182f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80182fa:	81a3      	strh	r3, [r4, #12]
 80182fc:	4632      	mov	r2, r6
 80182fe:	463b      	mov	r3, r7
 8018300:	4628      	mov	r0, r5
 8018302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018306:	f000 b941 	b.w	801858c <_write_r>

0801830a <__sseek>:
 801830a:	b510      	push	{r4, lr}
 801830c:	460c      	mov	r4, r1
 801830e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018312:	f000 f917 	bl	8018544 <_lseek_r>
 8018316:	1c43      	adds	r3, r0, #1
 8018318:	89a3      	ldrh	r3, [r4, #12]
 801831a:	bf15      	itete	ne
 801831c:	6560      	strne	r0, [r4, #84]	; 0x54
 801831e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018326:	81a3      	strheq	r3, [r4, #12]
 8018328:	bf18      	it	ne
 801832a:	81a3      	strhne	r3, [r4, #12]
 801832c:	bd10      	pop	{r4, pc}

0801832e <__sclose>:
 801832e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018332:	f000 b8a1 	b.w	8018478 <_close_r>

08018336 <__swbuf_r>:
 8018336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018338:	460e      	mov	r6, r1
 801833a:	4614      	mov	r4, r2
 801833c:	4605      	mov	r5, r0
 801833e:	b118      	cbz	r0, 8018348 <__swbuf_r+0x12>
 8018340:	6a03      	ldr	r3, [r0, #32]
 8018342:	b90b      	cbnz	r3, 8018348 <__swbuf_r+0x12>
 8018344:	f7ff fef0 	bl	8018128 <__sinit>
 8018348:	69a3      	ldr	r3, [r4, #24]
 801834a:	60a3      	str	r3, [r4, #8]
 801834c:	89a3      	ldrh	r3, [r4, #12]
 801834e:	071a      	lsls	r2, r3, #28
 8018350:	d525      	bpl.n	801839e <__swbuf_r+0x68>
 8018352:	6923      	ldr	r3, [r4, #16]
 8018354:	b31b      	cbz	r3, 801839e <__swbuf_r+0x68>
 8018356:	6823      	ldr	r3, [r4, #0]
 8018358:	6922      	ldr	r2, [r4, #16]
 801835a:	1a98      	subs	r0, r3, r2
 801835c:	6963      	ldr	r3, [r4, #20]
 801835e:	b2f6      	uxtb	r6, r6
 8018360:	4283      	cmp	r3, r0
 8018362:	4637      	mov	r7, r6
 8018364:	dc04      	bgt.n	8018370 <__swbuf_r+0x3a>
 8018366:	4621      	mov	r1, r4
 8018368:	4628      	mov	r0, r5
 801836a:	f001 ff75 	bl	801a258 <_fflush_r>
 801836e:	b9e0      	cbnz	r0, 80183aa <__swbuf_r+0x74>
 8018370:	68a3      	ldr	r3, [r4, #8]
 8018372:	3b01      	subs	r3, #1
 8018374:	60a3      	str	r3, [r4, #8]
 8018376:	6823      	ldr	r3, [r4, #0]
 8018378:	1c5a      	adds	r2, r3, #1
 801837a:	6022      	str	r2, [r4, #0]
 801837c:	701e      	strb	r6, [r3, #0]
 801837e:	6962      	ldr	r2, [r4, #20]
 8018380:	1c43      	adds	r3, r0, #1
 8018382:	429a      	cmp	r2, r3
 8018384:	d004      	beq.n	8018390 <__swbuf_r+0x5a>
 8018386:	89a3      	ldrh	r3, [r4, #12]
 8018388:	07db      	lsls	r3, r3, #31
 801838a:	d506      	bpl.n	801839a <__swbuf_r+0x64>
 801838c:	2e0a      	cmp	r6, #10
 801838e:	d104      	bne.n	801839a <__swbuf_r+0x64>
 8018390:	4621      	mov	r1, r4
 8018392:	4628      	mov	r0, r5
 8018394:	f001 ff60 	bl	801a258 <_fflush_r>
 8018398:	b938      	cbnz	r0, 80183aa <__swbuf_r+0x74>
 801839a:	4638      	mov	r0, r7
 801839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801839e:	4621      	mov	r1, r4
 80183a0:	4628      	mov	r0, r5
 80183a2:	f000 f805 	bl	80183b0 <__swsetup_r>
 80183a6:	2800      	cmp	r0, #0
 80183a8:	d0d5      	beq.n	8018356 <__swbuf_r+0x20>
 80183aa:	f04f 37ff 	mov.w	r7, #4294967295
 80183ae:	e7f4      	b.n	801839a <__swbuf_r+0x64>

080183b0 <__swsetup_r>:
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	4b2a      	ldr	r3, [pc, #168]	; (801845c <__swsetup_r+0xac>)
 80183b4:	4605      	mov	r5, r0
 80183b6:	6818      	ldr	r0, [r3, #0]
 80183b8:	460c      	mov	r4, r1
 80183ba:	b118      	cbz	r0, 80183c4 <__swsetup_r+0x14>
 80183bc:	6a03      	ldr	r3, [r0, #32]
 80183be:	b90b      	cbnz	r3, 80183c4 <__swsetup_r+0x14>
 80183c0:	f7ff feb2 	bl	8018128 <__sinit>
 80183c4:	89a3      	ldrh	r3, [r4, #12]
 80183c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80183ca:	0718      	lsls	r0, r3, #28
 80183cc:	d422      	bmi.n	8018414 <__swsetup_r+0x64>
 80183ce:	06d9      	lsls	r1, r3, #27
 80183d0:	d407      	bmi.n	80183e2 <__swsetup_r+0x32>
 80183d2:	2309      	movs	r3, #9
 80183d4:	602b      	str	r3, [r5, #0]
 80183d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80183da:	81a3      	strh	r3, [r4, #12]
 80183dc:	f04f 30ff 	mov.w	r0, #4294967295
 80183e0:	e034      	b.n	801844c <__swsetup_r+0x9c>
 80183e2:	0758      	lsls	r0, r3, #29
 80183e4:	d512      	bpl.n	801840c <__swsetup_r+0x5c>
 80183e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80183e8:	b141      	cbz	r1, 80183fc <__swsetup_r+0x4c>
 80183ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80183ee:	4299      	cmp	r1, r3
 80183f0:	d002      	beq.n	80183f8 <__swsetup_r+0x48>
 80183f2:	4628      	mov	r0, r5
 80183f4:	f000 ff92 	bl	801931c <_free_r>
 80183f8:	2300      	movs	r3, #0
 80183fa:	6363      	str	r3, [r4, #52]	; 0x34
 80183fc:	89a3      	ldrh	r3, [r4, #12]
 80183fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018402:	81a3      	strh	r3, [r4, #12]
 8018404:	2300      	movs	r3, #0
 8018406:	6063      	str	r3, [r4, #4]
 8018408:	6923      	ldr	r3, [r4, #16]
 801840a:	6023      	str	r3, [r4, #0]
 801840c:	89a3      	ldrh	r3, [r4, #12]
 801840e:	f043 0308 	orr.w	r3, r3, #8
 8018412:	81a3      	strh	r3, [r4, #12]
 8018414:	6923      	ldr	r3, [r4, #16]
 8018416:	b94b      	cbnz	r3, 801842c <__swsetup_r+0x7c>
 8018418:	89a3      	ldrh	r3, [r4, #12]
 801841a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801841e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018422:	d003      	beq.n	801842c <__swsetup_r+0x7c>
 8018424:	4621      	mov	r1, r4
 8018426:	4628      	mov	r0, r5
 8018428:	f001 ff64 	bl	801a2f4 <__smakebuf_r>
 801842c:	89a0      	ldrh	r0, [r4, #12]
 801842e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018432:	f010 0301 	ands.w	r3, r0, #1
 8018436:	d00a      	beq.n	801844e <__swsetup_r+0x9e>
 8018438:	2300      	movs	r3, #0
 801843a:	60a3      	str	r3, [r4, #8]
 801843c:	6963      	ldr	r3, [r4, #20]
 801843e:	425b      	negs	r3, r3
 8018440:	61a3      	str	r3, [r4, #24]
 8018442:	6923      	ldr	r3, [r4, #16]
 8018444:	b943      	cbnz	r3, 8018458 <__swsetup_r+0xa8>
 8018446:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801844a:	d1c4      	bne.n	80183d6 <__swsetup_r+0x26>
 801844c:	bd38      	pop	{r3, r4, r5, pc}
 801844e:	0781      	lsls	r1, r0, #30
 8018450:	bf58      	it	pl
 8018452:	6963      	ldrpl	r3, [r4, #20]
 8018454:	60a3      	str	r3, [r4, #8]
 8018456:	e7f4      	b.n	8018442 <__swsetup_r+0x92>
 8018458:	2000      	movs	r0, #0
 801845a:	e7f7      	b.n	801844c <__swsetup_r+0x9c>
 801845c:	200001a4 	.word	0x200001a4

08018460 <memset>:
 8018460:	4402      	add	r2, r0
 8018462:	4603      	mov	r3, r0
 8018464:	4293      	cmp	r3, r2
 8018466:	d100      	bne.n	801846a <memset+0xa>
 8018468:	4770      	bx	lr
 801846a:	f803 1b01 	strb.w	r1, [r3], #1
 801846e:	e7f9      	b.n	8018464 <memset+0x4>

08018470 <_localeconv_r>:
 8018470:	4800      	ldr	r0, [pc, #0]	; (8018474 <_localeconv_r+0x4>)
 8018472:	4770      	bx	lr
 8018474:	20000298 	.word	0x20000298

08018478 <_close_r>:
 8018478:	b538      	push	{r3, r4, r5, lr}
 801847a:	4d06      	ldr	r5, [pc, #24]	; (8018494 <_close_r+0x1c>)
 801847c:	2300      	movs	r3, #0
 801847e:	4604      	mov	r4, r0
 8018480:	4608      	mov	r0, r1
 8018482:	602b      	str	r3, [r5, #0]
 8018484:	f7ea fbfd 	bl	8002c82 <_close>
 8018488:	1c43      	adds	r3, r0, #1
 801848a:	d102      	bne.n	8018492 <_close_r+0x1a>
 801848c:	682b      	ldr	r3, [r5, #0]
 801848e:	b103      	cbz	r3, 8018492 <_close_r+0x1a>
 8018490:	6023      	str	r3, [r4, #0]
 8018492:	bd38      	pop	{r3, r4, r5, pc}
 8018494:	2000b368 	.word	0x2000b368

08018498 <_reclaim_reent>:
 8018498:	4b29      	ldr	r3, [pc, #164]	; (8018540 <_reclaim_reent+0xa8>)
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	4283      	cmp	r3, r0
 801849e:	b570      	push	{r4, r5, r6, lr}
 80184a0:	4604      	mov	r4, r0
 80184a2:	d04b      	beq.n	801853c <_reclaim_reent+0xa4>
 80184a4:	69c3      	ldr	r3, [r0, #28]
 80184a6:	b143      	cbz	r3, 80184ba <_reclaim_reent+0x22>
 80184a8:	68db      	ldr	r3, [r3, #12]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d144      	bne.n	8018538 <_reclaim_reent+0xa0>
 80184ae:	69e3      	ldr	r3, [r4, #28]
 80184b0:	6819      	ldr	r1, [r3, #0]
 80184b2:	b111      	cbz	r1, 80184ba <_reclaim_reent+0x22>
 80184b4:	4620      	mov	r0, r4
 80184b6:	f000 ff31 	bl	801931c <_free_r>
 80184ba:	6961      	ldr	r1, [r4, #20]
 80184bc:	b111      	cbz	r1, 80184c4 <_reclaim_reent+0x2c>
 80184be:	4620      	mov	r0, r4
 80184c0:	f000 ff2c 	bl	801931c <_free_r>
 80184c4:	69e1      	ldr	r1, [r4, #28]
 80184c6:	b111      	cbz	r1, 80184ce <_reclaim_reent+0x36>
 80184c8:	4620      	mov	r0, r4
 80184ca:	f000 ff27 	bl	801931c <_free_r>
 80184ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80184d0:	b111      	cbz	r1, 80184d8 <_reclaim_reent+0x40>
 80184d2:	4620      	mov	r0, r4
 80184d4:	f000 ff22 	bl	801931c <_free_r>
 80184d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184da:	b111      	cbz	r1, 80184e2 <_reclaim_reent+0x4a>
 80184dc:	4620      	mov	r0, r4
 80184de:	f000 ff1d 	bl	801931c <_free_r>
 80184e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80184e4:	b111      	cbz	r1, 80184ec <_reclaim_reent+0x54>
 80184e6:	4620      	mov	r0, r4
 80184e8:	f000 ff18 	bl	801931c <_free_r>
 80184ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80184ee:	b111      	cbz	r1, 80184f6 <_reclaim_reent+0x5e>
 80184f0:	4620      	mov	r0, r4
 80184f2:	f000 ff13 	bl	801931c <_free_r>
 80184f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80184f8:	b111      	cbz	r1, 8018500 <_reclaim_reent+0x68>
 80184fa:	4620      	mov	r0, r4
 80184fc:	f000 ff0e 	bl	801931c <_free_r>
 8018500:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018502:	b111      	cbz	r1, 801850a <_reclaim_reent+0x72>
 8018504:	4620      	mov	r0, r4
 8018506:	f000 ff09 	bl	801931c <_free_r>
 801850a:	6a23      	ldr	r3, [r4, #32]
 801850c:	b1b3      	cbz	r3, 801853c <_reclaim_reent+0xa4>
 801850e:	4620      	mov	r0, r4
 8018510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018514:	4718      	bx	r3
 8018516:	5949      	ldr	r1, [r1, r5]
 8018518:	b941      	cbnz	r1, 801852c <_reclaim_reent+0x94>
 801851a:	3504      	adds	r5, #4
 801851c:	69e3      	ldr	r3, [r4, #28]
 801851e:	2d80      	cmp	r5, #128	; 0x80
 8018520:	68d9      	ldr	r1, [r3, #12]
 8018522:	d1f8      	bne.n	8018516 <_reclaim_reent+0x7e>
 8018524:	4620      	mov	r0, r4
 8018526:	f000 fef9 	bl	801931c <_free_r>
 801852a:	e7c0      	b.n	80184ae <_reclaim_reent+0x16>
 801852c:	680e      	ldr	r6, [r1, #0]
 801852e:	4620      	mov	r0, r4
 8018530:	f000 fef4 	bl	801931c <_free_r>
 8018534:	4631      	mov	r1, r6
 8018536:	e7ef      	b.n	8018518 <_reclaim_reent+0x80>
 8018538:	2500      	movs	r5, #0
 801853a:	e7ef      	b.n	801851c <_reclaim_reent+0x84>
 801853c:	bd70      	pop	{r4, r5, r6, pc}
 801853e:	bf00      	nop
 8018540:	200001a4 	.word	0x200001a4

08018544 <_lseek_r>:
 8018544:	b538      	push	{r3, r4, r5, lr}
 8018546:	4d07      	ldr	r5, [pc, #28]	; (8018564 <_lseek_r+0x20>)
 8018548:	4604      	mov	r4, r0
 801854a:	4608      	mov	r0, r1
 801854c:	4611      	mov	r1, r2
 801854e:	2200      	movs	r2, #0
 8018550:	602a      	str	r2, [r5, #0]
 8018552:	461a      	mov	r2, r3
 8018554:	f7ea fbbc 	bl	8002cd0 <_lseek>
 8018558:	1c43      	adds	r3, r0, #1
 801855a:	d102      	bne.n	8018562 <_lseek_r+0x1e>
 801855c:	682b      	ldr	r3, [r5, #0]
 801855e:	b103      	cbz	r3, 8018562 <_lseek_r+0x1e>
 8018560:	6023      	str	r3, [r4, #0]
 8018562:	bd38      	pop	{r3, r4, r5, pc}
 8018564:	2000b368 	.word	0x2000b368

08018568 <_read_r>:
 8018568:	b538      	push	{r3, r4, r5, lr}
 801856a:	4d07      	ldr	r5, [pc, #28]	; (8018588 <_read_r+0x20>)
 801856c:	4604      	mov	r4, r0
 801856e:	4608      	mov	r0, r1
 8018570:	4611      	mov	r1, r2
 8018572:	2200      	movs	r2, #0
 8018574:	602a      	str	r2, [r5, #0]
 8018576:	461a      	mov	r2, r3
 8018578:	f7ea fb4a 	bl	8002c10 <_read>
 801857c:	1c43      	adds	r3, r0, #1
 801857e:	d102      	bne.n	8018586 <_read_r+0x1e>
 8018580:	682b      	ldr	r3, [r5, #0]
 8018582:	b103      	cbz	r3, 8018586 <_read_r+0x1e>
 8018584:	6023      	str	r3, [r4, #0]
 8018586:	bd38      	pop	{r3, r4, r5, pc}
 8018588:	2000b368 	.word	0x2000b368

0801858c <_write_r>:
 801858c:	b538      	push	{r3, r4, r5, lr}
 801858e:	4d07      	ldr	r5, [pc, #28]	; (80185ac <_write_r+0x20>)
 8018590:	4604      	mov	r4, r0
 8018592:	4608      	mov	r0, r1
 8018594:	4611      	mov	r1, r2
 8018596:	2200      	movs	r2, #0
 8018598:	602a      	str	r2, [r5, #0]
 801859a:	461a      	mov	r2, r3
 801859c:	f7ea fb55 	bl	8002c4a <_write>
 80185a0:	1c43      	adds	r3, r0, #1
 80185a2:	d102      	bne.n	80185aa <_write_r+0x1e>
 80185a4:	682b      	ldr	r3, [r5, #0]
 80185a6:	b103      	cbz	r3, 80185aa <_write_r+0x1e>
 80185a8:	6023      	str	r3, [r4, #0]
 80185aa:	bd38      	pop	{r3, r4, r5, pc}
 80185ac:	2000b368 	.word	0x2000b368

080185b0 <__errno>:
 80185b0:	4b01      	ldr	r3, [pc, #4]	; (80185b8 <__errno+0x8>)
 80185b2:	6818      	ldr	r0, [r3, #0]
 80185b4:	4770      	bx	lr
 80185b6:	bf00      	nop
 80185b8:	200001a4 	.word	0x200001a4

080185bc <__libc_init_array>:
 80185bc:	b570      	push	{r4, r5, r6, lr}
 80185be:	4d0d      	ldr	r5, [pc, #52]	; (80185f4 <__libc_init_array+0x38>)
 80185c0:	4c0d      	ldr	r4, [pc, #52]	; (80185f8 <__libc_init_array+0x3c>)
 80185c2:	1b64      	subs	r4, r4, r5
 80185c4:	10a4      	asrs	r4, r4, #2
 80185c6:	2600      	movs	r6, #0
 80185c8:	42a6      	cmp	r6, r4
 80185ca:	d109      	bne.n	80185e0 <__libc_init_array+0x24>
 80185cc:	4d0b      	ldr	r5, [pc, #44]	; (80185fc <__libc_init_array+0x40>)
 80185ce:	4c0c      	ldr	r4, [pc, #48]	; (8018600 <__libc_init_array+0x44>)
 80185d0:	f002 f800 	bl	801a5d4 <_init>
 80185d4:	1b64      	subs	r4, r4, r5
 80185d6:	10a4      	asrs	r4, r4, #2
 80185d8:	2600      	movs	r6, #0
 80185da:	42a6      	cmp	r6, r4
 80185dc:	d105      	bne.n	80185ea <__libc_init_array+0x2e>
 80185de:	bd70      	pop	{r4, r5, r6, pc}
 80185e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80185e4:	4798      	blx	r3
 80185e6:	3601      	adds	r6, #1
 80185e8:	e7ee      	b.n	80185c8 <__libc_init_array+0xc>
 80185ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80185ee:	4798      	blx	r3
 80185f0:	3601      	adds	r6, #1
 80185f2:	e7f2      	b.n	80185da <__libc_init_array+0x1e>
 80185f4:	0801adf4 	.word	0x0801adf4
 80185f8:	0801adf4 	.word	0x0801adf4
 80185fc:	0801adf4 	.word	0x0801adf4
 8018600:	0801adf8 	.word	0x0801adf8

08018604 <__retarget_lock_acquire_recursive>:
 8018604:	4770      	bx	lr

08018606 <__retarget_lock_release_recursive>:
 8018606:	4770      	bx	lr

08018608 <memcpy>:
 8018608:	440a      	add	r2, r1
 801860a:	4291      	cmp	r1, r2
 801860c:	f100 33ff 	add.w	r3, r0, #4294967295
 8018610:	d100      	bne.n	8018614 <memcpy+0xc>
 8018612:	4770      	bx	lr
 8018614:	b510      	push	{r4, lr}
 8018616:	f811 4b01 	ldrb.w	r4, [r1], #1
 801861a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801861e:	4291      	cmp	r1, r2
 8018620:	d1f9      	bne.n	8018616 <memcpy+0xe>
 8018622:	bd10      	pop	{r4, pc}

08018624 <quorem>:
 8018624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018628:	6903      	ldr	r3, [r0, #16]
 801862a:	690c      	ldr	r4, [r1, #16]
 801862c:	42a3      	cmp	r3, r4
 801862e:	4607      	mov	r7, r0
 8018630:	db7e      	blt.n	8018730 <quorem+0x10c>
 8018632:	3c01      	subs	r4, #1
 8018634:	f101 0814 	add.w	r8, r1, #20
 8018638:	f100 0514 	add.w	r5, r0, #20
 801863c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018640:	9301      	str	r3, [sp, #4]
 8018642:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018646:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801864a:	3301      	adds	r3, #1
 801864c:	429a      	cmp	r2, r3
 801864e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018652:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018656:	fbb2 f6f3 	udiv	r6, r2, r3
 801865a:	d331      	bcc.n	80186c0 <quorem+0x9c>
 801865c:	f04f 0e00 	mov.w	lr, #0
 8018660:	4640      	mov	r0, r8
 8018662:	46ac      	mov	ip, r5
 8018664:	46f2      	mov	sl, lr
 8018666:	f850 2b04 	ldr.w	r2, [r0], #4
 801866a:	b293      	uxth	r3, r2
 801866c:	fb06 e303 	mla	r3, r6, r3, lr
 8018670:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018674:	0c1a      	lsrs	r2, r3, #16
 8018676:	b29b      	uxth	r3, r3
 8018678:	ebaa 0303 	sub.w	r3, sl, r3
 801867c:	f8dc a000 	ldr.w	sl, [ip]
 8018680:	fa13 f38a 	uxtah	r3, r3, sl
 8018684:	fb06 220e 	mla	r2, r6, lr, r2
 8018688:	9300      	str	r3, [sp, #0]
 801868a:	9b00      	ldr	r3, [sp, #0]
 801868c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018690:	b292      	uxth	r2, r2
 8018692:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018696:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801869a:	f8bd 3000 	ldrh.w	r3, [sp]
 801869e:	4581      	cmp	r9, r0
 80186a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80186a4:	f84c 3b04 	str.w	r3, [ip], #4
 80186a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80186ac:	d2db      	bcs.n	8018666 <quorem+0x42>
 80186ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80186b2:	b92b      	cbnz	r3, 80186c0 <quorem+0x9c>
 80186b4:	9b01      	ldr	r3, [sp, #4]
 80186b6:	3b04      	subs	r3, #4
 80186b8:	429d      	cmp	r5, r3
 80186ba:	461a      	mov	r2, r3
 80186bc:	d32c      	bcc.n	8018718 <quorem+0xf4>
 80186be:	613c      	str	r4, [r7, #16]
 80186c0:	4638      	mov	r0, r7
 80186c2:	f001 f9a7 	bl	8019a14 <__mcmp>
 80186c6:	2800      	cmp	r0, #0
 80186c8:	db22      	blt.n	8018710 <quorem+0xec>
 80186ca:	3601      	adds	r6, #1
 80186cc:	4629      	mov	r1, r5
 80186ce:	2000      	movs	r0, #0
 80186d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80186d4:	f8d1 c000 	ldr.w	ip, [r1]
 80186d8:	b293      	uxth	r3, r2
 80186da:	1ac3      	subs	r3, r0, r3
 80186dc:	0c12      	lsrs	r2, r2, #16
 80186de:	fa13 f38c 	uxtah	r3, r3, ip
 80186e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80186e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80186ea:	b29b      	uxth	r3, r3
 80186ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80186f0:	45c1      	cmp	r9, r8
 80186f2:	f841 3b04 	str.w	r3, [r1], #4
 80186f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80186fa:	d2e9      	bcs.n	80186d0 <quorem+0xac>
 80186fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018704:	b922      	cbnz	r2, 8018710 <quorem+0xec>
 8018706:	3b04      	subs	r3, #4
 8018708:	429d      	cmp	r5, r3
 801870a:	461a      	mov	r2, r3
 801870c:	d30a      	bcc.n	8018724 <quorem+0x100>
 801870e:	613c      	str	r4, [r7, #16]
 8018710:	4630      	mov	r0, r6
 8018712:	b003      	add	sp, #12
 8018714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018718:	6812      	ldr	r2, [r2, #0]
 801871a:	3b04      	subs	r3, #4
 801871c:	2a00      	cmp	r2, #0
 801871e:	d1ce      	bne.n	80186be <quorem+0x9a>
 8018720:	3c01      	subs	r4, #1
 8018722:	e7c9      	b.n	80186b8 <quorem+0x94>
 8018724:	6812      	ldr	r2, [r2, #0]
 8018726:	3b04      	subs	r3, #4
 8018728:	2a00      	cmp	r2, #0
 801872a:	d1f0      	bne.n	801870e <quorem+0xea>
 801872c:	3c01      	subs	r4, #1
 801872e:	e7eb      	b.n	8018708 <quorem+0xe4>
 8018730:	2000      	movs	r0, #0
 8018732:	e7ee      	b.n	8018712 <quorem+0xee>
 8018734:	0000      	movs	r0, r0
	...

08018738 <_dtoa_r>:
 8018738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801873c:	ed2d 8b04 	vpush	{d8-d9}
 8018740:	69c5      	ldr	r5, [r0, #28]
 8018742:	b093      	sub	sp, #76	; 0x4c
 8018744:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018748:	ec57 6b10 	vmov	r6, r7, d0
 801874c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018750:	9107      	str	r1, [sp, #28]
 8018752:	4604      	mov	r4, r0
 8018754:	920a      	str	r2, [sp, #40]	; 0x28
 8018756:	930d      	str	r3, [sp, #52]	; 0x34
 8018758:	b975      	cbnz	r5, 8018778 <_dtoa_r+0x40>
 801875a:	2010      	movs	r0, #16
 801875c:	f000 fe2a 	bl	80193b4 <malloc>
 8018760:	4602      	mov	r2, r0
 8018762:	61e0      	str	r0, [r4, #28]
 8018764:	b920      	cbnz	r0, 8018770 <_dtoa_r+0x38>
 8018766:	4bae      	ldr	r3, [pc, #696]	; (8018a20 <_dtoa_r+0x2e8>)
 8018768:	21ef      	movs	r1, #239	; 0xef
 801876a:	48ae      	ldr	r0, [pc, #696]	; (8018a24 <_dtoa_r+0x2ec>)
 801876c:	f001 fe4a 	bl	801a404 <__assert_func>
 8018770:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018774:	6005      	str	r5, [r0, #0]
 8018776:	60c5      	str	r5, [r0, #12]
 8018778:	69e3      	ldr	r3, [r4, #28]
 801877a:	6819      	ldr	r1, [r3, #0]
 801877c:	b151      	cbz	r1, 8018794 <_dtoa_r+0x5c>
 801877e:	685a      	ldr	r2, [r3, #4]
 8018780:	604a      	str	r2, [r1, #4]
 8018782:	2301      	movs	r3, #1
 8018784:	4093      	lsls	r3, r2
 8018786:	608b      	str	r3, [r1, #8]
 8018788:	4620      	mov	r0, r4
 801878a:	f000 ff07 	bl	801959c <_Bfree>
 801878e:	69e3      	ldr	r3, [r4, #28]
 8018790:	2200      	movs	r2, #0
 8018792:	601a      	str	r2, [r3, #0]
 8018794:	1e3b      	subs	r3, r7, #0
 8018796:	bfbb      	ittet	lt
 8018798:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801879c:	9303      	strlt	r3, [sp, #12]
 801879e:	2300      	movge	r3, #0
 80187a0:	2201      	movlt	r2, #1
 80187a2:	bfac      	ite	ge
 80187a4:	f8c8 3000 	strge.w	r3, [r8]
 80187a8:	f8c8 2000 	strlt.w	r2, [r8]
 80187ac:	4b9e      	ldr	r3, [pc, #632]	; (8018a28 <_dtoa_r+0x2f0>)
 80187ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80187b2:	ea33 0308 	bics.w	r3, r3, r8
 80187b6:	d11b      	bne.n	80187f0 <_dtoa_r+0xb8>
 80187b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80187ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80187be:	6013      	str	r3, [r2, #0]
 80187c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80187c4:	4333      	orrs	r3, r6
 80187c6:	f000 8593 	beq.w	80192f0 <_dtoa_r+0xbb8>
 80187ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80187cc:	b963      	cbnz	r3, 80187e8 <_dtoa_r+0xb0>
 80187ce:	4b97      	ldr	r3, [pc, #604]	; (8018a2c <_dtoa_r+0x2f4>)
 80187d0:	e027      	b.n	8018822 <_dtoa_r+0xea>
 80187d2:	4b97      	ldr	r3, [pc, #604]	; (8018a30 <_dtoa_r+0x2f8>)
 80187d4:	9300      	str	r3, [sp, #0]
 80187d6:	3308      	adds	r3, #8
 80187d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80187da:	6013      	str	r3, [r2, #0]
 80187dc:	9800      	ldr	r0, [sp, #0]
 80187de:	b013      	add	sp, #76	; 0x4c
 80187e0:	ecbd 8b04 	vpop	{d8-d9}
 80187e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187e8:	4b90      	ldr	r3, [pc, #576]	; (8018a2c <_dtoa_r+0x2f4>)
 80187ea:	9300      	str	r3, [sp, #0]
 80187ec:	3303      	adds	r3, #3
 80187ee:	e7f3      	b.n	80187d8 <_dtoa_r+0xa0>
 80187f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80187f4:	2200      	movs	r2, #0
 80187f6:	ec51 0b17 	vmov	r0, r1, d7
 80187fa:	eeb0 8a47 	vmov.f32	s16, s14
 80187fe:	eef0 8a67 	vmov.f32	s17, s15
 8018802:	2300      	movs	r3, #0
 8018804:	f7e8 f990 	bl	8000b28 <__aeabi_dcmpeq>
 8018808:	4681      	mov	r9, r0
 801880a:	b160      	cbz	r0, 8018826 <_dtoa_r+0xee>
 801880c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801880e:	2301      	movs	r3, #1
 8018810:	6013      	str	r3, [r2, #0]
 8018812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018814:	2b00      	cmp	r3, #0
 8018816:	f000 8568 	beq.w	80192ea <_dtoa_r+0xbb2>
 801881a:	4b86      	ldr	r3, [pc, #536]	; (8018a34 <_dtoa_r+0x2fc>)
 801881c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801881e:	6013      	str	r3, [r2, #0]
 8018820:	3b01      	subs	r3, #1
 8018822:	9300      	str	r3, [sp, #0]
 8018824:	e7da      	b.n	80187dc <_dtoa_r+0xa4>
 8018826:	aa10      	add	r2, sp, #64	; 0x40
 8018828:	a911      	add	r1, sp, #68	; 0x44
 801882a:	4620      	mov	r0, r4
 801882c:	eeb0 0a48 	vmov.f32	s0, s16
 8018830:	eef0 0a68 	vmov.f32	s1, s17
 8018834:	f001 f994 	bl	8019b60 <__d2b>
 8018838:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801883c:	4682      	mov	sl, r0
 801883e:	2d00      	cmp	r5, #0
 8018840:	d07f      	beq.n	8018942 <_dtoa_r+0x20a>
 8018842:	ee18 3a90 	vmov	r3, s17
 8018846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801884a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801884e:	ec51 0b18 	vmov	r0, r1, d8
 8018852:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801885a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801885e:	4619      	mov	r1, r3
 8018860:	2200      	movs	r2, #0
 8018862:	4b75      	ldr	r3, [pc, #468]	; (8018a38 <_dtoa_r+0x300>)
 8018864:	f7e7 fd40 	bl	80002e8 <__aeabi_dsub>
 8018868:	a367      	add	r3, pc, #412	; (adr r3, 8018a08 <_dtoa_r+0x2d0>)
 801886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801886e:	f7e7 fef3 	bl	8000658 <__aeabi_dmul>
 8018872:	a367      	add	r3, pc, #412	; (adr r3, 8018a10 <_dtoa_r+0x2d8>)
 8018874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018878:	f7e7 fd38 	bl	80002ec <__adddf3>
 801887c:	4606      	mov	r6, r0
 801887e:	4628      	mov	r0, r5
 8018880:	460f      	mov	r7, r1
 8018882:	f7e7 fe7f 	bl	8000584 <__aeabi_i2d>
 8018886:	a364      	add	r3, pc, #400	; (adr r3, 8018a18 <_dtoa_r+0x2e0>)
 8018888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801888c:	f7e7 fee4 	bl	8000658 <__aeabi_dmul>
 8018890:	4602      	mov	r2, r0
 8018892:	460b      	mov	r3, r1
 8018894:	4630      	mov	r0, r6
 8018896:	4639      	mov	r1, r7
 8018898:	f7e7 fd28 	bl	80002ec <__adddf3>
 801889c:	4606      	mov	r6, r0
 801889e:	460f      	mov	r7, r1
 80188a0:	f7e8 f98a 	bl	8000bb8 <__aeabi_d2iz>
 80188a4:	2200      	movs	r2, #0
 80188a6:	4683      	mov	fp, r0
 80188a8:	2300      	movs	r3, #0
 80188aa:	4630      	mov	r0, r6
 80188ac:	4639      	mov	r1, r7
 80188ae:	f7e8 f945 	bl	8000b3c <__aeabi_dcmplt>
 80188b2:	b148      	cbz	r0, 80188c8 <_dtoa_r+0x190>
 80188b4:	4658      	mov	r0, fp
 80188b6:	f7e7 fe65 	bl	8000584 <__aeabi_i2d>
 80188ba:	4632      	mov	r2, r6
 80188bc:	463b      	mov	r3, r7
 80188be:	f7e8 f933 	bl	8000b28 <__aeabi_dcmpeq>
 80188c2:	b908      	cbnz	r0, 80188c8 <_dtoa_r+0x190>
 80188c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80188c8:	f1bb 0f16 	cmp.w	fp, #22
 80188cc:	d857      	bhi.n	801897e <_dtoa_r+0x246>
 80188ce:	4b5b      	ldr	r3, [pc, #364]	; (8018a3c <_dtoa_r+0x304>)
 80188d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80188d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188d8:	ec51 0b18 	vmov	r0, r1, d8
 80188dc:	f7e8 f92e 	bl	8000b3c <__aeabi_dcmplt>
 80188e0:	2800      	cmp	r0, #0
 80188e2:	d04e      	beq.n	8018982 <_dtoa_r+0x24a>
 80188e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80188e8:	2300      	movs	r3, #0
 80188ea:	930c      	str	r3, [sp, #48]	; 0x30
 80188ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80188ee:	1b5b      	subs	r3, r3, r5
 80188f0:	1e5a      	subs	r2, r3, #1
 80188f2:	bf45      	ittet	mi
 80188f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80188f8:	9305      	strmi	r3, [sp, #20]
 80188fa:	2300      	movpl	r3, #0
 80188fc:	2300      	movmi	r3, #0
 80188fe:	9206      	str	r2, [sp, #24]
 8018900:	bf54      	ite	pl
 8018902:	9305      	strpl	r3, [sp, #20]
 8018904:	9306      	strmi	r3, [sp, #24]
 8018906:	f1bb 0f00 	cmp.w	fp, #0
 801890a:	db3c      	blt.n	8018986 <_dtoa_r+0x24e>
 801890c:	9b06      	ldr	r3, [sp, #24]
 801890e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8018912:	445b      	add	r3, fp
 8018914:	9306      	str	r3, [sp, #24]
 8018916:	2300      	movs	r3, #0
 8018918:	9308      	str	r3, [sp, #32]
 801891a:	9b07      	ldr	r3, [sp, #28]
 801891c:	2b09      	cmp	r3, #9
 801891e:	d868      	bhi.n	80189f2 <_dtoa_r+0x2ba>
 8018920:	2b05      	cmp	r3, #5
 8018922:	bfc4      	itt	gt
 8018924:	3b04      	subgt	r3, #4
 8018926:	9307      	strgt	r3, [sp, #28]
 8018928:	9b07      	ldr	r3, [sp, #28]
 801892a:	f1a3 0302 	sub.w	r3, r3, #2
 801892e:	bfcc      	ite	gt
 8018930:	2500      	movgt	r5, #0
 8018932:	2501      	movle	r5, #1
 8018934:	2b03      	cmp	r3, #3
 8018936:	f200 8085 	bhi.w	8018a44 <_dtoa_r+0x30c>
 801893a:	e8df f003 	tbb	[pc, r3]
 801893e:	3b2e      	.short	0x3b2e
 8018940:	5839      	.short	0x5839
 8018942:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8018946:	441d      	add	r5, r3
 8018948:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801894c:	2b20      	cmp	r3, #32
 801894e:	bfc1      	itttt	gt
 8018950:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018954:	fa08 f803 	lslgt.w	r8, r8, r3
 8018958:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801895c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8018960:	bfd6      	itet	le
 8018962:	f1c3 0320 	rsble	r3, r3, #32
 8018966:	ea48 0003 	orrgt.w	r0, r8, r3
 801896a:	fa06 f003 	lslle.w	r0, r6, r3
 801896e:	f7e7 fdf9 	bl	8000564 <__aeabi_ui2d>
 8018972:	2201      	movs	r2, #1
 8018974:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8018978:	3d01      	subs	r5, #1
 801897a:	920e      	str	r2, [sp, #56]	; 0x38
 801897c:	e76f      	b.n	801885e <_dtoa_r+0x126>
 801897e:	2301      	movs	r3, #1
 8018980:	e7b3      	b.n	80188ea <_dtoa_r+0x1b2>
 8018982:	900c      	str	r0, [sp, #48]	; 0x30
 8018984:	e7b2      	b.n	80188ec <_dtoa_r+0x1b4>
 8018986:	9b05      	ldr	r3, [sp, #20]
 8018988:	eba3 030b 	sub.w	r3, r3, fp
 801898c:	9305      	str	r3, [sp, #20]
 801898e:	f1cb 0300 	rsb	r3, fp, #0
 8018992:	9308      	str	r3, [sp, #32]
 8018994:	2300      	movs	r3, #0
 8018996:	930b      	str	r3, [sp, #44]	; 0x2c
 8018998:	e7bf      	b.n	801891a <_dtoa_r+0x1e2>
 801899a:	2300      	movs	r3, #0
 801899c:	9309      	str	r3, [sp, #36]	; 0x24
 801899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	dc52      	bgt.n	8018a4a <_dtoa_r+0x312>
 80189a4:	2301      	movs	r3, #1
 80189a6:	9301      	str	r3, [sp, #4]
 80189a8:	9304      	str	r3, [sp, #16]
 80189aa:	461a      	mov	r2, r3
 80189ac:	920a      	str	r2, [sp, #40]	; 0x28
 80189ae:	e00b      	b.n	80189c8 <_dtoa_r+0x290>
 80189b0:	2301      	movs	r3, #1
 80189b2:	e7f3      	b.n	801899c <_dtoa_r+0x264>
 80189b4:	2300      	movs	r3, #0
 80189b6:	9309      	str	r3, [sp, #36]	; 0x24
 80189b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189ba:	445b      	add	r3, fp
 80189bc:	9301      	str	r3, [sp, #4]
 80189be:	3301      	adds	r3, #1
 80189c0:	2b01      	cmp	r3, #1
 80189c2:	9304      	str	r3, [sp, #16]
 80189c4:	bfb8      	it	lt
 80189c6:	2301      	movlt	r3, #1
 80189c8:	69e0      	ldr	r0, [r4, #28]
 80189ca:	2100      	movs	r1, #0
 80189cc:	2204      	movs	r2, #4
 80189ce:	f102 0614 	add.w	r6, r2, #20
 80189d2:	429e      	cmp	r6, r3
 80189d4:	d93d      	bls.n	8018a52 <_dtoa_r+0x31a>
 80189d6:	6041      	str	r1, [r0, #4]
 80189d8:	4620      	mov	r0, r4
 80189da:	f000 fd9f 	bl	801951c <_Balloc>
 80189de:	9000      	str	r0, [sp, #0]
 80189e0:	2800      	cmp	r0, #0
 80189e2:	d139      	bne.n	8018a58 <_dtoa_r+0x320>
 80189e4:	4b16      	ldr	r3, [pc, #88]	; (8018a40 <_dtoa_r+0x308>)
 80189e6:	4602      	mov	r2, r0
 80189e8:	f240 11af 	movw	r1, #431	; 0x1af
 80189ec:	e6bd      	b.n	801876a <_dtoa_r+0x32>
 80189ee:	2301      	movs	r3, #1
 80189f0:	e7e1      	b.n	80189b6 <_dtoa_r+0x27e>
 80189f2:	2501      	movs	r5, #1
 80189f4:	2300      	movs	r3, #0
 80189f6:	9307      	str	r3, [sp, #28]
 80189f8:	9509      	str	r5, [sp, #36]	; 0x24
 80189fa:	f04f 33ff 	mov.w	r3, #4294967295
 80189fe:	9301      	str	r3, [sp, #4]
 8018a00:	9304      	str	r3, [sp, #16]
 8018a02:	2200      	movs	r2, #0
 8018a04:	2312      	movs	r3, #18
 8018a06:	e7d1      	b.n	80189ac <_dtoa_r+0x274>
 8018a08:	636f4361 	.word	0x636f4361
 8018a0c:	3fd287a7 	.word	0x3fd287a7
 8018a10:	8b60c8b3 	.word	0x8b60c8b3
 8018a14:	3fc68a28 	.word	0x3fc68a28
 8018a18:	509f79fb 	.word	0x509f79fb
 8018a1c:	3fd34413 	.word	0x3fd34413
 8018a20:	0801aabd 	.word	0x0801aabd
 8018a24:	0801aad4 	.word	0x0801aad4
 8018a28:	7ff00000 	.word	0x7ff00000
 8018a2c:	0801aab9 	.word	0x0801aab9
 8018a30:	0801aab0 	.word	0x0801aab0
 8018a34:	0801aa8d 	.word	0x0801aa8d
 8018a38:	3ff80000 	.word	0x3ff80000
 8018a3c:	0801abc0 	.word	0x0801abc0
 8018a40:	0801ab2c 	.word	0x0801ab2c
 8018a44:	2301      	movs	r3, #1
 8018a46:	9309      	str	r3, [sp, #36]	; 0x24
 8018a48:	e7d7      	b.n	80189fa <_dtoa_r+0x2c2>
 8018a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a4c:	9301      	str	r3, [sp, #4]
 8018a4e:	9304      	str	r3, [sp, #16]
 8018a50:	e7ba      	b.n	80189c8 <_dtoa_r+0x290>
 8018a52:	3101      	adds	r1, #1
 8018a54:	0052      	lsls	r2, r2, #1
 8018a56:	e7ba      	b.n	80189ce <_dtoa_r+0x296>
 8018a58:	69e3      	ldr	r3, [r4, #28]
 8018a5a:	9a00      	ldr	r2, [sp, #0]
 8018a5c:	601a      	str	r2, [r3, #0]
 8018a5e:	9b04      	ldr	r3, [sp, #16]
 8018a60:	2b0e      	cmp	r3, #14
 8018a62:	f200 80a8 	bhi.w	8018bb6 <_dtoa_r+0x47e>
 8018a66:	2d00      	cmp	r5, #0
 8018a68:	f000 80a5 	beq.w	8018bb6 <_dtoa_r+0x47e>
 8018a6c:	f1bb 0f00 	cmp.w	fp, #0
 8018a70:	dd38      	ble.n	8018ae4 <_dtoa_r+0x3ac>
 8018a72:	4bc0      	ldr	r3, [pc, #768]	; (8018d74 <_dtoa_r+0x63c>)
 8018a74:	f00b 020f 	and.w	r2, fp, #15
 8018a78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018a7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018a80:	e9d3 6700 	ldrd	r6, r7, [r3]
 8018a84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8018a88:	d019      	beq.n	8018abe <_dtoa_r+0x386>
 8018a8a:	4bbb      	ldr	r3, [pc, #748]	; (8018d78 <_dtoa_r+0x640>)
 8018a8c:	ec51 0b18 	vmov	r0, r1, d8
 8018a90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018a94:	f7e7 ff0a 	bl	80008ac <__aeabi_ddiv>
 8018a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a9c:	f008 080f 	and.w	r8, r8, #15
 8018aa0:	2503      	movs	r5, #3
 8018aa2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8018d78 <_dtoa_r+0x640>
 8018aa6:	f1b8 0f00 	cmp.w	r8, #0
 8018aaa:	d10a      	bne.n	8018ac2 <_dtoa_r+0x38a>
 8018aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018ab0:	4632      	mov	r2, r6
 8018ab2:	463b      	mov	r3, r7
 8018ab4:	f7e7 fefa 	bl	80008ac <__aeabi_ddiv>
 8018ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018abc:	e02b      	b.n	8018b16 <_dtoa_r+0x3de>
 8018abe:	2502      	movs	r5, #2
 8018ac0:	e7ef      	b.n	8018aa2 <_dtoa_r+0x36a>
 8018ac2:	f018 0f01 	tst.w	r8, #1
 8018ac6:	d008      	beq.n	8018ada <_dtoa_r+0x3a2>
 8018ac8:	4630      	mov	r0, r6
 8018aca:	4639      	mov	r1, r7
 8018acc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018ad0:	f7e7 fdc2 	bl	8000658 <__aeabi_dmul>
 8018ad4:	3501      	adds	r5, #1
 8018ad6:	4606      	mov	r6, r0
 8018ad8:	460f      	mov	r7, r1
 8018ada:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018ade:	f109 0908 	add.w	r9, r9, #8
 8018ae2:	e7e0      	b.n	8018aa6 <_dtoa_r+0x36e>
 8018ae4:	f000 809f 	beq.w	8018c26 <_dtoa_r+0x4ee>
 8018ae8:	f1cb 0600 	rsb	r6, fp, #0
 8018aec:	4ba1      	ldr	r3, [pc, #644]	; (8018d74 <_dtoa_r+0x63c>)
 8018aee:	4fa2      	ldr	r7, [pc, #648]	; (8018d78 <_dtoa_r+0x640>)
 8018af0:	f006 020f 	and.w	r2, r6, #15
 8018af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018afc:	ec51 0b18 	vmov	r0, r1, d8
 8018b00:	f7e7 fdaa 	bl	8000658 <__aeabi_dmul>
 8018b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b08:	1136      	asrs	r6, r6, #4
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	2502      	movs	r5, #2
 8018b0e:	2e00      	cmp	r6, #0
 8018b10:	d17e      	bne.n	8018c10 <_dtoa_r+0x4d8>
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d1d0      	bne.n	8018ab8 <_dtoa_r+0x380>
 8018b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	f000 8084 	beq.w	8018c2a <_dtoa_r+0x4f2>
 8018b22:	4b96      	ldr	r3, [pc, #600]	; (8018d7c <_dtoa_r+0x644>)
 8018b24:	2200      	movs	r2, #0
 8018b26:	4640      	mov	r0, r8
 8018b28:	4649      	mov	r1, r9
 8018b2a:	f7e8 f807 	bl	8000b3c <__aeabi_dcmplt>
 8018b2e:	2800      	cmp	r0, #0
 8018b30:	d07b      	beq.n	8018c2a <_dtoa_r+0x4f2>
 8018b32:	9b04      	ldr	r3, [sp, #16]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d078      	beq.n	8018c2a <_dtoa_r+0x4f2>
 8018b38:	9b01      	ldr	r3, [sp, #4]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	dd39      	ble.n	8018bb2 <_dtoa_r+0x47a>
 8018b3e:	4b90      	ldr	r3, [pc, #576]	; (8018d80 <_dtoa_r+0x648>)
 8018b40:	2200      	movs	r2, #0
 8018b42:	4640      	mov	r0, r8
 8018b44:	4649      	mov	r1, r9
 8018b46:	f7e7 fd87 	bl	8000658 <__aeabi_dmul>
 8018b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b4e:	9e01      	ldr	r6, [sp, #4]
 8018b50:	f10b 37ff 	add.w	r7, fp, #4294967295
 8018b54:	3501      	adds	r5, #1
 8018b56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018b5a:	4628      	mov	r0, r5
 8018b5c:	f7e7 fd12 	bl	8000584 <__aeabi_i2d>
 8018b60:	4642      	mov	r2, r8
 8018b62:	464b      	mov	r3, r9
 8018b64:	f7e7 fd78 	bl	8000658 <__aeabi_dmul>
 8018b68:	4b86      	ldr	r3, [pc, #536]	; (8018d84 <_dtoa_r+0x64c>)
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	f7e7 fbbe 	bl	80002ec <__adddf3>
 8018b70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b78:	9303      	str	r3, [sp, #12]
 8018b7a:	2e00      	cmp	r6, #0
 8018b7c:	d158      	bne.n	8018c30 <_dtoa_r+0x4f8>
 8018b7e:	4b82      	ldr	r3, [pc, #520]	; (8018d88 <_dtoa_r+0x650>)
 8018b80:	2200      	movs	r2, #0
 8018b82:	4640      	mov	r0, r8
 8018b84:	4649      	mov	r1, r9
 8018b86:	f7e7 fbaf 	bl	80002e8 <__aeabi_dsub>
 8018b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b8e:	4680      	mov	r8, r0
 8018b90:	4689      	mov	r9, r1
 8018b92:	f7e7 fff1 	bl	8000b78 <__aeabi_dcmpgt>
 8018b96:	2800      	cmp	r0, #0
 8018b98:	f040 8296 	bne.w	80190c8 <_dtoa_r+0x990>
 8018b9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018ba0:	4640      	mov	r0, r8
 8018ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ba6:	4649      	mov	r1, r9
 8018ba8:	f7e7 ffc8 	bl	8000b3c <__aeabi_dcmplt>
 8018bac:	2800      	cmp	r0, #0
 8018bae:	f040 8289 	bne.w	80190c4 <_dtoa_r+0x98c>
 8018bb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	f2c0 814e 	blt.w	8018e5a <_dtoa_r+0x722>
 8018bbe:	f1bb 0f0e 	cmp.w	fp, #14
 8018bc2:	f300 814a 	bgt.w	8018e5a <_dtoa_r+0x722>
 8018bc6:	4b6b      	ldr	r3, [pc, #428]	; (8018d74 <_dtoa_r+0x63c>)
 8018bc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	f280 80dc 	bge.w	8018d90 <_dtoa_r+0x658>
 8018bd8:	9b04      	ldr	r3, [sp, #16]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	f300 80d8 	bgt.w	8018d90 <_dtoa_r+0x658>
 8018be0:	f040 826f 	bne.w	80190c2 <_dtoa_r+0x98a>
 8018be4:	4b68      	ldr	r3, [pc, #416]	; (8018d88 <_dtoa_r+0x650>)
 8018be6:	2200      	movs	r2, #0
 8018be8:	4640      	mov	r0, r8
 8018bea:	4649      	mov	r1, r9
 8018bec:	f7e7 fd34 	bl	8000658 <__aeabi_dmul>
 8018bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018bf4:	f7e7 ffb6 	bl	8000b64 <__aeabi_dcmpge>
 8018bf8:	9e04      	ldr	r6, [sp, #16]
 8018bfa:	4637      	mov	r7, r6
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	f040 8245 	bne.w	801908c <_dtoa_r+0x954>
 8018c02:	9d00      	ldr	r5, [sp, #0]
 8018c04:	2331      	movs	r3, #49	; 0x31
 8018c06:	f805 3b01 	strb.w	r3, [r5], #1
 8018c0a:	f10b 0b01 	add.w	fp, fp, #1
 8018c0e:	e241      	b.n	8019094 <_dtoa_r+0x95c>
 8018c10:	07f2      	lsls	r2, r6, #31
 8018c12:	d505      	bpl.n	8018c20 <_dtoa_r+0x4e8>
 8018c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018c18:	f7e7 fd1e 	bl	8000658 <__aeabi_dmul>
 8018c1c:	3501      	adds	r5, #1
 8018c1e:	2301      	movs	r3, #1
 8018c20:	1076      	asrs	r6, r6, #1
 8018c22:	3708      	adds	r7, #8
 8018c24:	e773      	b.n	8018b0e <_dtoa_r+0x3d6>
 8018c26:	2502      	movs	r5, #2
 8018c28:	e775      	b.n	8018b16 <_dtoa_r+0x3de>
 8018c2a:	9e04      	ldr	r6, [sp, #16]
 8018c2c:	465f      	mov	r7, fp
 8018c2e:	e792      	b.n	8018b56 <_dtoa_r+0x41e>
 8018c30:	9900      	ldr	r1, [sp, #0]
 8018c32:	4b50      	ldr	r3, [pc, #320]	; (8018d74 <_dtoa_r+0x63c>)
 8018c34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018c38:	4431      	add	r1, r6
 8018c3a:	9102      	str	r1, [sp, #8]
 8018c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018c3e:	eeb0 9a47 	vmov.f32	s18, s14
 8018c42:	eef0 9a67 	vmov.f32	s19, s15
 8018c46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018c4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018c4e:	2900      	cmp	r1, #0
 8018c50:	d044      	beq.n	8018cdc <_dtoa_r+0x5a4>
 8018c52:	494e      	ldr	r1, [pc, #312]	; (8018d8c <_dtoa_r+0x654>)
 8018c54:	2000      	movs	r0, #0
 8018c56:	f7e7 fe29 	bl	80008ac <__aeabi_ddiv>
 8018c5a:	ec53 2b19 	vmov	r2, r3, d9
 8018c5e:	f7e7 fb43 	bl	80002e8 <__aeabi_dsub>
 8018c62:	9d00      	ldr	r5, [sp, #0]
 8018c64:	ec41 0b19 	vmov	d9, r0, r1
 8018c68:	4649      	mov	r1, r9
 8018c6a:	4640      	mov	r0, r8
 8018c6c:	f7e7 ffa4 	bl	8000bb8 <__aeabi_d2iz>
 8018c70:	4606      	mov	r6, r0
 8018c72:	f7e7 fc87 	bl	8000584 <__aeabi_i2d>
 8018c76:	4602      	mov	r2, r0
 8018c78:	460b      	mov	r3, r1
 8018c7a:	4640      	mov	r0, r8
 8018c7c:	4649      	mov	r1, r9
 8018c7e:	f7e7 fb33 	bl	80002e8 <__aeabi_dsub>
 8018c82:	3630      	adds	r6, #48	; 0x30
 8018c84:	f805 6b01 	strb.w	r6, [r5], #1
 8018c88:	ec53 2b19 	vmov	r2, r3, d9
 8018c8c:	4680      	mov	r8, r0
 8018c8e:	4689      	mov	r9, r1
 8018c90:	f7e7 ff54 	bl	8000b3c <__aeabi_dcmplt>
 8018c94:	2800      	cmp	r0, #0
 8018c96:	d164      	bne.n	8018d62 <_dtoa_r+0x62a>
 8018c98:	4642      	mov	r2, r8
 8018c9a:	464b      	mov	r3, r9
 8018c9c:	4937      	ldr	r1, [pc, #220]	; (8018d7c <_dtoa_r+0x644>)
 8018c9e:	2000      	movs	r0, #0
 8018ca0:	f7e7 fb22 	bl	80002e8 <__aeabi_dsub>
 8018ca4:	ec53 2b19 	vmov	r2, r3, d9
 8018ca8:	f7e7 ff48 	bl	8000b3c <__aeabi_dcmplt>
 8018cac:	2800      	cmp	r0, #0
 8018cae:	f040 80b6 	bne.w	8018e1e <_dtoa_r+0x6e6>
 8018cb2:	9b02      	ldr	r3, [sp, #8]
 8018cb4:	429d      	cmp	r5, r3
 8018cb6:	f43f af7c 	beq.w	8018bb2 <_dtoa_r+0x47a>
 8018cba:	4b31      	ldr	r3, [pc, #196]	; (8018d80 <_dtoa_r+0x648>)
 8018cbc:	ec51 0b19 	vmov	r0, r1, d9
 8018cc0:	2200      	movs	r2, #0
 8018cc2:	f7e7 fcc9 	bl	8000658 <__aeabi_dmul>
 8018cc6:	4b2e      	ldr	r3, [pc, #184]	; (8018d80 <_dtoa_r+0x648>)
 8018cc8:	ec41 0b19 	vmov	d9, r0, r1
 8018ccc:	2200      	movs	r2, #0
 8018cce:	4640      	mov	r0, r8
 8018cd0:	4649      	mov	r1, r9
 8018cd2:	f7e7 fcc1 	bl	8000658 <__aeabi_dmul>
 8018cd6:	4680      	mov	r8, r0
 8018cd8:	4689      	mov	r9, r1
 8018cda:	e7c5      	b.n	8018c68 <_dtoa_r+0x530>
 8018cdc:	ec51 0b17 	vmov	r0, r1, d7
 8018ce0:	f7e7 fcba 	bl	8000658 <__aeabi_dmul>
 8018ce4:	9b02      	ldr	r3, [sp, #8]
 8018ce6:	9d00      	ldr	r5, [sp, #0]
 8018ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8018cea:	ec41 0b19 	vmov	d9, r0, r1
 8018cee:	4649      	mov	r1, r9
 8018cf0:	4640      	mov	r0, r8
 8018cf2:	f7e7 ff61 	bl	8000bb8 <__aeabi_d2iz>
 8018cf6:	4606      	mov	r6, r0
 8018cf8:	f7e7 fc44 	bl	8000584 <__aeabi_i2d>
 8018cfc:	3630      	adds	r6, #48	; 0x30
 8018cfe:	4602      	mov	r2, r0
 8018d00:	460b      	mov	r3, r1
 8018d02:	4640      	mov	r0, r8
 8018d04:	4649      	mov	r1, r9
 8018d06:	f7e7 faef 	bl	80002e8 <__aeabi_dsub>
 8018d0a:	f805 6b01 	strb.w	r6, [r5], #1
 8018d0e:	9b02      	ldr	r3, [sp, #8]
 8018d10:	429d      	cmp	r5, r3
 8018d12:	4680      	mov	r8, r0
 8018d14:	4689      	mov	r9, r1
 8018d16:	f04f 0200 	mov.w	r2, #0
 8018d1a:	d124      	bne.n	8018d66 <_dtoa_r+0x62e>
 8018d1c:	4b1b      	ldr	r3, [pc, #108]	; (8018d8c <_dtoa_r+0x654>)
 8018d1e:	ec51 0b19 	vmov	r0, r1, d9
 8018d22:	f7e7 fae3 	bl	80002ec <__adddf3>
 8018d26:	4602      	mov	r2, r0
 8018d28:	460b      	mov	r3, r1
 8018d2a:	4640      	mov	r0, r8
 8018d2c:	4649      	mov	r1, r9
 8018d2e:	f7e7 ff23 	bl	8000b78 <__aeabi_dcmpgt>
 8018d32:	2800      	cmp	r0, #0
 8018d34:	d173      	bne.n	8018e1e <_dtoa_r+0x6e6>
 8018d36:	ec53 2b19 	vmov	r2, r3, d9
 8018d3a:	4914      	ldr	r1, [pc, #80]	; (8018d8c <_dtoa_r+0x654>)
 8018d3c:	2000      	movs	r0, #0
 8018d3e:	f7e7 fad3 	bl	80002e8 <__aeabi_dsub>
 8018d42:	4602      	mov	r2, r0
 8018d44:	460b      	mov	r3, r1
 8018d46:	4640      	mov	r0, r8
 8018d48:	4649      	mov	r1, r9
 8018d4a:	f7e7 fef7 	bl	8000b3c <__aeabi_dcmplt>
 8018d4e:	2800      	cmp	r0, #0
 8018d50:	f43f af2f 	beq.w	8018bb2 <_dtoa_r+0x47a>
 8018d54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018d56:	1e6b      	subs	r3, r5, #1
 8018d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8018d5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018d5e:	2b30      	cmp	r3, #48	; 0x30
 8018d60:	d0f8      	beq.n	8018d54 <_dtoa_r+0x61c>
 8018d62:	46bb      	mov	fp, r7
 8018d64:	e04a      	b.n	8018dfc <_dtoa_r+0x6c4>
 8018d66:	4b06      	ldr	r3, [pc, #24]	; (8018d80 <_dtoa_r+0x648>)
 8018d68:	f7e7 fc76 	bl	8000658 <__aeabi_dmul>
 8018d6c:	4680      	mov	r8, r0
 8018d6e:	4689      	mov	r9, r1
 8018d70:	e7bd      	b.n	8018cee <_dtoa_r+0x5b6>
 8018d72:	bf00      	nop
 8018d74:	0801abc0 	.word	0x0801abc0
 8018d78:	0801ab98 	.word	0x0801ab98
 8018d7c:	3ff00000 	.word	0x3ff00000
 8018d80:	40240000 	.word	0x40240000
 8018d84:	401c0000 	.word	0x401c0000
 8018d88:	40140000 	.word	0x40140000
 8018d8c:	3fe00000 	.word	0x3fe00000
 8018d90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018d94:	9d00      	ldr	r5, [sp, #0]
 8018d96:	4642      	mov	r2, r8
 8018d98:	464b      	mov	r3, r9
 8018d9a:	4630      	mov	r0, r6
 8018d9c:	4639      	mov	r1, r7
 8018d9e:	f7e7 fd85 	bl	80008ac <__aeabi_ddiv>
 8018da2:	f7e7 ff09 	bl	8000bb8 <__aeabi_d2iz>
 8018da6:	9001      	str	r0, [sp, #4]
 8018da8:	f7e7 fbec 	bl	8000584 <__aeabi_i2d>
 8018dac:	4642      	mov	r2, r8
 8018dae:	464b      	mov	r3, r9
 8018db0:	f7e7 fc52 	bl	8000658 <__aeabi_dmul>
 8018db4:	4602      	mov	r2, r0
 8018db6:	460b      	mov	r3, r1
 8018db8:	4630      	mov	r0, r6
 8018dba:	4639      	mov	r1, r7
 8018dbc:	f7e7 fa94 	bl	80002e8 <__aeabi_dsub>
 8018dc0:	9e01      	ldr	r6, [sp, #4]
 8018dc2:	9f04      	ldr	r7, [sp, #16]
 8018dc4:	3630      	adds	r6, #48	; 0x30
 8018dc6:	f805 6b01 	strb.w	r6, [r5], #1
 8018dca:	9e00      	ldr	r6, [sp, #0]
 8018dcc:	1bae      	subs	r6, r5, r6
 8018dce:	42b7      	cmp	r7, r6
 8018dd0:	4602      	mov	r2, r0
 8018dd2:	460b      	mov	r3, r1
 8018dd4:	d134      	bne.n	8018e40 <_dtoa_r+0x708>
 8018dd6:	f7e7 fa89 	bl	80002ec <__adddf3>
 8018dda:	4642      	mov	r2, r8
 8018ddc:	464b      	mov	r3, r9
 8018dde:	4606      	mov	r6, r0
 8018de0:	460f      	mov	r7, r1
 8018de2:	f7e7 fec9 	bl	8000b78 <__aeabi_dcmpgt>
 8018de6:	b9c8      	cbnz	r0, 8018e1c <_dtoa_r+0x6e4>
 8018de8:	4642      	mov	r2, r8
 8018dea:	464b      	mov	r3, r9
 8018dec:	4630      	mov	r0, r6
 8018dee:	4639      	mov	r1, r7
 8018df0:	f7e7 fe9a 	bl	8000b28 <__aeabi_dcmpeq>
 8018df4:	b110      	cbz	r0, 8018dfc <_dtoa_r+0x6c4>
 8018df6:	9b01      	ldr	r3, [sp, #4]
 8018df8:	07db      	lsls	r3, r3, #31
 8018dfa:	d40f      	bmi.n	8018e1c <_dtoa_r+0x6e4>
 8018dfc:	4651      	mov	r1, sl
 8018dfe:	4620      	mov	r0, r4
 8018e00:	f000 fbcc 	bl	801959c <_Bfree>
 8018e04:	2300      	movs	r3, #0
 8018e06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018e08:	702b      	strb	r3, [r5, #0]
 8018e0a:	f10b 0301 	add.w	r3, fp, #1
 8018e0e:	6013      	str	r3, [r2, #0]
 8018e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	f43f ace2 	beq.w	80187dc <_dtoa_r+0xa4>
 8018e18:	601d      	str	r5, [r3, #0]
 8018e1a:	e4df      	b.n	80187dc <_dtoa_r+0xa4>
 8018e1c:	465f      	mov	r7, fp
 8018e1e:	462b      	mov	r3, r5
 8018e20:	461d      	mov	r5, r3
 8018e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018e26:	2a39      	cmp	r2, #57	; 0x39
 8018e28:	d106      	bne.n	8018e38 <_dtoa_r+0x700>
 8018e2a:	9a00      	ldr	r2, [sp, #0]
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d1f7      	bne.n	8018e20 <_dtoa_r+0x6e8>
 8018e30:	9900      	ldr	r1, [sp, #0]
 8018e32:	2230      	movs	r2, #48	; 0x30
 8018e34:	3701      	adds	r7, #1
 8018e36:	700a      	strb	r2, [r1, #0]
 8018e38:	781a      	ldrb	r2, [r3, #0]
 8018e3a:	3201      	adds	r2, #1
 8018e3c:	701a      	strb	r2, [r3, #0]
 8018e3e:	e790      	b.n	8018d62 <_dtoa_r+0x62a>
 8018e40:	4ba3      	ldr	r3, [pc, #652]	; (80190d0 <_dtoa_r+0x998>)
 8018e42:	2200      	movs	r2, #0
 8018e44:	f7e7 fc08 	bl	8000658 <__aeabi_dmul>
 8018e48:	2200      	movs	r2, #0
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	4606      	mov	r6, r0
 8018e4e:	460f      	mov	r7, r1
 8018e50:	f7e7 fe6a 	bl	8000b28 <__aeabi_dcmpeq>
 8018e54:	2800      	cmp	r0, #0
 8018e56:	d09e      	beq.n	8018d96 <_dtoa_r+0x65e>
 8018e58:	e7d0      	b.n	8018dfc <_dtoa_r+0x6c4>
 8018e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e5c:	2a00      	cmp	r2, #0
 8018e5e:	f000 80ca 	beq.w	8018ff6 <_dtoa_r+0x8be>
 8018e62:	9a07      	ldr	r2, [sp, #28]
 8018e64:	2a01      	cmp	r2, #1
 8018e66:	f300 80ad 	bgt.w	8018fc4 <_dtoa_r+0x88c>
 8018e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e6c:	2a00      	cmp	r2, #0
 8018e6e:	f000 80a5 	beq.w	8018fbc <_dtoa_r+0x884>
 8018e72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018e76:	9e08      	ldr	r6, [sp, #32]
 8018e78:	9d05      	ldr	r5, [sp, #20]
 8018e7a:	9a05      	ldr	r2, [sp, #20]
 8018e7c:	441a      	add	r2, r3
 8018e7e:	9205      	str	r2, [sp, #20]
 8018e80:	9a06      	ldr	r2, [sp, #24]
 8018e82:	2101      	movs	r1, #1
 8018e84:	441a      	add	r2, r3
 8018e86:	4620      	mov	r0, r4
 8018e88:	9206      	str	r2, [sp, #24]
 8018e8a:	f000 fc3d 	bl	8019708 <__i2b>
 8018e8e:	4607      	mov	r7, r0
 8018e90:	b165      	cbz	r5, 8018eac <_dtoa_r+0x774>
 8018e92:	9b06      	ldr	r3, [sp, #24]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	dd09      	ble.n	8018eac <_dtoa_r+0x774>
 8018e98:	42ab      	cmp	r3, r5
 8018e9a:	9a05      	ldr	r2, [sp, #20]
 8018e9c:	bfa8      	it	ge
 8018e9e:	462b      	movge	r3, r5
 8018ea0:	1ad2      	subs	r2, r2, r3
 8018ea2:	9205      	str	r2, [sp, #20]
 8018ea4:	9a06      	ldr	r2, [sp, #24]
 8018ea6:	1aed      	subs	r5, r5, r3
 8018ea8:	1ad3      	subs	r3, r2, r3
 8018eaa:	9306      	str	r3, [sp, #24]
 8018eac:	9b08      	ldr	r3, [sp, #32]
 8018eae:	b1f3      	cbz	r3, 8018eee <_dtoa_r+0x7b6>
 8018eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	f000 80a3 	beq.w	8018ffe <_dtoa_r+0x8c6>
 8018eb8:	2e00      	cmp	r6, #0
 8018eba:	dd10      	ble.n	8018ede <_dtoa_r+0x7a6>
 8018ebc:	4639      	mov	r1, r7
 8018ebe:	4632      	mov	r2, r6
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f000 fce1 	bl	8019888 <__pow5mult>
 8018ec6:	4652      	mov	r2, sl
 8018ec8:	4601      	mov	r1, r0
 8018eca:	4607      	mov	r7, r0
 8018ecc:	4620      	mov	r0, r4
 8018ece:	f000 fc31 	bl	8019734 <__multiply>
 8018ed2:	4651      	mov	r1, sl
 8018ed4:	4680      	mov	r8, r0
 8018ed6:	4620      	mov	r0, r4
 8018ed8:	f000 fb60 	bl	801959c <_Bfree>
 8018edc:	46c2      	mov	sl, r8
 8018ede:	9b08      	ldr	r3, [sp, #32]
 8018ee0:	1b9a      	subs	r2, r3, r6
 8018ee2:	d004      	beq.n	8018eee <_dtoa_r+0x7b6>
 8018ee4:	4651      	mov	r1, sl
 8018ee6:	4620      	mov	r0, r4
 8018ee8:	f000 fcce 	bl	8019888 <__pow5mult>
 8018eec:	4682      	mov	sl, r0
 8018eee:	2101      	movs	r1, #1
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	f000 fc09 	bl	8019708 <__i2b>
 8018ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	4606      	mov	r6, r0
 8018efc:	f340 8081 	ble.w	8019002 <_dtoa_r+0x8ca>
 8018f00:	461a      	mov	r2, r3
 8018f02:	4601      	mov	r1, r0
 8018f04:	4620      	mov	r0, r4
 8018f06:	f000 fcbf 	bl	8019888 <__pow5mult>
 8018f0a:	9b07      	ldr	r3, [sp, #28]
 8018f0c:	2b01      	cmp	r3, #1
 8018f0e:	4606      	mov	r6, r0
 8018f10:	dd7a      	ble.n	8019008 <_dtoa_r+0x8d0>
 8018f12:	f04f 0800 	mov.w	r8, #0
 8018f16:	6933      	ldr	r3, [r6, #16]
 8018f18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018f1c:	6918      	ldr	r0, [r3, #16]
 8018f1e:	f000 fba5 	bl	801966c <__hi0bits>
 8018f22:	f1c0 0020 	rsb	r0, r0, #32
 8018f26:	9b06      	ldr	r3, [sp, #24]
 8018f28:	4418      	add	r0, r3
 8018f2a:	f010 001f 	ands.w	r0, r0, #31
 8018f2e:	f000 8094 	beq.w	801905a <_dtoa_r+0x922>
 8018f32:	f1c0 0320 	rsb	r3, r0, #32
 8018f36:	2b04      	cmp	r3, #4
 8018f38:	f340 8085 	ble.w	8019046 <_dtoa_r+0x90e>
 8018f3c:	9b05      	ldr	r3, [sp, #20]
 8018f3e:	f1c0 001c 	rsb	r0, r0, #28
 8018f42:	4403      	add	r3, r0
 8018f44:	9305      	str	r3, [sp, #20]
 8018f46:	9b06      	ldr	r3, [sp, #24]
 8018f48:	4403      	add	r3, r0
 8018f4a:	4405      	add	r5, r0
 8018f4c:	9306      	str	r3, [sp, #24]
 8018f4e:	9b05      	ldr	r3, [sp, #20]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	dd05      	ble.n	8018f60 <_dtoa_r+0x828>
 8018f54:	4651      	mov	r1, sl
 8018f56:	461a      	mov	r2, r3
 8018f58:	4620      	mov	r0, r4
 8018f5a:	f000 fcef 	bl	801993c <__lshift>
 8018f5e:	4682      	mov	sl, r0
 8018f60:	9b06      	ldr	r3, [sp, #24]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	dd05      	ble.n	8018f72 <_dtoa_r+0x83a>
 8018f66:	4631      	mov	r1, r6
 8018f68:	461a      	mov	r2, r3
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	f000 fce6 	bl	801993c <__lshift>
 8018f70:	4606      	mov	r6, r0
 8018f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d072      	beq.n	801905e <_dtoa_r+0x926>
 8018f78:	4631      	mov	r1, r6
 8018f7a:	4650      	mov	r0, sl
 8018f7c:	f000 fd4a 	bl	8019a14 <__mcmp>
 8018f80:	2800      	cmp	r0, #0
 8018f82:	da6c      	bge.n	801905e <_dtoa_r+0x926>
 8018f84:	2300      	movs	r3, #0
 8018f86:	4651      	mov	r1, sl
 8018f88:	220a      	movs	r2, #10
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	f000 fb28 	bl	80195e0 <__multadd>
 8018f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018f96:	4682      	mov	sl, r0
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f000 81b0 	beq.w	80192fe <_dtoa_r+0xbc6>
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	4639      	mov	r1, r7
 8018fa2:	220a      	movs	r2, #10
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	f000 fb1b 	bl	80195e0 <__multadd>
 8018faa:	9b01      	ldr	r3, [sp, #4]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	4607      	mov	r7, r0
 8018fb0:	f300 8096 	bgt.w	80190e0 <_dtoa_r+0x9a8>
 8018fb4:	9b07      	ldr	r3, [sp, #28]
 8018fb6:	2b02      	cmp	r3, #2
 8018fb8:	dc59      	bgt.n	801906e <_dtoa_r+0x936>
 8018fba:	e091      	b.n	80190e0 <_dtoa_r+0x9a8>
 8018fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018fbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018fc2:	e758      	b.n	8018e76 <_dtoa_r+0x73e>
 8018fc4:	9b04      	ldr	r3, [sp, #16]
 8018fc6:	1e5e      	subs	r6, r3, #1
 8018fc8:	9b08      	ldr	r3, [sp, #32]
 8018fca:	42b3      	cmp	r3, r6
 8018fcc:	bfbf      	itttt	lt
 8018fce:	9b08      	ldrlt	r3, [sp, #32]
 8018fd0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8018fd2:	9608      	strlt	r6, [sp, #32]
 8018fd4:	1af3      	sublt	r3, r6, r3
 8018fd6:	bfb4      	ite	lt
 8018fd8:	18d2      	addlt	r2, r2, r3
 8018fda:	1b9e      	subge	r6, r3, r6
 8018fdc:	9b04      	ldr	r3, [sp, #16]
 8018fde:	bfbc      	itt	lt
 8018fe0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8018fe2:	2600      	movlt	r6, #0
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	bfb7      	itett	lt
 8018fe8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8018fec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018ff0:	1a9d      	sublt	r5, r3, r2
 8018ff2:	2300      	movlt	r3, #0
 8018ff4:	e741      	b.n	8018e7a <_dtoa_r+0x742>
 8018ff6:	9e08      	ldr	r6, [sp, #32]
 8018ff8:	9d05      	ldr	r5, [sp, #20]
 8018ffa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018ffc:	e748      	b.n	8018e90 <_dtoa_r+0x758>
 8018ffe:	9a08      	ldr	r2, [sp, #32]
 8019000:	e770      	b.n	8018ee4 <_dtoa_r+0x7ac>
 8019002:	9b07      	ldr	r3, [sp, #28]
 8019004:	2b01      	cmp	r3, #1
 8019006:	dc19      	bgt.n	801903c <_dtoa_r+0x904>
 8019008:	9b02      	ldr	r3, [sp, #8]
 801900a:	b9bb      	cbnz	r3, 801903c <_dtoa_r+0x904>
 801900c:	9b03      	ldr	r3, [sp, #12]
 801900e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019012:	b99b      	cbnz	r3, 801903c <_dtoa_r+0x904>
 8019014:	9b03      	ldr	r3, [sp, #12]
 8019016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801901a:	0d1b      	lsrs	r3, r3, #20
 801901c:	051b      	lsls	r3, r3, #20
 801901e:	b183      	cbz	r3, 8019042 <_dtoa_r+0x90a>
 8019020:	9b05      	ldr	r3, [sp, #20]
 8019022:	3301      	adds	r3, #1
 8019024:	9305      	str	r3, [sp, #20]
 8019026:	9b06      	ldr	r3, [sp, #24]
 8019028:	3301      	adds	r3, #1
 801902a:	9306      	str	r3, [sp, #24]
 801902c:	f04f 0801 	mov.w	r8, #1
 8019030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019032:	2b00      	cmp	r3, #0
 8019034:	f47f af6f 	bne.w	8018f16 <_dtoa_r+0x7de>
 8019038:	2001      	movs	r0, #1
 801903a:	e774      	b.n	8018f26 <_dtoa_r+0x7ee>
 801903c:	f04f 0800 	mov.w	r8, #0
 8019040:	e7f6      	b.n	8019030 <_dtoa_r+0x8f8>
 8019042:	4698      	mov	r8, r3
 8019044:	e7f4      	b.n	8019030 <_dtoa_r+0x8f8>
 8019046:	d082      	beq.n	8018f4e <_dtoa_r+0x816>
 8019048:	9a05      	ldr	r2, [sp, #20]
 801904a:	331c      	adds	r3, #28
 801904c:	441a      	add	r2, r3
 801904e:	9205      	str	r2, [sp, #20]
 8019050:	9a06      	ldr	r2, [sp, #24]
 8019052:	441a      	add	r2, r3
 8019054:	441d      	add	r5, r3
 8019056:	9206      	str	r2, [sp, #24]
 8019058:	e779      	b.n	8018f4e <_dtoa_r+0x816>
 801905a:	4603      	mov	r3, r0
 801905c:	e7f4      	b.n	8019048 <_dtoa_r+0x910>
 801905e:	9b04      	ldr	r3, [sp, #16]
 8019060:	2b00      	cmp	r3, #0
 8019062:	dc37      	bgt.n	80190d4 <_dtoa_r+0x99c>
 8019064:	9b07      	ldr	r3, [sp, #28]
 8019066:	2b02      	cmp	r3, #2
 8019068:	dd34      	ble.n	80190d4 <_dtoa_r+0x99c>
 801906a:	9b04      	ldr	r3, [sp, #16]
 801906c:	9301      	str	r3, [sp, #4]
 801906e:	9b01      	ldr	r3, [sp, #4]
 8019070:	b963      	cbnz	r3, 801908c <_dtoa_r+0x954>
 8019072:	4631      	mov	r1, r6
 8019074:	2205      	movs	r2, #5
 8019076:	4620      	mov	r0, r4
 8019078:	f000 fab2 	bl	80195e0 <__multadd>
 801907c:	4601      	mov	r1, r0
 801907e:	4606      	mov	r6, r0
 8019080:	4650      	mov	r0, sl
 8019082:	f000 fcc7 	bl	8019a14 <__mcmp>
 8019086:	2800      	cmp	r0, #0
 8019088:	f73f adbb 	bgt.w	8018c02 <_dtoa_r+0x4ca>
 801908c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801908e:	9d00      	ldr	r5, [sp, #0]
 8019090:	ea6f 0b03 	mvn.w	fp, r3
 8019094:	f04f 0800 	mov.w	r8, #0
 8019098:	4631      	mov	r1, r6
 801909a:	4620      	mov	r0, r4
 801909c:	f000 fa7e 	bl	801959c <_Bfree>
 80190a0:	2f00      	cmp	r7, #0
 80190a2:	f43f aeab 	beq.w	8018dfc <_dtoa_r+0x6c4>
 80190a6:	f1b8 0f00 	cmp.w	r8, #0
 80190aa:	d005      	beq.n	80190b8 <_dtoa_r+0x980>
 80190ac:	45b8      	cmp	r8, r7
 80190ae:	d003      	beq.n	80190b8 <_dtoa_r+0x980>
 80190b0:	4641      	mov	r1, r8
 80190b2:	4620      	mov	r0, r4
 80190b4:	f000 fa72 	bl	801959c <_Bfree>
 80190b8:	4639      	mov	r1, r7
 80190ba:	4620      	mov	r0, r4
 80190bc:	f000 fa6e 	bl	801959c <_Bfree>
 80190c0:	e69c      	b.n	8018dfc <_dtoa_r+0x6c4>
 80190c2:	2600      	movs	r6, #0
 80190c4:	4637      	mov	r7, r6
 80190c6:	e7e1      	b.n	801908c <_dtoa_r+0x954>
 80190c8:	46bb      	mov	fp, r7
 80190ca:	4637      	mov	r7, r6
 80190cc:	e599      	b.n	8018c02 <_dtoa_r+0x4ca>
 80190ce:	bf00      	nop
 80190d0:	40240000 	.word	0x40240000
 80190d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	f000 80c8 	beq.w	801926c <_dtoa_r+0xb34>
 80190dc:	9b04      	ldr	r3, [sp, #16]
 80190de:	9301      	str	r3, [sp, #4]
 80190e0:	2d00      	cmp	r5, #0
 80190e2:	dd05      	ble.n	80190f0 <_dtoa_r+0x9b8>
 80190e4:	4639      	mov	r1, r7
 80190e6:	462a      	mov	r2, r5
 80190e8:	4620      	mov	r0, r4
 80190ea:	f000 fc27 	bl	801993c <__lshift>
 80190ee:	4607      	mov	r7, r0
 80190f0:	f1b8 0f00 	cmp.w	r8, #0
 80190f4:	d05b      	beq.n	80191ae <_dtoa_r+0xa76>
 80190f6:	6879      	ldr	r1, [r7, #4]
 80190f8:	4620      	mov	r0, r4
 80190fa:	f000 fa0f 	bl	801951c <_Balloc>
 80190fe:	4605      	mov	r5, r0
 8019100:	b928      	cbnz	r0, 801910e <_dtoa_r+0x9d6>
 8019102:	4b83      	ldr	r3, [pc, #524]	; (8019310 <_dtoa_r+0xbd8>)
 8019104:	4602      	mov	r2, r0
 8019106:	f240 21ef 	movw	r1, #751	; 0x2ef
 801910a:	f7ff bb2e 	b.w	801876a <_dtoa_r+0x32>
 801910e:	693a      	ldr	r2, [r7, #16]
 8019110:	3202      	adds	r2, #2
 8019112:	0092      	lsls	r2, r2, #2
 8019114:	f107 010c 	add.w	r1, r7, #12
 8019118:	300c      	adds	r0, #12
 801911a:	f7ff fa75 	bl	8018608 <memcpy>
 801911e:	2201      	movs	r2, #1
 8019120:	4629      	mov	r1, r5
 8019122:	4620      	mov	r0, r4
 8019124:	f000 fc0a 	bl	801993c <__lshift>
 8019128:	9b00      	ldr	r3, [sp, #0]
 801912a:	3301      	adds	r3, #1
 801912c:	9304      	str	r3, [sp, #16]
 801912e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019132:	4413      	add	r3, r2
 8019134:	9308      	str	r3, [sp, #32]
 8019136:	9b02      	ldr	r3, [sp, #8]
 8019138:	f003 0301 	and.w	r3, r3, #1
 801913c:	46b8      	mov	r8, r7
 801913e:	9306      	str	r3, [sp, #24]
 8019140:	4607      	mov	r7, r0
 8019142:	9b04      	ldr	r3, [sp, #16]
 8019144:	4631      	mov	r1, r6
 8019146:	3b01      	subs	r3, #1
 8019148:	4650      	mov	r0, sl
 801914a:	9301      	str	r3, [sp, #4]
 801914c:	f7ff fa6a 	bl	8018624 <quorem>
 8019150:	4641      	mov	r1, r8
 8019152:	9002      	str	r0, [sp, #8]
 8019154:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019158:	4650      	mov	r0, sl
 801915a:	f000 fc5b 	bl	8019a14 <__mcmp>
 801915e:	463a      	mov	r2, r7
 8019160:	9005      	str	r0, [sp, #20]
 8019162:	4631      	mov	r1, r6
 8019164:	4620      	mov	r0, r4
 8019166:	f000 fc71 	bl	8019a4c <__mdiff>
 801916a:	68c2      	ldr	r2, [r0, #12]
 801916c:	4605      	mov	r5, r0
 801916e:	bb02      	cbnz	r2, 80191b2 <_dtoa_r+0xa7a>
 8019170:	4601      	mov	r1, r0
 8019172:	4650      	mov	r0, sl
 8019174:	f000 fc4e 	bl	8019a14 <__mcmp>
 8019178:	4602      	mov	r2, r0
 801917a:	4629      	mov	r1, r5
 801917c:	4620      	mov	r0, r4
 801917e:	9209      	str	r2, [sp, #36]	; 0x24
 8019180:	f000 fa0c 	bl	801959c <_Bfree>
 8019184:	9b07      	ldr	r3, [sp, #28]
 8019186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019188:	9d04      	ldr	r5, [sp, #16]
 801918a:	ea43 0102 	orr.w	r1, r3, r2
 801918e:	9b06      	ldr	r3, [sp, #24]
 8019190:	4319      	orrs	r1, r3
 8019192:	d110      	bne.n	80191b6 <_dtoa_r+0xa7e>
 8019194:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019198:	d029      	beq.n	80191ee <_dtoa_r+0xab6>
 801919a:	9b05      	ldr	r3, [sp, #20]
 801919c:	2b00      	cmp	r3, #0
 801919e:	dd02      	ble.n	80191a6 <_dtoa_r+0xa6e>
 80191a0:	9b02      	ldr	r3, [sp, #8]
 80191a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80191a6:	9b01      	ldr	r3, [sp, #4]
 80191a8:	f883 9000 	strb.w	r9, [r3]
 80191ac:	e774      	b.n	8019098 <_dtoa_r+0x960>
 80191ae:	4638      	mov	r0, r7
 80191b0:	e7ba      	b.n	8019128 <_dtoa_r+0x9f0>
 80191b2:	2201      	movs	r2, #1
 80191b4:	e7e1      	b.n	801917a <_dtoa_r+0xa42>
 80191b6:	9b05      	ldr	r3, [sp, #20]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	db04      	blt.n	80191c6 <_dtoa_r+0xa8e>
 80191bc:	9907      	ldr	r1, [sp, #28]
 80191be:	430b      	orrs	r3, r1
 80191c0:	9906      	ldr	r1, [sp, #24]
 80191c2:	430b      	orrs	r3, r1
 80191c4:	d120      	bne.n	8019208 <_dtoa_r+0xad0>
 80191c6:	2a00      	cmp	r2, #0
 80191c8:	dded      	ble.n	80191a6 <_dtoa_r+0xa6e>
 80191ca:	4651      	mov	r1, sl
 80191cc:	2201      	movs	r2, #1
 80191ce:	4620      	mov	r0, r4
 80191d0:	f000 fbb4 	bl	801993c <__lshift>
 80191d4:	4631      	mov	r1, r6
 80191d6:	4682      	mov	sl, r0
 80191d8:	f000 fc1c 	bl	8019a14 <__mcmp>
 80191dc:	2800      	cmp	r0, #0
 80191de:	dc03      	bgt.n	80191e8 <_dtoa_r+0xab0>
 80191e0:	d1e1      	bne.n	80191a6 <_dtoa_r+0xa6e>
 80191e2:	f019 0f01 	tst.w	r9, #1
 80191e6:	d0de      	beq.n	80191a6 <_dtoa_r+0xa6e>
 80191e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80191ec:	d1d8      	bne.n	80191a0 <_dtoa_r+0xa68>
 80191ee:	9a01      	ldr	r2, [sp, #4]
 80191f0:	2339      	movs	r3, #57	; 0x39
 80191f2:	7013      	strb	r3, [r2, #0]
 80191f4:	462b      	mov	r3, r5
 80191f6:	461d      	mov	r5, r3
 80191f8:	3b01      	subs	r3, #1
 80191fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80191fe:	2a39      	cmp	r2, #57	; 0x39
 8019200:	d06c      	beq.n	80192dc <_dtoa_r+0xba4>
 8019202:	3201      	adds	r2, #1
 8019204:	701a      	strb	r2, [r3, #0]
 8019206:	e747      	b.n	8019098 <_dtoa_r+0x960>
 8019208:	2a00      	cmp	r2, #0
 801920a:	dd07      	ble.n	801921c <_dtoa_r+0xae4>
 801920c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019210:	d0ed      	beq.n	80191ee <_dtoa_r+0xab6>
 8019212:	9a01      	ldr	r2, [sp, #4]
 8019214:	f109 0301 	add.w	r3, r9, #1
 8019218:	7013      	strb	r3, [r2, #0]
 801921a:	e73d      	b.n	8019098 <_dtoa_r+0x960>
 801921c:	9b04      	ldr	r3, [sp, #16]
 801921e:	9a08      	ldr	r2, [sp, #32]
 8019220:	f803 9c01 	strb.w	r9, [r3, #-1]
 8019224:	4293      	cmp	r3, r2
 8019226:	d043      	beq.n	80192b0 <_dtoa_r+0xb78>
 8019228:	4651      	mov	r1, sl
 801922a:	2300      	movs	r3, #0
 801922c:	220a      	movs	r2, #10
 801922e:	4620      	mov	r0, r4
 8019230:	f000 f9d6 	bl	80195e0 <__multadd>
 8019234:	45b8      	cmp	r8, r7
 8019236:	4682      	mov	sl, r0
 8019238:	f04f 0300 	mov.w	r3, #0
 801923c:	f04f 020a 	mov.w	r2, #10
 8019240:	4641      	mov	r1, r8
 8019242:	4620      	mov	r0, r4
 8019244:	d107      	bne.n	8019256 <_dtoa_r+0xb1e>
 8019246:	f000 f9cb 	bl	80195e0 <__multadd>
 801924a:	4680      	mov	r8, r0
 801924c:	4607      	mov	r7, r0
 801924e:	9b04      	ldr	r3, [sp, #16]
 8019250:	3301      	adds	r3, #1
 8019252:	9304      	str	r3, [sp, #16]
 8019254:	e775      	b.n	8019142 <_dtoa_r+0xa0a>
 8019256:	f000 f9c3 	bl	80195e0 <__multadd>
 801925a:	4639      	mov	r1, r7
 801925c:	4680      	mov	r8, r0
 801925e:	2300      	movs	r3, #0
 8019260:	220a      	movs	r2, #10
 8019262:	4620      	mov	r0, r4
 8019264:	f000 f9bc 	bl	80195e0 <__multadd>
 8019268:	4607      	mov	r7, r0
 801926a:	e7f0      	b.n	801924e <_dtoa_r+0xb16>
 801926c:	9b04      	ldr	r3, [sp, #16]
 801926e:	9301      	str	r3, [sp, #4]
 8019270:	9d00      	ldr	r5, [sp, #0]
 8019272:	4631      	mov	r1, r6
 8019274:	4650      	mov	r0, sl
 8019276:	f7ff f9d5 	bl	8018624 <quorem>
 801927a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801927e:	9b00      	ldr	r3, [sp, #0]
 8019280:	f805 9b01 	strb.w	r9, [r5], #1
 8019284:	1aea      	subs	r2, r5, r3
 8019286:	9b01      	ldr	r3, [sp, #4]
 8019288:	4293      	cmp	r3, r2
 801928a:	dd07      	ble.n	801929c <_dtoa_r+0xb64>
 801928c:	4651      	mov	r1, sl
 801928e:	2300      	movs	r3, #0
 8019290:	220a      	movs	r2, #10
 8019292:	4620      	mov	r0, r4
 8019294:	f000 f9a4 	bl	80195e0 <__multadd>
 8019298:	4682      	mov	sl, r0
 801929a:	e7ea      	b.n	8019272 <_dtoa_r+0xb3a>
 801929c:	9b01      	ldr	r3, [sp, #4]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	bfc8      	it	gt
 80192a2:	461d      	movgt	r5, r3
 80192a4:	9b00      	ldr	r3, [sp, #0]
 80192a6:	bfd8      	it	le
 80192a8:	2501      	movle	r5, #1
 80192aa:	441d      	add	r5, r3
 80192ac:	f04f 0800 	mov.w	r8, #0
 80192b0:	4651      	mov	r1, sl
 80192b2:	2201      	movs	r2, #1
 80192b4:	4620      	mov	r0, r4
 80192b6:	f000 fb41 	bl	801993c <__lshift>
 80192ba:	4631      	mov	r1, r6
 80192bc:	4682      	mov	sl, r0
 80192be:	f000 fba9 	bl	8019a14 <__mcmp>
 80192c2:	2800      	cmp	r0, #0
 80192c4:	dc96      	bgt.n	80191f4 <_dtoa_r+0xabc>
 80192c6:	d102      	bne.n	80192ce <_dtoa_r+0xb96>
 80192c8:	f019 0f01 	tst.w	r9, #1
 80192cc:	d192      	bne.n	80191f4 <_dtoa_r+0xabc>
 80192ce:	462b      	mov	r3, r5
 80192d0:	461d      	mov	r5, r3
 80192d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80192d6:	2a30      	cmp	r2, #48	; 0x30
 80192d8:	d0fa      	beq.n	80192d0 <_dtoa_r+0xb98>
 80192da:	e6dd      	b.n	8019098 <_dtoa_r+0x960>
 80192dc:	9a00      	ldr	r2, [sp, #0]
 80192de:	429a      	cmp	r2, r3
 80192e0:	d189      	bne.n	80191f6 <_dtoa_r+0xabe>
 80192e2:	f10b 0b01 	add.w	fp, fp, #1
 80192e6:	2331      	movs	r3, #49	; 0x31
 80192e8:	e796      	b.n	8019218 <_dtoa_r+0xae0>
 80192ea:	4b0a      	ldr	r3, [pc, #40]	; (8019314 <_dtoa_r+0xbdc>)
 80192ec:	f7ff ba99 	b.w	8018822 <_dtoa_r+0xea>
 80192f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	f47f aa6d 	bne.w	80187d2 <_dtoa_r+0x9a>
 80192f8:	4b07      	ldr	r3, [pc, #28]	; (8019318 <_dtoa_r+0xbe0>)
 80192fa:	f7ff ba92 	b.w	8018822 <_dtoa_r+0xea>
 80192fe:	9b01      	ldr	r3, [sp, #4]
 8019300:	2b00      	cmp	r3, #0
 8019302:	dcb5      	bgt.n	8019270 <_dtoa_r+0xb38>
 8019304:	9b07      	ldr	r3, [sp, #28]
 8019306:	2b02      	cmp	r3, #2
 8019308:	f73f aeb1 	bgt.w	801906e <_dtoa_r+0x936>
 801930c:	e7b0      	b.n	8019270 <_dtoa_r+0xb38>
 801930e:	bf00      	nop
 8019310:	0801ab2c 	.word	0x0801ab2c
 8019314:	0801aa8c 	.word	0x0801aa8c
 8019318:	0801aab0 	.word	0x0801aab0

0801931c <_free_r>:
 801931c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801931e:	2900      	cmp	r1, #0
 8019320:	d044      	beq.n	80193ac <_free_r+0x90>
 8019322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019326:	9001      	str	r0, [sp, #4]
 8019328:	2b00      	cmp	r3, #0
 801932a:	f1a1 0404 	sub.w	r4, r1, #4
 801932e:	bfb8      	it	lt
 8019330:	18e4      	addlt	r4, r4, r3
 8019332:	f000 f8e7 	bl	8019504 <__malloc_lock>
 8019336:	4a1e      	ldr	r2, [pc, #120]	; (80193b0 <_free_r+0x94>)
 8019338:	9801      	ldr	r0, [sp, #4]
 801933a:	6813      	ldr	r3, [r2, #0]
 801933c:	b933      	cbnz	r3, 801934c <_free_r+0x30>
 801933e:	6063      	str	r3, [r4, #4]
 8019340:	6014      	str	r4, [r2, #0]
 8019342:	b003      	add	sp, #12
 8019344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019348:	f000 b8e2 	b.w	8019510 <__malloc_unlock>
 801934c:	42a3      	cmp	r3, r4
 801934e:	d908      	bls.n	8019362 <_free_r+0x46>
 8019350:	6825      	ldr	r5, [r4, #0]
 8019352:	1961      	adds	r1, r4, r5
 8019354:	428b      	cmp	r3, r1
 8019356:	bf01      	itttt	eq
 8019358:	6819      	ldreq	r1, [r3, #0]
 801935a:	685b      	ldreq	r3, [r3, #4]
 801935c:	1949      	addeq	r1, r1, r5
 801935e:	6021      	streq	r1, [r4, #0]
 8019360:	e7ed      	b.n	801933e <_free_r+0x22>
 8019362:	461a      	mov	r2, r3
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	b10b      	cbz	r3, 801936c <_free_r+0x50>
 8019368:	42a3      	cmp	r3, r4
 801936a:	d9fa      	bls.n	8019362 <_free_r+0x46>
 801936c:	6811      	ldr	r1, [r2, #0]
 801936e:	1855      	adds	r5, r2, r1
 8019370:	42a5      	cmp	r5, r4
 8019372:	d10b      	bne.n	801938c <_free_r+0x70>
 8019374:	6824      	ldr	r4, [r4, #0]
 8019376:	4421      	add	r1, r4
 8019378:	1854      	adds	r4, r2, r1
 801937a:	42a3      	cmp	r3, r4
 801937c:	6011      	str	r1, [r2, #0]
 801937e:	d1e0      	bne.n	8019342 <_free_r+0x26>
 8019380:	681c      	ldr	r4, [r3, #0]
 8019382:	685b      	ldr	r3, [r3, #4]
 8019384:	6053      	str	r3, [r2, #4]
 8019386:	440c      	add	r4, r1
 8019388:	6014      	str	r4, [r2, #0]
 801938a:	e7da      	b.n	8019342 <_free_r+0x26>
 801938c:	d902      	bls.n	8019394 <_free_r+0x78>
 801938e:	230c      	movs	r3, #12
 8019390:	6003      	str	r3, [r0, #0]
 8019392:	e7d6      	b.n	8019342 <_free_r+0x26>
 8019394:	6825      	ldr	r5, [r4, #0]
 8019396:	1961      	adds	r1, r4, r5
 8019398:	428b      	cmp	r3, r1
 801939a:	bf04      	itt	eq
 801939c:	6819      	ldreq	r1, [r3, #0]
 801939e:	685b      	ldreq	r3, [r3, #4]
 80193a0:	6063      	str	r3, [r4, #4]
 80193a2:	bf04      	itt	eq
 80193a4:	1949      	addeq	r1, r1, r5
 80193a6:	6021      	streq	r1, [r4, #0]
 80193a8:	6054      	str	r4, [r2, #4]
 80193aa:	e7ca      	b.n	8019342 <_free_r+0x26>
 80193ac:	b003      	add	sp, #12
 80193ae:	bd30      	pop	{r4, r5, pc}
 80193b0:	2000b370 	.word	0x2000b370

080193b4 <malloc>:
 80193b4:	4b02      	ldr	r3, [pc, #8]	; (80193c0 <malloc+0xc>)
 80193b6:	4601      	mov	r1, r0
 80193b8:	6818      	ldr	r0, [r3, #0]
 80193ba:	f000 b823 	b.w	8019404 <_malloc_r>
 80193be:	bf00      	nop
 80193c0:	200001a4 	.word	0x200001a4

080193c4 <sbrk_aligned>:
 80193c4:	b570      	push	{r4, r5, r6, lr}
 80193c6:	4e0e      	ldr	r6, [pc, #56]	; (8019400 <sbrk_aligned+0x3c>)
 80193c8:	460c      	mov	r4, r1
 80193ca:	6831      	ldr	r1, [r6, #0]
 80193cc:	4605      	mov	r5, r0
 80193ce:	b911      	cbnz	r1, 80193d6 <sbrk_aligned+0x12>
 80193d0:	f001 f808 	bl	801a3e4 <_sbrk_r>
 80193d4:	6030      	str	r0, [r6, #0]
 80193d6:	4621      	mov	r1, r4
 80193d8:	4628      	mov	r0, r5
 80193da:	f001 f803 	bl	801a3e4 <_sbrk_r>
 80193de:	1c43      	adds	r3, r0, #1
 80193e0:	d00a      	beq.n	80193f8 <sbrk_aligned+0x34>
 80193e2:	1cc4      	adds	r4, r0, #3
 80193e4:	f024 0403 	bic.w	r4, r4, #3
 80193e8:	42a0      	cmp	r0, r4
 80193ea:	d007      	beq.n	80193fc <sbrk_aligned+0x38>
 80193ec:	1a21      	subs	r1, r4, r0
 80193ee:	4628      	mov	r0, r5
 80193f0:	f000 fff8 	bl	801a3e4 <_sbrk_r>
 80193f4:	3001      	adds	r0, #1
 80193f6:	d101      	bne.n	80193fc <sbrk_aligned+0x38>
 80193f8:	f04f 34ff 	mov.w	r4, #4294967295
 80193fc:	4620      	mov	r0, r4
 80193fe:	bd70      	pop	{r4, r5, r6, pc}
 8019400:	2000b374 	.word	0x2000b374

08019404 <_malloc_r>:
 8019404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019408:	1ccd      	adds	r5, r1, #3
 801940a:	f025 0503 	bic.w	r5, r5, #3
 801940e:	3508      	adds	r5, #8
 8019410:	2d0c      	cmp	r5, #12
 8019412:	bf38      	it	cc
 8019414:	250c      	movcc	r5, #12
 8019416:	2d00      	cmp	r5, #0
 8019418:	4607      	mov	r7, r0
 801941a:	db01      	blt.n	8019420 <_malloc_r+0x1c>
 801941c:	42a9      	cmp	r1, r5
 801941e:	d905      	bls.n	801942c <_malloc_r+0x28>
 8019420:	230c      	movs	r3, #12
 8019422:	603b      	str	r3, [r7, #0]
 8019424:	2600      	movs	r6, #0
 8019426:	4630      	mov	r0, r6
 8019428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801942c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019500 <_malloc_r+0xfc>
 8019430:	f000 f868 	bl	8019504 <__malloc_lock>
 8019434:	f8d8 3000 	ldr.w	r3, [r8]
 8019438:	461c      	mov	r4, r3
 801943a:	bb5c      	cbnz	r4, 8019494 <_malloc_r+0x90>
 801943c:	4629      	mov	r1, r5
 801943e:	4638      	mov	r0, r7
 8019440:	f7ff ffc0 	bl	80193c4 <sbrk_aligned>
 8019444:	1c43      	adds	r3, r0, #1
 8019446:	4604      	mov	r4, r0
 8019448:	d155      	bne.n	80194f6 <_malloc_r+0xf2>
 801944a:	f8d8 4000 	ldr.w	r4, [r8]
 801944e:	4626      	mov	r6, r4
 8019450:	2e00      	cmp	r6, #0
 8019452:	d145      	bne.n	80194e0 <_malloc_r+0xdc>
 8019454:	2c00      	cmp	r4, #0
 8019456:	d048      	beq.n	80194ea <_malloc_r+0xe6>
 8019458:	6823      	ldr	r3, [r4, #0]
 801945a:	4631      	mov	r1, r6
 801945c:	4638      	mov	r0, r7
 801945e:	eb04 0903 	add.w	r9, r4, r3
 8019462:	f000 ffbf 	bl	801a3e4 <_sbrk_r>
 8019466:	4581      	cmp	r9, r0
 8019468:	d13f      	bne.n	80194ea <_malloc_r+0xe6>
 801946a:	6821      	ldr	r1, [r4, #0]
 801946c:	1a6d      	subs	r5, r5, r1
 801946e:	4629      	mov	r1, r5
 8019470:	4638      	mov	r0, r7
 8019472:	f7ff ffa7 	bl	80193c4 <sbrk_aligned>
 8019476:	3001      	adds	r0, #1
 8019478:	d037      	beq.n	80194ea <_malloc_r+0xe6>
 801947a:	6823      	ldr	r3, [r4, #0]
 801947c:	442b      	add	r3, r5
 801947e:	6023      	str	r3, [r4, #0]
 8019480:	f8d8 3000 	ldr.w	r3, [r8]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d038      	beq.n	80194fa <_malloc_r+0xf6>
 8019488:	685a      	ldr	r2, [r3, #4]
 801948a:	42a2      	cmp	r2, r4
 801948c:	d12b      	bne.n	80194e6 <_malloc_r+0xe2>
 801948e:	2200      	movs	r2, #0
 8019490:	605a      	str	r2, [r3, #4]
 8019492:	e00f      	b.n	80194b4 <_malloc_r+0xb0>
 8019494:	6822      	ldr	r2, [r4, #0]
 8019496:	1b52      	subs	r2, r2, r5
 8019498:	d41f      	bmi.n	80194da <_malloc_r+0xd6>
 801949a:	2a0b      	cmp	r2, #11
 801949c:	d917      	bls.n	80194ce <_malloc_r+0xca>
 801949e:	1961      	adds	r1, r4, r5
 80194a0:	42a3      	cmp	r3, r4
 80194a2:	6025      	str	r5, [r4, #0]
 80194a4:	bf18      	it	ne
 80194a6:	6059      	strne	r1, [r3, #4]
 80194a8:	6863      	ldr	r3, [r4, #4]
 80194aa:	bf08      	it	eq
 80194ac:	f8c8 1000 	streq.w	r1, [r8]
 80194b0:	5162      	str	r2, [r4, r5]
 80194b2:	604b      	str	r3, [r1, #4]
 80194b4:	4638      	mov	r0, r7
 80194b6:	f104 060b 	add.w	r6, r4, #11
 80194ba:	f000 f829 	bl	8019510 <__malloc_unlock>
 80194be:	f026 0607 	bic.w	r6, r6, #7
 80194c2:	1d23      	adds	r3, r4, #4
 80194c4:	1af2      	subs	r2, r6, r3
 80194c6:	d0ae      	beq.n	8019426 <_malloc_r+0x22>
 80194c8:	1b9b      	subs	r3, r3, r6
 80194ca:	50a3      	str	r3, [r4, r2]
 80194cc:	e7ab      	b.n	8019426 <_malloc_r+0x22>
 80194ce:	42a3      	cmp	r3, r4
 80194d0:	6862      	ldr	r2, [r4, #4]
 80194d2:	d1dd      	bne.n	8019490 <_malloc_r+0x8c>
 80194d4:	f8c8 2000 	str.w	r2, [r8]
 80194d8:	e7ec      	b.n	80194b4 <_malloc_r+0xb0>
 80194da:	4623      	mov	r3, r4
 80194dc:	6864      	ldr	r4, [r4, #4]
 80194de:	e7ac      	b.n	801943a <_malloc_r+0x36>
 80194e0:	4634      	mov	r4, r6
 80194e2:	6876      	ldr	r6, [r6, #4]
 80194e4:	e7b4      	b.n	8019450 <_malloc_r+0x4c>
 80194e6:	4613      	mov	r3, r2
 80194e8:	e7cc      	b.n	8019484 <_malloc_r+0x80>
 80194ea:	230c      	movs	r3, #12
 80194ec:	603b      	str	r3, [r7, #0]
 80194ee:	4638      	mov	r0, r7
 80194f0:	f000 f80e 	bl	8019510 <__malloc_unlock>
 80194f4:	e797      	b.n	8019426 <_malloc_r+0x22>
 80194f6:	6025      	str	r5, [r4, #0]
 80194f8:	e7dc      	b.n	80194b4 <_malloc_r+0xb0>
 80194fa:	605b      	str	r3, [r3, #4]
 80194fc:	deff      	udf	#255	; 0xff
 80194fe:	bf00      	nop
 8019500:	2000b370 	.word	0x2000b370

08019504 <__malloc_lock>:
 8019504:	4801      	ldr	r0, [pc, #4]	; (801950c <__malloc_lock+0x8>)
 8019506:	f7ff b87d 	b.w	8018604 <__retarget_lock_acquire_recursive>
 801950a:	bf00      	nop
 801950c:	2000b36c 	.word	0x2000b36c

08019510 <__malloc_unlock>:
 8019510:	4801      	ldr	r0, [pc, #4]	; (8019518 <__malloc_unlock+0x8>)
 8019512:	f7ff b878 	b.w	8018606 <__retarget_lock_release_recursive>
 8019516:	bf00      	nop
 8019518:	2000b36c 	.word	0x2000b36c

0801951c <_Balloc>:
 801951c:	b570      	push	{r4, r5, r6, lr}
 801951e:	69c6      	ldr	r6, [r0, #28]
 8019520:	4604      	mov	r4, r0
 8019522:	460d      	mov	r5, r1
 8019524:	b976      	cbnz	r6, 8019544 <_Balloc+0x28>
 8019526:	2010      	movs	r0, #16
 8019528:	f7ff ff44 	bl	80193b4 <malloc>
 801952c:	4602      	mov	r2, r0
 801952e:	61e0      	str	r0, [r4, #28]
 8019530:	b920      	cbnz	r0, 801953c <_Balloc+0x20>
 8019532:	4b18      	ldr	r3, [pc, #96]	; (8019594 <_Balloc+0x78>)
 8019534:	4818      	ldr	r0, [pc, #96]	; (8019598 <_Balloc+0x7c>)
 8019536:	216b      	movs	r1, #107	; 0x6b
 8019538:	f000 ff64 	bl	801a404 <__assert_func>
 801953c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019540:	6006      	str	r6, [r0, #0]
 8019542:	60c6      	str	r6, [r0, #12]
 8019544:	69e6      	ldr	r6, [r4, #28]
 8019546:	68f3      	ldr	r3, [r6, #12]
 8019548:	b183      	cbz	r3, 801956c <_Balloc+0x50>
 801954a:	69e3      	ldr	r3, [r4, #28]
 801954c:	68db      	ldr	r3, [r3, #12]
 801954e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019552:	b9b8      	cbnz	r0, 8019584 <_Balloc+0x68>
 8019554:	2101      	movs	r1, #1
 8019556:	fa01 f605 	lsl.w	r6, r1, r5
 801955a:	1d72      	adds	r2, r6, #5
 801955c:	0092      	lsls	r2, r2, #2
 801955e:	4620      	mov	r0, r4
 8019560:	f000 ff6e 	bl	801a440 <_calloc_r>
 8019564:	b160      	cbz	r0, 8019580 <_Balloc+0x64>
 8019566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801956a:	e00e      	b.n	801958a <_Balloc+0x6e>
 801956c:	2221      	movs	r2, #33	; 0x21
 801956e:	2104      	movs	r1, #4
 8019570:	4620      	mov	r0, r4
 8019572:	f000 ff65 	bl	801a440 <_calloc_r>
 8019576:	69e3      	ldr	r3, [r4, #28]
 8019578:	60f0      	str	r0, [r6, #12]
 801957a:	68db      	ldr	r3, [r3, #12]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d1e4      	bne.n	801954a <_Balloc+0x2e>
 8019580:	2000      	movs	r0, #0
 8019582:	bd70      	pop	{r4, r5, r6, pc}
 8019584:	6802      	ldr	r2, [r0, #0]
 8019586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801958a:	2300      	movs	r3, #0
 801958c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019590:	e7f7      	b.n	8019582 <_Balloc+0x66>
 8019592:	bf00      	nop
 8019594:	0801aabd 	.word	0x0801aabd
 8019598:	0801ab3d 	.word	0x0801ab3d

0801959c <_Bfree>:
 801959c:	b570      	push	{r4, r5, r6, lr}
 801959e:	69c6      	ldr	r6, [r0, #28]
 80195a0:	4605      	mov	r5, r0
 80195a2:	460c      	mov	r4, r1
 80195a4:	b976      	cbnz	r6, 80195c4 <_Bfree+0x28>
 80195a6:	2010      	movs	r0, #16
 80195a8:	f7ff ff04 	bl	80193b4 <malloc>
 80195ac:	4602      	mov	r2, r0
 80195ae:	61e8      	str	r0, [r5, #28]
 80195b0:	b920      	cbnz	r0, 80195bc <_Bfree+0x20>
 80195b2:	4b09      	ldr	r3, [pc, #36]	; (80195d8 <_Bfree+0x3c>)
 80195b4:	4809      	ldr	r0, [pc, #36]	; (80195dc <_Bfree+0x40>)
 80195b6:	218f      	movs	r1, #143	; 0x8f
 80195b8:	f000 ff24 	bl	801a404 <__assert_func>
 80195bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80195c0:	6006      	str	r6, [r0, #0]
 80195c2:	60c6      	str	r6, [r0, #12]
 80195c4:	b13c      	cbz	r4, 80195d6 <_Bfree+0x3a>
 80195c6:	69eb      	ldr	r3, [r5, #28]
 80195c8:	6862      	ldr	r2, [r4, #4]
 80195ca:	68db      	ldr	r3, [r3, #12]
 80195cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80195d0:	6021      	str	r1, [r4, #0]
 80195d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80195d6:	bd70      	pop	{r4, r5, r6, pc}
 80195d8:	0801aabd 	.word	0x0801aabd
 80195dc:	0801ab3d 	.word	0x0801ab3d

080195e0 <__multadd>:
 80195e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195e4:	690d      	ldr	r5, [r1, #16]
 80195e6:	4607      	mov	r7, r0
 80195e8:	460c      	mov	r4, r1
 80195ea:	461e      	mov	r6, r3
 80195ec:	f101 0c14 	add.w	ip, r1, #20
 80195f0:	2000      	movs	r0, #0
 80195f2:	f8dc 3000 	ldr.w	r3, [ip]
 80195f6:	b299      	uxth	r1, r3
 80195f8:	fb02 6101 	mla	r1, r2, r1, r6
 80195fc:	0c1e      	lsrs	r6, r3, #16
 80195fe:	0c0b      	lsrs	r3, r1, #16
 8019600:	fb02 3306 	mla	r3, r2, r6, r3
 8019604:	b289      	uxth	r1, r1
 8019606:	3001      	adds	r0, #1
 8019608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801960c:	4285      	cmp	r5, r0
 801960e:	f84c 1b04 	str.w	r1, [ip], #4
 8019612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019616:	dcec      	bgt.n	80195f2 <__multadd+0x12>
 8019618:	b30e      	cbz	r6, 801965e <__multadd+0x7e>
 801961a:	68a3      	ldr	r3, [r4, #8]
 801961c:	42ab      	cmp	r3, r5
 801961e:	dc19      	bgt.n	8019654 <__multadd+0x74>
 8019620:	6861      	ldr	r1, [r4, #4]
 8019622:	4638      	mov	r0, r7
 8019624:	3101      	adds	r1, #1
 8019626:	f7ff ff79 	bl	801951c <_Balloc>
 801962a:	4680      	mov	r8, r0
 801962c:	b928      	cbnz	r0, 801963a <__multadd+0x5a>
 801962e:	4602      	mov	r2, r0
 8019630:	4b0c      	ldr	r3, [pc, #48]	; (8019664 <__multadd+0x84>)
 8019632:	480d      	ldr	r0, [pc, #52]	; (8019668 <__multadd+0x88>)
 8019634:	21ba      	movs	r1, #186	; 0xba
 8019636:	f000 fee5 	bl	801a404 <__assert_func>
 801963a:	6922      	ldr	r2, [r4, #16]
 801963c:	3202      	adds	r2, #2
 801963e:	f104 010c 	add.w	r1, r4, #12
 8019642:	0092      	lsls	r2, r2, #2
 8019644:	300c      	adds	r0, #12
 8019646:	f7fe ffdf 	bl	8018608 <memcpy>
 801964a:	4621      	mov	r1, r4
 801964c:	4638      	mov	r0, r7
 801964e:	f7ff ffa5 	bl	801959c <_Bfree>
 8019652:	4644      	mov	r4, r8
 8019654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019658:	3501      	adds	r5, #1
 801965a:	615e      	str	r6, [r3, #20]
 801965c:	6125      	str	r5, [r4, #16]
 801965e:	4620      	mov	r0, r4
 8019660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019664:	0801ab2c 	.word	0x0801ab2c
 8019668:	0801ab3d 	.word	0x0801ab3d

0801966c <__hi0bits>:
 801966c:	0c03      	lsrs	r3, r0, #16
 801966e:	041b      	lsls	r3, r3, #16
 8019670:	b9d3      	cbnz	r3, 80196a8 <__hi0bits+0x3c>
 8019672:	0400      	lsls	r0, r0, #16
 8019674:	2310      	movs	r3, #16
 8019676:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801967a:	bf04      	itt	eq
 801967c:	0200      	lsleq	r0, r0, #8
 801967e:	3308      	addeq	r3, #8
 8019680:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019684:	bf04      	itt	eq
 8019686:	0100      	lsleq	r0, r0, #4
 8019688:	3304      	addeq	r3, #4
 801968a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801968e:	bf04      	itt	eq
 8019690:	0080      	lsleq	r0, r0, #2
 8019692:	3302      	addeq	r3, #2
 8019694:	2800      	cmp	r0, #0
 8019696:	db05      	blt.n	80196a4 <__hi0bits+0x38>
 8019698:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801969c:	f103 0301 	add.w	r3, r3, #1
 80196a0:	bf08      	it	eq
 80196a2:	2320      	moveq	r3, #32
 80196a4:	4618      	mov	r0, r3
 80196a6:	4770      	bx	lr
 80196a8:	2300      	movs	r3, #0
 80196aa:	e7e4      	b.n	8019676 <__hi0bits+0xa>

080196ac <__lo0bits>:
 80196ac:	6803      	ldr	r3, [r0, #0]
 80196ae:	f013 0207 	ands.w	r2, r3, #7
 80196b2:	d00c      	beq.n	80196ce <__lo0bits+0x22>
 80196b4:	07d9      	lsls	r1, r3, #31
 80196b6:	d422      	bmi.n	80196fe <__lo0bits+0x52>
 80196b8:	079a      	lsls	r2, r3, #30
 80196ba:	bf49      	itett	mi
 80196bc:	085b      	lsrmi	r3, r3, #1
 80196be:	089b      	lsrpl	r3, r3, #2
 80196c0:	6003      	strmi	r3, [r0, #0]
 80196c2:	2201      	movmi	r2, #1
 80196c4:	bf5c      	itt	pl
 80196c6:	6003      	strpl	r3, [r0, #0]
 80196c8:	2202      	movpl	r2, #2
 80196ca:	4610      	mov	r0, r2
 80196cc:	4770      	bx	lr
 80196ce:	b299      	uxth	r1, r3
 80196d0:	b909      	cbnz	r1, 80196d6 <__lo0bits+0x2a>
 80196d2:	0c1b      	lsrs	r3, r3, #16
 80196d4:	2210      	movs	r2, #16
 80196d6:	b2d9      	uxtb	r1, r3
 80196d8:	b909      	cbnz	r1, 80196de <__lo0bits+0x32>
 80196da:	3208      	adds	r2, #8
 80196dc:	0a1b      	lsrs	r3, r3, #8
 80196de:	0719      	lsls	r1, r3, #28
 80196e0:	bf04      	itt	eq
 80196e2:	091b      	lsreq	r3, r3, #4
 80196e4:	3204      	addeq	r2, #4
 80196e6:	0799      	lsls	r1, r3, #30
 80196e8:	bf04      	itt	eq
 80196ea:	089b      	lsreq	r3, r3, #2
 80196ec:	3202      	addeq	r2, #2
 80196ee:	07d9      	lsls	r1, r3, #31
 80196f0:	d403      	bmi.n	80196fa <__lo0bits+0x4e>
 80196f2:	085b      	lsrs	r3, r3, #1
 80196f4:	f102 0201 	add.w	r2, r2, #1
 80196f8:	d003      	beq.n	8019702 <__lo0bits+0x56>
 80196fa:	6003      	str	r3, [r0, #0]
 80196fc:	e7e5      	b.n	80196ca <__lo0bits+0x1e>
 80196fe:	2200      	movs	r2, #0
 8019700:	e7e3      	b.n	80196ca <__lo0bits+0x1e>
 8019702:	2220      	movs	r2, #32
 8019704:	e7e1      	b.n	80196ca <__lo0bits+0x1e>
	...

08019708 <__i2b>:
 8019708:	b510      	push	{r4, lr}
 801970a:	460c      	mov	r4, r1
 801970c:	2101      	movs	r1, #1
 801970e:	f7ff ff05 	bl	801951c <_Balloc>
 8019712:	4602      	mov	r2, r0
 8019714:	b928      	cbnz	r0, 8019722 <__i2b+0x1a>
 8019716:	4b05      	ldr	r3, [pc, #20]	; (801972c <__i2b+0x24>)
 8019718:	4805      	ldr	r0, [pc, #20]	; (8019730 <__i2b+0x28>)
 801971a:	f240 1145 	movw	r1, #325	; 0x145
 801971e:	f000 fe71 	bl	801a404 <__assert_func>
 8019722:	2301      	movs	r3, #1
 8019724:	6144      	str	r4, [r0, #20]
 8019726:	6103      	str	r3, [r0, #16]
 8019728:	bd10      	pop	{r4, pc}
 801972a:	bf00      	nop
 801972c:	0801ab2c 	.word	0x0801ab2c
 8019730:	0801ab3d 	.word	0x0801ab3d

08019734 <__multiply>:
 8019734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019738:	4691      	mov	r9, r2
 801973a:	690a      	ldr	r2, [r1, #16]
 801973c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019740:	429a      	cmp	r2, r3
 8019742:	bfb8      	it	lt
 8019744:	460b      	movlt	r3, r1
 8019746:	460c      	mov	r4, r1
 8019748:	bfbc      	itt	lt
 801974a:	464c      	movlt	r4, r9
 801974c:	4699      	movlt	r9, r3
 801974e:	6927      	ldr	r7, [r4, #16]
 8019750:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019754:	68a3      	ldr	r3, [r4, #8]
 8019756:	6861      	ldr	r1, [r4, #4]
 8019758:	eb07 060a 	add.w	r6, r7, sl
 801975c:	42b3      	cmp	r3, r6
 801975e:	b085      	sub	sp, #20
 8019760:	bfb8      	it	lt
 8019762:	3101      	addlt	r1, #1
 8019764:	f7ff feda 	bl	801951c <_Balloc>
 8019768:	b930      	cbnz	r0, 8019778 <__multiply+0x44>
 801976a:	4602      	mov	r2, r0
 801976c:	4b44      	ldr	r3, [pc, #272]	; (8019880 <__multiply+0x14c>)
 801976e:	4845      	ldr	r0, [pc, #276]	; (8019884 <__multiply+0x150>)
 8019770:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019774:	f000 fe46 	bl	801a404 <__assert_func>
 8019778:	f100 0514 	add.w	r5, r0, #20
 801977c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019780:	462b      	mov	r3, r5
 8019782:	2200      	movs	r2, #0
 8019784:	4543      	cmp	r3, r8
 8019786:	d321      	bcc.n	80197cc <__multiply+0x98>
 8019788:	f104 0314 	add.w	r3, r4, #20
 801978c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019790:	f109 0314 	add.w	r3, r9, #20
 8019794:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019798:	9202      	str	r2, [sp, #8]
 801979a:	1b3a      	subs	r2, r7, r4
 801979c:	3a15      	subs	r2, #21
 801979e:	f022 0203 	bic.w	r2, r2, #3
 80197a2:	3204      	adds	r2, #4
 80197a4:	f104 0115 	add.w	r1, r4, #21
 80197a8:	428f      	cmp	r7, r1
 80197aa:	bf38      	it	cc
 80197ac:	2204      	movcc	r2, #4
 80197ae:	9201      	str	r2, [sp, #4]
 80197b0:	9a02      	ldr	r2, [sp, #8]
 80197b2:	9303      	str	r3, [sp, #12]
 80197b4:	429a      	cmp	r2, r3
 80197b6:	d80c      	bhi.n	80197d2 <__multiply+0x9e>
 80197b8:	2e00      	cmp	r6, #0
 80197ba:	dd03      	ble.n	80197c4 <__multiply+0x90>
 80197bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d05b      	beq.n	801987c <__multiply+0x148>
 80197c4:	6106      	str	r6, [r0, #16]
 80197c6:	b005      	add	sp, #20
 80197c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197cc:	f843 2b04 	str.w	r2, [r3], #4
 80197d0:	e7d8      	b.n	8019784 <__multiply+0x50>
 80197d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80197d6:	f1ba 0f00 	cmp.w	sl, #0
 80197da:	d024      	beq.n	8019826 <__multiply+0xf2>
 80197dc:	f104 0e14 	add.w	lr, r4, #20
 80197e0:	46a9      	mov	r9, r5
 80197e2:	f04f 0c00 	mov.w	ip, #0
 80197e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80197ea:	f8d9 1000 	ldr.w	r1, [r9]
 80197ee:	fa1f fb82 	uxth.w	fp, r2
 80197f2:	b289      	uxth	r1, r1
 80197f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80197f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80197fc:	f8d9 2000 	ldr.w	r2, [r9]
 8019800:	4461      	add	r1, ip
 8019802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019806:	fb0a c20b 	mla	r2, sl, fp, ip
 801980a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801980e:	b289      	uxth	r1, r1
 8019810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019814:	4577      	cmp	r7, lr
 8019816:	f849 1b04 	str.w	r1, [r9], #4
 801981a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801981e:	d8e2      	bhi.n	80197e6 <__multiply+0xb2>
 8019820:	9a01      	ldr	r2, [sp, #4]
 8019822:	f845 c002 	str.w	ip, [r5, r2]
 8019826:	9a03      	ldr	r2, [sp, #12]
 8019828:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801982c:	3304      	adds	r3, #4
 801982e:	f1b9 0f00 	cmp.w	r9, #0
 8019832:	d021      	beq.n	8019878 <__multiply+0x144>
 8019834:	6829      	ldr	r1, [r5, #0]
 8019836:	f104 0c14 	add.w	ip, r4, #20
 801983a:	46ae      	mov	lr, r5
 801983c:	f04f 0a00 	mov.w	sl, #0
 8019840:	f8bc b000 	ldrh.w	fp, [ip]
 8019844:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019848:	fb09 220b 	mla	r2, r9, fp, r2
 801984c:	4452      	add	r2, sl
 801984e:	b289      	uxth	r1, r1
 8019850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019854:	f84e 1b04 	str.w	r1, [lr], #4
 8019858:	f85c 1b04 	ldr.w	r1, [ip], #4
 801985c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019860:	f8be 1000 	ldrh.w	r1, [lr]
 8019864:	fb09 110a 	mla	r1, r9, sl, r1
 8019868:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801986c:	4567      	cmp	r7, ip
 801986e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019872:	d8e5      	bhi.n	8019840 <__multiply+0x10c>
 8019874:	9a01      	ldr	r2, [sp, #4]
 8019876:	50a9      	str	r1, [r5, r2]
 8019878:	3504      	adds	r5, #4
 801987a:	e799      	b.n	80197b0 <__multiply+0x7c>
 801987c:	3e01      	subs	r6, #1
 801987e:	e79b      	b.n	80197b8 <__multiply+0x84>
 8019880:	0801ab2c 	.word	0x0801ab2c
 8019884:	0801ab3d 	.word	0x0801ab3d

08019888 <__pow5mult>:
 8019888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801988c:	4615      	mov	r5, r2
 801988e:	f012 0203 	ands.w	r2, r2, #3
 8019892:	4606      	mov	r6, r0
 8019894:	460f      	mov	r7, r1
 8019896:	d007      	beq.n	80198a8 <__pow5mult+0x20>
 8019898:	4c25      	ldr	r4, [pc, #148]	; (8019930 <__pow5mult+0xa8>)
 801989a:	3a01      	subs	r2, #1
 801989c:	2300      	movs	r3, #0
 801989e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80198a2:	f7ff fe9d 	bl	80195e0 <__multadd>
 80198a6:	4607      	mov	r7, r0
 80198a8:	10ad      	asrs	r5, r5, #2
 80198aa:	d03d      	beq.n	8019928 <__pow5mult+0xa0>
 80198ac:	69f4      	ldr	r4, [r6, #28]
 80198ae:	b97c      	cbnz	r4, 80198d0 <__pow5mult+0x48>
 80198b0:	2010      	movs	r0, #16
 80198b2:	f7ff fd7f 	bl	80193b4 <malloc>
 80198b6:	4602      	mov	r2, r0
 80198b8:	61f0      	str	r0, [r6, #28]
 80198ba:	b928      	cbnz	r0, 80198c8 <__pow5mult+0x40>
 80198bc:	4b1d      	ldr	r3, [pc, #116]	; (8019934 <__pow5mult+0xac>)
 80198be:	481e      	ldr	r0, [pc, #120]	; (8019938 <__pow5mult+0xb0>)
 80198c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80198c4:	f000 fd9e 	bl	801a404 <__assert_func>
 80198c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80198cc:	6004      	str	r4, [r0, #0]
 80198ce:	60c4      	str	r4, [r0, #12]
 80198d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80198d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80198d8:	b94c      	cbnz	r4, 80198ee <__pow5mult+0x66>
 80198da:	f240 2171 	movw	r1, #625	; 0x271
 80198de:	4630      	mov	r0, r6
 80198e0:	f7ff ff12 	bl	8019708 <__i2b>
 80198e4:	2300      	movs	r3, #0
 80198e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80198ea:	4604      	mov	r4, r0
 80198ec:	6003      	str	r3, [r0, #0]
 80198ee:	f04f 0900 	mov.w	r9, #0
 80198f2:	07eb      	lsls	r3, r5, #31
 80198f4:	d50a      	bpl.n	801990c <__pow5mult+0x84>
 80198f6:	4639      	mov	r1, r7
 80198f8:	4622      	mov	r2, r4
 80198fa:	4630      	mov	r0, r6
 80198fc:	f7ff ff1a 	bl	8019734 <__multiply>
 8019900:	4639      	mov	r1, r7
 8019902:	4680      	mov	r8, r0
 8019904:	4630      	mov	r0, r6
 8019906:	f7ff fe49 	bl	801959c <_Bfree>
 801990a:	4647      	mov	r7, r8
 801990c:	106d      	asrs	r5, r5, #1
 801990e:	d00b      	beq.n	8019928 <__pow5mult+0xa0>
 8019910:	6820      	ldr	r0, [r4, #0]
 8019912:	b938      	cbnz	r0, 8019924 <__pow5mult+0x9c>
 8019914:	4622      	mov	r2, r4
 8019916:	4621      	mov	r1, r4
 8019918:	4630      	mov	r0, r6
 801991a:	f7ff ff0b 	bl	8019734 <__multiply>
 801991e:	6020      	str	r0, [r4, #0]
 8019920:	f8c0 9000 	str.w	r9, [r0]
 8019924:	4604      	mov	r4, r0
 8019926:	e7e4      	b.n	80198f2 <__pow5mult+0x6a>
 8019928:	4638      	mov	r0, r7
 801992a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801992e:	bf00      	nop
 8019930:	0801ac88 	.word	0x0801ac88
 8019934:	0801aabd 	.word	0x0801aabd
 8019938:	0801ab3d 	.word	0x0801ab3d

0801993c <__lshift>:
 801993c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019940:	460c      	mov	r4, r1
 8019942:	6849      	ldr	r1, [r1, #4]
 8019944:	6923      	ldr	r3, [r4, #16]
 8019946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801994a:	68a3      	ldr	r3, [r4, #8]
 801994c:	4607      	mov	r7, r0
 801994e:	4691      	mov	r9, r2
 8019950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019954:	f108 0601 	add.w	r6, r8, #1
 8019958:	42b3      	cmp	r3, r6
 801995a:	db0b      	blt.n	8019974 <__lshift+0x38>
 801995c:	4638      	mov	r0, r7
 801995e:	f7ff fddd 	bl	801951c <_Balloc>
 8019962:	4605      	mov	r5, r0
 8019964:	b948      	cbnz	r0, 801997a <__lshift+0x3e>
 8019966:	4602      	mov	r2, r0
 8019968:	4b28      	ldr	r3, [pc, #160]	; (8019a0c <__lshift+0xd0>)
 801996a:	4829      	ldr	r0, [pc, #164]	; (8019a10 <__lshift+0xd4>)
 801996c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019970:	f000 fd48 	bl	801a404 <__assert_func>
 8019974:	3101      	adds	r1, #1
 8019976:	005b      	lsls	r3, r3, #1
 8019978:	e7ee      	b.n	8019958 <__lshift+0x1c>
 801997a:	2300      	movs	r3, #0
 801997c:	f100 0114 	add.w	r1, r0, #20
 8019980:	f100 0210 	add.w	r2, r0, #16
 8019984:	4618      	mov	r0, r3
 8019986:	4553      	cmp	r3, sl
 8019988:	db33      	blt.n	80199f2 <__lshift+0xb6>
 801998a:	6920      	ldr	r0, [r4, #16]
 801998c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019990:	f104 0314 	add.w	r3, r4, #20
 8019994:	f019 091f 	ands.w	r9, r9, #31
 8019998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801999c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80199a0:	d02b      	beq.n	80199fa <__lshift+0xbe>
 80199a2:	f1c9 0e20 	rsb	lr, r9, #32
 80199a6:	468a      	mov	sl, r1
 80199a8:	2200      	movs	r2, #0
 80199aa:	6818      	ldr	r0, [r3, #0]
 80199ac:	fa00 f009 	lsl.w	r0, r0, r9
 80199b0:	4310      	orrs	r0, r2
 80199b2:	f84a 0b04 	str.w	r0, [sl], #4
 80199b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80199ba:	459c      	cmp	ip, r3
 80199bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80199c0:	d8f3      	bhi.n	80199aa <__lshift+0x6e>
 80199c2:	ebac 0304 	sub.w	r3, ip, r4
 80199c6:	3b15      	subs	r3, #21
 80199c8:	f023 0303 	bic.w	r3, r3, #3
 80199cc:	3304      	adds	r3, #4
 80199ce:	f104 0015 	add.w	r0, r4, #21
 80199d2:	4584      	cmp	ip, r0
 80199d4:	bf38      	it	cc
 80199d6:	2304      	movcc	r3, #4
 80199d8:	50ca      	str	r2, [r1, r3]
 80199da:	b10a      	cbz	r2, 80199e0 <__lshift+0xa4>
 80199dc:	f108 0602 	add.w	r6, r8, #2
 80199e0:	3e01      	subs	r6, #1
 80199e2:	4638      	mov	r0, r7
 80199e4:	612e      	str	r6, [r5, #16]
 80199e6:	4621      	mov	r1, r4
 80199e8:	f7ff fdd8 	bl	801959c <_Bfree>
 80199ec:	4628      	mov	r0, r5
 80199ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80199f6:	3301      	adds	r3, #1
 80199f8:	e7c5      	b.n	8019986 <__lshift+0x4a>
 80199fa:	3904      	subs	r1, #4
 80199fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a00:	f841 2f04 	str.w	r2, [r1, #4]!
 8019a04:	459c      	cmp	ip, r3
 8019a06:	d8f9      	bhi.n	80199fc <__lshift+0xc0>
 8019a08:	e7ea      	b.n	80199e0 <__lshift+0xa4>
 8019a0a:	bf00      	nop
 8019a0c:	0801ab2c 	.word	0x0801ab2c
 8019a10:	0801ab3d 	.word	0x0801ab3d

08019a14 <__mcmp>:
 8019a14:	b530      	push	{r4, r5, lr}
 8019a16:	6902      	ldr	r2, [r0, #16]
 8019a18:	690c      	ldr	r4, [r1, #16]
 8019a1a:	1b12      	subs	r2, r2, r4
 8019a1c:	d10e      	bne.n	8019a3c <__mcmp+0x28>
 8019a1e:	f100 0314 	add.w	r3, r0, #20
 8019a22:	3114      	adds	r1, #20
 8019a24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019a28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019a2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019a30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019a34:	42a5      	cmp	r5, r4
 8019a36:	d003      	beq.n	8019a40 <__mcmp+0x2c>
 8019a38:	d305      	bcc.n	8019a46 <__mcmp+0x32>
 8019a3a:	2201      	movs	r2, #1
 8019a3c:	4610      	mov	r0, r2
 8019a3e:	bd30      	pop	{r4, r5, pc}
 8019a40:	4283      	cmp	r3, r0
 8019a42:	d3f3      	bcc.n	8019a2c <__mcmp+0x18>
 8019a44:	e7fa      	b.n	8019a3c <__mcmp+0x28>
 8019a46:	f04f 32ff 	mov.w	r2, #4294967295
 8019a4a:	e7f7      	b.n	8019a3c <__mcmp+0x28>

08019a4c <__mdiff>:
 8019a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a50:	460c      	mov	r4, r1
 8019a52:	4606      	mov	r6, r0
 8019a54:	4611      	mov	r1, r2
 8019a56:	4620      	mov	r0, r4
 8019a58:	4690      	mov	r8, r2
 8019a5a:	f7ff ffdb 	bl	8019a14 <__mcmp>
 8019a5e:	1e05      	subs	r5, r0, #0
 8019a60:	d110      	bne.n	8019a84 <__mdiff+0x38>
 8019a62:	4629      	mov	r1, r5
 8019a64:	4630      	mov	r0, r6
 8019a66:	f7ff fd59 	bl	801951c <_Balloc>
 8019a6a:	b930      	cbnz	r0, 8019a7a <__mdiff+0x2e>
 8019a6c:	4b3a      	ldr	r3, [pc, #232]	; (8019b58 <__mdiff+0x10c>)
 8019a6e:	4602      	mov	r2, r0
 8019a70:	f240 2137 	movw	r1, #567	; 0x237
 8019a74:	4839      	ldr	r0, [pc, #228]	; (8019b5c <__mdiff+0x110>)
 8019a76:	f000 fcc5 	bl	801a404 <__assert_func>
 8019a7a:	2301      	movs	r3, #1
 8019a7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a84:	bfa4      	itt	ge
 8019a86:	4643      	movge	r3, r8
 8019a88:	46a0      	movge	r8, r4
 8019a8a:	4630      	mov	r0, r6
 8019a8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019a90:	bfa6      	itte	ge
 8019a92:	461c      	movge	r4, r3
 8019a94:	2500      	movge	r5, #0
 8019a96:	2501      	movlt	r5, #1
 8019a98:	f7ff fd40 	bl	801951c <_Balloc>
 8019a9c:	b920      	cbnz	r0, 8019aa8 <__mdiff+0x5c>
 8019a9e:	4b2e      	ldr	r3, [pc, #184]	; (8019b58 <__mdiff+0x10c>)
 8019aa0:	4602      	mov	r2, r0
 8019aa2:	f240 2145 	movw	r1, #581	; 0x245
 8019aa6:	e7e5      	b.n	8019a74 <__mdiff+0x28>
 8019aa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019aac:	6926      	ldr	r6, [r4, #16]
 8019aae:	60c5      	str	r5, [r0, #12]
 8019ab0:	f104 0914 	add.w	r9, r4, #20
 8019ab4:	f108 0514 	add.w	r5, r8, #20
 8019ab8:	f100 0e14 	add.w	lr, r0, #20
 8019abc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019ac0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019ac4:	f108 0210 	add.w	r2, r8, #16
 8019ac8:	46f2      	mov	sl, lr
 8019aca:	2100      	movs	r1, #0
 8019acc:	f859 3b04 	ldr.w	r3, [r9], #4
 8019ad0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019ad4:	fa11 f88b 	uxtah	r8, r1, fp
 8019ad8:	b299      	uxth	r1, r3
 8019ada:	0c1b      	lsrs	r3, r3, #16
 8019adc:	eba8 0801 	sub.w	r8, r8, r1
 8019ae0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019ae4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019ae8:	fa1f f888 	uxth.w	r8, r8
 8019aec:	1419      	asrs	r1, r3, #16
 8019aee:	454e      	cmp	r6, r9
 8019af0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019af4:	f84a 3b04 	str.w	r3, [sl], #4
 8019af8:	d8e8      	bhi.n	8019acc <__mdiff+0x80>
 8019afa:	1b33      	subs	r3, r6, r4
 8019afc:	3b15      	subs	r3, #21
 8019afe:	f023 0303 	bic.w	r3, r3, #3
 8019b02:	3304      	adds	r3, #4
 8019b04:	3415      	adds	r4, #21
 8019b06:	42a6      	cmp	r6, r4
 8019b08:	bf38      	it	cc
 8019b0a:	2304      	movcc	r3, #4
 8019b0c:	441d      	add	r5, r3
 8019b0e:	4473      	add	r3, lr
 8019b10:	469e      	mov	lr, r3
 8019b12:	462e      	mov	r6, r5
 8019b14:	4566      	cmp	r6, ip
 8019b16:	d30e      	bcc.n	8019b36 <__mdiff+0xea>
 8019b18:	f10c 0203 	add.w	r2, ip, #3
 8019b1c:	1b52      	subs	r2, r2, r5
 8019b1e:	f022 0203 	bic.w	r2, r2, #3
 8019b22:	3d03      	subs	r5, #3
 8019b24:	45ac      	cmp	ip, r5
 8019b26:	bf38      	it	cc
 8019b28:	2200      	movcc	r2, #0
 8019b2a:	4413      	add	r3, r2
 8019b2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019b30:	b17a      	cbz	r2, 8019b52 <__mdiff+0x106>
 8019b32:	6107      	str	r7, [r0, #16]
 8019b34:	e7a4      	b.n	8019a80 <__mdiff+0x34>
 8019b36:	f856 8b04 	ldr.w	r8, [r6], #4
 8019b3a:	fa11 f288 	uxtah	r2, r1, r8
 8019b3e:	1414      	asrs	r4, r2, #16
 8019b40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019b44:	b292      	uxth	r2, r2
 8019b46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019b4a:	f84e 2b04 	str.w	r2, [lr], #4
 8019b4e:	1421      	asrs	r1, r4, #16
 8019b50:	e7e0      	b.n	8019b14 <__mdiff+0xc8>
 8019b52:	3f01      	subs	r7, #1
 8019b54:	e7ea      	b.n	8019b2c <__mdiff+0xe0>
 8019b56:	bf00      	nop
 8019b58:	0801ab2c 	.word	0x0801ab2c
 8019b5c:	0801ab3d 	.word	0x0801ab3d

08019b60 <__d2b>:
 8019b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019b64:	460f      	mov	r7, r1
 8019b66:	2101      	movs	r1, #1
 8019b68:	ec59 8b10 	vmov	r8, r9, d0
 8019b6c:	4616      	mov	r6, r2
 8019b6e:	f7ff fcd5 	bl	801951c <_Balloc>
 8019b72:	4604      	mov	r4, r0
 8019b74:	b930      	cbnz	r0, 8019b84 <__d2b+0x24>
 8019b76:	4602      	mov	r2, r0
 8019b78:	4b24      	ldr	r3, [pc, #144]	; (8019c0c <__d2b+0xac>)
 8019b7a:	4825      	ldr	r0, [pc, #148]	; (8019c10 <__d2b+0xb0>)
 8019b7c:	f240 310f 	movw	r1, #783	; 0x30f
 8019b80:	f000 fc40 	bl	801a404 <__assert_func>
 8019b84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019b88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019b8c:	bb2d      	cbnz	r5, 8019bda <__d2b+0x7a>
 8019b8e:	9301      	str	r3, [sp, #4]
 8019b90:	f1b8 0300 	subs.w	r3, r8, #0
 8019b94:	d026      	beq.n	8019be4 <__d2b+0x84>
 8019b96:	4668      	mov	r0, sp
 8019b98:	9300      	str	r3, [sp, #0]
 8019b9a:	f7ff fd87 	bl	80196ac <__lo0bits>
 8019b9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019ba2:	b1e8      	cbz	r0, 8019be0 <__d2b+0x80>
 8019ba4:	f1c0 0320 	rsb	r3, r0, #32
 8019ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8019bac:	430b      	orrs	r3, r1
 8019bae:	40c2      	lsrs	r2, r0
 8019bb0:	6163      	str	r3, [r4, #20]
 8019bb2:	9201      	str	r2, [sp, #4]
 8019bb4:	9b01      	ldr	r3, [sp, #4]
 8019bb6:	61a3      	str	r3, [r4, #24]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	bf14      	ite	ne
 8019bbc:	2202      	movne	r2, #2
 8019bbe:	2201      	moveq	r2, #1
 8019bc0:	6122      	str	r2, [r4, #16]
 8019bc2:	b1bd      	cbz	r5, 8019bf4 <__d2b+0x94>
 8019bc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019bc8:	4405      	add	r5, r0
 8019bca:	603d      	str	r5, [r7, #0]
 8019bcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019bd0:	6030      	str	r0, [r6, #0]
 8019bd2:	4620      	mov	r0, r4
 8019bd4:	b003      	add	sp, #12
 8019bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019bde:	e7d6      	b.n	8019b8e <__d2b+0x2e>
 8019be0:	6161      	str	r1, [r4, #20]
 8019be2:	e7e7      	b.n	8019bb4 <__d2b+0x54>
 8019be4:	a801      	add	r0, sp, #4
 8019be6:	f7ff fd61 	bl	80196ac <__lo0bits>
 8019bea:	9b01      	ldr	r3, [sp, #4]
 8019bec:	6163      	str	r3, [r4, #20]
 8019bee:	3020      	adds	r0, #32
 8019bf0:	2201      	movs	r2, #1
 8019bf2:	e7e5      	b.n	8019bc0 <__d2b+0x60>
 8019bf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019bf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019bfc:	6038      	str	r0, [r7, #0]
 8019bfe:	6918      	ldr	r0, [r3, #16]
 8019c00:	f7ff fd34 	bl	801966c <__hi0bits>
 8019c04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019c08:	e7e2      	b.n	8019bd0 <__d2b+0x70>
 8019c0a:	bf00      	nop
 8019c0c:	0801ab2c 	.word	0x0801ab2c
 8019c10:	0801ab3d 	.word	0x0801ab3d

08019c14 <__ssputs_r>:
 8019c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c18:	688e      	ldr	r6, [r1, #8]
 8019c1a:	461f      	mov	r7, r3
 8019c1c:	42be      	cmp	r6, r7
 8019c1e:	680b      	ldr	r3, [r1, #0]
 8019c20:	4682      	mov	sl, r0
 8019c22:	460c      	mov	r4, r1
 8019c24:	4690      	mov	r8, r2
 8019c26:	d82c      	bhi.n	8019c82 <__ssputs_r+0x6e>
 8019c28:	898a      	ldrh	r2, [r1, #12]
 8019c2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c2e:	d026      	beq.n	8019c7e <__ssputs_r+0x6a>
 8019c30:	6965      	ldr	r5, [r4, #20]
 8019c32:	6909      	ldr	r1, [r1, #16]
 8019c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c38:	eba3 0901 	sub.w	r9, r3, r1
 8019c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c40:	1c7b      	adds	r3, r7, #1
 8019c42:	444b      	add	r3, r9
 8019c44:	106d      	asrs	r5, r5, #1
 8019c46:	429d      	cmp	r5, r3
 8019c48:	bf38      	it	cc
 8019c4a:	461d      	movcc	r5, r3
 8019c4c:	0553      	lsls	r3, r2, #21
 8019c4e:	d527      	bpl.n	8019ca0 <__ssputs_r+0x8c>
 8019c50:	4629      	mov	r1, r5
 8019c52:	f7ff fbd7 	bl	8019404 <_malloc_r>
 8019c56:	4606      	mov	r6, r0
 8019c58:	b360      	cbz	r0, 8019cb4 <__ssputs_r+0xa0>
 8019c5a:	6921      	ldr	r1, [r4, #16]
 8019c5c:	464a      	mov	r2, r9
 8019c5e:	f7fe fcd3 	bl	8018608 <memcpy>
 8019c62:	89a3      	ldrh	r3, [r4, #12]
 8019c64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c6c:	81a3      	strh	r3, [r4, #12]
 8019c6e:	6126      	str	r6, [r4, #16]
 8019c70:	6165      	str	r5, [r4, #20]
 8019c72:	444e      	add	r6, r9
 8019c74:	eba5 0509 	sub.w	r5, r5, r9
 8019c78:	6026      	str	r6, [r4, #0]
 8019c7a:	60a5      	str	r5, [r4, #8]
 8019c7c:	463e      	mov	r6, r7
 8019c7e:	42be      	cmp	r6, r7
 8019c80:	d900      	bls.n	8019c84 <__ssputs_r+0x70>
 8019c82:	463e      	mov	r6, r7
 8019c84:	6820      	ldr	r0, [r4, #0]
 8019c86:	4632      	mov	r2, r6
 8019c88:	4641      	mov	r1, r8
 8019c8a:	f000 fb6f 	bl	801a36c <memmove>
 8019c8e:	68a3      	ldr	r3, [r4, #8]
 8019c90:	1b9b      	subs	r3, r3, r6
 8019c92:	60a3      	str	r3, [r4, #8]
 8019c94:	6823      	ldr	r3, [r4, #0]
 8019c96:	4433      	add	r3, r6
 8019c98:	6023      	str	r3, [r4, #0]
 8019c9a:	2000      	movs	r0, #0
 8019c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ca0:	462a      	mov	r2, r5
 8019ca2:	f000 fbf5 	bl	801a490 <_realloc_r>
 8019ca6:	4606      	mov	r6, r0
 8019ca8:	2800      	cmp	r0, #0
 8019caa:	d1e0      	bne.n	8019c6e <__ssputs_r+0x5a>
 8019cac:	6921      	ldr	r1, [r4, #16]
 8019cae:	4650      	mov	r0, sl
 8019cb0:	f7ff fb34 	bl	801931c <_free_r>
 8019cb4:	230c      	movs	r3, #12
 8019cb6:	f8ca 3000 	str.w	r3, [sl]
 8019cba:	89a3      	ldrh	r3, [r4, #12]
 8019cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cc0:	81a3      	strh	r3, [r4, #12]
 8019cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8019cc6:	e7e9      	b.n	8019c9c <__ssputs_r+0x88>

08019cc8 <_svfiprintf_r>:
 8019cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ccc:	4698      	mov	r8, r3
 8019cce:	898b      	ldrh	r3, [r1, #12]
 8019cd0:	061b      	lsls	r3, r3, #24
 8019cd2:	b09d      	sub	sp, #116	; 0x74
 8019cd4:	4607      	mov	r7, r0
 8019cd6:	460d      	mov	r5, r1
 8019cd8:	4614      	mov	r4, r2
 8019cda:	d50e      	bpl.n	8019cfa <_svfiprintf_r+0x32>
 8019cdc:	690b      	ldr	r3, [r1, #16]
 8019cde:	b963      	cbnz	r3, 8019cfa <_svfiprintf_r+0x32>
 8019ce0:	2140      	movs	r1, #64	; 0x40
 8019ce2:	f7ff fb8f 	bl	8019404 <_malloc_r>
 8019ce6:	6028      	str	r0, [r5, #0]
 8019ce8:	6128      	str	r0, [r5, #16]
 8019cea:	b920      	cbnz	r0, 8019cf6 <_svfiprintf_r+0x2e>
 8019cec:	230c      	movs	r3, #12
 8019cee:	603b      	str	r3, [r7, #0]
 8019cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8019cf4:	e0d0      	b.n	8019e98 <_svfiprintf_r+0x1d0>
 8019cf6:	2340      	movs	r3, #64	; 0x40
 8019cf8:	616b      	str	r3, [r5, #20]
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8019cfe:	2320      	movs	r3, #32
 8019d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d08:	2330      	movs	r3, #48	; 0x30
 8019d0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019eb0 <_svfiprintf_r+0x1e8>
 8019d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d12:	f04f 0901 	mov.w	r9, #1
 8019d16:	4623      	mov	r3, r4
 8019d18:	469a      	mov	sl, r3
 8019d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d1e:	b10a      	cbz	r2, 8019d24 <_svfiprintf_r+0x5c>
 8019d20:	2a25      	cmp	r2, #37	; 0x25
 8019d22:	d1f9      	bne.n	8019d18 <_svfiprintf_r+0x50>
 8019d24:	ebba 0b04 	subs.w	fp, sl, r4
 8019d28:	d00b      	beq.n	8019d42 <_svfiprintf_r+0x7a>
 8019d2a:	465b      	mov	r3, fp
 8019d2c:	4622      	mov	r2, r4
 8019d2e:	4629      	mov	r1, r5
 8019d30:	4638      	mov	r0, r7
 8019d32:	f7ff ff6f 	bl	8019c14 <__ssputs_r>
 8019d36:	3001      	adds	r0, #1
 8019d38:	f000 80a9 	beq.w	8019e8e <_svfiprintf_r+0x1c6>
 8019d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d3e:	445a      	add	r2, fp
 8019d40:	9209      	str	r2, [sp, #36]	; 0x24
 8019d42:	f89a 3000 	ldrb.w	r3, [sl]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	f000 80a1 	beq.w	8019e8e <_svfiprintf_r+0x1c6>
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8019d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d56:	f10a 0a01 	add.w	sl, sl, #1
 8019d5a:	9304      	str	r3, [sp, #16]
 8019d5c:	9307      	str	r3, [sp, #28]
 8019d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d62:	931a      	str	r3, [sp, #104]	; 0x68
 8019d64:	4654      	mov	r4, sl
 8019d66:	2205      	movs	r2, #5
 8019d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d6c:	4850      	ldr	r0, [pc, #320]	; (8019eb0 <_svfiprintf_r+0x1e8>)
 8019d6e:	f7e6 fa5f 	bl	8000230 <memchr>
 8019d72:	9a04      	ldr	r2, [sp, #16]
 8019d74:	b9d8      	cbnz	r0, 8019dae <_svfiprintf_r+0xe6>
 8019d76:	06d0      	lsls	r0, r2, #27
 8019d78:	bf44      	itt	mi
 8019d7a:	2320      	movmi	r3, #32
 8019d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d80:	0711      	lsls	r1, r2, #28
 8019d82:	bf44      	itt	mi
 8019d84:	232b      	movmi	r3, #43	; 0x2b
 8019d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8019d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8019d90:	d015      	beq.n	8019dbe <_svfiprintf_r+0xf6>
 8019d92:	9a07      	ldr	r2, [sp, #28]
 8019d94:	4654      	mov	r4, sl
 8019d96:	2000      	movs	r0, #0
 8019d98:	f04f 0c0a 	mov.w	ip, #10
 8019d9c:	4621      	mov	r1, r4
 8019d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019da2:	3b30      	subs	r3, #48	; 0x30
 8019da4:	2b09      	cmp	r3, #9
 8019da6:	d94d      	bls.n	8019e44 <_svfiprintf_r+0x17c>
 8019da8:	b1b0      	cbz	r0, 8019dd8 <_svfiprintf_r+0x110>
 8019daa:	9207      	str	r2, [sp, #28]
 8019dac:	e014      	b.n	8019dd8 <_svfiprintf_r+0x110>
 8019dae:	eba0 0308 	sub.w	r3, r0, r8
 8019db2:	fa09 f303 	lsl.w	r3, r9, r3
 8019db6:	4313      	orrs	r3, r2
 8019db8:	9304      	str	r3, [sp, #16]
 8019dba:	46a2      	mov	sl, r4
 8019dbc:	e7d2      	b.n	8019d64 <_svfiprintf_r+0x9c>
 8019dbe:	9b03      	ldr	r3, [sp, #12]
 8019dc0:	1d19      	adds	r1, r3, #4
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	9103      	str	r1, [sp, #12]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	bfbb      	ittet	lt
 8019dca:	425b      	neglt	r3, r3
 8019dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8019dd0:	9307      	strge	r3, [sp, #28]
 8019dd2:	9307      	strlt	r3, [sp, #28]
 8019dd4:	bfb8      	it	lt
 8019dd6:	9204      	strlt	r2, [sp, #16]
 8019dd8:	7823      	ldrb	r3, [r4, #0]
 8019dda:	2b2e      	cmp	r3, #46	; 0x2e
 8019ddc:	d10c      	bne.n	8019df8 <_svfiprintf_r+0x130>
 8019dde:	7863      	ldrb	r3, [r4, #1]
 8019de0:	2b2a      	cmp	r3, #42	; 0x2a
 8019de2:	d134      	bne.n	8019e4e <_svfiprintf_r+0x186>
 8019de4:	9b03      	ldr	r3, [sp, #12]
 8019de6:	1d1a      	adds	r2, r3, #4
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	9203      	str	r2, [sp, #12]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	bfb8      	it	lt
 8019df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019df4:	3402      	adds	r4, #2
 8019df6:	9305      	str	r3, [sp, #20]
 8019df8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019ec0 <_svfiprintf_r+0x1f8>
 8019dfc:	7821      	ldrb	r1, [r4, #0]
 8019dfe:	2203      	movs	r2, #3
 8019e00:	4650      	mov	r0, sl
 8019e02:	f7e6 fa15 	bl	8000230 <memchr>
 8019e06:	b138      	cbz	r0, 8019e18 <_svfiprintf_r+0x150>
 8019e08:	9b04      	ldr	r3, [sp, #16]
 8019e0a:	eba0 000a 	sub.w	r0, r0, sl
 8019e0e:	2240      	movs	r2, #64	; 0x40
 8019e10:	4082      	lsls	r2, r0
 8019e12:	4313      	orrs	r3, r2
 8019e14:	3401      	adds	r4, #1
 8019e16:	9304      	str	r3, [sp, #16]
 8019e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e1c:	4825      	ldr	r0, [pc, #148]	; (8019eb4 <_svfiprintf_r+0x1ec>)
 8019e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e22:	2206      	movs	r2, #6
 8019e24:	f7e6 fa04 	bl	8000230 <memchr>
 8019e28:	2800      	cmp	r0, #0
 8019e2a:	d038      	beq.n	8019e9e <_svfiprintf_r+0x1d6>
 8019e2c:	4b22      	ldr	r3, [pc, #136]	; (8019eb8 <_svfiprintf_r+0x1f0>)
 8019e2e:	bb1b      	cbnz	r3, 8019e78 <_svfiprintf_r+0x1b0>
 8019e30:	9b03      	ldr	r3, [sp, #12]
 8019e32:	3307      	adds	r3, #7
 8019e34:	f023 0307 	bic.w	r3, r3, #7
 8019e38:	3308      	adds	r3, #8
 8019e3a:	9303      	str	r3, [sp, #12]
 8019e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e3e:	4433      	add	r3, r6
 8019e40:	9309      	str	r3, [sp, #36]	; 0x24
 8019e42:	e768      	b.n	8019d16 <_svfiprintf_r+0x4e>
 8019e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e48:	460c      	mov	r4, r1
 8019e4a:	2001      	movs	r0, #1
 8019e4c:	e7a6      	b.n	8019d9c <_svfiprintf_r+0xd4>
 8019e4e:	2300      	movs	r3, #0
 8019e50:	3401      	adds	r4, #1
 8019e52:	9305      	str	r3, [sp, #20]
 8019e54:	4619      	mov	r1, r3
 8019e56:	f04f 0c0a 	mov.w	ip, #10
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e60:	3a30      	subs	r2, #48	; 0x30
 8019e62:	2a09      	cmp	r2, #9
 8019e64:	d903      	bls.n	8019e6e <_svfiprintf_r+0x1a6>
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d0c6      	beq.n	8019df8 <_svfiprintf_r+0x130>
 8019e6a:	9105      	str	r1, [sp, #20]
 8019e6c:	e7c4      	b.n	8019df8 <_svfiprintf_r+0x130>
 8019e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e72:	4604      	mov	r4, r0
 8019e74:	2301      	movs	r3, #1
 8019e76:	e7f0      	b.n	8019e5a <_svfiprintf_r+0x192>
 8019e78:	ab03      	add	r3, sp, #12
 8019e7a:	9300      	str	r3, [sp, #0]
 8019e7c:	462a      	mov	r2, r5
 8019e7e:	4b0f      	ldr	r3, [pc, #60]	; (8019ebc <_svfiprintf_r+0x1f4>)
 8019e80:	a904      	add	r1, sp, #16
 8019e82:	4638      	mov	r0, r7
 8019e84:	f7fd fd10 	bl	80178a8 <_printf_float>
 8019e88:	1c42      	adds	r2, r0, #1
 8019e8a:	4606      	mov	r6, r0
 8019e8c:	d1d6      	bne.n	8019e3c <_svfiprintf_r+0x174>
 8019e8e:	89ab      	ldrh	r3, [r5, #12]
 8019e90:	065b      	lsls	r3, r3, #25
 8019e92:	f53f af2d 	bmi.w	8019cf0 <_svfiprintf_r+0x28>
 8019e96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e98:	b01d      	add	sp, #116	; 0x74
 8019e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e9e:	ab03      	add	r3, sp, #12
 8019ea0:	9300      	str	r3, [sp, #0]
 8019ea2:	462a      	mov	r2, r5
 8019ea4:	4b05      	ldr	r3, [pc, #20]	; (8019ebc <_svfiprintf_r+0x1f4>)
 8019ea6:	a904      	add	r1, sp, #16
 8019ea8:	4638      	mov	r0, r7
 8019eaa:	f7fd ffa1 	bl	8017df0 <_printf_i>
 8019eae:	e7eb      	b.n	8019e88 <_svfiprintf_r+0x1c0>
 8019eb0:	0801ac94 	.word	0x0801ac94
 8019eb4:	0801ac9e 	.word	0x0801ac9e
 8019eb8:	080178a9 	.word	0x080178a9
 8019ebc:	08019c15 	.word	0x08019c15
 8019ec0:	0801ac9a 	.word	0x0801ac9a

08019ec4 <__sfputc_r>:
 8019ec4:	6893      	ldr	r3, [r2, #8]
 8019ec6:	3b01      	subs	r3, #1
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	b410      	push	{r4}
 8019ecc:	6093      	str	r3, [r2, #8]
 8019ece:	da08      	bge.n	8019ee2 <__sfputc_r+0x1e>
 8019ed0:	6994      	ldr	r4, [r2, #24]
 8019ed2:	42a3      	cmp	r3, r4
 8019ed4:	db01      	blt.n	8019eda <__sfputc_r+0x16>
 8019ed6:	290a      	cmp	r1, #10
 8019ed8:	d103      	bne.n	8019ee2 <__sfputc_r+0x1e>
 8019eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ede:	f7fe ba2a 	b.w	8018336 <__swbuf_r>
 8019ee2:	6813      	ldr	r3, [r2, #0]
 8019ee4:	1c58      	adds	r0, r3, #1
 8019ee6:	6010      	str	r0, [r2, #0]
 8019ee8:	7019      	strb	r1, [r3, #0]
 8019eea:	4608      	mov	r0, r1
 8019eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ef0:	4770      	bx	lr

08019ef2 <__sfputs_r>:
 8019ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ef4:	4606      	mov	r6, r0
 8019ef6:	460f      	mov	r7, r1
 8019ef8:	4614      	mov	r4, r2
 8019efa:	18d5      	adds	r5, r2, r3
 8019efc:	42ac      	cmp	r4, r5
 8019efe:	d101      	bne.n	8019f04 <__sfputs_r+0x12>
 8019f00:	2000      	movs	r0, #0
 8019f02:	e007      	b.n	8019f14 <__sfputs_r+0x22>
 8019f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f08:	463a      	mov	r2, r7
 8019f0a:	4630      	mov	r0, r6
 8019f0c:	f7ff ffda 	bl	8019ec4 <__sfputc_r>
 8019f10:	1c43      	adds	r3, r0, #1
 8019f12:	d1f3      	bne.n	8019efc <__sfputs_r+0xa>
 8019f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f18 <_vfiprintf_r>:
 8019f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f1c:	460d      	mov	r5, r1
 8019f1e:	b09d      	sub	sp, #116	; 0x74
 8019f20:	4614      	mov	r4, r2
 8019f22:	4698      	mov	r8, r3
 8019f24:	4606      	mov	r6, r0
 8019f26:	b118      	cbz	r0, 8019f30 <_vfiprintf_r+0x18>
 8019f28:	6a03      	ldr	r3, [r0, #32]
 8019f2a:	b90b      	cbnz	r3, 8019f30 <_vfiprintf_r+0x18>
 8019f2c:	f7fe f8fc 	bl	8018128 <__sinit>
 8019f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f32:	07d9      	lsls	r1, r3, #31
 8019f34:	d405      	bmi.n	8019f42 <_vfiprintf_r+0x2a>
 8019f36:	89ab      	ldrh	r3, [r5, #12]
 8019f38:	059a      	lsls	r2, r3, #22
 8019f3a:	d402      	bmi.n	8019f42 <_vfiprintf_r+0x2a>
 8019f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f3e:	f7fe fb61 	bl	8018604 <__retarget_lock_acquire_recursive>
 8019f42:	89ab      	ldrh	r3, [r5, #12]
 8019f44:	071b      	lsls	r3, r3, #28
 8019f46:	d501      	bpl.n	8019f4c <_vfiprintf_r+0x34>
 8019f48:	692b      	ldr	r3, [r5, #16]
 8019f4a:	b99b      	cbnz	r3, 8019f74 <_vfiprintf_r+0x5c>
 8019f4c:	4629      	mov	r1, r5
 8019f4e:	4630      	mov	r0, r6
 8019f50:	f7fe fa2e 	bl	80183b0 <__swsetup_r>
 8019f54:	b170      	cbz	r0, 8019f74 <_vfiprintf_r+0x5c>
 8019f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f58:	07dc      	lsls	r4, r3, #31
 8019f5a:	d504      	bpl.n	8019f66 <_vfiprintf_r+0x4e>
 8019f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f60:	b01d      	add	sp, #116	; 0x74
 8019f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f66:	89ab      	ldrh	r3, [r5, #12]
 8019f68:	0598      	lsls	r0, r3, #22
 8019f6a:	d4f7      	bmi.n	8019f5c <_vfiprintf_r+0x44>
 8019f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f6e:	f7fe fb4a 	bl	8018606 <__retarget_lock_release_recursive>
 8019f72:	e7f3      	b.n	8019f5c <_vfiprintf_r+0x44>
 8019f74:	2300      	movs	r3, #0
 8019f76:	9309      	str	r3, [sp, #36]	; 0x24
 8019f78:	2320      	movs	r3, #32
 8019f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f82:	2330      	movs	r3, #48	; 0x30
 8019f84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a138 <_vfiprintf_r+0x220>
 8019f88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f8c:	f04f 0901 	mov.w	r9, #1
 8019f90:	4623      	mov	r3, r4
 8019f92:	469a      	mov	sl, r3
 8019f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f98:	b10a      	cbz	r2, 8019f9e <_vfiprintf_r+0x86>
 8019f9a:	2a25      	cmp	r2, #37	; 0x25
 8019f9c:	d1f9      	bne.n	8019f92 <_vfiprintf_r+0x7a>
 8019f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8019fa2:	d00b      	beq.n	8019fbc <_vfiprintf_r+0xa4>
 8019fa4:	465b      	mov	r3, fp
 8019fa6:	4622      	mov	r2, r4
 8019fa8:	4629      	mov	r1, r5
 8019faa:	4630      	mov	r0, r6
 8019fac:	f7ff ffa1 	bl	8019ef2 <__sfputs_r>
 8019fb0:	3001      	adds	r0, #1
 8019fb2:	f000 80a9 	beq.w	801a108 <_vfiprintf_r+0x1f0>
 8019fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019fb8:	445a      	add	r2, fp
 8019fba:	9209      	str	r2, [sp, #36]	; 0x24
 8019fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	f000 80a1 	beq.w	801a108 <_vfiprintf_r+0x1f0>
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8019fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019fd0:	f10a 0a01 	add.w	sl, sl, #1
 8019fd4:	9304      	str	r3, [sp, #16]
 8019fd6:	9307      	str	r3, [sp, #28]
 8019fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8019fde:	4654      	mov	r4, sl
 8019fe0:	2205      	movs	r2, #5
 8019fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fe6:	4854      	ldr	r0, [pc, #336]	; (801a138 <_vfiprintf_r+0x220>)
 8019fe8:	f7e6 f922 	bl	8000230 <memchr>
 8019fec:	9a04      	ldr	r2, [sp, #16]
 8019fee:	b9d8      	cbnz	r0, 801a028 <_vfiprintf_r+0x110>
 8019ff0:	06d1      	lsls	r1, r2, #27
 8019ff2:	bf44      	itt	mi
 8019ff4:	2320      	movmi	r3, #32
 8019ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ffa:	0713      	lsls	r3, r2, #28
 8019ffc:	bf44      	itt	mi
 8019ffe:	232b      	movmi	r3, #43	; 0x2b
 801a000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a004:	f89a 3000 	ldrb.w	r3, [sl]
 801a008:	2b2a      	cmp	r3, #42	; 0x2a
 801a00a:	d015      	beq.n	801a038 <_vfiprintf_r+0x120>
 801a00c:	9a07      	ldr	r2, [sp, #28]
 801a00e:	4654      	mov	r4, sl
 801a010:	2000      	movs	r0, #0
 801a012:	f04f 0c0a 	mov.w	ip, #10
 801a016:	4621      	mov	r1, r4
 801a018:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a01c:	3b30      	subs	r3, #48	; 0x30
 801a01e:	2b09      	cmp	r3, #9
 801a020:	d94d      	bls.n	801a0be <_vfiprintf_r+0x1a6>
 801a022:	b1b0      	cbz	r0, 801a052 <_vfiprintf_r+0x13a>
 801a024:	9207      	str	r2, [sp, #28]
 801a026:	e014      	b.n	801a052 <_vfiprintf_r+0x13a>
 801a028:	eba0 0308 	sub.w	r3, r0, r8
 801a02c:	fa09 f303 	lsl.w	r3, r9, r3
 801a030:	4313      	orrs	r3, r2
 801a032:	9304      	str	r3, [sp, #16]
 801a034:	46a2      	mov	sl, r4
 801a036:	e7d2      	b.n	8019fde <_vfiprintf_r+0xc6>
 801a038:	9b03      	ldr	r3, [sp, #12]
 801a03a:	1d19      	adds	r1, r3, #4
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	9103      	str	r1, [sp, #12]
 801a040:	2b00      	cmp	r3, #0
 801a042:	bfbb      	ittet	lt
 801a044:	425b      	neglt	r3, r3
 801a046:	f042 0202 	orrlt.w	r2, r2, #2
 801a04a:	9307      	strge	r3, [sp, #28]
 801a04c:	9307      	strlt	r3, [sp, #28]
 801a04e:	bfb8      	it	lt
 801a050:	9204      	strlt	r2, [sp, #16]
 801a052:	7823      	ldrb	r3, [r4, #0]
 801a054:	2b2e      	cmp	r3, #46	; 0x2e
 801a056:	d10c      	bne.n	801a072 <_vfiprintf_r+0x15a>
 801a058:	7863      	ldrb	r3, [r4, #1]
 801a05a:	2b2a      	cmp	r3, #42	; 0x2a
 801a05c:	d134      	bne.n	801a0c8 <_vfiprintf_r+0x1b0>
 801a05e:	9b03      	ldr	r3, [sp, #12]
 801a060:	1d1a      	adds	r2, r3, #4
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	9203      	str	r2, [sp, #12]
 801a066:	2b00      	cmp	r3, #0
 801a068:	bfb8      	it	lt
 801a06a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a06e:	3402      	adds	r4, #2
 801a070:	9305      	str	r3, [sp, #20]
 801a072:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a148 <_vfiprintf_r+0x230>
 801a076:	7821      	ldrb	r1, [r4, #0]
 801a078:	2203      	movs	r2, #3
 801a07a:	4650      	mov	r0, sl
 801a07c:	f7e6 f8d8 	bl	8000230 <memchr>
 801a080:	b138      	cbz	r0, 801a092 <_vfiprintf_r+0x17a>
 801a082:	9b04      	ldr	r3, [sp, #16]
 801a084:	eba0 000a 	sub.w	r0, r0, sl
 801a088:	2240      	movs	r2, #64	; 0x40
 801a08a:	4082      	lsls	r2, r0
 801a08c:	4313      	orrs	r3, r2
 801a08e:	3401      	adds	r4, #1
 801a090:	9304      	str	r3, [sp, #16]
 801a092:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a096:	4829      	ldr	r0, [pc, #164]	; (801a13c <_vfiprintf_r+0x224>)
 801a098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a09c:	2206      	movs	r2, #6
 801a09e:	f7e6 f8c7 	bl	8000230 <memchr>
 801a0a2:	2800      	cmp	r0, #0
 801a0a4:	d03f      	beq.n	801a126 <_vfiprintf_r+0x20e>
 801a0a6:	4b26      	ldr	r3, [pc, #152]	; (801a140 <_vfiprintf_r+0x228>)
 801a0a8:	bb1b      	cbnz	r3, 801a0f2 <_vfiprintf_r+0x1da>
 801a0aa:	9b03      	ldr	r3, [sp, #12]
 801a0ac:	3307      	adds	r3, #7
 801a0ae:	f023 0307 	bic.w	r3, r3, #7
 801a0b2:	3308      	adds	r3, #8
 801a0b4:	9303      	str	r3, [sp, #12]
 801a0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0b8:	443b      	add	r3, r7
 801a0ba:	9309      	str	r3, [sp, #36]	; 0x24
 801a0bc:	e768      	b.n	8019f90 <_vfiprintf_r+0x78>
 801a0be:	fb0c 3202 	mla	r2, ip, r2, r3
 801a0c2:	460c      	mov	r4, r1
 801a0c4:	2001      	movs	r0, #1
 801a0c6:	e7a6      	b.n	801a016 <_vfiprintf_r+0xfe>
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	3401      	adds	r4, #1
 801a0cc:	9305      	str	r3, [sp, #20]
 801a0ce:	4619      	mov	r1, r3
 801a0d0:	f04f 0c0a 	mov.w	ip, #10
 801a0d4:	4620      	mov	r0, r4
 801a0d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0da:	3a30      	subs	r2, #48	; 0x30
 801a0dc:	2a09      	cmp	r2, #9
 801a0de:	d903      	bls.n	801a0e8 <_vfiprintf_r+0x1d0>
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d0c6      	beq.n	801a072 <_vfiprintf_r+0x15a>
 801a0e4:	9105      	str	r1, [sp, #20]
 801a0e6:	e7c4      	b.n	801a072 <_vfiprintf_r+0x15a>
 801a0e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a0ec:	4604      	mov	r4, r0
 801a0ee:	2301      	movs	r3, #1
 801a0f0:	e7f0      	b.n	801a0d4 <_vfiprintf_r+0x1bc>
 801a0f2:	ab03      	add	r3, sp, #12
 801a0f4:	9300      	str	r3, [sp, #0]
 801a0f6:	462a      	mov	r2, r5
 801a0f8:	4b12      	ldr	r3, [pc, #72]	; (801a144 <_vfiprintf_r+0x22c>)
 801a0fa:	a904      	add	r1, sp, #16
 801a0fc:	4630      	mov	r0, r6
 801a0fe:	f7fd fbd3 	bl	80178a8 <_printf_float>
 801a102:	4607      	mov	r7, r0
 801a104:	1c78      	adds	r0, r7, #1
 801a106:	d1d6      	bne.n	801a0b6 <_vfiprintf_r+0x19e>
 801a108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a10a:	07d9      	lsls	r1, r3, #31
 801a10c:	d405      	bmi.n	801a11a <_vfiprintf_r+0x202>
 801a10e:	89ab      	ldrh	r3, [r5, #12]
 801a110:	059a      	lsls	r2, r3, #22
 801a112:	d402      	bmi.n	801a11a <_vfiprintf_r+0x202>
 801a114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a116:	f7fe fa76 	bl	8018606 <__retarget_lock_release_recursive>
 801a11a:	89ab      	ldrh	r3, [r5, #12]
 801a11c:	065b      	lsls	r3, r3, #25
 801a11e:	f53f af1d 	bmi.w	8019f5c <_vfiprintf_r+0x44>
 801a122:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a124:	e71c      	b.n	8019f60 <_vfiprintf_r+0x48>
 801a126:	ab03      	add	r3, sp, #12
 801a128:	9300      	str	r3, [sp, #0]
 801a12a:	462a      	mov	r2, r5
 801a12c:	4b05      	ldr	r3, [pc, #20]	; (801a144 <_vfiprintf_r+0x22c>)
 801a12e:	a904      	add	r1, sp, #16
 801a130:	4630      	mov	r0, r6
 801a132:	f7fd fe5d 	bl	8017df0 <_printf_i>
 801a136:	e7e4      	b.n	801a102 <_vfiprintf_r+0x1ea>
 801a138:	0801ac94 	.word	0x0801ac94
 801a13c:	0801ac9e 	.word	0x0801ac9e
 801a140:	080178a9 	.word	0x080178a9
 801a144:	08019ef3 	.word	0x08019ef3
 801a148:	0801ac9a 	.word	0x0801ac9a

0801a14c <__sflush_r>:
 801a14c:	898a      	ldrh	r2, [r1, #12]
 801a14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a152:	4605      	mov	r5, r0
 801a154:	0710      	lsls	r0, r2, #28
 801a156:	460c      	mov	r4, r1
 801a158:	d458      	bmi.n	801a20c <__sflush_r+0xc0>
 801a15a:	684b      	ldr	r3, [r1, #4]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	dc05      	bgt.n	801a16c <__sflush_r+0x20>
 801a160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a162:	2b00      	cmp	r3, #0
 801a164:	dc02      	bgt.n	801a16c <__sflush_r+0x20>
 801a166:	2000      	movs	r0, #0
 801a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a16e:	2e00      	cmp	r6, #0
 801a170:	d0f9      	beq.n	801a166 <__sflush_r+0x1a>
 801a172:	2300      	movs	r3, #0
 801a174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a178:	682f      	ldr	r7, [r5, #0]
 801a17a:	6a21      	ldr	r1, [r4, #32]
 801a17c:	602b      	str	r3, [r5, #0]
 801a17e:	d032      	beq.n	801a1e6 <__sflush_r+0x9a>
 801a180:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a182:	89a3      	ldrh	r3, [r4, #12]
 801a184:	075a      	lsls	r2, r3, #29
 801a186:	d505      	bpl.n	801a194 <__sflush_r+0x48>
 801a188:	6863      	ldr	r3, [r4, #4]
 801a18a:	1ac0      	subs	r0, r0, r3
 801a18c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a18e:	b10b      	cbz	r3, 801a194 <__sflush_r+0x48>
 801a190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a192:	1ac0      	subs	r0, r0, r3
 801a194:	2300      	movs	r3, #0
 801a196:	4602      	mov	r2, r0
 801a198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a19a:	6a21      	ldr	r1, [r4, #32]
 801a19c:	4628      	mov	r0, r5
 801a19e:	47b0      	blx	r6
 801a1a0:	1c43      	adds	r3, r0, #1
 801a1a2:	89a3      	ldrh	r3, [r4, #12]
 801a1a4:	d106      	bne.n	801a1b4 <__sflush_r+0x68>
 801a1a6:	6829      	ldr	r1, [r5, #0]
 801a1a8:	291d      	cmp	r1, #29
 801a1aa:	d82b      	bhi.n	801a204 <__sflush_r+0xb8>
 801a1ac:	4a29      	ldr	r2, [pc, #164]	; (801a254 <__sflush_r+0x108>)
 801a1ae:	410a      	asrs	r2, r1
 801a1b0:	07d6      	lsls	r6, r2, #31
 801a1b2:	d427      	bmi.n	801a204 <__sflush_r+0xb8>
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	6062      	str	r2, [r4, #4]
 801a1b8:	04d9      	lsls	r1, r3, #19
 801a1ba:	6922      	ldr	r2, [r4, #16]
 801a1bc:	6022      	str	r2, [r4, #0]
 801a1be:	d504      	bpl.n	801a1ca <__sflush_r+0x7e>
 801a1c0:	1c42      	adds	r2, r0, #1
 801a1c2:	d101      	bne.n	801a1c8 <__sflush_r+0x7c>
 801a1c4:	682b      	ldr	r3, [r5, #0]
 801a1c6:	b903      	cbnz	r3, 801a1ca <__sflush_r+0x7e>
 801a1c8:	6560      	str	r0, [r4, #84]	; 0x54
 801a1ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1cc:	602f      	str	r7, [r5, #0]
 801a1ce:	2900      	cmp	r1, #0
 801a1d0:	d0c9      	beq.n	801a166 <__sflush_r+0x1a>
 801a1d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1d6:	4299      	cmp	r1, r3
 801a1d8:	d002      	beq.n	801a1e0 <__sflush_r+0x94>
 801a1da:	4628      	mov	r0, r5
 801a1dc:	f7ff f89e 	bl	801931c <_free_r>
 801a1e0:	2000      	movs	r0, #0
 801a1e2:	6360      	str	r0, [r4, #52]	; 0x34
 801a1e4:	e7c0      	b.n	801a168 <__sflush_r+0x1c>
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	4628      	mov	r0, r5
 801a1ea:	47b0      	blx	r6
 801a1ec:	1c41      	adds	r1, r0, #1
 801a1ee:	d1c8      	bne.n	801a182 <__sflush_r+0x36>
 801a1f0:	682b      	ldr	r3, [r5, #0]
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d0c5      	beq.n	801a182 <__sflush_r+0x36>
 801a1f6:	2b1d      	cmp	r3, #29
 801a1f8:	d001      	beq.n	801a1fe <__sflush_r+0xb2>
 801a1fa:	2b16      	cmp	r3, #22
 801a1fc:	d101      	bne.n	801a202 <__sflush_r+0xb6>
 801a1fe:	602f      	str	r7, [r5, #0]
 801a200:	e7b1      	b.n	801a166 <__sflush_r+0x1a>
 801a202:	89a3      	ldrh	r3, [r4, #12]
 801a204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a208:	81a3      	strh	r3, [r4, #12]
 801a20a:	e7ad      	b.n	801a168 <__sflush_r+0x1c>
 801a20c:	690f      	ldr	r7, [r1, #16]
 801a20e:	2f00      	cmp	r7, #0
 801a210:	d0a9      	beq.n	801a166 <__sflush_r+0x1a>
 801a212:	0793      	lsls	r3, r2, #30
 801a214:	680e      	ldr	r6, [r1, #0]
 801a216:	bf08      	it	eq
 801a218:	694b      	ldreq	r3, [r1, #20]
 801a21a:	600f      	str	r7, [r1, #0]
 801a21c:	bf18      	it	ne
 801a21e:	2300      	movne	r3, #0
 801a220:	eba6 0807 	sub.w	r8, r6, r7
 801a224:	608b      	str	r3, [r1, #8]
 801a226:	f1b8 0f00 	cmp.w	r8, #0
 801a22a:	dd9c      	ble.n	801a166 <__sflush_r+0x1a>
 801a22c:	6a21      	ldr	r1, [r4, #32]
 801a22e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a230:	4643      	mov	r3, r8
 801a232:	463a      	mov	r2, r7
 801a234:	4628      	mov	r0, r5
 801a236:	47b0      	blx	r6
 801a238:	2800      	cmp	r0, #0
 801a23a:	dc06      	bgt.n	801a24a <__sflush_r+0xfe>
 801a23c:	89a3      	ldrh	r3, [r4, #12]
 801a23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a242:	81a3      	strh	r3, [r4, #12]
 801a244:	f04f 30ff 	mov.w	r0, #4294967295
 801a248:	e78e      	b.n	801a168 <__sflush_r+0x1c>
 801a24a:	4407      	add	r7, r0
 801a24c:	eba8 0800 	sub.w	r8, r8, r0
 801a250:	e7e9      	b.n	801a226 <__sflush_r+0xda>
 801a252:	bf00      	nop
 801a254:	dfbffffe 	.word	0xdfbffffe

0801a258 <_fflush_r>:
 801a258:	b538      	push	{r3, r4, r5, lr}
 801a25a:	690b      	ldr	r3, [r1, #16]
 801a25c:	4605      	mov	r5, r0
 801a25e:	460c      	mov	r4, r1
 801a260:	b913      	cbnz	r3, 801a268 <_fflush_r+0x10>
 801a262:	2500      	movs	r5, #0
 801a264:	4628      	mov	r0, r5
 801a266:	bd38      	pop	{r3, r4, r5, pc}
 801a268:	b118      	cbz	r0, 801a272 <_fflush_r+0x1a>
 801a26a:	6a03      	ldr	r3, [r0, #32]
 801a26c:	b90b      	cbnz	r3, 801a272 <_fflush_r+0x1a>
 801a26e:	f7fd ff5b 	bl	8018128 <__sinit>
 801a272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d0f3      	beq.n	801a262 <_fflush_r+0xa>
 801a27a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a27c:	07d0      	lsls	r0, r2, #31
 801a27e:	d404      	bmi.n	801a28a <_fflush_r+0x32>
 801a280:	0599      	lsls	r1, r3, #22
 801a282:	d402      	bmi.n	801a28a <_fflush_r+0x32>
 801a284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a286:	f7fe f9bd 	bl	8018604 <__retarget_lock_acquire_recursive>
 801a28a:	4628      	mov	r0, r5
 801a28c:	4621      	mov	r1, r4
 801a28e:	f7ff ff5d 	bl	801a14c <__sflush_r>
 801a292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a294:	07da      	lsls	r2, r3, #31
 801a296:	4605      	mov	r5, r0
 801a298:	d4e4      	bmi.n	801a264 <_fflush_r+0xc>
 801a29a:	89a3      	ldrh	r3, [r4, #12]
 801a29c:	059b      	lsls	r3, r3, #22
 801a29e:	d4e1      	bmi.n	801a264 <_fflush_r+0xc>
 801a2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a2a2:	f7fe f9b0 	bl	8018606 <__retarget_lock_release_recursive>
 801a2a6:	e7dd      	b.n	801a264 <_fflush_r+0xc>

0801a2a8 <__swhatbuf_r>:
 801a2a8:	b570      	push	{r4, r5, r6, lr}
 801a2aa:	460c      	mov	r4, r1
 801a2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2b0:	2900      	cmp	r1, #0
 801a2b2:	b096      	sub	sp, #88	; 0x58
 801a2b4:	4615      	mov	r5, r2
 801a2b6:	461e      	mov	r6, r3
 801a2b8:	da0d      	bge.n	801a2d6 <__swhatbuf_r+0x2e>
 801a2ba:	89a3      	ldrh	r3, [r4, #12]
 801a2bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a2c0:	f04f 0100 	mov.w	r1, #0
 801a2c4:	bf0c      	ite	eq
 801a2c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a2ca:	2340      	movne	r3, #64	; 0x40
 801a2cc:	2000      	movs	r0, #0
 801a2ce:	6031      	str	r1, [r6, #0]
 801a2d0:	602b      	str	r3, [r5, #0]
 801a2d2:	b016      	add	sp, #88	; 0x58
 801a2d4:	bd70      	pop	{r4, r5, r6, pc}
 801a2d6:	466a      	mov	r2, sp
 801a2d8:	f000 f862 	bl	801a3a0 <_fstat_r>
 801a2dc:	2800      	cmp	r0, #0
 801a2de:	dbec      	blt.n	801a2ba <__swhatbuf_r+0x12>
 801a2e0:	9901      	ldr	r1, [sp, #4]
 801a2e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a2e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a2ea:	4259      	negs	r1, r3
 801a2ec:	4159      	adcs	r1, r3
 801a2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a2f2:	e7eb      	b.n	801a2cc <__swhatbuf_r+0x24>

0801a2f4 <__smakebuf_r>:
 801a2f4:	898b      	ldrh	r3, [r1, #12]
 801a2f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a2f8:	079d      	lsls	r5, r3, #30
 801a2fa:	4606      	mov	r6, r0
 801a2fc:	460c      	mov	r4, r1
 801a2fe:	d507      	bpl.n	801a310 <__smakebuf_r+0x1c>
 801a300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a304:	6023      	str	r3, [r4, #0]
 801a306:	6123      	str	r3, [r4, #16]
 801a308:	2301      	movs	r3, #1
 801a30a:	6163      	str	r3, [r4, #20]
 801a30c:	b002      	add	sp, #8
 801a30e:	bd70      	pop	{r4, r5, r6, pc}
 801a310:	ab01      	add	r3, sp, #4
 801a312:	466a      	mov	r2, sp
 801a314:	f7ff ffc8 	bl	801a2a8 <__swhatbuf_r>
 801a318:	9900      	ldr	r1, [sp, #0]
 801a31a:	4605      	mov	r5, r0
 801a31c:	4630      	mov	r0, r6
 801a31e:	f7ff f871 	bl	8019404 <_malloc_r>
 801a322:	b948      	cbnz	r0, 801a338 <__smakebuf_r+0x44>
 801a324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a328:	059a      	lsls	r2, r3, #22
 801a32a:	d4ef      	bmi.n	801a30c <__smakebuf_r+0x18>
 801a32c:	f023 0303 	bic.w	r3, r3, #3
 801a330:	f043 0302 	orr.w	r3, r3, #2
 801a334:	81a3      	strh	r3, [r4, #12]
 801a336:	e7e3      	b.n	801a300 <__smakebuf_r+0xc>
 801a338:	89a3      	ldrh	r3, [r4, #12]
 801a33a:	6020      	str	r0, [r4, #0]
 801a33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a340:	81a3      	strh	r3, [r4, #12]
 801a342:	9b00      	ldr	r3, [sp, #0]
 801a344:	6163      	str	r3, [r4, #20]
 801a346:	9b01      	ldr	r3, [sp, #4]
 801a348:	6120      	str	r0, [r4, #16]
 801a34a:	b15b      	cbz	r3, 801a364 <__smakebuf_r+0x70>
 801a34c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a350:	4630      	mov	r0, r6
 801a352:	f000 f837 	bl	801a3c4 <_isatty_r>
 801a356:	b128      	cbz	r0, 801a364 <__smakebuf_r+0x70>
 801a358:	89a3      	ldrh	r3, [r4, #12]
 801a35a:	f023 0303 	bic.w	r3, r3, #3
 801a35e:	f043 0301 	orr.w	r3, r3, #1
 801a362:	81a3      	strh	r3, [r4, #12]
 801a364:	89a3      	ldrh	r3, [r4, #12]
 801a366:	431d      	orrs	r5, r3
 801a368:	81a5      	strh	r5, [r4, #12]
 801a36a:	e7cf      	b.n	801a30c <__smakebuf_r+0x18>

0801a36c <memmove>:
 801a36c:	4288      	cmp	r0, r1
 801a36e:	b510      	push	{r4, lr}
 801a370:	eb01 0402 	add.w	r4, r1, r2
 801a374:	d902      	bls.n	801a37c <memmove+0x10>
 801a376:	4284      	cmp	r4, r0
 801a378:	4623      	mov	r3, r4
 801a37a:	d807      	bhi.n	801a38c <memmove+0x20>
 801a37c:	1e43      	subs	r3, r0, #1
 801a37e:	42a1      	cmp	r1, r4
 801a380:	d008      	beq.n	801a394 <memmove+0x28>
 801a382:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a386:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a38a:	e7f8      	b.n	801a37e <memmove+0x12>
 801a38c:	4402      	add	r2, r0
 801a38e:	4601      	mov	r1, r0
 801a390:	428a      	cmp	r2, r1
 801a392:	d100      	bne.n	801a396 <memmove+0x2a>
 801a394:	bd10      	pop	{r4, pc}
 801a396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a39a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a39e:	e7f7      	b.n	801a390 <memmove+0x24>

0801a3a0 <_fstat_r>:
 801a3a0:	b538      	push	{r3, r4, r5, lr}
 801a3a2:	4d07      	ldr	r5, [pc, #28]	; (801a3c0 <_fstat_r+0x20>)
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	4604      	mov	r4, r0
 801a3a8:	4608      	mov	r0, r1
 801a3aa:	4611      	mov	r1, r2
 801a3ac:	602b      	str	r3, [r5, #0]
 801a3ae:	f7e8 fc74 	bl	8002c9a <_fstat>
 801a3b2:	1c43      	adds	r3, r0, #1
 801a3b4:	d102      	bne.n	801a3bc <_fstat_r+0x1c>
 801a3b6:	682b      	ldr	r3, [r5, #0]
 801a3b8:	b103      	cbz	r3, 801a3bc <_fstat_r+0x1c>
 801a3ba:	6023      	str	r3, [r4, #0]
 801a3bc:	bd38      	pop	{r3, r4, r5, pc}
 801a3be:	bf00      	nop
 801a3c0:	2000b368 	.word	0x2000b368

0801a3c4 <_isatty_r>:
 801a3c4:	b538      	push	{r3, r4, r5, lr}
 801a3c6:	4d06      	ldr	r5, [pc, #24]	; (801a3e0 <_isatty_r+0x1c>)
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	4604      	mov	r4, r0
 801a3cc:	4608      	mov	r0, r1
 801a3ce:	602b      	str	r3, [r5, #0]
 801a3d0:	f7e8 fc73 	bl	8002cba <_isatty>
 801a3d4:	1c43      	adds	r3, r0, #1
 801a3d6:	d102      	bne.n	801a3de <_isatty_r+0x1a>
 801a3d8:	682b      	ldr	r3, [r5, #0]
 801a3da:	b103      	cbz	r3, 801a3de <_isatty_r+0x1a>
 801a3dc:	6023      	str	r3, [r4, #0]
 801a3de:	bd38      	pop	{r3, r4, r5, pc}
 801a3e0:	2000b368 	.word	0x2000b368

0801a3e4 <_sbrk_r>:
 801a3e4:	b538      	push	{r3, r4, r5, lr}
 801a3e6:	4d06      	ldr	r5, [pc, #24]	; (801a400 <_sbrk_r+0x1c>)
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	4604      	mov	r4, r0
 801a3ec:	4608      	mov	r0, r1
 801a3ee:	602b      	str	r3, [r5, #0]
 801a3f0:	f7e8 fc7c 	bl	8002cec <_sbrk>
 801a3f4:	1c43      	adds	r3, r0, #1
 801a3f6:	d102      	bne.n	801a3fe <_sbrk_r+0x1a>
 801a3f8:	682b      	ldr	r3, [r5, #0]
 801a3fa:	b103      	cbz	r3, 801a3fe <_sbrk_r+0x1a>
 801a3fc:	6023      	str	r3, [r4, #0]
 801a3fe:	bd38      	pop	{r3, r4, r5, pc}
 801a400:	2000b368 	.word	0x2000b368

0801a404 <__assert_func>:
 801a404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a406:	4614      	mov	r4, r2
 801a408:	461a      	mov	r2, r3
 801a40a:	4b09      	ldr	r3, [pc, #36]	; (801a430 <__assert_func+0x2c>)
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	4605      	mov	r5, r0
 801a410:	68d8      	ldr	r0, [r3, #12]
 801a412:	b14c      	cbz	r4, 801a428 <__assert_func+0x24>
 801a414:	4b07      	ldr	r3, [pc, #28]	; (801a434 <__assert_func+0x30>)
 801a416:	9100      	str	r1, [sp, #0]
 801a418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a41c:	4906      	ldr	r1, [pc, #24]	; (801a438 <__assert_func+0x34>)
 801a41e:	462b      	mov	r3, r5
 801a420:	f000 f872 	bl	801a508 <fiprintf>
 801a424:	f000 f882 	bl	801a52c <abort>
 801a428:	4b04      	ldr	r3, [pc, #16]	; (801a43c <__assert_func+0x38>)
 801a42a:	461c      	mov	r4, r3
 801a42c:	e7f3      	b.n	801a416 <__assert_func+0x12>
 801a42e:	bf00      	nop
 801a430:	200001a4 	.word	0x200001a4
 801a434:	0801acaf 	.word	0x0801acaf
 801a438:	0801acbc 	.word	0x0801acbc
 801a43c:	0801acea 	.word	0x0801acea

0801a440 <_calloc_r>:
 801a440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a442:	fba1 2402 	umull	r2, r4, r1, r2
 801a446:	b94c      	cbnz	r4, 801a45c <_calloc_r+0x1c>
 801a448:	4611      	mov	r1, r2
 801a44a:	9201      	str	r2, [sp, #4]
 801a44c:	f7fe ffda 	bl	8019404 <_malloc_r>
 801a450:	9a01      	ldr	r2, [sp, #4]
 801a452:	4605      	mov	r5, r0
 801a454:	b930      	cbnz	r0, 801a464 <_calloc_r+0x24>
 801a456:	4628      	mov	r0, r5
 801a458:	b003      	add	sp, #12
 801a45a:	bd30      	pop	{r4, r5, pc}
 801a45c:	220c      	movs	r2, #12
 801a45e:	6002      	str	r2, [r0, #0]
 801a460:	2500      	movs	r5, #0
 801a462:	e7f8      	b.n	801a456 <_calloc_r+0x16>
 801a464:	4621      	mov	r1, r4
 801a466:	f7fd fffb 	bl	8018460 <memset>
 801a46a:	e7f4      	b.n	801a456 <_calloc_r+0x16>

0801a46c <__ascii_mbtowc>:
 801a46c:	b082      	sub	sp, #8
 801a46e:	b901      	cbnz	r1, 801a472 <__ascii_mbtowc+0x6>
 801a470:	a901      	add	r1, sp, #4
 801a472:	b142      	cbz	r2, 801a486 <__ascii_mbtowc+0x1a>
 801a474:	b14b      	cbz	r3, 801a48a <__ascii_mbtowc+0x1e>
 801a476:	7813      	ldrb	r3, [r2, #0]
 801a478:	600b      	str	r3, [r1, #0]
 801a47a:	7812      	ldrb	r2, [r2, #0]
 801a47c:	1e10      	subs	r0, r2, #0
 801a47e:	bf18      	it	ne
 801a480:	2001      	movne	r0, #1
 801a482:	b002      	add	sp, #8
 801a484:	4770      	bx	lr
 801a486:	4610      	mov	r0, r2
 801a488:	e7fb      	b.n	801a482 <__ascii_mbtowc+0x16>
 801a48a:	f06f 0001 	mvn.w	r0, #1
 801a48e:	e7f8      	b.n	801a482 <__ascii_mbtowc+0x16>

0801a490 <_realloc_r>:
 801a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a494:	4680      	mov	r8, r0
 801a496:	4614      	mov	r4, r2
 801a498:	460e      	mov	r6, r1
 801a49a:	b921      	cbnz	r1, 801a4a6 <_realloc_r+0x16>
 801a49c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a0:	4611      	mov	r1, r2
 801a4a2:	f7fe bfaf 	b.w	8019404 <_malloc_r>
 801a4a6:	b92a      	cbnz	r2, 801a4b4 <_realloc_r+0x24>
 801a4a8:	f7fe ff38 	bl	801931c <_free_r>
 801a4ac:	4625      	mov	r5, r4
 801a4ae:	4628      	mov	r0, r5
 801a4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4b4:	f000 f841 	bl	801a53a <_malloc_usable_size_r>
 801a4b8:	4284      	cmp	r4, r0
 801a4ba:	4607      	mov	r7, r0
 801a4bc:	d802      	bhi.n	801a4c4 <_realloc_r+0x34>
 801a4be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a4c2:	d812      	bhi.n	801a4ea <_realloc_r+0x5a>
 801a4c4:	4621      	mov	r1, r4
 801a4c6:	4640      	mov	r0, r8
 801a4c8:	f7fe ff9c 	bl	8019404 <_malloc_r>
 801a4cc:	4605      	mov	r5, r0
 801a4ce:	2800      	cmp	r0, #0
 801a4d0:	d0ed      	beq.n	801a4ae <_realloc_r+0x1e>
 801a4d2:	42bc      	cmp	r4, r7
 801a4d4:	4622      	mov	r2, r4
 801a4d6:	4631      	mov	r1, r6
 801a4d8:	bf28      	it	cs
 801a4da:	463a      	movcs	r2, r7
 801a4dc:	f7fe f894 	bl	8018608 <memcpy>
 801a4e0:	4631      	mov	r1, r6
 801a4e2:	4640      	mov	r0, r8
 801a4e4:	f7fe ff1a 	bl	801931c <_free_r>
 801a4e8:	e7e1      	b.n	801a4ae <_realloc_r+0x1e>
 801a4ea:	4635      	mov	r5, r6
 801a4ec:	e7df      	b.n	801a4ae <_realloc_r+0x1e>

0801a4ee <__ascii_wctomb>:
 801a4ee:	b149      	cbz	r1, 801a504 <__ascii_wctomb+0x16>
 801a4f0:	2aff      	cmp	r2, #255	; 0xff
 801a4f2:	bf85      	ittet	hi
 801a4f4:	238a      	movhi	r3, #138	; 0x8a
 801a4f6:	6003      	strhi	r3, [r0, #0]
 801a4f8:	700a      	strbls	r2, [r1, #0]
 801a4fa:	f04f 30ff 	movhi.w	r0, #4294967295
 801a4fe:	bf98      	it	ls
 801a500:	2001      	movls	r0, #1
 801a502:	4770      	bx	lr
 801a504:	4608      	mov	r0, r1
 801a506:	4770      	bx	lr

0801a508 <fiprintf>:
 801a508:	b40e      	push	{r1, r2, r3}
 801a50a:	b503      	push	{r0, r1, lr}
 801a50c:	4601      	mov	r1, r0
 801a50e:	ab03      	add	r3, sp, #12
 801a510:	4805      	ldr	r0, [pc, #20]	; (801a528 <fiprintf+0x20>)
 801a512:	f853 2b04 	ldr.w	r2, [r3], #4
 801a516:	6800      	ldr	r0, [r0, #0]
 801a518:	9301      	str	r3, [sp, #4]
 801a51a:	f7ff fcfd 	bl	8019f18 <_vfiprintf_r>
 801a51e:	b002      	add	sp, #8
 801a520:	f85d eb04 	ldr.w	lr, [sp], #4
 801a524:	b003      	add	sp, #12
 801a526:	4770      	bx	lr
 801a528:	200001a4 	.word	0x200001a4

0801a52c <abort>:
 801a52c:	b508      	push	{r3, lr}
 801a52e:	2006      	movs	r0, #6
 801a530:	f000 f834 	bl	801a59c <raise>
 801a534:	2001      	movs	r0, #1
 801a536:	f7e8 fb61 	bl	8002bfc <_exit>

0801a53a <_malloc_usable_size_r>:
 801a53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a53e:	1f18      	subs	r0, r3, #4
 801a540:	2b00      	cmp	r3, #0
 801a542:	bfbc      	itt	lt
 801a544:	580b      	ldrlt	r3, [r1, r0]
 801a546:	18c0      	addlt	r0, r0, r3
 801a548:	4770      	bx	lr

0801a54a <_raise_r>:
 801a54a:	291f      	cmp	r1, #31
 801a54c:	b538      	push	{r3, r4, r5, lr}
 801a54e:	4604      	mov	r4, r0
 801a550:	460d      	mov	r5, r1
 801a552:	d904      	bls.n	801a55e <_raise_r+0x14>
 801a554:	2316      	movs	r3, #22
 801a556:	6003      	str	r3, [r0, #0]
 801a558:	f04f 30ff 	mov.w	r0, #4294967295
 801a55c:	bd38      	pop	{r3, r4, r5, pc}
 801a55e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a560:	b112      	cbz	r2, 801a568 <_raise_r+0x1e>
 801a562:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a566:	b94b      	cbnz	r3, 801a57c <_raise_r+0x32>
 801a568:	4620      	mov	r0, r4
 801a56a:	f000 f831 	bl	801a5d0 <_getpid_r>
 801a56e:	462a      	mov	r2, r5
 801a570:	4601      	mov	r1, r0
 801a572:	4620      	mov	r0, r4
 801a574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a578:	f000 b818 	b.w	801a5ac <_kill_r>
 801a57c:	2b01      	cmp	r3, #1
 801a57e:	d00a      	beq.n	801a596 <_raise_r+0x4c>
 801a580:	1c59      	adds	r1, r3, #1
 801a582:	d103      	bne.n	801a58c <_raise_r+0x42>
 801a584:	2316      	movs	r3, #22
 801a586:	6003      	str	r3, [r0, #0]
 801a588:	2001      	movs	r0, #1
 801a58a:	e7e7      	b.n	801a55c <_raise_r+0x12>
 801a58c:	2400      	movs	r4, #0
 801a58e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a592:	4628      	mov	r0, r5
 801a594:	4798      	blx	r3
 801a596:	2000      	movs	r0, #0
 801a598:	e7e0      	b.n	801a55c <_raise_r+0x12>
	...

0801a59c <raise>:
 801a59c:	4b02      	ldr	r3, [pc, #8]	; (801a5a8 <raise+0xc>)
 801a59e:	4601      	mov	r1, r0
 801a5a0:	6818      	ldr	r0, [r3, #0]
 801a5a2:	f7ff bfd2 	b.w	801a54a <_raise_r>
 801a5a6:	bf00      	nop
 801a5a8:	200001a4 	.word	0x200001a4

0801a5ac <_kill_r>:
 801a5ac:	b538      	push	{r3, r4, r5, lr}
 801a5ae:	4d07      	ldr	r5, [pc, #28]	; (801a5cc <_kill_r+0x20>)
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	4608      	mov	r0, r1
 801a5b6:	4611      	mov	r1, r2
 801a5b8:	602b      	str	r3, [r5, #0]
 801a5ba:	f7e8 fb0f 	bl	8002bdc <_kill>
 801a5be:	1c43      	adds	r3, r0, #1
 801a5c0:	d102      	bne.n	801a5c8 <_kill_r+0x1c>
 801a5c2:	682b      	ldr	r3, [r5, #0]
 801a5c4:	b103      	cbz	r3, 801a5c8 <_kill_r+0x1c>
 801a5c6:	6023      	str	r3, [r4, #0]
 801a5c8:	bd38      	pop	{r3, r4, r5, pc}
 801a5ca:	bf00      	nop
 801a5cc:	2000b368 	.word	0x2000b368

0801a5d0 <_getpid_r>:
 801a5d0:	f7e8 bafc 	b.w	8002bcc <_getpid>

0801a5d4 <_init>:
 801a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5d6:	bf00      	nop
 801a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5da:	bc08      	pop	{r3}
 801a5dc:	469e      	mov	lr, r3
 801a5de:	4770      	bx	lr

0801a5e0 <_fini>:
 801a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5e2:	bf00      	nop
 801a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5e6:	bc08      	pop	{r3}
 801a5e8:	469e      	mov	lr, r3
 801a5ea:	4770      	bx	lr
